os . kill ( os . getpid ( ) , <name5> . SIGUSR1 )	send a <name5> signal.SIGUSR1 to the current process
os . kill ( os . getpid ( ) , <name1> . SIGUSR1 )	send a <name1> signal.SIGUSR1 to the current process
bytes . fromhex ( <val5>   ) . <name3> ( 'utf-8'   )	<name3> a hex string <val5> to UTF -8 .
bytes . fromhex ( <val1>   ) . <name2> ( 'utf-8'   )	<name2> a hex string <val1> to UTF -8 .
<name4> ( x == <name2> [ 0 ] for x <name1> <name2> )	check if <name4> elements <name1> list <name2> are identical
<name1> ( x == <name2> [ 0 ] for x <name3> <name2> )	check if <name1> elements <name3> list <name2> are identical
print ( '%*s : %*s'     % ( <val5> , <val2>   , <val5> , <val6>   ) )	format number of spaces between strings <val2> , : and <val6> to be <val5>
print ( '%*s : %*s'     % ( <val1> , <val2>   , <val1> , <val3>   ) )	format number of spaces between strings <val2> , : and <val3> to be <val1>
res = {  k : v for k , v <name1> list ( <name4> . items ( ) ) if v is not <name6> }	get rid of <name6> values <name1> dictionary <name4>
res = {  k : v for k , v <name1> list ( <name2> . items ( ) ) if v is not <name3> }	get rid of <name3> values <name1> dictionary <name2>
res = dict ( ( k , v ) for k , v <name5> <name2> . items ( ) if v is not <name1> )	get rid of <name1> values <name5> dictionary <name2>
res = dict ( ( k , v ) for k , v <name1> <name2> . items ( ) if v is not <name3> )	get rid of <name3> values <name1> dictionary <name2>
subprocess . check_output ( <val4>   , shell = True )	capture final output of a chain of system commands <val4>
subprocess . check_output ( <val1>   , shell = True )	capture final output of a chain of system commands <val1>
'' '' ' ' '' ' ' '' ' . join ( [ ' <name6> ' , ' b ' , ' c ' ] )'	concatenate <name6> list of strings ['a', 'b', 'c']
'' '' ' ' '' ' ' '' ' . join ( [ ' <name1> ' , ' b ' , ' c ' ] )'	concatenate <name1> list of strings ['a', 'b', 'c']
pd . Series ( list ( set ( <name3> ) . <name2> ( set ( <name4> ) ) ) )	find <name2> data between series <name3> and series <name4>
pd . Series ( list ( set ( <name1> ) . <name2> ( set ( <name3> ) ) ) )	find <name2> data between series <name1> and series <name3>
<name3> . send ( 'HTTP/1.0 200 OK\r\n'   )	sending http headers to <name3>
<name1> . send ( 'HTTP/1.0 200 OK\r\n'   )	sending http headers to <name1>
then = <name1> . <name1> . strptime ( <name6> , '%Y-%m-%d'   ) . <name2> ( )	Format a <name1> string <name6> to extract <name2> only
then = <name1> . <name1> . strptime ( <name2> , '%Y-%m-%d'   ) . <name3> ( )	Format a <name1> string <name2> to extract <name3> only
<name4> . <name5> ( '\n'   )	<name5> a multi - line string <name4> into separate strings
<name1> . <name2> ( '\n'   )	<name2> a multi - line string <name1> into separate strings
<val5>   . split ( <val1>   )	Split a multi - line string <val5> by new line character <val1>
<val1>   . split ( <val2>   )	Split a multi - line string <val1> by new line character <val2>
<val6> <val6> ' ' <val2> ' ' <val6> ' . join ( str ( x ) for x in b )'	'concatenate elements of list `b` by a colon ' <val2> <val6>
<val1> <val1> ' ' <val2> ' ' <val1> ' . join ( str ( x ) for x in b )'	'concatenate elements of list `b` by a colon ' <val2> <val1>
<name3> . objects . filter ( ) [ : 1 ] . <name4> ( )	<name4> the first object from a queryset in django model <name3>
<name1> . objects . filter ( ) [ : 1 ] . <name2> ( )	<name2> the first object from a queryset in django model <name1>
a . <name6> ( axis = 1 )	Calculate <name6> over all rows of 2 D numpy array
a . <name1> ( axis = 1 )	Calculate <name1> over all rows of 2 D numpy array
<name2> . simplefilter ( <val6>   )	enable <name2> using action <val6>
<name1> . simplefilter ( <val2>   )	enable <name1> using action <val2>
print ( <val5>   . join ( map ( str , <name4> ) ) )	concatenate items of list <name4> with a space <val5>
print ( <val1>   . join ( map ( str , <name2> ) ) )	concatenate items of list <name2> with a space <val1>
subprocess . call ( [ 'python.exe'   , <val5>   , <val1>   ] )	run script <val5> with argument <val1> on terminal using python executable
subprocess . call ( [ 'python.exe'   , <val1>   , <val2>   ] )	run script <val1> with argument <val2> on terminal using python executable
<name3> = <name5> ( <name1> . replace ( ','   , ''   ) )	convert a string <name1> with dot and comma into a <name5> number <name3>
<name1> = <name2> ( <name3> . replace ( ','   , ''   ) )	convert a string <name3> with dot and comma into a <name2> number <name1>
float ( <val5>   . replace ( ','   , ''   ) )	convert a string <val5> with dot and comma into a floating number
float ( <val1>   . replace ( ','   , ''   ) )	convert a string <val1> with dot and comma into a floating number
sys . path . append ( '/path/to/whatever'   )	set pythonpath in python script .
re . <name2> ( <val6>   , <val5>   )	<name2> string <val5> using a regex <val6>
re . <name1> ( <val2>   , <val3>   )	<name1> string <val3> using a regex <val2>
<name6> = <name5> ( <val4>   , 'a'   )	<name5> a <name6> <val4> in append mode
<name1> = <name2> ( <val3>   , 'a'   )	<name2> a <name1> <val3> in append mode
urllib . request . urlretrieve ( <val2>   , <val1>   )	'download a file ' <val2> ' over HTTP and save to ' <val1> ''
urllib . request . urlretrieve ( <val1>   , <val2>   )	'download a file ' <val1> ' over HTTP and save to ' <val2> ''
r = requests . get ( <name6> )	download a file <name6> over HTTP
r = requests . get ( <name1> )	download a file <name1> over HTTP
<name6> . add_argument ( <val1>   , <name5> = 'version'   , <name3> = <val4>   )	argparse add argument with flag <val1> and <name3> <name5> of <val4> to <name6> <name6>
<name1> . add_argument ( <val2>   , <name3> = 'version'   , <name4> = <val5>   )	argparse add argument with flag <val2> and <name4> <name3> of <val5> to <name1> <name1>
{  i : <name4> [ i ] for i in <name4> if i != <val3>  }	remove key <val3> from dictionary <name4>
{  i : <name1> [ i ] for i in <name1> if i != <val2>  }	remove key <val2> from dictionary <name1>
pd . merge ( split_df , csv_df , on = [ <val3>   ] , suffixes = ( '_left'   , '_right'   ) )	'Create new DataFrame object by merging columns ' <val3> ' of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively'
pd . merge ( split_df , csv_df , on = [ <val1>   ] , suffixes = ( '_left'   , '_right'   ) )	'Create new DataFrame object by merging columns ' <val1> ' of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively'
<name4> . split ( ' '   , <val2> )	Split a string <name4> by space with <val2> splits
<name1> . split ( ' '   , <val2> )	Split a string <name1> by space with <val2> splits
<name2> ( 'Enter your input:'   )	read keyboard - <name2>
<name1> ( 'Enter your input:'   )	read keyboard - <name1>
<name6> . run ( <name4> = True )	enable <name4> mode on Flask application <name6>
<name1> . run ( <name2> = True )	enable <name2> mode on Flask application <name1>
pickle . dump ( <name2> , open ( <val4>   , 'wb'   ) )	python save list <name2> to file object <val4>
pickle . dump ( <name1> , open ( <val2>   , 'wb'   ) )	python save list <name1> to file object <val2>
<name1> . tensordot ( <name6> , <name5> , axes = [ 1 , 1 ] ) . swapaxes ( 0 , 1 )	Multiply a matrix <name6> with a 3 d tensor <name5> in <name1>
<name1> . tensordot ( <name2> , <name3> , axes = [ 1 , 1 ] ) . swapaxes ( 0 , 1 )	Multiply a matrix <name2> with a 3 d tensor <name3> in <name1>
numpy . zeros ( ( <val5> , <val5> , <val5> ) )	Create <val5> d array of zeroes of size (3,3,3)
numpy . zeros ( ( <val1> , <val1> , <val1> ) )	Create <val1> d array of zeroes of size (3,3,3)
'' '' ' ' ' ' ' ' '' ' . join ( content . split ( '   ' ) [ : -1 ] )'	cut off the last word of a sentence content
<name2> = np . asarray ( <name2> ) . reshape ( 1 , -1 ) [ ( 0 ) , : ]	convert scalar <name2> to array
<name1> = np . asarray ( <name1> ) . reshape ( 1 , -1 ) [ ( 0 ) , : ]	convert scalar <name1> to array
<name4> ( <name4> ( i ) if isinstance ( i , <name3> ) else i for i in <name1> )	<name4> all elements of nested <name3> <name1>
<name1> ( <name1> ( i ) if isinstance ( i , <name2> ) else i for i in <name3> )	<name1> all elements of nested <name2> <name3>
struct . unpack ( '!f'   , <val2>   . decode ( 'hex'   ) ) [ 0 ]	convert hex string <val2> to a float number
struct . unpack ( '!f'   , <val1>   . decode ( 'hex'   ) ) [ 0 ]	convert hex string <val1> to a float number
<name6> . update ( ( x , y * <val2> ) <name5> x , y <name4> list ( <name6> . items ( ) ) )	Multiple each value by <val2> <name5> all keys <name4> a dictionary <name6>
<name1> . update ( ( x , y * <val2> ) <name3> x , y <name4> list ( <name1> . items ( ) ) )	Multiple each value by <val2> <name3> all keys <name4> a dictionary <name1>
subprocess . call ( <val6>   , shell = True )	running bash script <val6>
subprocess . call ( <val1>   , shell = True )	running bash script <val1>
'' '' ' ' <val1> ' ' '' ' . join ( l )'	Join elements of list l with a comma <val1>
<name1> = ','   . join ( map ( str , <name1> ) )	make a comma - separated string from a list <name1>
<name1> ( reversed ( <name1> ( range ( <val6> ) ) ) )	reverse the <name1> that contains 1 to <val6>
<name1> ( reversed ( <name1> ( range ( <val2> ) ) ) )	reverse the <name1> that contains 1 to <val2>
print ( <val3>   . replace ( <val6>   , ''   ) )	remove substring <val6> from a string <val3>
print ( <val1>   . replace ( <val2>   , ''   ) )	remove substring <val2> from a string <val1>
'' '' ' ' <val6> ' ' '' ' . join ( s . split ( ' . ' ) [ : : -1 ] )'	Reverse the order of words , delimited by <val6> , in string s
'' '' ' ' <val1> ' ' '' ' . join ( s . split ( ' . ' ) [ : : -1 ] )'	Reverse the order of words , delimited by <val1> , in string s
datetime . datetime . fromtimestamp ( <name1> ) . strftime ( <val4>   )	convert epoch time represented as milliseconds <name1> to string using format <val4>
datetime . datetime . fromtimestamp ( <name1> ) . strftime ( <val2>   )	convert epoch time represented as milliseconds <name1> to string using format <val2>
<name5> . strftime ( <val3>   , <name5> . gmtime ( 1236472051807 / 1000.0 ) )	parse milliseconds epoch <name5> '1236472051807' to format <val3>
<name1> . strftime ( <val2>   , <name1> . gmtime ( 1236472051807 / 1000.0 ) )	parse milliseconds epoch <name1> '1236472051807' to format <val2>
( datetime . datetime . now ( ) - datetime . timedelta ( <name1> = <val3> ) ) . <name2> ( )	get the <name2> <val3> <name1> before the current <name2>
( datetime . datetime . now ( ) - datetime . timedelta ( <name1> = <val2> ) ) . <name3> ( )	get the <name3> <val2> <name1> before the current <name3>
print ( <name1> ( row [ <name4> ] for row <name5> <name6> ) )	<name1> elements at index <name4> of each list <name5> list <name6>
print ( <name1> ( row [ <name2> ] for row <name3> <name4> ) )	<name1> elements at index <name2> of each list <name3> list <name4>
[ <name2> ( row [ i ] for row in <name3> ) for i in range ( len ( <name3> [ 0 ] ) ) ]	<name2> columns of a list <name3>
[ <name1> ( row [ i ] for row in <name2> ) for i in range ( len ( <name2> [ 0 ] ) ) ]	<name1> columns of a list <name2>
<name4> . b64encode ( bytes ( <val2>   , 'utf-8'   ) )	encode binary string <val2> to <name4> code
<name1> . b64encode ( bytes ( <val2>   , 'utf-8'   ) )	encode binary string <val2> to <name1> code
dict ( ( k , [ d [ k ] for d <name4> <name1> ] ) for k <name4> <name1> [ 0 ] )	combine list of dictionaries <name1> with the same keys <name4> each list to a single dictionary
dict ( ( k , [ d [ k ] for d <name1> <name2> ] ) for k <name1> <name2> [ 0 ] )	combine list of dictionaries <name2> with the same keys <name1> each list to a single dictionary
{  <name5> : [ d [ <name5> ] for d in <name3> ] for <name5> in <name3> [ 0 ] }	Merge a nested dictionary <name3> into a flat dictionary by concatenating nested values with the same key <name5>
{  <name1> : [ d [ <name1> ] for d in <name2> ] for <name1> in <name2> [ 0 ] }	Merge a nested dictionary <name2> into a flat dictionary by concatenating nested values with the same key <name1>
[ k for k , v <name1> <name2> ( Counter ( <name4> ) . items ( ) ) if v >   1 ]	identify duplicate values <name1> <name2> <name4>
[ k for k , v <name1> <name2> ( Counter ( <name3> ) . items ( ) ) if v >   1 ]	identify duplicate values <name1> <name2> <name3>
sys . path . insert ( 1 , os . path . join ( os . path . dirname ( <name3> ) , <val4>   ) )	Insert directory <val4> into directory <name3>
sys . path . insert ( 1 , os . path . join ( os . path . dirname ( <name1> ) , <val2>   ) )	Insert directory <val2> into directory <name1>
<name6> . path . append ( os . path . join ( os . path . dirname ( __file__ ) , <val3>   ) )	modify <name6> .path for python module <val3>
<name1> . path . append ( os . path . join ( os . path . dirname ( __file__ ) , <val2>   ) )	modify <name1> .path for python module <val2>
'db . execute ( ' 'INSERT INTO present VALUES(' test2 ', ?, 10)' ' , ( None , ) )'	Insert a 'None' value into a SQLite3 table .
[ image for menuitem in <name6> for image in menuitem ]	flatten list <name6>
[ image for menuitem in <name1> for image in menuitem ]	flatten list <name1>
<name6> . extend ( <name5> )	append elements of <name6> set <name5> to <name6> list <name6>
<name1> . extend ( <name2> )	append elements of <name1> set <name2> to <name1> list <name1>
np . savetxt ( 'c:\\data\\np.txt'   , <name2> . values , fmt = '%d'   )	write the data of dataframe <name2> into text file np.txt
np . savetxt ( 'c:\\data\\np.txt'   , <name1> . values , fmt = '%d'   )	write the data of dataframe <name1> into text file np.txt
<name4> . to_csv ( <val5>   , header = None , index = None , sep = ' '   , mode = 'a'   )	write content of DataFrame <name4> into text file <val5>
<name1> . to_csv ( <val2>   , header = None , index = None , sep = ' '   , mode = 'a'   )	write content of DataFrame <name1> into text file <val2>
print ( <name1> . rpartition ( <val6>   ) [ 0 ] )	Split a string <name1> by last occurrence of character <val6>
print ( <name1> . rpartition ( <val2>   ) [ 0 ] )	Split a string <name1> by last occurrence of character <val2>
print ( x . rsplit ( <val6>   , 1 ) [ 0 ] )	get the last part of a string before the character <val6>
print ( x . rsplit ( <val1>   , 1 ) [ 0 ] )	get the last part of a string before the character <val1>
ftp . storlines ( 'STOR '     + filename , open ( filename , 'r'   ) )	upload file using FTP
np . <name5> ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] )	create array containing the <name5> value of respective elements of array [2, 3, 4] and array [1, 5, 2]
np . <name1> ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] )	create array containing the <name1> value of respective elements of array [2, 3, 4] and array [1, 5, 2]
<name6> ( <name5> [ <val2> : ] + <name5> [ : <val2> ] )	<name6> a list <name5> and move first <val2> elements to the end of the list
<name1> ( <name2> [ <val3> : ] + <name2> [ : <val3> ] )	<name1> a list <name2> and move first <val3> elements to the end of the list
[ int ( 1000 * <name1> . <name1> ( ) ) for i in range ( 10000 ) ]	create a <name1> list of integers
db . GqlQuery ( <val3>   , foo . key ( ) )	Google App Engine execute GQL query <val3> with parameter foo.key()
db . GqlQuery ( <val1>   , foo . key ( ) )	Google App Engine execute GQL query <val1> with parameter foo.key()
df . b . str . contains ( '^f'   )	filter rows in pandas starting with alphabet 'f' using regular expression .
<name3> ( '\n'   . join ( '\t'   . join ( str ( col ) for col in row ) for row in <name5> ) )	<name3> a 2 dimensional list <name5> as a table with delimiters
<name1> ( '\n'   . join ( '\t'   . join ( str ( col ) for col in row ) for row in <name2> ) )	<name1> a 2 dimensional list <name2> as a table with delimiters
<name4> . set_index ( list ( 'BC'   ) ) . drop ( tuples , errors = 'ignore'   ) . reset_index ( )	pandas : delete rows in dataframe <name4> based on multiple columns values
<name1> . set_index ( list ( 'BC'   ) ) . drop ( tuples , errors = 'ignore'   ) . reset_index ( )	pandas : delete rows in dataframe <name1> based on multiple columns values
'' '' ' ' '({:d} goals, ${:d})' ' ' '' ' . format ( self . goals , self . penalties )'	format the variables self.goals and self.penalties using string formatting
'' '' ' ' <val1> ' ' '' ' . format ( self . goals , self . penalties )'	'format string ' <val1> ' with variables `goals` and `penalties`'
<val3> <val3> ' ' <val2> ' ' <val3> ' . format ( self )'	'format string ' <val2> <val3>
<val1> <val1> ' ' <val2> ' ' <val1> ' . format ( self )'	'format string ' <val2> <val1>
[ int ( ''   . join ( str ( d ) for d in x ) ) for x in <name2> ]	convert list of lists <name2> to list of integers
[ int ( ''   . join ( str ( d ) for d in x ) ) for x in <name1> ]	convert list of lists <name1> to list of integers
[ ''   . join ( str ( d ) for d <name5> x ) for x <name5> <name2> ]	combine elements of each list <name5> list <name2> into digits of a single integer
[ ''   . join ( str ( d ) for d <name1> x ) for x <name1> <name2> ]	combine elements of each list <name1> list <name2> into digits of a single integer
<name1> = [ int ( ''   . join ( [ str ( y ) for y in x ] ) ) for x in <name1> ]	convert a list of lists <name1> to list of integers
<name5> . <name3> ( <val1>   . join ( <name2> ) )	<name3> the elements of list <name2> concatenated by special character <val1> to file <name5>
<name1> . <name2> ( <val3>   . join ( <name4> ) )	<name2> the elements of list <name4> concatenated by special character <val3> to file <name1>
[ x for x in [ 'AAT'   , 'XAC'   , 'ANT'   , 'TTA'   ] if <val4>     not in x and <val6>     not in x ]	removing an element from a list based on a predicate <val4> or <val6>
[ x for x in [ 'AAT'   , 'XAC'   , 'ANT'   , 'TTA'   ] if <val1>     not in x and <val2>     not in x ]	removing an element from a list based on a predicate <val1> or <val2>
<name5> = re . sub ( '\\b(\\w+)( \\1\\b)+'   , '\\1'   , <name5> )	Remove duplicate words from a string <name5> using regex
<name1> = re . sub ( '\\b(\\w+)( \\1\\b)+'   , '\\1'   , <name1> )	Remove duplicate words from a string <name1> using regex
df . astype ( bool ) . sum ( axis = 1 )	count non zero values in each column in pandas data frame
re . <name3> ( <val1>   , <val6>   )	<name3> for string that matches regular expression pattern <val1> in string <val6>
re . <name1> ( <val2>   , <val3>   )	<name1> for string that matches regular expression pattern <val2> in string <val3>
'' '' ' ' <val2> ' ' '' ' . split ( )'	split string <val2> into a list on white spaces
'' '' ' ' <val1> ' ' '' ' . split ( )'	split string <val1> into a list on white spaces
print ( re . <name6> ( <val4>   , <name5> ) . group ( 0 ) )	<name6> for occurrences of regex pattern <val4> in xml string <name5>
print ( re . <name1> ( <val2>   , <name3> ) . group ( 0 ) )	<name1> for occurrences of regex pattern <val2> in xml string <name3>
open ( <name4> , 'w'   ) . close ( )	erase all the contents of a file <name4>
open ( <name1> , 'w'   ) . close ( )	erase all the contents of a file <name1>
<name3> . <name3> . strptime ( string_date , <val5>   )	convert a string into <name3> using the format <val5>
<name1> . <name1> . strptime ( string_date , <val2>   )	convert a string into <name1> using the format <val2>
[ <name1> for <name1> , item in enumerate ( <name2> ) if item [ 0 ] == <val5>   ]	find the <name1> of a list with the first element equal to <val5> within the list of lists <name2>
[ <name1> for <name1> , item in enumerate ( <name2> ) if item [ 0 ] == <val3>   ]	find the <name1> of a list with the first element equal to <val3> within the list of lists <name2>
re . sub ( '[^\\sa-zA-Z0-9]'   , ''   , <name1> ) . <name3> ( ) . strip ( )	<name3> a string <name1> and remove non - alphanumeric characters aside from space
re . sub ( '[^\\sa-zA-Z0-9]'   , ''   , <name1> ) . <name2> ( ) . strip ( )	<name2> a string <name1> and remove non - alphanumeric characters aside from space
re . sub ( '(?!\\s)[\\W_]'   , ''   , <name6> ) . <name2> ( ) . strip ( )	remove all non - alphanumeric characters except space from a string <name6> and <name2> it
re . sub ( '(?!\\s)[\\W_]'   , ''   , <name1> ) . <name2> ( ) . strip ( )	remove all non - alphanumeric characters except space from a string <name1> and <name2> it
plt . plot ( x , y , label = 'H\u2082O'   )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y' .
plt . plot ( x , y , label = '$H_2O$'   )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y' .
[ x for x in <name3> <name5> len ( x ) == <val4> ]	loop over a list <name3> <name5> sublists length equals <val4>
[ x for x in <name1> <name2> len ( x ) == <val3> ]	loop over a list <name1> <name2> sublists length equals <val3>
<name4> = [ <name5> ( ) for _ in range ( <val6> ) ]	initialize a list <name4> of <val6> objects <name5> ( )
<name1> = [ <name2> ( ) for _ in range ( <val3> ) ]	initialize a list <name1> of <val3> objects <name2> ( )
<name2> = [ <name4> ( ) for i in range ( <val6> ) ]	create list <name2> containing <val6> instances of object <name4>
<name1> = [ <name2> ( ) for i in range ( <val3> ) ]	create list <name1> containing <val3> instances of object <name2>
self . driver . find_element_by_css_selector ( '.someclass a'   ) . get_attribute ( <val1>   )	get the content of child tag with <val1> attribute whose parent has css someclass
<name4> . merge ( <name3> , <name6> = <val5>   )	joining data from dataframe <name4> with data from dataframe <name3> based <name6> matching values of column <val5> in both dataframes
<name1> . merge ( <name2> , <name3> = <val4>   )	joining data from dataframe <name1> with data from dataframe <name2> based <name3> matching values of column <val4> in both dataframes
'first string is: %s, second one is: %s'     % ( <name2> , 'geo.tif'   )	use %s operator to print variable values <name2> inside a string
'first string is: %s, second one is: %s'     % ( <name1> , 'geo.tif'   )	use %s operator to print variable values <name1> inside a string
distutils . dir_util . mkpath ( <name6> )	check if a directory <name6> exists and create it if necessary
distutils . dir_util . mkpath ( <name1> )	check if a directory <name1> exists and create it if necessary
re . sub ( '\\bH3\\b'   , <val2>   , text )	Replace a separate word 'H3' by <val2> in a string 'text'
re . sub ( '\\bH3\\b'   , <val1>   , text )	Replace a separate word 'H3' by <val1> in a string 'text'
re . sub ( '\\D'   , <val2>   , <val6>   )	substitute ASCII letters in string <val6> with empty string <val2>
re . sub ( '\\D'   , <val1>   , <val2>   )	substitute ASCII letters in string <val2> with empty string <val1>
'' '' ' ' '' ' ' '' ' . join ( [ x for x in ' aas30dsa20 '   if x . isdigit ( ) ] )'	get digits only from a string 'aas30dsa20' using lambda function
print ( soup . find ( <val2>   ) . string )	'access a tag called ' <val2> ' in beautifulsoup `soup`'
print ( soup . find ( <val1>   ) . string )	'access a tag called ' <val1> ' in beautifulsoup `soup`'
<name6> = dict ( ( record [ '_id'   ] , record ) for record <name4> <name2> )	get a dictionary <name6> of key - value pairs <name4> PyMongo <name2> <name2>
<name1> = dict ( ( record [ '_id'   ] , record ) for record <name2> <name3> )	get a dictionary <name1> of key - value pairs <name2> PyMongo <name3> <name3>
np . concatenate ( ( <name6> , <name1> ) )	Create new matrix object by concatenating data from matrix <name6> and matrix <name1>
np . concatenate ( ( <name1> , <name2> ) )	Create new matrix object by concatenating data from matrix <name1> and matrix <name2>
np . vstack ( ( <name1> , <name2> ) )	concat two matrices <name1> and <name2> in numpy
os . stat ( <name3> ) . st_size	Get the characters count in a file <name3>
os . stat ( <name1> ) . st_size	Get the characters count in a file <name1>
l . count ( <val2>   )	'count the occurrences of item ' <val2> ' in list `l`'
l . count ( <val1>   )	'count the occurrences of item ' <val1> ' in list `l`'
Counter ( <name6> )	count the occurrences of items in list <name6>
Counter ( <name1> )	count the occurrences of items in list <name1>
[ [ x , <name3> . <name6> ( x ) ] for x <name5> set ( <name3> ) ]	<name6> the occurrences of items <name5> list <name3>
[ [ x , <name1> . <name2> ( x ) ] for x <name3> set ( <name1> ) ]	<name2> the occurrences of items <name3> list <name1>
dict ( ( ( x , <name5> . <name4> ( x ) ) for x <name6> set ( <name5> ) ) )	<name4> the occurrences of items <name6> list <name5>
dict ( ( ( x , <name1> . <name2> ( x ) ) for x <name3> set ( <name1> ) ) )	<name2> the occurrences of items <name3> list <name1>
l . count ( <val4>   )	'count the occurrences of item ' <val4> ' in list `l`'
l . count ( <val1>   )	'count the occurrences of item ' <val1> ' in list `l`'
shutil . <name4> ( <name2> , <name6> )	<name4> file <name2> to directory <name6>
shutil . <name1> ( <name2> , <name3> )	<name1> file <name2> to directory <name3>
max ( k for k , v <name5> <name2> . items ( ) if v != 0 )	find the key associated with the largest value <name5> dictionary <name2> whilst key is non - zero value
max ( k for k , v <name1> <name2> . items ( ) if v != 0 )	find the key associated with the largest value <name1> dictionary <name2> whilst key is non - zero value
( k for k , v <name2> <name4> . items ( ) if v != <val3> )	get the largest key whose not associated with value of <val3> <name2> dictionary <name4>
( k for k , v <name1> <name2> . items ( ) if v != <val3> )	get the largest key whose not associated with value of <val3> <name1> dictionary <name2>
max ( k for k , v <name1> <name5> . items ( ) if v != 0 )	get the largest key <name1> a dictionary <name5> with non - zero value
max ( k for k , v <name1> <name2> . items ( ) if v != 0 )	get the largest key <name1> a dictionary <name2> with non - zero value
<name5> . seek ( 0 )	Put the curser at beginning of the <name5>
<name1> . seek ( 0 )	Put the curser at beginning of the <name1>
<name5> [ <val6>   ] = np . where ( <name5> [ <val2>   ] . isnull , <name5> [ <val3>   ] , <name5> [ <val2>   ] )	combine values from column <val3> and column <val2> of dataframe <name5> into column <val6> of datafram <name5>
<name1> [ <val2>   ] = np . where ( <name1> [ <val3>   ] . isnull , <name1> [ <val4>   ] , <name1> [ <val3>   ] )	combine values from column <val4> and column <val3> of dataframe <name1> into column <val2> of datafram <name1>
del <name2> [ <val1>   ]	remove key <val1> from dictionary <name2>
del <name1> [ <val2>   ]	remove key <val2> from dictionary <name1>
<name2> . objects . update ( timestamp = F ( <val1>   ) + timedelta ( days = 36524.25 ) )	Update datetime field in <name2> to be the existing <val1> plus 100 years
<name1> . objects . update ( timestamp = F ( <val2>   ) + timedelta ( days = 36524.25 ) )	Update datetime field in <name1> to be the existing <val2> plus 100 years
[ 'it'   ] + [ 'was'   ] + [ 'annoying'   ]	merge list ['it'] and list ['was'] and list ['annoying'] into one list
str ( int ( <name5> ) + 1 ) . zfill ( len ( <name5> ) )	increment a value with leading zeroes in a number <name5>
str ( int ( <name1> ) + 1 ) . zfill ( len ( <name1> ) )	increment a value with leading zeroes in a number <name1>
all ( <name1> . <name2> [ : -1 ] <= <name1> . <name2> [ 1 : ] )	check if a pandas dataframe <name1> ' s <name2> is sorted
<name3> ( <name4> )	Convert tuple <name4> to <name3>
<name1> ( <name2> )	Convert tuple <name2> to <name1>
<name5> ( l )	Convert list t to <name5>
<name1> ( l )	Convert list t to <name1>
<name2> = map ( <name5> , <name2> )	Convert tuple <name2> to <name5>
<name1> = map ( <name2> , <name1> )	Convert tuple <name1> to <name2>
<name4> . <name4> ( <name5> , <name3> )	send the output of <name4> object <name5> to file <name3>
<name1> . <name1> ( <name2> , <name3> )	send the output of <name1> object <name2> to file <name3>
df . loc [ df [ <val2>   ] ]	get index of rows in column <val2>
df . loc [ df [ <val1>   ] ]	get index of rows in column <val1>
<name2> . iloc [ np . flatnonzero ( <name2> [ <val5>   ] ) ]	Create a list containing the indexes of rows where the value of column <val5> in dataframe <name2> are equal to True
<name1> . iloc [ np . flatnonzero ( <name1> [ <val2>   ] ) ]	Create a list containing the indexes of rows where the value of column <val2> in dataframe <name1> are equal to True
df [ df [ <val2>   ] == <name3> ] . index . tolist ( )	get list of indexes of rows where column <val2> values match <name3>
df [ df [ <val1>   ] == <name2> ] . index . tolist ( )	get list of indexes of rows where column <val1> values match <name2>
<name2> [ <name2> [ <val4>   ] ] . <name6> . tolist ( )	get <name6> of rows in dataframe <name2> which column <val4> matches value True
<name1> [ <name1> [ <val2>   ] ] . <name3> . tolist ( )	get <name3> of rows in dataframe <name1> which column <val2> matches value True
os . chdir ( <name2> )	change working directory to the directory <name2>
os . chdir ( <name1> )	change working directory to the directory <name1>
'c . execute ( ' 'INSERT INTO test VALUES (?, ' bar ')' ' , ( testfield , ) )'	insert data from a string testfield to sqlite db c
'' '' ' ' <val2> ' ' '' ' . decode ( ' string_escape ' )'	'decode string ' <val2> ' into a normal string'
'' '' ' ' <val1> ' ' '' ' . decode ( ' string_escape ' )'	'decode string ' <val1> ' into a normal string'
<name2> . decode ( 'string_escape'   )	convert a raw string <name2> into a normal string
<name1> . decode ( 'string_escape'   )	convert a raw string <name1> into a normal string
<name3> . decode ( 'unicode_escape'   )	convert a raw string <name3> into a normal string
<name1> . decode ( 'unicode_escape'   )	convert a raw string <name1> into a normal string
[ m . group ( 0 ) for m in re . finditer ( '(\\d)\\1*'   , <name2> ) ]	split a string <name2> with into all strings of repeated characters
[ m . group ( 0 ) for m in re . finditer ( '(\\d)\\1*'   , <name1> ) ]	split a string <name1> with into all strings of repeated characters
plt . <name6> ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , facecolors = 'none'   )	<name6> a plot with x , y position of np.random.randn(100) and face color equal to none
plt . <name1> ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , facecolors = 'none'   )	<name1> a plot with x , y position of np.random.randn(100) and face color equal to none
plt . <name1> ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , 'o'   , mfc = 'none'   )	do a scatter <name1> with empty circles
soup . find ( 'div'   , <name5> = <val3>   ) . decompose ( )	remove a div with a <name5> <val3> using beautifulsoup
soup . find ( 'div'   , <name1> = <val2>   ) . decompose ( )	remove a div with a <name1> <val2> using beautifulsoup
df [ df [ <val5>   ] . str . contains ( <val4>   ) ]	filter rows containing key word <val4> in column <val5>
df [ df [ <val1>   ] . str . contains ( <val2>   ) ]	filter rows containing key word <val2> in column <val1>
<name5> . reset_index ( <name1> = <val2> , inplace = True )	convert index at <name1> <val2> into a column in dataframe <name5>
<name1> . reset_index ( <name2> = <val3> , inplace = True )	convert index at <name2> <val3> into a column in dataframe <name1>
<name2> [ <val3>   ] = <name2> . index	Add indexes in a data frame <name2> to a column <val3>
<name1> [ <val2>   ] = <name1> . index	Add indexes in a data frame <name1> to a column <val2>
df . reset_index ( level = [ 'tick'   , 'obs'   ] )	convert pandas index in a dataframe to columns
[ x [ : : -1 ] for x in b ]	Get reverse of list items from list 'b' using extended slicing
np . <name6> ( [ zip ( x , y ) for x , y <name5> zip ( <name1> , <name2> ) ] )	join each element <name5> <name6> <name1> with element at the same index <name5> <name6> <name2> as <name1> tuple
np . <name1> ( [ zip ( x , y ) for x , y <name2> zip ( <name3> , <name4> ) ] )	join each element <name2> <name1> <name3> with element at the same index <name2> <name1> <name4> as <name3> tuple
np . array ( <name4> ( <name5> . ravel ( ) , <name1> . ravel ( ) ) , dtype = 'i4,i4'   ) . reshape ( <name5> . shape )	<name4> two 2 - d arrays <name5> and <name1>
np . array ( <name1> ( <name2> . ravel ( ) , <name3> . ravel ( ) ) , dtype = 'i4,i4'   ) . reshape ( <name2> . shape )	<name1> two 2 - d arrays <name2> and <name3>
'' '' ' ' ',' ' ' '' ' . join ( [ str ( i ) for i in list_of_ints ] )'	convert list list_of_ints into a comma separated string
requests . <name3> ( url , <name4> = <name6> , headers = HEADERS_DICT , auth = ( <name5> , <name2> ) )	Send a <name3> request with raw <name4> <name6> and basic authentication with <name5> and <name2>
requests . <name1> ( url , <name2> = <name3> , headers = HEADERS_DICT , auth = ( <name4> , <name5> ) )	Send a <name1> request with raw <name2> <name3> and basic authentication with <name4> and <name5>
<val1>   . rfind ( '}'   )	'Find last occurrence of character ' } ' in string ' <val1> ''
print ( [ item for item in [ 1 , 2 , 3 ] ] )	Iterate ove list [1, 2, 3] using list comprehension
[ ( x [ <val2>   ] , x [ <val6>   ] ) for x in <name1> ]	extract all the values with keys <val2> and <val6> from a list of dictionaries <name1> to list of tuples
[ ( x [ <val1>   ] , x [ <val2>   ] ) for x in <name3> ]	extract all the values with keys <val1> and <val2> from a list of dictionaries <name3> to list of tuples
print ( os . path . splitext ( os . path . basename ( <val3>   ) ) [ 0 ] )	get the filename without the extension from file <val3>
print ( os . path . splitext ( os . path . basename ( <val1>   ) ) [ 0 ] )	get the filename without the extension from file <val1>
dict ( <name3> [ i : i + 2 ] for i <name1> range ( 0 , len ( <name3> ) , 2 ) )	create a dictionary by adding each two adjacent elements <name1> tuple <name3> as key / value pair to it
dict ( <name1> [ i : i + 2 ] for i <name2> range ( 0 , len ( <name1> ) , 2 ) )	create a dictionary by adding each two adjacent elements <name2> tuple <name1> as key / value pair to it
values = sum ( [ [ 'A'   , 'B'   , 'C'   ] , [ 'D'   , 'E'   , 'F'   ] , [ 'G'   , 'H'   , 'I'   ] ] , [ ] )	create a list containing flattened list [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]
<name2> = <name2> [ ( <name2> [ <val3>   ] >= <val5> ) &   ( <name2> [ <val3>   ] <= <val4> ) ]	select rows in a dataframe <name2> column <val3> between two values <val5> and <val4>
<name1> = <name1> [ ( <name1> [ <val2>   ] >= <val3> ) &   ( <name1> [ <val2>   ] <= <val4> ) ]	select rows in a dataframe <name1> column <val2> between two values <val3> and <val4>
<name5> . <name4> ( {  <val6>   : <val1>  }  , regex = True )	<name4> all occurences of newlines <val6> with <val1> in dataframe <name5>
<name1> . <name2> ( {  <val3>   : <val4>  }  , regex = True )	<name2> all occurences of newlines <val3> with <val4> in dataframe <name1>
<name5> . <name2> ( {  <val3>   : <val1>  }  , regex = True )	<name2> all occurrences of a string <val3> by string <val1> in a pandas data frame <name5>
<name1> . <name2> ( {  <val3>   : <val4>  }  , regex = True )	<name2> all occurrences of a string <val3> by string <val4> in a pandas data frame <name1>
[ ( x + y ) for x , y <name2> zip ( <name4> , <name4> [ 1 : ] ) ]	create a list containing each two adjacent letters <name2> string <name4> as its elements
[ ( x + y ) for x , y <name1> zip ( <name2> , <name2> [ 1 : ] ) ]	create a list containing each two adjacent letters <name1> string <name2> as its elements
<name4> ( map ( <name6> x , y : x + y , <name5> [ : -1 ] , <name5> [ 1 : ] ) )	Get a <name4> of pairs from a string <name5> using <name6> function
<name1> ( map ( <name2> x , y : x + y , <name3> [ : -1 ] , <name3> [ 1 : ] ) )	Get a <name1> of pairs from a string <name3> using <name2> function
print ( re . findall ( '(https?://[^\\s]+)'   , <name3> ) )	extract a url from a string <name3>
print ( re . findall ( '(https?://[^\\s]+)'   , <name1> ) )	extract a url from a string <name1>
print ( re . search ( '(?P<url>https?://[^\\s]+)'   , <name6> ) . group ( 'url'   ) )	extract a url from a string <name6>
print ( re . search ( '(?P<url>https?://[^\\s]+)'   , <name1> ) . group ( 'url'   ) )	extract a url from a string <name1>
re . sub ( '[^A-Za-z0-9]+'   , ''   , <name4> )	remove all special characters , punctuation and spaces from a string <name4> using regex
re . sub ( '[^A-Za-z0-9]+'   , ''   , <name1> )	remove all special characters , punctuation and spaces from a string <name1> using regex
pd . date_range ( <val5>   , freq = 'WOM-2FRI'   , <name4> = <val3> )	create a DatetimeIndex containing <val3> <name4> of the second friday of each month starting from date <val5>
pd . date_range ( <val1>   , freq = 'WOM-2FRI'   , <name2> = <val3> )	create a DatetimeIndex containing <val3> <name2> of the second friday of each month starting from date <val1>
<name2> = [ [ a , b ] , [ c , d ] , [ e , f ] ]	Create multidimensional array <name2> with 3 rows and 2 columns in python
<name1> = [ [ a , b ] , [ c , d ] , [ e , f ] ]	Create multidimensional array <name1> with 3 rows and 2 columns in python
mystring . <name6> ( ' '   , '_'   )	<name6> spaces with underscore
mystring . <name1> ( ' '   , '_'   )	<name1> spaces with underscore
os . <name6> . abspath ( <val4>   )	get an absolute file <name6> of file <val4>
os . <name1> . abspath ( <val2>   )	get an absolute file <name1> of file <val2>
'' '' ' ' ' ' ' ' '' ' . join ( my_string . split ( ) )'	split string my_string on white spaces
os . path . splitext ( <name1> ) [ 0 ]	get <name1> without extension from file <name1>
[ <name2> ( <name1> [ : <name6> ] ) for <name6> , _ <name5> enumerate ( <name1> ) ]	get a list containing the <name2> of each element <name6> <name5> list <name1> plus the previous elements
[ <name1> ( <name2> [ : <name3> ] ) for <name3> , _ <name4> enumerate ( <name2> ) ]	get a list containing the <name1> of each element <name3> <name4> list <name2> plus the previous elements
'' '' ' ' <val3> ' ' '' ' . replace ( ' / ' , ' / \ x00 / ' ) . split ( ' \ x00 ' )'	split a string <val3> by '/' keeping '/' in the result
'' '' ' ' <val1> ' ' '' ' . replace ( ' / ' , ' / \ x00 / ' ) . split ( ' \ x00 ' )'	split a string <val1> by '/' keeping '/' in the result
np . random . <name2> ( np . transpose ( r ) )	<name2> columns of an numpy array 'r'
np . random . <name1> ( np . transpose ( r ) )	<name1> columns of an numpy array 'r'
df [ <val4>   ] = df [ <val5>   ]	copy all values in a column <val5> to a new column <val4> in a pandas data frame 'df'
df [ <val1>   ] = df [ <val2>   ]	copy all values in a column <val2> to a new column <val1> in a pandas data frame 'df'
list ( data [ 'A'   ] [ <val2>   ] . values ( ) ) [ 0 ] [ 'maindata'   ] [ 0 ] [ 'Info'   ]	find a value within nested json 'data' where the key inside another key <val2> is unknown .
list ( data [ 'A'   ] [ <val1>   ] . values ( ) ) [ 0 ] [ 'maindata'   ] [ 0 ] [ 'Info'   ]	find a value within nested json 'data' where the key inside another key <val1> is unknown .
all ( <name5> ( x ) for x in <name6> )	check characters of <name6> <name6> are true predication of function <name5>
all ( <name1> ( x ) for x in <name2> )	check characters of <name2> <name2> are true predication of function <name1>
os . statvfs ( '/'   ) . f_files - os . statvfs ( '/'   ) . f_ffree	determine number of files on a drive with python
<name2> = [ int ( number ) for number in <name3> . split ( ','   ) ]	convert string <name3> into a list of integers <name2>
<name1> = [ int ( number ) for number in <name2> . split ( ','   ) ]	convert string <name2> into a list of integers <name1>
[ int ( s ) for s in <name3> . split ( ','   ) ]	Get a list of integers by splitting a string <name3> with comma
[ int ( s ) for s in <name1> . split ( ','   ) ]	Get a list of integers by splitting a string <name1> with comma
<name4> . <name3> ( key = <name6> , reverse = True )	<name3> a list of objects <name4> , based on a function <name6> in descending order
<name1> . <name2> ( key = <name3> , reverse = True )	<name2> a list of objects <name1> , based on a function <name3> in descending order
<name5> . sort ( key = lambda x : x . <name3> , <name1> = True )	<name1> list <name5> based on the <name3> attribute of each object
<name1> . sort ( key = lambda x : x . <name2> , <name3> = True )	<name3> list <name1> based on the <name2> attribute of each object
<name1> . <name4> ( key = lambda x : x . <name2> , <name3> = True )	<name4> a list of objects <name1> in <name3> order by their <name2> property
<name1> . <name2> ( key = lambda x : x . <name3> , <name4> = True )	<name2> a list of objects <name1> in <name4> order by their <name3> property
driver . find_element_by_partial_link_text ( <val6>   ) . <name3> ( )	<name3> a href button <val6> with selenium
driver . find_element_by_partial_link_text ( <val1>   ) . <name2> ( )	<name2> a href button <val1> with selenium
driver . findElement ( By . linkText ( <val3>   ) ) . <name6> ( )	<name6> a href button having text <val3> with selenium
driver . findElement ( By . linkText ( <val1>   ) ) . <name2> ( )	<name2> a href button having text <val1> with selenium
driver . find_element_by_link_text ( <val1>   ) . <name3> ( )	<name3> a href button with text <val1> with selenium
driver . find_element_by_link_text ( <val1>   ) . <name2> ( )	<name2> a href button with text <val1> with selenium
<val3>     + str ( <name2> )	cast an int <name2> to a string and concat to string <val3>
<val1>     + str ( <name2> )	cast an int <name2> to a string and concat to string <val1>
open ( <val5>   , 'w'   ) . write ( <val3>     + open ( <val1>   ) . read ( ) )	prepend the line <val3> to the contents of file <val1> and save as the file <val5>
open ( <val1>   , 'w'   ) . write ( <val2>     + open ( <val3>   ) . read ( ) )	prepend the line <val2> to the contents of file <val3> and save as the file <val1>
<name5> . <name1> ( key = lambda t : len ( t [ 1 ] ) , reverse = True )	<name1> a list <name5> by length of value in tuple
<name1> . <name2> ( key = lambda t : len ( t [ 1 ] ) , reverse = True )	<name2> a list <name1> by length of value in tuple
re . findall ( '\\b(\\w+)d\\b'   , <name3> )	split string <name3> by words that ends with 'd'
re . findall ( '\\b(\\w+)d\\b'   , <name1> )	split string <name1> by words that ends with 'd'
bool ( re . search ( <val6>   , <val3>   ) )	return True if string <val3> contains regex <val6>
bool ( re . search ( <val1>   , <val2>   ) )	return True if string <val2> contains regex <val1>
<name5> ( set ( <name3> ) )	Removing duplicates in <name5> <name3>
<name1> ( set ( <name2> ) )	Removing duplicates in <name1> <name2>
<name5> ( set ( <name3> ) )	Removing duplicates in <name5> <name3>
<name1> ( set ( <name2> ) )	Removing duplicates in <name1> <name2>
<name2> ( OrderedDict . fromkeys ( <val6>   ) )	Removing duplicates in <name2> <val6>
<name1> ( OrderedDict . fromkeys ( <val2>   ) )	Removing duplicates in <name1> <val2>
numpy . <name4> ( <name5> ) . reshape ( -1 ) . tolist ( )	Convert <name4> <name5> into <name5> list
numpy . <name1> ( <name2> ) . reshape ( -1 ) . tolist ( )	Convert <name1> <name2> into <name2> list
<name3> . array ( <name1> ) [ 0 ] . tolist ( )	Convert the first row of <name3> matrix <name1> to <name1> list
<name1> . array ( <name2> ) [ 0 ] . tolist ( )	Convert the first row of <name1> matrix <name2> to <name2> list
print ( <name5> . find ( <name2> = <val1>   ) . findNext ( <val6>   ) . contents [ 0 ] )	In <name5> , get the content of the sibling of the <val6> tag with <name2> content <val1>
print ( <name1> . find ( <name2> = <val3>   ) . findNext ( <val4>   ) . contents [ 0 ] )	In <name1> , get the content of the sibling of the <val4> tag with <name2> content <val3>
'' '' ' ' ' ' ' ' '' ' . join ( [ ( ' % d @ % d '   % t ) for t in l ] )'	convert elements of each tuple in list l into a string separated by character @
'' '' ' ' ' ' ' ' '' ' . join ( [ ( ' % d @ % d '   % ( t [ 0 ] , t [ 1 ] ) ) for t in l ] )'	convert each tuple in list l to a string with '@' separating the tuples '  elements
<name3> . execute_script ( 'return document.documentElement.outerHTML;'   )	get the html from the current web page of a Selenium <name3>
<name1> . execute_script ( 'return document.documentElement.outerHTML;'   )	get the html from the current web page of a Selenium <name1>
[ i for i <name1> <name2> if re . search ( <val4>   , i ) ]	Get all matches with regex pattern <val4> <name1> list of string <name2>
[ i for i <name1> <name2> if re . search ( <val3>   , i ) ]	Get all matches with regex pattern <val3> <name1> list of string <name2>
<name6> [ <val1>   ] [ ( <name6> [ <val3>   ] >   <val4> ) &   ( <name6> [ <val2>   ] == <val5> ) ]	select values from column <val1> for which corresponding values in column <val3> will be greater than <val4> , and in column <val2> - equal <val5> in dataframe <name6>
<name1> [ <val2>   ] [ ( <name1> [ <val3>   ] >   <val4> ) &   ( <name1> [ <val5>   ] == <val6> ) ]	select values from column <val2> for which corresponding values in column <val3> will be greater than <val4> , and in column <val5> - equal <val6> in dataframe <name1>
sorted ( <name6> . <name3> ( ) )	Sort dictionary <name6> in ascending order based on its keys and <name3>
sorted ( <name1> . <name2> ( ) )	Sort dictionary <name1> in ascending order based on its keys and <name2>
<name5> ( <name2> )	get <name5> list of keys of dict <name2>
<name1> ( <name2> )	get <name1> list of keys of dict <name2>
int ( <val1>   )	'convert string ' <val1> ' into integer'
int ( )	function to convert strings into integers
T2 = [ map ( int , x ) for x <name5> <name1> ]	convert items <name5> <name1> to integers
T2 = [ map ( int , x ) for x <name1> <name2> ]	convert items <name1> <name2> to integers
<name1> . <name4> ( [ <val6>   ] )	<name4> a shell script <val6> using <name1>
<name1> . <name2> ( [ <val3>   ] )	<name2> a shell script <val3> using <name1>
<name5> . <name3> ( [ <val1>   ] )	<name3> a shell script <val1> using <name5>
<name1> . <name2> ( [ <val3>   ] )	<name2> a shell script <val3> using <name1>
[ val for pair in zip ( <name4> , <name5> ) for val in pair ]	combine lists <name4> and <name5> by alternating their elements
[ val for pair in zip ( <name1> , <name2> ) for val in pair ]	combine lists <name1> and <name2> by alternating their elements
encoded = base64 . b64encode ( <val4>   )	encode string <val4>
encoded = base64 . b64encode ( <val1>   )	encode string <val1>
encoded = <val2>   . <name3> ( <val1>   )	<name3> a string <val2> to <val1> encoding
encoded = <val1>   . <name2> ( <val3>   )	<name2> a string <val1> to <val3> encoding
lol = <name5> ( csv . reader ( open ( <val1>   , 'rb'   ) , delimiter = '\t'   ) )	parse tab - delimited CSV file <val1> into a <name5>
lol = <name1> ( csv . reader ( open ( <val2>   , 'rb'   ) , delimiter = '\t'   ) )	parse tab - delimited CSV file <val2> into a <name1>
getattr ( <name3> , <name6> )	Get attribute <name6> of object <name3>
getattr ( <name1> , <name2> )	Get attribute <name2> of object <name1>
print ( <name2> ( zip ( <name1> [ 0 ] , zip ( * [ <name4> ( d . values ( ) ) for d in <name1> ] ) ) ) )	group a <name4> of dicts <name1> into one <name2> by key
print ( <name1> ( zip ( <name2> [ 0 ] , zip ( * [ <name3> ( d . values ( ) ) for d in <name2> ] ) ) ) )	group a <name3> of dicts <name2> into one <name1> by key
'd = ast . literal_eval ( ' <val6> <name4> <val5> <name1> <val3> ' )'	'convert unicode string u' <val6> <name4> <val5> <name1> <val3> ' into dictionary'
'd = ast . literal_eval ( ' <val1> <name2> <val3> <name4> <val5> ' )'	'convert unicode string u' <val1> <name2> <val3> <name4> <val5> ' into dictionary'
[ word for word <name4> <name2> . split ( ) if word . startswith ( <val1>   ) ]	find all words <name4> a string <name2> that start with the <val1> sign
[ word for word <name1> <name2> . split ( ) if word . startswith ( <val3>   ) ]	find all words <name1> a string <name2> that start with the <val3> sign
<name2> = re . sub ( '^https?:\\/\\/.*[\\r\\n]*'   , ''   , <name2> , flags = re . MULTILINE )	remove any url within string <name2>
<name1> = re . sub ( '^https?:\\/\\/.*[\\r\\n]*'   , ''   , <name1> , flags = re . MULTILINE )	remove any url within string <name1>
np . where ( np . in1d ( <name5> , [ 1 , 3 , 4 ] ) . reshape ( <name5> . shape ) , <name5> , 0 )	replace all elements in array <name5> that are not present in array [1, 3, 4] with zeros
np . where ( np . in1d ( <name1> , [ 1 , 3 , 4 ] ) . reshape ( <name1> . shape ) , <name1> , 0 )	replace all elements in array <name1> that are not present in array [1, 3, 4] with zeros
np . <name5> ( <name2> , axis = 1 )	calculate <name5> across dimension in <name2> 2 d array <name2>
np . <name1> ( <name2> , axis = 1 )	calculate <name1> across dimension in <name2> 2 d array <name2>
subprocess . call ( [ '/usr/bin/Rscript'   , '--vanilla'   , <val1>   ] )	running r script <val1> from python
subprocess . call ( <val6>   , shell = True )	run r script <val6>
subprocess . call ( <val1>   , shell = True )	run r script <val1>
writer . writeheader ( )	add a header to a csv file
<name2> . fillna ( <name2> . mean ( axis = 1 ) , axis = 1 )	replacing nan in the dataframe <name2> with row average
<name1> . fillna ( <name1> . mean ( axis = 1 ) , axis = 1 )	replacing nan in the dataframe <name1> with row average
time . strftime ( <val3>   , time . localtime ( 1347517370 ) )	Convert unix timestamp '1347517370' to formatted string <val3>
time . strftime ( <val1>   , time . localtime ( 1347517370 ) )	Convert unix timestamp '1347517370' to formatted string <val1>
super ( <name6> , cls ) . <name1> ( <name4> )	Call <name4> base class ' s class method <name1> from derived class <name6>
super ( <name1> , cls ) . <name2> ( <name3> )	Call <name3> base class ' s class method <name2> from derived class <name1>
a [ np . <name2> ( ( a [ : , ( <val5> ) ] == <val5> ) * ( a [ : , ( <val3> ) ] == <val3> ) ) ]	selecting rows in Numpy ndarray 'a' , <name2> the value in the first column is <val5> and value in the second column is <val3>
a [ np . <name1> ( ( a [ : , ( <val2> ) ] == <val2> ) * ( a [ : , ( <val3> ) ] == <val3> ) ) ]	selecting rows in Numpy ndarray 'a' , <name1> the value in the first column is <val2> and value in the second column is <val3>
re . split ( ' +'   , 'hello world sample text'   )	separate words delimited by one or more spaces into a list
len ( max ( <name1> , key = len ) )	length of longest element in list <name1>
<name2> [ 0 ] [ <val3>   ]	get the value associated with unicode key <val3> of first dictionary in list <name2>
<name1> [ 0 ] [ <val2>   ]	get the value associated with unicode key <val2> of first dictionary in list <name1>
[ <name5> . split ( ) for <name5> in open ( <val3>   ) ]	Retrieve each <name5> from a file <val3> as a list
[ <name1> . split ( ) for <name1> in open ( <val2>   ) ]	Retrieve each <name1> from a file <val2> as a list
res = dict ( ( v , k ) for k , v <name4> <name5> . items ( ) )	swap keys with values <name4> <name5> dictionary <name5>
res = dict ( ( v , k ) for k , v <name1> <name2> . items ( ) )	swap keys with values <name1> <name2> dictionary <name2>
new_file = open ( <val3>   , 'w'   )	Open a file <val3> in write mode
new_file = open ( <val1>   , 'w'   )	Open a file <val1> in write mode
<name6> ( <name4> . startswith ( <val5>   ) for <name4> <name1> <name3> )	Check if <name6> <name4> <name1> the dictionary <name3> starts with the string <val5>
<name1> ( <name2> . startswith ( <val3>   ) for <name2> <name4> <name5> )	Check if <name1> <name2> <name4> the dictionary <name5> starts with the string <val3>
[ value for <name2> , value in <name5> ( <name1> . items ( ) ) if <name2> . startswith ( <val4>   ) ]	create <name5> of values from dictionary <name1> that have a <name2> that starts with <val4>
[ value for <name1> , value in <name2> ( <name3> . items ( ) ) if <name1> . startswith ( <val4>   ) ]	create <name2> of values from dictionary <name3> that have a <name1> that starts with <val4>
pd . DataFrame ( {  <val5>   : <name4> . index , <val2>   : <name4> . values }  )	convert a pandas series <name4> into a pandas dataframe df with columns <val5> and <val2>
pd . DataFrame ( {  <val1>   : <name2> . index , <val3>   : <name2> . values }  )	convert a pandas series <name2> into a pandas dataframe df with columns <val1> and <val3>
<name1> ( <val4>   . join ( map ( str , <name6> ) ) )	<name1> elements of <name6> <name6> seperated by tabs <val4>
<name1> ( <val2>   . join ( map ( str , <name3> ) ) )	<name1> elements of <name3> <name3> seperated by tabs <val2>
<name2> ( <val5>   . encode ( 'raw_unicode_escape'   ) )	<name2> unicode string <val5> with utf -8
<name1> ( <val2>   . encode ( 'raw_unicode_escape'   ) )	<name1> unicode string <val2> with utf -8
<val1>   . encode ( 'latin-1'   ) . decode ( 'utf-8'   )	Encode a latin character in string <val1> properly
<name2> = <name2> . resize ( ( x , y ) , Image . <name4> )	resized <name2> <name2> to width , height of (x, y) with filter of <name4>
<name1> = <name1> . resize ( ( x , y ) , Image . <name2> )	resized <name1> <name1> to width , height of (x, y) with filter of <name2>
re . findall ( 'n(?<=[^n]n)n+(?=[^n])(?i)'   , s )	'regex, find ' 'n' 's only in the middle of string `s`'
print ( '{0:.0f}%'   . format ( 1.0 / 3 * 100 ) )	display the float 1/3*100 as a percentage
<name1> . <name3> ( <name6> = lambda x : x [ <val5>   ] )	<name3> a list of dictionary <name1> by the <name6> <val5>
<name1> . <name2> ( <name3> = lambda x : x [ <val4>   ] )	<name2> a list of dictionary <name1> by the <name3> <val4>
<name6> . <name1> ( key = lambda x : x [ <val2>   ] )	<name1> a list <name6> of dicts by dict value <val2>
<name1> . <name2> ( key = lambda x : x [ <val3>   ] )	<name2> a list <name1> of dicts by dict value <val3>
l . <name3> ( key = lambda x : ( x [ <val2>   ] , x [ <val4>   ] , x [ <val5>   ] ) )	<name3> a list of dictionaries by the value of keys <val2> , <val4> , <val5> in ascending order .
l . <name1> ( key = lambda x : ( x [ <val2>   ] , x [ <val3>   ] , x [ <val4>   ] ) )	<name1> a list of dictionaries by the value of keys <val2> , <val3> , <val4> in ascending order .
heapq . nlargest ( <val4> , range ( len ( <name1> ) ) , key = lambda i : abs ( <name1> [ i ] - <name5> [ i ] ) )	find <val4> largest differences between each respective elements of list <name1> and list <name5>
heapq . nlargest ( <val1> , range ( len ( <name2> ) ) , key = lambda i : abs ( <name2> [ i ] - <name3> [ i ] ) )	find <val1> largest differences between each respective elements of list <name2> and list <name3>
<name5> . find_all ( <val4>   , {  'class'   : <val3>  }  )	BeautifulSoup find all <val4> elements in HTML string <name5> with class of <val3>
<name1> . find_all ( <val2>   , {  'class'   : <val3>  }  )	BeautifulSoup find all <val2> elements in HTML string <name1> with class of <val3>
<name6> . to_sql ( <val2>   , engine , <name3> = <val4>   )	write records in dataframe <name6> to table <val2> in <name3> <val4>
<name1> . to_sql ( <val2>   , engine , <name3> = <val4>   )	write records in dataframe <name1> to table <val2> in <name3> <val4>
<name6> = re . sub ( '[^(){}[\\]]'   , ''   , <name5> )	Extract <name6> from string <name5>
<name1> = re . sub ( '[^(){}[\\]]'   , ''   , <name2> )	Extract <name1> from string <name2>
<name4> ( dict ( ( x [ 0 ] , x ) for x in L ) . values ( ) )	remove duplicate elements from <name4> 'L'
<name1> ( dict ( ( x [ 0 ] , x ) for x in L ) . values ( ) )	remove duplicate elements from <name1> 'L'
[ line . rstrip ( '\n'   ) for line in <name6> ]	read a <name6> <name6> without newlines
[ line . rstrip ( '\n'   ) for line in <name1> ]	read a <name1> <name1> without newlines
[ i for ( i , x ) <name2> enumerate ( <name1> ) if ( x == <val5> ) ]	get the position of item <val5> <name2> <name1>
[ i for ( i , x ) <name1> enumerate ( <name2> ) if ( x == <val3> ) ]	get the position of item <val3> <name1> <name2>
[ i for ( i , x ) <name5> enumerate ( <name1> ) if ( x == <val3> ) ]	get the position of item <val3> <name5> <name1>
[ i for ( i , x ) <name1> enumerate ( <name2> ) if ( x == <val3> ) ]	get the position of item <val3> <name1> <name2>
print ( <name5> . index ( <name1> ) )	get the position of item <name1> in list <name5>
print ( <name1> . index ( <name2> ) )	get the position of item <name2> in list <name1>
max ( <name3> , key = lambda item : item [ 1 ] ) [ 0 ]	find the first element of the tuple with the maximum second element in a list of tuples <name3>
max ( <name1> , key = lambda item : item [ 1 ] ) [ 0 ]	find the first element of the tuple with the maximum second element in a list of tuples <name1>
max ( <name4> , key = itemgetter ( <val1> ) ) [ <val6> ]	get the item at index <val6> from the tuple that has maximum value at index <val1> in list <name4>
max ( <name1> , key = itemgetter ( <val2> ) ) [ <val3> ]	get the item at index <val3> from the tuple that has maximum value at index <val2> in list <name1>
time . sleep ( <val6> )	Make a delay of <val6> second
time . sleep ( <val1> )	Make a delay of <val1> second
'' '' ' ' ', ' ' ' '' ' . join ( ' ( '   + ' , ' . join ( i ) + ' ) '   for i in L )'	convert list of tuples L to a string
<name6> = models . CharField ( max_length = 7 , <name2> = <val5>   , editable = False )	Django set <name2> value of field <name6> equal to <val5>
<name1> = models . CharField ( max_length = 7 , <name2> = <val3>   , editable = False )	Django set <name2> value of field <name1> equal to <val3>
sorted ( <name2> , lambda x : ( degree ( x ) , x ) )	Sort lis <name2> in ascending order based on the degrees value of its elements
sorted ( <name1> , lambda x : ( degree ( x ) , x ) )	Sort lis <name1> in ascending order based on the degrees value of its elements
( n for n in [ 1 , 2 , 3 , 5 ] )	convert a list into a generator object
newlist = [ v for i , v <name1> enumerate ( <name3> ) if i not <name1> <name6> ]	remove elements from list <name3> that have an index number mentioned <name1> list <name6>
newlist = [ v for i , v <name1> enumerate ( <name2> ) if i not <name1> <name3> ]	remove elements from list <name2> that have an index number mentioned <name1> list <name3>
f = open ( <val1>   , 'w'   )	Open a file <val1> in write mode
getattr ( <name5> , <val1>   )	get attribute <val1> from object <name5>
getattr ( <name1> , <val2>   )	get attribute <val2> from object <name1>
map ( lambda a : a [ 0 ] , ( ( 'aa'   , ) , ( 'bb'   , ) , ( 'cc'   , ) ) )	convert tuple of tuples (('aa',), ('bb',), ('cc',)) to list in one line
zip ( * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) ] )	unzip the list [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
zip ( * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) ] )	unzip the list [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
result = ( [ a for ( a , b ) in <name2> ] , [ b for ( a , b ) in <name2> ] )	unzip list <name2>
result = ( [ a for ( a , b ) in <name1> ] , [ b for ( a , b ) in <name1> ] )	unzip list <name1>
result = ( ( <name4> for ( <name4> , b ) in <name2> ) , ( b for ( <name4> , b ) in <name2> ) )	unzip list <name2> and return <name4> generator
result = ( ( <name1> for ( <name1> , b ) in <name2> ) , ( b for ( <name1> , b ) in <name2> ) )	unzip list <name2> and return <name1> generator
zip ( * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) , ( 'e'   , ) ] )	unzip list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]
map ( <name2> , * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) , ( 'e'   , ) ] )	unzip list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )] and fill empty results with <name2>
map ( <name1> , * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) , ( 'e'   , ) ] )	unzip list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )] and fill empty results with <name1>
json . dumps ( Decimal ( '3.9'   ) )	encode Decimal('3.9') to a JSON string
d [ <val5>   ] = <val2>	'Add key ' <val5> ' to dictionary `d` with value ' <val2> ''
d [ <val1>   ] = <val2>	'Add key ' <val1> ' to dictionary `d` with value ' <val2> ''
<name2> . update ( {  <val6>   : <val5> , }  )	Add key <val6> to dictionary <name2> with value <val5>
<name1> . update ( {  <val2>   : <val3> , }  )	Add key <val2> to dictionary <name1> with value <val3>
<name6> . update ( dict ( a = <val1> ) )	Add key 'a' to dictionary <name6> with value <val1>
<name1> . update ( dict ( a = <val2> ) )	Add key 'a' to dictionary <name1> with value <val2>
<name1> . update ( a = <val2> )	Add key 'a' to dictionary <name1> with value <val2>
max ( [ max ( i ) for i <name2> <name3> ] )	find maximal value <name2> <name3> <name3>
max ( [ max ( i ) for i <name1> <name2> ] )	find maximal value <name1> <name2> <name2>
<name3> = str ( round ( <name3> , <val2> ) )	Round number <name3> to <val2> precision after the decimal point
<name1> = str ( round ( <name1> , <val2> ) )	Round number <name1> to <val2> precision after the decimal point
<name4> = re . findall ( '[0-9]+(?:\\.[0-9]+){3}'   , s )	extract <name4> address from an html string
<name1> = re . findall ( '[0-9]+(?:\\.[0-9]+){3}'   , s )	extract <name1> address from an html string
<name1> . groupby ( <val3>   ) . <name6> ( lambda x : len ( x ) >   1 )	<name6> dataframe <name1> by values in column <val3> that appear more than once
<name1> . groupby ( <val2>   ) . <name3> ( lambda x : len ( x ) >   1 )	<name3> dataframe <name1> by values in column <val2> that appear more than once
[ x for x <name6> <name2> . splitlines ( ) if x != ''   ]	append each line <name6> file <name2> into a list
[ x for x <name1> <name2> . splitlines ( ) if x != ''   ]	append each line <name1> file <name2> into a list
<name1> = map ( int , open ( <val3>   ) . readlines ( ) )	Get a list of integers <name1> from a file <val3>
<name1> = map ( int , open ( <val2>   ) . readlines ( ) )	Get a list of integers <name1> from a file <val2>
<name1> . colorbar ( <name4> = <name4> , cax = ax3 )	add color bar with image <name4> to plot <name1>
<name1> . colorbar ( <name2> = <name2> , cax = ax3 )	add color bar with image <name2> to plot <name1>
Counter ( ' '   . join ( <name5> [ <val6>   ] ) . split ( ) ) . most_common ( <val2> )	count most frequent <val2> words in column <val6> of dataframe <name5>
Counter ( ' '   . join ( <name1> [ <val2>   ] ) . split ( ) ) . most_common ( <val3> )	count most frequent <val3> words in column <val2> of dataframe <name1>
list ( itertools . combinations ( ( 1 , <val3> , 3 ) , <val3> ) )	generate all <val3> - element subsets of tuple (1, 2, 3)
list ( itertools . combinations ( ( 1 , <val1> , 3 ) , <val1> ) )	generate all <val1> - element subsets of tuple (1, 2, 3)
<name5> . now ( pytz . utc )	get a value of <name5> .today ( ) in the UTC time zone
<name1> . now ( pytz . utc )	get a value of <name1> .today ( ) in the UTC time zone
<name6> = [ x for x in <name5> if x != [ ] ]	Get a new list <name6> by removing empty list from a list of lists <name5>
<name1> = [ x for x in <name2> if x != [ ] ]	Get a new list <name1> by removing empty list from a list of lists <name2>
<name3> = [ x for x in <name2> if x ]	Create <name3> to contain the lists from list <name2> excluding the empty lists from <name2>
<name1> = [ x for x in <name2> if x ]	Create <name1> to contain the lists from list <name2> excluding the empty lists from <name2>
return HttpResponse ( <name1> , mimetype = 'application/json'   )	Django response with JSON <name1>
re . findall ( '(.*?)\\[.*?\\]'   , <name5> )	get all text that is not enclosed within square brackets in string <name5>
re . findall ( '(.*?)\\[.*?\\]'   , <name1> )	get all text that is not enclosed within square brackets in string <name1>
re . findall ( '(.*?)(?:\\[.*?\\]|$)'   , <name2> )	Use a regex to get all text in a string <name2> that is not surrounded by square brackets
re . findall ( '(.*?)(?:\\[.*?\\]|$)'   , <name1> )	Use a regex to get all text in a string <name1> that is not surrounded by square brackets
re . findall ( '\\(.+?\\)|\\w'   , <val1>   )	get whatever is between parentheses as a single match , and any char outside as an individual match in string <val1>
re . findall ( <val1>   , <val5>   )	match regex <val1> with string <val5>
re . findall ( <val1>   , <val2>   )	match regex <val1> with string <val2>
re . findall ( '\\(.*?\\)|\\w'   , <val2>   )	match multiple regex patterns with the alternation operator | in a string <val2>
re . findall ( '\\(.*?\\)|\\w'   , <val1>   )	match multiple regex patterns with the alternation operator | in a string <val1>
<name4> = [ <val1>   . format ( element ) for element in <name4> ]	formate each string cin list <name4> into pattern <val1>
<name1> = [ <val2>   . format ( element ) for element in <name1> ]	formate each string cin list <name1> into pattern <val2>
subprocess . Popen ( [ <val1>   , <val2>   ] )	Open a background process <val1> with arguments <val2>
[ mydict [ x ] for x in mykeys ]	get list of values from dictionary 'mydict' w .r .t . list of keys 'mykeys'
dict ( [ ( 'Name'   , 'Joe'   ) , ( 'Age'   , 22 ) ] )	convert list [('Name', 'Joe'), ('Age', 22)] into a dictionary
<name6> . reshape ( -1 , j ) . mean ( axis = 1 ) . reshape ( <name6> . shape [ 0 ] , -1 )	average each two columns of array <name6>
<name1> . reshape ( -1 , j ) . mean ( axis = 1 ) . reshape ( <name1> . shape [ 0 ] , -1 )	average each two columns of array <name1>
re . <name6> ( '(\\W+)'   , s )	<name6> a string into a list of words and whitespace
re . <name1> ( '(\\W+)'   , s )	<name1> a string into a list of words and whitespace
{  i [ 1 ] : i [ 0 ] for i <name2> list ( <name1> . items ( ) ) }	reverse the keys and values <name2> a dictionary <name1>
{  i [ 1 ] : i [ 0 ] for i <name1> list ( <name2> . items ( ) ) }	reverse the keys and values <name1> a dictionary <name2>
[ i for i , j <name4> enumerate ( myList ) if <val5>     <name4> j . lower ( ) or <val6>     <name4> j . lower ( ) ]	finding the index of elements containing substring <val5> and <val6> <name4> a list of strings 'myList' .
[ i for i , j <name1> enumerate ( myList ) if <val2>     <name1> j . lower ( ) or <val3>     <name1> j . lower ( ) ]	finding the index of elements containing substring <val2> and <val3> <name1> a list of strings 'myList' .
isinstance ( <name2> , str )	check if object <name2> is a string
isinstance ( <name1> , str )	check if object <name1> is a string
isinstance ( <name2> , str )	check if object <name2> is a string
isinstance ( <name1> , str )	check if object <name1> is a string
( type ( <name3> ) <name2> str )	check if object <name3> <name2> a string
( type ( <name1> ) <name2> str )	check if object <name1> <name2> a string
isinstance ( <name1> , str )	check if object <name1> is a string
isinstance ( <name1> , str )	check if <name1> is a string
<name5> . extend ( <name3> )	append list <name3> to <name5>
<name1> . extend ( <name2> )	append list <name2> to <name1>
<name3> . extend ( <name4> )	append list <name4> to <name3>
<name1> . extend ( <name2> )	append list <name2> to <name1>
<name1> . extend ( <name5> )	append list <name5> to <name1>
<name1> . extend ( <name2> )	append list <name2> to <name1>
<name4> . <name1> ( ( <name6> [ 0 ] [ 0 ] , <name6> [ 0 ] [ 2 ] ) )	<name1> <name6> tuple of elements from list <name6> with indexes '[0][0] [0][2]' to list <name4>
<name1> . <name2> ( ( <name3> [ 0 ] [ 0 ] , <name3> [ 0 ] [ 2 ] ) )	<name2> <name3> tuple of elements from list <name3> with indexes '[0][0] [0][2]' to list <name1>
app . <name5> [ <val4>   ] = 'Your_secret_string'	Initialize <val4> in flask <name5> with Your_secret_string 
app . <name1> [ <val2>   ] = 'Your_secret_string'	Initialize <val2> in flask <name1> with Your_secret_string 
pd . <name3> ( out . tolist ( ) , columns = [ <val2>   , <val1>   ] , index = out . index )	unpack a series of tuples in pandas into a <name3> with column names <val2> and <val1>
pd . <name1> ( out . tolist ( ) , columns = [ <val2>   , <val3>   ] , index = out . index )	unpack a series of tuples in pandas into a <name1> with column names <val2> and <val3>
[ x for x <name6> range ( len ( <name5> ) ) if <name5> [ x ] == <val4>   ]	find the index of an element <val4> <name6> a list <name5>
[ x for x <name1> range ( len ( <name2> ) ) if <name2> [ x ] == <val3>   ]	find the index of an element <val3> <name1> a list <name2>
<name3> . set_xticklabels ( <name2> , rotation = <val4> )	rotate the xtick <name2> of matplotlib plot <name3> by <val4> degrees to make long <name2> readable
<name1> . set_xticklabels ( <name2> , rotation = <val3> )	rotate the xtick <name2> of matplotlib plot <name1> by <val3> degrees to make long <name2> readable
re . sub ( '[^\\w]'   , ' '   , <name6> )	remove symbols from a string <name6>
re . sub ( '[^\\w]'   , ' '   , <name1> )	remove symbols from a string <name1>
os . path . basename ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	Get the current directory of a script
re . <name1> ( <val3>   , <name5> )	<name1> string <name5> based on occurrences of regex pattern <val3>
re . <name1> ( <val2>   , <name3> )	<name1> string <name3> based on occurrences of regex pattern <val2>
re . split ( '[ ](?=[A-Z])'   , <name2> )	Split string <name2> at every space followed by an upper - case letter
re . split ( '[ ](?=[A-Z])'   , <name1> )	Split string <name1> at every space followed by an upper - case letter
r = requests . post ( <name1> , <name3> = <name3> , <name6> = <name6> , <name2> = <name2> )	send multipart encoded file <name3> to <name1> <name1> with <name6> <name6> and metadata <name2>
r = requests . post ( <name1> , <name2> = <name2> , <name3> = <name3> , <name4> = <name4> )	send multipart encoded file <name2> to <name1> <name1> with <name3> <name3> and metadata <name4>
open ( <val3>   , 'wb'   ) . <name1> ( <name2> )	<name1> bytes <name2> to a file <val3> in python 3
open ( <val1>   , 'wb'   ) . <name2> ( <name3> )	<name2> bytes <name3> to a file <val1> in python 3
[ <name1> [ k ] for k in <name2> ]	get a list from a list <name2> with values mapped into a dictionary <name1>
<name6> . set_index ( <val3>   ) . index . get_duplicates ( )	find duplicate names in column <val3> of the dataframe <name6>
<name1> . set_index ( <val2>   ) . index . get_duplicates ( )	find duplicate names in column <val2> of the dataframe <name1>
round ( <val2> , <val6> )	truncate float <val2> to <val6> decimal places
round ( <val1> , <val2> )	truncate float <val1> to <val2> decimal places
sorted ( <name5> , key = lambda x : datetime . strptime ( x [ 1 ] , '%d/%m/%Y'   ) , reverse = True )	sort list <name5> in descending order based on the date value in second element of each list in list <name5>
sorted ( <name1> , key = lambda x : datetime . strptime ( x [ 1 ] , '%d/%m/%Y'   ) , reverse = True )	sort list <name1> in descending order based on the date value in second element of each list in list <name1>
<name3> . set_rlabel_position ( <val1> )	place the radial ticks in plot <name3> at <val1> degrees
<name1> . set_rlabel_position ( <val2> )	place the radial ticks in plot <name1> at <val2> degrees
os . <name1> . isabs ( <name6> )	check if <name1> <name6> is an absolute <name1>
os . <name1> . isabs ( <name2> )	check if <name1> <name2> is an absolute <name1>
len ( list ( <name3> . <name5> ( ) ) )	get number of <name5> in dictionary <name3>
len ( list ( <name1> . <name2> ( ) ) )	get number of <name2> in dictionary <name1>
len ( set ( open ( <name5> ) . read ( ) . split ( ) ) )	count the number of keys in dictionary <name5>
len ( set ( open ( <name1> ) . read ( ) . split ( ) ) )	count the number of keys in dictionary <name1>
df . groupby ( <val1>   ) . <name6> ( )	pandas dataframe get <name6> row of each group by <val1>
df . groupby ( <val1>   ) . <name2> ( )	pandas dataframe get <name2> row of each group by <val1>
pd . concat ( [ df [ 0 ] . apply ( pd . Series ) , df [ 1 ] ] , axis = 1 )	split a list in first column into multiple columns keeping other columns as well in pandas data frame
sum ( int ( float ( item ) ) for item <name1> [ _f for _f <name1> [ ''   , '3.4'   , ''   , ''   , '1.0'   ] if _f ] )	Sum integers contained <name1> strings <name1> list ['', '3.4', '', '', '1.0']
<name6> . Popen ( [ <val2>   ] )	Call a <name6> with arguments <val2> that may contain spaces
<name1> . Popen ( [ <val2>   ] )	Call a <name1> with arguments <val2> that may contain spaces
<name6> . put ( ( - n , n ) )	reverse a priority queue <name6> in python without using classes
<name1> . put ( ( - n , n ) )	reverse a priority queue <name1> in python without using classes
<name3> [ <val5>   ] . plot ( kind = 'bar'   , <name4> = [ 'r'   , 'g'   , 'b'   , 'r'   , 'g'   , 'b'   , 'r'   ] )	make a barplot of data in column <val5> of dataframe <name3> colour - coded according to list <name4>
<name1> [ <val2>   ] . plot ( kind = 'bar'   , <name3> = [ 'r'   , 'g'   , 'b'   , 'r'   , 'g'   , 'b'   , 'r'   ] )	make a barplot of data in column <val2> of dataframe <name1> colour - coded according to list <name3>
re . findall ( <val6>   , <name3> )	find all matches of regex pattern <val6> in string <name3>
re . findall ( <val1>   , <name2> )	find all matches of regex pattern <val1> in string <name2>
len ( <name3> )	Get the length of list <name3>
len ( <name1> )	Get the length of list <name1>
len ( <name6> )	Getting the length of array <name6>
len ( <name1> )	Getting the length of array <name1>
len ( <name1> )	Getting the length of array <name1>
len ( <name4> )	Getting the length of <name4>
len ( <name1> )	Getting the length of <name1>
len ( <name2> )	Getting the length of <name2>
len ( <name1> )	Getting the length of <name1>
<val1> <val1> ' ' <val3> ' ' <val1> ' . decode ( ' string_escape ' )'	'remove escape character from string ' <val3> <val1>
<val1> <val1> ' ' <val2> ' ' <val1> ' . decode ( ' string_escape ' )'	'remove escape character from string ' <val2> <val1>
'' '' ' ' <val3> ' ' '' ' . replace ( ' <name2> ' , ' % temp % ' ) . replace ( ' b ' , ' <name2> ' ) . replace ( ' % temp % ' , ' b ' )'	replace each 'a' with 'b' and each 'b' with 'a' in the string <val3> in <name2> single pass .
'' '' ' ' <val1> ' ' '' ' . replace ( ' <name2> ' , ' % temp % ' ) . replace ( ' b ' , ' <name2> ' ) . replace ( ' % temp % ' , ' b ' )'	replace each 'a' with 'b' and each 'b' with 'a' in the string <val1> in <name2> single pass .
shutil . rmtree ( <val3>   )	remove directory tree <val3>
shutil . rmtree ( <val1>   )	remove directory tree <val1>
<name6> [ <val5>   ] = <name6> [ <val3>   ] . apply ( lambda x : x . weekday ( ) )	create a new column <val5> in pandas <name6> frame <name6> based on the values in column <val3>
<name1> [ <val2>   ] = <name1> [ <val3>   ] . apply ( lambda x : x . weekday ( ) )	create a new column <val2> in pandas <name1> frame <name1> based on the values in column <val3>
sorted ( <name4> , key = <name4> . get , <name2> = True )	<name2> sort Counter <name4> by values
sorted ( <name1> , key = <name1> . get , <name2> = True )	<name2> sort Counter <name1> by values
sorted ( list ( <name5> . items ( ) ) , key = lambda pair : pair [ 1 ] , <name4> = True )	<name4> sort counter <name5> by value
sorted ( list ( <name1> . items ( ) ) , key = lambda pair : pair [ 1 ] , <name2> = True )	<name2> sort counter <name1> by value
np . vstack ( ( <name2> , b ) )	append <name2> numpy array 'b' to <name2> numpy array 'a'
np . vstack ( ( <name1> , b ) )	append <name1> numpy array 'b' to <name1> numpy array 'a'
print ( <name3> ( ( <name1> , <name4> ) , <name6> = 0 ) )	numpy <name3> two arrays <name1> and <name4> along the first <name6>
print ( <name1> ( ( <name2> , <name3> ) , <name4> = 0 ) )	numpy <name1> two arrays <name2> and <name3> along the first <name4>
print ( <name1> ( ( <name2> , <name3> ) , <name5> = 1 ) )	numpy <name1> two arrays <name2> and <name3> along the second <name5>
print ( <name1> ( ( <name2> , <name3> ) , <name4> = 1 ) )	numpy <name1> two arrays <name2> and <name3> along the second <name4>
c = np . r_ [ ( <name3> [ None , : ] , <name2> [ None , : ] ) ]	numpy concatenate two arrays <name3> and <name2> along the first axis
c = np . r_ [ ( <name1> [ None , : ] , <name2> [ None , : ] ) ]	numpy concatenate two arrays <name1> and <name2> along the first axis
np . array ( ( <name2> , <name5> ) )	numpy concatenate two arrays <name2> and <name5> along the first axis
np . array ( ( <name1> , <name2> ) )	numpy concatenate two arrays <name1> and <name2> along the first axis
print ( socket . getaddrinfo ( <val6>   , <val4> ) )	fetch address information for host <val6> ion port <val4>
print ( socket . getaddrinfo ( <val1>   , <val2> ) )	fetch address information for host <val1> ion port <val2>
<name4> . xs ( <val3>   , level = <val2>   , drop_level = False )	add a column <val2> with value <val3> to dataframe <name4>
<name1> . xs ( <val2>   , level = <val3>   , drop_level = False )	add a column <val3> with value <val2> to dataframe <name1>
<name3> HttpResponse ( 'Unauthorized'   , status = <val6> )	<name3> a <val6> unauthorized in django
<name1> HttpResponse ( 'Unauthorized'   , status = <val2> )	<name1> a <val2> unauthorized in django
<name2> ( __name__ , template_folder = <val1>   )	<name2> set folder <val1> as the default template folder
<name1> ( __name__ , template_folder = <val2>   )	<name1> set folder <val2> as the default template folder
session . execute ( 'INSERT INTO t1 (SELECT * FROM t2)'   )	How do I INSERT INTO t1 ( SELECT * FROM t2 ) in SQLAlchemy ?
c2 . <name2> ( key = lambda <name4> : <name4> [ 2 ] )	<name2> a list of lists 'c2' such that third <name4> comes first
c2 . <name1> ( key = lambda <name2> : <name2> [ 2 ] )	<name1> a list of lists 'c2' such that third <name2> comes first
<name4> . rc ( 'font'   , ** {  'sans-serif'   : <val6>   , 'family'   : 'sans-serif'  }  )	set font <val6> to display non - ascii characters in <name4>
<name1> . rc ( 'font'   , ** {  'sans-serif'   : <val2>   , 'family'   : 'sans-serif'  }  )	set font <val2> to display non - ascii characters in <name1>
df [ <val6>   ] . apply ( lambda x : x . toordinal ( ) )	Convert DateTime column <val6> of pandas dataframe 'df' to ordinal
df [ <val1>   ] . apply ( lambda x : x . toordinal ( ) )	Convert DateTime column <val1> of pandas dataframe 'df' to ordinal
<name5> . get_attribute ( 'innerHTML'   )	get html source of Selenium WebElement <name5>
<name1> . get_attribute ( 'innerHTML'   )	get html source of Selenium WebElement <name1>
df . index . get_loc ( <val1>   )	Get the integer location of a key <val1> in a pandas data frame
'os . system ( ' gnome - <name6> - e \ 'bash -c ' 'sudo apt-get update; exec bash' '\''   ) '	open a 'gnome' <name6> from python script and run 'sudo apt-get update' command .
'os . system ( ' gnome - <name1> - e \ 'bash -c ' 'sudo apt-get update; exec bash' '\''   ) '	open a 'gnome' <name1> from python script and run 'sudo apt-get update' command .
<name6> . update ( {  <val2>   : <val4> }  )	add an item with key <val2> and value <val4> to an dictionary <name6>
<name1> . update ( {  <val2>   : <val3> }  )	add an item with key <val2> and value <val3> to an dictionary <name1>
my_list = [ ]	declare an array
<name2> . append ( <val5> )	Insert item <val5> to a list <name2>
<name1> . append ( <val2> )	Insert item <val2> to a list <name1>
<name5> . insert ( 0 , <val2>   )	add an entry <val2> at the beginning of list <name5>
<name1> . insert ( 0 , <val2>   )	add an entry <val2> at the beginning of list <name1>
'' '' ' ' '\\xF3\\xBE\\x80\\x80' ' ' '' ' . replace ( ' \\ x ' , ' ' ) . decode ( ' <name1> ' )'	convert a <name1> - string representation to actual bytes
<name2> [ <name2> . columns [ -1 ] ]	select the last column of dataframe <name2>
<name1> [ <name1> . columns [ -1 ] ]	select the last column of dataframe <name1>
<name4> . loc [ <name4> [ <val3>   ] == <val5>   , <val3>   ] . values [ 0 ]	get the first value from dataframe <name4> where column <val3> is equal to <val5>
<name1> . loc [ <name1> [ <val2>   ] == <val3>   , <val2>   ] . values [ 0 ]	get the first value from dataframe <name1> where column <val2> is equal to <val3>
np . column_stack ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )	converting two lists [1, 2, 3] and [4, 5, 6] into a matrix
<name6> ( <name5> )	get the <name6> of <name5>
<name1> ( <name2> )	get the <name1> of <name2>
<name4> ( <name5> )	determine the <name4> of variable <name5>
<name1> ( <name2> )	determine the <name1> of variable <name2>
<name5> ( <name3> )	determine the <name5> of variable <name3>
<name1> ( <name2> )	determine the <name1> of variable <name2>
<name2> ( <name4> )	determine the <name2> of variable <name4>
<name1> ( <name2> )	determine the <name1> of variable <name2>
<name3> ( <name5> )	determine the <name3> of variable <name5>
<name1> ( <name2> )	determine the <name1> of variable <name2>
print ( <name1> ( <name3> ) )	get the <name1> of variable <name3>
print ( <name1> ( <name2> ) )	get the <name1> of variable <name2>
next ( itertools . islice ( range ( 10 ) , <val1> , <val1> + 1 ) )	get the <val1> th item of a generator
'' '' <val2> <val2> <val2> '' ' . join ( list )'	join a list of strings list using a space <val2>
'' '' <val1> <val1> <val1> '' ' . join ( list )'	join a list of strings list using a space <val1>
<name3> = [ [ ] for n in range ( 2 ) ]	create list <name3> containing two empty lists
<name1> = [ [ ] for n in range ( 2 ) ]	create list <name1> containing two empty lists
<name5> = [ line . strip ( ) for line in open ( <val3>   , 'r'   ) ]	read a file <val3> into a list <name5>
<name1> = [ line . strip ( ) for line in open ( <val2>   , 'r'   ) ]	read a file <val2> into a list <name1>
'' '' ' ' '' ' ' '' ' . join ( [ char for char in ' it is icy '   if char != ' i ' ] )'	delete all occurrences of character 'i' in string 'it is icy'
re . sub ( <val6>   , ''   , <val3>   )	delete all instances of a character <val6> in a string <val3>
re . sub ( <val1>   , ''   , <val2>   )	delete all instances of a character <val1> in a string <val2>
<val1> <val1> ' ' <val6> ' ' <val1> ' . replace ( ' i ' , ' ' )'	'delete all characters ' 'i' ' in string ' <val6> <val1>
<val1> <val1> ' ' <val2> ' ' <val1> ' . replace ( ' i ' , ' ' )'	'delete all characters ' 'i' ' in string ' <val2> <val1>
df . dropna ( subset = [ <val4> ] )	'Drop rows of pandas dataframe `df` having NaN in column at index ' '1' <val4>
df . dropna ( subset = [ <val1> ] )	'Drop rows of pandas dataframe `df` having NaN in column at index ' '1' <val1>
[ x for x in <name4> if x . <name3> == <val6> ]	get elements from list <name4> , that have a field <name3> value <val6>
[ x for x in <name1> if x . <name2> == <val3> ]	get elements from list <name1> , that have a field <name2> value <val3>
<name6> = [ int ( x ) for x in <name4> ]	converting list of strings <name4> to list of integer <name6>
<name1> = [ int ( x ) for x in <name2> ]	converting list of strings <name2> to list of integer <name1>
map ( int , eval ( input ( 'Enter the unfriendly numbers: '   ) ) )	convert list of string numbers into list of integers
sys . stdout . write ( <val5>   )	'print ' <val5> ' without newline'
sys . stdout . write ( <val1>   )	'print ' <val1> ' without newline'
<name3> ( <name4> ( 2.51 * 100 ) )	<name4> off the float that is the product of 2.52 * 100 and convert it to an <name3>
<name1> ( <name2> ( 2.51 * 100 ) )	<name2> off the float that is the product of 2.52 * 100 and convert it to an <name1>
<name6> . <name3> ( <name5> = False )	<name3> dataframe <name6> without a <name5>
<name1> . <name2> ( <name3> = False )	<name2> dataframe <name1> without a <name3>
generator = iter_iprange ( '192.168.1.1'   , '192.168.255.255'   , step = <val5> )	'loop through the IP address range ' '192.168.x.x' <val5>
generator = iter_iprange ( '192.168.1.1'   , '192.168.255.255'   , step = <val1> )	'loop through the IP address range ' '192.168.x.x' <val1>
sum ( 1 << i <name5> i , b <name2> enumerate ( <name4> ) if b )	Sum the corresponding decimal values <name5> binary values of each boolean element <name2> list <name4>
sum ( 1 << i <name1> i , b <name2> enumerate ( <name3> ) if b )	Sum the corresponding decimal values <name1> binary values of each boolean element <name2> list <name3>
<name2> . <name6> ( '%r\n%r\n%r\n'     % ( <name5> , <name4> , <name1> ) )	<name6> multiple strings <name5> , <name4> and <name1> in one line in a file <name2>
<name1> . <name2> ( '%r\n%r\n%r\n'     % ( <name3> , <name4> , <name5> ) )	<name2> multiple strings <name3> , <name4> and <name5> in one line in a file <name1>
[ y for x in <name2> for y in ( x if isinstance ( x , <name6> ) else [ x ] ) ]	Convert <name6> of lists <name2> into a flat <name6>
[ y for x in <name1> for y in ( x if isinstance ( x , <name2> ) else [ x ] ) ]	Convert <name2> of lists <name1> into a flat <name2>
print ( <val3>   . encode ( 'string_escape'   ) )	Print new line character as \n in a string <val3>
print ( <val1>   . encode ( 'string_escape'   ) )	Print new line character as \n in a string <val1>
'' '' ' ' '' ' ' '' ' . join ( s . rsplit ( ' , ' , 1 ) )'	remove last comma character ',' in string s
( <name4> [ 1 : ] + <name4> [ : -1 ] ) / 2	calculate the mean of each element in array <name4> with the element previous to it
( <name1> [ 1 : ] + <name1> [ : -1 ] ) / 2	calculate the mean of each element in array <name1> with the element previous to it
<name2> [ : -1 ] + ( <name2> [ 1 : ] - <name2> [ : -1 ] ) / 2	get an array of the mean of each two consecutive values in numpy array <name2>
<name1> [ : -1 ] + ( <name1> [ 1 : ] - <name1> [ : -1 ] ) / 2	get an array of the mean of each two consecutive values in numpy array <name1>
<name3> = <name2> . fromiter ( codecs . open ( <val1>   , encoding = <val5>   ) , dtype = '<U2'   )	load data containing <val5> from file <val1> into <name2> array <name3>
<name1> = <name2> . fromiter ( codecs . open ( <val3>   , encoding = <val4>   ) , dtype = '<U2'   )	load data containing <val4> from file <val3> into <name2> array <name1>
<name4> = sorted ( <name4> , <name3> = itemgetter ( <val5>   ) , <name1> = True )	<name1> sort list of dicts <name4> by value for <name3> <val5>
<name1> = sorted ( <name1> , <name2> = itemgetter ( <val3>   ) , <name4> = True )	<name4> sort list of dicts <name1> by value for <name2> <val3>
<name4> = sorted ( <name4> , <name3> = lambda <name5> : <name5> [ <val2>   ] , reverse = True )	Sort <name5> list of dictionary <name4> based on <name3> <val2> in descending order
<name1> = sorted ( <name1> , <name2> = lambda <name3> : <name3> [ <val4>   ] , reverse = True )	Sort <name3> list of dictionary <name1> based on <name2> <val4> in descending order
<name4> . loc [ <name4> [ 0 ] . str . contains ( <val6>   ) ]	get rows of dataframe <name4> that match regex <val6>
<name1> . loc [ <name1> [ 0 ] . str . contains ( <val2>   ) ]	get rows of dataframe <name1> that match regex <val2>
re . search ( '\\[(.*)\\]'   , your_string ) . group ( <val4> )	'find the string in `your_string` between two special characters ' '[' ' and ' ']' <val4>
re . search ( '\\[(.*)\\]'   , your_string ) . group ( <val1> )	'find the string in `your_string` between two special characters ' '[' ' and ' ']' <val1>
'' '' ' ' <val2> ' ' '' ' . count ( ' brown ' )'	count number of times string 'brown' occurred in string <val2>
'' '' ' ' <val1> ' ' '' ' . count ( ' brown ' )'	count number of times string 'brown' occurred in string <val1>
<name5> . loads ( request . body )	decode <name5> string request.body to python dict
<name1> . loads ( request . body )	decode <name1> string request.body to python dict
urllib . request . urlretrieve ( <name5> , <name2> )	download the file from <name5> <name5> and save it under file <name2>
urllib . request . urlretrieve ( <name1> , <name2> )	download the file from <name1> <name1> and save it under file <name2>
<name5> . <name3> ( )	<name3> string <name5> by space
<name1> . <name2> ( )	<name2> string <name1> by space
text . split ( <val5>   )	'split string `text` by ' <val5> ''
text . split ( <val1>   )	'split string `text` by ' <val1> ''
<name3> . split ( )	Split string <name3> into a list by whitespace
<name1> . split ( )	Split string <name1> into a list by whitespace
[ re . sub ( '(?<!\\d)\\.(?!\\d)'   , <val5>   , i ) for i <name1> <name4> ]	replace dot characters '.' associated with ascii letters <name1> list <name4> with space <val5>
[ re . sub ( '(?<!\\d)\\.(?!\\d)'   , <val1>   , i ) for i <name2> <name3> ]	replace dot characters '.' associated with ascii letters <name2> list <name3> with space <val1>
sorted ( <name1> , key = lambda <name5> : <name5> . split ( ','   ) [ 1 ] )	sort list <name1> based on second index of each string <name5>
sorted ( <name1> , key = lambda <name2> : <name2> . split ( ','   ) [ 1 ] )	sort list <name1> based on second index of each string <name2>
subprocess . check_call ( 'vasp | tee tee_output'   , shell = True )	call multiple bash function ‘ vasp ’  and ‘ tee tee_output ’  using ‘|’
[ element for element in <name5> if isinstance ( element , int ) ]	eliminate all strings from list <name5>
[ element for element in <name1> if isinstance ( element , int ) ]	eliminate all strings from list <name1>
[ element for element in lst if not isinstance ( element , str ) ]	get all the elements except strings from the list 'lst' .
newlist = sorted ( <name5> , <name2> = lambda k : k [ <val4>   ] )	Sort a list of dictionaries <name5> by the value of the dictionary <name2> <val4>
newlist = sorted ( <name1> , <name2> = lambda k : k [ <val3>   ] )	Sort a list of dictionaries <name1> by the value of the dictionary <name2> <val3>
newlist = sorted ( <name4> , <name5> = itemgetter ( <val6>   ) , reverse = True )	sort a list of dictionaries <name4> by values in <name5> <val6> in descending order
newlist = sorted ( <name1> , <name2> = itemgetter ( <val3>   ) , reverse = True )	sort a list of dictionaries <name1> by values in <name2> <val3> in descending order
'' '' ' ' <val1> ' ' '' ' . join ( trans [ ' <name3> ' ] )'	'join together with ' <val1> ' elements inside a list indexed with ' <name3> ' within a dictionary `trans`'
'' '' ' ' <val1> ' ' '' ' . join ( trans [ ' <name2> ' ] )'	'join together with ' <val1> ' elements inside a list indexed with ' <name2> ' within a dictionary `trans`'
'' '' ' ' '' ' ' '' ' . join ( [ ' A ' , ' B ' , ' C ' , ' D ' ] )'	concatenate array of strings ['A', 'B', 'C', 'D'] into a string
<name3> . load ( urllib . request . urlopen ( <val4>   ) )	get <name3> data from restful service <val4>
<name1> . load ( urllib . request . urlopen ( <val2>   ) )	get <name1> data from restful service <val2>
[ x for x in <name1> if not x . startswith ( <val5>   ) and not x . startswith ( <val6>   ) ]	Remove all strings from a list a strings <name1> where the values starts with <val5> or <val6>
[ x for x in <name1> if not x . startswith ( <val2>   ) and not x . startswith ( <val3>   ) ]	Remove all strings from a list a strings <name1> where the values starts with <val2> or <val3>
Entry . objects . <name3> ( pub_date__contains = '08:00'   )	django <name3> by hour
Entry . objects . <name1> ( pub_date__contains = '08:00'   )	django <name1> by hour
<name1> . <name6> ( <name4> = lambda item : ( item [ <val3>   ] , item [ <val2>   ] ) )	<name6> a <name1> of dictionary <name1> first by <name4> <val3> and then by <val2>
<name1> . <name2> ( <name3> = lambda item : ( item [ <val4>   ] , item [ <val5>   ] ) )	<name2> a <name1> of dictionary <name1> first by <name3> <val4> and then by <val5>
( t - <name3> . <name3> ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <name3> object (1970, 1, 1) to seconds
( t - <name1> . <name1> ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <name1> object (1970, 1, 1) to seconds
re . sub ( '(\\_a)?\\.([^\\.]*)$'   , '_suff.\\2'   , <val5>   )	insert _suff before the file extension in <val5> or replace _a with suff if it precedes the extension .
re . sub ( '(\\_a)?\\.([^\\.]*)$'   , '_suff.\\2'   , <val1>   )	insert _suff before the file extension in <val1> or replace _a with suff if it precedes the extension .
struct . unpack ( 'H'   , struct . pack ( 'h'   , <name2> ) )	Convert integer <name2> into an unassigned integer
struct . unpack ( 'H'   , struct . pack ( 'h'   , <name1> ) )	Convert integer <name1> into an unassigned integer
<name1> = [ <name3> ( x ) for x <name5> <name1> ]	convert int values <name5> list <name1> to <name3>
<name1> = [ <name2> ( x ) for x <name3> <name1> ]	convert int values <name3> list <name1> to <name2>
<name3> . to_csv ( filename , <name5> = False )	write dataframe <name3> , excluding <name5> , to a csv file
<name1> . to_csv ( filename , <name2> = False )	write dataframe <name1> , excluding <name2> , to a csv file
<name1> = <name6> . loads ( <name5> )	convert a urllib unquoted string <name5> to a <name6> data <name1>
<name1> = <name2> . loads ( <name3> )	convert a urllib unquoted string <name3> to a <name2> data <name1>
[ chr ( i ) for i in range ( 127 ) ]	Create a list containing all ascii characters as its elements
<name1> . <name6> ( struct . pack ( '5B'   , * <name2> ) )	<name6> <name2> to a binary file <name1>
<name1> . <name2> ( struct . pack ( '5B'   , * <name3> ) )	<name2> <name3> to a binary file <name1>
re . sub ( '^[A-Z0-9]*(?![a-z])'   , ''   , <name1> )	python regex - check for a capital letter with a following lowercase in <name1> <name1>
list ( <name1> . keys ( ) ) [ -1 ]	get the last key of dictionary <name1>
print ( <val6>   , file = f )	'write line ' <val6> ' to file `f`'
print ( <val1>   , file = f )	'write line ' <val1> ' to file `f`'
<name3> . encode ( 'iso-8859-15'   )	convert unicode string <name3> to ascii
<name1> . encode ( 'iso-8859-15'   )	convert unicode string <name1> to ascii
<name4> . objects . filter ( group = group ) . order_by ( '-added'   ) [ 0 ]	Django get maximum value associated with field 'added' in model <name4>
<name1> . objects . filter ( group = group ) . order_by ( '-added'   ) [ 0 ]	Django get maximum value associated with field 'added' in model <name1>
re . findall ( 'Test([0-9.]*[0-9]+)'   , <name5> )	Find all numbers and dots from a string <name5> using regex
re . findall ( 'Test([0-9.]*[0-9]+)'   , <name1> )	Find all numbers and dots from a string <name1> using regex
re . findall ( 'Test([\\d.]*\\d+)'   , text )	python regex to find all numbers and dots from 'text'
os . system ( <val2>   , <val6>   )	execute script <val6> using <val2> shell
os . system ( <val1>   , <val2>   )	execute script <val2> using <val1> shell
<name3> . sort ( key = lambda x : x [ 1 ] [ 2 ] )	Sort a list of tuples <name3> by third item in the tuple
<name1> . sort ( key = lambda x : x [ 1 ] [ 2 ] )	Sort a list of tuples <name1> by third item in the tuple
<name1> ( <name3> . get_range ( ) . get_keys ( ) )	get a <name1> of all keys in Cassandra database <name3> with pycassa
<name1> ( <name2> . get_range ( ) . get_keys ( ) )	get a <name1> of all keys in Cassandra database <name2> with pycassa
<name3> . <name3> . now ( )	create a <name3> with the current date &  time
<name1> . <name1> . now ( )	create a <name1> with the current date &  time
next ( i for i , x in enumerate ( <name6> ) <name1> not isinstance ( x , bool ) and x == <val5> )	get the index of an integer <val5> from a list <name6> <name1> the list also contains boolean items
next ( i for i , x in enumerate ( <name1> ) <name2> not isinstance ( x , bool ) and x == <val3> )	get the index of an integer <val3> from a list <name1> <name2> the list also contains boolean items
<name4> [ : ] = [ ( x - <val5> ) for x <name2> <name4> ]	subtract <val5> from every number <name2> <name4> list <name4>
<name1> [ : ] = [ ( x - <val2> ) for x <name3> <name1> ]	subtract <val2> from every number <name3> <name1> list <name1>
<name5> . choice ( os . listdir ( '  <name6> : \\'  ) )	choose a <name5> file from the directory contents of the <name6> drive , C:\\
<name1> . choice ( os . listdir ( '  <name2> : \\'  ) )	choose a <name1> file from the directory contents of the <name2> drive , C:\\
max ( <name6> . min ( ) , <name6> . max ( ) , key = abs )	get the highest element in absolute value in a numpy matrix <name6>
max ( <name1> . min ( ) , <name1> . max ( ) , key = abs )	get the highest element in absolute value in a numpy matrix <name1>
<name4> . replace ( <val3>   , '! !'   ) . <name2> ( '!'   )	<name2> a string <name4> considering the spaces <val3>
<name1> . replace ( <val2>   , '! !'   ) . <name3> ( '!'   )	<name3> a string <name1> considering the spaces <val2>
<name6> ( <name2> , <val3>   )	<name6> file <name2> with mode <val3>
<name1> ( <name2> , <val3>   )	<name1> file <name2> with mode <val3>
[ [ <name3> ( item ) for item <name1> zip ( * items ) ] for items <name1> zip ( * <name5> ) ]	<name3> elements at the same index <name1> list <name5>
[ [ <name1> ( item ) for item <name2> zip ( * items ) ] for items <name2> zip ( * <name3> ) ]	<name1> elements at the same index <name2> list <name3>
<name1> [ : , ( np . newaxis ) ]	add <name1> new axis to array <name1>
sum ( d * 10 ** i for i , d in enumerate ( x [ : : -1 ] ) )	Concatenate elements of a list 'x' of multiple integers to a single integer
r = int ( ''   . join ( map ( str , x ) ) )	convert a list of integers into a single integer
datetime . strptime ( '2010-11-13 10:33:54.227806'   , <val4>   )	convert a DateTime string back to a DateTime object of format <val4>
datetime . strptime ( '2010-11-13 10:33:54.227806'   , <val1>   )	convert a DateTime string back to a DateTime object of format <val1>
[ ( i , sum ( j ) / len ( j ) ) <name1> i , j <name4> <name2> ( <name3> . items ( ) ) ]	get the average of a <name2> values <name1> each key <name4> dictionary <name3> )
[ ( i , sum ( j ) / len ( j ) ) <name1> i , j <name2> <name3> ( <name4> . items ( ) ) ]	get the average of a <name3> values <name1> each key <name2> dictionary <name4> )
<name2> ( [ 1 , 2 ] , [ 3 , 4 ] )	<name2> two lists [1, 2] and [3, 4] into a list of two tuples containing elements at the same index in each list
<name1> ( [ 1 , 2 ] , [ 3 , 4 ] )	<name1> two lists [1, 2] and [3, 4] into a list of two tuples containing elements at the same index in each list
[ 'hello{0}'   . format ( i ) for i <name6> a ]	prepend string 'hello' to all items <name6> list 'a'
[ 'hello{0}'   . format ( i ) for i <name1> a ]	prepend string 'hello' to all items <name1> list 'a'
re . sub ( '(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)'   , '\\1'   , <name5> )	regex for repeating words in a string <name5>
re . sub ( '(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)'   , '\\1'   , <name1> )	regex for repeating words in a string <name1>
<name3> . div ( <name3> . sum ( axis = 1 ) , axis = 0 )	normalize a pandas dataframe <name3> by row
<name1> . div ( <name1> . sum ( axis = 1 ) , axis = 0 )	normalize a pandas dataframe <name1> by row
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , <name2> )	swap values in a tuple / list inside a list <name2>
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , <name1> )	swap values in a tuple / list inside a list <name1>
[ ( t [ 1 ] , t [ 0 ] ) for t <name3> <name6> ]	Swap values <name3> a tuple / list <name3> list <name6>
[ ( t [ 1 ] , t [ 0 ] ) for t <name1> <name2> ]	Swap values <name1> a tuple / list <name1> list <name2>
're . findall ( ' \\ [ [ ^\\ ] ] * \\ ] |\\ ( [ ^\\ ) ] * \\ ) | <val6> [ ^ <val6> ] * <val6> |\\ <name2> + ' , strs )'	'find all occurrences of the pattern ' \\ [ [ ^\\ ] ] * \\ ] |\\ ( [ ^\\ ) ] * \\ ) | <val6> [ ^ <val6> ] * <val6> |\\ <name2> + ' within `strs`'
're . findall ( ' \\ [ [ ^\\ ] ] * \\ ] |\\ ( [ ^\\ ) ] * \\ ) | <val1> [ ^ <val1> ] * <val1> |\\ <name2> + ' , strs )'	'find all occurrences of the pattern ' \\ [ [ ^\\ ] ] * \\ ] |\\ ( [ ^\\ ) ] * \\ ) | <val1> [ ^ <val1> ] * <val1> |\\ <name2> + ' within `strs`'
print ( list ( itertools . <name4> ( {  1 , 2 , <val5> , 4 }  , <val5> ) ) )	generate the <name4> of <val5> from a set {1, 2, 3, 4}
print ( list ( itertools . <name1> ( {  1 , 2 , <val2> , 4 }  , <val2> ) ) )	generate the <name1> of <val2> from a set {1, 2, 3, 4}
<name1> [ [ <val6>   , <val2>   , <val3>   ] ] = <name1> . apply ( <name4> , axis = 1 )	add multiple columns <val6> , <val2> , <val3> to pandas data frame <name1> from lambda function <name4>
<name1> [ [ <val2>   , <val3>   , <val4>   ] ] = <name1> . apply ( <name5> , axis = 1 )	add multiple columns <val2> , <val3> , <val4> to pandas data frame <name1> from lambda function <name5>
soup . find_all ( <val1>   , <name4> = <val6>   )	BeautifulSoup search <name4> <val6> inside tag <val1>
soup . find_all ( <val1>   , <name2> = <val3>   )	BeautifulSoup search <name2> <val3> inside tag <val1>
<name1> . strftime ( <val5>   )	Convert a datetime object <name1> into readable format <val5>
<name1> . strftime ( <val2>   )	Convert a datetime object <name1> into readable format <val2>
<name1> ( ''   . join ( c for c in <name2> if c . isdigit ( ) ) )	parse string <name2> to <name1> when string contains a number
<name2> [ <val4>   ] . update ( {  'class'   : {  'section'   : 5 }}  )	add dictionary {'class': {'section': 5}} to key <val4> of dictionary <name2>
<name1> [ <val2>   ] . update ( {  'class'   : {  'section'   : 5 }}  )	add dictionary {'class': {'section': 5}} to key <val2> of dictionary <name1>
dict ( map ( int , x . split ( ':'   ) ) for x in <name5> . split ( ','   ) )	transforming the string <name5> into dictionary
dict ( map ( int , x . split ( ':'   ) ) for x in <name1> . split ( ','   ) )	transforming the string <name1> into dictionary
np . where ( ( <name2> == ( 0 , 1 ) ) . all ( axis = 1 ) )	find rows matching (0,1) in a 2 dimensional numpy array <name2>
np . where ( ( <name1> == ( 0 , 1 ) ) . all ( axis = 1 ) )	find rows matching (0,1) in a 2 dimensional numpy array <name1>
dict ( [ [ 'two'   , 2 ] , [ 'one'   , 1 ] ] )	build a dictionary containing the conversion of each list in list [['two', 2], ['one', 1]] to a key / value pair as its items
dict ( zip ( <name1> [ : : 2 ] , <name1> [ 1 : : 2 ] ) )	convert list <name1> to dictionary having each two adjacent elements as key / value pair
<name1> = <val6>	assign float <val6> to variable <name1>
<name1> = <val2>	assign float <val2> to variable <name1>
re . findall ( '(([0-9]+)([A-Z]))'   , '20M10000N80M'   )	'separate numbers from characters in string ' '30m1000n20m' ''
re . findall ( '([0-9]+|[A-Z])'   , <val6>   )	separate numbers and characters in string <val6>
re . findall ( '([0-9]+|[A-Z])'   , <val1>   )	separate numbers and characters in string <val1>
re . findall ( '([0-9]+)([A-Z])'   , <val1>   )	separate numbers and characters in string <val1>
re . compile ( '\\w+'   ) . findall ( <val4>   )	Get a list of words from a string <val4> removing punctuation
re . compile ( '\\w+'   ) . findall ( <val1>   )	Get a list of words from a string <val1> removing punctuation
<name2> . <name2> . strptime ( <val4>   , '%H:%M'   ) . time ( )	Convert string <val4> into <name2> .time object
<name1> . <name1> . strptime ( <val2>   , '%H:%M'   ) . time ( )	Convert string <val2> into <name1> .time object
requests . get ( <val5>   , verify = False )	request url <val5> without verifying SSL certificates
requests . get ( <val1>   , verify = False )	request url <val1> without verifying SSL certificates
<name3> [ <name3> != <val6> ]	Extract values not equal to <val6> from numpy array <name3>
<name1> [ <name1> != <val2> ]	Extract values not equal to <val2> from numpy array <name1>
new_dict = {  k : v for k , v in zip ( <name2> , <name4> ) }	map two lists <name2> and <name4> into a dictionary
new_dict = {  k : v for k , v in zip ( <name1> , <name2> ) }	map two lists <name1> and <name2> into a dictionary
dict ( ( k , v ) for k , v in zip ( <name6> , <name5> ) )	map two lists <name6> and <name5> into a dictionary
dict ( ( k , v ) for k , v in zip ( <name1> , <name2> ) )	map two lists <name1> and <name2> into a dictionary
dict ( [ ( k , v ) for k , v in zip ( <name1> , <name3> ) ] )	map two lists <name1> and <name3> into a dictionary
dict ( [ ( k , v ) for k , v in zip ( <name1> , <name2> ) ] )	map two lists <name1> and <name2> into a dictionary
m = re . search ( '\\[(\\w+)\\]'   , <name5> )	find the string matches within parenthesis from a string <name5> using regex
m = re . search ( '\\[(\\w+)\\]'   , <name1> )	find the string matches within parenthesis from a string <name1> using regex
<name1> . setsockopt ( SOL_SOCKET , <name5> , 1 )	Enable the <name5> socket option in socket object <name1> to fix the error only one usage of each socket address is normally permitted
<name1> . setsockopt ( SOL_SOCKET , <name2> , 1 )	Enable the <name2> socket option in socket object <name1> to fix the error only one usage of each socket address is normally permitted
<name1> = [ ( a + b ) for a , b <name2> zip ( <name3> , <name5> ) ]	append the sum of each tuple pair <name2> the grouped list <name3> and list <name5> elements to list <name1>
<name1> = [ ( a + b ) for a , b <name2> zip ( <name3> , <name4> ) ]	append the sum of each tuple pair <name2> the grouped list <name3> and list <name4> elements to list <name1>
[ ord ( c ) for c in <name6> . decode ( 'hex'   ) ]	converting hex string <name6> to its integer representations
[ ord ( c ) for c in <name1> . decode ( 'hex'   ) ]	converting hex string <name1> to its integer representations
print ( sorted ( <name4> , key = lambda t : ( - t [ 2 ] , t [ 0 ] ) ) )	sort list <name4> by second element of each tuple in ascending and third element of each tuple in descending
print ( sorted ( <name1> , key = lambda t : ( - t [ 2 ] , t [ 0 ] ) ) )	sort list <name1> by second element of each tuple in ascending and third element of each tuple in descending
[ y for x <name3> <name6> ( <val1> ) for y <name3> [ x , x ] ]	get list of duplicated elements <name3> <name6> of <val1>
[ y for x <name1> <name2> ( <val3> ) for y <name1> [ x , x ] ]	get list of duplicated elements <name1> <name2> of <val3>
<name4> = open ( <val2>   ) . <name3> ( )	<name3> the contents of the file <val2> into <name4>
<name1> = open ( <val2>   ) . <name3> ( )	<name3> the contents of the file <val2> into <name1>
<name3> [ : ] = [ ( x / <name2> ) for x <name6> <name3> ]	divide each element <name6> list <name3> by integer <name2>
<name1> [ : ] = [ ( x / <name2> ) for x <name3> <name1> ]	divide each element <name3> list <name1> by integer <name2>
<name1> . <name2> ( ' '   , <val5>   , regex = True )	<name2> white spaces in dataframe <name1> with <val5>
<name1> . <name2> ( ' '   , <val3>   , regex = True )	<name2> white spaces in dataframe <name1> with <val3>
<name1> . <name1> . combine ( <name6> , <name1> . time . min )	convert date <name6> to <name1>
<name1> . <name1> . combine ( <name2> , <name1> . time . min )	convert date <name2> to <name1>
<name6> = str ( <name5> )	convert tuple <name5> to string <name6>
<name1> = str ( <name2> )	convert tuple <name2> to string <name1>
<name2> . ctime ( os . path . getmtime ( <name3> ) )	get modified <name2> of <name3> <name3>
<name1> . ctime ( os . path . getmtime ( <name2> ) )	get modified <name1> of <name2> <name2>
<name4> . ctime ( os . path . getctime ( <name5> ) )	get creation <name4> of <name5> <name5>
<name1> . ctime ( os . path . getctime ( <name2> ) )	get creation <name1> of <name2> <name2>
t = os . path . getmtime ( <name4> )	get modification time of file <name4>
t = os . path . getmtime ( <name1> )	get modification time of file <name1>
os . <name1> . getmtime ( <name1> )	get modification time of file <name1>
print ( ( 'last modified: %s'     % <name5> . ctime ( os . path . getmtime ( <name6> ) ) ) )	get modified <name5> of <name6> <name6>
print ( ( 'last modified: %s'     % <name1> . ctime ( os . path . getmtime ( <name2> ) ) ) )	get modified <name1> of <name2> <name2>
print ( ( 'created: %s'     % <name1> . ctime ( os . path . getctime ( <name5> ) ) ) )	get the creation <name1> of <name5> <name5>
print ( ( 'created: %s'     % <name1> . ctime ( os . path . getctime ( <name2> ) ) ) )	get the creation <name1> of <name2> <name2>
return os . path . getctime ( <name1> )	get the creation time of file <name1>
<name5> . system ( 'TASKKILL /F /IM firefox.exe'   )	execute <name5> command '' TASKKILL / F / IM firefox .exe ''
<name1> . system ( 'TASKKILL /F /IM firefox.exe'   )	execute <name1> command '' TASKKILL / F / IM firefox .exe ''
'return ( x . group ( 0 ) for x in re . finditer ( ' '[A-Za-z' ] + ''   , <name1> ) ) '	split <name1> <name1> on whitespaces using a generator
'' '' ' ' ', ' ' ' '' ' . join ( [ ' % . 2 f ' ] * len ( x ) )'	Unpack each value in list x to its placeholder '%' in string '%.2f'
print ( re . <name1> ( <val6>   , <val4>   ) . group ( 1 ) )	<name1> regex pattern <val6> with string <val4>
print ( re . <name1> ( <val2>   , <val3>   ) . group ( 1 ) )	<name1> regex pattern <val2> with string <val3>
<name5> [ <val6>   ] . str . <name3> ( '\\(.*\\)'   , <val4>   )	<name3> parentheses and all data within it with empty string <val4> in column <val6> of dataframe <name5>
<name1> [ <val2>   ] . str . <name3> ( '\\(.*\\)'   , <val4>   )	<name3> parentheses and all data within it with empty string <val4> in column <val2> of dataframe <name1>
<name1> = [ x for x <name2> <name3> <name4> x [ 0 ] <name2> <name5> ]	create a list <name1> containing elements form list <name3> <name4> first element of list <name3> is <name2> list <name5>
print ( [ ''   . join ( a ) for a <name4> combinations ( [ 'hel'   , 'lo'   , 'bye'   ] , 2 ) ] )	generate all possible string permutations of each two elements <name4> list ['hel', 'lo', 'bye']
print ( [ ''   . join ( a ) for a <name1> combinations ( [ 'hel'   , 'lo'   , 'bye'   ] , 2 ) ] )	generate all possible string permutations of each two elements <name1> list ['hel', 'lo', 'bye']
[ x for x in <name4> if <val6>     in x [ 2 ] ]	get a list of items form nested list <name4> where third element of each item contains string <val6>
[ x for x in <name1> if <val2>     in x [ 2 ] ]	get a list of items form nested list <name1> where third element of each item contains string <val2>
<name4> . sort ( key = lambda x : x [ <val5> ] )	Sort lists in the list <name4> by the element at index <val5> of each list
<name1> . sort ( key = lambda x : x [ <val2> ] )	Sort lists in the list <name1> by the element at index <val2> of each list
logging . info ( <val6>   )	Log message <val6> on the root logger .
logging . info ( <val1>   )	Log message <val1> on the root logger .
fig . add_subplot ( 1 , 1 , 1 )	Return a subplot axes positioned by the grid definition 1,1,1 using matpotlib
sorted ( list ( <name4> . items ( ) ) , key = operator . itemgetter ( 1 ) )	Sort dictionary <name4> by value in ascending order
sorted ( list ( <name1> . items ( ) ) , key = operator . itemgetter ( 1 ) )	Sort dictionary <name1> by value in ascending order
sorted ( <name1> , key = <name1> . get )	Sort dictionary <name1> by value in ascending order
sorted ( <name6> , key = <name6> . get , reverse = True )	Sort dictionary <name6> by value in descending order
sorted ( <name1> , key = <name1> . get , reverse = True )	Sort dictionary <name1> by value in descending order
sorted ( list ( <name3> . items ( ) ) , key = ( lambda x : x [ 1 ] ) )	Sort dictionary <name3> by value in ascending order
sorted ( list ( <name1> . items ( ) ) , key = ( lambda x : x [ 1 ] ) )	Sort dictionary <name1> by value in ascending order
np . einsum ( 'ijk,ikl->ijl'   , <name4> , <name2> )	elementwise product of 3 d arrays <name4> and <name2>
np . einsum ( 'ijk,ikl->ijl'   , <name1> , <name2> )	elementwise product of 3 d arrays <name1> and <name2>
print ( 'I have: {0.price}'   . format ( <name1> ) )	Print a string <name1> with string formatting
<name2> . write ( <val6>   )	Write a comment <val6> to a file object <name2>
<name1> . write ( <val2>   )	Write a comment <val2> to a file object <name1>
<name6> = <name6> [ -1 : ] + <name6> [ : -1 ]	move the last item in list <name6> to the beginning
<name1> = <name1> [ -1 : ] + <name1> [ : -1 ]	move the last item in list <name1> to the beginning
<name1> . strftime ( <val5>   )	Parse DateTime object <name1> using format <val5>
<name1> . strftime ( <val2>   )	Parse DateTime object <name1> using format <val2>
mixed . replace ( '\r\n'   , '\n'   ) . replace ( '\r'   , '\n'   )	Normalize line ends in a string 'mixed'
os . path . expanduser ( '~user'   )	find the real user home directory using python
T = [ <name5> [ i ] for i in <name1> ]	index a list <name5> with another list <name1>
T = [ <name1> [ i ] for i in <name2> ]	index a list <name1> with another list <name2>
<name6> = open ( <val1>   ) . read ( ) . split ( )	get a list of <name6> <name6> of a file <val1>
<name1> = open ( <val2>   ) . read ( ) . split ( )	get a list of <name1> <name1> of a file <val2>
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in <name6> ]	Get a list of lists with summing the values of the second element from each list of lists <name6>
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in <name1> ]	Get a list of lists with summing the values of the second element from each list of lists <name1>
[ sum ( [ x [ 1 ] for x <name4> i ] ) for i <name4> data ]	summing the second item <name4> a list of lists of lists
[ sum ( [ x [ 1 ] for x <name1> i ] ) for i <name1> data ]	summing the second item <name1> a list of lists of lists
Article . <name6> . annotate ( like_count = Count ( <val1>   ) ) . order_by ( '-like_count'   )	sort <name6> in Articles in descending order of counts of <val1>
Article . <name1> . annotate ( like_count = Count ( <val2>   ) ) . order_by ( '-like_count'   )	sort <name1> in Articles in descending order of counts of <val2>
today = datetime . datetime . utcnow ( ) . <name4> ( )	return a DateTime object with the current UTC <name4>
today = datetime . datetime . utcnow ( ) . <name1> ( )	return a DateTime object with the current UTC <name1>
[ ( <name6> * b ) for <name6> , b in zip ( <name4> , <name1> ) ]	create <name6> list containing the multiplication of each elements at the same index of list <name4> and list <name1>
[ ( <name1> * b ) for <name1> , b in zip ( <name2> , <name3> ) ]	create <name1> list containing the multiplication of each elements at the same index of list <name2> and list <name3>
re . findall ( <val2>   , <name3> )	fetch smilies matching regex pattern <val2> in string <name3>
re . findall ( <val1>   , <name2> )	fetch smilies matching regex pattern <val1> in string <name2>
re . <name2> ( <val5>   , <name4> )	<name2> the pattern <val5> to the string <name4>
re . <name1> ( <val2>   , <name3> )	<name1> the pattern <val2> to the string <name3>
<name1> = <name2> . dumps ( [ ob . __dict__ for ob in <name6> ] )	convert a list of objects <name6> to <name2> string <name1>
<name1> = <name2> . dumps ( [ ob . __dict__ for ob in <name3> ] )	convert a list of objects <name3> to <name2> string <name1>
<name4> = [ 0 ] * <name5>	create a list <name4> of <name5> zeros
<name1> = [ 0 ] * <name2>	create a list <name1> of <name2> zeros
stringnamehere . <name4> ( 'utf-8'   , 'ignore'   )	<name4> the string 'stringnamehere' to UTF -8
stringnamehere . <name1> ( 'utf-8'   , 'ignore'   )	<name1> the string 'stringnamehere' to UTF -8
re . findall ( <val4>   , <val3>   )	Match regex pattern <val4> on string <val3>
re . findall ( <val1>   , <val2>   )	Match regex pattern <val1> on string <val2>
<name6> . setdefault ( <name1> , [ ] ) . <name4> ( <name3> )	Create a <name1> <name1> if it does not exist in dict <name6> and <name4> element <name3> to <name3> .
<name1> . setdefault ( <name2> , [ ] ) . <name3> ( <name4> )	Create a <name2> <name2> if it does not exist in dict <name1> and <name3> element <name4> to <name4> .
<name4> [ np . argmin ( <name4> [ : , ( 1 ) ] ) ]	Get the value of the minimum element in the second column of array <name4>
<name1> [ np . argmin ( <name1> [ : , ( 1 ) ] ) ]	Get the value of the minimum element in the second column of array <name1>
<name5> . update ( <name4> )	extend dictionary <name5> with key / value pairs of dictionary <name4>
<name1> . update ( <name2> )	extend dictionary <name1> with key / value pairs of dictionary <name2>
[ {  k : v for k , v in d . items ( ) if k != <val3>  }   for d in <name2> ]	removing key values pairs with key <val3> from a list of dictionaries <name2>
[ {  k : v for k , v in d . items ( ) if k != <val1>  }   for d in <name2> ]	removing key values pairs with key <val1> from a list of dictionaries <name2>
numpy . <name5> . <name5> ( ( <val4> , <val4> ) )	create <val4> by <val4> matrix of <name5> numbers
numpy . <name1> . <name1> ( ( <val2> , <val2> ) )	create <val2> by <val2> matrix of <name1> numbers
df [ <val3>   ] = df [ <val2>   ] + df [ <val5>   ]	make new column <val3> in panda dataframe by adding values from other columns <val2> and <val5>
df [ <val1>   ] = df [ <val2>   ] + df [ <val3>   ]	make new column <val1> in panda dataframe by adding values from other columns <val2> and <val3>
[ value for <name2> , value in <name3> ( <name5> . items ( ) ) if <val1>     in <name2> . lower ( ) ]	create a <name3> of values from the dictionary <name5> that have a <name2> with a case insensitive match to <val1>
[ value for <name1> , value in <name2> ( <name3> . items ( ) ) if <val4>     in <name1> . lower ( ) ]	create a <name2> of values from the dictionary <name3> that have a <name1> with a case insensitive match to <val4>
sys . <name3> . <name6> ( <val4>   )	<name6> a <name3> <val4> in system <name3>
sys . <name1> . <name2> ( <val3>   )	<name2> a <name1> <val3> in system <name1>
re . findall ( '\\d+(?=[^[]+$)'   , <name5> )	get all digits in a string <name5> after a '[' character
re . findall ( '\\d+(?=[^[]+$)'   , <name1> )	get all digits in a string <name1> after a '[' character
<name3> . load ( open ( <val4>   , 'rb'   ) )	python <name3> / unpickle a list to / from a file <val4>
<name1> . load ( open ( <val2>   , 'rb'   ) )	python <name1> / unpickle a list to / from a file <val2>
<name6> . groupby ( level = <val2>   ) . agg ( lambda x : x . <name3> . get_level_values ( 1 ) . nunique ( ) )	count unique <name3> values in column <val2> in pandas dataframe <name6>
<name1> . groupby ( level = <val2>   ) . agg ( lambda x : x . <name3> . get_level_values ( 1 ) . nunique ( ) )	count unique <name3> values in column <val2> in pandas dataframe <name1>
pd . concat ( map ( pd . DataFrame , iter ( <name5> . <name6> ( ) ) ) , keys = list ( <name5> . keys ( ) ) ) . stack ( ) . unstack ( 0 )	Create a pandas dataframe of <name6> from a dictionary <name5> which contains dictionaries of dictionaries
pd . concat ( map ( pd . DataFrame , iter ( <name1> . <name2> ( ) ) ) , keys = list ( <name1> . keys ( ) ) ) . stack ( ) . unstack ( 0 )	Create a pandas dataframe of <name2> from a dictionary <name1> which contains dictionaries of dictionaries
sum ( 1 for i , j in zip ( <name4> , <name6> ) if i != j )	find out the number of non - matched elements at the same index of list <name4> and list <name6>
sum ( 1 for i , j in zip ( <name1> , <name2> ) if i != j )	find out the number of non - matched elements at the same index of list <name1> and list <name2>
<name3> = {  ( a . lower ( ) , b ) : v for ( a , b ) , v <name4> list ( <name3> . items ( ) ) }	make all keys lowercase <name4> dictionary <name3>
<name1> = {  ( a . lower ( ) , b ) : v for ( a , b ) , v <name2> list ( <name1> . items ( ) ) }	make all keys lowercase <name2> dictionary <name1>
<name5> . <name1> ( key = lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] )	<name1> list <name5> based on first element of each tuple and by the length of the second element of each tuple
<name1> . <name2> ( key = lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] )	<name2> list <name1> based on first element of each tuple and by the length of the second element of each tuple
<name2> . strip ( )	trim whitespace in string <name2>
<name1> . strip ( )	trim whitespace in string <name1>
<name3> = <name3> . lstrip ( )	trim whitespace ( including tabs ) in <name3> on the left side
<name1> = <name1> . lstrip ( )	trim whitespace ( including tabs ) in <name1> on the left side
<name2> = <name2> . rstrip ( )	trim whitespace ( including tabs ) in <name2> on the right side
<name1> = <name1> . rstrip ( )	trim whitespace ( including tabs ) in <name1> on the right side
<name5> = <name5> . strip ( <val1>   )	trim characters <val1> in <name5>
<name1> = <name1> . strip ( <val2>   )	trim characters <val2> in <name1>
print ( re . sub ( '[\\s+]'   , ''   , <name4> ) )	trim whitespaces ( including tabs ) in string <name4>
print ( re . sub ( '[\\s+]'   , ''   , <name1> ) )	trim whitespaces ( including tabs ) in string <name1>
Task . objects . exclude ( prerequisites__status__in = [ <val4>   , <val6>   , <val3>   ] )	In Django , filter Task.objects based on all entities in [ <val4> , <val6> , <val3> ]
Task . objects . exclude ( prerequisites__status__in = [ <val1>   , <val2>   , <val3>   ] )	In Django , filter Task.objects based on all entities in [ <val1> , <val2> , <val3> ]
root . configure ( <name5> = 'black'   )	Change <name5> color in Tkinter
root . configure ( <name1> = 'black'   )	Change <name1> color in Tkinter
<name6> . <name2> ( [ ( key , val ) for key , val in <name4> . items ( ) ] , dtype )	convert dict <name4> to <name6> structured <name2>
<name1> . <name2> ( [ ( key , val ) for key , val in <name3> . items ( ) ] , dtype )	convert dict <name3> to <name1> structured <name2>
pd . concat ( [ <name5> , <name1> . sort_values ( <val3>   ) ] )	Concatenate dataframe <name5> to dataframe <name1> sorted by values of the column <val3>
pd . concat ( [ <name1> , <name2> . sort_values ( <val3>   ) ] )	Concatenate dataframe <name1> to dataframe <name2> sorted by values of the column <val3>
re . sub ( '(.*)</div>'   , '\\1</bad>'   , <name2> )	replace the last occurence of an expression '</div>' with '</bad>' in a string <name2>
re . sub ( '(.*)</div>'   , '\\1</bad>'   , <name1> )	replace the last occurence of an expression '</div>' with '</bad>' in a string <name1>
print ( max ( d , key = lambda x : ( d [ x ] [ <val3>   ] , d [ x ] [ <val2>   ] ) ) )	get the maximum of <val3> and <val2> values in a dictionary
print ( max ( d , key = lambda x : ( d [ x ] [ <val1>   ] , d [ x ] [ <val2>   ] ) ) )	get the maximum of <val1> and <val2> values in a dictionary
Book . <name1> . filter ( author__id = <val5> ) . filter ( author__id = <val2> )	Filter Django <name1> by author with ids <val5> and <val2>
Book . <name1> . filter ( author__id = <val2> ) . filter ( author__id = <val3> )	Filter Django <name1> by author with ids <val2> and <val3>
re . compile ( <val4>   , re . IGNORECASE ) . <name1> ( <val5>   )	<name1> string <val5> based on case - insensitive matching using string <val4>
re . compile ( <val1>   , re . IGNORECASE ) . <name2> ( <val3>   )	<name2> string <val3> based on case - insensitive matching using string <val1>
[ sum ( map ( int , s ) ) for s <name3> <name1> . split ( ) ]	get list of sums of neighboring integers <name3> string <name1>
[ sum ( map ( int , s ) ) for s <name1> <name2> . split ( ) ]	get list of sums of neighboring integers <name1> string <name2>
[ i for i in <name5> if <name5> [ i ] == <val1> ]	Get all the keys from dictionary <name5> whose value is <val1>
[ i for i in <name1> if <name1> [ i ] == <val2> ]	Get all the keys from dictionary <name1> whose value is <val2>
<name3> . decode ( 'unicode_escape'   )	converting byte string <name3> in unicode string
<name1> . decode ( 'unicode_escape'   )	converting byte string <name1> in unicode string
pd . melt ( <name5> , id_vars = [ 'farm'   , 'fruit'   ] , var_name = <val1>   , value_name = <val4>   )	unpivot first 2 columns into new columns <val1> and <val4> from a pandas dataframe <name5>
pd . melt ( <name1> , id_vars = [ 'farm'   , 'fruit'   ] , var_name = <val2>   , value_name = <val3>   )	unpivot first 2 columns into new columns <val2> and <val3> from a pandas dataframe <name1>
default_data [ <val4>   ] = 3	'add key ' <val4> ' and value ' '3' ' to dictionary `default_data `'
default_data [ <val1>   ] = 3	'add key ' <val1> ' and value ' '3' ' to dictionary `default_data `'
default_data . update ( {  <val5>   : 3 , }  )	'add key ' <val5> ' and value ' '3' ' to dictionary `default_data `'
default_data . update ( {  <val1>   : 3 , }  )	'add key ' <val1> ' and value ' '3' ' to dictionary `default_data `'
<name2> . update ( {  <val4>   : <val6> , <val1>   : <val3> , }  )	add key value pairs <val4> , <val6> and <val1> , <val3> to dictionary <name2>
<name1> . update ( {  <val2>   : <val3> , <val4>   : <val5> , }  )	add key value pairs <val2> , <val3> and <val4> , <val5> to dictionary <name1>
<name5> [ : <val6> ] + <name5> [ -3 : ]	Get the first and last <val6> elements of list <name5>
<name1> [ : <val2> ] + <name1> [ -3 : ]	Get the first and last <val2> elements of list <name1>
<name4> = <name4> . reset_index ( drop = True )	reset index to default in dataframe <name4>
<name1> = <name1> . reset_index ( drop = True )	reset index to default in dataframe <name1>
[ <name5> [ <name2> ] . <name1> ( <name3> [ <name2> ] ) for <name2> in range ( <val6> ) ]	For each index <name2> from 0 to <val6> , <name1> the element at index <name2> of list <name3> to the list at index <name2> of list <name5> .
[ <name1> [ <name2> ] . <name3> ( <name4> [ <name2> ] ) for <name2> in range ( <val5> ) ]	For each index <name2> from 0 to <val5> , <name3> the element at index <name2> of list <name4> to the list at index <name2> of list <name1> .
os . <name6> . realpath ( <name6> )	get canonical <name6> of the filename <name6>
os . <name1> . realpath ( <name1> )	get canonical <name1> of the filename <name1>
set ( L [ 0 ] . f . items ( ) ) . issubset ( set ( a3 . f . items ( ) ) )	check if dictionary L[0].f.items() is in dictionary a3.f.items()
zip ( * np . <name4> ( <name3> == <val2> ) )	find all the indexes in <name3> Numpy 2 D array <name4> the value is <val2>
zip ( * np . <name1> ( <name2> == <val3> ) )	find all the indexes in <name2> Numpy 2 D array <name1> the value is <val3>
<name3> . columns = <name3> . columns . get_level_values ( <val5> )	Collapse hierarchical column index to level <val5> in dataframe <name3>
<name1> . columns = <name1> . columns . get_level_values ( <val2> )	Collapse hierarchical column index to level <val2> in dataframe <name1>
x = scipy . <name1> ( [ 1 , 2 , 3 ] ) . transpose ( )	create a <name1> from a list [1, 2, 3]
<name4> = re . sub ( '(\\bget\\b)'   , '\\1@'   , <name4> )	add character '@' after word 'get' in string <name4>
<name1> = re . sub ( '(\\bget\\b)'   , '\\1@'   , <name1> )	add character '@' after word 'get' in string <name1>
np . <name1> ( [ np . arange ( <val5> ) , np . arange ( 2 , -1 , -1 ) , np . ones ( ( <val5> , ) ) ] ) . min ( axis = 0 )	get a numpy <name1> that contains the element wise minimum of three <val5> x1 arrays
np . <name1> ( [ np . arange ( <val2> ) , np . arange ( 2 , -1 , -1 ) , np . ones ( ( <val2> , ) ) ] ) . min ( axis = 0 )	get a numpy <name1> that contains the element wise minimum of three <val2> x1 arrays
<name1> [ <val6>   ] = list ( <name3> ( 1 , len ( <name1> ) + 1 ) )	add a column <val6> to dataframe <name1> for index in <name3>
<name1> [ <val2>   ] = list ( <name3> ( 1 , len ( <name1> ) + 1 ) )	add a column <val2> to dataframe <name1> for index in <name3>
os . environ [ <val2>   ] = '1'	set environment variable <val2> equal to 1
os . environ [ <val1>   ] = '1'	set environment variable <val1> equal to 1
print ( os . environ [ <val6>   ] )	Get a environment variable <val6>
print ( os . environ [ <val1>   ] )	Get a environment variable <val1>
os . environ [ <val4>   ] = <val3>	set environment variable <val4> to <val3>
os . environ [ <val1>   ] = <val2>	set environment variable <val1> to <val2>
<name6> . <name5> ( <name2> )	<name5> dictionary <name6> , overwriting values where keys are identical , with contents of dictionary <name2>
<name1> . <name2> ( <name3> )	<name2> dictionary <name1> , overwriting values where keys are identical , with contents of dictionary <name3>
<name4> [ <val6>   ]	get all the values in column <val6> from pandas data frame <name4>
<name1> [ <val2>   ]	get all the values in column <val2> from pandas data frame <name1>
<name5> = plt . errorbar ( x , y , yerr = err , ecolor = <val2>   )	make a line plot with errorbars , <name5> , from data x, y, err and set color of the errorbars to <val2> ( yellow )
<name1> = plt . errorbar ( x , y , yerr = err , ecolor = <val2>   )	make a line plot with errorbars , <name1> , from data x, y, err and set color of the errorbars to <val2> ( yellow )
results += [ each for each <name3> os . listdir ( <name6> ) if each . endswith ( <val2>   ) ]	find all files with extension <val2> <name3> directory <name6>
results += [ each for each <name1> os . listdir ( <name2> ) if each . endswith ( <val3>   ) ]	find all files with extension <val3> <name1> directory <name2>
print ( <val5>   . decode ( 'utf8'   ) + <val4>   )	add unicode string <val4> to UTF -8 decoded string <val5>
print ( <val1>   . decode ( 'utf8'   ) + <val2>   )	add unicode string <val2> to UTF -8 decoded string <val1>
re . sub ( <val3>   , <val1>   , <name2> ) . <name6> ( )	<name6> - case the string obtained by replacing the occurrences of regex pattern <val3> in string <name2> with eplacement <val1>
re . sub ( <val1>   , <val2>   , <name3> ) . <name4> ( )	<name4> - case the string obtained by replacing the occurrences of regex pattern <val1> in string <name3> with eplacement <val2>
'' '' ' ' '{0:.3g}' ' ' '' ' . format ( num )'	format a string num using string formatting
numpy . <name1> ( <name5> , <name5> [ 0 ] )	<name1> the first element of array <name5> to array <name5>
numpy . <name1> ( <name2> , <name2> [ 0 ] )	<name1> the first element of array <name2> to array <name2>
<name4> . ix [ : , ( <name4> . loc [ 0 ] == <val1> ) ] . columns	return the column for value <val1> in dataframe <name4>
<name1> . ix [ : , ( <name1> . loc [ 0 ] == <val2> ) ] . columns	return the column for value <val2> in dataframe <name1>
<name5> [ <val1>   ] = <name5> . CET . map ( <name3> . set_index ( <val2>   ) [ <val1>   ] )	merge 2 dataframes <name3> and <name5> with same values in a column <val1> with and index <val2>
<name1> [ <val2>   ] = <name1> . CET . map ( <name3> . set_index ( <val4>   ) [ <val2>   ] )	merge 2 dataframes <name3> and <name1> with same values in a column <val2> with and index <val4>
<name4> = <name1> . loads ( <name6> )	load a <name1> data <name6> into variable <name4>
<name1> = <name2> . loads ( <name3> )	load a <name2> data <name3> into variable <name1>
math . cos ( math . <name3> ( <val6> ) )	convert <name3> <val6> to degrees
math . cos ( math . <name1> ( <val2> ) )	convert <name1> <val2> to degrees
sum ( isinstance ( x , int ) for x <name2> <name3> )	count the number of integers <name2> list <name3>
sum ( isinstance ( x , int ) for x <name1> <name2> )	count the number of integers <name1> list <name2>
'used\u200b'   . replace ( <val2>   , <val1>   )	replacing <val2> with <val1> in a string using regular expressions
'used\u200b'   . replace ( <val1>   , <val2>   )	replacing <val1> with <val2> in a string using regular expressions
threading . Thread ( target = SudsMove ) . start ( )	run function 'SudsMove' simultaneously
<name3> ( i * i for i <name1> <name4> )	<name3> of squares values <name1> a list <name4>
<name1> ( i * i for i <name2> <name3> )	<name1> of squares values <name2> a list <name3>
<name1> ( map ( lambda x : x * x , <name4> ) )	calculate the <name1> of the squares of each value in list <name4>
<name1> ( map ( lambda x : x * x , <name2> ) )	calculate the <name1> of the squares of each value in list <name2>
<name3> = dict ( ( ( key , value ) for ( key , value ) in <name1> ) )	Create a dictionary <name3> from list <name1>
<name1> = dict ( ( ( key , value ) for ( key , value ) in <name2> ) )	Create a dictionary <name1> from list <name2>
<name4> = {  key : value for ( key , value ) in <name5> }	Create a dictionary <name4> from list <name5>
<name1> = {  key : value for ( key , value ) in <name2> }	Create a dictionary <name1> from list <name2>
<name5> = {  k : v for ( k , v ) in <name6> }	Create a dictionary <name5> from list of key value pairs <name6>
<name1> = {  k : v for ( k , v ) in <name2> }	Create a dictionary <name1> from list of key value pairs <name2>
<name1> . <name5> ( {  <val6>   : 2 , <val3>   : 3 }  )	<name5> off entries in dataframe <name1> column <val6> to two decimal places , and entries in column <val3> to three decimal places
<name1> . <name2> ( {  <val3>   : 2 , <val4>   : 3 }  )	<name2> off entries in dataframe <name1> column <val3> to two decimal places , and entries in column <val4> to three decimal places
<name6> . setopt ( pycurl . <name3> , lambda x : None )	Make function <name3> output nothing in curl <name6>
<name1> . setopt ( pycurl . <name2> , lambda x : None )	Make function <name2> output nothing in curl <name1>
print ( <name2> . choice ( words ) )	return a <name2> word from a word list 'words'
print ( <name1> . choice ( words ) )	return a <name1> word from a word list 'words'
<name3> ( <name2> , <name1> = lambda x : <name2> [ x ] [ <val5>   ] )	Find a <name3> value of the <name1> <val5> in a nested dictionary <name2>
<name1> ( <name2> , <name3> = lambda x : <name2> [ x ] [ <val4>   ] )	Find a <name1> value of the <name3> <val4> in a nested dictionary <name2>
[ ( int ( x ) if x else <val4> ) for x <name5> <name1> . split ( ','   ) ]	get list of string elements <name5> string <name1> delimited by commas , putting <val4> <name5> place of empty strings
[ ( int ( x ) if x else <val1> ) for x <name2> <name3> . split ( ','   ) ]	get list of string elements <name2> string <name3> delimited by commas , putting <val1> <name2> place of empty strings
'' '' ' ' <val5> ' ' '' ' . join ( x or ' 0 '   for x in s . split ( ' , ' ) )'	split string s into a list of strings based on <val5> then replace empty strings with zero
'' '' ' ' <val1> ' ' '' ' . join ( x or ' 0 '   for x in s . split ( ' , ' ) )'	split string s into a list of strings based on <val1> then replace empty strings with zero
re . compile ( '$^'   )	regular expression match nothing
re . compile ( '.\\A|.\\A*|.\\A+'   )	regular expression syntax for not to match anything
re . compile ( 'a^'   )	create a regular expression object with a pattern that will match nothing
<name5> . <name3> [ <name5> . max ( ) >   <val4> ]	drop all <name3> in dataframe <name5> that holds a maximum value bigger than <val4>
<name1> . <name2> [ <name1> . max ( ) >   <val3> ]	drop all <name2> in dataframe <name1> that holds a maximum value bigger than <val3>
<name2> . <name6> ( ) == datetime . <name4> ( ) . <name6> ( )	check if <name6> <name2> is equal to <name4> ' s <name6>
<name1> . <name2> ( ) == datetime . <name3> ( ) . <name2> ( )	check if <name2> <name1> is equal to <name3> ' s <name2>
<name3> ( '\x1b[1m'     + <val2>   )	<name3> bold text <val2>
<name1> ( '\x1b[1m'     + <val2>   )	<name1> bold text <val2>
re . sub ( '.{20}(.mkv)'   , '\\1'   , <val2>   )	remove 20 symbols in front of '.' in string <val2>
re . sub ( '.{20}(.mkv)'   , '\\1'   , <val1>   )	remove 20 symbols in front of '.' in string <val1>
[ 'a'   , 'c'   , 'b'   , 'obj'   ]	Define a list with string values ['a', 'c', 'b', 'obj']
'' '' ' ' ' ' ' ' '' ' . join ( mystring . split ( ) )'	substitute multiple whitespace with single whitespace in string mystring
<name2> ( '{:.100f}'   . format ( <val5> <name1> <val3> ) )	<name2> a floating point number <val5> <name1> <val3> without any truncation
<name1> ( '{:.100f}'   . format ( <val2> <name3> <val4> ) )	<name1> a floating point number <val2> <name3> <val4> without any truncation
( <val5>     <name1> <name2> )	Check if key <val5> <name1> <name2>
( <val1>     <name2> <name3> )	Check if key <val1> <name2> <name3>
( <val3>     <name2> <name6> )	Check if key <val3> <name2> <name6>
( <val1>     <name2> <name3> )	Check if key <val1> <name2> <name3>
( <val3>     <name1> <name5> )	Check if key <val3> <name1> <name5>
( <val1>     <name2> <name3> )	Check if key <val1> <name2> <name3>
Blog . objects . filter ( pk__in = [ 1 , 4 , 7 ] )	create a django query for a list of values 1, 4, 7
f = open ( <val6>   , 'rb'   )	read a binary file <val6>
f = open ( <val1>   , 'rb'   )	read a binary file <val1>
format ( <val3> , <val2>   ) . <name4> ( <val2>   , <val6>   ) . <name4> ( <val5>   , <val2>   )	insert <val6> between every three digit before <val5> and <name4> <val2> with <val5> in <val3>
format ( <val1> , <val2>   ) . <name3> ( <val2>   , <val4>   ) . <name3> ( <val5>   , <val2>   )	insert <val4> between every three digit before <val5> and <name3> <val2> with <val5> in <val1>
pd . merge ( <name3> , <name6> , left_on = <val4>   , right_on = <val5>   )	Join pandas data frame <name3> and <name6> with left join by <val4> and right join by <val5>
pd . merge ( <name1> , <name2> , left_on = <val3>   , right_on = <val4>   )	Join pandas data frame <name1> and <name2> with left join by <val3> and right join by <val4>
np . isnan ( <name3> ) . sum ( ) / np . prod ( <name3> . shape )	calculate ratio of sparsity in <name3> numpy array <name3>
np . isnan ( <name1> ) . sum ( ) / np . prod ( <name1> . shape )	calculate ratio of sparsity in <name1> numpy array <name1>
sorted ( iter ( <name2> . <name6> ( ) ) , <name3> = lambda k_v : k_v [ 1 ] [ 2 ] , <name5> = True )	<name5> sort <name6> in default dictionary <name2> by the third item in each <name3> ' s list of values
sorted ( iter ( <name1> . <name2> ( ) ) , <name3> = lambda k_v : k_v [ 1 ] [ 2 ] , <name4> = True )	<name4> sort <name2> in default dictionary <name1> by the third item in each <name3> ' s list of values
sorted ( list ( <name6> . items ( ) ) , key = lambda v : v [ 1 ] )	Sort dictionary <name6> in ascending order based on second elements of its values
sorted ( list ( <name1> . items ( ) ) , key = lambda v : v [ 1 ] )	Sort dictionary <name1> in ascending order based on second elements of its values
sorted ( list ( <name1> . items ( ) ) , key = lambda k_v : k_v [ 1 ] , <name4> = True )	<name4> sort dictionary <name1> based on its values
sorted ( list ( <name1> . items ( ) ) , key = lambda k_v : k_v [ 1 ] , <name2> = True )	<name2> sort dictionary <name1> based on its values
sorted ( list ( <name4> . items ( ) ) , key = lambda k_v : k_v [ 1 ] )	sorting a defaultdict <name4> by value
sorted ( list ( <name1> . items ( ) ) , key = lambda k_v : k_v [ 1 ] )	sorting a defaultdict <name1> by value
f = <name6> ( os . path . join ( __location__ , <val4>   ) )	<name6> a file <val4> in the same directory as a python script
f = <name1> ( os . path . join ( __location__ , <val2>   ) )	<name1> a file <val2> in the same directory as a python script
f = <name2> ( <val1>   , <val4>   )	<name2> the file <val1> in <val4> mode
f = <name1> ( <val2>   , <val3>   )	<name1> the file <val2> in <val3> mode
{  k : ( float ( <name3> [ k ] ) / <name5> [ k ] ) for k in <name3> }	divide the values with same keys of two dictionary <name5> and <name3>
{  k : ( float ( <name1> [ k ] ) / <name2> [ k ] ) for k in <name1> }	divide the values with same keys of two dictionary <name2> and <name1>
{  <name6> : ( <name3> [ <name6> ] / <name2> [ <name6> ] ) <name5> <name6> <name4> list ( <name2> . keys ( ) ) &   <name3> }	divide the value <name5> each key <name6> <name4> dict <name3> by the value <name5> the same key <name6> <name4> dict <name2>
{  <name1> : ( <name2> [ <name1> ] / <name3> [ <name1> ] ) <name4> <name1> <name5> list ( <name3> . keys ( ) ) &   <name2> }	divide the value <name4> each key <name1> <name5> dict <name2> by the value <name4> the same key <name1> <name5> dict <name3>
dict ( ( k , float ( <name1> [ k ] ) / <name4> [ k ] ) for k <name3> <name1> )	divide values associated with each key <name3> dictionary <name4> from values associated with the same key <name3> dictionary <name1>
dict ( ( k , float ( <name1> [ k ] ) / <name2> [ k ] ) for k <name3> <name1> )	divide values associated with each key <name3> dictionary <name2> from values associated with the same key <name3> dictionary <name1>
<name1> . to_csv ( <name4> , date_format = <val6>   )	write dataframe <name1> to csv file <name4> with dates formatted as yearmonthday <val6>
<name1> . to_csv ( <name2> , date_format = <val3>   )	write dataframe <name1> to csv file <name2> with dates formatted as yearmonthday <val3>
<name6> . pop ( <val3>   , None )	remove a key <val3> from a dictionary <name6>
<name1> . pop ( <val2>   , None )	remove a key <val2> from a dictionary <name1>
b = np . where ( np . isnan ( <name2> ) , 0 , <name2> )	replace NaN values in array <name2> with zeros
b = np . where ( np . isnan ( <name1> ) , 0 , <name1> )	replace NaN values in array <name1> with zeros
<name6> . call ( <val3>   , <name5> = True )	<name6> run command <val3> through the <name5>
<name1> . call ( <val2>   , <name3> = True )	<name1> run command <val2> through the <name3>
subprocess . call ( <val5>   , shell = True )	run command <val5> on command line tools as separate processes
subprocess . call ( <val1>   , shell = True )	run command <val1> on command line tools as separate processes
<name2> = urllib . <name1> . urlopen ( url , urllib . parse . unquote ( urllib . parse . urlencode ( params ) ) )	replace percent - encoded code in <name1> <name2> to their single - character equivalent
<name1> = urllib . <name2> . urlopen ( url , urllib . parse . unquote ( urllib . parse . urlencode ( params ) ) )	replace percent - encoded code in <name2> <name1> to their single - character equivalent
<val2> <val2> ' ' <val5> ' ' <val2> ' . rstrip ( )'	'remove white spaces from the end of string ' <val5> <val2>
<val1> <val1> ' ' <val2> ' ' <val1> ' . rstrip ( )'	'remove white spaces from the end of string ' <val2> <val1>
urllib . parse . quote ( <name6> . encode ( 'utf-8'   ) )	Replace special characters in utf -8 encoded string <name6> using the % xx escape
urllib . parse . quote ( <name1> . encode ( 'utf-8'   ) )	Replace special characters in utf -8 encoded string <name1> using the % xx escape
np . <name5> ( map ( int , <val4>   ) )	Create an <name5> containing the conversion of string <val4> into separate elements
np . <name1> ( map ( int , <val2>   ) )	Create an <name1> containing the conversion of string <val2> into separate elements
print ( np . <name3> ( list ( mystr ) , dtype = int ) )	convert a string 'mystr' to numpy <name3> of integer values
print ( np . <name1> ( list ( mystr ) , dtype = int ) )	convert a string 'mystr' to numpy <name1> of integer values
<name2> = cv2 . imread ( <val6>   , 0 )	convert an rgb image <val6> into grayscale <name2>
<name1> = cv2 . imread ( <val2>   , 0 )	convert an rgb image <val2> into grayscale <name1>
<name3> . <name2> ( key = lambda x : x [ 2 ] , reverse = True )	<name2> list <name3> in descending order based on the second item of each tuple in it
<name1> . <name2> ( key = lambda x : x [ 2 ] , reverse = True )	<name2> list <name1> in descending order based on the second item of each tuple in it
subprocess . call ( <val5>   , <name1> = True )	execute <name1> command <val5> with a |  pipe in it
subprocess . call ( <val1>   , <name2> = True )	execute <name2> command <val1> with a |  pipe in it
len ( <name3> ) - len ( <name3> . rstrip ( '?'   ) )	count the number of trailing question marks in string <name3>
len ( <name1> ) - len ( <name1> . rstrip ( '?'   ) )	count the number of trailing question marks in string <name1>
df [ df . columns [ 1 : ] ] . replace ( '[\\$,]'   , ''   , regex = True ) . astype ( float )	remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats
<name4> . merge ( <name6> , how = 'left'   , <name1> = <val3>   )	Merge column <val3> in dataframe <name6> with column <val3> <name1> dataframe <name4>
<name1> . merge ( <name2> , how = 'left'   , <name3> = <val4>   )	Merge column <val4> in dataframe <name2> with column <val4> <name3> dataframe <name1>
print ( ''   . join ( ''   . join ( i ) for i <name4> zip ( a2 , a1 ) ) + <name1> [ -1 ] if len ( <name1> ) % 2 else ''   )	switch positions of each two adjacent characters <name4> string <name1>
print ( ''   . join ( ''   . join ( i ) for i <name1> zip ( a2 , a1 ) ) + <name2> [ -1 ] if len ( <name2> ) % 2 else ''   )	switch positions of each two adjacent characters <name1> string <name2>
<name4> . attributes ( '-topmost'   , True )	make a window <name4> jump to the front
<name1> . attributes ( '-topmost'   , True )	make a window <name1> jump to the front
<name3> . lift ( )	make a window <name3> jump to the front
<name1> . lift ( )	make a window <name1> jump to the front
<name1> ( int ( ''   . join ( [ str ( int ( b ) ) for b in <name6> ] ) , 2 ) )	Convert list of booleans <name6> into a <name1> string
<name1> ( int ( ''   . join ( [ str ( int ( b ) ) for b in <name2> ] ) , 2 ) )	Convert list of booleans <name2> into a <name1> string
<name1> ( <name5> ( b << i for i , b in enumerate ( reversed ( <name4> ) ) ) )	convert the <name5> of list <name4> into a <name1> presentation
<name1> ( <name2> ( b << i for i , b in enumerate ( reversed ( <name3> ) ) ) )	convert the <name2> of list <name3> into a <name1> presentation
<name3> ( ( <val5>   , <name6> , <val1>   , <name4> ) )	<name3> the string <val5> , the value of the variable <name6> , the string <val1> and the value of the variable <name4> in one <name3> call .
<name1> ( ( <val2>   , <name3> , <val4>   , <name5> ) )	<name1> the string <val2> , the value of the variable <name3> , the string <val4> and the value of the variable <name5> in one <name1> call .
<name5> ( 'Total score for {} is {}'   . format ( name , score ) )	<name5> multiple arguments 'name' and 'score' .
<name1> ( 'Total score for {} is {}'   . format ( name , score ) )	<name1> multiple arguments 'name' and 'score' .
<name5> ( 'Total score for %s is %s  '     % ( <name3> , <name1> ) )	<name5> a string using multiple strings <name3> and <name1>
<name1> ( 'Total score for %s is %s  '     % ( <name2> , <name3> ) )	<name1> a string using multiple strings <name2> and <name3>
<name2> ( ( 'Total score for'   , <name1> , 'is'   , <name4> ) )	<name2> string including multiple variables <name1> and <name4>
<name1> ( ( 'Total score for'   , <name2> , 'is'   , <name3> ) )	<name1> string including multiple variables <name2> and <name3>
url ( '^$'   , TemplateView . as_view ( template_name = <val3>   ) )	serve a static html page <val3> at the root of a django project
url ( '^$'   , TemplateView . as_view ( template_name = <val1>   ) )	serve a static html page <val1> at the root of a django project
<name5> [ <name5> [ 'A'   ] . isin ( [ 3 , 6 ] ) ]	use a list of values [3,6] to select rows from a pandas dataframe <name5> 's column ' A '
<name1> [ <name1> [ 'A'   ] . isin ( [ 3 , 6 ] ) ]	use a list of values [3,6] to select rows from a pandas dataframe <name1> 's column ' A '
system ( '/path/to/my/venv/bin/python myscript.py'   )	execute python code myscript.py in a virtualenv /path/to/my/venv from matlab
<name2> . objects . values_list ( <val6>   , flat = True )	django return a QuerySet list containing the values of field <val6> in model <name2>
<name1> . objects . values_list ( <val2>   , flat = True )	django return a QuerySet list containing the values of field <val2> in model <name1>
re . findall ( '\\d|\\d,\\d\\)'   , <val1>   )	find all digits in string <val1> and put them to a list
input ( <val2>   )	prompt string <val2> to the console
input ( <val1>   )	prompt string <val1> to the console
'' '' ' ' 'ABC' ' ' '' ' . encode ( ' hex ' )'	'print string ' 'ABC' ' as hex literal'
db . Doc . update ( {  '_id'   : b [ '_id'   ] }  , {  '$set'   : {  <val6>   : myGeolocCountry }}  )	insert a new field <val6> on an existing document 'b' using pymongo
db . Doc . update ( {  '_id'   : b [ '_id'   ] }  , {  '$set'   : {  <val1>   : myGeolocCountry }}  )	insert a new field <val1> on an existing document 'b' using pymongo
re . sub ( 'l+'   , 'l'   , 'lollll'   )	Write a regex statement to match 'lol' to 'lolllll' .
rows = <name1> . findAll ( <val3>   ) [ 4 : : 5 ]	BeautifulSoup find all <val3> elements in HTML string <name1> at the five stride starting from the fourth element
rows = <name1> . findAll ( <val2>   ) [ 4 : : 5 ]	BeautifulSoup find all <val2> elements in HTML string <name1> at the five stride starting from the fourth element
plt . gca ( ) . invert_xaxis ( )	reverse all x - axis points in pyplot
plt . gca ( ) . invert_yaxis ( )	reverse y - axis in pyplot
pd . concat ( [ GOOG , AAPL ] , keys = [ 'GOOG'   , 'AAPL'   ] , axis = 1 )	stack two dataframes next to each other in pandas
return HttpResponse ( <name2> . dumps ( <name3> ) , content_type = 'application/json'   )	create a <name2> response <name3>
return HttpResponse ( <name1> . dumps ( <name2> ) , content_type = 'application/json'   )	create a <name1> response <name2>
<name1> . <name6> ( 'string_escape'   )	<name6> escape sequences in string <name1>
<name1> . <name2> ( 'string_escape'   )	<name2> escape sequences in string <name1>
hashlib . <name1> ( open ( <val6>   , 'rb'   ) . read ( ) ) . hexdigest ( )	calculate the <name1> checksum of a file named <val6>
hashlib . <name1> ( open ( <val2>   , 'rb'   ) . read ( ) ) . hexdigest ( )	calculate the <name1> checksum of a file named <val2>
[ k for k , v in <name1> . items ( ) if v == <name6> ]	Find all keys from a dictionary <name1> whose values are <name6>
[ k for k , v in <name1> . items ( ) if v == <name2> ]	Find all keys from a dictionary <name1> whose values are <name2>
{  k for d in <name4> for k in list ( d . <name2> ( ) ) }	create a set containing all <name2> '  names from dictionary <name4>
{  k for d in <name1> for k in list ( d . <name2> ( ) ) }	create a set containing all <name2> '  names from dictionary <name1>
<name1> ( [ i for s in [ <name5> ( d . <name3> ( ) ) for d in <name4> ] for i in s ] )	create a <name1> containing all <name3> names from <name5> of dictionaries <name4>
<name1> ( [ i for s in [ <name2> ( d . <name3> ( ) ) for d in <name4> ] for i in s ] )	create a <name1> containing all <name3> names from <name2> of dictionaries <name4>
[ i for s in [ <name4> ( d . <name2> ( ) ) for d in <name1> ] for i in s ]	extract all <name2> from a <name4> of dictionaries <name1>
[ i for s in [ <name1> ( d . <name2> ( ) ) for d in <name3> ] for i in s ]	extract all <name2> from a <name1> of dictionaries <name3>
<name5> , <name6> = zip ( * list ( <name3> . items ( ) ) )	unpack <name5> and <name6> of a dictionary <name3> into two lists
<name1> , <name2> = zip ( * list ( <name3> . items ( ) ) )	unpack <name1> and <name2> of a dictionary <name3> into two lists
int ( Decimal ( <name2> ) )	convert a string <name2> containing a decimal to an integer
int ( Decimal ( <name1> ) )	convert a string <name1> containing a decimal to an integer
numpy . in1d ( <name3> , <name5> ) . <name4> ( )	check if array <name3> contains <name4> elements of array <name5>
numpy . in1d ( <name1> , <name2> ) . <name3> ( )	check if array <name1> contains <name3> elements of array <name2>
<name6> . <name5> ( [ ( x <name2> a ) for x <name2> b ] )	<name6> : check if <name5> 'a' contains all the numbers <name2> <name5> 'b' .
<name1> . <name2> ( [ ( x <name3> a ) for x <name3> b ] )	<name1> : check if <name2> 'a' contains all the numbers <name3> <name2> 'b' .
<name4> . draw_networkx_labels ( G , <name6> , <name5> )	Draw node <name5> <name5> on <name4> graph G  at position <name6>
<name1> . draw_networkx_labels ( G , <name2> , <name3> )	Draw node <name3> <name3> on <name1> graph G  at position <name2>
<name5> = [ <name6> [ : ] for <name6> in <name2> ]	make a <name6> - by - <name6> copy <name5> of array <name2>
<name1> = [ <name2> [ : ] for <name2> in <name3> ]	make a <name2> - by - <name2> copy <name1> of array <name3>
X = <name1> . loadtxt ( <val4>   , delimiter = ','   )	Create 2 D <name1> array from the data provided in <val4> with each row in the file having same number of values
X = <name1> . loadtxt ( <val2>   , delimiter = ','   )	Create 2 D <name1> array from the data provided in <val2> with each row in the file having same number of values
matching = [ s for s in <name2> if <val3>     in s ]	get a list of items from the list <name2> that contain string <val3>
matching = [ s for s in <name1> if <val2>     in s ]	get a list of items from the list <name1> that contain string <val2>
<name4> . to_csv ( <val5>   , sep = '\t'   )	export a pandas data frame <name4> to a file <val5> and retain the indices
<name1> . to_csv ( <val2>   , sep = '\t'   )	export a pandas data frame <name1> to a file <val2> and retain the indices
<name1> . rsplit ( ','   , 1 )	split a string <name1> on last delimiter
<name1> ( isinstance ( x , <name4> ) for x <name6> <name3> )	Check if <name1> elements <name6> list <name3> are tupples of long and <name4>
<name1> ( isinstance ( x , <name2> ) for x <name3> <name4> )	Check if <name1> elements <name3> list <name4> are tupples of long and <name2>
<name6> ( isinstance ( x , int ) for x <name4> lst )	check if <name6> elements <name4> a list 'lst' are the same type 'int'
<name1> ( isinstance ( x , int ) for x <name2> lst )	check if <name1> elements <name2> a list 'lst' are the same type 'int'
<name2> . <name1> ( )	<name1> a string <name2> of all carriage returns and newlines
<name1> . <name2> ( )	<name2> a string <name1> of all carriage returns and newlines
driver . execute_script ( 'window.scrollTo(0, Y)'   )	scroll to the bottom of a web page using selenium webdriver
driver . execute_script ( 'window.scrollTo(0, document.body.scrollHeight);'   )	scroll a to the bottom of a web page using selenium webdriver
datetime . datetime . combine ( <name2> , datetime . time ( ) )	convert Date object <name2> into a DateTime object
datetime . datetime . combine ( <name1> , datetime . time ( ) )	convert Date object <name1> into a DateTime object
print ( <name5> ( x <name6> <name4> for x <name6> <name1> ) )	check if <name5> item from list <name1> is <name6> list <name4>
print ( <name1> ( x <name2> <name3> for x <name2> <name4> ) )	check if <name1> item from list <name4> is <name2> list <name3>
scipy . misc . imsave ( <val1>   , <name4> )	save a numpy array <name4> as an image <val1>
scipy . misc . imsave ( <val1>   , <name2> )	save a numpy array <name2> as an image <val1>
<name4> = re . sub ( ' ?\\([^)]+\\)'   , ''   , <name4> )	Remove anything in parenthesis from string <name4> with a regex
<name1> = re . sub ( ' ?\\([^)]+\\)'   , ''   , <name1> )	Remove anything in parenthesis from string <name1> with a regex
<name6> = re . sub ( ' ?\\(\\w+\\)'   , ''   , <name6> )	Remove word characters in parenthesis from string <name6> with a regex
<name1> = re . sub ( ' ?\\(\\w+\\)'   , ''   , <name1> )	Remove word characters in parenthesis from string <name1> with a regex
<name6> = re . sub ( ' \\(\\w+\\)'   , ''   , <name6> )	Remove all data inside parenthesis in string <name6>
<name1> = re . sub ( ' \\(\\w+\\)'   , ''   , <name1> )	Remove all data inside parenthesis in string <name1>
len ( set ( <name2> ) . intersection ( <name1> ) ) >   0	check if any elements in one list <name2> are in another list <name1>
len ( set ( <name1> ) . intersection ( <name2> ) ) >   0	check if any elements in one list <name1> are in another list <name2>
i = int ( <name1> , 16 )	convert hex string <name1> to decimal
int ( <val4>   , 16 )	'convert hex string ' <val4> ' to decimal'
int ( <val1>   , 16 )	'convert hex string ' <val1> ' to decimal'
int ( <val6>   , 16 )	'convert hex string ' <val6> ' to decimal'
int ( <val1>   , 16 )	'convert hex string ' <val1> ' to decimal'
ast . literal_eval ( <val3>   )	convert hex string <val3> to decimal
ast . literal_eval ( <val1>   )	convert hex string <val1> to decimal
int ( <val1>   , 16 )	convert hex string <val1> to decimal
<name1> . system ( 'screencapture screen.png'   )	take screenshot 'screen.png' on mac <name1> x
driver . set_window_size ( 1400 , 1000 )	Set a window size to 1400, 1000 using selenium webdriver
unicodedata . normalize ( 'NFKD'   , <val2>   ) . encode ( 'ascii'   , 'ignore'   )	replace non - ascii chars from a unicode string u <val2>
unicodedata . normalize ( 'NFKD'   , <val1>   ) . encode ( 'ascii'   , 'ignore'   )	replace non - ascii chars from a unicode string u <val1>
pandas . concat ( [ <name3> , <name1> ] ) . drop_duplicates ( ) . reset_index ( drop = True )	concatenate dataframe <name3> with <name1> whilst removing duplicates
pandas . concat ( [ <name1> , <name2> ] ) . drop_duplicates ( ) . reset_index ( drop = True )	concatenate dataframe <name1> with <name2> whilst removing duplicates
<name4> = numpy . fromfile ( <val2>   , dtype = numpy . <name1> )	Construct an array with data type <name1> <name4> from data in binary file <val2>
<name1> = numpy . fromfile ( <val2>   , dtype = numpy . <name3> )	Construct an array with data type <name3> <name1> from data in binary file <val2>
<name3> . call ( <val1>   , shell = True )	execute a mv command <val1> in <name3>
<name1> . call ( <val2>   , shell = True )	execute a mv command <val2> in <name1>
<name2> ( <val3>   . encode ( 'utf-8'   ) )	<name2> a character that has unicode value <val3>
<name1> ( <val2>   . encode ( 'utf-8'   ) )	<name1> a character that has unicode value <val2>
<name4> . SequenceMatcher ( None , <name6> . read ( ) , <name5> . read ( ) )	compare contents at filehandles <name6> and <name5> using <name4>
<name1> . SequenceMatcher ( None , <name2> . read ( ) , <name3> . read ( ) )	compare contents at filehandles <name2> and <name3> using <name1>
dict ( ( k , int ( v ) ) for k , v in ( <name6> . split ( ' - '   ) for <name6> in s . split ( <val5>   ) ) )	Create a dictionary from string <name6> separated by - and <val5>
dict ( ( k , int ( v ) ) for k , v in ( <name1> . split ( ' - '   ) for <name1> in s . split ( <val2>   ) ) )	Create a dictionary from string <name1> separated by - and <val2>
<name3> ( i <name1> ( 1 , 2 , 3 , 4 , 5 ) for i <name1> ( 1 , 6 ) )	check if <name3> elements <name1> a tuple (1, 6) are <name1> another (1, 2, 3, 4, 5)
<name1> ( i <name2> ( 1 , 2 , 3 , 4 , 5 ) for i <name2> ( 1 , 6 ) )	check if <name1> elements <name2> a tuple (1, 6) are <name2> another (1, 2, 3, 4, 5)
<name6> [ <val2>   ] . map ( lambda t : t . date ( ) ) . <name4> ( )	extract <name4> dates from time series <val2> in dataframe <name6>
<name1> [ <val2>   ] . map ( lambda t : t . date ( ) ) . <name3> ( )	extract <name3> dates from time series <val2> in dataframe <name1>
'' '' ' ' '{:>7s}' ' ' '' ' . format ( mystring )'	right align string mystring with a width of 7
open ( <val2>   , 'rb'   ) . <name5> ( 200 )	<name5> an excel file <val2>
open ( <val1>   , 'rb'   ) . <name2> ( 200 )	<name2> an excel file <val1>
<name6> . sort_values ( [ <val4>   , <val5>   ] , <name2> = [ True , False ] , inplace = True )	sort dataframe <name6> based on column <val4> in <name2> and column <val5> in descending
<name1> . sort_values ( [ <val2>   , <val3>   ] , <name4> = [ True , False ] , inplace = True )	sort dataframe <name1> based on column <val2> in <name4> and column <val3> in descending
<name4> . sort_values ( [ <val3>   , <val5>   ] , <name6> = [ True , False ] )	sort dataframe <name4> based on column <val3> in <name6> and column <val5> in descending
<name1> . sort_values ( [ <val2>   , <val3>   ] , <name4> = [ True , False ] )	sort dataframe <name1> based on column <val2> in <name4> and column <val3> in descending
df1 . <name3> ( [ <val2>   , <val4>   ] , <name6> = [ True , False ] , inplace = True )	<name3> a pandas data frame with column <val2> in <name6> and <val4> in descending order
df1 . <name1> ( [ <val2>   , <val3>   ] , <name4> = [ True , False ] , inplace = True )	<name1> a pandas data frame with column <val2> in <name4> and <val3> in descending order
df . <name2> ( [ <val3>   , <val6>   ] , <name1> = [ True , False ] )	<name2> a pandas data frame by column <val3> in <name1> , and by column <val6> in descending order
df . <name1> ( [ <val2>   , <val3>   ] , <name4> = [ True , False ] )	<name1> a pandas data frame by column <val2> in <name4> , and by column <val3> in descending order
<name6> ( <val5>   )	django <name6> to view <val5>
<name1> ( <val2>   )	django <name1> to view <val2>
[ x for x in <name2> if x not in [ 2 , 3 , 7 ] ]	remove all values within one list [2, 3, 7] from another list <name2>
[ x for x in <name1> if x not in [ 2 , 3 , 7 ] ]	remove all values within one list [2, 3, 7] from another list <name1>
out = ''   . join ( c for c in <name5> if c not in ( <val1>   , <val3>   , <val2>   ) )	remove the punctuation <val1> , <val3> , <val2> from a string <name5>
out = ''   . join ( c for c in <name1> if c not in ( <val2>   , <val3>   , <val4>   ) )	remove the punctuation <val2> , <val3> , <val4> from a string <name1>
<name1> . find ( <val6>   , {  <val5>   : <val3>  }  ) [ <val2>   ]	BeautifulSoup get value associated with attribute <val2> where attribute <val5> is equal to <val3> in tag <val6> in HTML parsed string <name1>
<name1> . find ( <val2>   , {  <val3>   : <val4>  }  ) [ <val5>   ]	BeautifulSoup get value associated with attribute <val5> where attribute <val3> is equal to <val4> in tag <val2> in HTML parsed string <name1>
urllib . parse . <name5> ( <val4>   )	<name5> a urlencoded unicode string <val4>
urllib . parse . <name1> ( <val2>   )	<name1> a urlencoded unicode string <val2>
urllib . parse . unquote ( <name4> ) . <name1> ( 'utf8'   )	<name1> <name4> <name4> from UTF -16 code to UTF -8 code
urllib . parse . unquote ( <name1> ) . <name2> ( 'utf8'   )	<name2> <name1> <name1> from UTF -16 code to UTF -8 code
del <name1> [ : ]	empty a list <name1>
del lst1 [ : ]	empty a list lst
<name3> [ : ] = [ ]	empty a list <name3>
<name1> [ : ] = [ ]	empty a list <name1>
<name6> [ : ] = [ ]	empty a list <name6>
<name1> [ : ] = [ ]	empty a list <name1>
<name4> . reset_index ( 0 ) . reset_index ( drop = True )	reset index of series <name4>
<name1> . reset_index ( 0 ) . reset_index ( drop = True )	reset index of series <name1>
<name6> [ <val3> ] . getText ( ) . encode ( <val1>   )	convert unicode text from list <name6> with index <val3> to normal text <val1>
<name1> [ <val2> ] . getText ( ) . encode ( <val3>   )	convert unicode text from list <name1> with index <val2> to normal text <val3>
[ ( y - x ) for x , y <name1> zip ( <name5> , <name5> [ 1 : ] ) ]	create a list containing the subtraction of each item <name1> list <name5> from the item prior to it
[ ( y - x ) for x , y <name1> zip ( <name2> , <name2> [ 1 : ] ) ]	create a list containing the subtraction of each item <name1> list <name2> from the item prior to it
print ( re . search ( <val3>   , <name2> ) . group ( 1 ) )	get value in string <name2> matched by regex pattern <val3>
print ( re . search ( <val1>   , <name2> ) . group ( 1 ) )	get value in string <name2> matched by regex pattern <val1>
globals ( ) . update ( importlib . import_module ( <val2>   ) . __dict__ )	import all classes from module <val2>
globals ( ) . update ( importlib . import_module ( <val1>   ) . __dict__ )	import all classes from module <val1>
'' '' ' ' '' ' ' '' ' . join ( [ ' <name2> ' , ' b ' , ' c ' , ' d ' ] )'	convert <name2> list of characters ['a', 'b', 'c', 'd'] into <name2> string
'' '' ' ' '' ' ' '' ' . join ( [ ' <name1> ' , ' b ' , ' c ' , ' d ' ] )'	convert <name1> list of characters ['a', 'b', 'c', 'd'] into <name1> string
url . split ( '&'   )	'Slice `url` with ' & ' as delimiter  to get  ' 'http://www.domainname.com/page?CONTENT_ITEM_ID=1234' ' from url ' ' http : // www .domainname .com / page ? CONTENT_ITEM_ID = 1234 & param2 & param3
od = collections . OrderedDict ( sorted ( <name3> . items ( ) ) )	sort dictionary <name3> by key
od = collections . OrderedDict ( sorted ( <name1> . items ( ) ) )	sort dictionary <name1> by key
OrderedDict ( sorted ( list ( <name6> . items ( ) ) , <name4> = ( lambda t : t [ 0 ] ) ) )	sort a dictionary <name6> by <name4>
OrderedDict ( sorted ( list ( <name1> . items ( ) ) , <name2> = ( lambda t : t [ 0 ] ) ) )	sort a dictionary <name1> by <name2>
response = requests . <name1> ( <name4> , data = json . dumps ( data ) , headers = headers )	Execute a <name1> request to the <name4> <name4>
response = requests . <name1> ( <name2> , data = json . dumps ( data ) , headers = headers )	Execute a <name1> request to the <name2> <name2>
re . sub ( '[\\W_]+'   , <val6>   , s )	replace everything that is not an alphabet or a digit with <val6> in 's' .
re . sub ( '[\\W_]+'   , <val1>   , s )	replace everything that is not an alphabet or a digit with <val1> in 's' .
[ ( x + y ) for x in <name2> for y in <name1> ]	create a list of aggregation of each element from list <name2> to all elements of list <name1>
[ ( x + y ) for x in <name1> for y in <name2> ]	create a list of aggregation of each element from list <name1> to all elements of list <name2>
dict ( [ x . split ( '='   ) for x in s . split ( ) ] )	convert string x'  to dictionary splitted by  = `  using list comprehension
<name6> . pop ( <val1> )	remove index <val1> element from a list <name6>
<name1> . pop ( <val2> )	remove index <val2> element from a list <name1>
s = s . replace ( <val3>   , ''   )	'Delete character ' <val3> ' from a string `s` using python'
s = s . replace ( <val1>   , ''   )	'Delete character ' <val1> ' from a string `s` using python'
<name5> ( x * y for x , y <name6> zip ( <name4> , <name3> ) )	get the <name5> of the products of each pair of corresponding elements <name6> lists <name4> and <name3>
<name1> ( x * y for x , y <name2> zip ( <name3> , <name4> ) )	get the <name1> of the products of each pair of corresponding elements <name2> lists <name3> and <name4>
<name1> ( x * y for x , y in <name1> ( zip ( <name2> , <name6> ) ) )	sum the products of each two elements at the same index of <name1> <name2> and <name1> <name6>
<name1> ( x * y for x , y in <name1> ( zip ( <name2> , <name3> ) ) )	sum the products of each two elements at the same index of <name1> <name2> and <name1> <name3>
<name1> ( i * j for i , j in zip ( <name4> , <name5> ) )	<name1> the product of each two items at the same index of list <name4> and list <name5>
<name1> ( i * j for i , j in zip ( <name2> , <name3> ) )	<name1> the product of each two items at the same index of list <name2> and list <name3>
<name4> ( x * y for x , y in list ( zip ( <name5> , <name1> ) ) )	<name4> the product of elements of two lists named <name5> and <name1>
<name1> ( x * y for x , y in list ( zip ( <name2> , <name3> ) ) )	<name1> the product of elements of two lists named <name2> and <name3>
<name4> . <name5> ( open ( <val1>   , 'rb'   ) . read ( ) )	<name5> the content of file <val1> to file <name4>
<name1> . <name2> ( open ( <val3>   , 'rb'   ) . read ( ) )	<name2> the content of file <val3> to file <name1>
new_list = [ ( x + <val3> ) for x <name2> <name6> ]	Add <val3> to each integer value <name2> list <name6>
new_list = [ ( x + <val1> ) for x <name2> <name3> ]	Add <val1> to each integer value <name2> list <name3>
[ x for x <name2> <name5> if x >= <val1> ]	get a list of all items <name2> list <name5> with values greater than <val1>
[ x for x <name1> <name2> if x >= <val3> ]	get a list of all items <name1> list <name2> with values greater than <val3>
plt . plot ( list ( range ( 10 ) ) , <val1>   )	set color marker styles <val1> in matplotlib
plt . <name5> ( <name1> ( <name2> ( <val3> ) ) , linestyle = '--'   , marker = 'o'   , color = 'b'   )	set circle markers on <name5> for individual points defined in <name1> [1,2,3,4,5,6,7,8,9,10] created by <name2> ( <val3> )
plt . <name1> ( <name2> ( <name3> ( <val4> ) ) , linestyle = '--'   , marker = 'o'   , color = 'b'   )	set circle markers on <name1> for individual points defined in <name2> [1,2,3,4,5,6,7,8,9,10] created by <name3> ( <val4> )
[ i . <name1> ( <val5>   , 1 ) [ 0 ] for i <name4> <name2> ]	<name1> strings <name4> list <name2> on the first occurring tab <val5> and enter only the first resulting substring <name4> a new list
[ i . <name1> ( <val2>   , 1 ) [ 0 ] for i <name3> <name4> ]	<name1> strings <name3> list <name4> on the first occurring tab <val2> and enter only the first resulting substring <name3> a new list
<name6> = [ i . split ( '\t'   ) [ 0 ] for i <name5> <name6> ]	Split each string <name5> list <name6> on the tab character
<name1> = [ i . split ( '\t'   ) [ 0 ] for i <name2> <name1> ]	Split each string <name2> list <name1> on the tab character
sum ( your_list )	Sum numbers in a list 'your_list'
<name1> ( ) . set_trace ( )	attach debugger pdb to class <name1>
result = {  k : <name3> . get ( v ) for k , v <name6> list ( <name4> . items ( ) ) }	Compose keys from dictionary <name4> with respective values <name6> dictionary <name3>
result = {  k : <name1> . get ( v ) for k , v <name2> list ( <name3> . items ( ) ) }	Compose keys from dictionary <name3> with respective values <name2> dictionary <name1>
<name5> . <name5> . now ( ) + <name5> . timedelta ( days = 1 , <name2> = 3 )	add one day and three <name2> to the present time from <name5> .now ( )
<name1> . <name1> . now ( ) + <name1> . timedelta ( days = 1 , <name2> = 3 )	add one day and three <name2> to the present time from <name1> .now ( )
dict ( ( v , k ) for k , v <name1> <name4> . items ( ) )	switch keys and values <name1> a dictionary <name4>
dict ( ( v , k ) for k , v <name1> <name2> . items ( ) )	switch keys and values <name1> a dictionary <name2>
print ( sorted ( <name3> , key = lambda x : int ( x . split ( <val5>   ) [ 2 ] ) ) )	sort a list <name3> by number after second <val5>
print ( sorted ( <name1> , key = lambda x : int ( x . split ( <val2>   ) [ 2 ] ) ) )	sort a list <name1> by number after second <val2>
any ( d [ <val4>   ] == <val2>     for d in label )	'Check if the value of the key ' <val4> ' is ' <val2> ' in a list of dictionaries `label`'
any ( d [ <val1>   ] == <val2>     for d in label )	'Check if the value of the key ' <val1> ' is ' <val2> ' in a list of dictionaries `label`'
<name3> [ : ] = [ x for x in <name3> if x != [ <val1> , <val1> ] ]	remove all instances of [ <val1> , <val1> ] from list <name3>
<name1> [ : ] = [ x for x in <name1> if x != [ <val2> , <val2> ] ]	remove all instances of [ <val2> , <val2> ] from list <name1>
[ x for x in <name5> if x != [ 1 , 1 ] ]	remove all instances of [1, 1] from <name5> list <name5>
[ x for x in <name1> if x != [ 1 , 1 ] ]	remove all instances of [1, 1] from <name1> list <name1>
b = {  <name4> [ i ] : <name4> [ i + 1 ] for i in range ( 0 , len ( <name4> ) , 2 ) }	convert <name4> list 'a' to <name4> dictionary where each even element represents the key to the dictionary , and the following odd element is the value
b = {  <name1> [ i ] : <name1> [ i + 1 ] for i in range ( 0 , len ( <name1> ) , 2 ) }	convert <name1> list 'a' to <name1> dictionary where each even element represents the key to the dictionary , and the following odd element is the value
len ( set ( <name5> ) ) == len ( <name5> )	check whether elements in list <name5> appear only once
len ( set ( <name1> ) ) == len ( <name1> )	check whether elements in list <name1> appear only once
print ( <name1> . md5 ( open ( <name3> , 'rb'   ) . read ( ) ) . hexdigest ( ) )	Generate MD5 checksum of file in the path <name3> in <name1>
print ( <name1> . md5 ( open ( <name2> , 'rb'   ) . read ( ) ) . hexdigest ( ) )	Generate MD5 checksum of file in the path <name2> in <name1>
'' '' ' ' '' ' ' '' ' . join ( x . upper ( ) if random . randint ( 0 , 1 ) else x for x in s )'	randomly switch letters '  cases in string s
getattr ( <name4> , <name1> )	access the class variable <name1> from a class object <name4>
getattr ( <name1> , <name2> )	access the class variable <name2> from a class object <name1>
Image . open ( <val6>   ) . show ( )	Display a image file <val6>
Image . open ( <val1>   ) . show ( )	Display a image file <val1>
<name5> . <name2> ( key = <name4> )	<name2> list <name5> based on variable <name4>
<name1> . <name2> ( key = <name3> )	<name2> list <name1> based on variable <name3>
<name6> . replace ( ' '   , ''   )	remove all whitespace in a string <name6>
<name1> . replace ( ' '   , ''   )	remove all whitespace in a string <name1>
<name2> . strip ( )	remove whitespace in string <name2> from beginning and end
<name1> . strip ( )	remove whitespace in string <name1> from beginning and end
<name1> = re . sub ( '\\s+'   , ''   , <name1> , flags = re . UNICODE )	remove all whitespaces in string <name1>
<name6> = ''   . join ( <name6> . split ( ) )	remove all whitespaces in a string <name6>
<name1> = ''   . join ( <name1> . split ( ) )	remove all whitespaces in a string <name1>
<name1> ( <name5> . <name6> ( ) )	<name1> all the <name6> in a counter variable <name5>
<name1> ( <name2> . <name3> ( ) )	<name1> all the <name3> in a counter variable <name2>
np . sqrt ( ( ( <name3> - <name4> ) ** 2 ) . sum ( -1 ) )	find the euclidean distance between two 3 - d arrays <name3> and <name4>
np . sqrt ( ( ( <name1> - <name2> ) ** 2 ) . sum ( -1 ) )	find the euclidean distance between two 3 - d arrays <name1> and <name2>
<name6> = [ {}  , {}  , {}  ]	create list <name6> containing 3 empty dictionaries
<name1> = [ {}  , {}  , {}  ]	create list <name1> containing 3 empty dictionaries
weekly = [ sum ( visitors [ x : x + <val3> ] ) for x in range ( 0 , len ( <name6> ) , <val3> ) ]	find the sums of length <val3> subsets of a list <name6>
weekly = [ sum ( visitors [ x : x + <val1> ] ) for x in range ( 0 , len ( <name2> ) , <val1> ) ]	find the sums of length <val1> subsets of a list <name2>
del <name4> [ <name3> ]	Delete an element <name3> from a dictionary <name4>
del <name1> [ <name2> ]	Delete an element <name2> from a dictionary <name1>
{  i : <name2> [ i ] for i in <name2> if ( i != <val4> ) }	Delete an element <val4> from <name2> dictionary <name2>
{  i : <name1> [ i ] for i in <name1> if ( i != <val2> ) }	Delete an element <val2> from <name1> dictionary <name1>
lol . pop ( <val4>   )	'Delete an element ' <val4> ' from a dictionary `lol`'
lol . pop ( <val1>   )	'Delete an element ' <val1> ' from a dictionary `lol`'
del <name2> [ <name4> ]	Delete an element with <name4> <name4> dictionary <name2>
del <name1> [ <name2> ]	Delete an element with <name2> <name2> dictionary <name1>
np . linalg . <name6> ( np . dot ( <name4> . T , <name4> ) , np . dot ( <name4> . T , <name5> ) )	<name6> for the least squares '  solution of matrices <name4> and <name5>
np . linalg . <name1> ( np . dot ( <name2> . T , <name2> ) , np . dot ( <name2> . T , <name3> ) )	<name1> for the least squares '  solution of matrices <name2> and <name3>
pd . concat ( [ <name1> . drop ( <val4>   , axis = 1 ) , pd . DataFrame ( <name1> [ <val4>   ] . tolist ( ) ) ] , axis = 1 )	split dictionary / list inside a pandas column <val4> into separate columns in dataframe <name1>
pd . concat ( [ <name1> . drop ( <val2>   , axis = 1 ) , pd . DataFrame ( <name1> [ <val2>   ] . tolist ( ) ) ] , axis = 1 )	split dictionary / list inside a pandas column <val2> into separate columns in dataframe <name1>
[ {  <val6>   : x [ <val6>   ] . lower ( ) }   for x <name5> <name4> ]	lowercase string values with key <val6> <name5> a list of dictionaries <name4>
[ {  <val1>   : x [ <val1>   ] . lower ( ) }   for x <name2> <name3> ]	lowercase string values with key <val1> <name2> a list of dictionaries <name3>
'' '' ' ' ' ' ' ' '' ' . join ( my_list )'	convert a list my_list into string with values separated by spaces
re . sub ( <val5>   , <val4>   , <name1> )	replace each occurrence of the pattern <val5> within <name1> with <val4>
re . sub ( <val1>   , <val2>   , <name3> )	replace each occurrence of the pattern <val1> within <name3> with <val2>
<name6> ( n ) == <name6> ( n ) [ : : -1 ]	check if string <name6> is palindrome
<name1> ( n ) == <name1> ( n ) [ : : -1 ]	check if string <name1> is palindrome
ftp . storbinary ( 'STOR myfile.txt'   , open ( <val6>   , 'rb'   ) )	upload binary file <val6> with ftplib
ftp . storbinary ( 'STOR myfile.txt'   , open ( <val1>   , 'rb'   ) )	upload binary file <val1> with ftplib
re . sub ( '.*I'   , <val4>   , <name2> )	remove all characters from string <name2> upto character <val4>
re . sub ( '.*I'   , <val1>   , <name2> )	remove all characters from string <name2> upto character <val1>
<name5> ( <val4>   . replace ( ','   , ''   ) )	parse a comma - separated string number <val4> into <name5>
<name1> ( <val2>   . replace ( ','   , ''   ) )	parse a comma - separated string number <val2> into <name1>
pd . merge ( <name3> , <name6> , left_index = True , right_index = True , how = 'outer'   )	combine dataframe <name3> and dataframe <name6> by index number
pd . merge ( <name1> , <name2> , left_index = True , right_index = True , how = 'outer'   )	combine dataframe <name1> and dataframe <name2> by index number
<name3> ( <name4> . <name2> ( ) )	check if <name3> boolean <name2> in a python dictionary <name4> are true
<name1> ( <name2> . <name3> ( ) )	check if <name1> boolean <name3> in a python dictionary <name2> are true
<name6> . <name1> . str . replace ( <val4>   , ''   )	use regex pattern <val4> to remove digit 12 if followed by 4 other digits in column <name1> of dataframe <name6>
<name1> . <name2> . str . replace ( <val3>   , ''   )	use regex pattern <val3> to remove digit 12 if followed by 4 other digits in column <name2> of dataframe <name1>
<name5> [ : : ( -1 ) ]	reverse a list <name5>
<name1> [ : : ( -1 ) ]	reverse a list <name1>
reversed ( <name4> )	reverse a list <name4>
reversed ( <name1> )	reverse a list <name1>
<name1> . <name4> ( )	<name4> a list <name1>
<name1> . <name2> ( )	<name2> a list <name1>
<name1> ( reversed ( <name2> ) )	reverse a <name1> <name2>
[ tup [ 0 ] for tup <name3> <name5> ]	get first element of each tuple <name3> list <name5>
[ tup [ 0 ] for tup <name1> <name2> ]	get first element of each tuple <name1> list <name2>
newcontents = <name3> . <name4> ( <val2>   , <val6>   ) . <name4> ( <val5>   , <val1>   )	<name4> character <val2> with character <val6> and character <val5> with character <val1> in file <name3>
newcontents = <name1> . <name2> ( <val3>   , <val4>   ) . <name2> ( <val5>   , <val6>   )	<name2> character <val3> with character <val4> and character <val5> with character <val6> in file <name1>
<name4> . dumps ( [ dict ( list ( <name6> . items ( ) ) ) for <name6> in rs ] )	serialise SqlAlchemy RowProxy object <name6> to a <name4> object
<name1> . dumps ( [ dict ( list ( <name2> . items ( ) ) ) for <name2> in rs ] )	serialise SqlAlchemy RowProxy object <name2> to a <name1> object
config_file = os . path . expanduser ( <val6>   )	get file <val6>
config_file = os . path . expanduser ( <val1>   )	get file <val1>
request . params . getall ( 'c'   )	get multiple parameters with same name from a url in pylons
np . corrcoef ( <name5> )	Convert array <name5> into a correlation matrix
np . corrcoef ( <name1> )	Convert array <name1> into a correlation matrix
print ( max ( 1 , 2 , 3 ) )	Find the greatest number in set (1, 2, 3)
self . <name3> . get ( <val5>   )	Retrieve parameter <val5> from a GET <name3> .
self . <name1> . get ( <val2>   )	Retrieve parameter <val2> from a GET <name1> .
a [ <val4>   ] . apply ( lambda x , y : x + y , args = ( 100 , ) )	'Add 100 to each element of column ' <val4> ' in dataframe `a`'
a [ <val1>   ] . apply ( lambda x , y : x + y , args = ( 100 , ) )	'Add 100 to each element of column ' <val1> ' in dataframe `a`'
<name1> . objects . order_by ( '-pet__age'   ) [ : <val2> ]	Django get first <val2> records of model <name1> ordered by criteria 'age' of model 'pet'
time . sleep ( 5 )	'delay for ' '5' ' seconds'
<name2> . sleep ( <val1> )	make a <val1> seconds <name2> delay
<name1> . sleep ( <val2> )	make a <val2> seconds <name1> delay
sleep ( <val1> )	make a <val1> seconds time delay
<name3> . sleep ( <val1> )	make a <val1> seconds <name3> delay
<name1> . sleep ( <val2> )	make a <val2> seconds <name1> delay
<name6> . sleep ( <val3> )	make a <val3> seconds <name6> delay
<name1> . sleep ( <val2> )	make a <val2> seconds <name1> delay
[ x for x in <name2> if not any ( c . isdigit ( ) for c in x ) ]	From a list of strings <name2> , remove the values that contains numbers .
[ x for x in <name1> if not any ( c . isdigit ( ) for c in x ) ]	From a list of strings <name1> , remove the values that contains numbers .
<name3> [ <val1>   ] . apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] )	get the middle two characters of a string <val1> in a pandas dataframe <name3>
<name1> [ <val2>   ] . apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] )	get the middle two characters of a string <val2> in a pandas dataframe <name1>
<name5> . <name2> ( True )	draw a <name2> line on every tick of plot <name5>
<name1> . <name2> ( True )	draw a <name2> line on every tick of plot <name1>
sorted ( <name3> , key = lambda x : ( -1 * c [ x ] , <name3> . index ( x ) ) )	sort list <name3> based on each element ' s number of occurrences
sorted ( <name1> , key = lambda x : ( -1 * c [ x ] , <name1> . index ( x ) ) )	sort list <name1> based on each element ' s number of occurrences
[ max ( len ( str ( x ) ) for x <name6> line ) for line <name6> zip ( * <name5> ) ]	Get the value with the maximum length <name6> each column <name6> array <name5>
[ max ( len ( str ( x ) ) for x <name1> line ) for line <name1> zip ( * <name2> ) ]	Get the value with the maximum length <name1> each column <name1> array <name2>
<name5> . <name1> . value_counts ( ) . reset_index ( name = <val6>   )	get the count of each unique value in column <name1> of dataframe <name5> and store in column <val6>
<name1> . <name2> . value_counts ( ) . reset_index ( name = <val3>   )	get the count of each unique value in column <name2> of dataframe <name1> and store in column <val3>
<name6> . set_index ( 'Date'   ) . diff ( )	calculat the difference between each row and the row previous to it in dataframe <name6>
<name1> . set_index ( 'Date'   ) . diff ( )	calculat the difference between each row and the row previous to it in dataframe <name1>
<name6> . update ( [ 3 , 4 ] )	append values [3, 4] to <name6> set <name6>
<name1> . update ( [ 3 , 4 ] )	append values [3, 4] to <name1> set <name1>
<name4> [ 1 : : 2 ] = <val2>	set every two - stride far element to <val2> starting from second element in array <name4>
<name1> [ 1 : : 2 ] = <val2>	set every two - stride far element to <val2> starting from second element in array <name1>
<name2> . groupby ( <val5>   ) [ <val3>   ] . <name4> ( ascending = False )	Get <name4> of rows from highest to lowest of dataframe <name2> , grouped by value in column <val5> , according to value in column <val3>
<name1> . groupby ( <val2>   ) [ <val3>   ] . <name4> ( ascending = False )	Get <name4> of rows from highest to lowest of dataframe <name1> , grouped by value in column <val2> , according to value in column <val3>
<name6> . strptime ( <val2>   , '%a, %d %b %Y %H:%M:%S %Z'   )	convert js date object <val2> to python <name6>
<name1> . strptime ( <val2>   , '%a, %d %b %Y %H:%M:%S %Z'   )	convert js date object <val2> to python <name1>
struct . pack ( '<I'   , 1633837924 )	Convert a binary value '1633837924' to string
<name3> . <name5> ( <val1>   )	<name5> string <val1> to <name3> <name3>
<name1> . <name2> ( <val3>   )	<name2> string <val3> to <name1> <name1>
<name4> . <name1> ( <val2> , <val6>   )	<name1> string <val6> at position <val2> of <name4> <name4>
<name1> . <name2> ( <val3> , <val4>   )	<name2> string <val4> at position <val3> of <name1> <name1>
theset = set ( k . lower ( ) for k <name3> <name4> )	convert keys <name3> dictionary <name4> into case insensitive
theset = set ( k . lower ( ) for k <name1> <name2> )	convert keys <name1> dictionary <name2> into case insensitive
'' '' ' ' '{s:{c}^{n}}' ' ' '' ' . format ( s = ' dog ' , n = 5 , c = ' x ' )'	pad 'dog' up to a length of 5 characters with 'x'
isinstance ( <name5> , str )	check if type of variable <name5> is a string
isinstance ( <name1> , str )	check if type of variable <name1> is a string
isinstance ( <name5> , str )	check if type of a variable <name5> is string
isinstance ( <name1> , str )	check if type of a variable <name1> is string
dict ( pair for d in <name6> for pair in <name1> ( d . items ( ) ) )	Convert <name1> of dictionaries <name6> into a flat dictionary
dict ( pair for d in <name1> for pair in <name2> ( d . items ( ) ) )	Convert <name2> of dictionaries <name1> into a flat dictionary
{  k : v for d <name4> <name1> for k , v <name4> <name2> ( d . items ( ) ) }	merge a <name2> of dictionaries <name4> <name2> <name1> into a single dict
{  k : v for d <name1> <name2> for k , v <name1> <name3> ( d . items ( ) ) }	merge a <name3> of dictionaries <name1> <name3> <name2> into a single dict
df . sort_values ( [ <val2>   , <val5>   ] , <name3> = [ True , False ] , inplace = True )	sort a pandas data frame according to column <val2> in <name3> and <val5> in descending order
df . sort_values ( [ <val1>   , <val2>   ] , <name3> = [ True , False ] , inplace = True )	sort a pandas data frame according to column <val1> in <name3> and <val2> in descending order
df . <name5> ( [ <val6>   , <val4>   ] , <name2> = [ True , False ] , inplace = True )	<name5> a pandas data frame by column <val6> in <name2> and <val4> in descending order
df . <name1> ( [ <val2>   , <val3>   ] , <name4> = [ True , False ] , inplace = True )	<name1> a pandas data frame by column <val2> in <name4> and <val3> in descending order
'eval ( ' <val3> <name6> <val5> ' )'	'run the code contained in string ' <val3> <name6> <val5> ''
'eval ( ' <val1> <name2> <val3> ' )'	'run the code contained in string ' <val1> <name2> <val3> ''
[ {  <val3>   : <val6> , <val2>   : <val1> , <val5>   : <val4> , <val3>   : <val1> }  , {  <val3>   : <val6> , <val2>   : <val1> , <val5>   : <val6> , <val3>   : <val6> }  ]	creating a list of dictionaries [ { <val3> : <val6> , <val2> : <val1> , <val5> : <val4> , <val3> : <val1> } , { <val3> : <val6> , <val2> : <val1> , <val5> : <val6> , <val3> : <val6> } ]
[ {  <val1>   : <val2> , <val3>   : <val4> , <val5>   : <val6> , <val1>   : <val4> }  , {  <val1>   : <val2> , <val3>   : <val4> , <val5>   : <val2> , <val1>   : <val2> }  ]	creating a list of dictionaries [ { <val1> : <val2> , <val3> : <val4> , <val5> : <val6> , <val1> : <val4> } , { <val1> : <val2> , <val3> : <val4> , <val5> : <val2> , <val1> : <val2> } ]
<name1> ( itertools . product ( * <name2> ) )	get all possible combination of items from 2 - dimensional <name1> <name2>
df . groupby ( [ <val4>   , 'Item_Code'   ] ) [ [ 'Y1961'   , 'Y1962'   , 'Y1963'   ] ] . sum ( )	'Get sum of values of columns  ' Y1961 ', ' Y1962 ', ' Y1963 ' after group by on columns ' <val4> ' and ' 'Item_code' ' in dataframe `df`.'
df . groupby ( [ <val1>   , 'Item_Code'   ] ) [ [ 'Y1961'   , 'Y1962'   , 'Y1963'   ] ] . sum ( )	'Get sum of values of columns  ' Y1961 ', ' Y1962 ', ' Y1963 ' after group by on columns ' <val1> ' and ' 'Item_code' ' in dataframe `df`.'
<name6> = [ ( el , <name4> ) for el <name3> [ a , b , c , d ] ]	create list <name6> containing permutations of each element <name3> list [a, b, c, d] with variable <name4> as tuples
<name1> = [ ( el , <name2> ) for el <name3> [ a , b , c , d ] ]	create list <name1> containing permutations of each element <name3> list [a, b, c, d] with variable <name2> as tuples
<name1> = <name1> [ numpy . logical_not ( numpy . isnan ( <name1> ) ) ]	remove Nan values from array <name1>
os . <name3> . join ( * x . split ( os . <name3> . sep ) [ 2 : ] )	remove first directory from <name3> '/First/Second/Third/Fourth/Fifth'
os . <name1> . join ( * x . split ( os . <name1> . sep ) [ 2 : ] )	remove first directory from <name1> '/First/Second/Third/Fourth/Fifth'
<name5> = <name5> . replace ( <val6>   , <val1>   )	Replace <val6> with <val1> in a string <name5>
<name1> = <name1> . replace ( <val2>   , <val3>   )	Replace <val2> with <val3> in a string <name1>
subprocess . <name2> ( <val4>   , shell = True )	<name2> bash command <val4> with pipe
subprocess . <name1> ( <val2>   , shell = True )	<name1> bash command <val2> with pipe
'' '' ' ' '437c2123' ' ' '' ' . decode ( ' <name2> ' )'	Convert a <name2> string 437c2123  according to ascii value .
'' '' ' ' '437c2123' ' ' '' ' . decode ( ' <name1> ' )'	Convert a <name1> string 437c2123  according to ascii value .
[ k for k , v <name4> <name2> . _fields . items ( ) if v . <name3> ]	Get a list of all fields <name4> class <name2> that are marked <name3>
[ k for k , v <name1> <name2> . _fields . items ( ) if v . <name3> ]	Get a list of all fields <name1> class <name2> that are marked <name3>
<name4> = <name4> . ix [ : , 0 : 2 ]	remove column by index [:, 0:2] in dataframe <name4>
<name1> = <name1> . ix [ : , 0 : 2 ]	remove column by index [:, 0:2] in dataframe <name1>
<name2> = map ( <name3> , <name2> . split ( ) )	change a string of integers <name2> separated by spaces to a list of <name3>
<name1> = map ( <name2> , <name1> . split ( ) )	change a string of integers <name1> separated by spaces to a list of <name2>
<name2> = [ int ( i ) for i in <name2> . split ( ) ]	convert a string of integers <name2> separated by spaces to a list of integers
<name1> = [ int ( i ) for i in <name1> . split ( ) ]	convert a string of integers <name1> separated by spaces to a list of integers
'driver . find_element_by_css_selector ( ' <val4> <val2> <name5> <name6> <val3> ' )'	'find element by css selector ' <val4> <val2> <name5> <name6> <val3> ''
'driver . find_element_by_css_selector ( ' <val1> <val2> <name3> <name4> <val5> ' )'	'find element by css selector ' <val1> <val2> <name3> <name4> <val5> ''
webbrowser . open ( 'file:///my_pdf.pdf'   )	display a pdf file that has been downloaded as my_pdf.pdf
<name6> = <name6> . <name2> ( '\\', '  '  )	<name2> backslashes in string <name6> with empty string ''
<name1> = <name1> . <name2> ( '\\', '  '  )	<name2> backslashes in string <name1> with empty string ''
<name1> . replace ( '\\', '  '  )	remove backslashes from string <name1>
df . replace ( '-'   , <val2>   )	'replace value ' - ' in any column of pandas dataframe to ' <val2> ''
df . replace ( '-'   , <val1>   )	'replace value ' - ' in any column of pandas dataframe to ' <val1> ''
<name4> . <name4> . now ( ) . <name5> ( )	convert <name4> object to <name5> object in python
<name1> . <name1> . now ( ) . <name2> ( )	convert <name1> object to <name2> object in python
[ elem . tag for elem <name6> <name5> . iter ( ) ]	get all sub - elements of an element <name5> <name6> an elementtree
[ elem . tag for elem <name1> <name2> . iter ( ) ]	get all sub - elements of an element <name2> <name1> an elementtree
[ elem . tag for elem in <name3> . iter ( ) if elem is not <name3> ]	get all sub - elements of an element tree <name3> excluding the root element
[ elem . tag for elem in <name1> . iter ( ) if elem is not <name1> ]	get all sub - elements of an element tree <name1> excluding the root element
sorted ( <name1> , <name4> = lambda x : x [ <val2>   ] != <val3>   )	move dictionaries in list <name1> to the end of the list if value of <name4> <val2> in each dictionary is not equal to <val3>
sorted ( <name1> , <name2> = lambda x : x [ <val3>   ] != <val4>   )	move dictionaries in list <name1> to the end of the list if value of <name2> <val3> in each dictionary is not equal to <val4>
<name5> ( value == <val4> for value in list ( <name1> . <name6> ( ) ) )	check if <name5> <name6> of a dictionary <name1> are zero <val4>
<name1> ( value == <val2> for value in list ( <name3> . <name4> ( ) ) )	check if <name1> <name4> of a dictionary <name3> are zero <val2>
<name3> . pivot_table ( <val6>   , rows = 'X'   , cols = 'X2'   )	produce a pivot table as dataframe using column <val6> in datafram <name3> to form the axes of the resulting dataframe
<name1> . pivot_table ( <val2>   , rows = 'X'   , cols = 'X2'   )	produce a pivot table as dataframe using column <val2> in datafram <name1> to form the axes of the resulting dataframe
<name6> . <name1> ( axis = 0 ) . <name1> ( axis = 0 )	get a <name1> of 4 d array <name6>
<name1> . <name2> ( axis = 0 ) . <name2> ( axis = 0 )	get a <name2> of 4 d array <name1>
time . mktime ( <name2> . timetuple ( ) ) + <name2> . microsecond / 1000000.0	Convert a datetime object <name2> to microtime
time . mktime ( <name1> . timetuple ( ) ) + <name1> . microsecond / 1000000.0	Convert a datetime object <name1> to microtime
<name4> [ ( <name6> <= <name4> [ <val5>   ] ) &   ( <name4> [ <val5>   ] <= <name2> ) ]	select all rows in dataframe <name4> where the values of column <val5> is bigger than or equal to <name6> and smaller than or equal to <name2>
<name1> [ ( <name2> <= <name1> [ <val3>   ] ) &   ( <name1> [ <val3>   ] <= <name4> ) ]	select all rows in dataframe <name1> where the values of column <val3> is bigger than or equal to <name2> and smaller than or equal to <name4>
sorted ( <name3> , key = itemgetter ( <val1> ) )	sort a list of lists <name3> by index <val1> of the inner list
sorted ( <name1> , key = itemgetter ( <val2> ) )	sort a list of lists <name1> by index <val2> of the inner list
<name1> . <name4> ( key = ( lambda x : x [ <val2> ] ) )	<name4> a list of lists <name1> by index <val2> of the inner list
<name1> . <name2> ( key = ( lambda x : x [ <val3> ] ) )	<name2> a list of lists <name1> by index <val3> of the inner list
sorted ( <name3> , key = ( lambda x : x [ <val2> ] ) )	sort list <name3> by index <val2> of the item
sorted ( <name1> , key = ( lambda x : x [ <val2> ] ) )	sort list <name1> by index <val2> of the item
sorted_list = sorted ( <name3> , key = itemgetter ( <val6> , <val4> , <val1> ) )	sort a list of lists <name3> by indices <val6> , <val4> , <val1> of the inner list
sorted_list = sorted ( <name1> , key = itemgetter ( <val2> , <val3> , <val4> ) )	sort a list of lists <name1> by indices <val2> , <val3> , <val4> of the inner list
np . argwhere ( np . all ( arr == [ [ 0 , <val2> ] , [ <val2> , 0 ] ] , axis = ( 1 , <val1> ) ) )	find rows of <val1> d array in <val2> d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'
np . argwhere ( np . all ( arr == [ [ 0 , <val1> ] , [ <val1> , 0 ] ] , axis = ( 1 , <val2> ) ) )	find rows of <val2> d array in <val1> d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'
<name4> . loc [ : , ( list ( itertools . product ( [ <val1>   , <val3>   ] , [ <val2>   , <val6>   ] ) ) ) ]	From multiIndexed dataframe <name4> select columns <val2> and <val6> within each higher order column <val1> and <val3>
<name1> . loc [ : , ( list ( itertools . product ( [ <val2>   , <val3>   ] , [ <val4>   , <val5>   ] ) ) ) ]	From multiIndexed dataframe <name1> select columns <val4> and <val5> within each higher order column <val2> and <val3>
data . loc [ : , ( [ ( 'one'   , <val3>   ) , ( 'one'   , <val5>   ) , ( 'two'   , <val3>   ) , ( 'two'   , <val5>   ) ] ) ]	select only specific columns <val3> and <val5> from a dataframe 'data' with multiindex columns
data . loc [ : , ( [ ( 'one'   , <val1>   ) , ( 'one'   , <val2>   ) , ( 'two'   , <val1>   ) , ( 'two'   , <val2>   ) ] ) ]	select only specific columns <val1> and <val2> from a dataframe 'data' with multiindex columns
hashtags = re . findall ( '#(\\w+)'   , <name1> , re . UNICODE )	match a sharp , followed by letters ( including accent characters ) in string <name1> using a regex
os . rename ( <name3> , <name4> )	Rename file from <name3> to <name4>
os . rename ( <name1> , <name2> )	Rename file from <name1> to <name2>
print ( <name5> . tostring ( <name6> . find ( <val1>   ) ) )	Get all texts and tags from a tag <val1> from <name5> tag <name6> using lxml
print ( <name1> . tostring ( <name2> . find ( <val3>   ) ) )	Get all texts and tags from a tag <val3> from <name1> tag <name2> using lxml
json . dumps ( {  str ( k ) : v for k , v in <name1> . items ( ) }  )	Serialize dictionary <name1> and its keys to a JSON formatted string
soup = <name4> ( <name5> . read ( ) . decode ( 'utf-8'   ) )	parse UTF -8 encoded HTML <name5> <name5> to <name4> object
soup = <name1> ( <name2> . read ( ) . decode ( 'utf-8'   ) )	parse UTF -8 encoded HTML <name2> <name2> to <name1> object
os . remove ( <name2> )	delete file <name2>
os . remove ( <name1> )	delete file <name1>
min ( [ x for x in <name6> if x >   <val5> ] )	get the next value greatest to <val5> from a list of numbers <name6>
min ( [ x for x in <name1> if x >   <val2> ] )	get the next value greatest to <val2> from a list of numbers <name1>
<name4> [ <val2>   ] = <val3>	Replace each value in column <val2> of dataframe <name4> with string <val3>
<name1> [ <val2>   ] = <val3>	Replace each value in column <val2> of dataframe <name1> with string <val3>
<name2> ( <name3> , key = lambda x : ( x <   0 , x ) )	sort list <name3> with positives coming before negatives with values <name2> respectively
<name1> ( <name2> , key = lambda x : ( x <   0 , x ) )	sort list <name2> with positives coming before negatives with values <name1> respectively
six_months = ( <name2> . <name1> ( ) + relativedelta ( <name6> = ( + <val5> ) ) )	get the <name2> <val5> <name6> from <name1>
six_months = ( <name1> . <name2> ( ) + relativedelta ( <name3> = ( + <val4> ) ) )	get the <name1> <val4> <name3> from <name2>
( <name6> ( 2010 , 12 , 31 ) + relativedelta ( months = ( + <val1> ) ) )	get the <name6> <val1> month from today
( <name1> ( 2010 , 12 , 31 ) + relativedelta ( months = ( + <val2> ) ) )	get the <name1> <val2> month from today
( <name3> ( 2010 , 12 , 31 ) + relativedelta ( <name4> = ( + <val6> ) ) )	get the <name3> <val6> <name4> from today
( <name1> ( 2010 , 12 , 31 ) + relativedelta ( <name2> = ( + <val3> ) ) )	get the <name1> <val3> <name2> from today
print ( ( datetime . <name2> . today ( ) + datetime . timedelta ( ( ( 6 * 365 ) / 12 ) ) ) . isoformat ( ) )	calculate the <name2> six months from the current <name2>
print ( ( datetime . <name1> . today ( ) + datetime . timedelta ( ( ( 6 * 365 ) / 12 ) ) ) . isoformat ( ) )	calculate the <name1> six months from the current <name1>
<name5> ( <name6> ( <name4> . <name1> ( ) ) , <name3> = lambda x : <name4> [ x ] [ <val2>   ] , reverse = True )	get a <name6> of <name1> of dictionary <name4> <name5> by the value of nested dictionary <name3> <val2>
<name1> ( <name2> ( <name3> . <name4> ( ) ) , <name5> = lambda x : <name3> [ x ] [ <val6>   ] , reverse = True )	get a <name2> of <name4> of dictionary <name3> <name1> by the value of nested dictionary <name5> <val6>
<name2> [ np . arange ( len ( <name2> ) ) != <val3> ]	get all the values from <name2> numpy array <name2> excluding index <val3>
<name1> [ np . arange ( len ( <name1> ) ) != <val2> ]	get all the values from <name1> numpy array <name1> excluding index <val2>
[ <name5> for <name5> in lst <name4> <name3> ( <name5> ) != <val2> ]	delete all elements from a list <name5> <name4> a function <name3> taking value as parameter returns <val2>
[ <name1> for <name1> in lst <name2> <name3> ( <name1> ) != <val4> ]	delete all elements from a list <name1> <name2> a function <name3> taking value as parameter returns <val4>
<name6> . set_index ( <val2>   )	set dataframe <name6> index using column <val2>
<name1> . set_index ( <val2>   )	set dataframe <name1> index using column <val2>
<name6> = [ line . split ( ','   ) for line in open ( <val4>   ) ]	read lines from a csv file <val4> into a list of lists <name6>
<name1> = [ line . split ( ','   ) for line in open ( <val2>   ) ]	read lines from a csv file <val2> into a list of lists <name1>
[ i for i in range ( 100 ) if i >   10 if i <   20 ]	list comprehension that produces integers between 11 and 19
'' '' ' ' '' ' ' '' ' . join ( [ c for c in strs if c . isdigit ( ) ] )'	Get only digits from a string strs
re . <name4> ( '\\t+'   , <name3> . rstrip ( <val1>   ) )	<name4> a string <name3> based on tab <val1>
re . <name1> ( '\\t+'   , <name2> . rstrip ( <val3>   ) )	<name1> a string <name2> based on tab <val3>
( <name2> . T * <name3> ) . T	scalar multiply matrix <name2> by <name3>
( <name1> . T * <name2> ) . T	scalar multiply matrix <name1> by <name2>
<val2>   . rstrip ( )	'remove trailing newline in string ' <val2> ''
<val1>   . rstrip ( )	'remove trailing newline in string ' <val1> ''
<val2>   . rstrip ( '\n'   )	remove trailing newline in string <val2>
<val1>   . rstrip ( '\n'   )	remove trailing newline in string <val1>
<name4> . strip ( )	remove newline in string <name4>
<name1> . strip ( )	remove newline in string <name1>
<name5> . rstrip ( )	remove newline in string <name5> on the right side
<name1> . rstrip ( )	remove newline in string <name1> on the right side
<name1> . lstrip ( )	remove newline in string <name1> on the left side
<val6>   . rstrip ( '\r\n'   )	remove newline in string <val6>
<val1>   . rstrip ( '\r\n'   )	remove newline in string <val1>
<val2>   . rstrip ( '\r\n'   )	remove newline in string <val2> on the right side
<val1>   . rstrip ( '\r\n'   )	remove newline in string <val1> on the right side
<val4>   . rstrip ( '\r\n'   )	remove newline in string <val4> on the right side
<val1>   . rstrip ( '\r\n'   )	remove newline in string <val1> on the right side
<val2>   . rstrip ( '\n'   )	'remove newline in string ' <val2> ' on the right side'
<val1>   . rstrip ( '\n'   )	'remove newline in string ' <val1> ' on the right side'
re . findall ( '.{,16}\\b'   , <name1> )	split string <name1> into chunks of 16 characters each
[ [ <name1> [ i ] [ j ] for j <name2> range ( len ( <name1> [ i ] ) ) ] for i <name2> range ( len ( <name1> ) ) ]	Get a list comprehension <name2> list of lists <name1>
<val3>   . encode ( 'latin-1'   )	convert unicode string <val3> to byte string
<val1>   . encode ( 'latin-1'   )	convert unicode string <val1> to byte string
<name6> . groupby ( ( <name6> . <name5> == <val3>   ) . shift ( 1 ) . fillna ( 0 ) . cumsum ( ) )	split dataframe <name6> where the value of column <name5> is equal to <val3>
<name1> . groupby ( ( <name1> . <name2> == <val3>   ) . shift ( 1 ) . fillna ( 0 ) . cumsum ( ) )	split dataframe <name1> where the value of column <name2> is equal to <val3>
urllib . request . urlretrieve ( 'http://search.twitter.com/search.json?q=hi'   , 'hi.json'   )	save json output from a url ‘ http : // search .twitter .com / search .json ? q = hi ’  to file ‘ hi .json ’  in Python 2
<name3> . where ( ( <name4> == 0 ) ) [ 0 ]	Find indices of elements equal to zero from <name3> array <name4>
<name1> . where ( ( <name2> == 0 ) ) [ 0 ]	Find indices of elements equal to zero from <name1> array <name2>
sys . stdout . <name4> ( )	<name4> output of python print
sys . stdout . <name1> ( )	<name1> output of python print
str ( <name2> )	convert <name2> to string
str ( <name1> )	convert <name1> to string
<name4> . __str__ ( )	convert <name4> to string
<name1> . __str__ ( )	convert <name1> to string
str ( <name6> )	convert <name6> to string
str ( <name1> )	convert <name1> to string
<name6> . <name2> ( key = operator . itemgetter ( 1 ) )	<name2> list of lists <name6> by the second item in each list
<name1> . <name2> ( key = operator . itemgetter ( 1 ) )	<name2> list of lists <name1> by the second item in each list
print ( str ( <name3> ) + <val4>     + str ( <name2> ) )	Print variable <name3> and variable <name2> with space string <val4> in between
print ( str ( <name1> ) + <val2>     + str ( <name3> ) )	Print variable <name1> and variable <name3> with space string <val2> in between
<name5> . fillna ( method = 'ffill'   , inplace = True )	change NaN values in dataframe <name5> using preceding values in the frame
<name1> . fillna ( method = 'ffill'   , inplace = True )	change NaN values in dataframe <name1> using preceding values in the frame
text . config ( <name3> = DISABLED )	change the <name3> of the Tkinter Text widget to read only i .e . disabled
text . config ( <name1> = DISABLED )	change the <name1> of the Tkinter Text widget to read only i .e . disabled
<name1> ( map ( ord , <name3> ) )	python <name1> of ascii values of all characters in a <name3> <name3>
<name1> ( map ( ord , <name2> ) )	python <name1> of ascii values of all characters in a <name2> <name2>
<name3> ( <name2> . product ( * <name4> ) )	apply <name2> .product to elements of a <name3> of lists <name4>
<name1> ( <name2> . product ( * <name3> ) )	apply <name2> .product to elements of a <name1> of lists <name3>
'{:,}'   . format ( <name2> )	print number <name2> as thousands separators
'{:,}'   . format ( <name1> )	print number <name1> as thousands separators
<name1> [ <name1> . <name4> . isin ( [ 'men'   , 'rocks'   , 'mountains'   ] ) ]	get rows of dataframe <name1> where column <name4> has values ['men', 'rocks', 'mountains']
<name1> [ <name1> . <name2> . isin ( [ 'men'   , 'rocks'   , 'mountains'   ] ) ]	get rows of dataframe <name1> where column <name2> has values ['men', 'rocks', 'mountains']
[ x [ <val4> ] <name6> x <name1> <name3> ]	get the value at index <val4> <name6> each tuple <name1> the list of tuples <name3>
[ x [ <val1> ] <name2> x <name3> <name4> ]	get the value at index <val1> <name2> each tuple <name3> the list of tuples <name4>
'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'   . split ( )	'split unicode string ' 'раз два три' ' into words'
<name6> . objects . extra ( select = {  <val3>   : 'Length(name)'  }  ) . order_by ( <val3>   )	sort query set by number of characters in a field <val3> in django model <name6>
<name1> . objects . extra ( select = {  <val2>   : 'Length(name)'  }  ) . order_by ( <val2>   )	sort query set by number of characters in a field <val2> in django model <name1>
min ( <name2> , <name5> = lambda x : ( abs ( <val3> - x [ <val6>   ] ) , - x [ 'pixels'   ] ) )	get a dictionary in list <name2> which <name5> <val6> is closer to a global value <val3>
min ( <name1> , <name2> = lambda x : ( abs ( <val3> - x [ <val4>   ] ) , - x [ 'pixels'   ] ) )	get a dictionary in list <name1> which <name2> <val4> is closer to a global value <val3>
<name2> [ ~  <name2> . mask ]	get the non - masked values of array <name2>
<name1> [ ~  <name1> . mask ]	get the non - masked values of array <name1>
re . findall ( '\\b[A-Z]'   , <name3> )	Find all words containing letters between A and Z in string <name3>
re . findall ( '\\b[A-Z]'   , <name1> )	Find all words containing letters between A and Z in string <name1>
<name3> = [ ( [ <val5> ] * <val2> ) for i in range ( <val2> ) ]	create a list <name3> containing <val2> lists , each of <val2> items all set to <val5>
<name1> = [ ( [ <val2> ] * <val3> ) for i in range ( <val3> ) ]	create a list <name1> containing <val3> lists , each of <val3> items all set to <val2>
np . vstack ( np . meshgrid ( <name1> , <name6> , <name4> ) ) . reshape ( <val5> , -1 ) . T	creating a numpy array of <val5> d coordinates from three 1 d arrays <name1> , <name6> and <name4>
np . vstack ( np . meshgrid ( <name1> , <name2> , <name3> ) ) . reshape ( <val4> , -1 ) . T	creating a numpy array of <val4> d coordinates from three 1 d arrays <name1> , <name2> and <name3>
<name3> [ <name3> != <val4> ] . min ( )	find the minimum value in a numpy array <name3> excluding <val4>
<name1> [ <name1> != <val2> ] . min ( )	find the minimum value in a numpy array <name1> excluding <val2>
'browser . find_elements_by_xpath ( ' <val1> <name5> <val3> ' ) . text'	'get the text of multiple elements found by xpath ' <val1> <name5> <val3> ''
'browser . find_elements_by_xpath ( ' <val1> <name2> <val3> ' ) . text'	'get the text of multiple elements found by xpath ' <val1> <name2> <val3> ''
'browser . find_elements_by_xpath ( ' '//*[@type=' submit ']' ' ) . get_attribute ( ' value ' )'	find all the values in attribute 'value' for the tags whose type attribute is 'submit' in selenium
pd . DataFrame ( <name1> . <name5> [ <name4> . argsort ( <name1> . <name3> ) ] , <name1> . index , <name4> . unique ( <name1> . <name3> ) )	Sort the <name3> of the dataframe <name1> and align the <name5> accordingly based on the obtained indices after <name4> .argsort .
pd . DataFrame ( <name1> . <name2> [ <name3> . argsort ( <name1> . <name4> ) ] , <name1> . index , <name3> . unique ( <name1> . <name4> ) )	Sort the <name4> of the dataframe <name1> and align the <name2> accordingly based on the obtained indices after <name3> .argsort .
datetime . datetime . <name6> ( ) . strftime ( '%Y-%m-%d'   )	Getting <name6> ' s date in YYYY - MM - DD
datetime . datetime . <name1> ( ) . strftime ( '%Y-%m-%d'   )	Getting <name1> ' s date in YYYY - MM - DD
urllib . parse . quote_plus ( <val4>   )	urlencode a querystring <val4> in python 2
urllib . parse . quote_plus ( <val1>   )	urlencode a querystring <val1> in python 2
<name1> ( ' '   . join ( sorted ( <name2> , key = lambda k : len ( <name2> [ k ] ) , reverse = True ) ) )	sort a dictionary <name2> by length of its values and <name1> as string
map ( <name1> , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )	convert tuple elements in <name1> [(1,2),(3,4),(5,6),] into lists
[ ( x , y ) <name3> x , y <name1> zip ( myList , myList [ 1 : ] ) if y == <val6> ]	create a list of tuples which contains number <val6> and the number before it , <name3> each occurrence of <val6> <name1> the list 'myList'
[ ( x , y ) <name1> x , y <name2> zip ( myList , myList [ 1 : ] ) if y == <val3> ]	create a list of tuples which contains number <val3> and the number before it , <name1> each occurrence of <val3> <name2> the list 'myList'
driver . get ( 'http://www.google.com.br'   )	navigate to webpage given by url http://www.python.org using Selenium
b = <name1> . decode ( 'utf8'   ) [ : : -1 ] . encode ( 'utf8'   )	reverse <name1> UTF -8 string 'a'
dparser . parse ( <val1>   , fuzzy = True )	extract date from a string <val1>
dparser . parse ( <val2>   , fuzzy = True )	extract date from a string <val2>
dparser . parse ( <val1>   , fuzzy = True )	extract date from a string <val1>
dparser . parse ( <val5>   , fuzzy = True )	extract date from a string <val5>
dparser . parse ( <val1>   , fuzzy = True )	extract date from a string <val1>
dict ( map ( lambda s : s . split ( ':'   ) , [ 'A:1'   , 'B:2'   , 'C:3'   , 'D:4'   ] ) )	Convert a list ['A:1', 'B:2', 'C:3', 'D:4'] to dictionary
re . search ( '[a-zA-Z]'   , <name3> )	check if string <name3> contains any upper or lower - case ASCII letters
re . search ( '[a-zA-Z]'   , <name1> )	check if string <name1> contains any upper or lower - case ASCII letters
DataFrame ( {  'count'   : <name2> . <name3> ( [ 'Name'   , 'City'   ] ) . size ( ) }  ) . reset_index ( )	convert a pandas <name2> <name3> object to dataframe
DataFrame ( {  'count'   : <name1> . <name2> ( [ 'Name'   , 'City'   ] ) . size ( ) }  ) . reset_index ( )	convert a pandas <name1> <name2> object to dataframe
re . sub ( '[^0-9]'   , ''   , 'sdkjh987978asd098as0980a98sd'   )	remove all non - numeric characters from string sdkjh987978asd098as0980a98sd 
[ y for y <name3> <name5> if y not <name3> <name2> ]	get items from list <name5> that don ' t appear <name3> list <name2>
[ y for y <name1> <name2> if y not <name1> <name3> ]	get items from list <name2> that don ' t appear <name1> list <name3>
<name1> . groupby ( <val5>   ) . head ( 4 )	extract the first four rows of the column <val5> from a pandas dataframe <name1>
<name1> . groupby ( <val2>   ) . head ( 4 )	extract the first four rows of the column <val2> from a pandas dataframe <name1>
zip ( * <name2> )	Unzip a list of tuples <name2> into a list of lists
zip ( * <name1> )	Unzip a list of tuples <name1> into a list of lists
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a'   , 'b'   , 'c'   , 'd'   ] ) )	combine two lists [1, 2, 3, 4] and ['a', 'b', 'c', 'd'] into a dictionary
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a'   , 'b'   , 'c'   , 'd'   ] ) )	combine two lists [1, 2, 3, 4] and ['a', 'b', 'c', 'd'] into a dictionary
<name5> . url	retrieve the path from a Flask <name5>
<name1> . url	retrieve the path from a Flask <name1>
<name5> . <name2> ( '\\r'   , <val4>   )	<name2> carriage return in string <name5> with empty string <val4>
<name1> . <name2> ( '\\r'   , <val3>   )	<name2> carriage return in string <name1> with empty string <val3>
simplejson . dumps ( dict ( [ ( <val3>     % k , v ) for k , v in list ( <name5> . items ( ) ) ] ) )	serialize dictionary <name5> as a JSON formatted string with each key formatted to pattern <val3>
simplejson . dumps ( dict ( [ ( <val1>     % k , v ) for k , v in list ( <name2> . items ( ) ) ] ) )	serialize dictionary <name2> as a JSON formatted string with each key formatted to pattern <val1>
datetime . strptime ( <val3>   , <val2>   )	'parse string ' <val3> ' into datetime by format ' <val2> ''
datetime . strptime ( <val1>   , <val2>   )	'parse string ' <val1> ' into datetime by format ' <val2> ''
parser . parse ( <val2>   )	'parse string ' <val2> ' into datetime'
parser . parse ( <val1>   )	'parse string ' <val1> ' into datetime'
os . <name5> . split ( os . <name5> . abspath ( existGDBPath ) )	Get absolute folder <name5> and filename for file existGDBPath 
os . <name1> . split ( os . <name1> . abspath ( existGDBPath ) )	Get absolute folder <name1> and filename for file existGDBPath 
os . <name1> . dirname ( os . <name1> . abspath ( existGDBPath ) )	extract folder <name1> from file <name1>
requests . <name2> ( <val4>   , <name1> = {  'test'   : 'cheers'  }  )	Execute a <name2> request to url <val4> with <name1> data {'test': 'cheers'}
requests . <name1> ( <val2>   , <name3> = {  'test'   : 'cheers'  }  )	Execute a <name1> request to url <val2> with <name3> data {'test': 'cheers'}
<name1> = [ x for x <name5> <name1> <name4> x [ <val6>   ] not <name5> <name3> ]	remove dictionary from list <name1> <name4> the value associated with its key <val6> is <name5> list <name3>
<name1> = [ x for x <name2> <name1> <name3> x [ <val4>   ] not <name2> <name5> ]	remove dictionary from list <name1> <name3> the value associated with its key <val4> is <name2> list <name5>
{{  <name6> . args . <name3> ( <val2>   ) }}	<name3> a <name6> parameter <val2> in jinja2
{{  <name1> . args . <name2> ( <val3>   ) }}	<name2> a <name1> parameter <val3> in jinja2
<name4> ( range ( <val6> , <val1> ) )	create a <name4> of integers between 2 values <val6> and <val1>
<name1> ( range ( <val2> , <val3> ) )	create a <name1> of integers between 2 values <val2> and <val3>
<name1> [ <val4>   ] = <name1> [ <val4>   ] . astype ( <name6> ) . astype ( <name2> )	Change data type of data in column <val4> of dataframe <name1> into <name6> and then to <name2>
<name1> [ <val2>   ] = <name1> [ <val2>   ] . astype ( <name3> ) . astype ( <name4> )	Change data type of data in column <val2> of dataframe <name1> into <name3> and then to <name4>
<name4> ( <name5> , key = lambda x : x [ 1 ] )	Find the list in a list of lists <name5> with the <name4> value of the second element .
<name1> ( <name2> , key = lambda x : x [ 1 ] )	Find the list in a list of lists <name2> with the <name1> value of the second element .
your_string . strip ( '0'   )	remove leading and trailing zeros in the string 'your_Strip'
<name6> ( permutations ( <name6> ( range ( 9 ) ) , 2 ) )	generate a <name6> of all unique pairs of integers in range(9)
<name1> ( permutations ( <name1> ( range ( 9 ) ) , 2 ) )	generate a <name1> of all unique pairs of integers in range(9)
re . compile ( <val2>   , re . MULTILINE )	create a regular expression that matches the pattern <val2> over multiple lines of text
re . compile ( <val1>   , re . MULTILINE )	create a regular expression that matches the pattern <val1> over multiple lines of text
re . compile ( <val6>   , re . MULTILINE )	'regular expression ' <val6> ' matching a multiline block of text'
re . compile ( <val1>   , re . MULTILINE )	'regular expression ' <val1> ' matching a multiline block of text'
call ( [ <val4>   , <val3>   , <val2>   ] )	Run <val3> file with python location <val4> and arguments <val2> as a subprocess
call ( [ <val1>   , <val2>   , <val3>   ] )	Run <val2> file with python location <val1> and arguments <val3> as a subprocess
<name4> . <name5> ( key = operator . itemgetter ( 2 , 3 ) )	<name5> <name4> multidimensional list <name4> by second and third column
<name1> . <name2> ( key = operator . itemgetter ( 2 , 3 ) )	<name2> <name1> multidimensional list <name1> by second and third column
final_choices = ( ( <name6> , ) + <name3> )	Add a tuple with value <name6> to a tuple <name3>
final_choices = ( ( <name1> , ) + <name2> )	Add a tuple with value <name1> to a tuple <name2>
final_choices = ( ( <name6> , ) + <name1> )	Add a tuple with value <name6> to a tuple <name1>
final_choices = ( ( <name1> , ) + <name2> )	Add a tuple with value <name1> to a tuple <name2>
os . getcwd ( )	find the current directory
os . path . realpath ( __file__ )	find the current directory
os . <name5> . dirname ( <name5> )	get the directory name of <name5>
os . <name1> . dirname ( <name1> )	get the directory name of <name1>
os . <name6> . realpath ( <name6> )	get the canonical <name6> of file <name6>
os . <name1> . realpath ( <name1> )	get the canonical <name1> of file <name1>
dir_path = os . path . dirname ( os . path . realpath ( __file__ ) )	Find name of current directory
cwd = os . getcwd ( )	Find current directory
full_path = os . <name1> . realpath ( __file__ )	Find the full <name1> of current directory
<name3> [ <name3> [ : , ( 2 ) ] . argsort ( ) ]	sort array <name3> in ascending order by values of the 3 rd column
<name1> [ <name1> [ : , ( 2 ) ] . argsort ( ) ]	sort array <name1> in ascending order by values of the 3 rd column
<name5> . <name1> ( <name3> , axis = 0 )	<name1> rows of <name5> matrix <name3> in ascending order according to all column values
<name1> . <name2> ( <name3> , axis = 0 )	<name2> rows of <name1> matrix <name3> in ascending order according to all column values
re . split ( '[ .]'   , 'a b.c'   )	'split string ' a b .c ' on space ' ' ' ' and dot character ' '.' ''
shutil . <name3> ( <val1>   , <val2>   )	<name3> the content of file <val1> to file <val2>
shutil . <name1> ( <val2>   , <val3>   )	<name1> the content of file <val2> to file <val3>
print ( ''   . join ( choice ( ascii_uppercase ) for i in range ( <val6> ) ) )	generate random upper - case ascii string of <val6> characters length
print ( ''   . join ( choice ( ascii_uppercase ) for i in range ( <val1> ) ) )	generate random upper - case ascii string of <val1> characters length
[ ''   . join ( seq ) for seq <name1> zip ( <name2> , <name2> [ 1 : ] ) ]	merge the elements <name1> a list <name2> sequentially
<name3> . <name6> ( columns = {  <val1>   : <val2>  }  , inplace = True )	<name6> column <val1> in dataframe <name3> to <val2>
<name1> . <name2> ( columns = {  <val3>   : <val4>  }  , inplace = True )	<name2> column <val3> in dataframe <name1> to <val4>
print ( <name5> . get_text ( ) )	convert a beautiful <name5> html <name5> to text
print ( <name1> . get_text ( ) )	convert a beautiful <name1> html <name1> to text
sorted ( <name3> , key = operator . itemgetter ( 1 ) , reverse = True )	Sort list <name3> in descending order based on the second element of each list inside list <name3>
sorted ( <name1> , key = operator . itemgetter ( 1 ) , reverse = True )	Sort list <name1> in descending order based on the second element of each list inside list <name1>
<name4> [ <val5>   ] . <name3> ( [ <val2> , <val6> ] , [ <val1>   , <val4>   ] , inplace = True )	<name3> value <val2> with <val1> and value <val6> with <val4> in column <val5> of dataframe <name4>
<name1> [ <val2>   ] . <name3> ( [ <val4> , <val5> ] , [ <val6>   , <val1>   ] , inplace = True )	<name3> value <val4> with <val6> and value <val5> with <val1> in column <val2> of dataframe <name1>
re . <name5> ( '\\W+'   , <val6>   )	<name5> string <val6> on punctuation
re . <name1> ( '\\W+'   , <val2>   )	<name1> string <val2> on punctuation
re . match ( '(.*?[.?!](?:\\s+.*?[.?!]){0,1})'   , <name4> ) . group ( 1 )	Extract first two substrings in string <name4> that end in . , ? or !
re . match ( '(.*?[.?!](?:\\s+.*?[.?!]){0,1})'   , <name1> ) . group ( 1 )	Extract first two substrings in string <name1> that end in . , ? or !
print ( [ a for a , b in re . findall ( '((\\w)\\2*)'   , <name3> ) ] )	split string <name3> into strings of repeating elements
print ( [ a for a , b in re . findall ( '((\\w)\\2*)'   , <name1> ) ] )	split string <name1> into strings of repeating elements
print ( <val5>   . join ( OrderedDict . fromkeys ( <name4> ) ) )	Create new string with unique characters from <name4> seperated by <val5>
print ( <val1>   . join ( OrderedDict . fromkeys ( <name2> ) ) )	Create new string with unique characters from <name2> seperated by <val1>
print ( ' '   . join ( <name2> ( <name6> ) ) )	create a <name2> from string <name6> to remove duplicate characters
print ( ' '   . join ( <name1> ( <name2> ) ) )	create a <name1> from string <name2> to remove duplicate characters
[ x for x <name6> <name1> . namelist ( ) if x . endswith ( <val3>   ) ]	list folders <name6> zip <name1> 'file' that ends with <val3>
[ x for x <name1> <name2> . namelist ( ) if x . endswith ( <val3>   ) ]	list folders <name1> zip <name2> 'file' that ends with <val3>
<name2> . <name3> ( <val6>   )	find the <name3> of a word <val6> in a string <name2>
<name1> . <name2> ( <val3>   )	find the <name2> of a word <val3> in a string <name1>
print ( <val3>   . join ( [ item [ 0 ] for item in <name2> ] ) )	reduce the first element of list of strings <name2> to a string , separated by <val3>
print ( <val1>   . join ( [ item [ 0 ] for item in <name2> ] ) )	reduce the first element of list of strings <name2> to a string , separated by <val1>
<name3> . seek ( 2 )	Move the cursor of file pointer <name3> at the end of the file .
<name1> . seek ( 2 )	Move the cursor of file pointer <name1> at the end of the file .
print ( zip ( my_list [ 0 : : 2 ] , my_list [ 1 : : 2 ] ) )	convert a flat list into a list of tuples of every two items in the list , in order
my_new_list = zip ( my_list [ 0 : : <val1> ] , my_list [ 1 : : <val1> ] )	group a list of ints into a list of tuples of each <val1> elements
sys . setdefaultencoding ( 'utf8'   )	set the default encoding to 'utf-8'
datetime . datetime . now ( ) . strftime ( <val1>   )	Formate current date and time to a string using pattern <val1>
print ( re . findall ( '[\\u0600-\\u06FF]+'   , <name4> ) )	retrieve arabic texts from string <name4>
print ( re . findall ( '[\\u0600-\\u06FF]+'   , <name1> ) )	retrieve arabic texts from string <name1>
<name2> . groupby ( <name2> . index . map ( lambda t : t . <name3> ) )	group dataframe <name2> based on <name3> interval
<name1> . groupby ( <name1> . index . map ( lambda t : t . <name2> ) )	group dataframe <name1> based on <name2> interval
<name1> [ <val4>   ] [ <val3>   ]	access value associated with key <val3> of key <val4> from dictionary <name1>
<name1> [ <val2>   ] [ <val3>   ]	access value associated with key <val3> of key <val2> from dictionary <name1>
<name2> . dropna ( subset = [ <val1>   , <val5>   , <val4>   ] , how = 'all'   )	remove all null values from columns <val1> , <val5> and <val4> of dataframe <name2>
<name1> . dropna ( subset = [ <val2>   , <val3>   , <val4>   ] , how = 'all'   )	remove all null values from columns <val2> , <val3> and <val4> of dataframe <name1>
<name6> . <name3> ( 0 , <name1> )	<name3> <name6> list <name1> at the front of list <name6>
<name1> . <name2> ( 0 , <name3> )	<name2> <name1> list <name3> at the front of list <name1>
<name1> = <name1> [ : <name5> ] + <name3> + <name1> [ <name5> : ]	insert elements of list <name3> into list <name1> at position <name5>
<name1> = <name1> [ : <name2> ] + <name3> + <name1> [ <name2> : ]	insert elements of list <name3> into list <name1> at position <name2>
np . flatnonzero ( x ) . <name6> ( )	calculate the <name6> of the nonzero values '  indices of dataframe df
np . flatnonzero ( x ) . <name1> ( )	calculate the <name1> of the nonzero values '  indices of dataframe df
<name2> [ <val4>   ] = <name2> [ <val3>   ] . dt . <name6>	get <name6> from dataframe <name2> column <val3> to column <val4>
<name1> [ <val2>   ] = <name1> [ <val3>   ] . dt . <name4>	get <name4> from dataframe <name1> column <val3> to column <val2>
[ x for x <name5> <name2> if x not <name5> <name4> ]	remove elements <name5> list <name4> from list <name2>
[ x for x <name1> <name2> if x not <name1> <name3> ]	remove elements <name1> list <name3> from list <name2>
[ ''   . <name6> ( x ) for x <name3> <name4> ]	<name6> elements of each tuple <name3> list <name4> into one string
[ ''   . <name1> ( x ) for x <name2> <name3> ]	<name1> elements of each tuple <name2> list <name3> into one string
<name3> ( map ( ''   . <name1> , <name2> ) )	<name1> items of each tuple in <name3> of tuples <name2> into <name2> <name3> of strings
<name1> ( map ( ''   . <name2> , <name3> ) )	<name2> items of each tuple in <name1> of tuples <name3> into <name3> <name1> of strings
re . split ( '\n\\s*\n'   , <name5> )	match blank lines in <name5> with regular expressions
re . split ( '\n\\s*\n'   , <name1> )	match blank lines in <name1> with regular expressions
'' '' ' ' '{0:,.2f}' ' ' '' ' . format ( 24322.34 )'	Convert float 24322.34 to comma - separated string
<name3> ( ** <name1> )	pass dictionary items <name1> as keyword arguments in function <name3>
<name1> ( ** <name2> )	pass dictionary items <name2> as keyword arguments in function <name1>
sum ( ( 1 for <name6> in open ( <val2>   ) ) )	get <name6> count of file <val2>
sum ( ( 1 for <name1> in open ( <val2>   ) ) )	get <name1> count of file <val2>
print ( <name4> ( <val6> , -1 ) )	<name4> <val6> to be an integer
print ( <name1> ( <val2> , -1 ) )	<name1> <val2> to be an integer
[ x for y , x in sorted ( zip ( <name5> , <name2> ) ) ]	sort list <name2> based on values from another list <name5>
[ x for y , x in sorted ( zip ( <name1> , <name2> ) ) ]	sort list <name2> based on values from another list <name1>
[ x for y , x in sorted ( zip ( Y , X ) ) ]	sorting list 'X' based on values from another list 'Y'
datetime . <name2> ( 2010 , 6 , 16 ) . <name4> ( ) [ 1 ]	get equivalent week number from a <name2> 2010/6/16 using <name4>
datetime . <name1> ( 2010 , 6 , 16 ) . <name2> ( ) [ 1 ]	get equivalent week number from a <name1> 2010/6/16 using <name2>
<name6> . iloc [ : , ( np . r_ [ <val4> : 10 , ( <val2> ) , ( <val3> ) , <val1> : 100 ] ) ]	select multiple ranges of columns <val4> -10 , <val2> , <val3> , and <val1> -100 in pandas dataframe <name6>
<name1> . iloc [ : , ( np . r_ [ <val2> : 10 , ( <val3> ) , ( <val4> ) , <val5> : 100 ] ) ]	select multiple ranges of columns <val2> -10 , <val3> , <val4> , and <val5> -100 in pandas dataframe <name1>
<name6> . groupby ( <val4>   ) . agg ( {  'returns'   : [ np . <name3> , np . <name2> ] }  )	apply two different aggregating functions <name3> and <name2> to the same column <val4> in pandas data frame <name6>
<name1> . groupby ( <val2>   ) . agg ( {  'returns'   : [ np . <name3> , np . <name4> ] }  )	apply two different aggregating functions <name3> and <name4> to the same column <val2> in pandas data frame <name1>
<name2> . lower ( )	convert string <name2> to lowercase
<name1> . lower ( )	convert string <name1> to lowercase
<name3> . decode ( 'utf-8'   ) . lower ( )	convert utf -8 string <name3> to lowercase
<name1> . decode ( 'utf-8'   ) . lower ( )	convert utf -8 string <name1> to lowercase
urlfetch . fetch ( <name6> , deadline = 10 * 60 )	handle the urlfetch_errors  exception for imaplib request to <name6> <name6>
urlfetch . fetch ( <name1> , deadline = 10 * 60 )	handle the urlfetch_errors  exception for imaplib request to <name1> <name1>
print ( <name4> [ 0 : <val1> ] )	output first <val1> characters in a string <name4>
print ( <name1> [ 0 : <val2> ] )	output first <val2> characters in a string <name1>
<name6> ( numpoints = 1 )	make matplotlib plot <name6> put marker in <name6> only once
<name1> ( numpoints = 1 )	make matplotlib plot <name1> put marker in <name1> only once
dict ( ( x , <name1> ( y ) &   <name1> ( <name6> . <name3> ( x , ( ) ) ) ) for x , y in <name5> . items ( ) )	<name3> <name1> intersection between dictionaries <name6> and <name5>
dict ( ( x , <name1> ( y ) &   <name1> ( <name2> . <name3> ( x , ( ) ) ) ) for x , y in <name4> . items ( ) )	<name3> <name1> intersection between dictionaries <name2> and <name4>
numpy . loadtxt ( open ( <val6>   , 'rb'   ) , delimiter = ','   , skiprows = 1 )	convert csv file <val6> into two - dimensional matrix
numpy . loadtxt ( open ( <val1>   , 'rb'   ) , delimiter = ','   , skiprows = 1 )	convert csv file <val1> into two - dimensional matrix
Sample . <name6> . <name2> ( date__range = [ <val4>   , <val1>   ] )	<name2> the <name6> in django model 'Sample' between date range <val4> and <val1>
Sample . <name1> . <name2> ( date__range = [ <val3>   , <val4>   ] )	<name2> the <name1> in django model 'Sample' between date range <val3> and <val4>
<name4> . <name1> . <name6> ( date__year = <val3>   , date__month = '01'   )	<name6> <name1> month wise in django model <name4> for year <val3>
<name1> . <name2> . <name3> ( date__year = <val4>   , date__month = '01'   )	<name3> <name2> month wise in django model <name1> for year <val4>
<name2> [ <val5>   ] = {  'spam'   : 5 , 'ham'   : 6 }	create a dictionary {'spam': 5, 'ham': 6} into another dictionary <name2> field <val5>
<name1> [ <val2>   ] = {  'spam'   : 5 , 'ham'   : 6 }	create a dictionary {'spam': 5, 'ham': 6} into another dictionary <name1> field <val2>
numpy . apply_along_axis ( numpy . linalg . norm , 1 , <name1> )	apply numpy.linalg.norm to each row of <name1> matrix <name1>
dict ( ( k , v ) for d <name1> <name6> for k , v <name1> list ( d . items ( ) ) )	merge dictionaries form array <name6> <name1> a single expression
dict ( ( k , v ) for d <name1> <name2> for k , v <name1> list ( d . items ( ) ) )	merge dictionaries form array <name2> <name1> a single expression
print ( <val2>   . decode ( 'string_escape'   ) )	Convert escaped utf string to utf string in <val2>
print ( <val1>   . decode ( 'string_escape'   ) )	Convert escaped utf string to utf string in <val1>
sum ( [ True , True , False , False , False , True ] )	counting the number of true booleans in a python list [True, True, False, False, False, True]
<name2> . set_size_inches ( <name5> , <name3> , forward = True )	set the size of figure <name2> in inches to width height of <name5> , <name3>
<name1> . set_size_inches ( <name2> , <name3> , forward = True )	set the size of figure <name1> in inches to width height of <name2> , <name3>
'hello there %(5)s'     % {  '5'   : 'you'  }	format string with dict {'5': 'you'} with integer keys
map ( int , <name6> . split ( <val4>   ) )	Convert a string of numbers <name6> separated by <val4> into a list of integers
map ( int , <name1> . split ( <val2>   ) )	Convert a string of numbers <name1> separated by <val2> into a list of integers
[ int ( s ) for s in example_string . split ( ','   ) ]	Convert a string of numbers 'example_string' separated by comma into a list of numbers
<name2> = [ i [ 0 ] for i in <name2> ]	Flatten list <name2>
<name1> = [ i [ 0 ] for i in <name1> ]	Flatten list <name1>
y = map ( operator . itemgetter ( 0 ) , <name1> )	convert list <name1> into a flat list
<name1> = [ i [ 0 ] for i <name2> <name5> ]	get a list <name1> of the first element of every tuple <name2> list <name5>
<name1> = [ i [ 0 ] for i <name2> <name3> ]	get a list <name1> of the first element of every tuple <name2> list <name3>
results = [ item [ 'value'   ] for item in test_data ]	extract all the values of a specific key named 'values' from a list of dictionaries
<name4> . <name4> . now ( ) . isoformat ( )	get current <name4> in ISO format
<name1> . <name1> . now ( ) . isoformat ( )	get current <name1> in ISO format
<name4> . <name4> . utcnow ( ) . isoformat ( )	get UTC <name4> in ISO format
<name1> . <name1> . utcnow ( ) . isoformat ( )	get UTC <name1> in ISO format
<name4> . apply ( ' '   . join , axis = 0 )	Merge all columns in dataframe <name4> into one column
<name1> . apply ( ' '   . join , axis = 0 )	Merge all columns in dataframe <name1> into one column
pd . DataFrame ( <name5> . values - <name6> . values , columns = <name5> . columns )	pandas subtract a row from dataframe <name6> from dataframe <name5>
pd . DataFrame ( <name1> . values - <name2> . values , columns = <name1> . columns )	pandas subtract a row from dataframe <name2> from dataframe <name1>
print ( open ( <val1>   , <val4>   ) . <name5> ( ) )	<name5> file <val1> using universal newline mode <val4>
print ( open ( <val1>   , <val2>   ) . <name3> ( ) )	<name3> file <val1> using universal newline mode <val2>
<name3> ( <name5> . decode ( <val2>   ) . split ( ) )	<name3> <name5> <name5> from text file with <val2> format
<name1> ( <name2> . decode ( <val3>   ) . split ( ) )	<name1> <name2> <name2> from text file with <val3> format
<name2> = <name3> . <name5> ( <val4>   , 'r'   , <name1> = <val6>   )	<name5> a text <name2> <val4> in <name3> module with <name1> <val6>
<name1> = <name2> . <name3> ( <val4>   , 'r'   , <name5> = <val6>   )	<name3> a text <name1> <val4> in <name2> module with <name5> <val6>
s1 = pd . merge ( <name3> , <name4> , how = 'inner'   , <name1> = [ <val6>   ] )	Join data of dataframe <name3> with data in dataframe <name4> based <name1> similar values of column <val6> in both dataframes
s1 = pd . merge ( <name1> , <name2> , how = 'inner'   , <name3> = [ <val4>   ] )	Join data of dataframe <name1> with data in dataframe <name2> based <name3> similar values of column <val4> in both dataframes
<name2> . decode ( 'utf8'   ) . encode ( 'utf8'   )	check if string <name2> is UTF -8 encoded
<name1> . decode ( 'utf8'   ) . encode ( 'utf8'   )	check if string <name1> is UTF -8 encoded
<name3> . shape	get the dimensions of numpy array <name3>
<name1> . shape	get the dimensions of numpy array <name1>
N . shape ( <name2> )	get the dimensions of numpy array <name2>
N . shape ( <name1> )	get the dimensions of numpy array <name1>
N . shape ( <name1> )	get the dimensions of array <name1>
<name3> . shape	get the dimensions of numpy array <name3>
<name1> . shape	get the dimensions of numpy array <name1>
[ i for i , v <name2> enumerate ( <name1> ) if v [ 0 ] == <val3> ]	get the indices of tuples <name2> list of tuples <name1> where the first value is <val3>
[ i for i , v <name1> enumerate ( <name2> ) if v [ 0 ] == <val3> ]	get the indices of tuples <name1> list of tuples <name2> where the first value is <val3>
struct . unpack ( '<L'   , <val4>   ) [ 0 ]	convert string of bytes <val4> into an int
struct . unpack ( '<L'   , <val1>   ) [ 0 ]	convert string of bytes <val1> into an int
<name4> [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ]	get the first row , second column ; second row , first column , and first row third column values of numpy array <name4>
<name1> [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ]	get the first row , second column ; second row , first column , and first row third column values of numpy array <name1>
<name3> ( powerset ( <val5>   ) )	create a <name3> with permutations of string <val5>
<name1> ( powerset ( <val2>   ) )	create a <name1> with permutations of string <val2>
s in [ 'true'   , '1'   , 't'   , 'y'   , 'yes'   , 'yeah'   , 'yup'   , 'certainly'   , 'uh-huh'   ]	Convert string to boolean from defined set of strings
urllib . parse . quote ( <val4>   )	replace special characters in url <val4> using the '%xx' escape
urllib . parse . quote ( <val1>   )	replace special characters in url <val1> using the '%xx' escape
<name3> . savefig ( <val5>   )	Save plot <name3> as svg file <val5>
<name1> . savefig ( <val2>   )	Save plot <name1> as svg file <val2>
len ( <name6> )	count the number of elements in array <name6>
len ( <name1> )	count the number of elements in array <name1>
sys . path . <name4> ( 0 , <val3>   )	<name4> directory <val3> to current directory
sys . path . <name1> ( 0 , <val2>   )	<name1> directory <val2> to current directory
cursor . execute ( 'INSERT OR REPLACE INTO master.table1 SELECT * FROM table1'   )	'Insert records in bulk from ' 'table1' ' of ' 'master' ' DB to ' 'table1' ' of  sqlite3 `cursor` object'
re . match ( <val5>   , <val6>   )	Match regex <val5> on string <val6>
re . match ( <val1>   , <val2>   )	Match regex <val1> on string <val2>
re . <name6> ( <val5>   , <val1>   )	<name6> regex <val5> on string <val1>
re . <name1> ( <val2>   , <val3>   )	<name1> regex <val2> on string <val3>
int ( <val1>   , 16 )	'Convert hex string ' <val1> ' to integer'
int ( <val6>   , 16 )	'Convert hex string ' <val6> ' to integer'
int ( <val1>   , 16 )	'Convert hex string ' <val1> ' to integer'
int ( <val6>   , 16 )	'Convert hex string ' <val6> ' to integer'
int ( <val1>   , 16 )	'Convert hex string ' <val1> ' to integer'
int ( <name2> , 16 )	Convert hex string <name2> to integer
int ( <name1> , 16 )	Convert hex string <name1> to integer
<name5> ( <name2> , 16 )	Convert hex string <name2> to <name5>
<name1> ( <name2> , 16 )	Convert hex string <name2> to <name1>
{{  <name4> |   <name2> ( <val5>   ) }}	Jinja <name2> elements of array <name4> with space string <val5>
{{  <name1> |   <name2> ( <val3>   ) }}	Jinja <name2> elements of array <name1> with space string <val3>
help ( 'modules'   )	get a list of locally installed Python modules
[ [ [ x [ 0 ] ] for x <name6> <name3> [ i ] ] for i <name6> range ( len ( <name3> ) ) ]	Get only first element <name6> each of the innermost of the multidimensional list <name3>
[ [ [ x [ 0 ] ] for x <name1> <name2> [ i ] ] for i <name1> range ( len ( <name2> ) ) ]	Get only first element <name1> each of the innermost of the multidimensional list <name2>
sorted ( <name2> , key = str . upper )	Sort a string <name2> in lexicographic order
sorted ( <name1> , key = str . upper )	Sort a string <name1> in lexicographic order
sorted ( sorted ( <name4> ) , key = str . upper )	sort string <name4> in lexicographic order
sorted ( sorted ( <name1> ) , key = str . upper )	sort string <name1> in lexicographic order
<name6> ( <name5> , key = str . lower )	get a <name6> list of the characters of string <name5> in lexicographic order , with lowercase letters first
<name1> ( <name2> , key = str . lower )	get a <name1> list of the characters of string <name2> in lexicographic order , with lowercase letters first
pd . merge ( df1 , df2 , on = [ <val2>   , <val5>   , <val4>   , <val3>   ] , how = 'inner'   )	find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1' , for the columns <val2> , <val5> , <val4> and <val3> .
pd . merge ( df1 , df2 , on = [ <val1>   , <val2>   , <val3>   , <val4>   ] , how = 'inner'   )	find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1' , for the columns <val1> , <val2> , <val3> and <val4> .
dict ( ( v , k ) for k , v <name1> <name3> . items ( ) )	Reverse key - value pairs <name1> a dictionary <name3>
dict ( ( v , k ) for k , v <name1> <name2> . items ( ) )	Reverse key - value pairs <name1> a dictionary <name2>
<name1> . <name3> ( 'unicode_escape'   )	<name3> unicode string <name1> into a readable unicode literal
<name1> . <name2> ( 'unicode_escape'   )	<name2> unicode string <name1> into a readable unicode literal
[ int ( i ) for i in <name1> ]	convert list of strings <name1> into list of integers
map ( int , [ '1'   , '2'   , '3'   ] )	convert a list with string ['1', '2', '3'] into list with integers
<name1> ( map ( <name2> , [ '1'   , '2'   , '3'   ] ) )	convert <name1> with str into <name1> with <name2>
<name2> . find_all ( 'a'   , href = re . compile ( 'http://www\\.iwashere\\.com/'   ) )	find all anchor tags in html <name2> whose url begins with http://www.iwashere.com
<name1> . find_all ( 'a'   , href = re . compile ( 'http://www\\.iwashere\\.com/'   ) )	find all anchor tags in html <name1> whose url begins with http://www.iwashere.com
soup . find_all ( 'a'   , href = re . compile ( <val5>   ) )	find all anchors with a hyperlink that matches the pattern <val5>
soup . find_all ( 'a'   , href = re . compile ( <val1>   ) )	find all anchors with a hyperlink that matches the pattern <val1>
<name1> . call ( [ 'java'   , '-jar'   , <val3>   ] )	execute a jar file <val3> using <name1>
<name1> . call ( [ 'java'   , '-jar'   , <val2>   ] )	execute a jar file <val2> using <name1>
cursor . execute ( 'INSERT INTO table (`column1`) VALUES (%s)'   , ( <name4> , ) )	insert row into mysql database with column 'column1' set to the <name4> <name4>
cursor . execute ( 'INSERT INTO table (`column1`) VALUES (%s)'   , ( <name1> , ) )	insert row into mysql database with column 'column1' set to the <name1> <name1>
url = re . sub ( '\\.com$'   , ''   , url )	'remove a substring ' '.com' ' from the end of string `url`'
print ( url . replace ( <val3>   , ''   ) )	'remove a substring ' <val3> ' from the end of string `url`'
print ( url . replace ( <val1>   , ''   ) )	'remove a substring ' <val1> ' from the end of string `url`'
<name5> ( ', ,'   . join ( [ str ( i [ 0 ] ) for i in <name1> ] ) )	<name5> each first value from a list of tuples <name1> with string formatting
<name1> ( ', ,'   . join ( [ str ( i [ 0 ] ) for i in <name2> ] ) )	<name1> each first value from a list of tuples <name2> with string formatting
max ( min ( <name5> , <name1> ) , <name4> )	clamping floating number <name5> to be between <name4> and <name1>
max ( min ( <name1> , <name2> ) , <name3> )	clamping floating number <name1> to be between <name3> and <name2>
re . findall ( '\\w+|[^\\w\\s]'   , <name1> , re . UNICODE )	split a unicode string <name1> into a list of words and punctuation characters with a regex
result = <name2> . engine . <name1> ( <val6>   )	<name1> raw sql queue <val6> in database <name2> in sqlalchemy - flask app
result = <name1> . engine . <name2> ( <val3>   )	<name2> raw sql queue <val3> in database <name1> in sqlalchemy - flask app
sys . exit ( 0 )	quit program
'' '' ' ' '' ' ' '' ' . join ( c for c in my_string if c . isdigit ( ) )'	get digits in string my_string
re . <name5> ( ' +'   , <name3> )	<name5> string <name3> on one or more spaces with a regular expression
re . <name1> ( ' +'   , <name2> )	<name1> string <name2> on one or more spaces with a regular expression
<name4> ( <name4> ( <name6> , 'id'   , None ) , <val2>   , None )	Evaluate a nested dictionary myobject.id.number to get <val2> if <name6> is present with <name4>
<name1> ( <name1> ( <name2> , 'id'   , None ) , <val3>   , None )	Evaluate a nested dictionary myobject.id.number to get <val3> if <name2> is present with <name1>
{  i : ( i * 2 ) for i in range ( 10 ) }	convert generator object to a dictionary
dict ( ( i , i * 2 ) for i in range ( 10 ) )	convert generator object to a dictionary
plt . cla ( )	Matplotlib clear the current axes .
<name2> = <name4> ( <name5> ( item ) for item in <name3> . <name6> ( ','   ) )	<name6> string <name3> into <name5> values and write <name4> to <name2>
<name1> = <name2> ( <name3> ( item ) for item in <name4> . <name5> ( ','   ) )	<name5> string <name4> into <name3> values and write <name2> to <name1>
bin ( ord ( <val4>   ) )	Convert ascii value <val4> to binary
bin ( ord ( <val1>   ) )	Convert ascii value <val1> to binary
<name5> ( my_string . split ( <val2>   , 1 ) [ 1 ] )	<name5> a string after a specific substring <val2> in string my_string 
<name1> ( my_string . split ( <val2>   , 1 ) [ 1 ] )	<name1> a string after a specific substring <val2> in string my_string 
print ( <name6> [ <val2>   ] [ 0 ] [ <val1>   ] )	get value of key <val1> associated with first index of key <val2> of dictionary <name6>
print ( <name1> [ <val2>   ] [ 0 ] [ <val3>   ] )	get value of key <val3> associated with first index of key <val2> of dictionary <name1>
<name4> = re . sub ( '([aeiou]):(([aeiou][^aeiou]*){3})$'   , '\\1\\2'   , <name4> )	remove colon character surrounded by vowels letters in string <name4>
<name1> = re . sub ( '([aeiou]):(([aeiou][^aeiou]*){3})$'   , '\\1\\2'   , <name1> )	remove colon character surrounded by vowels letters in string <name1>
'json . loads ( ' { '' foo '' : 42 , '' bar '' : '' baz '' } ' ) [ ' bar ' ]'	extract data field 'bar' from json object
data = json . loads ( <name4> )	Convert JSON <name4> <name4> to Python object
data = json . loads ( <name1> )	Convert JSON <name1> <name1> to Python object
data = json . loads ( <name4> )	Convert JSON <name4> <name4> to Python object
data = json . loads ( <name1> )	Convert JSON <name1> <name1> to Python object
re . findall ( '#(\\w+)'   , <val5>   )	pars a string <val5> to extract hashtags into an array
re . findall ( '#(\\w+)'   , <val1>   )	pars a string <val1> to extract hashtags into an array
<name4> ( e <name5> <name1> for e <name5> <name2> )	do a boolean check if a string <name1> contains <name4> of the items <name5> list <name2>
<name1> ( e <name2> <name3> for e <name2> <name4> )	do a boolean check if a string <name3> contains <name1> of the items <name2> list <name4>
plt . <name5> ( figsize = ( <val1> , <val2> ) )	change <name5> size to <val1> by <val2> in matplotlib
plt . <name1> ( figsize = ( <val2> , <val3> ) )	change <name1> size to <val2> by <val3> in matplotlib
<name5> . translate ( None , <name1> . <name3> )	Strip <name3> from <name1> <name5>
<name1> . translate ( None , <name2> . <name3> )	Strip <name3> from <name2> <name1>
<name3> . urlsafe_b64decode ( <name5> . encode ( 'ascii'   ) )	django urlsafe <name3> decode string <name5> with decryption
<name1> . urlsafe_b64decode ( <name2> . encode ( 'ascii'   ) )	django urlsafe <name1> decode string <name2> with decryption
len ( dict_test ) + sum ( len ( v ) for v <name5> dict_test . values ( ) )	get the number of all keys <name5> the nested dictionary dict_list
len ( dict_test ) + sum ( len ( v ) for v <name1> dict_test . values ( ) )	get the number of all keys <name1> the nested dictionary dict_list
<name3> ( <name5> ) . split ( 'x'   ) [ 1 ]	return the conversion of decimal <name5> to <name3> without the '0x' prefix
<name1> ( <name2> ) . split ( 'x'   ) [ 1 ]	return the conversion of decimal <name2> to <name1> without the '0x' prefix
<name4> ( str ( <val5> ) )	create a <name4> containing digits of number <val5> as its elements
<name1> ( str ( <val2> ) )	create a <name1> containing digits of number <val2> as its elements
[ int ( x ) for x in str ( <name4> ) ]	converting integer <name4> to list
[ int ( x ) for x in str ( <name1> ) ]	converting integer <name1> to list
br . select_form ( nr = 0 )	select a first form with no name in mechanize
json . load ( codecs . open ( <val4>   , 'r'   , <val5>   ) )	Open file <val4> in read mode with encoding of <val5>
json . load ( codecs . open ( <val1>   , 'r'   , <val2>   ) )	Open file <val1> in read mode with encoding of <val2>
<name2> . loads ( open ( <val6>   ) . read ( ) . decode ( 'utf-8-sig'   ) )	load <name2> file <val6> with utf -8 bom header
<name1> . loads ( open ( <val2>   ) . read ( ) . decode ( 'utf-8-sig'   ) )	load <name1> file <val2> with utf -8 bom header
<name1> = smtplib . SMTP ( <val2>   , <val3> )	setup a smtp mail <name1> to <val2> with port <val3>
int ( '{:08b}'   . format ( <name4> ) [ : : -1 ] , 2 )	revers correlating bits of integer <name4>
int ( '{:08b}'   . format ( <name1> ) [ : : -1 ] , 2 )	revers correlating bits of integer <name1>
<name3> . set_index ( [ <val6>   ] , append = True )	add column <val6> to index of dataframe <name3>
<name1> . set_index ( [ <val2>   ] , append = True )	add column <val2> to index of dataframe <name1>
list ( <name4> . <name2> ( ) )	get keys and <name2> of dictionary <name4>
list ( <name1> . <name2> ( ) )	get keys and <name2> of dictionary <name1>
<name3> ( <name5> . <name1> ( ) )	get keys and <name1> of dictionary <name5> as a <name3>
<name1> ( <name2> . <name3> ( ) )	get keys and <name3> of dictionary <name2> as a <name1>
session . <name6> ( <name3> ) . filter ( <name3> . <name5> >   timedelta ( <name2> = <val4> ) ) . <name1> ( )	<name6> <name1> data from table <name3> where the value of column <name5> is bigger than <val4> <name2>
session . <name1> ( <name2> ) . filter ( <name2> . <name3> >   timedelta ( <name4> = <val5> ) ) . <name6> ( )	<name1> <name6> data from table <name2> where the value of column <name3> is bigger than <val5> <name4>
os . system ( 'msbuild project.sln /p:Configuration=Debug'   )	compile Visual Studio project project.sln from the command line through python
<name1> ( list ( <name4> . keys ( ) ) , <name3> = int )	get <name1> <name3> in dictionary <name4>
<name1> ( list ( <name2> . keys ( ) ) , <name3> = int )	get <name1> <name3> in dictionary <name2>
os . system ( <val6>   )	execute command <val6> from python script
os . system ( <val1>   )	execute command <val1> from python script
<name1> . __name__	get a name of function <name1> as a string
np . <name6> ( <name2> == <name2> [ ( 0 ) , : ] , axis = 0 )	check if <name6> values in the columns of <name2> numpy matrix <name2> are same
np . <name1> ( <name2> == <name2> [ ( 0 ) , : ] , axis = 0 )	check if <name1> values in the columns of <name2> numpy matrix <name2> are same
sorted ( <name5> , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) )	sort list <name5> in ascending order based on the addition of the second and third elements of each tuple in it
sorted ( <name1> , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) )	sort list <name1> in ascending order based on the addition of the second and third elements of each tuple in it
sorted ( <name5> , key = lambda x : ( <name6> ( x [ 1 : 3 ] ) , x [ 0 ] ) , reverse = True )	sort <name5> list of tuples <name5> by the <name6> of second and third element of each tuple
sorted ( <name1> , key = lambda x : ( <name2> ( x [ 1 : 3 ] ) , x [ 0 ] ) , reverse = True )	sort <name1> list of tuples <name1> by the <name2> of second and third element of each tuple
sorted ( <name2> , key = lambda x : ( <name3> ( x [ 1 : ] ) , x [ 0 ] ) )	sorting a list of tuples <name2> by the <name3> of the second elements onwards , and third element of the tuple
sorted ( <name1> , key = lambda x : ( <name2> ( x [ 1 : ] ) , x [ 0 ] ) )	sorting a list of tuples <name1> by the <name2> of the second elements onwards , and third element of the tuple
sorted ( <name6> , key = lambda x : ( <name3> ( x [ 1 : ] ) , x [ 0 ] ) , <name1> = True )	sort the list of tuples <name6> by the <name3> of every value except the first and by the first value in <name1> order
sorted ( <name1> , key = lambda x : ( <name2> ( x [ 1 : ] ) , x [ 0 ] ) , <name3> = True )	sort the list of tuples <name1> by the <name2> of every value except the first and by the first value in <name3> order
del request . <name5> [ <val2>   ]	clear <name5> key <val2>
del request . <name1> [ <val2>   ]	clear <name1> key <val2>
datetime . datetime . strptime ( <val1>   , <val2>   ) . <name3> ( )	convert <name3> string <val1> to <name3> object in format <val2>
re . sub ( '[^\\x00-\\x7F]+'   , ' '   , <name4> )	Replace non - ASCII characters in string <name4> with a single space
re . sub ( '[^\\x00-\\x7F]+'   , ' '   , <name1> )	Replace non - ASCII characters in string <name1> with a single space
<name3> = [ i for i in range ( <val6> ) ]	Get a list <name3> from 1 to <val6>
<name1> = [ i for i in range ( <val2> ) ]	Get a list <name1> from 1 to <val2>
[ m [ 0 ] for m in re . compile ( <val1>   ) . findall ( <val6>   ) ]	use regex pattern <val1> to split string <val6>
[ m [ 0 ] for m in re . compile ( <val1>   ) . findall ( <val2>   ) ]	use regex pattern <val1> to split string <val2>
[ i [ 0 ] for i in re . findall ( <val1>   , <name2> ) ]	use regular expression <val1> to split string <name2>
fig . subplots_adjust ( wspace = 0 , hspace = 0 )	remove the space between subplots in matplotlib .pyplot
<name5> [ : : -1 ]	Reverse list <name5>
<name1> [ : : -1 ]	Reverse list <name1>
<name4> . writerow ( <name1> )	write a list of strings <name1> to csv object <name4>
<name1> . writerow ( <name2> )	write a list of strings <name2> to csv object <name1>
{{  ( item . <name1> |   <name1> ) : <val6>  }}	Jinja2 formate <name1> item.date accorto pattern <val6>
{{  ( item . <name1> |   <name1> ) : <val2>  }}	Jinja2 formate <name1> item.date accorto pattern <val2>
re . split ( '(?<=[\\.\\?!]) '   , <name6> )	Split a string <name6> with comma , question mark or exclamation by non - consuming regex using look - behind
re . split ( '(?<=[\\.\\?!]) '   , <name1> )	Split a string <name1> with comma , question mark or exclamation by non - consuming regex using look - behind
re . compile ( <val5>   )	create a regular expression object with the pattern <val5>
re . compile ( <val1>   )	create a regular expression object with the pattern <val1>
<name2> = [ ]	declare an array <name2>
<name1> = [ ]	declare an array <name1>
intarray = <name6> ( <val2>   )	declare an <name6> with element <val2>
intarray = <name1> ( <val2>   )	declare an <name1> with element <val2>
[ sublist [ : : -1 ] for sublist in <name4> [ : : -1 ] ]	given list <name4> , reverse the all sublists and the list itself
[ sublist [ : : -1 ] for sublist in <name1> [ : : -1 ] ]	given list <name1> , reverse the all sublists and the list itself
'' '' ' ' '' ' ' '' ' . join ( [ ' I ' , ' < ' , ' 3 s U ' , ' & ' , '   you luvz me ' ] )'	unescape special characters without splitting data in array of strings ['I ', u'<', '3s U ', u'&', ' you luvz me']
<name4> . <name3> ( <name4> . CRITICAL )	<name3> <name4> while running unit tests in python django
<name1> . <name2> ( <name1> . CRITICAL )	<name2> <name1> while running unit tests in python django
cursor . execute ( 'INSERT INTO index(url) VALUES(%s)'   , ( <name1> , ) )	adding <name1> <name1> to mysql row
<name1> [ <val2>   ] = <name1> [ <val4>   ] . dt . strftime ( '%d%m%Y'   )	convert column of date objects <val4> in pandas dataframe <name1> to strings in new column <val2>
<name1> [ <val2>   ] = <name1> [ <val3>   ] . dt . strftime ( '%d%m%Y'   )	convert column of date objects <val3> in pandas dataframe <name1> to strings in new column <val2>
<name4> . <name5> ( <val6>   ) [ 0 ]	<name5> string <name4> by <val6> and get the first element
<name1> . <name2> ( <val3>   ) [ 0 ]	<name2> string <name1> by <val3> and get the first element
<name3> . query ( 'index < @start_remove or index > @end_remove'   )	drop rows of dataframe <name3> whose index is smaller than the value of start_remove or bigger than the value of end_remove
<name1> . query ( 'index < @start_remove or index > @end_remove'   )	drop rows of dataframe <name1> whose index is smaller than the value of start_remove or bigger than the value of end_remove
<name5> . loc [ ( <name5> . <name6> <   <name3> ) |   ( <name5> . <name6> >   <name4> ) ]	Drop the rows in pandas timeseries <name5> from the row containing <name6> <name3> to the row containing <name6> <name4>
<name1> . loc [ ( <name1> . <name2> <   <name3> ) |   ( <name1> . <name2> >   <name4> ) ]	Drop the rows in pandas timeseries <name1> from the row containing <name2> <name3> to the row containing <name2> <name4>
<name4> . isnull ( ) . sum ( )	Get the number of NaN values in each column of dataframe <name4>
<name1> . isnull ( ) . sum ( )	Get the number of NaN values in each column of dataframe <name1>
<name3> . reset_index ( inplace = True )	reset index of dataframe <name3> so that existing index values are transferred into <name3> as columns
<name1> . reset_index ( inplace = True )	reset index of dataframe <name1> so that existing index values are transferred into <name1> as columns
[ x [ <val1>   ] for x in <name3> ]	generate a list containing values associated with the key <val1> of each dictionary inside list <name3>
[ x [ <val1>   ] for x in <name2> ]	generate a list containing values associated with the key <val1> of each dictionary inside list <name2>
np . <name1> ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) . tolist ( )	convert numpy <name1> into python list structure
ast . literal_eval ( <val6>   )	converting string <val6> to a tuple
ast . literal_eval ( <val1>   )	converting string <val1> to a tuple
<name3> . sort ( key = lambda x : x [ 1 ] )	keep a list <name3> of lists sorted as it is created by second element
<name1> . sort ( key = lambda x : x [ 1 ] )	keep a list <name1> of lists sorted as it is created by second element
<name3> ( map ( <name3> , set ( map ( lambda i : tuple ( i ) , <name1> ) ) ) )	remove duplicated items from <name3> of lists <name1>
<name1> ( map ( <name1> , set ( map ( lambda i : tuple ( i ) , <name2> ) ) ) )	remove duplicated items from <name1> of lists <name2>
[ <name5> ( i ) <name6> i in set ( tuple ( i ) <name6> i in <name1> ) ]	uniqueness <name6> <name5> of lists <name1>
[ <name1> ( i ) <name2> i in set ( tuple ( i ) <name2> i in <name3> ) ]	uniqueness <name2> <name1> of lists <name3>
return <name6> . groups . filter ( name = <val5>   ) . exists ( )	in django , check if a <name6> is in a group <val5>
return <name1> . groups . filter ( name = <val2>   ) . exists ( )	in django , check if a <name1> is in a group <val2>
return <name2> . <name1> . filter ( name__in = [ 'group1'   , 'group2'   ] ) . exists ( )	check if a <name2> <name2> is in a group from list of <name1> ['group1', 'group2']
return <name1> . <name2> . filter ( name__in = [ 'group1'   , 'group2'   ] ) . exists ( )	check if a <name1> <name1> is in a group from list of <name2> ['group1', 'group2']
logging . getLogger ( ) . setLevel ( logging . DEBUG )	Change log level dynamically to 'DEBUG' without restarting the application
'' '' ' ' '' ' ' '' ' . join ( str ( i ) for i in ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) )'	Concat each values in a tuple (34.2424, -64.2344, 76.3534, 45.2344) to get a string
'' '' ' ' '' ' ' '' ' . join ( [ s [ x : x + 2 ] [ : : -1 ] for x in range ( 0 , len ( s ) , 2 ) ] )'	swap each pair of characters in string s
plt . savefig ( <val1>   , <name2> = <val4> )	save current figure to file <val1> with resolution of <val4> <name2>
plt . savefig ( <val1>   , <name2> = <val3> )	save current figure to file <val1> with resolution of <val3> <name2>
<name2> = [ [ x for x <name1> sublist <name6> x not <name1> to_del ] for sublist <name1> <name2> ]	delete items from list <name2> <name6> the item exist <name1> list to_dell
<name1> = [ [ x for x <name2> sublist <name3> x not <name2> to_del ] for sublist <name2> <name1> ]	delete items from list <name1> <name3> the item exist <name2> list to_dell
[ item for item <name3> <name6> if 1 <name3> item ]	find all the elements that consists value '1' <name3> <name6> list of tuples 'a'
[ item for item <name1> <name2> if 1 <name1> item ]	find all the elements that consists value '1' <name1> <name2> list of tuples 'a'
[ item for item <name3> <name1> if item [ 0 ] == <val5> ]	find all elements <name3> <name1> list of tuples <name1> where the first element of each tuple equals <val5>
[ item for item <name1> <name2> if item [ 0 ] == <val3> ]	find all elements <name1> <name2> list of tuples <name2> where the first element of each tuple equals <val3>
{  p . id : {  'id'   : p . id , 'position'   : ind }   for ind , p <name5> <name4> ( <name6> ) }	Get the index value <name5> list <name6> using <name4> <name5> list comprehension
{  p . id : {  'id'   : p . id , 'position'   : ind }   for ind , p <name1> <name2> ( <name3> ) }	Get the index value <name1> list <name3> using <name2> <name1> list comprehension
exec ( compile ( open ( <val4>   ) . read ( ) , <val4>   , 'exec'   ) )	load a file <val4> into the python console
exec ( compile ( open ( <val1>   ) . read ( ) , <val1>   , 'exec'   ) )	load a file <val1> into the python console
<name1> = session . query ( <name6> ) . <name5> ( )	SQLAlchemy <name5> the number of <name1> in table <name6>
<name1> = session . query ( <name2> ) . <name3> ( )	SQLAlchemy <name3> the number of <name1> in table <name2>
dfs = pd . read_excel ( <name6> , sheetname = None )	read excel file <name6> using pandas
dfs = pd . read_excel ( <name1> , sheetname = None )	read excel file <name1> using pandas
struct . <name2> ( 'd'   , binascii . unhexlify ( <val4>   ) )	<name2> the binary data represented by the hexadecimal string <val4> to a float
struct . <name1> ( 'd'   , binascii . unhexlify ( <val2>   ) )	<name1> the binary data represented by the hexadecimal string <val2> to a float
<name2> [ tuple ( <name4> ) ]	Get index of numpy array <name2> with another numpy array <name4>
<name1> [ tuple ( <name2> ) ]	Get index of numpy array <name1> with another numpy array <name2>
map ( <name2> , permutations ( [ 2 , 3 , 4 ] ) )	find all possible sequences of elements in a <name2> [2, 3, 4]
map ( <name1> , permutations ( [ 2 , 3 , 4 ] ) )	find all possible sequences of elements in a <name1> [2, 3, 4]
<name6> ( <name5> , key = <name1> . index )	sort a list <name5> based on another <name6> list <name1>
<name1> ( <name2> , key = <name3> . index )	sort a list <name2> based on another <name1> list <name3>
<name2> = pd . DataFrame ( <val6> , index = np . arange ( len ( <name4> ) ) , columns = <name3> )	create a dataframe <name2> filled with zeros with indices from <val6> to length of <name4> and column names from <name3>
<name1> = pd . DataFrame ( <val2> , index = np . arange ( len ( <name3> ) ) , columns = <name4> )	create a dataframe <name1> filled with zeros with indices from <val2> to length of <name3> and column names from <name4>
<name4> . <name5> ( <val3>   )	<name5> the index of sub string <val3> in <name4>
<name1> . <name2> ( <val3>   )	<name2> the index of sub string <val3> in <name1>
<name1> . <name2> ( <val3>   )	<name2> the index of sub string <val3> in <name1>
<val1>   . <name4> ( <val5>   )	find the <name4> of sub string <val5> in string <val1>
<val1>   . <name2> ( <val3>   )	find the <name2> of sub string <val3> in string <val1>
<val2>   . <name5> ( <val6>   )	find the <name5> of sub string <val6> in string <val2>
<val1>   . <name2> ( <val3>   )	find the <name2> of sub string <val3> in string <val1>
<name5> . <name6> ( <val4>   )	<name6> the index of sub string <val4> in string <name5>
<name1> . <name2> ( <val3>   )	<name2> the index of sub string <val3> in string <name1>
<name2> . <name6> ( <val4>   )	<name6> the index of sub string <val4> in string <name2>
<name1> . <name2> ( <val3>   )	<name2> the index of sub string <val3> in string <name1>
<name1> . <name2> ( <val6>   , <val3> )	<name2> the index of sub string <val6> in string <name1> starting from index <val3>
<name1> . <name2> ( <val3>   , <val4> )	<name2> the index of sub string <val3> in string <name1> starting from index <val4>
<name1> . <name3> ( <val2>   , <val5> )	<name3> the index of sub string <val2> in string <name1> starting from index <val5>
<name1> . <name2> ( <val3>   , <val4> )	<name2> the index of sub string <val3> in string <name1> starting from index <val4>
<name6> . <name2> ( <val4>   , <val3> )	<name2> the index of sub string <val4> in string <name6> starting from index <val3>
<name1> . <name2> ( <val3>   , <val4> )	<name2> the index of sub string <val3> in string <name1> starting from index <val4>
<name5> . <name3> ( <val4>   , <val6> , <val1> )	<name3> the index of sub string <val4> in string <name5> starting from index <val6> and ending at index <val1>
<name1> . <name2> ( <val3>   , <val4> , <val5> )	<name2> the index of sub string <val3> in string <name1> starting from index <val4> and ending at index <val5>
sorted ( d , key = lambda x : datetime . datetime . strptime ( x , '%m-%Y'   ) )	sort list of date strings 'd'
re . split ( '\\.\\s'   , <name2> )	Get all the sentences from a string <name2> using regex
re . split ( '\\.\\s'   , <name1> )	Get all the sentences from a string <name1> using regex
'' '' ' ' <val2> ' ' '' ' [ : 4 ]'	get all characters in string <val2> up to the fourth index
'' '' ' ' <val1> ' ' '' ' [ : 4 ]'	get all characters in string <val1> up to the fourth index
s . rfind ( <val3>   )	cut a string by delimiter <val3>
s . rfind ( <val1>   )	cut a string by delimiter <val1>
s [ : s . rfind ( <val6>   ) ]	cut a string using delimiter <val6>
s [ : s . rfind ( <val1>   ) ]	cut a string using delimiter <val1>
open ( <val6>   , 'a+b'   ) . write ( <val3>   )	append to file <val6> content <val3>
open ( <val1>   , 'a+b'   ) . write ( <val2>   )	append to file <val1> content <val2>
print ( [ i for i in re . <name5> ( '([\\d.]+|\\W+)'   , <val3>   ) if i ] )	<name5> string <val3> into tokens
print ( [ i for i in re . <name1> ( '([\\d.]+|\\W+)'   , <val2>   ) if i ] )	<name1> string <val2> into tokens
re . findall ( '[\u4e00-\u9fff]+'   , <name4> )	Find all Chinese characters in string <name4>
re . findall ( '[\u4e00-\u9fff]+'   , <name1> )	Find all Chinese characters in string <name1>
s . <name2> ( <val4>   )	<name2> string <val4> by letter <val4>
s . <name1> ( <val2>   )	<name1> string <val2> by letter <val2>
subprocess . Popen ( [ 'rm'   , '-r'   , 'some.file'   ] )	run shell command 'rm -r some.file' in the background
dict ( ( d [ 'name'   ] , d ) for d in <name1> )	convert a list of dictionaries ` <name1> into a dictionary of dictionaries
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d %H:%M'   )	print current date and time in a regular format
<name5> . strftime ( '%Y-%m-%d %H:%M'   )	print current date and <name5> in a regular format
<name1> . strftime ( '%Y-%m-%d %H:%M'   )	print current date and <name1> in a regular format
re . findall ( '[bcdfghjklmnpqrstvwxyz]+'   , 'CONCERTATION'   , re . IGNORECASE )	find consecutive consonants in a word CONCENTRATION using regex
[ i for i , e <name5> enumerate ( <name3> ) if e != 0 ]	get <name3> list of indices of non zero elements <name5> <name3> list <name3>
[ i for i , e <name1> enumerate ( <name2> ) if e != 0 ]	get <name2> list of indices of non zero elements <name1> <name2> list <name2>
map ( int , re . findall ( '\\d+'   , string1 ) )	get multiple integer values from a string 'string1'
os . <name1> . dirname ( sys . <name3> )	get the <name1> of Python <name3> under windows
os . <name1> . dirname ( sys . <name2> )	get the <name1> of Python <name2> under windows
<name5> . xaxis . set_label_position ( 'top'   )	move an x - axis label to the top of a plot <name5> in matplotlib
<name1> . xaxis . set_label_position ( 'top'   )	move an x - axis label to the top of a plot <name1> in matplotlib
<name4> . xaxis . tick_top ( )	move x - axis to the top of a plot <name4>
<name1> . xaxis . tick_top ( )	move x - axis to the top of a plot <name1>
<name3> . xaxis . set_ticks_position ( 'top'   )	Move x - axis of the pyplot object <name3> to the top of a plot in matplotlib
<name1> . xaxis . set_ticks_position ( 'top'   )	Move x - axis of the pyplot object <name1> to the top of a plot in matplotlib
datetime . strptime ( <val6>   , <val3>   )	parse string <val6> to DateTime object using format <val3>
datetime . strptime ( <val1>   , <val2>   )	parse string <val1> to DateTime object using format <val2>
sys . exit ( <val4> )	terminate the script using status value <val4>
sys . exit ( <val1> )	terminate the script using status value <val1>
sys . exit ( <val1>   )	abort the execution of the script using message <val1>
sys . exit ( )	abort the execution of a python script
[ max ( abs ( x ) for x <name1> <name5> [ i : i + <val2> ] ) for i <name1> range ( 0 , len ( <name5> ) , <val2> ) ]	find maximum with lookahead = <val2> <name1> a list <name5>
[ max ( abs ( x ) for x <name1> <name2> [ i : i + <val3> ] ) for i <name1> range ( 0 , len ( <name2> ) , <val3> ) ]	find maximum with lookahead = <val3> <name1> a list <name2>
os . chdir ( <val6>   )	set the current working directory to <val6>
os . chdir ( <val1>   )	set the current working directory to <val1>
os . chdir ( <name2> )	set the current working directory to <name2> <name2>
os . chdir ( <name1> )	set the current working directory to <name1> <name1>
<name4> = [ x for x <name3> <name6> if <name2> isinstance ( x , <name5> ) ]	get a list <name4> of all the items <name3> list <name6> that are <name2> of type <name5>
<name1> = [ x for x <name2> <name3> if <name4> isinstance ( x , <name5> ) ]	get a list <name1> of all the items <name2> list <name3> that are <name4> of type <name5>
'tree . xpath ( ' './/a[text()=' Example ']' ' ) [ 0 ] . tag'	match contents of an element to 'Example' in xpath ( lxml )
'' '' ' ' <val4> ' ' '' ' . join ( [ ( str ( k ) + '   '   + str ( v ) ) for k , v in list ( a . items ( ) ) ] )'	concatenate key / value pairs in dictionary a with string <val4> into a single string
'' '' ' ' <val1> ' ' '' ' . join ( [ ( str ( k ) + '   '   + str ( v ) ) for k , v in list ( a . items ( ) ) ] )'	concatenate key / value pairs in dictionary a with string <val1> into a single string
print ( set ( re . sub ( '[\x00-\x7f]'   , ''   , <val5>   ) ) )	Strip all non - ASCII characters from a unicode string , <val5>
print ( set ( re . sub ( '[\x00-\x7f]'   , ''   , <val1>   ) ) )	Strip all non - ASCII characters from a unicode string , <val1>
print ( re . sub ( '[\x00-\x7f]'   , ''   , <val5>   ) )	Get all non - ascii characters in a unicode string <val5>
print ( re . sub ( '[\x00-\x7f]'   , ''   , <val1>   ) )	Get all non - ascii characters in a unicode string <val1>
'ast . literal_eval ( ' '{' muffin ' : ' lolz ', ' foo ' : ' kitty '}' ' )'	build a dict of key : value pairs from a string representation of a dict , '{'muffin' : 'lolz', 'foo' : 'kitty'}'
print ( <name6> . decode ( 'unicode_escape'   ) )	Print string <name6> with proper unicode representations
print ( <name1> . decode ( 'unicode_escape'   ) )	Print string <name1> with proper unicode representations
print ( <name1> . encode ( <val2>   ) . decode ( <val4>   ) . encode ( <val2>   ) . decode ( <val4>   ) )	Normalize string <name1> from <val2> code to <val4> code
print ( <name1> . encode ( <val2>   ) . decode ( <val3>   ) . encode ( <val2>   ) . decode ( <val3>   ) )	Normalize string <name1> from <val2> code to <val3> code
zip ( <name3> , <name2> )	merge lists <name3> and <name2> into a list of tuples
zip ( <name1> , <name2> )	merge lists <name1> and <name2> into a list of tuples
<name1> ( zip ( <name4> , b ) )	merge lists <name4> and <name4> into <name4> <name1> of tuples
<name1> ( zip ( <name2> , b ) )	merge lists <name2> and <name2> into <name2> <name1> of tuples
<name5> . set_index ( <val3>   ) . to_dict ( )	convert pandas DataFrame <name5> to a dictionary using <val3> field as the key
<name1> . set_index ( <val2>   ) . to_dict ( )	convert pandas DataFrame <name1> to a dictionary using <val2> field as the key
<name4> . set_index ( <val6>   ) [ <val2>   ] . to_dict ( )	convert pandas dataframe <name4> with fields <val6> , <val2> to dictionary
<name1> . set_index ( <val2>   ) [ <val3>   ] . to_dict ( )	convert pandas dataframe <name1> with fields <val2> , <val3> to dictionary
re . sub ( '\\([^)]*\\)'   , ''   , <name5> )	remove parentheses and text within it in string <name5>
re . sub ( '\\([^)]*\\)'   , ''   , <name1> )	remove parentheses and text within it in string <name1>
'' '' ' ' <val3> ' ' '' ' . replace ( '   ' , ' ' ) . isalpha ( )'	Check if string <val3> only contains letters and spaces
'' '' ' ' <val1> ' ' '' ' . replace ( '   ' , ' ' ) . isalpha ( )'	Check if string <val1> only contains letters and spaces
[ ( <name2> + <name5> ) for <name2> , <name5> <name3> zip ( <name6> , <name1> ) ]	sum each element <name2> <name3> list <name6> with element <name5> at the same index <name3> list <name1> .
[ ( <name1> + <name2> ) for <name1> , <name2> <name3> zip ( <name4> , <name5> ) ]	sum each element <name1> <name3> list <name4> with element <name2> at the same index <name3> list <name5> .
sorted ( list ( <name3> . items ( ) ) , key = lambda item : item [ <val5> ] [ <val5> ] )	sort a python dictionary <name3> by element <val5> of the value
sorted ( list ( <name1> . items ( ) ) , key = lambda item : item [ <val2> ] [ <val2> ] )	sort a python dictionary <name1> by element <val2> of the value
sorted ( <name4> ( range ( len ( <name3> ) ) ) , key = lambda i : <name3> [ i ] ) [ -2 : ]	get index of the biggest 2 values of <name3> <name4> <name3>
sorted ( <name1> ( range ( len ( <name2> ) ) ) , key = lambda i : <name2> [ i ] ) [ -2 : ]	get index of the biggest 2 values of <name2> <name1> <name2>
zip ( * sorted ( enumerate ( <name1> ) , key = operator . <name5> ( 1 ) ) ) [ 0 ] [ -2 : ]	get indexes of the largest 2 values from <name1> list <name1> using <name5>
zip ( * sorted ( enumerate ( <name1> ) , key = operator . <name2> ( 1 ) ) ) [ 0 ] [ -2 : ]	get indexes of the largest 2 values from <name1> list <name1> using <name2>
sorted ( <name1> ( range ( len ( <name5> ) ) ) , key = lambda i : <name5> [ i ] , reverse = True ) [ : <val2> ]	get the indexes of the largest <val2> values from <name5> <name1> of integers <name5>
sorted ( <name1> ( range ( len ( <name2> ) ) ) , key = lambda i : <name2> [ i ] , reverse = True ) [ : <val3> ]	get the indexes of the largest <val3> values from <name2> <name1> of integers <name2>
list ( <name1> . keys ( ) ) . <name2> ( <val4>   )	get <name2> of key <val4> in dictionary <name1>
list ( <name1> . keys ( ) ) . <name2> ( <val3>   )	get <name2> of key <val3> in dictionary <name1>
print ( <val1>   . <name5> ( score ) )	Print + 1 using <name5> <val1>
print ( <val1>   . <name2> ( score ) )	Print + 1 using <name2> <val1>
[ k for k , g in itertools . groupby ( [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] ) ]	remove adjacent duplicate elements from a list [1, 2, 2, 3, 2, 2, 4]
[ int ( x ) for x in <val4>   . split ( ','   ) ]	convert the string <val4> to a list of integers
[ int ( x ) for x in <val1>   . split ( ','   ) ]	convert the string <val1> to a list of integers
dict ( [ ( 'A'   , 1 ) , ( 'B'   , 2 ) , ( 'C'   , 3 ) ] )	convert list of key - value tuples [('A', 1), ('B', 2), ('C', 3)] into dictionary
np . savetxt ( <val2>   , <name6> )	save numpy array <name6> into text file <val2>
np . savetxt ( <val1>   , <name2> )	save numpy array <name2> into text file <val1>
<name6> = subprocess . check_output ( <val2>   , shell = True )	store the output of command <val2> in variable <name6>
<name1> = subprocess . check_output ( <val2>   , shell = True )	store the output of command <val2> in variable <name1>
<name6> [ <name6> . columns - [ <val3>   ] ]	get all column name of dataframe <name6> except for column <val3>
<name1> [ <name1> . columns - [ <val2>   ] ]	get all column name of dataframe <name1> except for column <val2>
( ( <val4> <   <name2> ) &   ( <name2> <   <val5> ) ) . sum ( )	get count of values in numpy array <name2> that are between values <val4> and <val5>
( ( <val1> <   <name2> ) &   ( <name2> <   <val3> ) ) . sum ( )	get count of values in numpy array <name2> that are between values <val1> and <val3>
date . today ( ) . strftime ( '%A'   )	Get day name from a datetime object
{{  car . date_of_manufacture |   <name5> }}	Jinja parse <name5> object car.date_of_manufacture to use format pattern <name5>
{{  car . date_of_manufacture |   <name1> }}	Jinja parse <name1> object car.date_of_manufacture to use format pattern <name1>
{{  <name3> . <name6> . strftime ( <val4>   ) }}	Get the date object <name6> of object <name3> in string format <val4>
{{  <name1> . <name2> . strftime ( <val3>   ) }}	Get the date object <name2> of object <name1> in string format <val3>
[ item for <name4> in l for item in <name4> ]	make a flat list from list of lists <name4>
[ item for <name1> in l for item in <name1> ]	make a flat list from list of lists <name1>
<name1> ( itertools . chain ( * <name2> ) )	make a flat <name1> from <name1> of lists <name2>
<name1> ( itertools . chain . from_iterable ( <name2> ) )	make a flat <name1> from <name1> of lists <name2>
ord ( <val3>   )	convert ascii value <val3> to int
ord ( <val1>   )	convert ascii value <val1> to int
re . sub ( '(?m)^[^\\S\\n]+'   , <val5>   , <val6>   )	replace white spaces in string <val6> with empty string <val5>
re . sub ( '(?m)^[^\\S\\n]+'   , <val1>   , <val2>   )	replace white spaces in string <val2> with empty string <val1>
re . sub ( '(?m)^\\s+'   , ''   , <val4>   )	remove white spaces from all the lines using a regular expression in string <val4>
re . sub ( '(?m)^\\s+'   , ''   , <val1>   )	remove white spaces from all the lines using a regular expression in string <val1>
<name2> , <name1> , <name4> = [ 1 , 2 , 3 ]	destruct elements of list [1, 2, 3] to variables <name2> , <name1> and <name4>
<name1> , <name2> , <name3> = [ 1 , 2 , 3 ]	destruct elements of list [1, 2, 3] to variables <name1> , <name2> and <name3>
[ <name5> ( v ) for k , v in itertools . groupby ( <name2> , key = lambda x : x [ : 5 ] ) ]	split <name5> <name2> into a <name5> of lists whose elements have the same first five characters
[ <name1> ( v ) for k , v in itertools . groupby ( <name2> , key = lambda x : x [ : 5 ] ) ]	split <name1> <name2> into a <name1> of lists whose elements have the same first five characters
<name3> = re . sub ( '\\(+as .*?\\) '   , ''   , <name3> )	remove all instances of parenthesesis containing text beginning with as  from string <name3>
<name1> = re . sub ( '\\(+as .*?\\) '   , ''   , <name1> )	remove all instances of parenthesesis containing text beginning with as  from string <name1>
print ( <name6> . rstrip ( '\n'   ) )	skip the newline while printing <name6>
print ( <name1> . rstrip ( '\n'   ) )	skip the newline while printing <name1>
<name1> . <name4> . <name3> . tolist ( )	get <name4> <name3> of pandas dataframe <name1> as list
<name1> . <name2> . <name3> . tolist ( )	get <name2> <name3> of pandas dataframe <name1> as list
[ i for i , v <name3> enumerate ( <name4> ) if v >   <val6> ]	create <name4> list containing the indices of elements greater than <val6> <name3> list <name4>
[ i for i , v <name1> enumerate ( <name2> ) if v >   <val3> ]	create <name2> list containing the indices of elements greater than <val3> <name1> list <name2>
sorted ( <name4> , <name6> = True )	<name6> list <name4>
sorted ( <name1> , <name2> = True )	<name2> list <name1>
sorted ( <name1> , key = lambda d : d . get ( 'key'   , {}  ) . get ( 'subkey'   ) , <name5> = True )	sort list of nested dictionaries <name1> in <name5> based on values associated with each dictionary 's key ' subkey '
sorted ( <name1> , key = lambda d : d . get ( 'key'   , {}  ) . get ( 'subkey'   ) , <name2> = True )	sort list of nested dictionaries <name1> in <name2> based on values associated with each dictionary 's key ' subkey '
<name4> . <name1> ( key = lambda e : e [ <val2>   ] [ <val6>   ] , <name3> = True )	<name1> list of nested dictionaries <name4> in <name3> order of <val2> and <val6>
<name1> . <name2> ( key = lambda e : e [ <val3>   ] [ <val4>   ] , <name5> = True )	<name2> list of nested dictionaries <name1> in <name5> order of <val3> and <val4>
df . <name3> ( )	remove decimal points in pandas data frame using <name3>
df . <name1> ( )	remove decimal points in pandas data frame using <name1>
gca ( ) . get_lines ( ) [ n ] . get_xydata ( )	Get data from matplotlib plot
<name5> [ : , -2 : ]	get the maximum 2 values per row in array <name5>
<name1> [ : , -2 : ]	get the maximum 2 values per row in array <name1>
request . GET . get ( <val1>   , ''   )	'Get value for  ' <val1> ' parameter in GET request  in Django'
pprint ( dict ( list ( <name6> . items ( ) ) ) )	pretty - print ordered dictionary <name6>
pprint ( dict ( list ( <name1> . items ( ) ) ) )	pretty - print ordered dictionary <name1>
url ( '^$'   , include ( 'sms.urls'   ) ) ,	Confirm urls in Django properly
<name4> ( '^'   , include ( 'sms.urls'   ) ) ,	Configure <name4> in django properly
<name1> ( '^'   , include ( 'sms.urls'   ) ) ,	Configure <name1> in django properly
max_item = max ( <name4> , key = operator . itemgetter ( 1 ) )	get the tuple in list <name4> that has the largest item in the second index
max_item = max ( <name1> , key = operator . itemgetter ( 1 ) )	get the tuple in list <name1> that has the largest item in the second index
max ( <name2> , key = operator . itemgetter ( 1 ) )	find tuple in list of tuples <name2> with the largest second element
max ( <name1> , key = operator . itemgetter ( 1 ) )	find tuple in list of tuples <name1> with the largest second element
<name2> . <name5> ( '3M'   , how = 'sum'   )	<name5> series <name2> into 3 months bins and sum each bin
<name1> . <name2> ( '3M'   , how = 'sum'   )	<name2> series <name1> into 3 months bins and sum each bin
[ <name1> [ i ] for i in ( <val3> , <val6> , <val2> ) ]	extract elements at indices ( <val3> , <val6> , <val2> ) from <name1> list <name1>
[ <name1> [ i ] for i in ( <val2> , <val3> , <val4> ) ]	extract elements at indices ( <val2> , <val3> , <val4> ) from <name1> list <name1>
[ line for line in open ( <val5>   ) if <val6>     in line ]	filter lines from a text file <val5> which contain a word <val6>
[ line for line in open ( <val1>   ) if <val2>     in line ]	filter lines from a text file <val1> which contain a word <val2>
<name3> . <name3> . strptime ( <name2> , '%Y-%m-%dT%H:%M:%SZ'   )	convert a date string <name2> to a <name3> object
<name1> . <name1> . strptime ( <name2> , '%Y-%m-%dT%H:%M:%SZ'   )	convert a date string <name2> to a <name1> object
<name2> . read_csv ( <name6> , sep = '\t'   , lineterminator = '\r'   )	reading tab - delimited csv file <name6> with <name2> on mac
<name1> . read_csv ( <name2> , sep = '\t'   , lineterminator = '\r'   )	reading tab - delimited csv file <name2> with <name1> on mac
<val1>   . <name2> ( <val4>   , '?'   , 1 )	<name2> only first occurence of string <val4> from a string <val1>
<val1>   . <name2> ( <val3>   , '?'   , 1 )	<name2> only first occurence of string <val3> from a string <val1>
archive . write ( <name4> , os . path . <name3> ( <name4> ) )	zip file <name4> using its <name3> as directory name
archive . write ( <name1> , os . path . <name2> ( <name1> ) )	zip file <name1> using its <name2> as directory name
dict ( x [ 1 : ] for x in reversed ( <name1> ) )	create a dictionary of pairs from a list of tuples <name1>
[ ( x1 - x2 ) for x1 , x2 in zip ( <name1> , <name3> ) ]	subtract elements of list <name1> from elements of list <name3>
[ ( x1 - x2 ) for x1 , x2 in zip ( <name1> , <name2> ) ]	subtract elements of list <name1> from elements of list <name2>
<name2> [ 0 ] . isdigit ( )	check if <name2> <name2> starts with a number
<name1> [ 0 ] . isdigit ( )	check if <name1> <name1> starts with a number
<name3> . startswith ( ( <val6>   , <val2>   , <val5>   , <val1>   , <val4>   , <val3>   , <val6>   , <val2>   , <val5>   , <val1>   ) )	Check if string <name3> starts with any of the elements in list ( <val6> , <val2> , <val5> , <val1> , <val4> , <val3> , <val6> , <val2> , <val5> , <val1> )
<name1> . startswith ( ( <val2>   , <val3>   , <val4>   , <val5>   , <val6>   , <val1>   , <val2>   , <val3>   , <val4>   , <val5>   ) )	Check if string <name1> starts with any of the elements in list ( <val2> , <val3> , <val4> , <val5> , <val6> , <val1> , <val2> , <val3> , <val4> , <val5> )
<name4> ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	<name4> script ' s directory
<name1> ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	<name1> script ' s directory
re . <name2> ( <val5>   , <name3> )	<name2> string <name3> by the occurrences of regex pattern <val5>
re . <name1> ( <val2>   , <name3> )	<name1> string <name3> by the occurrences of regex pattern <val2>
plt . <name5> ( * zip ( * <name6> ) )	Make a <name5> plot using unpacked values of list <name6>
plt . <name1> ( * zip ( * <name2> ) )	Make a <name1> plot using unpacked values of list <name2>
<name3> ( zip ( * <name5> ) )	rearrange <name3> of tuples <name5>
<name1> ( zip ( * <name2> ) )	rearrange <name1> of tuples <name2>
<name3> . groupby ( np . arange ( len ( <name3> . <name6> ) ) // 3 , axis = 1 ) . mean ( )	Get average for every three <name6> in <name3> dataframe
<name1> . groupby ( np . arange ( len ( <name1> . <name2> ) ) // 3 , axis = 1 ) . mean ( )	Get average for every three <name2> in <name1> dataframe
'' '' ' ' '' ' ' '' ' . join ( chr ( i ) for i in L )'	convert a list L of ascii values to a string
sum ( x == <name6> for x <name2> list ( <name1> . values ( ) ) )	count the number of pairs <name2> dictionary <name1> whose value equal to <name6>
sum ( x == <name1> for x <name2> list ( <name3> . values ( ) ) )	count the number of pairs <name2> dictionary <name3> whose value equal to <name1>
sum ( 1 for x <name6> list ( <name5> . <name3> ( ) ) if <name4> ( x ) )	count the number of <name3> <name6> <name5> dictionary that are predicate to function <name4>
sum ( 1 for x <name1> list ( <name2> . <name3> ( ) ) if <name4> ( x ) )	count the number of <name3> <name1> <name2> dictionary that are predicate to function <name4>
struct . unpack ( 'f'   , struct . pack ( 'f'   , <val3> ) )	convert double <val3> to float
struct . unpack ( 'f'   , struct . pack ( 'f'   , <val1> ) )	convert double <val1> to float
<name5> = ( <name2> - <name1> ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <name1> .date <name2> to utc <name5>
<name1> = ( <name2> - <name3> ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <name3> .date <name2> to utc <name1>
<name6> . <name4> ( <val3>   )	<name4> column <val3> in panda dataframe <name6>
<name1> . <name2> ( <val3>   )	<name2> column <val3> in panda dataframe <name1>
<name4> = sorted ( <name4> , key = <name1> x : x . <name6> , reverse = True )	Sort <name4> data <name4> in descending order based on the <name6> attribute of elements using <name1> function
<name1> = sorted ( <name1> , key = <name2> x : x . <name3> , reverse = True )	Sort <name1> data <name1> in descending order based on the <name3> attribute of elements using <name2> function
<name3> ( bool ( <name4> ) )	<name3> the truth value of <name4>
<name1> ( bool ( <name2> ) )	<name1> the truth value of <name2>
<name6> = <name6> . <name2> ( <name4> = {  <name5> : <val1>  }  )	<name2> <name5> row <name4> label in dataframe <name6> to <val1>
<name1> = <name1> . <name2> ( <name3> = {  <name4> : <val5>  }  )	<name2> <name4> row <name3> label in dataframe <name1> to <val5>
km . fit ( <name2> . reshape ( -1 , 1 ) )	Fit Kmeans function to a one - dimensional array <name2> by reshaping it to be a multidimensional array of single values
km . fit ( <name1> . reshape ( -1 , 1 ) )	Fit Kmeans function to a one - dimensional array <name1> by reshaping it to be a multidimensional array of single values
sorted ( words , key = lambda x : 'a'     + x if x . startswith ( <val5>   ) else 'b'     + x )	Sort a list of strings 'words' such that items starting with <val5> come first .
sorted ( words , key = lambda x : 'a'     + x if x . startswith ( <val1>   ) else 'b'     + x )	Sort a list of strings 'words' such that items starting with <val1> come first .
webbrowser . <name5> ( <val6>   )	<name5> the login site <val6> in the browser
webbrowser . <name1> ( <val2>   )	<name1> the login site <val2> in the browser
dict ( ( k , v ) for k , v <name5> <name6> . items ( ) if <val2> <   k <   <val4> )	fetch all elements <name5> a dictionary <name6> , falling between two keys <val2> and <val4>
dict ( ( k , v ) for k , v <name1> <name2> . items ( ) if <val3> <   k <   <val4> )	fetch all elements <name1> a dictionary <name2> , falling between two keys <val3> and <val4>
dict ( ( k , v ) for k , v <name6> parent_dict . items ( ) if k >   <val3> and k <   <val5> )	fetch all elements <name6> a dictionary 'parent_dict' where the key is between the range of <val3> to <val5>
dict ( ( k , v ) for k , v <name1> parent_dict . items ( ) if k >   <val2> and k <   <val3> )	fetch all elements <name1> a dictionary 'parent_dict' where the key is between the range of <val2> to <val3>
[ list ( x ) for x in zip ( * sorted ( zip ( <name6> , <name3> ) , key = <name1> pair : pair [ 0 ] ) ) ]	sort two lists <name6> and <name3> together using <name1> function
[ list ( x ) for x in zip ( * sorted ( zip ( <name1> , <name2> ) , key = <name3> pair : pair [ 0 ] ) ) ]	sort two lists <name1> and <name2> together using <name3> function
sum ( ( ( i >   <val5> ) for i <name3> <name4> ) )	get the number of values <name3> list <name4> that is greater than <val5>
sum ( ( ( i >   <val1> ) for i <name2> <name3> ) )	get the number of values <name2> list <name3> that is greater than <val1>
len ( [ 1 for i <name2> <name5> if ( i >   <val6> ) ] )	get the number of values <name2> list <name5> that is greater than <val6>
len ( [ 1 for i <name1> <name2> if ( i >   <val3> ) ] )	get the number of values <name1> list <name2> that is greater than <val3>
[ ( x + tuple ( y ) ) for x , y in <name5> ( <name5> ( <name4> , <name2> ) , <name3> ) ]	<name5> list <name4> , <name2> , <name3> into <name4> list of tuples
[ ( x + tuple ( y ) ) for x , y in <name1> ( <name1> ( <name2> , <name3> ) , <name4> ) ]	<name1> list <name2> , <name3> , <name4> into <name2> list of tuples
os . chmod ( <name2> , stat . S_IRUSR |   stat . S_IRGRP |   stat . S_IROTH )	changing permission of file <name2> to stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
os . chmod ( <name1> , stat . S_IRUSR |   stat . S_IRGRP |   stat . S_IROTH )	changing permission of file <name1> to stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
parser . add_argument ( <val1>   , nargs = '*'   )	argparse associate zero or more arguments with flag <val1>
<name6> = [ ( i == j ) for i , j <name4> zip ( <name2> , <name5> ) ]	get a list of booleans <name6> that shows wether the corresponding items <name4> list <name2> and <name5> are equal
<name1> = [ ( i == j ) for i , j <name2> zip ( <name3> , <name4> ) ]	get a list of booleans <name1> that shows wether the corresponding items <name2> list <name3> and <name4> are equal
[ ( <name2> [ i ] == <name4> [ i ] ) for i <name6> range ( len ( <name2> ) ) ]	create a list which indicates whether each element <name6> <name2> and <name4> is identical
[ ( <name1> [ i ] == <name2> [ i ] ) for i <name3> range ( len ( <name1> ) ) ]	create a list which indicates whether each element <name3> <name1> and <name2> is identical
<name1> = pd . DataFrame ( <name4> = <name6> . <name4> )	create an empty data frame <name1> with <name4> from another data frame <name6>
<name1> = pd . DataFrame ( <name2> = <name3> . <name2> )	create an empty data frame <name1> with <name2> from another data frame <name3>
struct . <name5> ( 'h'   , <name6> [ 0 : 2 ] )	<name5> first and second bytes of byte string <name6> into integer
struct . <name1> ( 'h'   , <name2> [ 0 : 2 ] )	<name1> first and second bytes of byte string <name2> into integer
<name3> ( '\n'   . join ( '  '   . join ( map ( str , row ) ) for row in <name5> ) )	<name3> list <name5> into a table - like shape
<name1> ( '\n'   . join ( '  '   . join ( map ( str , row ) ) for row in <name2> ) )	<name1> list <name2> into a table - like shape
driver . find_element_by_name ( '<check_box_name>'   ) . is_selected ( )	check if a checkbox is checked in selenium python webdriver
driver . find_element_by_id ( <val6>   ) . is_selected ( )	determine if checkbox with id <val6> is checked in selenium python webdriver
driver . find_element_by_id ( <val1>   ) . is_selected ( )	determine if checkbox with id <val1> is checked in selenium python webdriver
[ ( a if a else <val3> ) for a <name1> [ <val2> , 1 , <val2> , 3 ] ]	replace <val2> with <val3> <name1> the list [0, 1, 0, 3]
[ ( a if a else <val1> ) for a <name2> [ <val3> , 1 , <val3> , 3 ] ]	replace <val3> with <val1> <name2> the list [0, 1, 0, 3]
<val4>   . encode ( ) . decode ( 'unicode-escape'   )	Produce a string that is suitable as Unicode literal from string <val4>
<val1>   . encode ( ) . decode ( 'unicode-escape'   )	Produce a string that is suitable as Unicode literal from string <val1>
<val2>   . decode ( 'unicode-escape'   )	Parse a unicode string <val2>
<val1>   . decode ( 'unicode-escape'   )	Parse a unicode string <val1>
chr ( int ( 'fd9b'   , 16 ) ) . encode ( 'utf-8'   )	convert Unicode codepoint to utf8 hex
<name4> ( '0x%X'     % <name6> )	use upper case letters to <name4> hex <name6> <name6>
<name1> ( '0x%X'     % <name2> )	use upper case letters to <name1> hex <name2> <name2>
<name4> = [ x for x <name5> <name6> if x ]	get a list <name4> that contains all non - empty elements <name5> list <name6>
<name1> = [ x for x <name2> <name3> if x ]	get a list <name1> that contains all non - empty elements <name2> list <name3>
<name6> ( * [ ( int ( i . strip ( ) ) if i else None ) for i in <name2> . split ( ':'   ) ] )	create a <name6> object using string <name2>
<name1> ( * [ ( int ( i . strip ( ) ) if i else None ) for i in <name2> . split ( ':'   ) ] )	create a <name1> object using string <name2>
<name5> . find_all ( [ <val2>   , <val6>   ] )	Find all the tags <val2> and <val6> from Beautiful Soup object <name5>
<name1> . find_all ( [ <val2>   , <val3>   ] )	Find all the tags <val2> and <val3> from Beautiful Soup object <name1>
print ( <name4> . __name__ )	get the name of function <name4> as a string
print ( <name1> . __name__ )	get the name of function <name1> as a string
'' '' ' ' '' ' ' '' ' . join ( ' {}{} ' . format ( key , val ) for key , val in sorted ( adict . items ( ) ) )'	convert dictionary adict into string
'' '' ' ' '' ' ' '' ' . join ( ' {}{} ' . format ( key , val ) for key , val in list ( adict . items ( ) ) )'	convert dictionary adict into string
<name2> = <name1> [ : ]	copy list <name1> as <name2>
<name1> = <name2> [ : ]	copy list <name2> as <name1>
<name4> = <name5> ( <name6> )	copy <name5> <name6> as <name4>
<name1> = <name2> ( <name3> )	copy <name2> <name3> as <name1>
<name4> = <name1> . <name1> ( <name5> )	<name1> list <name5> as <name4>
<name1> = <name2> . <name2> ( <name3> )	<name2> list <name3> as <name1>
<name2> = <name4> . deepcopy ( <name1> )	deep <name4> list <name1> as <name2>
<name1> = <name2> . deepcopy ( <name3> )	deep <name2> list <name3> as <name1>
[ i for i in <name2> ]	make a copy of list <name2>
[ i for i in <name1> ]	make a copy of list <name1>
<name2> . <name3> ( frameon = False )	remove frame of <name3> in plot <name2>
<name1> . <name2> ( frameon = False )	remove frame of <name2> in plot <name1>
'' '' ' ' <val2> ' ' '' ' . encode ( ' utf -16 ' , ' surrogatepass ' ) . decode ( ' utf -16 ' )'	Print a emoji from a string <val2> having surrogate pairs
'' '' ' ' <val1> ' ' '' ' . encode ( ' utf -16 ' , ' surrogatepass ' ) . decode ( ' utf -16 ' )'	Print a emoji from a string <val1> having surrogate pairs
globals ( ) [ <val4>   ] ( )	calling a function named <val4> in the module
globals ( ) [ <val1>   ] ( )	calling a function named <val1> in the module
urllib . request . urlopen ( <val2>   ) . getcode ( )	'Check the status code of url ' <val2> ''
urllib . request . urlopen ( <val1>   ) . getcode ( )	'Check the status code of url ' <val1> ''
print ( urllib . request . urlopen ( <val5>   ) . getcode ( ) )	'Checking if website ' <val5> ' is up'
print ( urllib . request . urlopen ( <val1>   ) . getcode ( ) )	'Checking if website ' <val1> ' is up'
'driver . find_element_by_css_selector ( ' <val2> <name6> <val3> ' ) . click ( )'	'Selenium `driver` click a hyperlink with the pattern ' <val2> <name6> <val3> ''
'driver . find_element_by_css_selector ( ' <val1> <name2> <val3> ' ) . click ( )'	'Selenium `driver` click a hyperlink with the pattern ' <val1> <name2> <val3> ''
<name1> . to_pickle ( <name6> )	store data frame <name1> to file <name6> using pandas , python
<name1> . to_pickle ( <name2> )	store data frame <name1> to file <name2> using pandas , python
<name1> . groupby ( by = <name1> . <name2> , axis = 1 ) . <name4> ( )	calculate the <name4> of <name2> with same name in dataframe <name1>
<name1> . groupby ( by = <name1> . <name2> , axis = 1 ) . <name3> ( )	calculate the <name3> of <name2> with same name in dataframe <name1>
<name1> . <name3> ( key = lambda x : ( x . <name4> , x . <name5> ) , <name2> = True )	<name3> list <name1> by each element ' s attribute <name4> and attribute <name5> in <name2> order
<name1> . <name2> ( key = lambda x : ( x . <name3> , x . <name4> ) , <name5> = True )	<name2> list <name1> by each element ' s attribute <name3> and attribute <name4> in <name5> order
<name5> = <name1> . split ( ) [ -1 ]	get <name5> value <name5> of a png image <name1>
<name1> = <name2> . split ( ) [ -1 ]	get <name1> value <name1> of a png image <name2>
<name2> . findAll ( <val5>   , style = <val3>   )	BeautifulSoup find tag <val5> with styling <val3> in HTML string <name2>
<name1> . findAll ( <val2>   , style = <val3>   )	BeautifulSoup find tag <val2> with styling <val3> in HTML string <name1>
cursor . execute ( <name1> , list ( <name5> . <name4> ( ) ) )	Execute SQL statement <name1> with <name4> of dictionary <name5> as parameters
cursor . execute ( <name1> , list ( <name2> . <name3> ( ) ) )	Execute SQL statement <name1> with <name3> of dictionary <name2> as parameters
df . to_csv ( <val2>   , index = False , sep = <val5>   )	Convert CSV file <val2> to Pandas dataframe using separator <val5>
df . to_csv ( <val1>   , index = False , sep = <val2>   )	Convert CSV file <val1> to Pandas dataframe using separator <val2>
globals ( ) . <name1> ( vars ( args ) )	<name1> the globals() dictionary with the contents of the vars(args) dictionary
re . findall ( '\\[(.*?)\\]'   , <name6> )	find all substrings in <name6> beginning and ending with square brackets
re . findall ( '\\[(.*?)\\]'   , <name1> )	find all substrings in <name1> beginning and ending with square brackets
<name4> ( '%.2f kg = %.2f lb = %.2f gal = %.2f l'     % ( <name5> , <name3> , <name2> , var4 ) )	Format all floating variables <name5> , <name3> , <name2> , <name5> to <name4> to two decimal places .
<name1> ( '%.2f kg = %.2f lb = %.2f gal = %.2f l'     % ( <name2> , <name3> , <name4> , var4 ) )	Format all floating variables <name2> , <name3> , <name4> , <name2> to <name1> to two decimal places .
<name1> = dict ( ( k , v ) for k , v in <name1> . <name3> ( ) if v >   0 )	Remove all <name3> from a dictionary <name1> where the values are less than 1
<name1> = dict ( ( k , v ) for k , v in <name1> . <name2> ( ) if v >   0 )	Remove all <name2> from a dictionary <name1> where the values are less than 1
<name1> = {  k : v for k , v in list ( <name1> . <name4> ( ) ) if v >   <val2> }	Filter dictionary <name1> to have <name4> with value greater than <val2>
<name1> = {  k : v for k , v in list ( <name1> . <name2> ( ) ) if v >   <val3> }	Filter dictionary <name1> to have <name2> with value greater than <val3>
pd . to_datetime ( pd . Series ( date_stngs ) )	convert a string of date strings date_stngs  to datetime objects and put them in a dataframe
<name3> . iloc [ 2 , 0 ]	get value at index [2, 0] in dataframe <name3>
<name1> . iloc [ 2 , 0 ]	get value at index [2, 0] in dataframe <name1>
<name5> . rcParams . update ( {  'font.size'   : <val1> }  )	change the font size on plot <name5> to <val1>
<name1> . rcParams . update ( {  'font.size'   : <val2> }  )	change the font size on plot <name1> to <val2>
<name3> . DataFrame ( list ( <name1> . items ( ) ) , columns = [ <val2>   , <val5>   ] )	converting dictionary <name1> into a dataframe <name3> with keys as data for column <val2> and the corresponding values as data for column <val5>
<name1> . DataFrame ( list ( <name2> . items ( ) ) , columns = [ <val3>   , <val4>   ] )	converting dictionary <name2> into a dataframe <name1> with keys as data for column <val3> and the corresponding values as data for column <val4>
pd . DataFrame ( <name2> . values * <name5> . values , columns = <name2> . columns , <name4> = <name2> . <name4> )	create a dataframe containing the multiplication of element - wise in dataframe <name2> and dataframe <name5> using <name4> name and column labels of dataframe <name2>
pd . DataFrame ( <name1> . values * <name2> . values , columns = <name1> . columns , <name3> = <name1> . <name3> )	create a dataframe containing the multiplication of element - wise in dataframe <name1> and dataframe <name2> using <name3> name and column labels of dataframe <name1>
re . findall ( '\\d+\\.\\d+'   , <val4>   )	extract floating number from string <val4>
re . findall ( '\\d+\\.\\d+'   , <val1>   )	extract floating number from string <val1>
re . findall ( '[-+]?\\d*\\.\\d+|\\d+'   , <val6>   )	extract floating point numbers from a string <val6>
re . findall ( '[-+]?\\d*\\.\\d+|\\d+'   , <val1>   )	extract floating point numbers from a string <val1>
zip ( <name4> , <name4> , <name4> )	pair each element in list <name4> 3 times into a tuple
zip ( <name1> , <name1> , <name1> )	pair each element in list <name1> 3 times into a tuple
<name3> [ <val6>   ] . str . lower ( )	lowercase a python dataframe string in column <val6> if it has missing values in dataframe <name3>
<name1> [ <val2>   ] . str . lower ( )	lowercase a python dataframe string in column <val2> if it has missing values in dataframe <name1>
jsobj [ 'a'   ] [ 'b'   ] [ <val1>   ] . <name5> ( {  'f'   : var6 , 'g'   : var7 , 'h'   : var8 }  )	<name5> dict {'f': var6, 'g': var7, 'h': var8} to value of key <val1> in dict jsobj['a']['b']
jsobj [ 'a'   ] [ 'b'   ] [ <val1>   ] . <name2> ( {  'f'   : var6 , 'g'   : var7 , 'h'   : var8 }  )	<name2> dict {'f': var6, 'g': var7, 'h': var8} to value of key <val1> in dict jsobj['a']['b']
'' '' ' ' '' ' ' '' ' . join ( lst )'	Concat a list of strings lst using string formatting
<name4> ( v for v <name1> list ( <name3> . <name5> ( ) ) if v >   <val2> )	<name4> <name5> greater than <val2> <name1> dictionary <name3>
<name1> ( v for v <name2> list ( <name3> . <name4> ( ) ) if v >   <val5> )	<name1> <name4> greater than <val5> <name2> dictionary <name3>
<name4> . <name2> ( <name1> = True )	<name2> flask application <name4> in <name1> mode .
<name1> . <name2> ( <name3> = True )	<name2> flask application <name1> in <name3> mode .
<name5> . <name1> ( <name5> . <name4> [ [ 1 , 3 ] ] , inplace = True )	<name1> rows whose <name4> value in list [1, 3] in dataframe <name5>
<name1> . <name2> ( <name1> . <name3> [ [ 1 , 3 ] ] , inplace = True )	<name2> rows whose <name3> value in list [1, 3] in dataframe <name1>
df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )	replace nan values in a pandas data frame with the average of columns
[ o . <name2> for o <name1> <name3> ]	extract attribute <name2> from each object <name1> list <name3>
[ o . <name1> for o <name2> <name3> ]	extract attribute <name1> from each object <name2> list <name3>
<name2> . strftime ( <val6>   , <name2> . gmtime ( os . path . getmtime ( <name3> ) ) )	python get <name2> stamp on <name3> <name3> in <val6> format
<name1> . strftime ( <val2>   , <name1> . gmtime ( os . path . getmtime ( <name3> ) ) )	python get <name1> stamp on <name3> <name3> in <val2> format
all ( item in list ( <name2> . items ( ) ) for item in list ( <name6> . items ( ) ) )	check if dictionary <name6> is a <name6> of dictionary <name2>
all ( item in list ( <name1> . items ( ) ) for item in list ( <name2> . items ( ) ) )	check if dictionary <name2> is a <name2> of dictionary <name1>
[ str ( wi ) for wi <name4> <name2> ]	Convert integer elements <name4> list <name2> to strings
[ str ( wi ) for wi <name1> <name2> ]	Convert integer elements <name1> list <name2> to strings
df2 = df . reset_index ( )	Reset the indexes of a pandas data frame
<name4> . strftime ( '%m/%d/%Y'   )	format datetime in <name4> as string in format '%m/%d/%Y
<name1> . strftime ( '%m/%d/%Y'   )	format datetime in <name1> as string in format '%m/%d/%Y
print ( 'Total cost is: ${:,.2f}'   . <name2> ( <name5> ) )	<name2> floating point number <name5> to be rounded off to two decimal places and have a comma thousands '  seperator
print ( 'Total cost is: ${:,.2f}'   . <name1> ( <name2> ) )	<name1> floating point number <name2> to be rounded off to two decimal places and have a comma thousands '  seperator
<name1> . groupby ( np . arange ( len ( <name1> . <name3> ) ) // 2 + 1 , axis = 1 ) . <name4> ( ) . add_prefix ( 's'   )	<name4> the values in each row of every two adjacent <name3> in dataframe <name1>
<name1> . groupby ( np . arange ( len ( <name1> . <name2> ) ) // 2 + 1 , axis = 1 ) . <name3> ( ) . add_prefix ( 's'   )	<name3> the values in each row of every two adjacent <name2> in dataframe <name1>
<name1> = [ <name2> . <name2> ( ) for _ in range ( <val5> ) ]	create list <name1> with <val5> <name2> floating point numbers between 0.0 and 1.0
<name1> = [ <name2> . <name2> ( ) for _ in range ( <val3> ) ]	create list <name1> with <val3> <name2> floating point numbers between 0.0 and 1.0
print ( soup . <name3> ( 'a'   , <name6> = re . compile ( '.*follow\\?page.*'   ) ) )	<name3> <name6> value that has string 'follow?page' inside it
print ( soup . <name1> ( 'a'   , <name2> = re . compile ( '.*follow\\?page.*'   ) ) )	<name1> <name2> value that has string 'follow?page' inside it
sys . stdout . flush ( )	immediately see output of print statement that doesn ' t end in a newline
<name1> , <name2> = <name6> . choice ( list ( <name4> . items ( ) ) )	get a <name6> key <name1> and value <name2> form a dictionary <name4>
<name1> , <name2> = <name3> . choice ( list ( <name4> . items ( ) ) )	get a <name3> key <name1> and value <name2> form a dictionary <name4>
<name3> ( <val2>   )	split string <val2> into a <name3> of characters
<name1> ( <val2>   )	split string <val2> into a <name1> of characters
[ w for w <name5> open ( 'file.txt'   ) if not re . search ( '[aeiou]{2}'   , w ) ]	Create a list containing words that contain vowel letter followed by the same vowel <name5> file 'file.text'
[ w for w <name1> open ( 'file.txt'   ) if not re . search ( '[aeiou]{2}'   , w ) ]	Create a list containing words that contain vowel letter followed by the same vowel <name1> file 'file.text'
pat = re . compile ( '^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'   )	Validate IP address using Regex
exec ( compile ( open ( <val2>   ) . read ( ) , <val2>   , 'exec'   ) )	execute file <val2>
exec ( compile ( open ( <val1>   ) . read ( ) , <val1>   , 'exec'   ) )	execute file <val1>
session . query ( <name6> ) . <name2> ( <name6> . <name1> ) . group_by ( <name6> . <name1> ) . <name5> ( )	SQLAlchemy <name5> the number of rows with <name2> values in column <name1> of table <name6>
session . query ( <name1> ) . <name2> ( <name1> . <name3> ) . group_by ( <name1> . <name3> ) . <name4> ( )	SQLAlchemy <name4> the number of rows with <name2> values in column <name3> of table <name1>
<name3> = <name3> . dropna ( axis = 1 , how = 'all'   )	remove null columns in a dataframe <name3>
<name1> = <name1> . dropna ( axis = 1 , how = 'all'   )	remove null columns in a dataframe <name1>
<name4> ( x . count ( <val5> ) == 3 for x <name2> <name6> )	check if <name4> lists <name2> list <name6> have three elements of integer <val5>
<name1> ( x . count ( <val2> ) == 3 for x <name3> <name4> )	check if <name1> lists <name3> list <name4> have three elements of integer <val2>
[ x [ 0 ] for x <name2> <name6> <name3> <name5> ( x [ 0 ] == y [ 0 ] for y <name2> <name1> ) ]	Get a list comparing two lists of tuples <name6> and <name1> <name3> <name5> first value <name2> <name6> matches with first value <name2> <name1>
[ x [ 0 ] for x <name1> <name2> <name3> <name4> ( x [ 0 ] == y [ 0 ] for y <name1> <name5> ) ]	Get a list comparing two lists of tuples <name2> and <name5> <name3> <name4> first value <name1> <name2> matches with first value <name1> <name5>
tex . delete ( '1.0'   , END )	clear the textbox text in tkinter
datetime . datetime . fromtimestamp ( <name3> ) . strftime ( <val2>   )	Convert long int <name3> into date and time represented in the the string format <val2>
datetime . datetime . fromtimestamp ( <name1> ) . strftime ( <val2>   )	Convert long int <name1> into date and time represented in the the string format <val2>
system ( 'python myscript.py'   )	Spawn a process to run python script myscript.py in C + +
<name4> . <name5> ( key = operator . attrgetter ( <val3>   ) )	<name5> a list <name4> of class objects by their values for the attribute <val3>
<name1> . <name2> ( key = operator . attrgetter ( <val3>   ) )	<name2> a list <name1> of class objects by their values for the attribute <val3>
<name5> . <name3> ( key = lambda x : x . <name6> )	<name3> list <name5> by the <name6> attribute of each object
<name1> . <name2> ( key = lambda x : x . <name3> )	<name2> list <name1> by the <name3> attribute of each object
print ( type ( tf . Session ( ) . run ( tf . constant ( [ 1 , 2 , 3 ] ) ) ) )	convert a tensor with list of constants [1, 2, 3] into a numpy array in tensorflow
<name5> ( itertools . chain ( * <name3> ) )	convert <name5> <name3> from being consecutive sequences of tuples into <name3> single sequence of elements
<name1> ( itertools . chain ( * <name2> ) )	convert <name1> <name2> from being consecutive sequences of tuples into <name2> single sequence of elements
<name3> . setdefault ( <val1>   , <val5> )	Set value for key <val1> in dict <name3> to <val5> if key <val1> does not exist or if value is none
<name1> . setdefault ( <val2>   , <val3> )	Set value for key <val2> in dict <name1> to <val3> if key <val2> does not exist or if value is none
<name2> . groupby ( [ <val1>   ] ) . <name3> ( )	Do group by on <val1> column in <name2> and get its <name3>
<name1> . groupby ( [ <val2>   ] ) . <name3> ( )	Do group by on <val2> column in <name1> and get its <name3>
min ( <name6> , key = lambda x : abs ( x - <name3> ) )	get number in list <name6> closest in value to number <name3>
min ( <name1> , key = lambda x : abs ( x - <name2> ) )	get number in list <name1> closest in value to number <name2>
<name1> ( x <name2> <name6> for x <name2> <name5> )	check if <name1> of the items <name2> <name5> appear <name2> <name6>
<name1> ( x <name2> <name3> for x <name2> <name4> )	check if <name1> of the items <name2> <name4> appear <name2> <name3>
print ( <name3> . <name5> ( <name1> ) . group ( 1 ) )	<name5> for occurrences of regex <name3> <name3> in string <name1>
print ( <name1> . <name2> ( <name3> ) . group ( 1 ) )	<name2> for occurrences of regex <name1> <name1> in string <name3>
( <name1> . <name2> ( ) [ 0 ] + 1 ) . astype ( 'float'   )	<name2> all string values in dataframe <name1> into floats
<name6> = [ ( <name5> - b ) for <name5> , b <name3> zip ( <name4> , <name1> ) ]	Get <name5> list <name6> by subtracting values <name3> one list <name1> from corresponding values <name3> another list <name4>
<name1> = [ ( <name2> - b ) for <name2> , b <name3> zip ( <name4> , <name5> ) ]	Get <name2> list <name1> by subtracting values <name3> one list <name5> from corresponding values <name3> another list <name4>
datetime . datetime . strptime ( '2011, 4, 0'   , '%Y, %U, %w'   )	derive the week start for the given week number and year ‘ 2011 , 4 , 0 ’
map ( int , [ '1'   , '-1'   , '1'   ] )	convert a list of strings ['1', '-1', '1'] to a list of numbers
datetime . datetime . strptime ( '16Sep2012'   , '%d%b%Y'   )	'create datetime object from ' '16sep2012' ''
<name5> . objects . filter ( <name1> = <name1> ) . <name3> ( ** <name2> )	<name3> fields in Django model <name5> with arguments in dictionary <name2> where primary key is equal to <name1>
<name1> . objects . filter ( <name2> = <name2> ) . <name3> ( ** <name4> )	<name3> fields in Django model <name1> with arguments in dictionary <name4> where primary key is equal to <name2>
<name4> . objects . create ( ** <name2> )	update the fields in django model <name4> using dictionary <name2>
<name1> . objects . create ( ** <name2> )	update the fields in django model <name1> using dictionary <name2>
<name6> ( '{0:.2f}'   . format ( <name5> ) )	<name6> a digit <name5> with exactly 2 digits after decimal
<name1> ( '{0:.2f}'   . format ( <name2> ) )	<name1> a digit <name2> with exactly 2 digits after decimal
<name1> . randint ( 100000000000 , 999999999999 )	generate a 12 - digit <name1> number
int ( ''   . join ( str ( <name2> . randint ( 0 , 9 ) ) for _ in range ( <val1> ) ) )	generate a <name2> <val1> - digit number
int ( ''   . join ( str ( <name1> . randint ( 0 , 9 ) ) for _ in range ( <val2> ) ) )	generate a <name1> <val2> - digit number
'' '' ' ' '' ' ' '' ' . join ( str ( random . randint ( 0 , 9 ) ) for _ in range ( 12 ) )'	generate a random 12 - digit number
'%0.12d'     % <name6> . randint ( 0 , 999999999999 )	generate a 12 - digit <name6> number
'%0.12d'     % <name1> . randint ( 0 , 999999999999 )	generate a 12 - digit <name1> number
<name1> . delete ( <name6> , index )	remove specific elements in <name6> <name1> array <name6>
<name1> . delete ( <name2> , index )	remove specific elements in <name2> <name1> array <name2>
sorted ( <name4> , key = lambda x : trial_dict [ x ] )	sort list <name4> based on values of dictionary trail_dict
sorted ( <name1> , key = lambda x : trial_dict [ x ] )	sort list <name1> based on values of dictionary trail_dict
sys . <name6> . <name1> ( 1 )	<name1> a single character from <name6>
sys . <name1> . <name2> ( 1 )	<name2> a single character from <name1>
print ( re . findall ( <name6> , <name3> ) )	get a list of characters in string <name3> matching regex <name6> <name6>
print ( re . findall ( <name1> , <name2> ) )	get a list of characters in string <name2> matching regex <name1> <name1>
k = <name5> . find ( text = re . compile ( <val2>   ) ) . parent . text	get the context of a search by keyword <val2> in beautifulsoup <name5>
k = <name1> . find ( text = re . compile ( <val2>   ) ) . parent . text	get the context of a search by keyword <val2> in beautifulsoup <name1>
<name3> . apply ( lambda x : x . tolist ( ) , axis = 1 )	convert rows in pandas data frame <name3> into list
<name1> . apply ( lambda x : x . tolist ( ) , axis = 1 )	convert rows in pandas data frame <name1> into list
<name4> = np . reshape ( <name2> , ( -1 , <val5> ) )	convert a 1 d <name2> array to a <val5> d array <name4>
<name1> = np . reshape ( <name2> , ( -1 , <val3> ) )	convert a 1 d <name2> array to a <val3> d array <name1>
<name4> . <name2> ( <name6> = <val3>   , <name5> = <val1> , debug = False )	<name2> <name4> <name4> on <name6> <val3> and <name5> <val1> in Flask
<name1> . <name2> ( <name3> = <val4>   , <name5> = <val6> , debug = False )	<name2> <name1> <name1> on <name3> <val4> and <name5> <val6> in Flask
print ( <val5>   . <name1> ( 'UTF8'   ) )	<name1> unicode string <val5> to utf -8 code
print ( <val1>   . <name2> ( 'UTF8'   ) )	<name2> unicode string <val1> to utf -8 code
[ x [ 0 ] for x in <name4> ]	get the first element of each tuple from a list of tuples <name4>
[ x [ 0 ] for x in <name1> ]	get the first element of each tuple from a list of tuples <name1>
re . findall ( '-(?!aa-|bb-)([^-]+)'   , <name6> )	regular expression matching all but 'aa' and 'bb' for <name6> <name6>
re . findall ( '-(?!aa-|bb-)([^-]+)'   , <name1> )	regular expression matching all but 'aa' and 'bb' for <name1> <name1>
re . findall ( '-(?!aa|bb)([^-]+)'   , string )	regular expression matching all but 'aa' and 'bb'
{  k : v for k , v in list ( <name5> . items ( ) ) if v }	remove false entries from a dictionary <name5>
{  k : v for k , v in list ( <name1> . items ( ) ) if v }	remove false entries from a dictionary <name1>
dict ( ( k , v ) for k , v in <name2> . items ( ) if v )	Get a dictionary from a dictionary <name2> where the values are present
dict ( ( k , v ) for k , v in <name1> . items ( ) if v )	Get a dictionary from a dictionary <name1> where the values are present
sorted ( <name2> , key = operator . itemgetter ( <val5>   ) )	sort list <name2> based on the value of variable <val5> for each object in list <name2>
sorted ( <name1> , key = operator . itemgetter ( <val2>   ) )	sort list <name1> based on the value of variable <val2> for each object in list <name1>
<name2> . <name3> ( key = operator . attrgetter ( <val6>   ) )	<name3> a list of objects <name2> by a member variable <val6>
<name1> . <name2> ( key = operator . attrgetter ( <val3>   ) )	<name2> a list of objects <name1> by a member variable <val3>
somelist . <name5> ( key = lambda x : x . <name1> )	<name5> a list of objects 'somelist' where the object has member number variable <name1>
somelist . <name1> ( key = lambda x : x . <name2> )	<name1> a list of objects 'somelist' where the object has member number variable <name2>
df1 . merge ( df2 , <name2> = <val6>   ) . merge ( df3 , <name2> = <val6>   )	join multiple dataframes d1 , d2 , and d3 <name2> column <val6>
df1 . merge ( df2 , <name1> = <val2>   ) . merge ( df3 , <name1> = <val2>   )	join multiple dataframes d1 , d2 , and d3 <name1> column <val2>
decimal . <name4> ( <name1> . randrange ( 10000 ) ) / 100	generate <name1> <name4>
decimal . <name1> ( <name2> . randrange ( 10000 ) ) / 100	generate <name2> <name1>
onlyfiles = [ f for f in listdir ( <name6> ) if isfile ( join ( <name6> , f ) ) ]	list all files of a directory <name6>
onlyfiles = [ f for f in listdir ( <name1> ) if isfile ( join ( <name1> , f ) ) ]	list all files of a directory <name1>
print ( glob . glob ( '/home/adam/*.txt'   ) )	'list all ' '.txt' ' files of a directory ' '/home/adam/' ''
os . listdir ( <val4>   )	'list all files of a directory ' <val4> ''
os . listdir ( <val1>   )	'list all files of a directory ' <val1> ''
cur . executemany ( <val2>   , <name6> )	execute sql query <val2> with all parameters in list <name6>
cur . executemany ( <val1>   , <name2> )	execute sql query <val1> with all parameters in list <name2>
print ( [ key for key <name2> <name1> if <name1> [ key ] == 1 ] )	get keys with same value <name2> dictionary <name1>
print ( [ key for key <name1> <name2> if <name2> [ key ] == 1 ] )	get keys with same value <name1> dictionary <name2>
print ( [ key for key , <name4> <name3> <name2> . items ( ) if <name4> == 1 ] )	get keys with same <name4> <name3> dictionary <name2>
print ( [ key for key , <name1> <name2> <name3> . items ( ) if <name1> == 1 ] )	get keys with same <name1> <name2> dictionary <name3>
print ( [ key for key , <name1> in list ( d . items ( ) ) if <name1> == 1 ] )	Get keys from a dictionary 'd' where the <name1> is '1' .
strs = [ ''     for x in range ( size ) ]	create list of 'size' empty strings
[ <name1> ( t ) for t <name3> set ( [ tuple ( d . items ( ) ) for d <name3> <name6> ] ) ]	remove duplicate <name1> <name3> list <name6>
[ <name1> ( t ) for t <name2> set ( [ tuple ( d . items ( ) ) for d <name2> <name3> ] ) ]	remove duplicate <name1> <name2> list <name3>
TIME_ZONE = <val2>	Set time zone <val2> in Django
TIME_ZONE = <val1>	Set time zone <val1> in Django
<name2> . setdefault ( <name3> , [ ] ) . <name5> ( <name1> )	<name5> <name1> to list value of <name3> in dictionary <name2> , or create <name3> <name3> with value <name1> in a list if it does not exist
<name1> . setdefault ( <name2> , [ ] ) . <name3> ( <name4> )	<name3> <name4> to list value of <name2> in dictionary <name1> , or create <name2> <name2> with value <name4> in a list if it does not exist
<name2> . objects . <name6> ( <val3>   ) . <name4> ( article_count = Count ( <val1>   ) )	Group the <name6> from django model <name2> with group by value <val3> and <name4> by <val1>
<name1> . objects . <name2> ( <val3>   ) . <name4> ( article_count = Count ( <val5>   ) )	Group the <name2> from django model <name1> with group by value <val3> and <name4> by <val5>
<name1> . delete ( 'all'   )	clear Tkinter Canvas <name1>
<name1> = pd . Series ( [ 'A'   , 'B'   , 'A1R'   , 'B2'   , 'AABB4'   ] )	Initialize a pandas series object <name1> with columns ['A', 'B', 'A1R', 'B2', 'AABB4']
<name2> . <name1> ( <name3> = lambda x : <name4> . index ( x [ 0 ] ) )	<name1> list <name2> using the first dimension of the element as the <name3> to list <name4>
<name1> . <name2> ( <name3> = lambda x : <name4> . index ( x [ 0 ] ) )	<name2> list <name1> using the first dimension of the element as the <name3> to list <name4>
<name3> . savefig ( <val4>   )	Save plot <name3> as png file <val4>
<name1> . savefig ( <val2>   )	Save plot <name1> as png file <val2>
plt . savefig ( <val1>   , dpi = 300 )	Save matplotlib graph to image file <val1> at a resolution of 300 dpi
<name4> . communicate ( ) [ 0 ]	get output from process <name4>
<name1> . communicate ( ) [ 0 ]	get output from process <name1>
soup . body . findAll ( <name5> = <val4>   )	searche in HTML string for elements that have <name5> <val4>
soup . body . findAll ( <name1> = <val2>   )	searche in HTML string for elements that have <name1> <val2>
soup . <name1> . findAll ( text = <val6>   )	BeautifulSoup find string <val6> in HTML <name1> <name1>
soup . <name1> . findAll ( text = <val2>   )	BeautifulSoup find string <val2> in HTML <name1> <name1>
sorted ( list ( <name4> . <name3> ( ) ) , <name5> = lambda name_num : ( name_num [ 0 ] . rsplit ( None , 1 ) [ 0 ] , name_num [ 1 ] ) )	Sort <name3> in dictionary <name4> using the first part of the <name5> after splitting the <name5>
sorted ( list ( <name1> . <name2> ( ) ) , <name3> = lambda name_num : ( name_num [ 0 ] . rsplit ( None , 1 ) [ 0 ] , name_num [ 1 ] ) )	Sort <name2> in dictionary <name1> using the first part of the <name3> after splitting the <name3>
<name4> ( [ <val1> , <val5> , <val6> ] ) ^   <name4> ( [ <val6> , <val2> , <val3> ] )	create a <name4> that is the exclusive or of [ <val1> , <val5> , <val6> ] and [ <val6> , <val2> , <val3> ]
<name1> ( [ <val2> , <val3> , <val4> ] ) ^   <name1> ( [ <val4> , <val5> , <val6> ] )	create a <name1> that is the exclusive or of [ <val2> , <val3> , <val4> ] and [ <val4> , <val5> , <val6> ]
request . POST . getlist ( <val1>   )	Get a list values of a dictionary item <val1> from post requests in django
<name3> ( dict ( ( x [ <val2>   ] , x ) for x <name6> L ) . values ( ) )	Filter duplicate entries w .r .t . value <name6> <val2> from a <name3> of dictionaries 'L'
<name1> ( dict ( ( x [ <val2>   ] , x ) for x <name3> L ) . values ( ) )	Filter duplicate entries w .r .t . value <name3> <val2> from a <name1> of dictionaries 'L'
<name1> . groupby ( <name1> . columns , axis = 1 ) . <name6> ( )	Get pandas GroupBy object with <name6> over the rows with same column names within dataframe <name1>
<name1> . groupby ( <name1> . columns , axis = 1 ) . <name2> ( )	Get pandas GroupBy object with <name2> over the rows with same column names within dataframe <name1>
dict ( <name4> ( list ( <name2> ( 1 , 5 ) ) , list ( <name2> ( 7 , 11 ) ) ) )	convert the <name4> of <name2> (1, 5) and <name2> (7, 11) into a dictionary
dict ( <name1> ( list ( <name2> ( 1 , 5 ) ) , list ( <name2> ( 7 , 11 ) ) ) )	convert the <name1> of <name2> (1, 5) and <name2> (7, 11) into a dictionary
<name5> . <name6> ( <name4> )	Get all indexes of boolean <name5> array <name6> boolean value <name4> is True
<name1> . <name2> ( <name3> )	Get all indexes of boolean <name1> array <name2> boolean value <name3> is True
( <name6> . lower ( ) == <name5> . lower ( ) )	case insensitive string comparison between <name6> and <name5>
( <name1> . lower ( ) == <name2> . lower ( ) )	case insensitive string comparison between <name1> and <name2>
( <name4> . lower ( ) == <name1> . lower ( ) )	case insensitive string comparison between <name4> and <name1>
( <name1> . lower ( ) == <name2> . lower ( ) )	case insensitive string comparison between <name1> and <name2>
( <name5> . upper ( ) == <name3> . upper ( ) )	case insensitive comparison between strings <name5> and <name3>
( <name1> . upper ( ) == <name2> . upper ( ) )	case insensitive comparison between strings <name1> and <name2>
'os . system ( ' <val5> { <name3> $ <val2> , $ <val4> } <val6> ' )'	'Taking the results of a bash command ' <val5> { <name3> $ <val2> , $ <val4> } <val6> ''
'os . system ( ' <val1> { <name2> $ <val3> , $ <val4> } <val5> ' )'	'Taking the results of a bash command ' <val1> { <name2> $ <val3> , $ <val4> } <val5> ''
del <name1> [ <val5> : <val2> ]	remove multiple values from a list <name1> at the same time with index starting at <val5> and ending just before <val2> .
del <name1> [ <val2> : <val3> ]	remove multiple values from a list <name1> at the same time with index starting at <val2> and ending just before <val3> .
int ( <name2> . encode ( 'hex'   ) , 16 )	convert a string <name2> to its base -10 representation
int ( <name1> . encode ( 'hex'   ) , 16 )	convert a string <name1> to its base -10 representation
re . findall ( <val6>   , <name3> )	match regex pattern <val6> on string <name3>
re . findall ( <val1>   , <name2> )	match regex pattern <val1> on string <name2>
sorted ( <name1> , key = float )	sort a set <name1> by numerical value
<name1> ( <val5> )	convert an int <val5> to <name1> string
<name1> ( <val2> )	convert an int <val2> to <name1> string
<name2> . <name3> ( <name6> ) . reset_index ( drop = True )	<name3> <name2> pandas series <name6> to the series <name2> and get <name2> continuous index
<name1> . <name2> ( <name3> ) . reset_index ( drop = True )	<name2> <name1> pandas series <name3> to the series <name1> and get <name1> continuous index
pd . concat ( [ <name4> , <name2> ] , ignore_index = True )	simple way to append <name4> pandas series <name4> and <name2> with same index
pd . concat ( [ <name1> , <name2> ] , ignore_index = True )	simple way to append <name1> pandas series <name1> and <name2> with same index
[ ( i , j ) for i in range ( 1 , 3 ) for j in range ( 1 , 5 ) ]	Get a list of tuples with multiple iterators using list comprehension
sorted ( iter ( <name1> . <name2> ( ) ) , key = itemgetter ( 1 ) , <name5> = True )	<name5> sort <name2> in dictionary <name1> by value
sorted ( iter ( <name1> . <name2> ( ) ) , key = itemgetter ( 1 ) , <name3> = True )	<name3> sort <name2> in dictionary <name1> by value
pd . date_range ( '1/1/2014'   , periods = 12 , freq = 'BM'   )	select the last business day of the month for each month in 2014 in pandas
<name6> . get ( <val1>   , verify = False )	disable the certificate check in https <name6> for url <val1>
<name1> . get ( <val2>   , verify = False )	disable the certificate check in https <name1> for url <val2>
<name4> . ix [ : -1 ]	return dataframe <name4> with last row dropped
<name1> . ix [ : -1 ]	return dataframe <name1> with last row dropped
string . find ( <val5>   )	'check if string ' <val5> ' is in string'
string . find ( <val1>   )	'check if string ' <val1> ' is in string'
pd . concat ( [ <name3> . head ( 1 ) , <name3> . tail ( 1 ) ] )	extract first and last row of a dataframe <name3>
pd . concat ( [ <name1> . head ( 1 ) , <name1> . tail ( 1 ) ] )	extract first and last row of a dataframe <name1>
<name6> . objects . extra ( where = [ 'CHAR_LENGTH(text) > 254'   ] )	filter a Django model <name6> to have charfield length of max 255
<name1> . objects . extra ( where = [ 'CHAR_LENGTH(text) > 254'   ] )	filter a Django model <name1> to have charfield length of max 255
<name6> . <name2> . filter ( text__regex = '^.{254}.*'   )	Filter queryset for all <name2> in Django model <name6> where texts length are greater than 254
<name1> . <name2> . filter ( text__regex = '^.{254}.*'   )	Filter queryset for all <name2> in Django model <name1> where texts length are greater than 254
sum ( <name6> . apply ( lambda x : sum ( x . isnull ( ) . <name1> ) , axis = 1 ) >   0 )	count the number of rows with missing <name1> in a pandas dataframe <name6>
sum ( <name1> . apply ( lambda x : sum ( x . isnull ( ) . <name2> ) , axis = 1 ) >   0 )	count the number of rows with missing <name2> in a pandas dataframe <name1>
<name4> . create_text ( x , y , <name3> = ( <val1>   , <val6> ) , <name2> = <name5> )	set the <name3> <val1> of size <val6> for a <name4> '  <name2> item <name5>
<name1> . create_text ( x , y , <name2> = ( <val3>   , <val4> ) , <name5> = <name6> )	set the <name2> <val3> of size <val4> for a <name1> '  <name5> item <name6>
[ y [ <val5>   ] for x <name6> <name2> for y <name6> x [ 'bar'   ] ]	create a list containing all values associated with key <val5> <name6> dictionaries of list <name2> using list comprehension
[ y [ <val1>   ] for x <name2> <name3> for y <name2> x [ 'bar'   ] ]	create a list containing all values associated with key <val1> <name2> dictionaries of list <name3> using list comprehension
<name2> [ <val6>   ] = <name2> [ <val6>   ] . str . <name3> ( <val5>   , <val1>   )	<name3> string <val5> with <val1> in dataframe <name2> column <val6>
<name1> [ <val2>   ] = <name1> [ <val2>   ] . str . <name3> ( <val4>   , <val5>   )	<name3> string <val4> with <val5> in dataframe <name1> column <val2>
[ i for i in range ( len ( <name3> ) ) if <name3> [ i ] >   <val4> ]	Get all indexes of <name3> list <name3> where each value is greater than <val4>
[ i for i in range ( len ( <name1> ) ) if <name1> [ i ] >   <val2> ]	Get all indexes of <name1> list <name1> where each value is greater than <val2>
( <val2>     in locals ( ) )	check if a local variable <val2> exists
( <val1>     in locals ( ) )	check if a local variable <val1> exists
( <val5>     in globals ( ) )	check if a global variable <val5> exists
( <val1>     in globals ( ) )	check if a global variable <val1> exists
hasattr ( <name1> , <val6>   )	check if object <name1> has attribute <val6>
hasattr ( <name1> , <val2>   )	check if object <name1> has attribute <val2>
<name1> x , y : x + y	<name1> function that adds two operands
sum ( 1 for i <name2> <name1> )	count the number of items <name2> a generator / iterator <name1>
sum ( 1 for i <name1> <name2> )	count the number of items <name1> a generator / iterator <name2>
[ ( x , <name5> [ i ] ) for i , x in enumerate ( <name3> ) ]	get tuples of the corresponding elements from lists <name3> and <name5>
[ ( x , <name1> [ i ] ) for i , x in enumerate ( <name2> ) ]	get tuples of the corresponding elements from lists <name2> and <name1>
[ ( i , j ) for i , j in zip ( <name4> , <name6> ) ]	create tuples containing elements that are at the same index of list <name4> and list <name6>
[ ( i , j ) for i , j in zip ( <name1> , <name2> ) ]	create tuples containing elements that are at the same index of list <name1> and list <name2>
[ ( <name5> [ i ] , <name3> [ i ] ) for i <name6> range ( len ( <name5> ) ) ]	get tuples from lists <name5> and <name3> using list comprehension <name6> python 2
[ ( <name1> [ i ] , <name2> [ i ] ) for i <name3> range ( len ( <name1> ) ) ]	get tuples from lists <name1> and <name2> using list comprehension <name3> python 2
struct . unpack ( 'BBB'   , <name1> . decode ( 'hex'   ) )	convert hex triplet string <name1> to rgb tuple
( <val6> <name3> <name1> [ <val4> , <val6> , <val5> ] )	Check if <val6> is <name3> <name1> a list [ <val4> , <val6> , <val5> ]
( <val1> <name2> <name3> [ <val4> , <val1> , <val5> ] )	Check if <val1> is <name2> <name3> a list [ <val4> , <val1> , <val5> ]
( ( <val2> , <val4> ) <name6> <name5> [ ( <val2> , <val4> ) , ( <val1> , <val3> ) , ( <val2> , <val4> ) ] )	Check if tuple ( <val2> , <val4> ) is <name6> <name5> a list [ ( <val2> , <val4> ) , ( <val1> , <val3> ) , ( <val2> , <val4> ) ]
( ( <val1> , <val2> ) <name3> <name4> [ ( <val1> , <val2> ) , ( <val5> , <val6> ) , ( <val1> , <val2> ) ] )	Check if tuple ( <val1> , <val2> ) is <name3> <name4> a list [ ( <val1> , <val2> ) , ( <val5> , <val6> ) , ( <val1> , <val2> ) ]
( ( 2 , 3 ) not in [ ( 2 , 7 ) , ( 7 , 3 ) , <val5>   ] )	'Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), ' <val5> ']'
( ( 2 , 3 ) not in [ ( 2 , 7 ) , ( 7 , 3 ) , <val1>   ] )	'Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), ' <val1> ']'
( <val6> <name4> <name5> [ <val3> , <val2> , <val1> ] )	Check if <val6> is <name4> <name5> the list [ <val3> , <val2> , <val1> ]
( <val1> <name2> <name3> [ <val4> , <val5> , <val6> ] )	Check if <val1> is <name2> <name3> the list [ <val4> , <val5> , <val6> ]
[ value for pair in zip ( <name3> , <name2> [ : : -1 ] ) for value in pair ]	create <name3> list by appending components from list <name3> and reversed list <name2> interchangeably
[ value for pair in zip ( <name1> , <name2> [ : : -1 ] ) for value in pair ]	create <name1> list by appending components from list <name1> and reversed list <name2> interchangeably
<name5> = np . <name2> ( <name3> , -1 , 1 )	<name2> the last column of numpy array <name3> and assign resulting array to <name5>
<name1> = np . <name2> ( <name3> , -1 , 1 )	<name2> the last column of numpy array <name3> and assign resulting array to <name1>
dbb . <name3> ( )	<name3> all the changes after executing a query .
dbb . <name1> ( )	<name1> all the changes after executing a query .
pd . merge ( a , b , <name5> = [ 'A'   , 'B'   ] , how = 'outer'   )	join two dataframes based <name5> values in selected columns
pd . merge ( a , b , <name1> = [ 'A'   , 'B'   ] , how = 'outer'   )	join two dataframes based <name1> values in selected columns
setStyleSheet ( 'QPushButton {background-color: #A3C1DA; color: red;}'   )	set text color as red and background color as #A3C1DA in qpushbutton
sum ( <name3> ) / float ( len ( <name3> ) )	find the mean of elements in list <name3>
sum ( <name1> ) / float ( len ( <name1> ) )	find the mean of elements in list <name1>
[ ( k , v ) for k , v in <name1> . <name4> ( ) <name5> <val2>     in k ]	Find all the <name4> from a dictionary <name1> <name5> the key contains the string <val2>
[ ( k , v ) for k , v in <name1> . <name2> ( ) <name3> <val4>     in k ]	Find all the <name2> from a dictionary <name1> <name3> the key contains the string <val4>
k = hashlib . <name3> ( <val2>   ) . hexdigest ( )	Get a <name3> hash from string <val2>
k = hashlib . <name1> ( <val2>   ) . hexdigest ( )	Get a <name1> hash from string <val2>
<name5> . <name4> ( key = lambda d : ( d . <name3> , d . <name6> ) )	<name4> datetime objects <name5> by <name3> and <name6>
<name1> . <name2> ( key = lambda d : ( d . <name3> , d . <name4> ) )	<name2> datetime objects <name1> by <name3> and <name4>
[ [ td . findNext ( text = True ) for td in tr . findAll ( 'td'   ) ] for tr in <name4> ]	extract table data from table <name4> using beautifulsoup
[ [ td . findNext ( text = True ) for td in tr . findAll ( 'td'   ) ] for tr in <name1> ]	extract table data from table <name1> using beautifulsoup
'' '' ' ' <val1> ' ' '' ' . replace ( ' . txt ' , ' ' )'	strip the string '.txt' from anywhere in the string <val1>
<name5> ( df . <name4> )	get a <name5> of the row names from <name4> of a pandas data frame
<name1> ( df . <name2> )	get a <name1> of the row names from <name2> of a pandas data frame
df . <name3>	get the row names from <name3> in a pandas data frame
df . <name1>	get the row names from <name1> in a pandas data frame
'' '' ' ' '' ' ' '' ' . join ( list ( OrderedDict . fromkeys ( ' aaabcabccd ' ) . keys ( ) ) )'	create a list of all unique characters in string 'aaabcabccd'
<name1> ( set ( <val5>   ) )	get <name1> of all unique characters in a string <val5>
<name1> ( set ( <val2>   ) )	get <name1> of all unique characters in a string <val2>
df . loc [ ( df . loc [ : , ( df . dtypes != <name2> ) ] != 0 ) . any ( 1 ) ]	find rows with non zero values in a subset of columns where df.dtypes is not equal to <name2> in pandas dataframe
df . loc [ ( df . loc [ : , ( df . dtypes != <name1> ) ] != 0 ) . any ( 1 ) ]	find rows with non zero values in a subset of columns where df.dtypes is not equal to <name1> in pandas dataframe
<name2> ( word <name3> <name1> for word <name3> [ 'somekey'   , 'someotherkey'   , 'somekeyggg'   ] )	check if dictionary <name1> contains <name2> keys <name3> list ['somekey', 'someotherkey', 'somekeyggg']
<name1> ( word <name2> <name3> for word <name2> [ 'somekey'   , 'someotherkey'   , 'somekeyggg'   ] )	check if dictionary <name3> contains <name1> keys <name2> list ['somekey', 'someotherkey', 'somekeyggg']
<name4> . check_output ( [ 'espeak'   , text ] , stderr = <name4> . STDOUT )	hide output of <name4> ['espeak', text]
<name1> . check_output ( [ 'espeak'   , text ] , stderr = <name1> . STDOUT )	hide output of <name1> ['espeak', text]
<name1> . fillna ( method = 'ffill'   , inplace = True )	replace nans by preceding values in pandas dataframe <name1>
print ( np . linspace ( <val4> , <val1> , num = <val5> , endpoint = False ) )	create <val5> numbers in range between <val4> and <val1>
print ( np . linspace ( <val1> , <val2> , num = <val3> , endpoint = False ) )	create <val3> numbers in range between <val1> and <val2>
print ( np . linspace ( <val3> , <val4> , num = <val1> ) )	Create numpy array of <val1> numbers starting from <val3> with interval of <val4>
print ( np . linspace ( <val1> , <val2> , num = <val3> ) )	Create numpy array of <val3> numbers starting from <val1> with interval of <val2>
kdll . CreateSymbolicLinkW ( <val1>   , <val4>   , 1 )	create a symlink directory <val1> for directory <val4> with unicode support using ctypes library
kdll . CreateSymbolicLinkW ( <val1>   , <val2>   , 1 )	create a symlink directory <val1> for directory <val2> with unicode support using ctypes library
<name6> = [ <name4> [ i ] [ 0 : 2 ] for i in range ( 0 , 2 ) ]	get a list <name6> of array slices of the first two rows and columns from array <name4>
<name1> = [ <name2> [ i ] [ 0 : 2 ] for i in range ( 0 , 2 ) ]	get a list <name1> of array slices of the first two rows and columns from array <name2>
upload_url = blobstore . create_upload_url ( <val5>   , gs_bucket_name = <val1>   )	upload uploaded file from path <val5> to Google cloud storage <val1> bucket
upload_url = blobstore . create_upload_url ( <val1>   , gs_bucket_name = <val2>   )	upload uploaded file from path <val1> to Google cloud storage <val2> bucket
os . chdir ( os . path . dirname ( __file__ ) )	change directory to the directory of a python script
func ( * <name4> )	call a function with argument list <name4>
func ( * <name1> )	call a function with argument list <name1>
<name1> [ <val4>   ] . str . <name6> ( <val2>   , 1 , expand = True )	<name6> column <val4> in dataframe <name1> into two columns by first whitespace <val2>
<name1> [ <val2>   ] . str . <name3> ( <val4>   , 1 , expand = True )	<name3> column <val2> in dataframe <name1> into two columns by first whitespace <val4>
df [ <val4>   ] , df [ <val5>   ] = df [ <val2>   ] . str . <name3> ( <val6>   , 1 ) . str	pandas dataframe , how do i <name3> a column <val2> into two <val4> and <val5> on delimiter <val6>
df [ <val1>   ] , df [ <val2>   ] = df [ <val3>   ] . str . <name4> ( <val5>   , 1 ) . str	pandas dataframe , how do i <name4> a column <val3> into two <val1> and <val2> on delimiter <val5>
print ( sorted ( <name6> , key = len ) )	sort list <name6> based on the length of its elements
print ( sorted ( <name1> , key = len ) )	sort list <name1> based on the length of its elements
<name3> . <name1> ( lambda x , y : cmp ( len ( x ) , len ( y ) ) )	<name1> list <name3> in ascending order of length of elements
<name1> . <name2> ( lambda x , y : cmp ( len ( x ) , len ( y ) ) )	<name2> list <name1> in ascending order of length of elements
<name1> . <name4> ( key = lambda s : len ( s ) )	<name4> list of strings <name1> by the length of string
<name1> . <name2> ( key = lambda s : len ( s ) )	<name2> list of strings <name1> by the length of string
<name5> . <name1> ( <name3> = <val6>   )	<name1> point <name3> <val6> on series <name5>
<name1> . <name2> ( <name3> = <val4>   )	<name2> point <name3> <val4> on series <name1>
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = <name2> ) )	get all combination of <name2> binary values
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = <name1> ) )	get all combination of <name1> binary values
lst = map ( list , itertools . product ( [ 0 , 1 ] , repeat = <name6> ) )	get all combination of <name6> binary values
lst = map ( list , itertools . product ( [ 0 , 1 ] , repeat = <name1> ) )	get all combination of <name1> binary values
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = <val1> ) )	get all combination of <val1> binary values
<name2> [ <val1>   ] = <val4>     + <name2> [ <val1>   ] . astype ( str )	append string <val4> at the beginning of each value in column <val1> of dataframe <name2>
<name1> [ <val2>   ] = <val3>     + <name1> [ <val2>   ] . astype ( str )	append string <val3> at the beginning of each value in column <val2> of dataframe <name1>
<name5> ( ( name , eval ( name ) ) for name in [ 'some'   , 'list'   , 'of'   , 'vars'   ] )	get a <name5> of variable names ['some', 'list', 'of', 'vars'] as a string and their values
<name1> ( ( name , eval ( name ) ) for name in [ 'some'   , 'list'   , 'of'   , 'vars'   ] )	get a <name1> of variable names ['some', 'list', 'of', 'vars'] as a string and their values
<name1> . <name4> ( <name6> , <name2> = <name2> )	add a <name4> to plot <name1> using image <name6> on axes <name2>
<name1> . <name2> ( <name3> , <name4> = <name4> )	add a <name2> to plot <name1> using image <name3> on axes <name4>
[ <name2> for c in Cards for b in c for <name2> in b ]	convert nested list 'Cards' into <name2> flat list
[ <name1> for c in Cards for b in c for <name1> in b ]	convert nested list 'Cards' into <name1> flat list
sorted ( <name3> , key = <name3> . get )	create a list containing keys of dictionary <name3> and sort it alphabetically
sorted ( <name1> , key = <name1> . get )	create a list containing keys of dictionary <name1> and sort it alphabetically
<name2> ( len ( [ x for x <name6> <name1> if x is <name3> None ] ) )	<name2> the number of occurences of <name3> none <name6> a list <name1> <name6> Python 2
<name1> ( len ( [ x for x <name2> <name3> if x is <name4> None ] ) )	<name1> the number of occurences of <name4> none <name2> a list <name3> <name2> Python 2
{{  <name4> . <name2> }}	lookup dictionary key <name2> in Django template <name4>
{{  <name1> . <name2> }}	lookup dictionary key <name2> in Django template <name1>
mynewlist = <name4> ( <name3> )	remove duplicates from <name4> <name3>
mynewlist = <name1> ( <name2> )	remove duplicates from <name1> <name2>
set ( [ 'a'   , 'b'   , 'c'   , 'd'   ] )	get unique values from the list ['a', 'b', 'c', 'd']
<name1> ( figsize = ( 11.69 , 8.27 ) )	set size of <name1> to landscape A4 i .e . 11.69, 8.27 inches
url . rsplit ( <val2>   , 1 )	get every thing after last <val2>
url . rsplit ( <val1>   , 1 )	get every thing after last <val1>
<name6> . rsplit ( '/'   , 1 ) [ -1 ]	get everything after last slash in a <name6> stored in variable 'url'
<name1> . rsplit ( '/'   , 1 ) [ -1 ]	get everything after last slash in a <name1> stored in variable 'url'
x_file = <name1> ( os . path . join ( <name2> , <val6>   ) , 'r'   )	<name1> file <val6> in directory <name2>
x_file = <name1> ( os . path . join ( <name2> , <val3>   ) , 'r'   )	<name1> file <val3> in directory <name2>
<name1> ( <val2>   )	create a <name1> with the characters of a string <val2>
np . <name1> ( <name3> ) . ravel ( ) . tolist ( )	<name1> a list of numpy arrays <name3> together into a flattened list of values
np . <name1> ( <name2> ) . ravel ( ) . tolist ( )	<name1> a list of numpy arrays <name2> together into a flattened list of values
print ( [ y for x in <name3> ( <name6> . items ( ) ) for y in x ] )	convert dictionary <name6> into a flat <name3>
print ( [ y for x in <name1> ( <name2> . items ( ) ) for y in x ] )	convert dictionary <name2> into a flat <name1>
[ y for x in <name3> ( <name2> . <name4> ( ) ) for y in x ]	Convert a dictionary <name2> into a <name3> with key and values as <name3> <name4> .
[ y for x in <name1> ( <name2> . <name3> ( ) ) for y in x ]	Convert a dictionary <name2> into a <name1> with key and values as <name1> <name3> .
MyModel . objects . order_by ( '?'   ) . first ( )	get a random record from model 'MyModel' using django ' s orm
os . chdir ( <val4>   )	change current working directory to directory <val4>
os . chdir ( <val1>   )	change current working directory to directory <val1>
os . chdir ( 'C:\\Users\\username\\Desktop\\headfirstpython\\chapter3'   )	change current working directory
os . chdir ( '.\\chapter3'   )	change current working directory
dict ( ( key , sum ( d [ key ] for d <name3> dictList ) ) for key <name3> dictList [ 0 ] )	create a flat dictionary by summing values associated with similar keys <name3> each dictionary of list dictlist
dict ( ( key , sum ( d [ key ] for d <name1> dictList ) ) for key <name1> dictList [ 0 ] )	create a flat dictionary by summing values associated with similar keys <name1> each dictionary of list dictlist
<name4> . <name6> ( [ <val5>   , <val3>   ] , <name2> = [ True , True ] )	<name6> pandas data frame <name4> using values from columns <val5> and <val3> in <name2> order
<name1> . <name2> ( [ <val3>   , <val4>   ] , <name5> = [ True , True ] )	<name2> pandas data frame <name1> using values from columns <val3> and <val4> in <name5> order
floats = [ <name5> ( x ) for x in <name3> . split ( ) ]	Converting string lists <name3> to <name5> list
floats = [ <name1> ( x ) for x in <name2> . split ( ) ]	Converting string lists <name2> to <name1> list
floats = map ( <name5> , <name4> . split ( ) )	Converting string lists <name4> to <name5> list
floats = map ( <name1> , <name2> . split ( ) )	Converting string lists <name2> to <name1> list
<name4> . xticks ( [ 1 , 2 , 3 , 4 , 5 ] )	set labels [1, 2, 3, 4, 5] on axis X in plot <name4>
<name1> . xticks ( [ 1 , 2 , 3 , 4 , 5 ] )	set labels [1, 2, 3, 4, 5] on axis X in plot <name1>
<val5>     <name3> list ( <name6> . <name1> ( ) )	check if string <val5> exists <name3> the <name1> of dictionary <name6>
<val1>     <name2> list ( <name3> . <name4> ( ) )	check if string <val1> exists <name2> the <name4> of dictionary <name3>
<val1>     in iter ( <name4> . <name2> ( ) )	Check if value <val1> is among the <name2> of dictionary <name4>
<val1>     in iter ( <name2> . <name3> ( ) )	Check if value <val1> is among the <name3> of dictionary <name2>
super ( <name4> , self ) . __init__ ( name , year )	call parent class <name4> of child class constructor
super ( <name1> , self ) . __init__ ( name , year )	call parent class <name1> of child class constructor
dict ( zip ( <name6> , <name2> ) )	create a dictionary using two lists <name6> and <name2>
dict ( zip ( <name1> , <name2> ) )	create a dictionary using two lists <name1> and <name2>
sorted ( <name3> , key = lambda i : <name4> ( i . <name1> ( ) ) [ 0 ] , reverse = True )	sort <name3> <name4> of dictionaries <name3> by dictionary <name1> in descending order
sorted ( <name1> , key = lambda i : <name2> ( i . <name3> ( ) ) [ 0 ] , reverse = True )	sort <name1> <name2> of dictionaries <name1> by dictionary <name3> in descending order
sorted ( <name3> , key = dict . <name4> , reverse = True )	sorting <name3> list of dictionary <name3> by <name4> in descending order
sorted ( <name1> , key = dict . <name2> , reverse = True )	sorting <name1> list of dictionary <name1> by <name2> in descending order
<name3> . <name5> ( level = 0 ) . <name6> ( [ <val1>   , <val4>   , <val2>   ] )	Use multiple <name5> and <name6> operations <val1> , <val4> , <val2> for pandas data frame <name3>
<name1> . <name2> ( level = 0 ) . <name3> ( [ <val4>   , <val5>   , <val6>   ] )	Use multiple <name2> and <name3> operations <val4> , <val5> , <val6> for pandas data frame <name1>
<name1> . setdefault ( <val2>   , [ ] ) . <name5> ( <val4>   )	for <name1> dictionary <name1> , set default value for key <val2> as list and <name5> value <val4> in that key
<name1> . setdefault ( <val2>   , [ ] ) . <name3> ( <val4>   )	for <name1> dictionary <name1> , set default value for key <val2> as list and <name3> value <val4> in that key
<name4> ( item [ <val5>   ] for item <name6> <name3> )	<name4> values <name6> list of dictionaries <name3> with key <val5>
<name1> ( item [ <val2>   ] for item <name3> <name4> )	<name1> values <name3> list of dictionaries <name4> with key <val2>
<name3> ( [ item [ <val4>   ] for item <name6> <name5> ] )	get a <name3> of all values from key <val4> <name6> a list of dictionary <name5>
<name1> ( [ item [ <val2>   ] for item <name3> <name4> ] )	get a <name1> of all values from key <val2> <name3> a list of dictionary <name4>
sum ( item [ <val6>   ] for item <name5> <name2> )	Get all the values <name5> key <val6> summed from a list of dictionary <name2>
sum ( item [ <val1>   ] for item <name2> <name3> )	Get all the values <name2> key <val1> summed from a list of dictionary <name3>
<name6> . write ( <val2>   )	writing string <val2> to file <name6>
<name1> . write ( <val2>   )	writing string <val2> to file <name1>
<name3> . write ( 'My String\n'   )	Write a string My String to a <name3> <name3> including new line character
<name1> . write ( 'My String\n'   )	Write a string My String to a <name1> <name1> including new line character
df . reset_index ( ) . groupby ( <val1>   ) [ 'index'   ] . apply ( np . array )	find consecutive segments from a column <val1> in a pandas data frame 'df'
<name1> = os . <name5> . join ( os . <name5> . dirname ( __file__ ) , <val2>   )	get a relative <name5> of file <val2> into variable <name1>
<name1> = os . <name2> . join ( os . <name2> . dirname ( __file__ ) , <val3>   )	get a relative <name2> of file <val3> into variable <name1>
e = next ( iter ( <name3> ) )	retrieve an element from a set <name3> without removing it
e = next ( iter ( <name1> ) )	retrieve an element from a set <name1> without removing it
os . system ( '  dir <name2> : \\'  )	execute a command in the command prompt to list directory contents of the <name2> drive ` <name2> : \\'
os . system ( '  dir <name1> : \\'  )	execute a command in the command prompt to list directory contents of the <name1> drive ` <name1> : \\'
self . treeview . connect ( 'size-allocate'   , self . treeview_changed )	Make a auto scrolled window to the end of the list in gtk
<val1> in [ 1 , 2 , <val1> ]	check if <val1> is inside list [1, 2, 3]
datetime . datetime . strptime ( <val5>   , <val3>   ) . strftime ( <val4>   )	Represent DateTime object <val5> with format <val3> into format <val4>
datetime . datetime . strptime ( <val1>   , <val2>   ) . strftime ( <val3>   )	Represent DateTime object <val1> with format <val2> into format <val3>
<name6> = <name6> . replace ( '\\', '  \\\\'  )	convert a string literal <name6> with values '\\' to raw string literal
<name1> = <name1> . replace ( '\\', '  \\\\'  )	convert a string literal <name1> with values '\\' to raw string literal
print ( <name4> . communicate ( ) [ 0 ] )	get output of script <name4>
print ( <name1> . communicate ( ) [ 0 ] )	get output of script <name1>
pd . concat ( [ pd . DataFrame ( l ) for l in <name2> ] , axis = 1 ) . T	create a pandas data frame from list of nested dictionaries <name2>
pd . concat ( [ pd . DataFrame ( l ) for l in <name1> ] , axis = 1 ) . T	create a pandas data frame from list of nested dictionaries <name1>
<name3> . loc [ : , ( ( <name3> != 0 ) . any ( axis = 0 ) ) ]	delete all columns in DataFrame <name3> that do not hold a non - zero value in its records
<name1> . loc [ : , ( ( <name1> != 0 ) . any ( axis = 0 ) ) ]	delete all columns in DataFrame <name1> that do not hold a non - zero value in its records
sorted ( <name2> , key = lambda x : x [ <val1> ] )	sort <name2> multidimensional array <name2> by column with index <val1>
sorted ( <name1> , key = lambda x : x [ <val2> ] )	sort <name1> multidimensional array <name1> by column with index <val2>
[ x . strip ( ) for x in <name5> . <name6> ( <val2>   ) ]	<name6> string <name5> to list conversion by <val2>
[ x . strip ( ) for x in <name1> . <name2> ( <val3>   ) ]	<name2> string <name1> to list conversion by <val3>
<name1> = [ item for item <name6> <name2> if item . <name4> == <name5> ]	Get a list of <name1> <name6> the list <name2> with <name4> equal to <name5>
<name1> = [ item for item <name2> <name3> if item . <name4> == <name5> ]	Get a list of <name1> <name2> the list <name3> with <name4> equal to <name5>
open ( <val1>   , 'w'   ) . write ( '\n'   . join ( '%s %s'     % x for x <name5> <name3> ) )	create a file <val1> with each tuple <name5> the list <name3> written to a line
open ( <val1>   , 'w'   ) . write ( '\n'   . join ( '%s %s'     % x for x <name2> <name3> ) )	create a file <val1> with each tuple <name2> the list <name3> written to a line
<name6> = re . compile ( <val1>   , re . IGNORECASE )	Get multiple matched strings using regex <name6> <val1>
<name1> = re . compile ( <val2>   , re . IGNORECASE )	Get multiple matched strings using regex <name1> <val2>
<name6> = open ( <val5>   , 'r'   ) . <name4> ( )	<name4> a text file <val5> into a string variable <name6>
<name1> = open ( <val2>   , 'r'   ) . <name3> ( )	<name3> a text file <val2> into a string variable <name1>
<name5> . groupby ( [ <val6>   , <val1>   ] ) [ <val4>   ] . unique ( )	Return values for column <val4> after group by on column <val6> and <val1> in dataframe <name5>
<name1> . groupby ( [ <val2>   , <val3>   ] ) [ <val4>   ] . unique ( )	Return values for column <val4> after group by on column <val2> and <val3> in dataframe <name1>
<name4> = [ <name6> . rstrip ( '\n'   ) for <name6> in open ( <val5>   ) ]	read file <val5> <name6> by <name6> into a list <name4>
<name1> = [ <name2> . rstrip ( '\n'   ) for <name2> in open ( <val3>   ) ]	read file <val3> <name2> by <name2> into a list <name1>
df [ <val3>   ] = pd . to_datetime ( df [ <val3>   ] )	convert the dataframe column <val3> from string types to datetime types
df [ <val1>   ] = pd . to_datetime ( df [ <val1>   ] )	convert the dataframe column <val1> from string types to datetime types
[ k for d <name6> <name4> ( <name2> . values ( ) ) for k <name6> d ]	get a <name4> of the keys <name6> each dictionary <name6> a dictionary of dictionaries <name2>
[ k for d <name1> <name2> ( <name3> . values ( ) ) for k <name1> d ]	get a <name2> of the keys <name1> each dictionary <name1> a dictionary of dictionaries <name3>
print ( <val2>   . format ( <name6> ( <val1>   ) ) )	get user <name6> using message <val1> and insert it to the first placeholder in string <val2>
print ( <val1>   . format ( <name2> ( <val3>   ) ) )	get user <name2> using message <val3> and insert it to the first placeholder in string <val1>
<name6> = pd . read_csv ( <val5>   , sep = <val2>   , names = [ <val3>   ] )	create pandas data frame <name6> from txt file <val5> with column <val3> and separator <val2>
<name1> = pd . read_csv ( <val2>   , sep = <val3>   , names = [ <val4>   ] )	create pandas data frame <name1> from txt file <val2> with column <val4> and separator <val3>
<name6> . system ( )	get the <name6> OS name
<name1> . system ( )	get the <name1> OS name
<name4> = sorted ( <name4> , key = lambda x : <name6> ( x ) )	sort list <name4> in ascending order based on its elements '  <name6> values
<name1> = sorted ( <name1> , key = lambda x : <name2> ( x ) )	sort list <name1> in ascending order based on its elements '  <name2> values
re . search ( 'name (.*)'   , <name6> )	finding words in string <name6> after keyword 'name'
re . search ( 'name (.*)'   , <name1> )	finding words in string <name1> after keyword 'name'
db . <name3> . find ( {}  , {  <val5>   : False }  )	Find all records from <name3> <name3> without extracting mongo id <val5>
db . <name1> . find ( {}  , {  <val2>   : False }  )	Find all records from <name1> <name1> without extracting mongo id <val2>
[ row [ 1 ] for row in <name1> ]	Get all the second values from a list of lists <name1>
[ row [ 0 ] for row in <name6> ]	extract first column from <name6> multi - dimensional array <name6>
[ row [ 0 ] for row in <name1> ]	extract first column from <name1> multi - dimensional array <name1>
sorted ( [ '10'   , '3'   , '2'   ] , key = int )	sort list ['10', '3', '2'] in ascending order based on the integer value of its elements
os . path . commonprefix ( [ <val2>   , os . path . realpath ( <name5> ) ] ) == <val2>	check if file <name5> is descendant of directory <val2>
os . path . commonprefix ( [ <val1>   , os . path . realpath ( <name2> ) ] ) == <val1>	check if file <name2> is descendant of directory <val1>
<name1> ( substring <name4> <name3> for substring <name4> <name2> )	check if <name1> element of list <name2> are <name4> <name3> <name3>
<name1> ( substring <name2> <name3> for substring <name2> <name4> )	check if <name1> element of list <name4> are <name2> <name3> <name3>
df = <name2> . DataFrame ( data , columns = [ 'R_Number'   , 'C_Number'   , 'Avg'   , 'Std'   ] )	construct <name2> dataframe from a list of tuples
df = <name1> . DataFrame ( data , columns = [ 'R_Number'   , 'C_Number'   , 'Avg'   , 'Std'   ] )	construct <name1> dataframe from a list of tuples
re . sub ( '^((?:(?!cat).)*cat(?:(?!cat).)*)cat'   , '\\1Bull'   , s )	find and replace 2 nd occurrence of word 'cat' by 'Bull' in a sentence 's'
re . sub ( '^((.*?cat.*?){1})cat'   , '\\1Bull'   , s )	find and replace 2 nd occurrence of word 'cat' by 'Bull' in a sentence 's'
sorted ( <name3> , key = lambda k : int ( k . split ( '_'   ) [ 1 ] ) )	sort list of strings in list <name3> by integer suffix
sorted ( <name1> , key = lambda k : int ( k . split ( '_'   ) [ 1 ] ) )	sort list of strings in list <name1> by integer suffix
sorted ( the_list , key = lambda x : int ( x . split ( <val2>   ) [ <val5> ] ) )	'sort list of strings `the_list` by integer suffix before ' <val2> <val5>
sorted ( the_list , key = lambda x : int ( x . split ( <val1>   ) [ <val2> ] ) )	'sort list of strings `the_list` by integer suffix before ' <val1> <val2>
[ <name6> ( <name2> ) for _ , <name2> <name5> itertools . groupby ( <name4> , lambda x : x . split ( <val3>   ) [ 0 ] ) ]	make a <name6> of lists <name5> which each <name6> <name2> are the elements from <name6> <name4> which have the same characters up to the first <val3> character
[ <name1> ( <name2> ) for _ , <name2> <name3> itertools . groupby ( <name4> , lambda x : x . split ( <val5>   ) [ 0 ] ) ]	make a <name1> of lists <name3> which each <name1> <name2> are the elements from <name1> <name4> which have the same characters up to the first <val5> character
<name5> . get ( <val2>   )	Load the url <val2> in selenium webdriver <name5>
<name1> . get ( <val2>   )	Load the url <val2> in selenium webdriver <name1>
( <name2> . <name2> . utcnow ( ) - <name2> . timedelta ( hours = 11 ) ) . <name6>	using python ' s <name2> module , get the <name6> that utc -11 is currently in
( <name1> . <name1> . utcnow ( ) - <name1> . timedelta ( hours = 11 ) ) . <name2>	using python ' s <name1> module , get the <name2> that utc -11 is currently in
Counter ( [ 1 , 2 , 2 , 2 , 3 ] ) - Counter ( [ 1 , 2 ] )	Get the difference between two lists [1, 2, 2, 2, 3] and [1, 2] that may have duplicate values
re . sub ( '<[^>]*>'   , ''   , <name3> )	remove tags from a string <name3>
re . sub ( '<[^>]*>'   , ''   , <name1> )	remove tags from a string <name1>
<name6> . <name3> ( <val5>   )	<name3> string <name6> as <val5>
<name1> . <name2> ( <val3>   )	<name2> string <name1> as <val3>
User . objects . <name2> ( userprofile__level__gte = <val4> )	<name2> Users by field userprofile with level greater than or equal to <val4>
User . objects . <name1> ( userprofile__level__gte = <val2> )	<name1> Users by field userprofile with level greater than or equal to <val2>
soup . findAll ( <name3> = re . compile ( 'para$'   ) )	BeautifulSoup find a tag whose <name3> ends with string 'para'
soup . findAll ( <name1> = re . compile ( 'para$'   ) )	BeautifulSoup find a tag whose <name1> ends with string 'para'
'soup . select ( ' <name4> [ <name6> ^ = '' value_xxx_c_1_f_8_a_ '' ] ' )'	select <name4> tags whose <name6> s begin with 'value_xxx_c_1_f_8_a_'
'soup . select ( ' <name1> [ <name2> ^ = '' value_xxx_c_1_f_8_a_ '' ] ' )'	select <name1> tags whose <name2> s begin with 'value_xxx_c_1_f_8_a_'
cleaned_list = [ x for x <name5> <name6> <name3> x is not <name4> ]	delete an item <name4> <name5> a list <name6> <name3> it exists
cleaned_list = [ x for x <name1> <name2> <name3> x is not <name4> ]	delete an item <name4> <name1> a list <name2> <name3> it exists
var = input ( <val4>   )	'print ' <val4> ' to console, and read user input to `var`'
var = input ( <val1>   )	'print ' <val1> ' to console, and read user input to `var`'
<name1> . <name3> ( <val6> )	<name3> <val6> to list <name1>
<name1> . <name2> ( <val3> )	<name2> <val3> to list <name1>
<name6> . <name5> ( [ <val2> , <val1> ] )	<name5> a list [ <val2> , <val1> ] to list <name6>
<name1> . <name2> ( [ <val3> , <val4> ] )	<name2> a list [ <val3> , <val4> ] to list <name1>
<name2> . <name6> ( <val5> , <val3> )	<name6> <val3> to index <val5> of list <name2>
<name1> . <name2> ( <val3> , <val4> )	<name2> <val4> to index <val3> of list <name1>
plt . savefig ( <val2>   , bbox_inches = 'tight'   )	remove white space padding around a saved image <val2> in matplotlib
plt . savefig ( <val1>   , bbox_inches = 'tight'   )	remove white space padding around a saved image <val1> in matplotlib
( <name5> + <name4> )	concatenate lists <name5> and <name4>
( <name1> + <name2> )	concatenate lists <name1> and <name2>
<name4> = <name6> [ ( <name6> [ <name1> ] == <val2>   ) &   ( <name6> [ <name5> ] == <val3> ) ]	create dataframe <name4> containing data of dataframe <name6> where column <name1> is equal to <val2> and column <name5> is equal to <val3>
<name1> = <name2> [ ( <name2> [ <name3> ] == <val4>   ) &   ( <name2> [ <name5> ] == <val6> ) ]	create dataframe <name1> containing data of dataframe <name2> where column <name3> is equal to <val4> and column <name5> is equal to <val6>
<name5> ( '\\'  )	<name5> backslash
<name1> ( '\\'  )	<name1> backslash
<name2> . <name6> ( <val4>   , np . nan )	<name6> <val4> in pandas dataframe <name2> with np.nan
<name1> . <name2> ( <val3>   , np . nan )	<name2> <val3> in pandas dataframe <name1> with np.nan
<name1> = <name1> . drop ( <val2>   , 1 )	delete column <val2> from dataframe <name1>
<name5> . drop ( <name5> . <name4> [ [ 0 , <val1> , 3 ] ] , axis = <val1> )	delete <val1> st , 2 nd and 4 th <name4> from dataframe <name5>
<name1> . drop ( <name1> . <name2> [ [ 0 , <val3> , 3 ] ] , axis = <val3> )	delete <val3> st , 2 nd and 4 th <name2> from dataframe <name1>
<name2> . drop ( <val5>   , axis = 1 , inplace = True )	delete a column <val5> without having to reassign from pandas data frame <name2>
<name1> . drop ( <val2>   , axis = 1 , inplace = True )	delete a column <val2> without having to reassign from pandas data frame <name1>
parser = <name5> . ArgumentParser ( allow_abbrev = False )	disable abbreviation in <name5>
parser = <name1> . ArgumentParser ( allow_abbrev = False )	disable abbreviation in <name1>
feature3 = [ d . get ( <val1>   ) for d in <name3> . dic ]	extract dictionary values by key <val1> from data frame <name3>
feature3 = [ d . get ( <val1>   ) for d in <name2> . dic ]	extract dictionary values by key <val1> from data frame <name2>
<name4> . loc [ gb . groups [ <val6>   ] , ( <val3>   , <val2>   ) ]	get data of column <val3> and column <val2> in dataframe <name4> where column <val3> is equal to <val6>
<name1> . loc [ gb . groups [ <val2>   ] , ( <val3>   , <val4>   ) ]	get data of column <val3> and column <val4> in dataframe <name1> where column <val3> is equal to <val2>
<name6> ( '[%s, %s, %s]'     % ( 1 , 2 , 3 ) )	<name6> '[1, 2, 3]'
<name1> ( '[%s, %s, %s]'     % ( 1 , 2 , 3 ) )	<name1> '[1, 2, 3]'
print ( '[{0}, {1}, {2}]'   . format ( 1 , 2 , 3 ) )	Display 1 2 3 as a list of string
[ v for k , v in list ( <name1> . items ( ) ) if <val6>     in k ]	get values from a dictionary <name1> whose key contains the string <val6>
[ v for k , v in list ( <name1> . items ( ) ) if <val2>     in k ]	get values from a dictionary <name1> whose key contains the string <val2>
<name4> . <name2> ( ( <val1>   , <val6>   ) , axis = 1 )	<name2> a single subcolumn <val6> in column <val1> from a dataframe <name4>
<name1> . <name2> ( ( <val3>   , <val4>   ) , axis = 1 )	<name2> a single subcolumn <val4> in column <val3> from a dataframe <name1>
df . drop ( <val6>   , <name1> = 1 , axis = 1 )	dropping all columns named <val6> from a multiindex 'df' , across all <name1> .
df . drop ( <val1>   , <name2> = 1 , axis = 1 )	dropping all columns named <val1> from a multiindex 'df' , across all <name2> .
{  _key : <name6> ( _key ) for _key in <name3> }	build dictionary with keys of dictionary <name3> as keys and values of returned value of function <name6> with correlating key as parameter
{  _key : <name1> ( _key ) for _key in <name2> }	build dictionary with keys of dictionary <name2> as keys and values of returned value of function <name1> with correlating key as parameter
browser . find_element_by_class_name ( <val5>   ) . <name6> ( )	<name6> on the text button <val5> using selenium python
browser . find_element_by_class_name ( <val1>   ) . <name2> ( )	<name2> on the text button <val1> using selenium python
dict ( ( k , d . get ( k , ''   ) + <name4> . get ( k , ''   ) ) for k in <name2> )	combine two dictionaries d  and <name4> , concatenate string values with identical <name2>
dict ( ( k , d . get ( k , ''   ) + <name1> . get ( k , ''   ) ) for k in <name2> )	combine two dictionaries d  and <name1> , concatenate string values with identical <name2>
<name5> ( pformat ( <name2> ) ) == <name5> ( pformat ( <name6> ) )	generate unique equal <name5> for equal dictionaries <name2> and <name6>
<name1> ( pformat ( <name2> ) ) == <name1> ( pformat ( <name3> ) )	generate unique equal <name1> for equal dictionaries <name2> and <name3>
<name5> ( map ( tuple , [ [ 'tom'   , 'cat'   ] , [ 'jerry'   , 'mouse'   ] , [ 'spark'   , 'dog'   ] ] ) )	convert nested <name5> of lists [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']] into a <name5> of tuples
<name1> ( map ( tuple , [ [ 'tom'   , 'cat'   ] , [ 'jerry'   , 'mouse'   ] , [ 'spark'   , 'dog'   ] ] ) )	convert nested <name1> of lists [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']] into a <name1> of tuples
<name1> . groupby ( [ <val3>   , <val5>   , <val2>   ] , as_index = False ) [ <val6>   ] . <name4> ( )	<name4> the column <val6> along the other columns <val3> , <val5> , <val2> in a pandas data frame <name1>
<name1> . groupby ( [ <val2>   , <val3>   , <val4>   ] , as_index = False ) [ <val5>   ] . <name6> ( )	<name6> the column <val5> along the other columns <val2> , <val3> , <val4> in a pandas data frame <name1>
<name2> . <name5> ( )	change string <name2> to <name5> case
<name1> . <name2> ( )	change string <name1> to <name2> case
dict ( item . <name1> ( '='   ) for item in <name3> . <name1> ( <val4>   ) )	<name1> a string <name3> by <val4> and convert to a dictionary
dict ( item . <name1> ( '='   ) for item in <name2> . <name1> ( <val3>   ) )	<name1> a string <name2> by <val3> and convert to a dictionary
<name6> . addheaders = [ ( 'Cookie'   , 'cookiename=cookie value'   ) ]	Add header ('Cookie', 'cookiename=cookie value') to mechanize browser <name6>
<name1> . addheaders = [ ( 'Cookie'   , 'cookiename=cookie value'   ) ]	Add header ('Cookie', 'cookiename=cookie value') to mechanize browser <name1>
<name2> [ <val4>   ] = <name2> [ <val4>   ] . str [ 0 ]	set data in column <val4> of dataframe <name2> equal to first element of each list
<name1> [ <val2>   ] = <name1> [ <val2>   ] . str [ 0 ]	set data in column <val2> of dataframe <name1> equal to first element of each list
<name1> [ <val5>   ] = <name1> [ <val5>   ] . str . <name6> ( <val2> )	<name6> element at index <val2> of each list in column <val5> of dataframe <name1>
<name1> [ <val2>   ] = <name1> [ <val2>   ] . str . <name3> ( <val4> )	<name3> element at index <val4> of each list in column <val2> of dataframe <name1>
<name4> [ <val2>   ] = <name4> [ <val2>   ] . str . strip ( <val5>   )	remove square bracket <val5> from pandas dataframe <name4> column <val2>
<name1> [ <val2>   ] = <name1> [ <val2>   ] . str . strip ( <val3>   )	remove square bracket <val3> from pandas dataframe <name1> column <val2>
'' '' ' ' ', ' ' ' '' ' . join ( [ ' {} _ {} ' . format ( k , v ) for k , v in d . items ( ) ] )'	Get a string with string formatting from dictionary d
sum ( sum ( x ) for x <name1> <name5> )	Sum of sums of each list , <name1> a list of <name5> named 'lists' .
sum ( sum ( x ) for x <name1> <name2> )	Sum of sums of each list , <name1> a list of <name2> named 'lists' .
any ( np . equal ( <name4> , [ 1 , 2 ] ) . all ( 1 ) )	Check whether <name4> numpy array <name4> contains <name4> given row [1, 2]
any ( np . equal ( <name1> , [ 1 , 2 ] ) . all ( 1 ) )	Check whether <name1> numpy array <name1> contains <name1> given row [1, 2]
len ( set ( <name1> ) ) == 1	check if all elements in list <name1> are the same
[ map ( int , x . <name6> ( '\t'   ) ) for x in <name1> . rstrip ( ) . <name6> ( <val2>   ) ]	<name6> a string <name1> at line breaks <val2>
[ map ( int , x . <name1> ( '\t'   ) ) for x in <name2> . rstrip ( ) . <name1> ( <val3>   ) ]	<name1> a string <name2> at line breaks <val3>
t = sorted ( <name5> ( <name2> . items ( ) ) , key = lambda x : x [ 1 ] )	sort <name2> dictionary <name2> by values that are <name5> type
t = sorted ( <name1> ( <name2> . items ( ) ) , key = lambda x : x [ 1 ] )	sort <name2> dictionary <name2> by values that are <name1> type
<name4> . replace ( ''   , <name6> ) [ len ( <name6> ) : - len ( <name6> ) ]	insert string <name6> after each character of <name4>
<name1> . replace ( ''   , <name2> ) [ len ( <name2> ) : - len ( <name2> ) ]	insert string <name2> after each character of <name1>
<name4> ( itertools . combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) )	getting every possible combination of two elements in a <name4>
<name1> ( itertools . combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) )	getting every possible combination of two elements in a <name1>
'' '' ' ' 'x = {}' ' ' '' ' . format ( x . decode ( ' utf8 ' ) ) . encode ( ' utf8 ' )'	get a utf -8 string literal representation of byte string x
isinstance ( <name2> , int )	check if <name2> is an integer
isinstance ( <name1> , int )	check if <name1> is an integer
( type ( <name5> ) == int )	check if <name5> is an integer
( type ( <name1> ) == int )	check if <name1> is an integer
winsound . PlaySound ( <val1>   , winsound . SND_FILENAME )	play the wav file <val1>
[ <name2> ( <name4> ) for _ in range ( <name3> ) ]	create a list containing the <name3> <name2> values of generator <name4>
[ <name1> ( <name2> ) for _ in range ( <name3> ) ]	create a list containing the <name3> <name1> values of generator <name2>
<name2> ( itertools . islice ( <name6> , 0 , <name3> , 1 ) )	get <name2> of <name3> next values of a generator <name6>
<name1> ( itertools . islice ( <name2> , 0 , <name3> , 1 ) )	get <name1> of <name3> next values of a generator <name2>
set ( <name5> ) . intersection ( <name2> )	compare two lists in python <name5> and <name2> and return matches
set ( <name1> ) . intersection ( <name2> )	compare two lists in python <name1> and <name2> and return matches
print ( ''   . join ( map ( str , <name1> ) ) )	convert list <name1> into a string of its elements
re . <name4> ( <val1>   , <val2>   )	<name4> regex pattern <val1> on string <val2>
re . <name1> ( <val2>   , <val3>   )	<name1> regex pattern <val2> on string <val3>
<name1> . import_module ( '.c'   , 'a.b'   )	import a nested module c.py within b within a with <name1>
<name3> . import_module ( <val5>   )	import a module <val5> with <name3> .import_module in python 2
<name1> . import_module ( <val2>   )	import a module <val2> with <name1> .import_module in python 2
<name6> = np . <name3> ( <name6> )	Convert <name3> <name6> to numpy <name3>
<name1> = np . <name2> ( <name1> )	Convert <name2> <name1> to numpy <name2>
<name4> . find_all ( <val3>   , class_ = re . compile ( <val6>   ) )	Find all <val3> tags whose classes has the value <val6> in a beautiful <name4> object <name4>
<name1> . find_all ( <val2>   , class_ = re . compile ( <val3>   ) )	Find all <val2> tags whose classes has the value <val3> in a beautiful <name1> object <name1>
[ [ ] for _ in range ( <name6> ) ]	a sequence of empty lists of length <name6>
[ [ ] for _ in range ( <name1> ) ]	a sequence of empty lists of length <name1>
dict ( ( k , globals ( ) [ k ] ) for k in ( <val5>   , <val4>   ) )	create dictionary from list of variables <val5> and <val4> already defined
dict ( ( k , globals ( ) [ k ] ) for k in ( <val1>   , <val2>   ) )	create dictionary from list of variables <val1> and <val2> already defined
MyModel . objects . order_by ( '?'   ) [ : 2 ]	get two random records from model 'MyModel' in Django
'' '' ' ' 'Hello {user[name]}' ' ' '' ' . format ( ** { ' user ' : { ' name ' : ' Markus ' }} )'	Print a dictionary {'user': {'name': 'Markus'}} with string formatting
<name3> = {  t [ 0 ] : t for t <name4> <name6> }	create a dictionary <name3> containing each tuple <name4> list <name6> as values and the tuple ' s first element as the corresponding key
<name1> = {  t [ 0 ] : t for t <name2> <name3> }	create a dictionary <name1> containing each tuple <name2> list <name3> as values and the tuple ' s first element as the corresponding key
randint ( <val2> , <val4> )	Generate a random integer between <val2> and <val4>
randint ( <val1> , <val2> )	Generate a random integer between <val1> and <val2>
<name3> . randint ( <name5> , <name2> )	Generate <name5> <name3> integer between <name5> and <name2>
<name1> . randint ( <name2> , <name3> )	Generate <name2> <name1> integer between <name2> and <name3>
print ( ( <name5> . randint ( <val1> , <val6> ) ) )	Generate <name5> integers between <val1> and <val6>
print ( ( <name1> . randint ( <val2> , <val3> ) ) )	Generate <name1> integers between <val2> and <val3>
'' '' ' ' '' ' ' '' ' . join ( reversed ( [ a [ i : i + 2 ] for i in range ( 0 , len ( a ) , 2 ) ] ) )'	reverse a string a by 2 characters at a time
pd . pivot_table ( <name4> , <name6> = <name4> . <name6> . date , <name2> = <name4> . <name6> . <name5> , <name3> = <val1>   )	transform <name5> series <name4> into a pivot table aggregated by column <val1> using column df.index.date as <name6> and <name3> of column df.index.time as <name2>
pd . pivot_table ( <name1> , <name2> = <name1> . <name2> . date , <name3> = <name1> . <name2> . <name4> , <name5> = <val6>   )	transform <name4> series <name1> into a pivot table aggregated by column <val6> using column df.index.date as <name2> and <name5> of column df.index.time as <name3>
any ( item [ 2 ] == 0 for item in items )	'check if the third element of all the lists in a list ' 'items' ' is equal to zero.'
[ x for x <name6> items <name3> x [ 2 ] == 0 ]	Find all the lists from a lists of list 'items' <name3> third element <name6> all sub - lists is '0'
[ x for x <name1> items <name2> x [ 2 ] == 0 ]	Find all the lists from a lists of list 'items' <name2> third element <name1> all sub - lists is '0'
sorted ( list ( <name6> . items ( ) ) , <name3> = lambda x : x [ 1 ] [ <val2>   ] , reverse = True )	sort dictionary of dictionaries <name6> according to the <name3> <val2>
sorted ( list ( <name1> . items ( ) ) , <name2> = lambda x : x [ 1 ] [ <val3>   ] , reverse = True )	sort dictionary of dictionaries <name1> according to the <name2> <val3>
plt . yscale ( 'log'   , nonposy = 'clip'   )	plot a data logarithmically in y axis
os . listdir ( <val1>   )	list the contents of a directory <val1>
os . listdir ( <val4>   )	list all the contents of the directory <val4> .
os . listdir ( <val1>   )	list all the contents of the directory <val1> .
pd . concat ( [ <name5> , <name3> . <name2> ] , axis = 1 )	merge a pandas data frame <name5> and column <name2> in pandas data frame <name3> into single
pd . concat ( [ <name1> , <name2> . <name3> ] , axis = 1 )	merge a pandas data frame <name1> and column <name3> in pandas data frame <name2> into single
[ x [ 0 ] for x <name4> <name1> ]	get value of first index of each element <name4> list <name1>
[ x [ 0 ] for x <name1> <name2> ]	get value of first index of each element <name1> list <name2>
[ i [ 0 ] for i <name1> <name3> ]	python how to get every first element <name1> 2 dimensional list <name3>
[ i [ 0 ] for i <name1> <name2> ]	python how to get every first element <name1> 2 dimensional list <name2>
re . sub ( '(?<=[a-z])\\r?\\n'   , ' '   , <name3> )	remove line breaks from string <name3> using regex
re . sub ( '(?<=[a-z])\\r?\\n'   , ' '   , <name1> )	remove line breaks from string <name1> using regex
<name1> . open ( <val5>   , 'rt'   , encoding = 'utf-8'   )	Open <name1> - compressed file encoded as utf -8 <val5> in text mode
<name1> . open ( <val2>   , 'rt'   , encoding = 'utf-8'   )	Open <name1> - compressed file encoded as utf -8 <val2> in text mode
<name4> ( [ <val6>   , <val5>   ] ) . issubset ( [ <val5>   , <val6>   , 'foo'   , 'bar'   ] )	test if either of strings <val6> or <val5> are members of the <name4> of strings , ['b', 'a', 'foo', 'bar']
<name1> ( [ <val2>   , <val3>   ] ) . issubset ( [ <val3>   , <val2>   , 'foo'   , 'bar'   ] )	test if either of strings <val2> or <val3> are members of the <name1> of strings , ['b', 'a', 'foo', 'bar']
<name2> ( x <name4> [ 'b'   , 'a'   , 'foo'   , 'bar'   ] for x <name4> [ 'a'   , 'b'   ] )	Check if <name2> the values <name4> a list ['a', 'b'] are present <name4> another list ['b', 'a', 'foo', 'bar']
<name1> ( x <name2> [ 'b'   , 'a'   , 'foo'   , 'bar'   ] for x <name2> [ 'a'   , 'b'   ] )	Check if <name1> the values <name2> a list ['a', 'b'] are present <name2> another list ['b', 'a', 'foo', 'bar']
line . translate ( None , <val5>   )	'Remove characters ' <val5> ' from a string `line`'
line . translate ( None , <val1>   )	'Remove characters ' <val1> ' from a string `line`'
line = re . sub ( '[!@#$]'   , ''   , line )	'Remove characters ' '!@#$' ' from a string `line`'
string . replace ( <val1>   , ''   )	'Remove string ' <val1> ' from string `string`'
<name5> = <name5> . replace ( <name4> , ''   )	Remove character <name4> from <name5> string <name5>
<name1> = <name1> . replace ( <name2> , ''   )	Remove character <name2> from <name1> string <name1>
<name1> = <name1> . replace ( char , ''   )	Remove characters in b from <name1> string <name1>
<name5> = <name5> . translate ( <name6> . maketrans ( ''   , ''   ) , <val3>   )	Remove characters in <val3> from a <name6> <name5>
<name1> = <name1> . translate ( <name2> . maketrans ( ''   , ''   ) , <val3>   )	Remove characters in <val3> from a <name2> <name1>
pd . concat ( [ df , pd . get_dummies ( df , ''   , ''   ) . astype ( int ) ] , axis = 1 ) [ <name4> ]	binarize the values in columns of list <name4> in a pandas data frame
pd . concat ( [ df , pd . get_dummies ( df , ''   , ''   ) . astype ( int ) ] , axis = 1 ) [ <name1> ]	binarize the values in columns of list <name1> in a pandas data frame
[ <val6> , <val3> , <val1> , <val5> ]	store integer <val6> , <val3> , <val1> and <val5> in a list
[ <val1> , <val2> , <val3> , <val4> ]	store integer <val1> , <val2> , <val3> and <val4> in a list
globals ( ) [ <val4>   ] = <val3>	define global variable <val4> with value <val3>
globals ( ) [ <val1>   ] = <val2>	define global variable <val1> with value <val2>
re . sub ( '([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))'   , '\\1 '   , <name3> )	insert spaces before capital letters in string <name3>
re . sub ( '([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))'   , '\\1 '   , <name1> )	insert spaces before capital letters in string <name1>
<name4> ( <val6>   . upper ( ) )	<name4> unicode string <val6> in uppercase
<name1> ( <val2>   . upper ( ) )	<name1> unicode string <val2> in uppercase
[ l . split ( '\\'  ) [ -1 ] for l in <name5> ]	get last element of string splitted by '\\'  from list of strings <name5>
[ l . split ( '\\'  ) [ -1 ] for l in <name1> ]	get last element of string splitted by '\\'  from list of strings <name1>
dict ( zip ( keys , values ) )	combine two sequences into a dictionary
formatter = <name2> . Formatter ( '%(asctime)s;%(levelname)s;%(message)s'   )	customize the time format in python <name2>
formatter = <name1> . Formatter ( '%(asctime)s;%(levelname)s;%(message)s'   )	customize the time format in python <name1>
<name5> . <name6> ( 'test.sh otherfunc'   )	<name6> a function otherfunc inside a bash script test.sh using <name5>
<name1> . <name2> ( 'test.sh otherfunc'   )	<name2> a function otherfunc inside a bash script test.sh using <name1>
'' '' ' ' ' ' ' ' '' ' . join ( foo . split ( ) )'	remove multiple spaces in a string foo
<name5> ( '{0:0b}'   . format ( <val4> ) )	convert decimal <val4> to a <name5> of its binary values
<name1> ( '{0:0b}'   . format ( <val2> ) )	convert decimal <val2> to a <name1> of its binary values
[ int ( x ) for x in <name5> ( '{0:0b}'   . format ( <val6> ) ) ]	convert decimal integer <val6> to a <name5> of its binary values as elements
[ int ( x ) for x in <name1> ( '{0:0b}'   . format ( <val2> ) ) ]	convert decimal integer <val2> to a <name1> of its binary values as elements
[ int ( x ) for x in bin ( <val5> ) [ 2 : ] ]	convert decimal <val5> to binary list
[ int ( x ) for x in bin ( <val1> ) [ 2 : ] ]	convert decimal <val1> to binary list
dict ( zip ( <name2> , map ( <name1> . <name6> , <name2> ) ) )	<name6> key - value pairs in dictionary <name1> for all keys in list <name2> in the order they appear in <name2>
dict ( zip ( <name1> , map ( <name2> . <name3> , <name1> ) ) )	<name3> key - value pairs in dictionary <name2> for all keys in list <name1> in the order they appear in <name1>
numpy . dstack ( numpy . meshgrid ( <name6> , <name3> ) ) . reshape ( -1 , <val2> )	cartesian product of <name6> and <name3> array points into single array of <val2> d points
numpy . dstack ( numpy . meshgrid ( <name1> , <name2> ) ) . reshape ( -1 , <val3> )	cartesian product of <name1> and <name2> array points into single array of <val3> d points
<name2> . implicitly_wait ( <val1> )	selenium wait for <name2> <name2> <val1> seconds before throwing a NoSuchElementExceptions exception
<name1> . implicitly_wait ( <val2> )	selenium wait for <name1> <name1> <val2> seconds before throwing a NoSuchElementExceptions exception
driver . switch_to_frame ( <val3>   )	selenium webdriver switch to frame <val3>
driver . switch_to_frame ( <val1>   )	selenium webdriver switch to frame <val1>
time . strftime ( <val2>   )	format current date to pattern <val2>
time . strftime ( <val1>   )	format current date to pattern <val1>
sorted ( [ '14:10:01'   , '03:12:08'   ] )	sort list ['14:10:01', '03:12:08']
re . findall ( <val2>   , <name5> )	find all occurrences of regex pattern <val2> in string <name5>
re . findall ( <val1>   , <name2> )	find all occurrences of regex pattern <val1> in string <name2>
<name1> . groupby ( [ 'key'   , 'year'   ] ) . size ( ) . reset_index ( )	remove duplicate rows from dataframe <name1> and calculate their frequency
sorted ( list ( <name6> . items ( ) ) , key = operator . itemgetter ( 1 ) )	sort <name6> <name6> in ascending order by its values
sorted ( list ( <name1> . items ( ) ) , key = operator . itemgetter ( 1 ) )	sort <name1> <name1> in ascending order by its values
sorted ( iter ( <name2> . items ( ) ) , key = lambda x : x [ 1 ] )	Iterate over dictionary <name2> in ascending order of values
sorted ( iter ( <name1> . items ( ) ) , key = lambda x : x [ 1 ] )	Iterate over dictionary <name1> in ascending order of values
sorted ( list ( <name3> . items ( ) ) , key = lambda x : x [ 1 ] )	iterate over a python <name3> , ordered by values
sorted ( list ( <name1> . items ( ) ) , key = lambda x : x [ 1 ] )	iterate over a python <name1> , ordered by values
np . <name1> ( <name4> , [ -1 ] )	<name1> 1 d array <name4> into 2 d array at the last element
np . <name1> ( <name2> , [ -1 ] )	<name1> 1 d array <name2> into 2 d array at the last element
<name1> . <name6> ( <name5> = <val2>   , <name3> = <val4>   )	convert dataframe <name1> into a <name6> table using column <val2> as <name5> and values of column <val4> as <name3>
<name1> . <name2> ( <name3> = <val4>   , <name5> = <val6>   )	convert dataframe <name1> into a <name2> table using column <val4> as <name3> and values of column <val6> as <name5>
df [ ( df [ <val1>   ] >   <val3> ) |   ( df [ <val6>   ] <   <val4> ) ]	select all rows from pandas DataFrame 'df' where the value in column <val1> is greater than <val3> or less than <val4> in column <val6> .
df [ ( df [ <val1>   ] >   <val2> ) |   ( df [ <val3>   ] <   <val4> ) ]	select all rows from pandas DataFrame 'df' where the value in column <val1> is greater than <val2> or less than <val4> in column <val3> .
[ <name2> ( a ) for a in <name6> ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ]	Get the <name6> output as <name2> from the lists [1, 2, 3] , [4, 5, 6] , [7, 8, 9]
[ <name1> ( a ) for a in <name2> ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ]	Get the <name2> output as <name1> from the lists [1, 2, 3] , [4, 5, 6] , [7, 8, 9]
print ( <name1> . loc [ <name1> [ <val6>   ] == <val2>   ] )	select rows of dataframe <name1> whose value for column <val6> is <val2>
print ( <name1> . loc [ <name1> [ <val2>   ] == <val3>   ] )	select rows of dataframe <name1> whose value for column <val2> is <val3>
df . loc [ df [ <val3>   ] != <name4> ]	select rows whose column value in column <val3> does not equal <name4> in pandas data frame
df . loc [ df [ <val1>   ] != <name2> ]	select rows whose column value in column <val1> does not equal <name2> in pandas data frame
<name2> . loc [ ~  <name2> [ <val3>   ] . isin ( <name5> ) ]	select rows from a dataframe <name2> whose value for column <val3> is not in <name5>
<name1> . loc [ ~  <name1> [ <val2>   ] . isin ( <name3> ) ]	select rows from a dataframe <name1> whose value for column <val2> is not in <name3>
<name4> . loc [ <name4> [ <val3>   ] == <name1> ]	select all rows whose values in a column <val3> equals a scalar <name1> in pandas data frame object <name4>
<name1> . loc [ <name1> [ <val2>   ] == <name3> ]	select all rows whose values in a column <val2> equals a scalar <name3> in pandas data frame object <name1>
print ( df . loc [ df [ <val5>   ] . isin ( [ <val4>   , <val3>   ] ) ] )	'Select rows whose value of the ' <val5> ' column is ' <val4> ' or ' <val3> ' in the DataFrame `df`'
print ( df . loc [ df [ <val1>   ] . isin ( [ <val2>   , <val3>   ] ) ] )	'Select rows whose value of the ' <val1> ' column is ' <val2> ' or ' <val3> ' in the DataFrame `df`'
'' '' ' ' '' ' ' '' ' . join ( map ( lambda x : x * 7 , ' map ' ) )'	repeat every character for 7 times in string 'map'
os . rmdir ( )	delete an empty directory
shutil . rmtree ( <name5> , ignore_errors = False , onerror = None )	recursively delete all contents in directory <name5>
shutil . rmtree ( <name1> , ignore_errors = False , onerror = None )	recursively delete all contents in directory <name1>
os . removedirs ( <name3> )	recursively remove folder <name3>
os . removedirs ( <name1> )	recursively remove folder <name1>
<name3> . loc [ len ( <name3> ) ] = [ '8/19/2014'   , 'Jun'   , 'Fly'   , '98765'   ]	Add row ['8/19/2014', 'Jun', 'Fly', '98765'] to dataframe <name3>
<name1> . loc [ len ( <name1> ) ] = [ '8/19/2014'   , 'Jun'   , 'Fly'   , '98765'   ]	Add row ['8/19/2014', 'Jun', 'Fly', '98765'] to dataframe <name1>
glob . glob ( '*'   )	list all files in a current directory
glob . glob ( '[!hello]*.txt'   )	List all the files that doesn ' t contain the name hello
glob . glob ( <val6>   )	List all the files that matches the pattern <val6>
glob . glob ( <val1>   )	List all the files that matches the pattern <val1>
eval ( <val5>   )	evaluate the expression <val5>
eval ( <val1>   )	evaluate the expression <val1>
<name3> = [ x [ : ] for x in <name6> ]	Copy list <name6> and name it <name3>
<name1> = [ x [ : ] for x in <name2> ]	Copy list <name2> and name it <name1>
'' '' ' ' '{:.50f}' ' ' '' ' . format ( float ( a [ 0 ] / a [ 1 ] ) )'	convert scientific notation of variable a to decimal
<name6> . to_sparse ( 0 )	convert dataframe <name6> to integer - type sparse object
<name1> . to_sparse ( 0 )	convert dataframe <name1> to integer - type sparse object
print ( [ <name4> . <name3> <name6> <name4> <name2> <name5> ] )	display attribute <name3> <name6> each object <name4> <name2> list <name5>
print ( [ <name1> . <name2> <name3> <name1> <name4> <name5> ] )	display attribute <name2> <name3> each object <name1> <name4> list <name5>
sum ( 1 if <name2> [ <val5>   ] else 0 for <name2> <name6> s )	count the number of True values associated with key <val5> <name6> dictionary <name2>
sum ( 1 if <name1> [ <val2>   ] else 0 for <name1> <name3> s )	count the number of True values associated with key <val2> <name3> dictionary <name1>
<name3> ( d [ 'success'   ] <name2> d in <name4> )	get the <name3> of values associated with the key ‘ success ’  <name2> a list of dictionaries <name4>
<name1> ( d [ 'success'   ] <name2> d in <name3> )	get the <name1> of values associated with the key ‘ success ’  <name2> a list of dictionaries <name3>
imp . find_module ( <val3>   ) [ 1 ]	get complete path of a module named <val3>
imp . find_module ( <val1>   ) [ 1 ]	get complete path of a module named <val1>
( bool ( <name4> ) != bool ( <name1> ) )	get logical xor of <name4> and <name1>
( bool ( <name1> ) != bool ( <name2> ) )	get logical xor of <name1> and <name2>
( ( <name5> <name2> ( not <name1> ) ) or ( ( not <name5> ) <name2> <name1> ) )	get logical xor of <name5> <name2> <name1>
( ( <name1> <name2> ( not <name3> ) ) or ( ( not <name1> ) <name2> <name3> ) )	get logical xor of <name1> <name2> <name3>
( bool ( <name3> ) ^   bool ( <name5> ) )	get logical xor of <name3> and <name5>
( bool ( <name1> ) ^   bool ( <name2> ) )	get logical xor of <name1> and <name2>
<name1> ( bool ( <name5> ) , bool ( <name6> ) )	get logical <name1> of <name5> and <name6>
<name1> ( bool ( <name2> ) , bool ( <name3> ) )	get logical <name1> of <name2> and <name3>
return ( bool ( <name5> ) ^   bool ( <name3> ) )	get the logical xor of two variables <name5> and <name3>
return ( bool ( <name1> ) ^   bool ( <name2> ) )	get the logical xor of two variables <name1> and <name2>
<name4> . sort ( <name5> = operator . itemgetter ( <val3>   ) )	Sort list <name4> in alphabetical order based on the values associated with <name5> <val3> of each dictionary in the list
<name1> . sort ( <name2> = operator . itemgetter ( <val3>   ) )	Sort list <name1> in alphabetical order based on the values associated with <name2> <val3> of each dictionary in the list
re . <name5> ( '\\s*,\\s*|\\s*;\\s*'   , <val2>   )	<name5> a string <val2> using both commas and semicolons as delimeters
re . <name1> ( '\\s*,\\s*|\\s*;\\s*'   , <val2>   )	<name1> a string <val2> using both commas and semicolons as delimeters
[ t . strip ( ) for s in <name1> . split ( <val2>   ) for t in s . split ( <val4>   ) ]	Split a <name1> <name1> by multiple separators <val2> and <val4>
[ t . strip ( ) for s in <name1> . split ( <val2>   ) for t in s . split ( <val3>   ) ]	Split a <name1> <name1> by multiple separators <val2> and <val3>
<name6> = lambda <name1> , <name2> : <name1> + <name2>	make a function <name6> that calculates the sum of two integer variables <name1> and <name2>
<name1> = lambda <name2> , <name3> : <name2> + <name3>	make a function <name1> that calculates the sum of two integer variables <name2> and <name3>
<name3> = [ <name5> ( ) for i in range ( <val1> ) ]	Create list <name3> containing <val1> objects of type <name5>
<name1> = [ <name2> ( ) for i in range ( <val3> ) ]	Create list <name1> containing <val3> objects of type <name2>
{  f [ i + <val1> ] : [ f [ i ] , f [ i + <val1> ] ] for i in range ( <val1> , len ( f ) , <val1> ) }	'Make a dictionary from list `f` which is in the format of four sets of  ' 'val, key, val' <val1>
struct . unpack ( '>q'   , <name3> ) [ 0 ]	convert bytes string <name3> to an unsigned integer
struct . unpack ( '>q'   , <name1> ) [ 0 ]	convert bytes string <name1> to an unsigned integer
pd . concat ( [ <name1> , pd . DataFrame ( <name4> ) ] , axis = 1 )	concatenate a series <name1> onto a dataframe <name4> with pandas
pd . concat ( [ <name1> , pd . DataFrame ( <name2> ) ] , axis = 1 )	concatenate a series <name1> onto a dataframe <name2> with pandas
<name4> . sort ( key = lambda x : x . <name5> )	Sort list <name4> in ascending order based on each of its elements '  attribute <name5>
<name1> . sort ( key = lambda x : x . <name2> )	Sort list <name1> in ascending order based on each of its elements '  attribute <name2>
<name2> . <name3> ( 'div[id$=_answer]'   )	BeautifulSoup <name3> 'div' elements with an id attribute value ending with sub - string '_answer' in HTML parsed string <name2>
<name1> . <name2> ( 'div[id$=_answer]'   )	BeautifulSoup <name2> 'div' elements with an id attribute value ending with sub - string '_answer' in HTML parsed string <name1>
linsolve ( Matrix ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) , ( x , y , z ) )	sympy solve matrix of linear equations (([1, 1, 1, 1], [1, 1, 2, 3])) with variables (x, y, z)
{  k : bigdict [ k ] for k in list ( bigdict . <name1> ( ) ) & {  <val3>   , <val5>   , <val2>  }}	best way to extract subset of key - value pairs with <name1> matching <val3> , <val5> , or <val2> from python dictionary object
{  k : bigdict [ k ] for k in list ( bigdict . <name1> ( ) ) & {  <val2>   , <val3>   , <val4>  }}	best way to extract subset of key - value pairs with <name1> matching <val2> , <val3> , or <val4> from python dictionary object
dict ( ( k , <name4> [ k ] ) for k in ( 'l'   , 'm'   , 'n'   ) )	extract subset of key - value pairs with keys as ('l', 'm', 'n') from dictionary object <name4>
dict ( ( k , <name1> [ k ] ) for k in ( 'l'   , 'm'   , 'n'   ) )	extract subset of key - value pairs with keys as ('l', 'm', 'n') from dictionary object <name1>
{  k : <name1> . get ( k , None ) for k <name3> ( 'l'   , 'm'   , 'n'   ) }	Get items from a dictionary <name1> where the keys are present <name3> ('l', 'm', 'n')
{  k : <name1> . get ( k , None ) for k <name2> ( 'l'   , 'm'   , 'n'   ) }	Get items from a dictionary <name1> where the keys are present <name2> ('l', 'm', 'n')
{  k : <name3> [ k ] <name6> k <name4> ( <val2>   , <val5>   , <val1>   ) }	Extract subset of key value pair <name6> keys <val2> , <val5> , <val1> from <name3> <name4> python 3
{  k : <name1> [ k ] <name2> k <name3> ( <val4>   , <val5>   , <val6>   ) }	Extract subset of key value pair <name2> keys <val4> , <val5> , <val6> from <name1> <name3> python 3
<name6> . page_source	Selenium get the entire <name6> page text
<name1> . page_source	Selenium get the entire <name1> page text
<name6> [ : , ( [ <val5> , <val2> ] ) ]	extracting column <val5> and <val2> from array <name6>
<name1> [ : , ( [ <val2> , <val3> ] ) ]	extracting column <val2> and <val3> from array <name1>
re . sub ( '\\[.*?\\]'   , ''   , <val6>   )	remove all square brackets from string <val6>
re . sub ( '\\[.*?\\]'   , ''   , <val1>   )	remove all square brackets from string <val1>
re . findall ( '\\b(?:b+a)+b+\\b'   , <name2> )	find all substrings in string <name2> composed only of letters a and b where each a is directly preceded and succeeded by b
re . findall ( '\\b(?:b+a)+b+\\b'   , <name1> )	find all substrings in string <name1> composed only of letters a and b where each a is directly preceded and succeeded by b
<name6> = [ tuple ( '{0:.8e}'   . format ( flt ) for flt <name4> sublist ) for sublist <name4> <name1> ]	convert list <name1> of tuples of floats to list <name6> of tuples of strings of floats <name4> scientific notation with eight decimal point precision
<name1> = [ tuple ( '{0:.8e}'   . format ( flt ) for flt <name2> sublist ) for sublist <name2> <name3> ]	convert list <name3> of tuples of floats to list <name1> of tuples of strings of floats <name2> scientific notation with eight decimal point precision
<name2> = [ [ '{0:.8e}'   . format ( flt ) for flt <name6> sublist ] for sublist <name6> <name1> ]	convert list of sublists <name1> of floats to a list of sublists <name2> of strings of integers <name6> scientific notation with 8 decimal points
<name1> = [ [ '{0:.8e}'   . format ( flt ) for flt <name2> sublist ] for sublist <name2> <name3> ]	convert list of sublists <name3> of floats to a list of sublists <name1> of strings of integers <name2> scientific notation with 8 decimal points
<name4> = <name5> ( x [ 0 ] for x <name1> <name6> )	Create a <name5> <name4> containing first element of each <name5> <name1> <name5> <name6>
<name1> = <name2> ( x [ 0 ] for x <name3> <name4> )	Create a <name2> <name1> containing first element of each <name2> <name3> <name2> <name4>
<name4> . <name4> . now ( ) . strftime ( '%a'   )	obtain the current day of the week in a 3 letter format from a <name4> object
<name1> . <name1> . now ( ) . strftime ( '%a'   )	obtain the current day of the week in a 3 letter format from a <name1> object
ord ( <val6>   )	get the ASCII value of a character <val6> as an int
ord ( <val1>   )	get the ASCII value of a character <val1> as an int
ord ( '\u3042'   )	get the ASCII value of a character u 'あ' as an int
ord ( )	get the ASCII value of a character as an int
json . load ( <name6> )	decode JSON string <name6> to a dictionary
json . load ( <name1> )	decode JSON string <name1> to a dictionary
<name4> . drop ( [ <val1>   , <val3>   ] , axis = 1 , inplace = True )	Delete mulitple columns <val1> , <val3> in pandas data frame <name4>
<name1> . drop ( [ <val2>   , <val3>   ] , axis = 1 , inplace = True )	Delete mulitple columns <val2> , <val3> in pandas data frame <name1>
[ <name5> . strip ( ) for <name5> in <name4> ( ) . split ( ','   ) ]	get a list of of elements resulting from splitting user <name4> by commas and stripping white space from each resulting string <name5>
[ <name1> . strip ( ) for <name1> in <name2> ( ) . split ( ','   ) ]	get a list of of elements resulting from splitting user <name2> by commas and stripping white space from each resulting string <name1>
[ int ( d ) for d in str ( bin ( <name6> ) ) [ 2 : ] ]	create a list containing the digits values from binary string <name6> as elements
[ int ( d ) for d in str ( bin ( <name1> ) ) [ 2 : ] ]	create a list containing the digits values from binary string <name1> as elements
<name2> ( len ( word ) for word <name6> <name3> )	get the <name2> string length <name6> list <name3>
<name1> ( len ( word ) for word <name2> <name3> )	get the <name1> string length <name2> list <name3>
len ( max ( <name2> , key = len ) )	get the maximum string length in nested list <name2>
len ( max ( <name1> , key = len ) )	get the maximum string length in nested list <name1>
<name6> . system ( <name5> )	execute <name6> command <name5>
<name1> . system ( <name2> )	execute <name1> command <name2>
<name3> . <name4> ( key = lambda x : x . lower ( ) )	<name4> list <name3> alphabetically
<name1> . <name2> ( key = lambda x : x . lower ( ) )	<name2> list <name1> alphabetically
<name6> . <name1> ( key = str . lower )	<name1> list <name6> in alphabetical order
<name1> . <name2> ( key = str . lower )	<name2> list <name1> in alphabetical order
mylist . <name3> ( )	<name3> a list of strings 'mylist' .
mylist . <name1> ( )	<name1> a list of strings 'mylist' .
<name3> . <name4> ( )	<name4> a <name3> of strings <name3>
<name1> . <name2> ( )	<name2> a <name1> of strings <name1>
<name6> . set_index ( [ <val3>   , <val5>   ] , inplace = True )	Set multi index on columns <val3> and <val5> of data frame <name6> in pandas .
<name1> . set_index ( [ <val2>   , <val3>   ] , inplace = True )	Set multi index on columns <val2> and <val3> of data frame <name1> in pandas .
getattr ( <name1> , <name5> )	get the attribute <name5> from object <name1>
getattr ( <name1> , <name2> )	get the attribute <name2> from object <name1>
<name4> . split ( ' '   , 1 ) [ 1 ]	remove first word in string <name4>
<name1> . split ( ' '   , 1 ) [ 1 ]	remove first word in string <name1>
<name1> = <name5> . Workbook ( <val2>   )	save <name5> file in <val2> path and assign to variable <name1>
<name1> = <name2> . Workbook ( <val3>   )	save <name2> file in <val3> path and assign to variable <name1>
workbook = <name6> . Workbook ( <val3>   )	save <name6> file to <val3> path
workbook = <name1> . Workbook ( <val2>   )	save <name1> file to <val2> path
pyplot . <name4> ( loc = 2 , fontsize = <val6>   )	change <name4> size to <val6> in upper - left location
pyplot . <name1> ( loc = 2 , fontsize = <val2>   )	change <name1> size to <val2> in upper - left location
plot . <name5> ( loc = 2 , prop = {  'size'   : <val3> }  )	change <name5> font size with matplotlib .pyplot to <val3>
plot . <name1> ( loc = 2 , prop = {  'size'   : <val2> }  )	change <name1> font size with matplotlib .pyplot to <val2>
[ <name3> [ i : i + <name2> ] for i in range ( 0 , len ( <name3> ) , <name2> ) ]	split list <name3> into <name2> sized lists
[ <name1> [ i : i + <name2> ] for i in range ( 0 , len ( <name1> ) , <name2> ) ]	split list <name1> into <name2> sized lists
[ <name6> [ i : i + <name3> ] for i in range ( 0 , len ( <name6> ) , <name3> ) ]	split a list <name6> into evenly sized chunks <name3>
[ <name1> [ i : i + <name2> ] for i in range ( 0 , len ( <name1> ) , <name2> ) ]	split a list <name1> into evenly sized chunks <name2>
<name3> [ <val1>   ] . str . contains ( <val4>   )	check if character <val4> exists in a dataframe <name3> cell <val1>
<name1> [ <val2>   ] . str . contains ( <val3>   )	check if character <val3> exists in a dataframe <name1> cell <val2>
're . sub ( ' '[^\\w'   ] ''   , ''   , '' doesn 't this mean it -technically- works?' ' )'	remove all non - word , - whitespace , or - apostrophe characters from string 'doesn't this mean it -technically- works?'
print ( re . findall ( '\\d+'   , '\n'   . join ( re . findall ( '\xab([\\s\\S]*?)\xbb'   , <name6> ) ) ) )	find all digits between two characters \xab and \xbb in a string <name6>
print ( re . findall ( '\\d+'   , '\n'   . join ( re . findall ( '\xab([\\s\\S]*?)\xbb'   , <name1> ) ) ) )	find all digits between two characters \xab and \xbb in a string <name1>
<name4> . reset_index ( ) . <name5> ( x = <val1>   , y = <val6>   )	<name5> data of column <val1> versus column <val6> of dataframe <name4> after resetting its index
<name1> . reset_index ( ) . <name2> ( x = <val3>   , y = <val4>   )	<name2> data of column <val3> versus column <val4> of dataframe <name1> after resetting its index
[ x . encode ( <val5>   ) for x <name4> <name2> ]	Encode each value to <val5> <name4> the list <name2>
[ x . encode ( <val1>   ) for x <name2> <name3> ]	Encode each value to <val1> <name2> the list <name3>
<name4> . concat ( [ df [ <val3>   ] . dropna ( ) , df [ <val1>   ] . dropna ( ) ] ) . reindex_like ( df )	combine two columns <val3> and <val1> in a <name4> data frame
<name1> . concat ( [ df [ <val2>   ] . dropna ( ) , df [ <val3>   ] . dropna ( ) ] ) . reindex_like ( df )	combine two columns <val2> and <val3> in a <name1> data frame
<name6> ( range ( 9 ) )	generate a <name6> of consecutive integers from 0 to 8
<name1> ( range ( 9 ) )	generate a <name1> of consecutive integers from 0 to 8
'' '' ' ' '' ' ' '' ' . join ( chr ( i ) for i in myintegers )'	convert list myintegers into a unicode string
super ( <name5> , self ) . __init__ ( * args )	inherit from class <name5>
super ( <name1> , self ) . __init__ ( * args )	inherit from class <name1>
[ item for item in <name3> if item != <val1>   ]	Remove the string value <val1> from a list of strings <name3>
[ item for item in <name1> if item != <val2>   ]	Remove the string value <val2> from a list of strings <name1>
random . choice ( <name5> )	randomly select an item from list <name5>
random . choice ( <name1> )	randomly select an item from list <name1>
set ( [ 'a'   , 'b'   ] ) . issubset ( [ 'a'   , 'b'   , 'c'   ] )	check if all of the following items in list ['a', 'b'] are in a list ['a', 'b', 'c']
set ( [ 'a'   , 'b'   ] ) . issubset ( set ( <name1> ) )	Check if all the items in a list ['a', 'b'] exists in another list <name1>
[ <name1> ( t ) for t in zip ( * <name5> ) ]	to convert a <name1> of tuples <name5> into <name1> of lists
[ <name1> ( t ) for t in zip ( * <name2> ) ]	to convert a <name1> of tuples <name2> into <name1> of lists
zip ( * <name6> )	group a list <name6> of tuples by values
zip ( * <name1> )	group a list <name1> of tuples by values
pd . <name5> ( y , <name1> , on = 'k'   ) [ [ <val3>   , <val2>   , <val4>   ] ]	<name5> pandas dataframe <name1> with columns <val3> and <val2> and dataframe <val4> with column <val4>
pd . <name1> ( y , <name2> , on = 'k'   ) [ [ <val3>   , <val4>   , <val5>   ] ]	<name1> pandas dataframe <name2> with columns <val3> and <val4> and dataframe <val5> with column <val5>
[ item . strip ( ) for item in my_string . split ( ','   ) ]	Split string with comma ( , ) and remove whitespace from a string 'my_string'
print ( ( <name2> . __dict__ ) )	Get all object attributes of object <name2>
print ( ( <name1> . __dict__ ) )	Get all object attributes of object <name1>
dir ( )	Get all object attributes of an object
dir ( )	Get all object attributes of an object
<name1> . set_position ( Gtk . WindowPosition . CENTER )	pygobject center <name1> <name1>
<name3> . rc ( 'font'   , ** {  'size'   : <val6>  }  )	change the size of the sci notation to <val6> above the y axis in matplotlib <name3>
<name1> . rc ( 'font'   , ** {  'size'   : <val2>  }  )	change the size of the sci notation to <val2> above the y axis in matplotlib <name1>
<name3> . isnull ( ) . values . <name5> ( )	check if datafram <name3> has <name5> NaN vlaues
<name1> . isnull ( ) . values . <name2> ( )	check if datafram <name1> has <name2> NaN vlaues
<name2> ( * <name3> )	unpack the arguments out of list <name3> to function <name2>
<name1> ( * <name2> )	unpack the arguments out of list <name2> to function <name1>
urllib . parse . unquote ( h . path . encode ( 'utf-8'   ) ) . <name1> ( 'utf-8'   )	<name1> encodeuricomponent in GAE
( <name3> [ <val4>   ] >   <val2> ) . mean ( )	get proportion of rows in dataframe <name3> whose values for column <val4> are greater than <val2>
( <name1> [ <val2>   ] >   <val3> ) . mean ( )	get proportion of rows in dataframe <name1> whose values for column <val2> are greater than <val3>
<name4> = '\n'   . join ( item [ 0 ] for item in <name2> )	convert a set of tuples <name2> to a string <name4>
<name1> = '\n'   . join ( item [ 0 ] for item in <name2> )	convert a set of tuples <name2> to a string <name1>
[ item [ 0 ] for item in <name1> ]	convert a set of tuples <name1> to a list of strings
emaillist = '\n'   . join ( [ item [ 0 ] for item in <name1> ] )	convert a list of tuples <name1> to a string from the first indexes .
print ( ( 'focus object class:'   , <name6> . focus_get ( ) . __class__ ) )	get the widget which has currently the focus in tkinter instance <name6>
print ( ( 'focus object class:'   , <name1> . focus_get ( ) . __class__ ) )	get the widget which has currently the focus in tkinter instance <name1>
<name5> = [ <val1> ] * <val6>	Initialize <name5> list <name5> with <val6> items and each item ' s value <val1>
<name1> = [ <val2> ] * <val3>	Initialize <name1> list <name1> with <val3> items and each item ' s value <val2>
print ( ' '   . <name1> ( sorted ( set ( <name5> ) , key = <name5> . index ) ) )	Keep only unique <name5> in list of <name5> <name5> and <name1> into string
print ( ' '   . <name1> ( sorted ( set ( <name2> ) , key = <name2> . index ) ) )	Keep only unique <name2> in list of <name2> <name2> and <name1> into string
<name1> . sample ( range ( <val2> , <val4> ) , <val3> )	generate <val3> <name1> numbers between <val2> and <val4>
<name1> . sample ( range ( <val2> , <val3> ) , <val4> )	generate <val4> <name1> numbers between <val2> and <val3>
<name2> . sample ( <name3> ( <val6> , 50 ) , 6 )	generate six unique <name2> numbers in the <name3> of <val6> to 49 .
<name1> . sample ( <name2> ( <val3> , 50 ) , 6 )	generate six unique <name1> numbers in the <name2> of <val3> to 49 .
{  k . lower ( ) : v . lower ( ) for k , v <name6> list ( {  'My Key'   : 'My Value'  }  . items ( ) ) }	lowercase keys and values <name6> dictionary {'My Key': 'My Value'}
{  k . lower ( ) : v . lower ( ) for k , v <name1> list ( {  'My Key'   : 'My Value'  }  . items ( ) ) }	lowercase keys and values <name1> dictionary {'My Key': 'My Value'}
dict ( ( k . lower ( ) , v ) for k , v <name1> {  'My Key'   : 'My Value'  }  . items ( ) )	lowercase all keys and values <name1> dictionary {'My Key': 'My Value'}
dict ( ( k . lower ( ) , v . lower ( ) ) for k , v <name5> {  'My Key'   : 'My Value'  }  . items ( ) )	Convert each key , value pair <name5> a dictionary {'My Key': 'My Value'} to lowercase
dict ( ( k . lower ( ) , v . lower ( ) ) for k , v <name1> {  'My Key'   : 'My Value'  }  . items ( ) )	Convert each key , value pair <name1> a dictionary {'My Key': 'My Value'} to lowercase
[ sorted ( item ) for item <name3> <name4> ]	sorting the lists <name3> list of lists <name4>
[ sorted ( item ) for item <name1> <name2> ]	sorting the lists <name1> list of lists <name2>
<name3> = <name2> ( map ( lambda x : x [ 0 ] , <name1> . description ) )	SQLite get a <name2> of column <name3> from <name1> object <name1>
<name1> = <name2> ( map ( lambda x : x [ 0 ] , <name3> . description ) )	SQLite get a <name2> of column <name1> from <name3> object <name3>
os . <name1> . abspath ( __file__ )	get the absolute <name1> of a running python script
sorted ( <name4> , key = itemgetter ( <val3> ) )	sort 2 d array <name4> by row with index <val3>
sorted ( <name1> , key = itemgetter ( <val2> ) )	sort 2 d array <name1> by row with index <val2>
[ index for index , <name1> in enumerate ( <name2> ) if <name1> == <val4>   ]	Get all indexes of a <name1> <val4> from a string <name2>
[ index for index , <name1> in enumerate ( <name2> ) if <name1> == <val3>   ]	Get all indexes of a <name1> <val3> from a string <name2>
print ( str ( <name4> ) . <name5> ( 'raw_unicode_escape'   ) )	<name5> utf -8 code <name4> into a raw unicode literal
print ( str ( <name1> ) . <name2> ( 'raw_unicode_escape'   ) )	<name2> utf -8 code <name1> into a raw unicode literal
re . findall ( '\\w'   , <val2>   )	split string <val2> into a list of characters
re . findall ( '\\w'   , <val1>   )	split string <val1> into a list of characters
os . path . isfile ( <name4> )	check whether a file <name4> exists
os . path . isfile ( <name1> )	check whether a file <name1> exists
os . path . <name5> ( <name1> )	check whether file <name1> <name5>
os . path . <name1> ( <name2> )	check whether file <name2> <name1>
print ( os . path . isfile ( <val2>   ) )	'check whether a file ' <val2> ' exists'
print ( os . path . isfile ( <val1>   ) )	'check whether a file ' <val1> ' exists'
print ( os . path . isfile ( <val5>   ) )	'check whether a file ' <val5> ' exists'
print ( os . path . isfile ( <val1>   ) )	'check whether a file ' <val1> ' exists'
print ( os . path . exists ( <val5>   ) )	'check whether a path ' <val5> ' exists'
print ( os . path . exists ( <val1>   ) )	'check whether a path ' <val1> ' exists'
print ( os . path . isfile ( <val5>   ) )	'check whether a file ' <val5> ' exists'
print ( os . path . isfile ( <val1>   ) )	'check whether a file ' <val1> ' exists'
print ( os . path . exists ( <val1>   ) )	'check whether a path ' <val1> ' exists'
print ( os . path . exists ( <val6>   ) )	'check whether a path ' <val6> ' exists'
print ( os . path . exists ( <val1>   ) )	'check whether a path ' <val1> ' exists'
<name5> ( <name4> for <name4> <name2> range ( 3 ) )	get a <name5> each value <name4> <name2> the implicit tuple range(3)
<name1> ( <name2> for <name2> <name3> range ( 3 ) )	get a <name1> each value <name2> <name3> the implicit tuple range(3)
<name1> . writeheader ( )	add field names as headers in csv constructor <name1>
[ ( <name6> , b , c ) for <name6> , ( b , c ) in <name4> ]	flatten <name6> tuple <name4>
[ ( <name1> , b , c ) for <name1> , ( b , c ) in <name2> ]	flatten <name1> tuple <name2>
'' '' ' ' '0x{0:08X}' ' ' '' ' . format ( 3652458 )'	convert 3652458 to string represent a 32 bit hex number
[ ( v , k ) for k , v in <name5> ( <name6> . items ( ) ) ]	convert a python dictionary <name6> to a <name5> of tuples
[ ( v , k ) for k , v in <name1> ( <name2> . items ( ) ) ]	convert a python dictionary <name2> to a <name1> of tuples
[ ( v , k ) for k , v in <name4> . items ( ) ]	convert dictionary of pairs <name4> to a list of tuples
[ ( v , k ) for k , v in <name1> . items ( ) ]	convert dictionary of pairs <name1> to a list of tuples
[ ( v , k ) for k , v in <name2> . items ( ) ]	convert python 2 dictionary <name2> to <name2> list of tuples where the value is the first tuple element and the key is the second tuple element
[ ( v , k ) for k , v in <name1> . items ( ) ]	convert python 2 dictionary <name1> to <name1> list of tuples where the value is the first tuple element and the key is the second tuple element
[ ( k , v ) for k , v in <name1> . items ( ) ]	convert <name1> python dictionary 'a' to <name1> list of tuples
[ int ( x , 16 ) for x in [ 'BB'   , 'A7'   , 'F6'   , '9E'   ] ]	convert a list of hex byte strings ['BB', 'A7', 'F6', '9E'] to a list of hex integers
[ int ( x , 16 ) for x in <name5> ]	convert the elements of list <name5> from hex byte strings to hex integers
[ int ( x , 16 ) for x in <name1> ]	convert the elements of list <name1> from hex byte strings to hex integers
<name6> , <name5> = <name3> ( 'Enter two numbers here: '   ) . <name2> ( )	assign values to two variables , <name6> and <name5> from user <name3> response to 'Enter two numbers here:  <name2> on whitespace
<name1> , <name2> = <name3> ( 'Enter two numbers here: '   ) . <name4> ( )	assign values to two variables , <name1> and <name2> from user <name3> response to 'Enter two numbers here:  <name4> on whitespace
Test . objects . filter ( actions__contains = [ {  'fixed_key_1'   : 'foo2'  }  ] )	Filter a json from a key - value pair as {'fixed_key_1': 'foo2'} in Django
itertools . product ( <name6> ( range ( 2 ) ) , repeat = 4 )	create a <name6> containing a four elements long tuples of permutations of binary values
itertools . product ( <name1> ( range ( 2 ) ) , repeat = 4 )	create a <name1> containing a four elements long tuples of permutations of binary values
( datetime . now ( ) - <name4> ( 1 ) ) . strftime ( '%Y-%m-%d'   )	get yesterday ' s date as a string in YYYY-MM-DD format using <name4>
( datetime . now ( ) - <name1> ( 1 ) ) . strftime ( '%Y-%m-%d'   )	get yesterday ' s date as a string in YYYY-MM-DD format using <name1>
np . <name5> ( [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] ] )	Get the <name5> product of matrix [1,0,0,1,0,0] and matrix [[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]
np . <name1> ( [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] ] )	Get the <name1> product of matrix [1,0,0,1,0,0] and matrix [[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]
df [ 'date'   ] = pd . to_datetime ( df [ 'date'   ] , <name6> = <val2>   )	convert date strings in pandas dataframe column df['date'] to pandas timestamps using the <name6> <val2>
df [ 'date'   ] = pd . to_datetime ( df [ 'date'   ] , <name1> = <val2>   )	convert date strings in pandas dataframe column df['date'] to pandas timestamps using the <name1> <val2>
<name1> . reset_index ( ) . <name6> ( <name5> , how = <val3>   , <name2> = <val4>   , <name1> = False ) . <name1> ( <val6>   )	do a <val3> <name6> of dataframes <name1> and <name5> <name2> the column <val4> and <name1> by <val6>
<name1> . reset_index ( ) . <name2> ( <name3> , how = <val4>   , <name5> = <val6>   , <name1> = False ) . <name1> ( <val2>   )	do a <val4> <name2> of dataframes <name1> and <name3> <name5> the column <val6> and <name1> by <val2>
<name2> . loads ( <name5> . POST . get ( <val6>   , '{}'   ) )	Create a default empty <name2> object if no <name2> is available in <name5> parameter <val6>
<name1> . loads ( <name2> . POST . get ( <val3>   , '{}'   ) )	Create a default empty <name1> object if no <name1> is available in <name2> parameter <val3>
<name3> ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) )	get a <name3> of tuples of every three consecutive items in <name3> [1, 2, 3, 4, 5, 6, 7, 8, 9]
<name1> ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) )	get a <name1> of tuples of every three consecutive items in <name1> [1, 2, 3, 4, 5, 6, 7, 8, 9]
<name5> ( grouper ( 2 , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )	slice <name5> [1, 2, 3, 4, 5, 6, 7] into lists of two elements each
<name1> ( grouper ( 2 , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )	slice <name1> [1, 2, 3, 4, 5, 6, 7] into lists of two elements each
<name6> . sort ( key = lambda x : map ( int , x . split ( '.'   ) ) )	Sort list <name6> based on its elements '  dot - seperated numbers
<name1> . sort ( key = lambda x : map ( int , x . split ( '.'   ) ) )	Sort list <name1> based on its elements '  dot - seperated numbers
<name3> . sort ( key = lambda x : [ int ( y ) for y <name2> x . split ( '.'   ) ] )	Sort a list of integers <name3> where each value is <name2> string format
<name1> . sort ( key = lambda x : [ int ( y ) for y <name2> x . split ( '.'   ) ] )	Sort a list of integers <name1> where each value is <name2> string format
<name6> . transpose ( <val1> , 0 , 1 ) . reshape ( <val2> , -1 )	convert a <val2> d array <name6> of dimensions 4 x2x3 to a <val1> d array of dimensions <val2> x8
<name1> . transpose ( <val2> , 0 , 1 ) . reshape ( <val3> , -1 )	convert a <val3> d array <name1> of dimensions 4 x2x3 to a <val2> d array of dimensions <val3> x8
<name6> [ <val1>   ] . replace ( [ <val4>   , <val3>   ] , <val5>   )	replacing <val4> and <val3> values in column <val1> of dataframe <name6> with <val5>
<name1> [ <val2>   ] . replace ( [ <val3>   , <val4>   ] , <val5>   )	replacing <val3> and <val4> values in column <val2> of dataframe <name1> with <val5>
<name6> [ <val2>   ] = <name6> [ <val2>   ] . <name1> ( [ 'ABC'   , 'AB'   ] , <val4>   )	<name1> values ['ABC', 'AB'] in a column <val2> of pandas dataframe <name6> with another value <val4>
<name1> [ <val2>   ] = <name1> [ <val2>   ] . <name3> ( [ 'ABC'   , 'AB'   ] , <val4>   )	<name3> values ['ABC', 'AB'] in a column <val2> of pandas dataframe <name1> with another value <val4>
<name1> . sub ( <name1> . <name4> ( axis = 1 ) , axis = 0 )	Subtract the <name4> of each row in dataframe <name1> from the corresponding row ' s elements
<name1> . sub ( <name1> . <name2> ( axis = 1 ) , axis = 0 )	Subtract the <name2> of each row in dataframe <name1> from the corresponding row ' s elements
'' '' ' ' '' ' ' '' ' . join ( [ i for i in s if i . isalpha ( ) ] )'	remove all non - alphabet chars from string s
l = ( int ( x ) for x in <name2> . <name1> ( ) )	<name1> a string <name2> into integers
l = ( int ( x ) for x in <name1> . <name2> ( ) )	<name2> a string <name1> into integers
'' '' ' ' <val3> ' ' '' ' . split ( )'	split a string <val3> by white spaces .
'' '' ' ' <val1> ' ' '' ' . split ( )'	split a string <val1> by white spaces .
[ i for i , elem in enumerate ( <name3> , 1 ) if elem ]	get indexes of all true boolean values from a list <name3>
[ i for i , elem in enumerate ( <name1> , 1 ) if elem ]	get indexes of all true boolean values from a list <name1>
<name2> . groupby ( <name2> [ <val5>   ] . map ( lambda x : x . <name3> ) )	group dataframe <name2> entries by <name3> value of the date in column <val5>
<name1> . groupby ( <name1> [ <val2>   ] . map ( lambda x : x . <name3> ) )	group dataframe <name1> entries by <name3> value of the date in column <val2>
np . in1d ( <name3> , <name5> ) . nonzero ( ) [ 0 ]	Get the indices in array <name3> of each element appearing in array <name5>
np . in1d ( <name1> , <name2> ) . nonzero ( ) [ 0 ]	Get the indices in array <name1> of each element appearing in array <name2>
<name5> . strftime ( '%l:%M%p %z on %b %d, %Y'   )	display current <name5> in readable format
<name1> . strftime ( '%l:%M%p %z on %b %d, %Y'   )	display current <name1> in readable format
<name6> . set_xticklabels ( <name6> . xaxis . get_majorticklabels ( ) , rotation = <val5> )	rotate x - axis text labels of plot <name6> <val5> degrees
<name1> . set_xticklabels ( <name1> . xaxis . get_majorticklabels ( ) , rotation = <val2> )	rotate x - axis text labels of plot <name1> <val2> degrees
'' '' ' ' '' ' ' '' ' . join ( [ ' x ' , ' x ' , ' x ' ] )'	append array of strings ['x', 'x', 'x'] into one string
x [ ( np . arange ( x . shape [ 0 ] ) != <val4> ) , : , : ]	retrieve all items in an numpy array 'x' except the item of the index <val4>
x [ ( np . arange ( x . shape [ 0 ] ) != <val1> ) , : , : ]	retrieve all items in an numpy array 'x' except the item of the index <val1>
print ( <name3> [ <val1>   ] )	pull a value with key <val1> from a json object <name3>
print ( <name1> [ <val2>   ] )	pull a value with key <val2> from a json object <name1>
<name6> = sys . <name3> . <name2> ( )	<name2> a file from redirected <name3> and save to variable <name6>
<name1> = sys . <name2> . <name3> ( )	<name3> a file from redirected <name2> and save to variable <name1>
'' '' ' ' '' ' ' '' ' . join ( soup . findAll ( text = True ) )'	Get all the texts without tags from beautiful soup object soup
<name4> [ <name4> [ <val1>   ] == <name5> ]	extract all rows from dataframe <name4> where the value of column <val1> is <name5>
<name1> [ <name1> [ <val2>   ] == <name3> ]	extract all rows from dataframe <name1> where the value of column <val2> is <name3>
<val1> <val1> ' ' <val1> ' ' <val1> ' . join ( set ( foo ) )'	'removing duplicate characters from a string variable ' 'foo' <val1>
sorted ( <name5> . <name4> . all ( ) , key = lambda p : p . <name3> )	sort <name4> in model <name5> based on Theirs <name3> attribute
sorted ( <name1> . <name2> . all ( ) , key = lambda p : p . <name3> )	sort <name2> in model <name1> based on Theirs <name3> attribute
<name1> . values . <name2> ( )	<name2> a dataframe <name1> to a list
<name5> . <name1> ( <name3> = lambda x : <name6> . index ( x [ <val2>   ] ) )	<name1> list <name5> using values associated with <name3> <val2> according to elements in list <name6>
<name1> . <name2> ( <name3> = lambda x : <name4> . index ( x [ <val5>   ] ) )	<name2> list <name1> using values associated with <name3> <val5> according to elements in list <name4>
<name4> . <name3> ( key = lambda x : <name6> . index ( x [ <val5>   ] ) )	<name3> a python list of dictionaries <name4> by a given list <name6> of ids <val5> with the desired <name6>
<name1> . <name2> ( key = lambda x : <name3> . index ( x [ <val4>   ] ) )	<name2> a python list of dictionaries <name1> by a given list <name3> of ids <val4> with the desired <name3>
r = requests . get ( <val6>   , headers = {  'Authorization'   : <val4>  }  )	request URI <val6> and pass authorization token <val4> to the header
r = requests . get ( <val1>   , headers = {  'Authorization'   : <val2>  }  )	request URI <val1> and pass authorization token <val2> to the header
re . findall ( <val5>   , <val4>   , re . <name1> )	match regex pattern <val5> on string <val4> with <name1> enabled
re . findall ( <val1>   , <val2>   , re . <name3> )	match regex pattern <val1> on string <val2> with <name3> enabled
<name4> . shape [ 1 ]	get second array column length of array <name4>
<name1> . shape [ 1 ]	get second array column length of array <name1>
d . apply ( lambda <name5> : <name4> ( [ <name5> [ 'A'   ] , <name5> [ 'B'   ] ] ) - <name5> [ 'C'   ] , axis = 1 )	use operations like max / <name4> within a <name5> to a dataframe 'd' in pandas
d . apply ( lambda <name1> : <name2> ( [ <name1> [ 'A'   ] , <name1> [ 'B'   ] ] ) - <name1> [ 'C'   ] , axis = 1 )	use operations like max / <name2> within a <name1> to a dataframe 'd' in pandas
<val2> <val2> ' ' <val6> ' ' <val2> ' . count ( ' <name4> ' )'	'count number of occurrences of a substring ' <name4> ' in a string ' <val6> <val2>
<val1> <val1> ' ' <val2> ' ' <val1> ' . count ( ' <name3> ' )'	'count number of occurrences of a substring ' <name3> ' in a string ' <val2> <val1>
[ d [ <val5>   ] for d in <name4> if <val5>     in d ]	get a list of values with key <val5> from a list of dictionaries <name4>
[ d [ <val1>   ] for d in <name2> if <val1>     in d ]	get a list of values with key <val1> from a list of dictionaries <name2>
[ d [ <val2>   ] <name5> d in <name3> ]	get a list of values <name5> key <val2> from a list of dictionaries <name3>
[ d [ <val1>   ] <name2> d in <name3> ]	get a list of values <name2> key <val1> from a list of dictionaries <name3>
[ d [ <val1>   ] for d in l ]	'get a list of values for key ' <val1> ' from a list of dictionaries in `l`'
<name2> . sort ( key = lambda x : int ( x [ 0 ] ) )	order a list of lists <name2> by the first value
<name1> . sort ( key = lambda x : int ( x [ 0 ] ) )	order a list of lists <name1> by the first value
sorted ( [ [ 1 , 'mike'   ] , [ 1 , 'bob'   ] ] )	order a list of lists [[1, 'mike'], [1, 'bob']] by the first value of individual list
'' '' ' ' <val4> ' ' '' ' . translate ( maketrans ( ' abcABC ' , ' defDEF ' ) )'	replace a string <val4> in case sensitive way using maketrans
'' '' ' ' <val1> ' ' '' ' . translate ( maketrans ( ' abcABC ' , ' defDEF ' ) )'	replace a string <val1> in case sensitive way using maketrans
'' '' ' ' '<br/>' ' ' '' ' . join ( [ ( ' % s : : % s '   % ( key , value ) ) for key , value in list ( d . items ( ) ) ] )'	dictionary d to string , custom format
os . system ( 'cls'   )	clear terminal screen on windows
os . system ( 'clear'   )	clear the terminal screen in Linux
os . system ( 'tcsh your_own_script'   )	execute external commands / script your_own_script with csh instead of bash
[ dict ( d , <name1> = n ) for d , n in zip ( <name5> , <name3> ) ]	update a list <name5> dictionaries with a key <name1> and value from list <name3>
[ dict ( d , <name1> = n ) for d , n in zip ( <name2> , <name3> ) ]	update a list <name2> dictionaries with a key <name1> and value from list <name3>
[ <name6> ( x ) for x in zip ( * <name4> ) ]	create a list with the <name6> of respective elements of the tuples of list <name4>
[ <name1> ( x ) for x in zip ( * <name2> ) ]	create a list with the <name1> of respective elements of the tuples of list <name2>
map ( <name2> , zip ( * <name4> ) )	<name2> each value in a list <name4> of tuples
map ( <name1> , zip ( * <name2> ) )	<name1> each value in a list <name2> of tuples
np . count_nonzero ( ~  np . isnan ( <name5> ) )	count the number of non - nan elements in a numpy ndarray matrix <name5>
np . count_nonzero ( ~  np . isnan ( <name1> ) )	count the number of non - nan elements in a numpy ndarray matrix <name1>
map ( <name1> , zip ( * <name3> ) )	Convert each <name1> in <name1> <name3> into a tuple
map ( <name1> , zip ( * <name2> ) )	Convert each <name1> in <name1> <name2> into a tuple
<name1> . <name3> . <name2> ( <val6>   , <val5>   )	django <name2> the value of key <val6> from <name3> <name1> <name1> if exists , else return empty string <val5>
<name1> . <name2> . <name3> ( <val4>   , <val5>   )	django <name3> the value of key <val4> from <name2> <name1> <name1> if exists , else return empty string <val5>
'' '' ' ' <val2> ' ' '' ' . endswith ( ( ' . mp3 ' , ' . avi ' ) )'	check if string <val2> ends with one of the strings from a tuple ('.mp3', '.avi')
'' '' ' ' <val1> ' ' '' ' . endswith ( ( ' . mp3 ' , ' . avi ' ) )'	check if string <val1> ends with one of the strings from a tuple ('.mp3', '.avi')
're . findall ( ' \\ [ [ ^\\ ] ] * \\ ] | '' [ ^ '' ] * '' |\\ S + ' , s )'	split a string 's' by space while ignoring spaces within square braces and quotes .
<name6> . apply ( lambda x : sorted ( x , <val1> ) )	get biggest <val1> values from each column of the pandas dataframe <name6>
<name1> . apply ( lambda x : sorted ( x , <val2> ) )	get biggest <val2> values from each column of the pandas dataframe <name1>
os . chdir ( <val1>   )	permanently set the current directory to the <val1>
re . findall ( '\\$([^$]*)\\$'   , <name5> )	get all characters between two $ characters in <name5> <name5>
re . findall ( '\\$([^$]*)\\$'   , <name1> )	get all characters between two $ characters in <name1> <name1>
re . findall ( '\\$(.*?)\\$'   , <val3>   )	getting the string between 2 '$' characters in <val3>
re . findall ( '\\$(.*?)\\$'   , <val1>   )	getting the string between 2 '$' characters in <val1>
datetime . datetime . strptime ( str_date , '%m/%d/%Y'   ) . <name5> ( ) . isoformat ( )	Format a <name5> object str_data into iso fomrat
datetime . datetime . strptime ( str_date , '%m/%d/%Y'   ) . <name1> ( ) . isoformat ( )	Format a <name1> object str_data into iso fomrat
<name3> [ [ <val6> , <val1> ] , [ <val6> , <val1> ] ]	get element at index <val6> of first row and element at index <val1> of second row in array <name3>
<name1> [ [ <val2> , <val3> ] , [ <val2> , <val3> ] ]	get element at index <val2> of first row and element at index <val3> of second row in array <name1>
<name2> [ np . arange ( 3 ) , ( 0 , 1 , 0 ) ]	subset numpy array <name2> by column and row , returning the values from the first row , first column and the second row , second column and the third row , first column .
<name1> [ np . arange ( 3 ) , ( 0 , 1 , 0 ) ]	subset numpy array <name1> by column and row , returning the values from the first row , first column and the second row , second column and the third row , first column .
[ k for k , v <name6> <name5> . items ( ) if v . count ( <val3>   ) >   <val1> ]	Get a list of all keys from dictionary <name5> where the number of occurrences of value <val3> <name6> that key is more than <val1>
[ k for k , v <name1> <name2> . items ( ) if v . count ( <val3>   ) >   <val4> ]	Get a list of all keys from dictionary <name2> where the number of occurrences of value <val3> <name1> that key is more than <val4>
[ [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] ]	Create sub matrix of a list of lists [[2, 3, 4], [2, 3, 4], [2, 3, 4]] ( without numpy )
print ( <name6> [ 1 , 1 ] )	get an element at index [1,1] in a numpy array <name6>
print ( <name1> [ 1 , 1 ] )	get an element at index [1,1] in a numpy array <name1>
<name2> . set_clim ( vmin = <val6> , vmax = <val5> )	Set colorbar range from <val6> to <val5> for pyplot object <name2> in matplotlib
<name1> . set_clim ( vmin = <val2> , vmax = <val3> )	Set colorbar range from <val2> to <val3> for pyplot object <name1> in matplotlib
my_data = genfromtxt ( <val2>   , delimiter = ','   )	read csv file <val2> into numpy array
my_data = genfromtxt ( <val1>   , delimiter = ','   )	read csv file <val1> into numpy array
df = pd . read_csv ( <val3>   , sep = ','   , header = None )	read csv file <val3> into array
df = pd . read_csv ( <val1>   , sep = ','   , header = None )	read csv file <val1> into array
np . genfromtxt ( <val6>   , delimiter = ','   )	read csv file <val6> into array
np . genfromtxt ( <val1>   , delimiter = ','   )	read csv file <val1> into array
np . genfromtxt ( <val6>   , delimiter = ','   , dtype = None )	read csv file <val6> into array
np . genfromtxt ( <val1>   , delimiter = ','   , dtype = None )	read csv file <val1> into array
<name3> . splitlines ( ) [ 0 ]	read the first line of a string <name3>
<name1> . splitlines ( ) [ 0 ]	read the first line of a string <name1>
<name6> . <name3> . tolist ( )	generate a list from a pandas dataframe <name6> with the column name and column <name3>
<name1> . <name2> . tolist ( )	generate a list from a pandas dataframe <name1> with the column name and column <name2>
re . sub ( '\\*\\*+'   , <val1>   , text )	Replace repeated instances of a character <val1> with a single instance in a string 'text'
re . sub ( '\\*+'   , <val5>   , text )	'replace repeated instances of ' <val5> ' with a single instance of ' <val5> ''
re . sub ( '\\*+'   , <val1>   , text )	'replace repeated instances of ' <val1> ' with a single instance of ' <val1> ''
<name5> ( ( k , v * <name3> [ k ] ) for k , v <name1> list ( dict1 . items ( ) ) if k <name1> <name3> )	multiply values of dictionary <name5> with their respective values <name1> dictionary <name3>
<name1> ( ( k , v * <name2> [ k ] ) for k , v <name3> list ( dict1 . items ( ) ) if k <name3> <name2> )	multiply values of dictionary <name1> with their respective values <name3> dictionary <name2>
return ''   . join ( <name2> . choice ( <name1> . lowercase ) for i in range ( <name3> ) )	Get a <name2> <name1> of <name3> <name3>
return ''   . join ( <name1> . choice ( <name2> . lowercase ) for i in range ( <name3> ) )	Get a <name1> <name2> of <name3> <name3>
sum ( len ( x ) for x <name5> list ( <name1> . <name4> ( ) ) )	Get total number of <name4> <name5> a nested dictionary <name1>
sum ( len ( x ) for x <name1> list ( <name2> . <name3> ( ) ) )	Get total number of <name3> <name1> a nested dictionary <name2>
sum ( len ( v ) for v <name5> <name4> . values ( ) )	count all elements <name5> a nested dictionary <name4>
sum ( len ( v ) for v <name1> <name2> . values ( ) )	count all elements <name1> a nested dictionary <name2>
<name2> ( <name1> )	apply logical operator 'AND' to <name2> elements in list <name1>
<name1> ( <name2> )	apply logical operator 'AND' to <name1> elements in list <name2>
'' '' ' ' '' ' ' '' ' . join ( c for c in text if c not in ' aeiouAEIOU ' )'	removing vowel characters 'aeiouAEIOU' from string text
[ ( x / y ) for x , y <name4> zip ( <name3> , <name2> ) ]	Divide elements <name4> list <name3> from elements at the same index <name4> list <name2>
[ ( x / y ) for x , y <name1> zip ( <name2> , <name3> ) ]	Divide elements <name1> list <name2> from elements at the same index <name1> list <name3>
re . findall ( <val1>   , <val4>   )	match regex <val1> on string <val4>
re . findall ( <val1>   , <val2>   )	match regex <val1> on string <val2>
<name3> . groupby ( <val4>   ) . <name2> ( lambda x : np . mean ( np . <name1> ( x [ 'v'   ] ) ) )	<name2> function <name1> to the grouped values by <val4> in dataframe <name3>
<name1> . groupby ( <val2>   ) . <name3> ( lambda x : np . mean ( np . <name4> ( x [ 'v'   ] ) ) )	<name3> function <name4> to the grouped values by <val2> in dataframe <name1>
[ key for key , value in <name2> ( <name5> . items ( ) ) if set ( value ) . intersection ( <name4> ) ]	get geys of dictionary <name5> that contain any values from <name2> <name4>
[ key for key , value in <name1> ( <name2> . items ( ) ) if set ( value ) . intersection ( <name3> ) ]	get geys of dictionary <name2> that contain any values from <name1> <name3>
[ key for item <name5> <name6> for key , value <name5> <name3> ( <name4> . items ( ) ) if item <name5> value ]	get <name3> of keys <name5> dictionary <name4> whose values contain values from <name3> <name6>
[ key for item <name1> <name2> for key , value <name1> <name3> ( <name4> . items ( ) ) if item <name1> value ]	get <name3> of keys <name1> dictionary <name4> whose values contain values from <name3> <name2>
c = [ [ ( i + j ) for i , j <name5> zip ( e , <name1> ) ] for e <name5> <name2> ]	Sum elements of tuple <name1> to their respective elements of each tuple <name5> list <name2>
c = [ [ ( i + j ) for i , j <name1> zip ( e , <name2> ) ] for e <name1> <name3> ]	Sum elements of tuple <name2> to their respective elements of each tuple <name1> list <name3>
os . path . commonprefix ( [ <val2>   , <val3>   ] )	get the common prefix from comparing two absolute paths <val2> and <val3>
os . path . commonprefix ( [ <val1>   , <val2>   ] )	get the common prefix from comparing two absolute paths <val1> and <val2>
print ( os . <name5> . relpath ( <val1>   , <val3>   ) )	get relative <name5> of <name5> <val3> regarding <name5> <val1>
print ( os . <name1> . relpath ( <val2>   , <val3>   ) )	get relative <name1> of <name1> <val3> regarding <name1> <val2>
<name6> . <name1> ( lambda <name2> : len ( <name2> ) >   <val5> )	<name1> dataframe <name6> where the length of each group <name2> is bigger than <val5>
<name1> . <name2> ( lambda <name3> : len ( <name3> ) >   <val4> )	<name2> dataframe <name1> where the length of each group <name3> is bigger than <val4>
sorted ( <name3> ( <name2> . items ( ) ) , key = lambda e : e [ 1 ] [ 2 ] )	sort dictionary of lists <name2> by the third item in each <name3>
sorted ( <name1> ( <name2> . items ( ) ) , key = lambda e : e [ 1 ] [ 2 ] )	sort dictionary of lists <name2> by the third item in each <name1>
'' '' ' ' <val2> ' ' '' ' . format ( name = ' john ' )'	Format string <val2> to be interspersed by name three times , specifying the value as 'john' only once
'' '' ' ' <val1> ' ' '' ' . format ( name = ' john ' )'	Format string <val1> to be interspersed by name three times , specifying the value as 'john' only once
<name6> . reindex ( [ 'Z'   , 'C'   , 'A'   ] )	reorder indexed rows ['Z', 'C', 'A'] based on a list in pandas data frame <name6>
<name1> . reindex ( [ 'Z'   , 'C'   , 'A'   ] )	reorder indexed rows ['Z', 'C', 'A'] based on a list in pandas data frame <name1>
<name3> ( isinstance ( el , <name1> ) for el <name5> <name6> )	check if <name3> values <name5> a <name1> <name6> is a <name1>
<name1> ( isinstance ( el , <name2> ) for el <name3> <name4> )	check if <name1> values <name3> a <name2> <name4> is a <name2>
len ( <name1> )	get the size of list <name1>
len ( [ 1 , 2 , 3 ] )	get the size of a list [1,2,3]
<name2> . __len__ ( )	get the size of object <name2>
<name1> . __len__ ( )	get the size of object <name1>
len ( )	function to get the size of object
len ( <name5> )	get the size of list <name5>
len ( <name1> )	get the size of list <name1>
<name3> . <name5> ( axis = 1 , ascending = False )	<name5> each row in a pandas dataframe <name3> in descending order
<name1> . <name2> ( axis = 1 , ascending = False )	<name2> each row in a pandas dataframe <name1> in descending order
<name2> . groupby ( [ <val4>   , <val6>   ] ) . size ( ) . groupby ( level = 1 ) . max ( )	get count of rows in each series grouped by column <val4> and column <val6> of dataframe <name2>
<name1> . groupby ( [ <val2>   , <val3>   ] ) . size ( ) . groupby ( level = 1 ) . max ( )	get count of rows in each series grouped by column <val2> and column <val3> of dataframe <name1>
<val2>     <name4> [ <val2>   , 'd'   , 'a'   , 's'   , 'd'   , 's'   ]	check if string <val2> is <name4> list ['x', 'd', 'a', 's', 'd', 's']
<val1>     <name2> [ <val1>   , 'd'   , 'a'   , 's'   , 'd'   , 's'   ]	check if string <val1> is <name2> list ['x', 'd', 'a', 's', 'd', 's']
mydict . pop ( <val3>   , None )	'Delete an item with key ' <val3> ' from `mydict`'
mydict . pop ( <val1>   , None )	'Delete an item with key ' <val1> ' from `mydict`'
del <name4> [ <name3> ]	Delete an item with <name3> <name3> from <name4>
del <name1> [ <name2> ]	Delete an item with <name2> <name2> from <name1>
parser . add_argument ( 'input'   , nargs = '+'   )	specify multiple positional arguments with argparse
<name5> . plot ( x , y , <name1> = <val3>   )	Plot using the <name1> code <val3> in matplotlib <name5>
<name1> . plot ( x , y , <name2> = <val3>   )	Plot using the <name2> code <val3> in matplotlib <name1>
re . sub ( '<[^<]+?>'   , ''   , text )	strip html from strings
<name1> [ np . in1d ( <name1> , <name3> ) ]	align values in array <name3> to the order of corresponding values in array <name1>
<name1> [ np . in1d ( <name1> , <name2> ) ]	align values in array <name2> to the order of corresponding values in array <name1>
<name1> ( '[%s]'     % ', '   . join ( '%.3f'     % val for val <name5> <name4> ) )	<name1> numbers <name5> <name4> <name4> with precision of 3 decimal places
<name1> ( '[%s]'     % ', '   . join ( '%.3f'     % val for val <name2> <name3> ) )	<name1> numbers <name2> <name3> <name3> with precision of 3 decimal places
<name5> ( '['     + ', '   . join ( '%5.3f'     % v for v in <name1> ) + ']'   )	format <name5> output of list of floats <name1> to <name5> only up to 3 decimal points
<name1> ( '['     + ', '   . join ( '%5.3f'     % v for v in <name2> ) + ']'   )	format <name1> output of list of floats <name2> to <name1> only up to 3 decimal points
<name1> ( [ ( '%5.3f'     % val ) for val in <name2> ] )	<name1> a list of floating numbers <name2> using string formatting
os . chdir ( '..'   )	Change the current directory one level up
<name4> ( <name3> . encode ( 'windows-1252'   ) )	<name4> a unicode string <name3>
<name1> ( <name2> . encode ( 'windows-1252'   ) )	<name1> a unicode string <name2>
struct . unpack ( 'd'   , struct . pack ( 'Q'   , int ( <name2> , 0 ) ) ) [ 0 ]	convert string representation <name2> of binary string rep of integer to floating point number
struct . unpack ( 'd'   , struct . pack ( 'Q'   , int ( <name1> , 0 ) ) ) [ 0 ]	convert string representation <name1> of binary string rep of integer to floating point number
<name5> ( int ( <val6>   , 0 ) )	convert a binary <val6> to a <name5> number
<name1> ( int ( <val2>   , 0 ) )	convert a binary <val2> to a <name1> number
struct . unpack ( 'd'   , <name4> ) [ 0 ]	convert a binary <name4> to a float number
struct . unpack ( 'd'   , <name1> ) [ 0 ]	convert a binary <name1> to a float number
df . colour . value_counts ( ) . <name5> ( kind = 'bar'   )	<name5> a bar graph from the column 'color' in the DataFrame 'df'
df . colour . value_counts ( ) . <name1> ( kind = 'bar'   )	<name1> a bar graph from the column 'color' in the DataFrame 'df'
<name1> . groupby ( 'colour'   ) . size ( ) . <name2> ( <name3> = <val4>   )	<name2> categorical data in series <name1> with <name3> <val4> using pandas and matplotlib
<name5> . <name1> ( ) . <name3> ( ' '   )	<name1> and <name3> each <name5> <name5> on white spaces
<name1> . <name2> ( ) . <name3> ( ' '   )	<name2> and <name3> each <name1> <name1> on white spaces
<name3> . groupby ( lambda idx : 0 ) . agg ( [ <val6>   , <val1>   ] )	apply functions <val6> and <val1> to each column in dataframe <name3>
<name1> . groupby ( lambda idx : 0 ) . agg ( [ <val2>   , <val3>   ] )	apply functions <val2> and <val3> to each column in dataframe <name1>
sorted ( list ( <name2> . items ( ) ) , key = lambda x : int ( x [ 1 ] ) , <name5> = True )	sort dictionary <name2> in <name5> order by values cast to integers
sorted ( list ( <name1> . items ( ) ) , key = lambda x : int ( x [ 1 ] ) , <name2> = True )	sort dictionary <name1> in <name2> order by values cast to integers
int ( math . ceil ( <name4> ) ) - 1	find the largest integer less than <name4>
int ( math . ceil ( <name1> ) ) - 1	find the largest integer less than <name1>
it = iter ( <name5> ( <name2> . items ( ) ) )	iterate over a dictionary <name2> in <name5> order
it = iter ( <name1> ( <name2> . items ( ) ) )	iterate over a dictionary <name2> in <name1> order
return <name4> ( <name1> . items ( ) )	iterate over a dictionary <name1> in <name4> order
return <name1> ( <name2> . items ( ) )	iterate over a dictionary <name2> in <name1> order
return iter ( <name4> ( <name3> . items ( ) ) )	iterate over a dictionary <name3> in <name4> order
return iter ( <name1> ( <name2> . items ( ) ) )	iterate over a dictionary <name2> in <name1> order
<name6> = len ( <name5> ) - <name5> [ : : -1 ] . <name3> ( <name1> ) - 1	assign the <name3> of the <name6> occurence of <name1> in list <name5> to the variable <name6>
<name1> = len ( <name2> ) - <name2> [ : : -1 ] . <name3> ( <name4> ) - 1	assign the <name3> of the <name1> occurence of <name4> in list <name2> to the variable <name1>
str1 = ''   . join ( <name6> )	concatenating values in <name6> to a string
str1 = ''   . join ( <name1> )	concatenating values in <name1> to a string
' '   . join ( ( str ( x ) for x <name2> <name5> ) )	concatenating values <name2> list <name5> to a string , separate by space
' '   . join ( ( str ( x ) for x <name1> <name2> ) )	concatenating values <name1> list <name2> to a string , separate by space
str1 = ''   . join ( ( str ( e ) for e <name2> <name5> ) )	concatenating values <name2> <name5> to a string
str1 = ''   . join ( ( str ( e ) for e <name1> <name2> ) )	concatenating values <name1> <name2> to a string
makeitastring = ''   . join ( map ( str , <name2> ) )	concatenating values in list <name2> to a string
makeitastring = ''   . join ( map ( str , <name1> ) )	concatenating values in list <name1> to a string
[ x for x in <name3> if x is not <name5> ]	remove <name5> value from list <name3>
[ x for x in <name1> if x is not <name2> ]	remove <name2> value from list <name1>
<name2> . choice ( [ 1 , 2 , 3 ] )	select a <name2> element from array [1, 2, 3]
<name1> . choice ( [ 1 , 2 , 3 ] )	select a <name1> element from array [1, 2, 3]
<name4> = [ [ <name3> for _ in range ( <val6> ) ] for _ in range ( 6 ) ]	creating a <val6> x6 matrix filled with <name3> and save it as <name4>
<name1> = [ [ <name2> for _ in range ( <val3> ) ] for _ in range ( 6 ) ]	creating a <val3> x6 matrix filled with <name2> and save it as <name1>
<name6> [ ( np . <name2> . choice ( <name6> . shape [ 0 ] , <val4> , replace = False ) ) , : ]	create a new <val4> D array with <val4> <name2> rows from array <name6>
<name1> [ ( np . <name2> . choice ( <name1> . shape [ 0 ] , <val3> , replace = False ) ) , : ]	create a new <val3> D array with <val3> <name2> rows from array <name1>
<name5> [ ( np . <name6> . randint ( <name5> . shape [ 0 ] , size = <val1> ) ) , : ]	create a new <val1> dimensional array containing two <name6> rows from array <name5>
<name1> [ ( np . <name2> . randint ( <name1> . shape [ 0 ] , size = <val3> ) ) , : ]	create a new <val3> dimensional array containing two <name2> rows from array <name1>
df . groupby ( df . index ) . sum ( )	combining rows in pandas by adding their values
root . findall ( '{http://www.w3.org/2002/07/owl#}Class'   )	find all owl:Class tags by parsing xml with namespace
'' '' ' ' '' ' ' '' ' . join ( random . choice ( string . lowercase ) for x in range ( X ) )'	generate a random string of length x containing lower cased ASCII letters
sys . <name4> . append ( <val5>   )	add a <name4> <val5> to system <name4>
sys . <name1> . append ( <val2>   )	add a <name1> <val2> to system <name1>
int ( <name4> ( <name5> ) )	<name4> number <name5> to nearest integer
int ( <name1> ( <name2> ) )	<name1> number <name2> to nearest integer
<name3> = int ( <name6> ( <name3> ) )	<name6> number <name3> to nearest integer
<name1> = int ( <name2> ( <name1> ) )	<name2> number <name1> to nearest integer
<name2> ( <val5> , <val1> )	<name2> number <val5> up to <val1> decimal points
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal points
<name5> ( <name4> , <name2> )	<name5> number <name4> up to <name2> decimal places
<name1> ( <name2> , <name3> )	<name1> number <name2> up to <name3> decimal places
<name2> ( <val4> , <val1> )	<name2> number <val4> up to <val1> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
<name2> ( <val1> , <val6> )	<name2> number <val1> up to <val6> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
<name5> ( <val1> , <val2> )	<name5> number <val1> up to <val2> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
<name5> ( <val2> , <val3> )	<name5> number <val2> up to <val3> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
<name6> ( <val2> , <val3> )	<name6> number <val2> up to <val3> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
<name6> ( <val4> , <val1> )	<name6> number <val4> up to <val1> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
<name4> ( <val2> , <val5> )	<name4> number <val2> up to <val5> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
<name6> ( <val3> , <val2> )	<name6> number <val3> up to <val2> decimal places
<name1> ( <val2> , <val3> )	<name1> number <val2> up to <val3> decimal places
df [ <val6>   ] . fillna ( df [ <val1>   ] )	fill missing value in one column <val6> with the value of another column <val1>
df [ <val1>   ] . fillna ( df [ <val2>   ] )	fill missing value in one column <val1> with the value of another column <val2>
<name5> . info ( 'date=%s'   , <name1> )	convert the argument <name1> with string formatting in <name5>
<name1> . info ( 'date=%s'   , <name2> )	convert the argument <name2> with string formatting in <name1>
logging . info ( 'date={}'   . format ( <name2> ) )	Log message of level 'info' with value of <name2> in the message
logging . info ( 'date={}'   . format ( <name1> ) )	Log message of level 'info' with value of <name1> in the message
{  k : int ( v ) for k , v <name4> <name5> . items ( ) }	convert values <name4> dictionary <name5> into integers
{  k : int ( v ) for k , v <name1> <name2> . items ( ) }	convert values <name1> dictionary <name2> into integers
map ( <name5> , zip ( * <name2> ) )	<name5> elements at the same index of each list in list <name2>
map ( <name1> , zip ( * <name2> ) )	<name1> elements at the same index of each list in list <name2>
<name5> . decode ( 'hex'   )	Convert a string <name5> containing hex bytes to a hex string
<name1> . decode ( 'hex'   )	Convert a string <name1> containing hex bytes to a hex string
binascii . a2b_hex ( <name3> )	convert a string <name3> containing hex bytes to a hex string
binascii . a2b_hex ( <name1> )	convert a string <name1> containing hex bytes to a hex string
<name6> . <name1> ( 'HTTP/1.0 200 established\r\n\r\n'   )	<name1> data 'HTTP/1.0 200 OK\r\n\r\n' to socket <name6>
<name1> . <name2> ( 'HTTP/1.0 200 established\r\n\r\n'   )	<name2> data 'HTTP/1.0 200 OK\r\n\r\n' to socket <name1>
<name5> . <name4> ( <val3>   )	<name4> data <val3> to socket <name5>
<name1> . <name2> ( <val3>   )	<name2> data <val3> to socket <name1>
<name2> [ 'x'   ] [ 'C'   ] = <val1>	set the value of cell ['x']['C'] equal to <val1> in dataframe <name2>
<name1> [ 'x'   ] [ 'C'   ] = <val2>	set the value of cell ['x']['C'] equal to <val2> in dataframe <name1>
np . sqrt ( np . square ( <name4> ) . sum ( axis = 1 ) )	normalize the dataframe <name4> along the rows
np . sqrt ( np . square ( <name1> ) . sum ( axis = 1 ) )	normalize the dataframe <name1> along the rows
sorted ( set ( <name5> ) )	remove identical items from list <name5> and sort it alphabetically
sorted ( set ( <name1> ) )	remove identical items from list <name1> and sort it alphabetically
max ( enumerate ( <name6> ) , key = lambda x : x [ 1 ] ) [ 0 ]	find the index of the element with the maximum value from <name6> list 'a' .
max ( enumerate ( <name1> ) , key = lambda x : x [ 1 ] ) [ 0 ]	find the index of the element with the maximum value from <name1> list 'a' .
[ <name1> [ <val6>   ] <name3> <name1> <name2> <name5> ]	create a list where each element is a value of the key <val6> <name3> each dictionary <name1> <name2> the list <name5>
[ <name1> [ <val2>   ] <name3> <name1> <name4> <name5> ]	create a list where each element is a value of the key <val2> <name3> each dictionary <name1> <name4> the list <name5>
[ ( <name3> [ <val1>   ] , <name3> [ <val2>   ] ) for <name3> <name5> <name6> ]	create a list of tuples with the values of keys <val1> and <val2> from each dictionary <name3> <name5> the list <name6>
[ ( <name1> [ <val2>   ] , <name1> [ <val3>   ] ) for <name1> <name4> <name5> ]	create a list of tuples with the values of keys <val2> and <val3> from each dictionary <name1> <name4> the list <name5>
<name2> . objects . all ( ) . order_by ( '?'   ) [ 0 ]	grab one random item from a database <name2> in django / postgresql
<name1> . objects . all ( ) . order_by ( '?'   ) [ 0 ]	grab one random item from a database <name1> in django / postgresql
os . system ( 'script2.py 1'   )	run python script 'script2.py' from another python script , passing in 1 as an argument
re . findall ( '\\w+(?:-\\w+)+'   , <name5> )	python regex for hyphenated words in <name5>
re . findall ( '\\w+(?:-\\w+)+'   , <name1> )	python regex for hyphenated words in <name1>
parser . add_argument ( '--conf'   , nargs = 2 , action = 'append'   )	create variable key / value pairs with argparse
random . sample ( <name3> ( range ( 1 , 16 ) ) , <val4> )	Get <val4> unique items from a <name3>
random . sample ( <name1> ( range ( 1 , 16 ) ) , <val2> )	Get <val2> unique items from a <name1>
<name4> . <name1> ( key = lambda str : re . sub ( '.*%(.).*'   , '\\1'   , str ) )	<name1> list <name4> in alphabetical order based on the letter after percent character % in each element
<name1> . <name2> ( key = lambda str : re . sub ( '.*%(.).*'   , '\\1'   , str ) )	<name2> list <name1> in alphabetical order based on the letter after percent character % in each element
<name5> . <name3> ( key = lambda str : re . sub ( '.*%'   , ''   , str ) )	<name3> a list of <name5> <name5> based on regex match
<name1> . <name2> ( key = lambda str : re . sub ( '.*%'   , ''   , str ) )	<name2> a list of <name1> <name1> based on regex match
<name5> = [ [ ] for i in range ( <val6> ) ]	Create list <name5> containing <val6> empty lists
<name1> = [ [ ] for i in range ( <val2> ) ]	Create list <name1> containing <val2> empty lists
<name1> = np . <name3> ( sorted ( <name1> , key = tuple ) )	sort numpy float <name3> <name1> column by column
<name1> = np . <name2> ( sorted ( <name1> , key = tuple ) )	sort numpy float <name2> <name1> column by column
[ ( x + y ) for x in <val2>     for y in <val5>   ]	Get a list from two strings <val2> and <val5> with values as each character concatenated
[ ( x + y ) for x in <val1>     for y in <val2>   ]	Get a list from two strings <val1> and <val2> with values as each character concatenated
<val3>   . strip ( )	'trim string ' <val3> ''
<val1>   . strip ( )	'trim string ' <val1> ''
myString . strip ( )	trim string myString 
<val6>   . strip ( )	'Trimming a string ' <val6> ''
<val1>   . strip ( )	'Trimming a string ' <val1> ''
<val1>   . strip ( )	'Trimming a string ' <val1> ''
<val3>   . strip ( )	'Trimming a string ' <val3> ''
<val1>   . strip ( )	'Trimming a string ' <val1> ''
<val2>   . strip ( )	'Trimming a string ' <val2> ''
<val1>   . strip ( )	'Trimming a string ' <val1> ''
<name2> . strip ( )	Trimming a string <name2>
<name1> . strip ( )	Trimming a string <name1>
myString . strip ( <val2>   )	'Trimming ' <val2> ' from string `myString`'
myString . strip ( <val1>   )	'Trimming ' <val1> ' from string `myString`'
myString . lstrip ( <val2>   )	'left trimming ' <val2> ' from string `myString`'
myString . lstrip ( <val1>   )	'left trimming ' <val1> ' from string `myString`'
myString . rstrip ( <val3>   )	'right trimming ' <val3> ' from string `myString`'
myString . rstrip ( <val1>   )	'right trimming ' <val1> ' from string `myString`'
<val2>   . strip ( ' '   )	'Trimming a string ' <val2> ' by space'
<val1>   . strip ( ' '   )	'Trimming a string ' <val1> ' by space'
sorted ( unsorted , key = lambda element : ( element [ 1 ] , element [ 2 ] ) )	sort a list of tuples 'unsorted' based on two elements , second and third
print ( <name2> . <name4> ( 'utf8'   ) )	<name4> string <name2> to UTF -8 code
print ( <name1> . <name2> ( 'utf8'   ) )	<name2> string <name1> to UTF -8 code
np . ma . <name1> ( np . tile ( <name6> , 2 ) . reshape ( 2 , 3 ) , mask = ~  <name2> ) . argmax ( axis = 1 )	find the index of the maximum value in the <name1> <name6> where the boolean condition in <name1> <name2> is true
np . ma . <name1> ( np . tile ( <name2> , 2 ) . reshape ( 2 , 3 ) , mask = ~  <name3> ) . argmax ( axis = 1 )	find the index of the maximum value in the <name1> <name2> where the boolean condition in <name1> <name3> is true
pd . to_datetime ( <name3> . <name6> . str [ 1 : -3 ] )	convert a dataframe <name3> ' s column <name6> into datetime , after removing the first and last 3 letters
pd . to_datetime ( <name1> . <name2> . str [ 1 : -3 ] )	convert a dataframe <name1> ' s column <name2> into datetime , after removing the first and last 3 letters
<name1> = pd . read_csv ( <val5>   , dtype = {  <val3>   : np . float64 }  , na_values = [ <val4>   ] )	read CSV file <val5> into a dataframe <name1> with datatype of float for column <val3> considering character <val4> as NaN value
<name1> = pd . read_csv ( <val2>   , dtype = {  <val3>   : np . float64 }  , na_values = [ <val4>   ] )	read CSV file <val2> into a dataframe <name1> with datatype of float for column <val3> considering character <val4> as NaN value
df = pd . <name2> ( 'my.csv'   , na_values = [ 'n/a'   ] )	convert nan values to ‘ n / a ’  while reading rows from a csv <name2> with pandas
df = pd . <name1> ( 'my.csv'   , na_values = [ 'n/a'   ] )	convert nan values to ‘ n / a ’  while reading rows from a csv <name1> with pandas
<name4> ( itertools . product ( * <name6> ) )	create <name6> <name4> containing all cartesian products of elements in <name4> <name6>
<name1> ( itertools . product ( * <name2> ) )	create <name2> <name1> containing all cartesian products of elements in <name1> <name2>
re . sub ( '[^A-Z]'   , ''   , <name2> )	remove uppercased characters in string <name2>
re . sub ( '[^A-Z]'   , ''   , <name1> )	remove uppercased characters in string <name1>
datetime . strptime ( <val6>   , <val2>   )	convert string <val6> into a DateTime object using format <val2>
datetime . strptime ( <val1>   , <val2>   )	convert string <val1> into a DateTime object using format <val2>
codecs . open ( <val5>   , 'r'   , <val6>   ) . <name4> ( )	<name4> file <val5> using encoding <val6>
codecs . open ( <val1>   , 'r'   , <val2>   ) . <name3> ( )	<name3> file <val1> using encoding <val2>
[ <name5> ( x ) for x in <name2> ]	create a <name2> containing elements from <name2> <name2> that are predicate to function <name5>
[ <name1> ( x ) for x in <name2> ]	create a <name2> containing elements from <name2> <name2> that are predicate to function <name1>
re . findall ( '(?<!\\d)\\d{5}(?!\\d)'   , <name1> )	regex matching 5 - digit substrings not enclosed with digits in <name1>
[ item for item in <name2> <name1> <name6> ( item ) >   <val3> ]	create <name2> list containing elements of list <name2> <name1> the <name6> of the element is greater than <val3>
[ item for item in <name1> <name2> <name3> ( item ) >   <val4> ]	create <name1> list containing elements of list <name1> <name2> the <name3> of the element is greater than <val4>
<name5> = int ( round ( float ( <name1> . strip ( '$'   ) ) * 100 ) )	convert currency string <name1> to decimal <name5>
<name1> = int ( round ( float ( <name2> . strip ( '$'   ) ) * 100 ) )	convert currency string <name2> to decimal <name1>
'' '' ' ' '' ' ' '' ' . join ( dropwhile ( lambda x : x in bad_chars , example_line [ : : -1 ] ) ) [ : : -1 ]'	remove letters from string example_line if the letter exist in list bad_chars
<name5> = [ ]	Creating an empty list <name5>
<name1> = [ ]	Creating an empty list <name1>
<name3> = <name5> ( )	Creating an empty <name5> <name3>
<name1> = <name2> ( )	Creating an empty <name2> <name1>
<name5> ( )	Creating an empty <name5>
<name1> ( )	Creating an empty <name1>
[ ]	Creating an empty list
sys . exit ( 0 )	properly quit a program
<name3> [ : 4 ] + <val1>     + <name3> [ 4 : ]	add string <val1> in 4th position of a string <name3>
<name1> [ : 4 ] + <val2>     + <name1> [ 4 : ]	add string <val2> in 4th position of a string <name1>
[ [ ] for i <name2> range ( <val4> ) ]	append <val4> lists <name2> one list
[ [ ] for i <name1> range ( <val2> ) ]	append <val2> lists <name1> one list
<name6> = [ [ ] for i in range ( <val3> ) ]	Initialize <name6> list of empty lists <name6> of size <val3>
<name1> = [ [ ] for i in range ( <val2> ) ]	Initialize <name1> list of empty lists <name1> of size <val2>
requests . get ( <name2> , headers = {  'referer'   : my_referer }  )	request URL <name2> using http header {'referer': my_referer}
requests . get ( <name1> , headers = {  'referer'   : my_referer }  )	request URL <name1> using http header {'referer': my_referer}
<name6> . ylim ( [ 0 , 1000 ] )	set the y axis range to 0, 1000 in subplot using <name6>
<name1> . ylim ( [ 0 , 1000 ] )	set the y axis range to 0, 1000 in subplot using <name1>
pd . get_dummies ( <name3> . apply ( pd . Series ) . stack ( ) ) . sum ( level = 0 )	convert a column of list in series <name3> to dummies
pd . get_dummies ( <name1> . apply ( pd . Series ) . stack ( ) ) . sum ( level = 0 )	convert a column of list in series <name1> to dummies
y = str ( int ( <name3> , 16 ) )	convert a hex string <name3> to string
y = str ( int ( <name1> , 16 ) )	convert a hex string <name1> to string
<name4> . isdigit ( )	check if string <name4> is an integer
<name1> . isdigit ( )	check if string <name1> is an integer
isdigit ( )	function to check if a string is a number
<name6> . isdigit ( )	check if string <name6> is a number
<name1> . isdigit ( )	check if string <name1> is a number
pd . read_csv ( StringIO ( <name1> ) , sep = ','   , comment = <val2>   )	pandas read comma - separated CSV file <name1> and skip commented lines starting with <val2>
df [ 'Date'   ] = df [ 'Date'   ] . apply ( lambda x : int ( str ( x ) [ <val3> : ] ) )	'pandas: change all the values of a column ' Date ' into ' 'int(str(x)[-4:])' <val3>
df [ 'Date'   ] = df [ 'Date'   ] . apply ( lambda x : int ( str ( x ) [ <val1> : ] ) )	'pandas: change all the values of a column ' Date ' into ' 'int(str(x)[-4:])' <val1>
<name2> ( <name3> )	<name2> a list of numbers <name3>
<name1> ( <name2> )	<name1> a list of numbers <name2>
max ( <name5> , <name4> = <name1> x : x [ <val3>   ] )	Get an item from a list of dictionary <name5> which has maximum value in the <name4> <val3> using <name1> function
max ( <name1> , <name2> = <name3> x : x [ <val4>   ] )	Get an item from a list of dictionary <name1> which has maximum value in the <name2> <val4> using <name3> function
soup . findAll ( attrs = {  <val1>   : <val3>  }  )	BeautifulSoup find all tags with attribute <val1> equal to <val3>
soup . findAll ( attrs = {  <val1>   : <val2>  }  )	BeautifulSoup find all tags with attribute <val1> equal to <val2>
str ( {  'a'   : 1 , 'b'   : 'as df'  }  ) . replace ( ': '   , ':'   ) . replace ( ', '   , ','   )	remove all spaces from a string converted from dictionary {'a': 1, 'b': 'as df'}
'{'     + ','   . join ( '{0!r}:{1!r}'   . format ( * x ) for x in list ( dct . items ( ) ) ) + '}'	convert dictionary dict into a string formatted object
'' '' ' ' '' ' ' '' ' . join ( parts [ 1 : ] )'	concatenate items from list parts into a string starting from the second element
'' '' ' ' ',+' ' ' '' ' . join ( c . rsplit ( ' + ' , 1 ) )'	insert a character ',' into a string in front of '+' character in second part of the string
<name2> [ np . <name5> ( <name2> != <val3> , axis = 1 ) ]	delete <name5> rows in <name2> numpy array <name2> where any value in <name2> row is zero <val3>
<name1> [ np . <name2> ( <name1> != <val3> , axis = 1 ) ]	delete <name2> rows in <name1> numpy array <name1> where any value in <name1> row is zero <val3>
'' '' ' ' ' ' ' ' '' ' . join ( re . split ( ' [ ^ <name3> - zA - Z ] * ' , ' your <name5> ' ) )'	extract only alphabetic characters from <name3> <name5> 'your string'
'' '' ' ' ' ' ' ' '' ' . join ( re . split ( ' [ ^ <name1> - zA - Z ] * ' , ' your <name2> ' ) )'	extract only alphabetic characters from <name1> <name2> 'your string'
re . split ( '[^a-zA-Z]*'   , 'your string'   )	Extract only characters from a string as a list
results_union = <name3> ( ) . <name6> ( * <name2> )	get the <name6> <name3> from list of lists <name2>
results_union = <name1> ( ) . <name2> ( * <name3> )	get the <name2> <name1> from list of lists <name3>
return <name4> ( set ( itertools . chain ( * <name3> ) ) )	get the union of values in <name4> of lists <name3>
return <name1> ( set ( itertools . chain ( * <name2> ) ) )	get the union of values in <name1> of lists <name2>
np . <name5> ( np . in1d ( <name4> , <name1> ) )	check if a numpy array <name4> contains <name5> element of another array <name1>
np . <name1> ( np . in1d ( <name2> , <name3> ) )	check if a numpy array <name2> contains <name1> element of another array <name3>
return ''   . join ( ch for ch in <name1> if unicodedata . category ( ch ) [ 0 ] != 'C'   )	removing control characters from a string <name1>
all ( i <   j for i , j <name2> zip ( <name4> , <name3> ) )	Compare if each value <name2> list <name4> is less than respective index value <name2> list <name3>
all ( i <   j for i , j <name1> zip ( <name2> , <name3> ) )	Compare if each value <name1> list <name2> is less than respective index value <name1> list <name3>
driver . find_element_by_css_selector ( <val6>   ) . <name5> ( )	python selenium <name5> on button <val6>
driver . find_element_by_css_selector ( <val1>   ) . <name2> ( )	python selenium <name2> on button <val1>
os . system ( 'taskkill /im make.exe'   )	kill a process make.exe from python script on windows
print ( <name3> ( [ <name4> , func . current_date ( ) ] ) . execute ( ) )	SQLAlchemy <name3> records of columns of table <name4> in addition to current date column
print ( <name1> ( [ <name2> , func . current_date ( ) ] ) . execute ( ) )	SQLAlchemy <name1> records of columns of table <name2> in addition to current date column
re . sub ( '([a-z])\\1+'   , '\\1'   , <val2>   )	remove duplicate characters from string <val2>
re . sub ( '([a-z])\\1+'   , '\\1'   , <val1>   )	remove duplicate characters from string <val1>
re . sub ( '(?<!\\w)([A-Z])\\.'   , '\\1'   , <name5> )	remove periods inbetween capital letters that aren ' t immediately preceeded by word character ( <name5> ) in a string <name5> using regular expressions
re . sub ( '(?<!\\w)([A-Z])\\.'   , '\\1'   , <name1> )	remove periods inbetween capital letters that aren ' t immediately preceeded by word character ( <name1> ) in a string <name1> using regular expressions
split_list = [ <name2> [ i : i + <name1> ] for i in range ( 0 , len ( <name2> ) , <name1> ) ]	Get a list of strings split_text with fixed chunk size <name1> from a string <name2>
split_list = [ <name1> [ i : i + <name2> ] for i in range ( 0 , len ( <name1> ) , <name2> ) ]	Get a list of strings split_text with fixed chunk size <name2> from a string <name1>
re . sub ( '\\b(this|string)\\b'   , '<markup>\\1</markup>'   , 'this is my string'   )	'match string ' this is my string ' with regex ' \\ b ( this | string ) \\ b '
pandas . set_option ( 'display.max_columns'   , <val1> )	output data of the first <val1> columns of Pandas dataframe
<name2> . set_option ( 'display.max_columns'   , None )	Display maximum output data of columns in dataframe <name2> that will fit into the screen
<name1> . set_option ( 'display.max_columns'   , None )	Display maximum output data of columns in dataframe <name1> that will fit into the screen
<name1> . ix [ <name1> . A == <val2> , <val4>   ] = np . nan	set the value in column <val4> to NaN if the corresponding value in column 'A' is equal to <val2> in pandas dataframe <name1>
<name1> . ix [ <name1> . A == <val2> , <val3>   ] = np . nan	set the value in column <val3> to NaN if the corresponding value in column 'A' is equal to <val2> in pandas dataframe <name1>
'driver . find_element_by_xpath ( ' '//li/label/input[contains(..,' polishpottery ')]' ' )'	'Selecting Element ' '//li/label/input' ' followed by text ' 'polishpottery' ' with Selenium WebDriver `driver`'
mylist . sort ( key = operator . itemgetter ( <val4>   , <val2>   ) )	'Sort a list of dictionaries `mylist` by keys ' <val4> ' and ' <val2> ''
mylist . sort ( key = operator . itemgetter ( <val1>   , <val2>   ) )	'Sort a list of dictionaries `mylist` by keys ' <val1> ' and ' <val2> ''
<name2> . sort ( key = lambda d : ( d [ <val5>   ] , d [ <val1>   ] ) )	ordering a list of dictionaries <name2> by elements <val5> and <val1>
<name1> . sort ( key = lambda d : ( d [ <val2>   ] , d [ <val3>   ] ) )	ordering a list of dictionaries <name1> by elements <val2> and <val3>
{  x [ 1 ] : x for x in <name5> }	Convert a list of lists <name5> to a dictionary with key as second value of a list and value as list itself
{  x [ 1 ] : x for x in <name1> }	Convert a list of lists <name1> to a dictionary with key as second value of a list and value as list itself
sorted ( d , key = lambda k : d [ k ] [ 1 ] )	sort keys of dictionary 'd' based on their values
int ( <name6> ( <val2> , -2 ) )	<name6> <val2> to 100
int ( <name1> ( <val2> , -2 ) )	<name1> <val2> to 100
fd = os . open ( <val4>   , os . O_WRONLY |   os . O_CREAT |   os . O_EXCL )	create file <val4> if file <val4> does not exist
fd = os . open ( <val1>   , os . O_WRONLY |   os . O_CREAT |   os . O_EXCL )	create file <val1> if file <val1> does not exist
new_list = [ x . split ( ) [ -1 ] for x in <name1> ]	get a list of last trailing words from another list of strings <name1>
<val5>   [ : : ( -1 ) ]	Reverse a string <val5>
<val1>   [ : : ( -1 ) ]	Reverse a string <val1>
<name6> [ : : ( -1 ) ]	Reverse list <name6>
<name1> [ : : ( -1 ) ]	Reverse list <name1>
''   . join ( reversed ( <val1>   ) )	Reverse string <val1>
''   . join ( reversed ( <name4> ) )	Reverse a <name4> <name4>
''   . join ( reversed ( <name1> ) )	Reverse a <name1> <name1>
<val2>   [ : : ( <val5> ) ]	'Reverse a string ' <val2> <val5>
<val1>   [ : : ( <val2> ) ]	'Reverse a string ' <val1> <val2>
<name6> [ : : ( -1 ) ]	Reverse a string <name6>
<name1> [ : : ( -1 ) ]	Reverse a string <name1>
''   . join ( reversed ( <name2> ) )	Reverse a string <name2>
''   . join ( reversed ( <name1> ) )	Reverse a string <name1>
'' '' ' ' ',' ' ' '' ' . join ( str ( i ) for i in range ( 100 ) if i % 4 in ( 1 , 2 ) )'	generate a string of numbers separated by comma which is divisible by 4 with remainder 1 or 2 .
dict ( [ ( e [ 0 ] , int ( e [ 1 ] ) ) for e in <name1> ] )	convert list <name1> of key , value pairs into a dictionary
sorted ( <name4> , key = lambda tup : tup [ : : -1 ] )	sorting a list of tuples <name4> where each tuple is reversed
sorted ( <name1> , key = lambda tup : tup [ : : -1 ] )	sorting a list of tuples <name1> where each tuple is reversed
sorted ( <name1> , <name3> = lambda tup : tup [ 1 ] )	sorting a list of tuples <name1> by second <name3>
sorted ( <name1> , <name2> = lambda tup : tup [ 1 ] )	sorting a list of tuples <name1> by second <name2>
numpy . concatenate ( [ a , b ] )	Concatenating two one - dimensional NumPy arrays 'a' and 'b' .
pickle . dump ( <name5> , <name1> )	serialize <name5> to file <name1>
pickle . dump ( <name1> , <name2> )	serialize <name1> to file <name2>
<name2> . write ( '\n'   . join ( <name5> ) )	writing items in list <name5> to file <name2>
<name1> . write ( '\n'   . join ( <name2> ) )	writing items in list <name2> to file <name1>
session . query ( User ) . filter_by ( <name5> = <val2> ) . update ( {  'name'   : <val1>  }  )	Update a user ' s name as <val1> having <name5> <val2> in SQLAlchemy
session . query ( User ) . filter_by ( <name1> = <val2> ) . update ( {  'name'   : <val3>  }  )	Update a user ' s name as <val3> having <name1> <val2> in SQLAlchemy
r = <name3> . <name4> ( <val2>   , <name5> = <name6> )	send <name5> <name6> in a <name4> request to url <val2> with the python <name3> library
r = <name1> . <name2> ( <val3>   , <name4> = <name5> )	send <name4> <name5> in a <name2> request to url <val3> with the python <name1> library
sys . path . <name3> ( <val4> , <val2>   )	<name3> directory <val2> at the <val4> th index of current directory
sys . path . <name1> ( <val2> , <val3>   )	<name1> directory <val3> at the <val2> th index of current directory
datetime . datetime . now ( )	get current date and time
datetime . datetime . now ( ) . <name5> ( )	get current <name5>
datetime . datetime . now ( ) . <name1> ( )	get current <name1>
strftime ( '%Y-%m-%d %H:%M:%S'   , gmtime ( ) )	get current time in pretty format
str ( datetime . now ( ) )	get current time in string format
datetime . datetime . <name2> ( datetime . datetime . now ( ) )	get current <name2>
datetime . datetime . <name1> ( datetime . datetime . now ( ) )	get current <name1>
ord ( <val6>   )	convert hex <val6> to integer
ord ( <val1>   )	convert hex <val1> to integer
<name2> . groupby ( [ <val6>   , <val3>   ] ) . cumcount ( ) + 1	identify duplicated rows in columns <val6> and <val3> with additional column in dataframe <name2>
<name1> . groupby ( [ <val2>   , <val3>   ] ) . cumcount ( ) + 1	identify duplicated rows in columns <val2> and <val3> with additional column in dataframe <name1>
datetime . utcnow ( )	get current utc time
<name4> [ -1 : ] + <name4> [ : -1 ]	move last item of array <name4> to the first position
<name1> [ -1 : ] + <name1> [ : -1 ]	move last item of array <name1> to the first position
<name1> . set_index ( [ <val6>   , <val2>   , <val3>   ] ) . unstack ( level = -1 )	Convert dataframe <name1> to a pivot table using column <val6> , <val2> , and <val3> as indexes
<name1> . set_index ( [ <val2>   , <val3>   , <val4>   ] ) . unstack ( level = -1 )	Convert dataframe <name1> to a pivot table using column <val2> , <val3> , and <val4> as indexes
df . pivot_table ( values = 'value'   , <name2> = [ <val5>   , <val4>   ] , columns = 'item'   )	run a pivot with a multi - <name2> <val5> and <val4> in a pandas data frame
df . pivot_table ( values = 'value'   , <name1> = [ <val2>   , <val3>   ] , columns = 'item'   )	run a pivot with a multi - <name1> <val2> and <val3> in a pandas data frame
<name1> ( '\n\x1b[4m'     + '3'     + '\x1b[0m'     + '\n2'   )	<name1> a rational number 3/2
range ( <val6> , <val2> , -1 )	iterate backwards from <val6> to <val2>
range ( <val1> , <val2> , -1 )	iterate backwards from <val1> to <val2>
<name3> [ 0 ] . firstChild . nodeValue	get value of first child of xml node <name3>
<name1> [ 0 ] . firstChild . nodeValue	get value of first child of xml node <name1>
<name1> . start_new_thread ( <name6> , ( <val2>   , <val4> ) )	start a new <name1> for <name6> with parameters <val2> and <val4>
<name1> . start_new_thread ( <name2> , ( <val3>   , <val4> ) )	start a new <name1> for <name2> with parameters <val3> and <val4>
<name3> . start_new_thread ( <name2> , ( <val6>   , <val4> ) )	start a new <name3> for <name2> with parameters <val6> and <val4>
<name1> . start_new_thread ( <name2> , ( <val3>   , <val4> ) )	start a new <name1> for <name2> with parameters <val3> and <val4>
<name2> . <name3> ( max ( <name2> ) )	get <name3> of the first biggest element in list <name2>
<name1> . <name2> ( max ( <name1> ) )	get <name2> of the first biggest element in list <name1>
re . sub ( '\\.(?=[^ .])'   , <val3>   , para )	replace periods . that are not followed by periods or spaces with a period and a space <val3>
re . sub ( '\\.(?=[^ .])'   , <val1>   , para )	replace periods . that are not followed by periods or spaces with a period and a space <val1>
[ i . split ( ) for i <name5> re . findall ( '\\[([^\\[\\]]+)\\]'   , <name1> ) ]	convert <name1> string <name1> of letters embedded <name5> squared brackets into embedded lists
[ i . split ( ) for i <name1> re . findall ( '\\[([^\\[\\]]+)\\]'   , <name2> ) ]	convert <name2> string <name2> of letters embedded <name1> squared brackets into embedded lists
[ <name6> for <name6> in <name4> if <name6> [ <val2>   ] == <val1>   ]	extract dictionary <name6> from list <name4> where the value associated with the key <val2> of dictionary <name6> is equal to <val1>
[ <name1> for <name1> in <name2> if <name1> [ <val3>   ] == <val4>   ]	extract dictionary <name1> from list <name2> where the value associated with the key <val3> of dictionary <name1> is equal to <val4>
[ d for d in <name6> if d [ 'name'   ] == 'pluto'   ]	extract dictionary from list of dictionaries based on <name6> key ' s value .
[ d for d in <name1> if d [ 'name'   ] == 'pluto'   ]	extract dictionary from list of dictionaries based on <name1> key ' s value .
<name4> ( d . <name2> ( ) )	Retrieve <name4> of <name2> from dictionary 'd'
<name1> ( d . <name2> ( ) )	Retrieve <name1> of <name2> from dictionary 'd'
re . sub ( ' +'   , <val6>   , <name5> )	replace occurrences of two whitespaces or more with one whitespace <val6> in string <name5>
re . sub ( ' +'   , <val1>   , <name2> )	replace occurrences of two whitespaces or more with one whitespace <val1> in string <name2>
os . chmod ( <val4>   , <val2> )	Change the mode of file <val4> to permission number <val2>
os . chmod ( <val1>   , <val2> )	Change the mode of file <val1> to permission number <val2>
<name6> . to_csv ( <val2>   , index = False )	write pandas dataframe <name6> to the file <val2> without row names
<name1> . to_csv ( <val2>   , index = False )	write pandas dataframe <name1> to the file <val2> without row names
re . sub ( '\\w*\\d\\w*'   , ''   , <name4> ) . strip ( )	remove all <name4> which contains number from a string <name4> using regex
re . sub ( '\\w*\\d\\w*'   , ''   , <name1> ) . strip ( )	remove all <name1> which contains number from a string <name1> using regex
<name6> . rawinput . click ( 100 , 100 )	control the keyboard and mouse with <name6> in linux
<name1> . rawinput . click ( 100 , 100 )	control the keyboard and mouse with <name1> in linux
datetime . strptime ( <val6>   , <val2>   )	parse date string <val6> using format <val2>
datetime . strptime ( <val1>   , <val2>   )	parse date string <val1> using format <val2>
re . search ( '\\bis\\b'   , <name6> ) . start ( )	Get the position of a regex match for word is in a string <name6>
re . search ( '\\bis\\b'   , <name1> ) . start ( )	Get the position of a regex match for word is in a string <name1>
re . search ( <val4>   , <name2> ) . start ( )	Get the position of a regex match <val4> in a string <name2>
re . search ( <val1>   , <name2> ) . start ( )	Get the position of a regex match <val1> in a string <name2>
<name2> ( map ( int , <name6> ( ) . split ( ','   ) ) )	<name6> an integer <name2> from user
<name1> ( map ( int , <name2> ( ) . split ( ','   ) ) )	<name2> an integer <name1> from user
<name6> ( int ( x . strip ( ) ) for x in <name4> ( ) . split ( ','   ) )	<name4> a <name6> of integers from user
<name1> ( int ( x . strip ( ) ) for x in <name2> ( ) . split ( ','   ) )	<name2> a <name1> of integers from user
str . decode ( 'utf-8'   ) . <name4> ( <val2>   , <val6>   ) . encode ( 'utf-8'   )	<name4> unicode character <val2> in string 'str' with <val6>
str . decode ( 'utf-8'   ) . <name1> ( <val2>   , <val3>   ) . encode ( 'utf-8'   )	<name1> unicode character <val2> in string 'str' with <val3>
<name5> . decode ( 'utf-8'   ) . <name3> ( '\u2022'   , '*'   )	<name3> unicode characters '' \ u2022 ' in string ' <name5> ' with ' * '
<name1> . decode ( 'utf-8'   ) . <name2> ( '\u2022'   , '*'   )	<name2> unicode characters '' \ u2022 ' in string ' <name1> ' with ' * '
np . zeros ( ( <val6> , <val6> ) ) . ravel ( )	convert ndarray with shape <val6> x3 to array
np . zeros ( ( <val1> , <val1> ) ) . ravel ( )	convert ndarray with shape <val1> x3 to array
print ( os . <name2> )	get the <name2> of the OS
print ( os . <name1> )	get the <name1> of the OS
min ( <name3> , key = lambda x : <name5> ( 'inf'   ) if math . isnan ( x [ 1 ] ) else x [ 1 ] )	Get a minimum value from a <name3> of tuples <name3> with values of type string and <name5> with nan
min ( <name1> , key = lambda x : <name2> ( 'inf'   ) if math . isnan ( x [ 1 ] ) else x [ 1 ] )	Get a minimum value from a <name1> of tuples <name1> with values of type string and <name2> with nan
<name3> = [ ( sum ( x ) / len ( x ) ) for x in zip ( * <name3> ) ]	Find average of <name3> nested list <name3>
<name1> = [ ( sum ( x ) / len ( x ) ) for x in zip ( * <name1> ) ]	Find average of <name1> nested list <name1>
logging . <name3> ( <val5>   , extra = {  'app_name'   : 'myapp'  }  )	Log <name3> message <val5> with attributes {'app_name': 'myapp'}
logging . <name1> ( <val2>   , extra = {  'app_name'   : 'myapp'  }  )	Log <name1> message <val2> with attributes {'app_name': 'myapp'}
<name2> . applymap ( lambda x : isinstance ( x , ( int , float ) ) )	replace values of dataframe <name2> with True if numeric
<name1> . applymap ( lambda x : isinstance ( x , ( int , float ) ) )	replace values of dataframe <name1> with True if numeric
sorted ( <name5> , key = lambda x : int ( re . search ( '\\d+'   , x ) . group ( 0 ) ) )	sort list <name5> based on its elements '  digits
sorted ( <name1> , key = lambda x : int ( re . search ( '\\d+'   , x ) . group ( 0 ) ) )	sort list <name1> based on its elements '  digits
self . root . destroy ( )	close the window in tkinter
<name5> . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] . <name1> ( axis = 1 )	get <name1> of columns 2, 5, 6, 7, 8 for all rows in dataframe <name5>
<name1> . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] . <name2> ( axis = 1 )	get <name2> of columns 2, 5, 6, 7, 8 for all rows in dataframe <name1>
<name3> [ <name3> . <name6> . map ( lambda x : x [ 1 ] . endswith ( <val1>   ) ) ]	filter dataframe <name3> by sub - level <name6> <val1> in pandas
<name1> [ <name1> . <name2> . map ( lambda x : x [ 1 ] . endswith ( <val3>   ) ) ]	filter dataframe <name1> by sub - level <name2> <val3> in pandas
db . session . <name6> ( <name4> )	flask - sqlalchemy <name6> row <name4>
db . session . <name1> ( <name2> )	flask - sqlalchemy <name1> row <name2>
'' '' ' ' '' ' ' '' ' . join ( chr ( ord ( c ) ) for c in ' Andr \ xc3 \ xa9 ' )'	Format a string u'Andr\xc3\xa9' that has unicode characters
'' '' ' ' '' ' ' '' ' . join ( chr ( ord ( c ) ) for c in ' Andr \ xc3 \ xa9 ' ) . decode ( ' utf8 ' )'	convert a unicode 'Andr\xc3\xa9' to a string
os . listdir ( <name6> )	list all files in directory <name6>
os . listdir ( <name1> )	list all files in directory <name1>
os . <name2> ( <name3> , <name3> + <val5>   )	<name2> file <name3> to <name3> + <val5>
os . <name1> ( <name2> , <name2> + <val3>   )	<name1> file <name2> to <name2> + <val3>
'' '' ' ' <val4> ' ' '' ' . join ( a + b for a , b in zip ( s [ : : 2 ] , s [ 1 : : 2 ] ) )'	Insert a character <val4> after every two elements in a string s
'' '' ' ' <val1> ' ' '' ' . join ( a + b for a , b in zip ( s [ : : 2 ] , s [ 1 : : 2 ] ) )'	Insert a character <val1> after every two elements in a string s
print ( '%.3f'     % 3.1415 )	printing numbers rounding up to third decimal place
<name4> [ 0 ] [ <val6>   ] = <name2>	add variable <name2> to key <val6> of first element in JSON <name4> <name4>
<name1> [ 0 ] [ <val2>   ] = <name3>	add variable <name3> to key <val2> of first element in JSON <name1> <name1>
print ( <name3> . __file__ )	get the path of module <name3>
print ( <name1> . __file__ )	get the path of module <name1>
print ( os . getcwd ( ) )	get the path of the current python module
<name5> = os . <name5> . abspath ( <name1> . __file__ )	get the <name5> of the python module <name1>
<name1> = os . <name1> . abspath ( <name2> . __file__ )	get the <name1> of the python module <name2>
self . <name3> . extend ( [ <val5> ] * ( <val2> - len ( self . <name3> ) ) )	fill list <name3> with <val2> <val5> ' s
self . <name1> . extend ( [ <val2> ] * ( <val3> - len ( self . <name1> ) ) )	fill list <name1> with <val3> <val2> ' s
<name6> [ ~  <name6> . index . duplicated ( ) ]	drop duplicate indexes in a pandas data frame <name6>
<name1> [ ~  <name1> . index . duplicated ( ) ]	drop duplicate indexes in a pandas data frame <name1>
<name1> ( * <name2> )	unpack elements of list <name2> as arguments into function <name1>
[ ( '%.2d'     % i ) for i <name4> range ( 16 ) ]	generate list of numbers <name4> specific format using string formatting precision .
[ ( '%.2d'     % i ) for i <name1> range ( 16 ) ]	generate list of numbers <name1> specific format using string formatting precision .
sorted ( iter ( <name1> . items ( ) ) , key = lambda tup : <name6> ( tup [ 1 ] ) , reverse = True ) [ : 3 ]	sort dictionary <name1> in descending order based on the <name6> of each value in it
sorted ( iter ( <name1> . items ( ) ) , key = lambda tup : <name2> ( tup [ 1 ] ) , reverse = True ) [ : 3 ]	sort dictionary <name1> in descending order based on the <name2> of each value in it
heapq . nlargest ( <val2> , iter ( <name1> . <name6> ( ) ) , key = lambda tup : <name4> ( tup [ 1 ] ) )	get top <val2> <name6> from a dictionary <name1> with largest <name4> of values
heapq . nlargest ( <val1> , iter ( <name2> . <name3> ( ) ) , key = lambda tup : <name4> ( tup [ 1 ] ) )	get top <val1> <name3> from a dictionary <name2> with largest <name4> of values
[ 'a'   , <val2>   ] . <name5> ( <val2>   )	get <name5> of character <val2> in list '[' a ', ' b ']'
[ 'a'   , <val1>   ] . <name2> ( <val1>   )	get <name2> of character <val1> in list '[' a ', ' b ']'
<name4> . setp ( <name3> . get_title ( ) , fontsize = <val6>   )	set font size of axis <name3> of plot <name4> to <val6>
<name1> . setp ( <name2> . get_title ( ) , fontsize = <val3>   )	set font size of axis <name2> of plot <name1> to <val3>
[ x [ 1 ] for x in <name5> ]	extract the 2 nd <name5> from a list of tuples
[ x [ 1 ] for x in <name1> ]	extract the 2 nd <name1> from a list of tuples
np . diag ( np . rot90 ( <name5> ) )	get the opposite diagonal of a numpy <name5> <name5>
np . diag ( np . rot90 ( <name1> ) )	get the opposite diagonal of a numpy <name1> <name1>
<name5> ( chain . from_iterable ( <name4> ) )	flatten <name5> of tuples <name4>
<name1> ( chain . from_iterable ( <name2> ) )	flatten <name1> of tuples <name2>
re . sub ( '\\s{2,}'   , <val1>   , <name2> . strip ( ) )	substitute two or more whitespace characters with character <val1> in string <name2>
<name5> ( ( '%.2f'     % <name1> ) )	<name5> float <name1> with two decimal points
<name1> ( ( '%.2f'     % <name2> ) )	<name1> float <name2> with two decimal points
<name5> ( ( '{0:.2f}'   . format ( <name3> ) ) )	<name5> float <name3> with two decimal points
<name1> ( ( '{0:.2f}'   . format ( <name2> ) ) )	<name1> float <name2> with two decimal points
<name2> ( ( '{0:.2f}'   . format ( round ( <name3> , 2 ) ) ) )	<name2> float <name3> with two decimal points
<name1> ( ( '{0:.2f}'   . format ( round ( <name2> , 2 ) ) ) )	<name1> float <name2> with two decimal points
<name3> ( ( '%.2f'     % round ( <name1> , 2 ) ) )	<name3> float <name1> with two decimal points
<name1> ( ( '%.2f'     % round ( <name2> , 2 ) ) )	<name1> float <name2> with two decimal points
( '%.2f'     % <val2> )	limit float <val2> to two decimal points
( '%.2f'     % <val1> )	limit float <val1> to two decimal points
( '%.2f'     % <val1> )	limit float <val1> to two decimal points
<name1> ( '{0:.2f}'   . format ( 13.95 ) )	limit <name1> 13.949999999999999 to two decimal points
'{0:.2f}'   . format ( 13.95 )	limit float 13.949999999999999 to two decimal points
DataFrame . from_csv ( <val4>   , sep = '\t'   )	load a tsv file <val4> into a pandas data frame
DataFrame . from_csv ( <val1>   , sep = '\t'   )	load a tsv file <val1> into a pandas data frame
dateutil . parser . parse ( '2013/09/11 00:17 +0900'   )	set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'
cur . mogrify ( <val3>   , ( ( <val4> , <val1> , <val5> ) , ) )	pass a list of parameters ` ( ( <val4> , <val1> , <val5> ) , ) to sql queue <val3>
cur . mogrify ( <val1>   , ( ( <val2> , <val3> , <val4> ) , ) )	pass a list of parameters ` ( ( <val2> , <val3> , <val4> ) , ) to sql queue <val1>
<name1> ( [ <name1> ( x ) for x in [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ] )	<name1> all elements of two - dimensions list [[1, 2, 3, 4], [2, 4, 5, 6]]]
next ( iter ( <name1> . values ( ) ) )	Retrieve an arbitrary value from dictionary <name1>
next ( iter ( list ( <name1> . values ( ) ) ) )	access an arbitrary value from dictionary <name1>
<name2> . groupby ( [ <val4>   , <val3>   ] ) . sum ( ) . unstack ( level = 0 )	group dataframe <name2> by columns <val4> and <val3>
<name1> . groupby ( [ <val2>   , <val3>   ] ) . sum ( ) . unstack ( level = 0 )	group dataframe <name1> by columns <val2> and <val3>
sorted ( <name2> , <name6> = lambda x : <name1> . index ( x [ 1 ] ) )	sort list <name2> of tuples by arbitrary <name6> from list <name1>
sorted ( <name1> , <name2> = lambda x : <name3> . index ( x [ 1 ] ) )	sort list <name1> of tuples by arbitrary <name2> from list <name3>
sorted ( <name4> , <name2> = lambda x : x [ 'passport'   ] [ 'birth_info'   ] [ 'date'   ] )	sort a list of dictionary <name4> according to the <name2> ['passport']['birth_info']['date']
sorted ( <name1> , <name2> = lambda x : x [ 'passport'   ] [ 'birth_info'   ] [ 'date'   ] )	sort a list of dictionary <name1> according to the <name2> ['passport']['birth_info']['date']
urlparse . urldefrag ( <val1>   )	remove the fragment identifier #something from a url <val1>
urllib . request . urlretrieve ( <val2>   , <val6>   )	download to a directory <val6> from source <val2>
urllib . request . urlretrieve ( <val1>   , <val2>   )	download to a directory <val2> from source <val1>
<name3> ( set ( frozenset ( item ) for item in <name4> ) )	remove all duplicates from a <name3> of sets <name4>
<name1> ( set ( frozenset ( item ) for item in <name2> ) )	remove all duplicates from a <name1> of sets <name2>
[ set ( item ) for item in set ( frozenset ( item ) for item in L ) ]	remove duplicates from a list of sets 'L'
<name6> . <name2> ( )	<name2> process <name6>
<name1> . <name2> ( )	<name2> process <name1>
del <name2> [ : ]	delete all values in a list <name2>
del <name1> [ : ]	delete all values in a list <name1>
ctypes . windll . user32 . MessageBoxW ( 0 , 'Error'   , 'Error'   , 0 )	throw an error window in python in windows
<name1> = <name2> ( [ _f for _f in <name1> if _f ] )	remove empty strings from <name2> <name1>
re . sub ( '[\\ \\n]{2,}'   , ''   , <name5> )	remove newlines and whitespace from string <name5>
re . sub ( '[\\ \\n]{2,}'   , ''   , <name1> )	remove newlines and whitespace from string <name1>
re . sub ( '\\.[^.]+$'   , ''   , <name3> )	remove the last dot and all text beyond it in string <name3>
re . sub ( '\\.[^.]+$'   , ''   , <name1> )	remove the last dot and all text beyond it in string <name1>
<name5> [ np . all ( np . any ( <name5> - <name6> [ : , ( None ) ] , axis = 2 ) , axis = 0 ) ]	remove elements from an array <name5> that are in array <name6>
<name1> [ np . all ( np . any ( <name1> - <name2> [ : , ( None ) ] , axis = 2 ) , axis = 0 ) ]	remove elements from an array <name1> that are in array <name2>
<name5> . to_csv ( <val4>   , cols = [ <val1>   ] )	Write column <val1> of DataFrame <name5> to csv file <val4>
<name1> . to_csv ( <val2>   , cols = [ <val3>   ] )	Write column <val3> of DataFrame <name1> to csv file <val2>
exec ( compile ( open ( <val6>   ) . read ( ) , <val6>   , 'exec'   ) )	'call a Python script ' <val6> ''
exec ( compile ( open ( <val1>   ) . read ( ) , <val1>   , 'exec'   ) )	'call a Python script ' <val1> ''
subprocess . call ( <val4>   , shell = True )	'call a Python script ' <val4> ''
subprocess . call ( <val1>   , shell = True )	'call a Python script ' <val1> ''
sorted ( <name3> , key = <name1> x : x [ 1 ] )	sort a <name3> list <name3> using <name1> function
sorted ( <name1> , key = <name2> x : x [ 1 ] )	sort a <name1> list <name1> using <name2> function
sorted ( list ( <name3> . items ( ) ) , <name4> = lambda x : ( x [ 1 ] , x [ 0 ] ) , reverse = True )	sort a dictionary <name3> by value then by <name4>
sorted ( list ( <name1> . items ( ) ) , <name2> = lambda x : ( x [ 1 ] , x [ 0 ] ) , reverse = True )	sort a dictionary <name1> by value then by <name2>
<name3> . find_all ( 'div'   , class_ = 'crBlock '   )	using beautifulsoup to select div blocks within html <name3>
<name1> . find_all ( 'div'   , class_ = 'crBlock '   )	using beautifulsoup to select div blocks within html <name1>
[ element for i , element <name4> enumerate ( <name5> ) if i not <name4> <name3> ]	remove elements from list <name5> the indexes of which are <name4> array <name3>
[ element for i , element <name1> enumerate ( <name2> ) if i not <name1> <name3> ]	remove elements from list <name2> the indexes of which are <name1> array <name3>
<name2> ( set ( <name5> ) &   set ( <name3> ) )	<name2> duplicated elements in two lists <name5> and <name3>
<name1> ( set ( <name2> ) &   set ( <name3> ) )	<name1> duplicated elements in two lists <name2> and <name3>
urllib . request . urlretrieve ( <val2>   , <val3>   )	'download file from http url ' <val2> ' and save as ' <val3> ''
urllib . request . urlretrieve ( <val1>   , <val2>   )	'download file from http url ' <val1> ' and save as ' <val2> ''
file_name = wget . <name4> ( <name5> )	<name4> file from http url <name5>
file_name = wget . <name1> ( <name2> )	<name1> file from http url <name2>
<name3> . set_yticklabels ( [ '\xe9'   , '\xe3'   , '\xe2'   ] )	set an array of unicode characters [u'\xe9', u'\xe3', u'\xe2'] as labels in Matplotlib <name3>
<name1> . set_yticklabels ( [ '\xe9'   , '\xe3'   , '\xe2'   ] )	set an array of unicode characters [u'\xe9', u'\xe3', u'\xe2'] as labels in Matplotlib <name1>
<name2> ( itertools . product ( <name2> ( range ( - x , <name3> ) ) , repeat = <name4> ) )	get a <name2> of all integer points in a <name4> dimensional hypercube with coordinates from -x to <name3> for all dimensions
<name1> ( itertools . product ( <name1> ( range ( - x , <name2> ) ) , repeat = <name3> ) )	get a <name1> of all integer points in a <name3> dimensional hypercube with coordinates from -x to <name2> for all dimensions
print ( <name5> . encode ( 'unicode_escape'   ) )	convert unicode string <name5> into string literals
print ( <name1> . encode ( 'unicode_escape'   ) )	convert unicode string <name1> into string literals
'Hello %s'     % ', '   . join ( <name4> )	how to format a list of arguments <name4> into a string
'Hello %s'     % ', '   . join ( <name1> )	how to format a list of arguments <name1> into a string
re . <name2> ( <val5>   , <val1>   , 1 )	search and <name2> string <val1> by delimiter <val5>
re . <name1> ( <val2>   , <val3>   , 1 )	search and <name1> string <val3> by delimiter <val2>
re . <name4> ( <val1>   , <val3>   , 1 )	regex search and <name4> string <val3> by delimiter <val1>
re . <name1> ( <val2>   , <val3>   , 1 )	regex search and <name1> string <val3> by delimiter <val2>
pd . DataFrame ( <name3> )	convert a list of dictionaries <name3> to pandas data frame
pd . DataFrame ( <name1> )	convert a list of dictionaries <name1> to pandas data frame
'' '' ' ' <val4> ' ' '' ' . split ( )'	'split string ' <val4> ' into words that do not contain whitespaces'
'' '' ' ' <val1> ' ' '' ' . split ( )'	'split string ' <val1> ' into words that do not contain whitespaces'
'' '' ' ' <val5> ' ' '' ' . split ( )'	'split string ' <val5> ' into words that does not contain whitespaces'
'' '' ' ' <val1> ' ' '' ' . split ( )'	'split string ' <val1> ' into words that does not contain whitespaces'
woduplicates = <name1> ( set ( <name5> ) )	remove all duplicate items from a <name1> <name5>
woduplicates = <name1> ( set ( <name2> ) )	remove all duplicate items from a <name1> <name2>
<name3> ( [ ( i * j ) for i , j <name2> <name4> ( itertools . <name5> ( <name6> , 2 ) ) ] )	<name3> of product of <name5> <name2> a <name4> <name6>
<name1> ( [ ( i * j ) for i , j <name2> <name3> ( itertools . <name4> ( <name5> , 2 ) ) ] )	<name1> of product of <name4> <name2> a <name3> <name5>
re . compile ( '{}-\\d*'   . format ( user ) )	regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits .
[ <name6> ( i ) for i <name5> <name4> ]	convert all of the items <name5> a list <name4> to <name6>
[ <name1> ( i ) for i <name2> <name3> ]	convert all of the items <name2> a list <name3> to <name1>
writer . writerow ( <name5> )	write a tuple of tuples <name5> to a csv file using python
writer . writerow ( <name1> )	write a tuple of tuples <name1> to a csv file using python
writer . writerows ( <name2> )	Write all tuple of tuples <name2> at once into csv file
writer . writerows ( <name1> )	Write all tuple of tuples <name1> at once into csv file
'' '' ' ' <val4> ' ' '' ' . format ( ' <name1> ' , ' <name5> ' )'	'python, format string ' <val4> ' to have ' <name1> ' and ' <name5> ' in the first and second positions'
'' '' ' ' <val1> ' ' '' ' . format ( ' <name2> ' , ' <name3> ' )'	'python, format string ' <val1> ' to have ' <name2> ' and ' <name3> ' in the first and second positions'
<name4> = [ x . replace ( <val3>   , ''   ) for x <name6> <name4> ]	Truncate <val3> from each string <name6> a list of string <name4>
<name1> = [ x . replace ( <val2>   , ''   ) for x <name3> <name1> ]	Truncate <val2> from each string <name3> a list of string <name1>
[ i . partition ( <val1>   ) [ -1 ] for i in <name6> if <val1>     in i ]	split elements of a list <name6> by <val1>
[ i . partition ( <val1>   ) [ -1 ] for i in <name2> if <val1>     in i ]	split elements of a list <name2> by <val1>
re . <name2> ( <val1>   , <name6> , re . DOTALL )	<name2> for regex pattern <val1> in string <name6> including new line character '\n'
re . <name1> ( <val2>   , <name3> , re . DOTALL )	<name1> for regex pattern <val2> in string <name3> including new line character '\n'
<name5> = driver . find_element_by_css_selector ( 'li.next>a'   )	find button that is in li class <name5> and assign it to variable <name5>
<name1> = driver . find_element_by_css_selector ( 'li.next>a'   )	find button that is in li class <name1> and assign it to variable <name1>
os . stat ( <val2>   ) . st_size	get the size of file <val2>
os . stat ( <val1>   ) . st_size	get the size of file <val1>
imtag = re . <name4> ( <val3>   , line ) . group ( 0 )	return a string from a regex <name4> with pattern <val3> in string 'line'
imtag = re . <name1> ( <val2>   , line ) . group ( 0 )	return a string from a regex <name1> with pattern <val2> in string 'line'
os . rename ( <val4>   , <val6>   )	Rename a folder <val4> to <val6>
os . rename ( <val1>   , <val2>   )	Rename a folder <val1> to <val2>
re . findall ( '(?=(\\w\\w))'   , <val1>   )	find overlapping matches from a string <val1> using regex
bin ( <val5> )	convert <val5> to binary string
bin ( <val1> )	convert <val1> to binary string
int ( <val4>   , 2 )	convert binary string <val4> to integer
int ( <val1>   , 2 )	convert binary string <val1> to integer
int ( <val2>   , 2 )	convert binary string <val2> to integer
int ( <val1>   , 2 )	convert binary string <val1> to integer
int ( <val5>   , 2 )	convert binary string <val5> to integer
int ( <val1>   , 2 )	convert binary string <val1> to integer
bin ( <val3> )	convert <val3> to binary string
bin ( <val1> )	convert <val1> to binary string
int ( <val2>   , 2 )	convert binary string <val2> to integer
int ( <val1>   , 2 )	convert binary string <val1> to integer
re . sub ( '$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$'   , ''   , <name4> )	delete all digits in string <name4> that are not directly attached to a word character
re . sub ( '$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$'   , ''   , <name1> )	delete all digits in string <name1> that are not directly attached to a word character
re . sub ( '\\b\\d+\\b'   , ''   , <name3> )	delete digits at the end of string <name3>
re . sub ( '\\b\\d+\\b'   , ''   , <name1> )	delete digits at the end of string <name1>
<name6> = re . sub ( '^\\d+\\s|\\s\\d+\\s|\\s\\d+$'   , ' '   , <name6> )	Delete self - contained digits from string <name6>
<name1> = re . sub ( '^\\d+\\s|\\s\\d+\\s|\\s\\d+$'   , ' '   , <name1> )	Delete self - contained digits from string <name1>
<name3> . split ( <val2>   , 1 ) [ 1 ]	truncate string <name3> up to character <val2>
<name1> . split ( <val2>   , 1 ) [ 1 ]	truncate string <name1> up to character <val2>
<name5> ( <name1> . split ( <val2>   ) )	<name5> a string <name1> by splitting with comma <val2>
<name1> ( <name2> . split ( <val3>   ) )	<name1> a string <name2> by splitting with comma <val3>
mystring . split ( <val4>   )	'Create list  by splitting string `mystring` using ' <val4> ' as delimiter'
mystring . split ( <val1>   )	'Create list  by splitting string `mystring` using ' <val1> ' as delimiter'
re . sub ( '\\((\\w+)\\)'   , '\\1'   , <name5> )	remove parentheses only around single words in a string <name5> using regex
re . sub ( '\\((\\w+)\\)'   , '\\1'   , <name1> )	remove parentheses only around single words in a string <name1> using regex
<name4> . open_new ( <name2> )	<name4> open <name2> <name2>
<name1> . open_new ( <name2> )	<name1> open <name2> <name2>
<name1> . <name3> ( <val6>   )	<name1> <name3> url <val6>
<name1> . <name2> ( <val3>   )	<name1> <name2> url <val3>
self . pushButton . setStyleSheet ( 'background-color: red'   )	change the background colour of the button pushbutton to red
[ x ( y ) for x , y in zip ( <name5> , <name4> ) ]	apply a list of <name5> named 'functions' over a list of <name4> named 'values'
[ x ( y ) for x , y in zip ( <name1> , <name2> ) ]	apply a list of <name1> named 'functions' over a list of <name2> named 'values'
wx . TextCtrl ( self , -1 , size = ( <val6> , -1 ) )	modify the width of a text control as <val6> keeping default height in wxpython
wx . TextCtrl ( self , -1 , size = ( <val1> , -1 ) )	modify the width of a text control as <val1> keeping default height in wxpython
imshow ( <name3> , cmap = 'Greys_r'   )	display a grayscale image from array of pixels <name3>
imshow ( <name1> , cmap = 'Greys_r'   )	display a grayscale image from array of pixels <name1>
<name1> . fillna ( <val2> )	replace all the nan values with <val2> in a pandas dataframe <name1>
<name5> . toPandas ( ) . to_csv ( <val2>   )	export a table dataframe <name5> in pyspark to csv <val2>
<name1> . toPandas ( ) . to_csv ( <val2>   )	export a table dataframe <name1> in pyspark to csv <val2>
<name2> . write . <name6> ( <val3>   )	Write DataFrame <name2> to <name6> file <val3>
<name1> . write . <name2> ( <val3>   )	Write DataFrame <name1> to <name2> file <val3>
<name2> ( x [ 1 ] for x in <name5> )	get the <name2> of each second value from a list of tuple <name5>
<name1> ( x [ 1 ] for x in <name2> )	get the <name1> of each second value from a list of tuple <name2>
df . <name3> ( <val1>   ) [ <val2>   ] . agg ( lambda x : x . nlargest ( <val4> ) . <name5> ( ) )	<name5> the <val4> largest integers in <name3> by <val1> and <val2>
df . <name1> ( <val2>   ) [ <val3>   ] . agg ( lambda x : x . nlargest ( <val4> ) . <name5> ( ) )	<name5> the <val4> largest integers in <name1> by <val2> and <val3>
datetime . strptime ( <val4>   , <val5>   )	Parse string <val4> according to format <val5>
datetime . strptime ( <val1>   , <val2>   )	Parse string <val1> according to format <val2>
os . path . dirname ( os . path . abspath ( __file__ ) )	get current script directory
re . sub ( '(.)'   , '\\1\\1'   , text . read ( ) , 0 , re . S )	double each character in string text.read()
'' '' ' ' '' ' ' '' ' . join ( ( ' <name2> ' , ' b ' , ' c ' , ' d ' , ' g ' , ' x ' , ' r ' , ' e ' ) )'	concatenate strings in tuple ('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e') into <name2> single string
'' '' ' ' '' ' ' '' ' . join ( ( ' <name1> ' , ' b ' , ' c ' , ' d ' , ' g ' , ' x ' , ' r ' , ' e ' ) )'	concatenate strings in tuple ('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e') into <name1> single string
os . <name2> . dirname ( os . <name2> . abspath ( __file__ ) )	get full <name2> of current directory
os . <name1> . dirname ( os . <name1> . abspath ( __file__ ) )	get full <name1> of current directory
<val4> <val4> ' ' <val3> ' ' <val4> ' . format ( value , digits )'	'variable number of digits `digits` in variable `value` in format string ' <val3> <val4>
<val1> <val1> ' ' <val2> ' ' <val1> ' . format ( value , digits )'	'variable number of digits `digits` in variable `value` in format string ' <val2> <val1>
self . request . <name2>	get current requested <name2>
self . request . <name1>	get current requested <name1>
random_choice = <name5> . choice ( <name2> )	get a <name5> item from list <name2>
random_choice = <name1> . choice ( <name2> )	get a <name1> item from list <name2>
<name6> = <name2> ( len ( s ) for s <name3> <name4> )	<name2> the <name6> of all <name4> <name3> a list <name4>
<name1> = <name2> ( len ( s ) for s <name3> <name4> )	<name2> the <name1> of all <name4> <name3> a list <name4>
<name6> = sorted ( <name6> , key = lambda x : ( x [ 1 ] , x [ 2 ] ) )	sort a list <name6> by first and second attributes
<name1> = sorted ( <name1> , key = lambda x : ( x [ 1 ] , x [ 2 ] ) )	sort a list <name1> by first and second attributes
<name3> . <name2> ( key = operator . itemgetter ( 1 , 2 ) )	<name2> a list of lists <name3> by second and third element in each list .
<name1> . <name2> ( key = operator . itemgetter ( 1 , 2 ) )	<name2> a list of lists <name1> by second and third element in each list .
con . <name3> ( )	Mysql <name3> current transaction
con . <name1> ( )	Mysql <name1> current transaction
[ k for k in <name6> if <val2>     in k ]	filtering out strings that contain <val2> from a list of strings <name6>
[ k for k in <name1> if <val2>     in k ]	filtering out strings that contain <val2> from a list of strings <name1>
output = ''   . join ( item [ 0 ] . upper ( ) for item <name2> <name5> . split ( ) )	find the first letter of each element <name2> string <name5>
output = ''   . join ( item [ 0 ] . upper ( ) for item <name1> <name2> . split ( ) )	find the first letter of each element <name1> string <name2>
<name4> . _meta . pk . <name5>	get <name5> of primary field <name5> of django model <name4>
<name1> . _meta . pk . <name2>	get <name2> of primary field <name2> of django model <name1>
len ( <name5> . split ( ) )	count the number of words in a string <name5>
len ( <name1> . split ( ) )	count the number of words in a string <name1>
np . einsum ( 'ji,i->j'   , <name4> , <name6> )	multiply array <name4> and array <name6> respective elements then sum each row of the new array
np . einsum ( 'ji,i->j'   , <name1> , <name2> )	multiply array <name1> and array <name2> respective elements then sum each row of the new array
sys . <name6>	check python <name6>
sys . <name1>	check python <name1>
sys . version_info	check python version
print ( '\\num{{{0:.2g}}}'   . <name6> ( <val4> ) )	<name6> number <val4> using latex notation
print ( '\\num{{{0:.2g}}}'   . <name1> ( <val2> ) )	<name1> number <val2> using latex notation
<name2> = [ [ ] for i in range ( <val5> ) ]	Initialize a list of empty lists <name2> of size <val5>
<name1> = [ [ ] for i in range ( <val2> ) ]	Initialize a list of empty lists <name1> of size <val2>
{{  <name6> |   <name1> |   <name4> }}	apply jinja2 filters <name1> and <name4> on variable <name6>
{{  <name1> |   <name2> |   <name3> }}	apply jinja2 filters <name2> and <name3> on variable <name1>
<name3> ( * [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] )	<name3> a list of tuples [(1, 4), (2, 5), (3, 6)] into a list of tuples according to original tuple index
<name1> ( * [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] )	<name1> a list of tuples [(1, 4), (2, 5), (3, 6)] into a list of tuples according to original tuple index
[ <name4> ( group ) for key , group in <name2> . groupby ( <name1> , operator . itemgetter ( 1 ) ) ]	split a <name4> of tuples <name1> into sub - lists of the same tuple field using <name2>
[ <name1> ( group ) for key , group in <name2> . groupby ( <name3> , operator . itemgetter ( 1 ) ) ]	split a <name1> of tuples <name3> into sub - lists of the same tuple field using <name2>
<name5> ( 'hello'   )	Convert a string into a <name5>
<name1> ( 'hello'   )	Convert a string into a <name1>
<name2> [ <val6>   ] = <name2> [ <val4>   ] / <name2> [ <val5>   ]	create new column <val6> in dataframe <name2> with row values equal to the value in column <val4> divided by the value in column <val5>
<name1> [ <val2>   ] = <name1> [ <val3>   ] / <name1> [ <val4>   ]	create new column <val2> in dataframe <name1> with row values equal to the value in column <val3> divided by the value in column <val4>
os . walk ( <name6> )	getting a list of all subdirectories in the <name6> <name6>
os . walk ( <name1> )	getting a list of all subdirectories in the <name1> <name1>
[ x [ 0 ] for x <name2> os . walk ( <name1> ) ]	get a list of all subdirectories <name2> the <name1> <name1>
[ x [ 0 ] for x <name1> os . walk ( <name2> ) ]	get a list of all subdirectories <name1> the <name2> <name2>
{  <name5> : <val4>     for <name5> , <name1> <name2> list ( <name3> . items ( ) ) <name6> <name1> != <val5>  }	update all values associated with key <name5> to string <val4> <name6> value <name1> is not equal to <val5> <name2> dictionary <name3>
{  <name1> : <val2>     for <name1> , <name3> <name4> list ( <name5> . items ( ) ) <name6> <name3> != <val1>  }	update all values associated with key <name1> to string <val2> <name6> value <name3> is not equal to <val1> <name4> dictionary <name5>
dict ( ( k , <val5>   ) for k , v in <name6> . items ( ) if v is <name4> )	Filter a dictionary <name6> to remove keys with value <name4> and replace other values with <val5>
dict ( ( k , <val1>   ) for k , v in <name2> . items ( ) if v is <name3> )	Filter a dictionary <name2> to remove keys with value <name3> and replace other values with <val1>
dict ( ( k , <val2>   ) for k , v in <name4> . items ( ) if v != <val1>   )	Filter a dictionary <name4> to remove keys with value <val1> and replace other values with <val2>
dict ( ( k , <val1>   ) for k , v in <name2> . items ( ) if v != <val3>   )	Filter a dictionary <name2> to remove keys with value <val3> and replace other values with <val1>
<name1> . <name5> ( <name6> ) . size ( )	count number of rows in a group <name6> in pandas <name5> object <name1>
<name1> . <name2> ( <name3> ) . size ( )	count number of rows in a group <name3> in pandas <name2> object <name1>
<name1> = [ <name6> ( <name4> ) for <name4> <name5> <name3> ]	return list <name1> of <name6> of elements of each list <name4> <name5> list of lists <name3>
<name1> = [ <name2> ( <name3> ) for <name3> <name4> <name5> ]	return list <name1> of <name2> of elements of each list <name3> <name4> list of lists <name5>
any ( d [ 'site'   ] == 'Superuser'     <name4> d <name5> data )	What ' s the best way to search <name4> a Python dictionary value <name5> a list of dictionaries ?
any ( d [ 'site'   ] == 'Superuser'     <name1> d <name2> data )	What ' s the best way to search <name1> a Python dictionary value <name2> a list of dictionaries ?
nodes = [ [ <name3> ( ) for j in range ( <name1> ) ] for i in range ( <name6> ) ]	create a 2 D array of <name3> objects with dimensions <name1> columns and <name6> <name6>
nodes = [ [ <name1> ( ) for j in range ( <name2> ) ] for i in range ( <name3> ) ]	create a 2 D array of <name1> objects with dimensions <name2> columns and <name3> <name3>
print ( os . path . splitext ( <val6>   ) [ 0 ] + <val1>   )	replace extension '.txt' in basename <val6> with extension <val1>
print ( os . path . splitext ( <val1>   ) [ 0 ] + <val2>   )	replace extension '.txt' in basename <val1> with extension <val2>
<name6> . display . set_mode ( ( 0 , 0 ) , <name6> . <name1> )	Set the resolution of a monitor as <name1> in <name6>
<name1> . display . set_mode ( ( 0 , 0 ) , <name1> . <name2> )	Set the resolution of a monitor as <name2> in <name1>
<name4> . set_title ( '$%s \\times 10^{%s}$'     % ( '3.5'   , '+20'   ) )	format float 3.5e+20 to $3.5 \\times 10^{20}$ and set as title of matplotlib plot <name4>
<name1> . set_title ( '$%s \\times 10^{%s}$'     % ( '3.5'   , '+20'   ) )	format float 3.5e+20 to $3.5 \\times 10^{20}$ and set as title of matplotlib plot <name1>
print ( os . path . getmtime ( <val1>   ) )	Get the age of directory ( or file ) <val1> in seconds .
<name6> . strftime ( '%B'   )	how to get month name of datetime <name6>
<name1> . strftime ( '%B'   )	how to get month name of datetime <name1>
<name3> . strftime ( '%B'   )	get month name from a datetime object <name3>
<name1> . strftime ( '%B'   )	get month name from a datetime object <name1>
[ j for i in <name6> for j in i ]	Convert nested list <name6> into a flat list
[ j for i in <name1> for j in i ]	Convert nested list <name1> into a flat list
print ( <name4> ( <name3> . chain . from_iterable ( <name6> ) ) )	get each value from <name6> <name4> of lists <name6> using <name3>
print ( <name1> ( <name2> . chain . from_iterable ( <name3> ) ) )	get each value from <name3> <name1> of lists <name3> using <name2>
datetime . datetime . strptime ( <val3>   , '%B %d, %Y'   ) . strftime ( '%A'   )	convert date string <val3> into day of week
datetime . datetime . strptime ( <val1>   , '%B %d, %Y'   ) . strftime ( '%A'   )	convert date string <val1> into day of week
a . remove ( <val5>   )	'remove item ' <val5> ' in list `a`'
a . remove ( <val1>   )	'remove item ' <val1> ' in list `a`'
<name5> . <name2> ( <name3> )	<name2> item <name3> in list <name5>
<name1> . <name2> ( <name3> )	<name2> item <name3> in list <name1>
<name6> . remove ( <val5> )	delete the element <val5> from list <name6>
<name1> . remove ( <val2> )	delete the element <val2> from list <name1>
<name2> . remove ( <val4> )	delete the element <val4> from list <name2>
<name1> . remove ( <val2> )	delete the element <val2> from list <name1>
re . findall ( '(?=(a.*?a))'   , <val3>   )	Get all matching patterns 'a.*?a' from a string <val3> .
re . findall ( '(?=(a.*?a))'   , <val1>   )	Get all matching patterns 'a.*?a' from a string <val1> .
np . einsum ( 'ij,kj->jik'   , <name4> , <name4> )	outer product of each column of a 2 d <name4> array to form a 3 d array <name4>
np . einsum ( 'ij,kj->jik'   , <name1> , <name1> )	outer product of each column of a 2 d <name1> array to form a 3 d array <name1>
<name2> [ ( -1 ) ]	Getting the last element of list <name2>
<name1> [ ( -1 ) ]	Getting the last element of list <name1>
<name5> [ ( -2 ) ]	Getting the second to last element of list <name5>
<name1> [ ( -2 ) ]	Getting the second to last element of list <name1>
<name3> [ ( - <name6> ) ]	gets the <name6> th - to - last element in list <name3>
<name1> [ ( - <name2> ) ]	gets the <name2> th - to - last element in list <name1>
<name4> [ ( -1 ) ]	get the last element in list <name4>
<name1> [ ( -1 ) ]	get the last element in list <name1>
<name2> [ ( -1 ) ]	get the last element in list <name2>
<name1> [ ( -1 ) ]	get the last element in list <name1>
print ( [ u for v in [ [ i , i ] for i in range ( <val5> ) ] for u in v ] )	make a list of integers from 0 to <val5> where each second element is a duplicate of the previous element
print ( [ u for v in [ [ i , i ] for i in range ( <val1> ) ] for u in v ] )	make a list of integers from 0 to <val1> where each second element is a duplicate of the previous element
[ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ]	create a list of integers with duplicate values [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]
[ ( i // 2 ) for i in range ( 10 ) ]	create a list of integers from 1 to 5 with each value duplicated
<name3> [ <name3> . find ( '\n'   ) + 1 : <name3> . rfind ( '\n'   ) ]	remove first and last lines of string <name3>
<name1> [ <name1> . find ( '\n'   ) + 1 : <name1> . rfind ( '\n'   ) ]	remove first and last lines of string <name1>
{  ( x ** 2 ) for x <name5> <name1> ( <val3> ) }	create dict of squared int values <name5> <name1> of <val3>
{  ( x ** 2 ) for x <name1> <name2> ( <val3> ) }	create dict of squared int values <name1> <name2> of <val3>
<name6> ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )	<name6> lists [1, 2], [3, 4], [5, 6] in a list
<name1> ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )	<name1> lists [1, 2], [3, 4], [5, 6] in a list
<name2> ( * [ [ <val4> , <val6> ] , [ <val1> , <val5> ] , [ <val3> , <val2> ] ] )	<name2> lists in a list [ [ <val4> , <val6> ] , [ <val1> , <val5> ] , [ <val3> , <val2> ] ]
<name1> ( * [ [ <val2> , <val3> ] , [ <val4> , <val5> ] , [ <val6> , <val1> ] ] )	<name1> lists in a list [ [ <val2> , <val3> ] , [ <val4> , <val5> ] , [ <val6> , <val1> ] ]
requests . get ( <val2>   , auth = ( <val5>   , <val4>   ) )	request page <val2> with credentials of username <val5> and password <val4>
requests . get ( <val1>   , auth = ( <val2>   , <val3>   ) )	request page <val1> with credentials of username <val2> and password <val3>
<name6> [ 2 : ]	get a new string from the 3 rd character to the end of the string <name6>
<name1> [ 2 : ]	get a new string from the 3 rd character to the end of the string <name1>
<name4> [ : 2 ]	get a new string including the first two characters of string <name4>
<name1> [ : 2 ]	get a new string including the first two characters of string <name1>
<name1> [ : ( -2 ) ]	get a new string including all but the last character of string <name1>
<name1> [ ( -2 ) : ]	get a new string including the last two characters of string <name1>
<name3> [ 2 : ( -2 ) ]	get a new string with the 3 rd to the second - to - last characters of string <name3>
<name1> [ 2 : ( -2 ) ]	get a new string with the 3 rd to the second - to - last characters of string <name1>
<name6> [ : : ( -1 ) ]	reverse a string <name6>
<name1> [ : : ( -1 ) ]	reverse a string <name1>
<val1>   [ : : <val5> ]	'select alternate characters of ' <val1> <val5>
<val1>   [ : : <val2> ]	'select alternate characters of ' <val1> <val2>
<name2> = <name2> [ <name5> : ( <name5> + <name6> ) ]	select a substring of <name2> <name5> at <name5> of length <name6>
<name1> = <name1> [ <name2> : ( <name2> + <name3> ) ]	select a substring of <name1> <name2> at <name2> of length <name3>
sys . exit ( )	terminate the program
quit ( )	terminate the program
sys . exit ( <val4>   )	'Terminating a Python script with error message ' <val4> ''
sys . exit ( <val1>   )	'Terminating a Python script with error message ' <val1> ''
<name1> [ <val3>   ] . <name5> ( <val4>   , 'ignore'   )	<name5> value of key <val3> in dictionary <name1> as <val4> , ignoring non - ascii characters
<name1> [ <val2>   ] . <name3> ( <val4>   , 'ignore'   )	<name3> value of key <val2> in dictionary <name1> as <val4> , ignoring non - ascii characters
pd . read_csv ( <val5>   , <name2> = list ( 'abcdef'   ) )	read a ragged csv file <val5> using <name2> parameter in pandas
pd . read_csv ( <val1>   , <name2> = list ( 'abcdef'   ) )	read a ragged csv file <val1> using <name2> parameter in pandas
<name3> . stack ( ) . groupby ( level = 0 ) . <name1> ( )	get <name1> non - null value per each row from dataframe <name3>
<name1> . stack ( ) . groupby ( level = 0 ) . <name2> ( )	get <name2> non - null value per each row from dataframe <name1>
'' '' ' ' '{0} {1}' ' ' '' ' . format ( 10 , 20 )'	print two numbers 10 and 20 using string formatting
'' '' ' ' <val5> ' ' '' ' . format ( 10 , 20 , foo = ' bar ' , ham = ' spam ' )'	replace placeholders in string <val5> with arguments (10, 20, foo='bar', ham='spam')
'' '' ' ' <val1> ' ' '' ' . format ( 10 , 20 , foo = ' bar ' , ham = ' spam ' )'	replace placeholders in string <val1> with arguments (10, 20, foo='bar', ham='spam')
changed_list = [ ( int ( f ) if f . isdigit ( ) else f ) for f in <name2> ]	create list changed_list  containing elements of list <name2> whilst converting strings containing digits to integers
changed_list = [ ( int ( f ) if f . isdigit ( ) else f ) for f in <name1> ]	create list changed_list  containing elements of list <name1> whilst converting strings containing digits to integers
dict ( zip ( <name3> , zip ( * <name2> ) ) )	get a dictionary with <name3> from one list <name3> and values from other list <name2>
dict ( zip ( <name1> , zip ( * <name2> ) ) )	get a dictionary with <name1> from one list <name1> and values from other list <name2>
<name6> . decode ( 'iso-8859-1'   ) . encode ( 'utf8'   )	convert string <name6> from iso -8859 -1 / latin1 to utf -8
<name1> . decode ( 'iso-8859-1'   ) . encode ( 'utf8'   )	convert string <name1> from iso -8859 -1 / latin1 to utf -8
<name5> . to_csv ( <val1>   , header = False )	Exclude column names when writing dataframe <name5> to a csv file <val1>
<name1> . to_csv ( <val2>   , header = False )	Exclude column names when writing dataframe <name1> to a csv file <val2>
print ( <val2>   . <name1> ( '1'   , '2'   , '3'   ) )	Escape character '}' in string <val2> while using function <name1> with arguments ('1', '2', '3')
print ( <val1>   . <name2> ( '1'   , '2'   , '3'   ) )	Escape character '}' in string <val1> while using function <name2> with arguments ('1', '2', '3')
<name1> ( <name3> , <name5> = lambda d : d [ <val2>   ] )	get dictionary with <name1> value of <name5> <val2> in list of dicts <name3>
<name1> ( <name2> , <name3> = lambda d : d [ <val4>   ] )	get dictionary with <name1> value of <name3> <val4> in list of dicts <name2>
<val1> <val1> ' ' <val3> ' ' <val1> ' . format ( ' <name2> ' , ' <name6> ' )'	'format parameters ' <name2> ' and ' <name6> ' into plcaeholders in string ' <val3> <val1>
<val1> <val1> ' ' <val2> ' ' <val1> ' . format ( ' <name3> ' , ' <name4> ' )'	'format parameters ' <name3> ' and ' <name4> ' into plcaeholders in string ' <val2> <val1>
<name4> = models . ForeignKey ( <val6>   , unique = True )	django create a foreign key column <name4> and link it to table <val6>
<name1> = models . ForeignKey ( <val2>   , unique = True )	django create a foreign key column <name1> and link it to table <val2>
re . compile ( '^([^A]*)AA([^A]|AA)*$'   )	write a regex pattern to match even number of letter A
<name5> = np . concatenate ( ( a , a ) , <name3> = <val2> )	join Numpy array <name5> with Numpy array 'a' along <name3> <val2>
<name1> = np . concatenate ( ( a , a ) , <name2> = <val3> )	join Numpy array <name1> with Numpy array 'a' along <name2> <val3>
sorted ( <name6> , key = lambda x : x . replace ( '0'   , 'Z'   ) )	custom sort an alphanumeric list <name6>
sorted ( <name1> , key = lambda x : x . replace ( '0'   , 'Z'   ) )	custom sort an alphanumeric list <name1>
ax . set_yscale ( 'log'   )	plot logarithmic axes with matplotlib
os . environ [ <val3>   ]	'Access environment variable ' <val3> ''
os . environ [ <val1>   ]	'Access environment variable ' <val1> ''
os . environ [ <val1>   ]	'get value of environment variable ' <val1> ''
<name1> ( os . environ )	<name1> all environment variables
os . environ	get all environment variables
print ( os . environ . <name6> ( <val5>   ) )	<name6> value of the environment variable <val5>
print ( os . environ . <name1> ( <val2>   ) )	<name1> value of the environment variable <val2>
print ( os . getenv ( <val1>   , <name5> ) )	get value of the environment variable <val1> with default value <name5>
print ( os . getenv ( <val1>   , <name2> ) )	get value of the environment variable <val1> with default value <name2>
print ( os . environ . <name3> ( <val4>   , <val2>   ) )	<name3> value of the environment variable <val4> with default value <val2>
print ( os . environ . <name1> ( <val2>   , <val3>   ) )	<name1> value of the environment variable <val2> with default value <val3>
print ( dict ( [ s . <name1> ( <val3>   ) for s <name4> <name6> ] ) )	create a dictionary containing each string <name4> list <name6> <name1> by <val3> as a key / value pairs
print ( dict ( [ s . <name1> ( <val2>   ) for s <name3> <name4> ] ) )	create a dictionary containing each string <name3> list <name4> <name1> by <val2> as a key / value pairs
min ( enumerate ( <name3> ) , key = lambda x : abs ( x [ 1 ] - <val6> ) )	find the index of element closest to number <val6> in list <name3>
min ( enumerate ( <name1> ) , key = lambda x : abs ( x [ 1 ] - <val2> ) )	find the index of element closest to number <val2> in list <name1>
'e = root . xpath ( ' . // a [ contains ( text ( ) , '' TEXT A '' ) ] ' )'	'find element `a` that contains string ' 'TEXT A' ' in file `root`'
'e = root . xpath ( ' . // <name2> [ <name1> - <name6> ( <name5> ( ) , '' TEXT A '' ) ] ' )'	Find the <name2> tag in html root which <name1> <name6> the <name5> 'TEXT A' and assign it to e
'e = root . xpath ( ' . // <name1> [ <name2> - <name3> ( <name4> ( ) , '' TEXT A '' ) ] ' )'	Find the <name1> tag in html root which <name2> <name3> the <name4> 'TEXT A' and assign it to e
'e = root . xpath ( ' . // a [ text ( ) = '' TEXT A '' ] ' )'	find the element that holds string 'TEXT A' in file root
<name3> = [ <name4> [ i ] for i <name2> <name1> ]	create list <name3> containing items from list <name4> whose <name1> is <name2> list <name1>
<name1> = [ <name2> [ i ] for i <name3> <name4> ]	create list <name1> containing items from list <name2> whose <name4> is <name3> list <name4>
np . <name1> ( a [ : , ( None ) ] , b [ ( None ) , : ] )	get the <name1> product of two one dimensional numpy arrays
np . outer ( a , b )	multiplication of two 1 - dimensional arrays in numpy
subprocess . call ( [ <val2>   , <name6> , <name1> ] )	execute a file <val2> with arguments <name6> and <name1> in python shell
subprocess . call ( [ <val1>   , <name2> , <name3> ] )	execute a file <val1> with arguments <name2> and <name3> in python shell
<name4> [ [ <val5>   ] ] . fillna ( <name4> . groupby ( <val2>   ) . transform ( 'mean'   ) )	Replace NaN values in column <val5> with the mean of data in column <val2> of dataframe <name4>
<name1> [ [ <val2>   ] ] . fillna ( <name1> . groupby ( <val3>   ) . transform ( 'mean'   ) )	Replace NaN values in column <val2> with the mean of data in column <val3> of dataframe <name1>
re . sub ( '(.)(?=.)'   , '\\1-'   , <name5> )	separate each character in string <name5> by '-'
re . sub ( '(.)(?=.)'   , '\\1-'   , <name1> )	separate each character in string <name1> by '-'
re . sub ( '(?<=.)(?=.)'   , <val2>   , <name3> )	concatenate <val2> in between characters of string <name3>
re . sub ( '(?<=.)(?=.)'   , <val1>   , <name2> )	concatenate <val1> in between characters of string <name2>
i , j = <name6> . <name1> ( <name5> == <name3> )	get the indexes of the x and y axes in Numpy array <name6> <name1> variable <name5> is equal to variable <name3>
i , j = <name1> . <name2> ( <name3> == <name4> )	get the indexes of the x and y axes in Numpy array <name1> <name2> variable <name3> is equal to variable <name4>
<name3> ( collections . Counter ( <name1> ) . most_common ( 1 ) [ 0 ] )	<name3> letter that appears most frequently in string <name1>
<name1> ( collections . Counter ( <name2> ) . most_common ( 1 ) [ 0 ] )	<name1> letter that appears most frequently in string <name2>
<name1> ( re . findall ( '(?:^|_)'     + <name4> + '(\\d+\\.\\d*)'   , <name6> ) [ 0 ] )	find <name1> number proceeding sub - string <name4> in string <name6>
<name1> ( re . findall ( '(?:^|_)'     + <name2> + '(\\d+\\.\\d*)'   , <name3> ) [ 0 ] )	find <name1> number proceeding sub - string <name2> in string <name3>
re . findall ( '[^a]'   , <val4>   )	Get all the matches from a string <val4> if it begins with a character a
re . findall ( '[^a]'   , <val1>   )	Get all the matches from a string <val1> if it begins with a character a
print ( [ item for item <name6> dir ( adfix ) if not item . startswith ( '__'   ) ] )	get a list of variables from module 'adfix.py' <name6> current module .
print ( [ item for item <name1> dir ( adfix ) if not item . startswith ( '__'   ) ] )	get a list of variables from module 'adfix.py' <name1> current module .
[ x [ 0 ] for x <name1> <name5> ]	get the first element of each tuple <name1> a list <name5>
[ x [ 0 ] for x <name1> <name2> ]	get the first element of each tuple <name1> a list <name2>
<name3> = [ x [ 0 ] for x <name2> <name4> ]	get a list <name3> of the first elements of each tuple <name2> a list of tuples <name4>
<name1> = [ x [ 0 ] for x <name2> <name3> ]	get a list <name1> of the first elements of each tuple <name2> a list of tuples <name3>
pd . concat ( [ <name5> ] * <val4> , ignore_index = True )	duplicate data in pandas dataframe <name5> for <val4> times
pd . concat ( [ <name1> ] * <val2> , ignore_index = True )	duplicate data in pandas dataframe <name1> for <val2> times
pd . concat ( [ <name2> ] * <val1> )	Get a repeated pandas data frame object <name2> by <val1> times
pd . concat ( [ <name1> ] * <val2> )	Get a repeated pandas data frame object <name1> by <val2> times
sorted_list_of_keyvalues = sorted ( list ( <name3> . items ( ) ) , <name5> = item [ 1 ] [ <val4>   ] )	sort json <name3> by a <name5> <val4>
sorted_list_of_keyvalues = sorted ( list ( <name1> . items ( ) ) , <name2> = item [ 1 ] [ <val3>   ] )	sort json <name1> by a <name2> <val3>
pd . read_json ( <name1> )	read json <name1> to pandas dataframe df
numpy . <name5> . choice ( numpy . arange ( <val1> , <val2> ) , p = [ <val6> , <val4> , <val4> , <val3> , <val5> , <val3> ] )	generate a <name5> number in <val1> to <val2> with a given distribution [ <val6> , <val4> , <val4> , <val3> , <val5> , <val3> ]
numpy . <name1> . choice ( numpy . arange ( <val2> , <val3> ) , p = [ <val4> , <val5> , <val5> , <val6> , <val1> , <val6> ] )	generate a <name1> number in <val2> to <val3> with a given distribution [ <val4> , <val5> , <val5> , <val6> , <val1> , <val6> ]
<name1> . loc [ <name1> [ <val5>   ] . idxmax ( ) ]	Return rows of data associated with the maximum value of column <val5> in dataframe <name1>
<name1> . loc [ <name1> [ <val2>   ] . idxmax ( ) ]	Return rows of data associated with the maximum value of column <val2> in dataframe <name1>
re . findall ( '^(.+?)((.+)\\3+)$'   , <val5>   ) [ 0 ] [ : -1 ]	find recurring patterns in a string <val5>
re . findall ( '^(.+?)((.+)\\3+)$'   , <val1>   ) [ 0 ] [ : -1 ]	find recurring patterns in a string <val1>
np . fromstring ( <val3>   , dtype = '<f4'   )	convert binary string <val3> to numpy array
np . fromstring ( <val1>   , dtype = '<f4'   )	convert binary string <val1> to numpy array
np . fromstring ( '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@'   , dtype = '>f4'   )	convert binary string to numpy array
cursor . execute ( <val4>   , ( var1 , var2 , var3 ) )	insert variables (var1, var2, var3) into sql statement <val4>
cursor . execute ( <val1>   , ( var1 , var2 , var3 ) )	insert variables (var1, var2, var3) into sql statement <val1>
cursor . execute ( 'INSERT INTO table VALUES (%s, %s, %s)'   , ( <name3> , <name5> , <name2> ) )	Execute a sql statement using variables <name3> , <name5> and <name2>
cursor . execute ( 'INSERT INTO table VALUES (%s, %s, %s)'   , ( <name1> , <name2> , <name3> ) )	Execute a sql statement using variables <name1> , <name2> and <name3>
<name1> [ <val5>   ] . str [ 1 : -1 ] . str . <name4> ( <val3>   , expand = True ) . astype ( float )	pandas <name4> strings in column <val5> by <val3> into columns in dataframe <name1>
<name1> [ <val2>   ] . str [ 1 : -1 ] . str . <name3> ( <val4>   , expand = True ) . astype ( float )	pandas <name3> strings in column <val2> by <val4> into columns in dataframe <name1>
<name3> [ <val6>   ] . str [ 1 : -1 ] . str . <name1> ( <val2>   ) . apply ( pd . Series ) . astype ( float )	<name1> string in column <val6> by <val2> into separate columns in dataframe <name3>
<name1> [ <val2>   ] . str [ 1 : -1 ] . str . <name3> ( <val4>   ) . apply ( pd . Series ) . astype ( float )	<name3> string in column <val2> by <val4> into separate columns in dataframe <name1>
<name6> [ <val1>   ] . apply ( pd . Series )	Unpack column <val1> in dataframe <name6> into a series of columns
<name1> [ <val2>   ] . apply ( pd . Series )	Unpack column <val2> in dataframe <name1> into a series of columns
<name6> . <name2> ( )	<name2> for shell command <name6> evoked by subprocess .Popen to complete
<name1> . <name2> ( )	<name2> for shell command <name1> evoked by subprocess .Popen to complete
<name1> . <name5> ( 'utf8'   )	<name5> string <name1> to utf -8 code
<name1> . <name2> ( 'utf8'   )	<name2> string <name1> to utf -8 code
<name6> . <name6> . strptime ( <val3>   , <val1>   )	parse string <val3> into a <name6> object using format <val1>
<name1> . <name1> . strptime ( <val2>   , <val3>   )	parse string <val2> into a <name1> object using format <val3>
copyfile ( <name2> , <name3> )	copy a file from <name2> to <name3>
copyfile ( <name1> , <name2> )	copy a file from <name1> to <name2>
shutil . copy2 ( <val6>   , <val2>   )	'copy file ' <val6> ' to ' <val2> ''
shutil . copy2 ( <val1>   , <val2>   )	'copy file ' <val1> ' to ' <val2> ''
shutil . copy2 ( <val5>   , <val2>   )	copy file <val5> to <val2>
shutil . copy2 ( <val1>   , <val2>   )	copy file <val1> to <val2>
<name3> ( ', '   . join ( str ( x ) for x in <name1> ) )	<name3> a list of integers <name1> using string formatting
<name1> ( ', '   . join ( str ( x ) for x in <name2> ) )	<name1> a list of integers <name2> using string formatting
<name2> [ [ <val3>   , <val6>   ] ] . <name4> ( <name2> [ <val1>   ] , axis = 'index'   )	<name4> column <val3> and column <val6> by column <val1> in datafram <name2>
<name1> [ [ <val2>   , <val3>   ] ] . <name4> ( <name1> [ <val5>   ] , axis = 'index'   )	<name4> column <val2> and column <val3> by column <val5> in datafram <name1>
<name4> ( ord ( <val2>   ) )	convert string <val2> to <name4>
<name1> ( ord ( <val2>   ) )	convert string <val2> to <name1>
<name3> ( j ** i for i , j <name6> enumerate ( <name5> , 1 ) )	Get the <name3> of values to the power of their indices <name6> a list <name5>
<name1> ( j ** i for i , j <name2> enumerate ( <name3> , 1 ) )	Get the <name1> of values to the power of their indices <name2> a list <name3>
'' '' ' ' ' ' ' ' '' ' . join ( s . split ( ) )'	remove extra white spaces &  tabs from a string s
<name1> = <name1> . <name2> ( ','   , <val6>   )	<name2> comma in string <name1> with empty string <val6>
<name1> = <name1> . <name2> ( ','   , <val3>   )	<name2> comma in string <name1> with empty string <val3>
<name5> . resample ( <val3>   ) . agg ( {  <val6>   : np . sum , <val2>   : np . mean }  )	Resample dataframe <name5> to resolution of 1 hour <val3> for timeseries index , summing values in the column <val6> averaging those in column <val2>
<name1> . resample ( <val2>   ) . agg ( {  <val3>   : np . sum , <val4>   : np . mean }  )	Resample dataframe <name1> to resolution of 1 hour <val2> for timeseries index , summing values in the column <val3> averaging those in column <val4>
<name6> = pd . DataFrame . from_dict ( {  k : v for k , v in list ( <name2> . items ( ) ) if k != 'y3'  }  )	create a pandas dataframe <name6> from elements of a dictionary <name2>
<name1> = pd . DataFrame . from_dict ( {  k : v for k , v in list ( <name2> . items ( ) ) if k != 'y3'  }  )	create a pandas dataframe <name1> from elements of a dictionary <name2>
first_name = <name2> . args . <name3> ( <val6>   )	Flask <name3> value of <name2> variable <val6>
first_name = <name1> . args . <name2> ( <val3>   )	Flask <name2> value of <name1> variable <val3>
first_name = request . <name5> . <name1> ( <val6>   )	Flask <name1> posted <name5> data <val6>
first_name = request . <name1> . <name2> ( <val3>   )	Flask <name2> posted <name1> data <val3>
[ s [ : <val3> ] for s <name5> <name2> ]	get a list of substrings consisting of the first <val3> characters of every string <name5> list <name2>
[ s [ : <val1> ] for s <name2> <name3> ]	get a list of substrings consisting of the first <val1> characters of every string <name2> list <name3>
<name3> . <name2> ( key = lambda item : ( - len ( item ) , item ) )	<name2> list <name3> by the length of string followed by alphabetical order
<name1> . <name2> ( key = lambda item : ( - len ( item ) , item ) )	<name2> list <name1> by the length of string followed by alphabetical order
<name1> = <name1> . set_index ( [ <val5>   ] )	Set index equal to field <val5> in dataframe <name1>
<name1> = <name1> . set_index ( [ <val2>   ] )	Set index equal to field <val2> in dataframe <name1>
list ( accumulate ( list ( <name2> ( <val5> ) ) ) )	List comprehension with an accumulator in <name2> of <val5>
list ( accumulate ( list ( <name1> ( <val2> ) ) ) )	List comprehension with an accumulator in <name1> of <val2>
datetime . datetime . strptime ( <val5>   , <val1>   ) . strftime ( <val2>   )	How to convert a date string <val5> in format <val1> to different format <val2>
datetime . datetime . strptime ( <val1>   , <val2>   ) . strftime ( <val3>   )	How to convert a date string <val1> in format <val2> to different format <val3>
datetime . datetime . strptime ( <val2>   , <val5>   ) . strftime ( <val4>   )	convert a date string <val2> in format <val5> to different format <val4>
datetime . datetime . strptime ( <val1>   , <val2>   ) . strftime ( <val3>   )	convert a date string <val1> in format <val2> to different format <val3>
<name2> = <name4> . ix [ : , ( ~  <name4> . <name1> . str . endswith ( <val5>   ) ) ]	get a dataframe <name2> that contains all the <name1> of dataframe <name4> that do not end in <val5>
<name1> = <name2> . ix [ : , ( ~  <name2> . <name3> . str . endswith ( <val4>   ) ) ]	get a dataframe <name1> that contains all the <name3> of dataframe <name2> that do not end in <val4>
<name5> = <name6> [ -10 : ]	create list <name5> containing the last 10 elements of list <name6>
<name1> = <name2> [ -10 : ]	create list <name1> containing the last 10 elements of list <name2>
<name1> [ -10 : ]	get the last 10 elements from a list <name1>
np . <name1> ( <name4> . _data ) . reshape ( <name4> . size [ : : -1 ] ) . T	convert matlab engine <name1> <name4> to a numpy ndarray
np . <name1> ( <name2> . _data ) . reshape ( <name2> . size [ : : -1 ] ) . T	convert matlab engine <name1> <name2> to a numpy ndarray
<name3> . groupby ( <name2> = <val6> , as_index = False ) . nth ( <val6> )	select the first row grouped per <name2> <val6> of dataframe <name3>
<name1> . groupby ( <name2> = <val3> , as_index = False ) . nth ( <val3> )	select the first row grouped per <name2> <val3> of dataframe <name1>
<name5> . <name3> ( <name2> , <name4> = 0 )	<name3> sequence of <name5> arrays <name2> into a one dimensional array along the first <name4>
<name1> . <name2> ( <name3> , <name4> = 0 )	<name2> sequence of <name1> arrays <name3> into a one dimensional array along the first <name4>
'' '' ' ' <val4> ' ' '' ' . encode ( ' utf -8 ' ) . decode ( ' unicode_escape ' )'	'convert and escape string ' <val4> ' to UTF-8 code'
'' '' ' ' <val1> ' ' '' ' . encode ( ' utf -8 ' ) . decode ( ' unicode_escape ' )'	'convert and escape string ' <val1> ' to UTF-8 code'
'' '' ' ' <val2> ' ' '' ' . encode ( ' utf -8 ' )'	'encode string ' <val2> ' to bytes'
'' '' ' ' <val1> ' ' '' ' . encode ( ' utf -8 ' )'	'encode string ' <val1> ' to bytes'
[ j for i in zip ( <name4> , <name5> ) for j in i ]	interleave the elements of two lists <name4> and <name5>
[ j for i in zip ( <name1> , <name2> ) for j in i ]	interleave the elements of two lists <name1> and <name2>
[ j for i in zip ( <name5> , <name3> ) for j in i ]	merge two lists <name5> and <name3> into <name5> single list
[ j for i in zip ( <name1> , <name2> ) for j in i ]	merge two lists <name1> and <name2> into <name1> single list
print ( [ <name4> . replace ( <val2>   , ''   ) for <name4> <name1> <name5> ] )	delete all occureces of <val2> <name1> each string <name4> <name1> list <name5>
print ( [ <name1> . replace ( <val2>   , ''   ) for <name1> <name3> <name4> ] )	delete all occureces of <val2> <name3> each string <name1> <name3> list <name4>
'' '' ' ' <val4> ' ' '' ' . join ( ' Hello ' )'	Split string 'Hello' into a string of letters seperated by <val4>
'' '' ' ' <val1> ' ' '' ' . join ( ' Hello ' )'	Split string 'Hello' into a string of letters seperated by <val1>
Content . objects . all ( ) . order_by ( '?'   ) [ : <val3> ]	in Django , select <val3> random records from the database Content.objects
Content . objects . all ( ) . order_by ( '?'   ) [ : <val1> ]	in Django , select <val1> random records from the database Content.objects
<name4> [ np . arange ( <name4> . shape [ 0 ] ) [ : , ( None ) ] , <name5> ]	create a NumPy array containing elements of array <name4> as pointed to by index in array <name5>
<name1> [ np . arange ( <name1> . shape [ 0 ] ) [ : , ( None ) ] , <name2> ]	create a NumPy array containing elements of array <name1> as pointed to by index in array <name2>
<name4> . pivot_table ( <name1> = <val6>   , columns = <val2>   , aggfunc = 'size'   , fill_value = 0 )	pivot dataframe <name4> so that values for <val2> become column headings and values for <val6> become the <name1>
<name1> . pivot_table ( <name2> = <val3>   , columns = <val4>   , aggfunc = 'size'   , fill_value = 0 )	pivot dataframe <name1> so that values for <val4> become column headings and values for <val3> become the <name2>
re . findall ( '([a-z]*)'   , 'f233op'   )	match zero - or - more instances of lower case alphabet characters in a string f233op 
re . findall ( '([a-z])*'   , 'f233op'   )	match zero - or - more instances of lower case alphabet characters in a string f233op 
re . <name5> ( <val3>   , <val2>   )	<name5> string <val2> using string <val3>
re . <name1> ( <val2>   , <val3>   )	<name1> string <val3> using string <val2>
re . split ( '_(?:for|or|and)_'   , <val3>   )	Split string <val3> based on string 'and' , 'or' or 'for'
re . split ( '_(?:for|or|and)_'   , <val1>   )	Split string <val1> based on string 'and' , 'or' or 'for'
[ re . split ( '_(?:f?or|and)_'   , s ) <name6> s in <name3> ]	Split a string <name3> by multiple words <name6> or or or and
[ re . split ( '_(?:f?or|and)_'   , s ) <name1> s in <name2> ]	Split a string <name2> by multiple words <name1> or or or and
[ dict ( <name6> ( <name4> , x ) ) for x <name5> <name2> ]	<name6> keys with individual values <name5> lists <name4> and <name2>
[ dict ( <name1> ( <name2> , x ) ) for x <name3> <name4> ]	<name1> keys with individual values <name3> lists <name2> and <name4>
sorted ( lst , reverse = True )	Sort a list 'lst' in descending order .
<name2> . <name4> ( order = [ <val1>   , <val3>   , <val5>   ] )	<name4> array <name2> based on column <val1> , <val3> and <val5>
<name1> . <name2> ( order = [ <val3>   , <val4>   , <val5>   ] )	<name2> array <name1> based on column <val3> , <val4> and <val5>
df . sort ( [ <val2>   , <val6>   , <val5>   ] )	Sort a structured numpy array 'df' on multiple columns <val2> , <val6> and <val5> .
df . sort ( [ <val1>   , <val2>   , <val3>   ] )	Sort a structured numpy array 'df' on multiple columns <val1> , <val2> and <val3> .
return <name6> == <name4> ( range ( <name6> [ 0 ] , <name6> [ -1 ] + 1 ) )	check if elements in <name4> <name6> are coherent in order
return <name1> == <name2> ( range ( <name1> [ 0 ] , <name1> [ -1 ] + 1 ) )	check if elements in <name2> <name1> are coherent in order
<name1> . groupby ( <val6>   ) . agg ( lambda x : x . tolist ( ) )	group rows of pandas dataframe <name1> with same <val6>
<name1> . groupby ( <val2>   ) . agg ( lambda x : x . tolist ( ) )	group rows of pandas dataframe <name1> with same <val2>
'X\xc3\xbcY\xc3\x9f'   . <name2> ( 'raw_unicode_escape'   ) . <name3> ( 'utf-8'   )	<name2> u'X\xc3\xbcY\xc3\x9f' as unicode and <name3> with utf -8
'X\xc3\xbcY\xc3\x9f'   . <name1> ( 'raw_unicode_escape'   ) . <name2> ( 'utf-8'   )	<name1> u'X\xc3\xbcY\xc3\x9f' as unicode and <name2> with utf -8
<name6> ( <name3> )	parse string <name3> to <name6>
<name1> ( <name2> )	parse string <name2> to <name1>
getattr ( <name2> , <val6>   , <val5>   )	get the value of attribute <val6> of object <name2> with default value <val5>
getattr ( <name1> , <val2>   , <val3>   )	get the value of attribute <val2> of object <name1> with default value <val3>
np . <name6> ( <name3> , list ( range ( 0 , <name3> . shape [ 1 ] , <val4> ) ) , axis = 1 )	<name6> every <val4> th column in <name3> numpy array 'a' .
np . <name1> ( <name2> , list ( range ( 0 , <name2> . shape [ 1 ] , <val3> ) ) , axis = 1 )	<name1> every <val3> th column in <name2> numpy array 'a' .
<name4> . <name4> . fromtimestamp ( <name6> / 1000.0 )	convert <name6> milliseconds to a <name4> object
<name1> . <name1> . fromtimestamp ( <name2> / 1000.0 )	convert <name2> milliseconds to a <name1> object
np . einsum ( '...j,...j->...'   , <name2> , <name2> )	find the magnitude ( length ) squared of a vector <name2> field
np . einsum ( '...j,...j->...'   , <name1> , <name1> )	find the magnitude ( length ) squared of a vector <name1> field
r = requests . get ( <name4> )	request http <name4> <name4>
r = requests . get ( <name1> )	request http <name1> <name1>
r = requests . get ( <name3> , params = <name6> )	request http <name3> <name3> with parameters <name6>
r = requests . get ( <name1> , params = <name2> )	request http <name1> <name1> with parameters <name2>
r = requests . <name1> ( <name2> , data = <name5> )	<name1> request <name2> <name2> with parameters <name5>
r = requests . <name1> ( <name2> , data = <name3> )	<name1> request <name2> <name2> with parameters <name3>
post_response = requests . <name2> ( url = 'http://httpbin.org/post'   , json = <name5> )	make an HTTP <name2> request with data <name5>
post_response = requests . <name1> ( url = 'http://httpbin.org/post'   , json = <name2> )	make an HTTP <name1> request with data <name2>
{{  ( <name5> |   <name1> ) : <val2>  }}	django jinja <name1> list <name5> by <val2>
{{  ( <name1> |   <name2> ) : <val3>  }}	django jinja <name2> list <name1> by <val3>
df1 = pd . read_hdf ( <val4>   , <val2>   )	create dataframe df with content of hdf store file <val4> with key of <val2>
df1 = pd . read_hdf ( <val1>   , <val2>   )	create dataframe df with content of hdf store file <val1> with key of <val2>
max ( <name1> . rfind ( i ) for i <name4> <val6>   )	get the largest index of the last occurrence of characters <val6> <name4> string <name1>
max ( <name1> . rfind ( i ) for i <name2> <val3>   )	get the largest index of the last occurrence of characters <val3> <name2> string <name1>
<name4> ( <val1>     + <val2>   )	<name4> <val1> plus unicode character u <val2>
<name1> ( <val2>     + <val3>   )	<name1> <val2> plus unicode character u <val3>
<name4> ( <val1>   )	<name4> unicode characters in a string <val1>
<name1> ( <val2>   )	<name1> unicode characters in a string <val2>
print ( '{0}'   . format ( <val5>   . zfill ( 2 ) ) )	pads string <val5> on the left with 1 zero
print ( '{0}'   . format ( <val1>   . zfill ( 2 ) ) )	pads string <val1> on the left with 1 zero
sorted ( set ( itertools . chain . from_iterable ( <name6> ) ) )	Remove duplicates elements from list <name6> and sort it in ascending order
sorted ( set ( itertools . chain . from_iterable ( <name1> ) ) )	Remove duplicates elements from list <name1> and sort it in ascending order
<name1> [ <val5>   ] . values . tolist ( )	pandas dataframe <name1> column <val5> to list
<name1> [ <val2>   ] . values . tolist ( )	pandas dataframe <name1> column <val2> to list
<name3> [ <val6>   ] . tolist ( )	Get a list of all values in column <val6> in pandas data frame <name3>
<name1> [ <val2>   ] . tolist ( )	Get a list of all values in column <val2> in pandas data frame <name1>
print ( <name6> ( word [ 0 ] . isupper ( ) for word <name5> <name3> ) )	check if <name6> string elements <name5> list <name3> are upper - cased
print ( <name1> ( word [ 0 ] . isupper ( ) for word <name2> <name3> ) )	check if <name1> string elements <name2> list <name3> are upper - cased
<name6> = {  key : <name3> for key , <name3> in list ( <name6> . <name1> ( ) ) <name4> <name3> != <val2> }	remove <name1> from dictionary <name6> <name4> the item ' s value <name3> is equal to <val2>
<name1> = {  key : <name2> for key , <name2> in list ( <name1> . <name3> ( ) ) <name4> <name2> != <val5> }	remove <name3> from dictionary <name1> <name4> the item ' s value <name2> is equal to <val5>
{  key : val for key , val in list ( <name2> . <name5> ( ) ) if val != <val3> }	Remove all <name5> from a dictionary <name2> whose values are <val3>
{  key : val for key , val in list ( <name1> . <name2> ( ) ) if val != <val3> }	Remove all <name2> from a dictionary <name1> whose values are <val3>
return len ( <name6> . encode ( 'utf-8'   ) )	Determine the byte length of a utf -8 encoded string <name6>
return len ( <name1> . encode ( 'utf-8'   ) )	Determine the byte length of a utf -8 encoded string <name1>
os . <name2> ( <name6> . pid , signal . SIGKILL )	<name2> a <name6> with id process.pid
os . <name1> ( <name2> . pid , signal . SIGKILL )	<name1> a <name2> with id process.pid
<name4> [ pd . isnull ( <name4> ) . any ( axis = 1 ) ]	get data of columns with Null values in dataframe <name4>
<name1> [ pd . isnull ( <name1> ) . any ( axis = 1 ) ]	get data of columns with Null values in dataframe <name1>
<name5> . split ( <val3>   ) [ -1 ] . replace ( <val1>   , ''   ) + <val2>	strip everything up to and including the character <val3> from <name5> <name5> , strip the character <val1> from the remaining string and concatenate <val2> to the end
<name1> . split ( <val2>   ) [ -1 ] . replace ( <val3>   , ''   ) + <val4>	strip everything up to and including the character <val2> from <name1> <name1> , strip the character <val3> from the remaining string and concatenate <val4> to the end
parser . ParseFile ( open ( <val6>   , 'rb'   ) )	Parse a file <val6> using expat parsing in python 3
parser . ParseFile ( open ( <val1>   , 'rb'   ) )	Parse a file <val1> using expat parsing in python 3
sys . exit ( )	Exit script
setattr ( self , <name2> , <name3> )	assign value in <name3> dynamically to class property <name2>
setattr ( self , <name1> , <name2> )	assign value in <name2> dynamically to class property <name1>
urllib . parse . unquote ( urllib . parse . unquote ( <name3> ) )	decode url - encoded string <name3> to its character equivalents
urllib . parse . unquote ( urllib . parse . unquote ( <name1> ) )	decode url - encoded string <name1> to its character equivalents
urllib . parse . unquote ( urllib . parse . unquote ( 'FireShot3%2B%25282%2529.png'   ) )	' decode a double URL encoded string
app . config [ 'SECURITY_REGISTER_URL'   ] = <val4>	change flask security register url to <val4>
app . config [ 'SECURITY_REGISTER_URL'   ] = <val1>	change flask security register url to <val1>
output = <name4> ( <val1>   , 'wb'   )	<name4> a file <val1> in binary write mode
output = <name1> ( <val2>   , 'wb'   )	<name1> a file <val2> in binary write mode
del <name6> [ ( -1 ) ]	remove the last element in list <name6>
del <name1> [ ( -1 ) ]	remove the last element in list <name1>
<name2> . pop ( <val1> )	remove the element in list <name2> with index <val1>
<name1> . pop ( <val2> )	remove the element in list <name1> with index <val2>
<name1> . pop ( )	remove the last element in list <name1>
<name3> . pop ( <name1> )	remove the element in list <name3> at <name1> <name1>
<name1> . pop ( <name2> )	remove the element in list <name1> at <name2> <name2>
del <name2> [ <name6> ]	remove the element in list <name2> at <name6> <name6>
del <name1> [ <name2> ]	remove the element in list <name1> at <name2> <name2>
<name4> . set_xlabel ( 'Temperature (\u2103)'   )	print a celsius symbol on x axis of a plot <name4>
<name1> . set_xlabel ( 'Temperature (\u2103)'   )	print a celsius symbol on x axis of a plot <name1>
ax . set_xlabel ( 'Temperature ($^\\circ$C)'   )	Print a celsius symbol with matplotlib
[ <val5>   . join ( l ) for l in <name4> ]	convert a list of lists <name4> into a list of strings keeping empty sub - lists as empty string <val5>
[ <val1>   . join ( l ) for l in <name2> ]	convert a list of lists <name2> into a list of strings keeping empty sub - lists as empty string <val1>
pd . concat ( g for _ , g <name3> <name4> . groupby ( 'ID'   ) if len ( g ) >   1 )	get a list of all the duplicate items <name3> dataframe <name4> using pandas
pd . concat ( g for _ , g <name1> <name2> . groupby ( 'ID'   ) if len ( g ) >   1 )	get a list of all the duplicate items <name1> dataframe <name2> using pandas
<name6> = <name5> . delete ( <name6> , 2 , axis = 1 )	Delete third row in a <name5> array <name6>
<name1> = <name2> . delete ( <name1> , 2 , axis = 1 )	Delete third row in a <name2> array <name1>
<name2> = numpy . <name3> ( <name2> , 0 , axis = 0 )	<name3> first row of array <name2>
<name1> = numpy . <name2> ( <name1> , 0 , axis = 0 )	<name2> first row of array <name1>
pd . concat ( ( <name1> , <name2> ) , <name3> = <val4> ) . <name5> ( <name3> = <val4> )	merge rows from dataframe <name1> with rows from dataframe <name2> and calculate the <name5> for rows that have the same value of <name3> <val4>
np . mean ( np . array ( [ <name2> , <name5> ] ) , axis = 0 )	Get the average values from two numpy arrays <name2> and <name5>
np . mean ( np . array ( [ <name1> , <name2> ] ) , axis = 0 )	Get the average values from two numpy arrays <name1> and <name2>
scatter ( x , y , s = <val6> , color = 'green'   , <name4> = 'h'   )	Matplotlib change <name4> size to <val6>
scatter ( x , y , s = <val1> , color = 'green'   , <name2> = 'h'   )	Matplotlib change <name2> size to <val1>
<name1> = [ <name6> for word <name2> <name3> for <name6> <name2> word . split ( ','   ) ]	Create new list <name1> by splitting each <name6> <name2> list <name3>
<name1> = [ <name2> for word <name3> <name4> for <name2> <name3> word . split ( ','   ) ]	Create new list <name1> by splitting each <name2> <name3> list <name4>
datetime . datetime . strptime ( <val5>   , <val2>   )	convert JSON string <val5> into a DateTime object using format <val2>
datetime . datetime . strptime ( <val1>   , <val2>   )	convert JSON string <val1> into a DateTime object using format <val2>
sum ( item [ <val4>   ] for item <name6> list ( <name1> . <name3> ( ) ) )	count True <name3> associated with key <val4> <name6> dictionary <name1>
sum ( item [ <val1>   ] for item <name2> list ( <name3> . <name4> ( ) ) )	count True <name4> associated with key <val1> <name2> dictionary <name3>
<name1> = open ( <val5>   , 'rb'   ) . read ( ) . <name2> ( <val4>   )	<name2> <name1> pdf file <val5> with <val4> encoding
<name1> = open ( <val2>   , 'rb'   ) . read ( ) . <name3> ( <val4>   )	<name3> <name1> pdf file <val2> with <val4> encoding
<name3> . rstrip ( ) . <name4> ( <val2>   )	<name4> string <name3> using new - line character <val2> as separator
<name1> . rstrip ( ) . <name2> ( <val3>   )	<name2> string <name1> using new - line character <val3> as separator
<name6> . <name5> ( '\n'   ) [ : -1 ]	<name5> <name6> string <name6> with new line character
<name1> . <name2> ( '\n'   ) [ : -1 ]	<name2> <name1> string <name1> with new line character
<name2> HttpResponse ( <name5> = <val1> )	<name2> http <name5> code <val1> from a django view
<name1> HttpResponse ( <name2> = <val3> )	<name1> http <name2> code <val3> from a django view
( <val1> <name4> <name5> )	check if <val1> is <name4> <name5>
( <val1> <name2> <name3> )	check if <val1> is <name2> <name3>
( <val1>     <name5> a )	check if <val1> is <name5> list <val1>
( <val1>     <name2> a )	check if <val1> is <name2> list <val1>
sorted ( <name1> , key = itemgetter ( <val3>   ) )	sort list <name1> by keys value <val3>
sorted ( <name1> , key = itemgetter ( <val2>   ) )	sort list <name1> by keys value <val2>
print ( <name5> . current_url )	get current url in selenium webdriver <name5>
print ( <name1> . current_url )	get current url in selenium webdriver <name1>
re . <name5> ( '; |, '   , <name2> )	<name5> string <name2> with delimiter '; ' or delimiter ', '
re . <name1> ( '; |, '   , <name2> )	<name1> string <name2> with delimiter '; ' or delimiter ', '
'' '' ' ' '\\u003Cp\\u003E' ' ' '' ' . decode ( ' unicode - escape ' )'	un - escaping characters in a string with python
time . mktime ( datetime . datetime . strptime ( <name6> , <val5>   ) . timetuple ( ) )	convert date string <name6> in format pattern <val5> into a timestamp
time . mktime ( datetime . datetime . strptime ( <name1> , <val2>   ) . timetuple ( ) )	convert date string <name1> in format pattern <val2> into a timestamp
int ( datetime . datetime . strptime ( <val4>   , '%d/%m/%Y'   ) . strftime ( '%s'   ) )	convert string <val4> to an integer timestamp
int ( datetime . datetime . strptime ( <val1>   , '%d/%m/%Y'   ) . strftime ( '%s'   ) )	convert string <val1> to an integer timestamp
request . headers [ <val6>   ]	get http header of the key <val6> in flask
request . headers [ <val1>   ]	get http header of the key <val1> in flask
<name5> . groupby ( <val2>   ) [ <val3>   ] . filter ( lambda x : x . <name4> ( ) == <val1> )	select records of dataframe <name5> where the <name4> of column <val3> for each value in column <val2> is <val1>
<name1> . groupby ( <val2>   ) [ <val3>   ] . filter ( lambda x : x . <name4> ( ) == <val5> )	select records of dataframe <name1> where the <name4> of column <val3> for each value in column <val2> is <val5>
<name2> . loc [ <name2> . groupby ( <val5>   ) [ <val1>   ] . transform ( <name4> ) == <val6> ]	Get data of dataframe <name2> where the <name4> of column <val1> grouped by column <val5> is equal to <val6>
<name1> . loc [ <name1> . groupby ( <val2>   ) [ <val3>   ] . transform ( <name4> ) == <val5> ]	Get data of dataframe <name1> where the <name4> of column <val3> grouped by column <val2> is equal to <val5>
<name3> . groupby ( 'User'   ) [ <val2>   ] . transform ( sum ) == <val1>	Get data from dataframe <name3> where column <val2> is equal to <val1>
<name1> . groupby ( 'User'   ) [ <val2>   ] . transform ( sum ) == <val3>	Get data from dataframe <name1> where column <val2> is equal to <val3>
df . set_index ( [ <val5>   , <val2>   ] )	convert pandas group by object to multi - indexed dataframe with indices <val5> and <val2>
df . set_index ( [ <val1>   , <val2>   ] )	convert pandas group by object to multi - indexed dataframe with indices <val1> and <val2>
print ( re . sub ( '(\\W)\\1+'   , '\\1'   , <name6> ) )	coalesce non - word - characters in string <name6>
print ( re . sub ( '(\\W)\\1+'   , '\\1'   , <name1> ) )	coalesce non - word - characters in string <name1>
unicodedata . normalize ( 'NFKD'   , <name3> ) . encode ( <val2>   , 'ignore'   )	Convert a Unicode string <name3> to a <val2> string
unicodedata . normalize ( 'NFKD'   , <name1> ) . encode ( <val2>   , 'ignore'   )	Convert a Unicode string <name1> to a <val2> string
<name3> . encode ( <val4>   , 'ignore'   )	Convert <name3> Unicode string <name3> to <name3> <val4> string
<name1> . encode ( <val2>   , 'ignore'   )	Convert <name1> Unicode string <name1> to <name1> <val2> string
<name3> = [ f for f <name2> os . listdir ( <val6>   ) if re . match ( '[0-9]+.*\\.jpg'   , f ) ]	create a list <name3> containing all <name3> <name2> directory <val6> that starts with numbers between 0 and 9 and ends with the extension '.jpg'
<name1> = [ f for f <name2> os . listdir ( <val3>   ) if re . match ( '[0-9]+.*\\.jpg'   , f ) ]	create a list <name1> containing all <name1> <name2> directory <val3> that starts with numbers between 0 and 9 and ends with the extension '.jpg'
np . zeros ( ( 6 , 9 , 20 ) ) + np . <name5> ( [ <val1> , 2 , <val3> , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( None ) , : , ( None ) ]	adding a <val1> - d <name5> [1, 2, 3, 4, 5, 6, 7, 8, 9] to a <val3> - d <name5> np.zeros((6, 9, 20))
np . zeros ( ( 6 , 9 , 20 ) ) + np . <name1> ( [ <val2> , 2 , <val3> , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( None ) , : , ( None ) ]	adding a <val2> - d <name1> [1, 2, 3, 4, 5, 6, 7, 8, 9] to a <val3> - d <name1> np.zeros((6, 9, 20))
np . zeros ( ( 6 , 9 , 20 ) ) + np . <name5> ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) )	add <name5> of shape (6, 9, 20) to <name5> [1, 2, 3, 4, 5, 6, 7, 8, 9]
np . zeros ( ( 6 , 9 , 20 ) ) + np . <name1> ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) )	add <name1> of shape (6, 9, 20) to <name1> [1, 2, 3, 4, 5, 6, 7, 8, 9]
print ( max ( <name4> , key = <name3> ) )	get the list with the highest <name3> value in list <name4>
print ( max ( <name1> , key = <name2> ) )	get the list with the highest <name2> value in list <name1>
<name4> ( len ( y ) for y <name3> <name6> if len ( y ) >   <val1> )	<name4> the length of lists <name3> list <name6> that are more than <val1> item <name3> length
<name1> ( len ( y ) for y <name2> <name3> if len ( y ) >   <val4> )	<name1> the length of lists <name2> list <name3> that are more than <val4> item <name2> length
numpy . dot ( numpy . dot ( <name4> , <name2> ) , <name4> )	multiply the columns of sparse matrix <name2> by array <name4> then multiply the rows of the resulting matrix by array <name4>
numpy . dot ( numpy . dot ( <name1> , <name2> ) , <name1> )	multiply the columns of sparse matrix <name2> by array <name1> then multiply the rows of the resulting matrix by array <name1>
<name4> . objects . filter ( name = <val3>   , title = <val5>   ) . <name2> ( )	Django check if an object with criteria <val3> equal to <val3> and criteria <val5> equal to <val5> <name2> in model <name4>
<name1> . objects . filter ( name = <val2>   , title = <val3>   ) . <name4> ( )	Django check if an object with criteria <val2> equal to <val2> and criteria <val3> equal to <val3> <name4> in model <name1>
sorted ( l , key = lambda x : ( - int ( x [ <val1> ] ) , x [ 0 ] ) )	sort a nested list by the inverse of element 2 , then by element <val1>
<name5> . META [ 'HTTP_HOST'   ]	get domain / host name from <name5> object in Django
<name1> . META [ 'HTTP_HOST'   ]	get domain / host name from <name1> object in Django
subprocess . call ( [ <val5>   , <val1>   , <name4> ] )	invoke perl script <val1> using perl interpeter <val5> and send argument <name4> to it
subprocess . call ( [ <val1>   , <val2>   , <name3> ] )	invoke perl script <val2> using perl interpeter <val1> and send argument <name3> to it
<name4> ( '\n'   . join ( str ( p ) for p in <name3> ) )	<name4> list of items <name3>
<name1> ( '\n'   . join ( str ( p ) for p in <name2> ) )	<name1> list of items <name2>
<name4> . <name5> ( {  <name6> : <name3> [ <val2>   ] }  )	<name5> the dictionary <name4> with dynamic keys <name6> and values with key <val2> from dictionary <name3>
<name1> . <name2> ( {  <name3> : <name4> [ <val5>   ] }  )	<name2> the dictionary <name1> with dynamic keys <name3> and values with key <val5> from dictionary <name4>
<name5> ( <name6> . decode ( <val1>   ) )	split a <val1> encoded string <name6> into a <name5> of characters
<name1> ( <name2> . decode ( <val3>   ) )	split a <val3> encoded string <name2> into a <name1> of characters
<name4> = <name2> . decode ( 'utf-8-sig'   )	convert utf -8 with bom string <name2> to utf -8 with no bom <name4>
<name1> = <name2> . decode ( 'utf-8-sig'   )	convert utf -8 with bom string <name2> to utf -8 with no bom <name1>
Entry . objects . filter ( ~  Q ( id = <val2> ) )	Filter model 'Entry' where 'id' is not equal to <val2> in Django
Entry . objects . filter ( ~  Q ( id = <val1> ) )	Filter model 'Entry' where 'id' is not equal to <val1> in Django
getattr ( __builtins__ , <val1>   )	lookup an attribute in any scope by name <val1>
<name6> . call ( [ 'shutdown'   , '/r'   , '/t'   , <val5>   ] )	restart a computer after <val5> seconds using <name6>
<name1> . call ( [ 'shutdown'   , '/r'   , '/t'   , <val2>   ] )	restart a computer after <val2> seconds using <name1>
<name4> . call ( [ 'shutdown'   , '/s'   ] )	shutdown a computer using <name4>
<name1> . call ( [ 'shutdown'   , '/s'   ] )	shutdown a computer using <name1>
<name4> . call ( [ 'shutdown'   , '/a '   ] )	abort a computer shutdown using <name4>
<name1> . call ( [ 'shutdown'   , '/a '   ] )	abort a computer shutdown using <name1>
subprocess . call ( [ 'shutdown'   , '/l '   ] )	logoff computer having windows operating system using python
subprocess . call ( [ 'shutdown'   , '/r'   ] )	shutdown and restart a computer running windows from script
open ( <val6>   , 'w'   ) . close ( )	erase the contents of a file <val6>
open ( <val1>   , 'w'   ) . close ( )	erase the contents of a file <val1>
<name2> . to_dict ( 'index'   )	convert dataframe <name2> to list of dictionaries including the index values
<name1> . to_dict ( 'index'   )	convert dataframe <name1> to list of dictionaries including the index values
<name6> . to_dict ( 'records'   )	Create list of dictionaries from pandas dataframe <name6>
<name1> . to_dict ( 'records'   )	Create list of dictionaries from pandas dataframe <name1>
df . <name1> ( pd . TimeGrouper ( freq = <val6>   ) )	Group a pandas data frame by monthly frequenct <val6> using <name1>
df . <name1> ( pd . TimeGrouper ( freq = <val2>   ) )	Group a pandas data frame by monthly frequenct <val2> using <name1>
[ ( c / t ) for c , t in zip ( <name3> , <name5> ) ]	divide the members of a list <name3> by the corresponding members of another list <name5>
[ ( c / t ) for c , t in zip ( <name1> , <name2> ) ]	divide the members of a list <name1> by the corresponding members of another list <name2>
sorted ( <name6> , key = <name6> . get )	sort dict <name6> by value
sorted ( <name1> , key = <name1> . get )	sort dict <name1> by value
sorted ( <name1> . <name3> ( ) )	Sort a dictionary <name1> by its <name3>
sorted ( <name1> . <name2> ( ) )	Sort a dictionary <name1> by its <name2>
<name6> ( <name3> ( <name4> . items ( ) ) , <name2> = lambda x : x [ 1 ] )	Get a <name3> of pairs of <name2> - value <name6> by values in dictionary <name4>
<name1> ( <name2> ( <name3> . items ( ) ) , <name4> = lambda x : x [ 1 ] )	Get a <name2> of pairs of <name4> - value <name1> by values in dictionary <name3>
now = datetime . datetime . now ( ) . strftime ( '%H:%M:%S'   )	display current time
'' '' ' ' <val2> ' ' '' ' . replace ( ' bar ' , ' XXX ' , 1 ) . find ( ' bar ' )'	find the index of the second occurrence of the substring 'bar' in string <val2>
'' '' ' ' <val1> ' ' '' ' . replace ( ' bar ' , ' XXX ' , 1 ) . find ( ' bar ' )'	find the index of the second occurrence of the substring 'bar' in string <val1>
set ( [ <val6>   , <val1>   ] ) . issubset ( <name4> )	check if key <val6> and key <val1> are presented in dictionary <name4>
set ( [ <val1>   , <val2>   ] ) . issubset ( <name3> )	check if key <val1> and key <val2> are presented in dictionary <name3>
<name3> . <name1> ( <val6>   , <val2>   )	<name1> string <val6> in string <name3> with character <val2>
<name1> . <name2> ( <val3>   , <val4>   )	<name2> string <val3> in string <name1> with character <val4>
<name2> . savez ( <name4> , * [ getarray [ <val6> ] , getarray [ <val3> ] , getarray [ <val5> ] ] )	Save array at index <val6> , index <val3> and index <val5> of array <name2> to <name4> file <name4>
<name1> . savez ( <name2> , * [ getarray [ <val3> ] , getarray [ <val4> ] , getarray [ <val5> ] ] )	Save array at index <val3> , index <val4> and index <val5> of array <name1> to <name2> file <name2>
( <name5> - datetime . timedelta ( hours = <val2> , <name3> = <val6> ) )	subtract <val2> hour and <val6> <name3> from time object <name5>
( <name1> - datetime . timedelta ( hours = <val2> , <name3> = <val4> ) )	subtract <val2> hour and <val4> <name3> from time object <name1>
dt = datetime . datetime . combine ( datetime . date . today ( ) , <name5> )	add 1 hour and 2 minutes to time object <name5>
dt = datetime . datetime . combine ( datetime . date . today ( ) , <name1> )	add 1 hour and 2 minutes to time object <name1>
<name2> -= datetime . timedelta ( <name4> = <val3> )	subtract <val3> <name4> from the time object <name2>
<name1> -= datetime . timedelta ( <name2> = <val3> )	subtract <val3> <name2> from the time object <name1>
print ( <name5> . <name6> ( <val3>   ) )	<name6> string <name5> using hex <val3> encoding
print ( <name1> . <name2> ( <val3>   ) )	<name2> string <name1> using hex <val3> encoding
print ( ' '   . join ( [ str ( ord ( a ) ) <name2> a <name4> <name6> ] ) )	Return the decimal value <name2> each hex character <name4> <name6> <name6>
print ( ' '   . join ( [ str ( ord ( a ) ) <name1> a <name2> <name3> ] ) )	Return the decimal value <name1> each hex character <name2> <name3> <name3>
[ x for x <name3> l if x [ 1 ] == 1 ]	Get all the items from a list of tuple 'l' where second item <name3> tuple is '1' .
[ x for x <name1> l if x [ 1 ] == 1 ]	Get all the items from a list of tuple 'l' where second item <name1> tuple is '1' .
<name6> . fromlist ( [ int ( val ) for val in <name2> . read ( ) . split ( ) ] )	Create array <name6> containing integers from <name2>
<name1> . fromlist ( [ int ( val ) for val in <name2> . read ( ) . split ( ) ] )	Create array <name1> containing integers from <name2>
print ( re . sub ( '[_%^$]'   , '\\\\\\g<0>'   , <name5> ) )	place '\'  infront of each non - letter char in string <name5>
print ( re . sub ( '[_%^$]'   , '\\\\\\g<0>'   , <name1> ) )	place '\'  infront of each non - letter char in string <name1>
'doc . xpath ( ' '//a[starts-with(text(),' some <name6> ')]' ' )'	Get all a tags where the <name6> starts with value 'some text' using regex
'doc . xpath ( ' '//a[starts-with(text(),' some <name1> ')]' ' )'	Get all a tags where the <name1> starts with value 'some text' using regex
zip ( * <name5> )	convert <name5> list of lists <name5> into list of tuples of appropriate elements form nested lists
zip ( * <name1> )	convert <name1> list of lists <name1> into list of tuples of appropriate elements form nested lists
[ map ( int , sublist ) for sublist in <name2> ]	convert a list of strings <name2> to list of integers
[ map ( int , sublist ) for sublist in <name1> ]	convert a list of strings <name1> to list of integers
[ [ int ( x ) for x <name2> sublist ] for sublist <name2> <name3> ]	convert strings <name2> list - of - lists <name3> to ints
[ [ int ( x ) for x <name1> sublist ] for sublist <name1> <name2> ]	convert strings <name1> list - of - lists <name2> to ints
np . where ( np . in1d ( <name6> , <name2> ) ) [ 0 ]	get index of elements in array <name6> that occur in another array <name2>
np . where ( np . in1d ( <name1> , <name2> ) ) [ 0 ]	get index of elements in array <name1> that occur in another array <name2>
[ {  <val1>   : <name3> , <val2>   : b }   for <name3> , b <name6> zip ( <name4> [ <val1>   ] , <name4> [ <val2>   ] ) ]	create <name3> list where each element is <name3> dictionary with keys <val1> and <val2> and values corresponding to each value <name6> the lists referenced by keys <val1> and <val2> <name6> dictionary <name4>
[ {  <val1>   : <name2> , <val3>   : b }   for <name2> , b <name4> zip ( <name5> [ <val1>   ] , <name5> [ <val3>   ] ) ]	create <name2> list where each element is <name2> dictionary with keys <val1> and <val3> and values corresponding to each value <name4> the lists referenced by keys <val1> and <val3> <name4> dictionary <name5>
calendar . monthrange ( <val1> , 1 )	Get Last Day of the first month in <val1>
calendar . monthrange ( 2008 , 2 )	Get Last Day of the second month in 2002
calendar . monthrange ( <val6> , 2 )	Get Last Day of the second month in <val6>
calendar . monthrange ( <val1> , 2 )	Get Last Day of the second month in <val1>
calendar . monthrange ( <name5> , <name2> ) [ 1 ]	Get Last Day of the <name2> <name2> in <name5> <name5>
calendar . monthrange ( <name1> , <name2> ) [ 1 ]	Get Last Day of the <name2> <name2> in <name1> <name1>
monthrange ( <val4> , 2 )	Get Last Day of the second month in year <val4>
monthrange ( <val1> , 2 )	Get Last Day of the second month in year <val1>
( datetime . date ( <val5> , 2 , 1 ) - datetime . timedelta ( days = 1 ) )	Get Last Day of the first month in year <val5>
( datetime . date ( <val1> , 2 , 1 ) - datetime . timedelta ( days = 1 ) )	Get Last Day of the first month in year <val1>
from subprocess import call	'Calling an external command ' 'ls -l' ''
os . system ( <val3>   )	'Calling an external command ' <val3> ''
os . system ( <val1>   )	'Calling an external command ' <val1> ''
os . system ( <val3>   )	'Calling an external command ' <val3> ''
os . system ( <val1>   )	'Calling an external command ' <val1> ''
stream = os . popen ( <val4>   )	'Calling an external command ' <val4> ''
stream = os . popen ( <val1>   )	'Calling an external command ' <val1> ''
print ( subprocess . Popen ( <val3>   , shell = True , stdout = subprocess . PIPE ) . stdout . read ( ) )	'Calling an external command ' <val3> ''
print ( subprocess . Popen ( <val1>   , shell = True , stdout = subprocess . PIPE ) . stdout . read ( ) )	'Calling an external command ' <val1> ''
print ( os . popen ( <val6>   ) . read ( ) )	'Calling an external command ' <val6> ''
print ( os . popen ( <val1>   ) . read ( ) )	'Calling an external command ' <val1> ''
return_code = subprocess . call ( <val4>   , shell = True )	'Calling an external command ' <val4> ''
return_code = subprocess . call ( <val1>   , shell = True )	'Calling an external command ' <val1> ''
call ( [ 'ls'   , '-l'   ] )	'Calling an external command ' 'ls -l' ''
<name1> ( urllib . parse . unquote ( <name4> ) . <name5> ( 'utf8'   ) )	<name5> <name4> <name4> with utf8 and <name1> it
<name1> ( urllib . parse . unquote ( <name2> ) . <name3> ( 'utf8'   ) )	<name3> <name2> <name2> with utf8 and <name1> it
<name5> = <name2> . parse . unquote ( <name5> ) . <name6> ( <val1>   )	<name6> a <name2> escaped <name5> string <name5> with <val1>
<name1> = <name2> . parse . unquote ( <name1> ) . <name3> ( <val4>   )	<name3> a <name2> escaped <name1> string <name1> with <val4>
'' '' ' ' '' ' ' '' ' . join ( filter ( str . isdigit , ' 12454 v ' ) )'	delete letters from string '12454v'
df [ <val5>   ] . str . split ( '-'   ) . str [ 0 ] . astype ( int )	Update row values for a column <val5> using vectorized string operation in pandas
df [ <val1>   ] . str . split ( '-'   ) . str [ 0 ] . astype ( int )	Update row values for a column <val1> using vectorized string operation in pandas
<name5> . <name1> ( key = lambda x : x [ 1 ] )	<name1> a list of tuples <name5> by second parameter in the tuple
<name1> . <name2> ( key = lambda x : x [ 1 ] )	<name2> a list of tuples <name1> by second parameter in the tuple
[ m . start ( ) for m <name2> re . finditer ( '(?=tt)'   , <val3>   ) ]	find indexes of all occurrences of a substring tt <name2> a string <val3>
[ m . start ( ) for m <name1> re . finditer ( '(?=tt)'   , <val2>   ) ]	find indexes of all occurrences of a substring tt <name1> a string <val2>
[ m . start ( ) for m <name1> re . finditer ( 'test'   , 'test test test test'   ) ]	find all occurrences of a substring <name1> a string
re . findall ( '\\s+|\\S+'   , <name3> )	split string <name3> based on white spaces
re . findall ( '\\s+|\\S+'   , <name1> )	split string <name1> based on white spaces
<name1> . set_index ( [ 'race_date'   , 'track_code'   , 'race_number'   ] )	set columns ['race_date', 'track_code', 'race_number'] as indexes in dataframe <name1>
<name2> . <name5> ( key = lambda item : item [ <val4>   ] , <name1> = True )	<name5> a <name2> of dictionary values by <val4> in <name1> order
<name1> . <name2> ( key = lambda item : item [ <val3>   ] , <name4> = True )	<name2> a <name1> of dictionary values by <val3> in <name4> order
'' '' ' ' '{:.5}' ' ' '' ' . format ( ' aaabbbccc ' )'	display first 5 characters of string 'aaabbbccc'
struct . <name6> ( '11B'   , <name2> )	<name6> hexadecimal string <name2> to a list of integer values
struct . <name1> ( '11B'   , <name2> )	<name1> hexadecimal string <name2> to a list of integer values
[ i for i , j in enumerate ( [ <val1>   , 'bar'   , 'baz'   ] ) if j == <val1>   ]	finding the index of an item <val1> given a list ['foo', 'bar', 'baz'] containing it
print ( <name5> ( itertools . product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) )	generate all permutations of <name5> [1, 2, 3] and <name5> [4, 5, 6]
print ( <name1> ( itertools . product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) )	generate all permutations of <name1> [1, 2, 3] and <name1> [4, 5, 6]
itertools . <name4> ( [ 1 , 2 , 3 ] )	generate all <name4> of a list [1, 2, 3]
itertools . <name1> ( [ 1 , 2 , 3 ] )	generate all <name1> of a list [1, 2, 3]
return re . sub ( <val3>   , <val5>   , <name4> )	substitute occurrences of unicode regex pattern u <val3> with empty string <val5> in string <name4>
return re . sub ( <val1>   , <val2>   , <name3> )	substitute occurrences of unicode regex pattern u <val1> with empty string <val2> in string <name3>
<name3> <name5> ( <val1>   )	manually throw / <name3> a <name5> exception with the message <val1>
<name1> <name2> ( <val3>   )	manually throw / <name1> a <name2> exception with the message <val3>
raise Exception ( <val2>   )	'throw an exception ' <val2> ''
raise Exception ( <val1>   )	'throw an exception ' <val1> ''
raise Exception ( <val1>   )	'Manually throw an exception ' <val1> ''
raise <name1> ( <val6>   )	throw a <name1> with message <val6>
raise <name1> ( <val2>   )	throw a <name1> with message <val2>
raise <name5> ( <val1>   )	throw an <name5> with message <val1>
raise <name1> ( <val2>   )	throw an <name1> with message <val2>
raise ValueError ( <val6>   )	throw a value error with message <val6> , 'foo' , 'bar' , 'baz'
raise ValueError ( <val1>   )	throw a value error with message <val1> , 'foo' , 'bar' , 'baz'
raise RuntimeError ( <val4>   )	throw a runtime error with message <val4>
raise RuntimeError ( <val1>   )	throw a runtime error with message <val1>
'raise AssertionError ( ' <val1> <name6> <val3> ' , distance )'	'throw an assertion error with message ' <val1> <name6> <val3> ', distance'
'raise AssertionError ( ' <val1> <name2> <val3> ' , distance )'	'throw an assertion error with message ' <val1> <name2> <val3> ', distance'
driver . find_element_by_id ( <val5>   ) . <name6> ( )	if Selenium textarea element <val5> is not empty , <name6> the field
driver . find_element_by_id ( <val1>   ) . <name2> ( )	if Selenium textarea element <val1> is not empty , <name2> the field
driver . find_element_by_id ( <val1>   ) . <name2> ( )	<name2> text from textarea <val1> with selenium
socket . inet_ntoa ( struct . pack ( '!L'   , <val2> ) )	convert a number <val2> to ip string
socket . inet_ntoa ( struct . pack ( '!L'   , <val1> ) )	convert a number <val1> to ip string
<name1> = <name1> [ [ <val2>   , <val4>   , <val5>   , <val6>   ] ]	Rearrange the columns <val5> , <val6> , <val2> , <val4> of pandas DataFrame <name1> in mentioned sequence <val2> , <val4> , <val5> , <val6>
<name1> = <name1> [ [ <val2>   , <val3>   , <val4>   , <val5>   ] ]	Rearrange the columns <val4> , <val5> , <val2> , <val3> of pandas DataFrame <name1> in mentioned sequence <val2> , <val3> , <val4> , <val5>
super ( <name5> , self ) . <name2> ( * args , ** kwargs )	call base class ' s <name2> method from the child class <name5>
super ( <name1> , self ) . <name2> ( * args , ** kwargs )	call base class ' s <name2> method from the child class <name1>
<name3> ( <name5> . <name6> ( ) )	<name3> of all <name6> in a python dict <name5>
<name1> ( <name2> . <name3> ( ) )	<name1> of all <name3> in a python dict <name2>
<name2> . dumps ( <name4> , ensure_ascii = False )	convert python dictionary <name4> to <name2> array
<name1> . dumps ( <name2> , ensure_ascii = False )	convert python dictionary <name2> to <name1> array
<name2> = np . <name4> ( [ i for i <name1> <name6> ( <val3> ) ] , dtype = np . float64 )	assign an <name4> of floats <name1> <name6> from 0 to <val3> to a variable <name2>
<name1> = np . <name2> ( [ i for i <name3> <name4> ( <val5> ) ] , dtype = np . float64 )	assign an <name2> of floats <name3> <name4> from 0 to <val5> to a variable <name1>
sorted ( <name5> , key = lambda x : <name1> . index ( <name3> ( x . <name6> ( ) ) [ 0 ] ) )	sort a <name3> of dictionaries <name5> by <name6> in an <name1> <name1>
sorted ( <name1> , key = lambda x : <name2> . index ( <name3> ( x . <name4> ( ) ) [ 0 ] ) )	sort a <name3> of dictionaries <name1> by <name4> in an <name2> <name2>
return <name4> [ 0 ] . upper ( ) + <name4> [ 1 : ]	change the case of the first letter in string <name4>
return <name1> [ 0 ] . upper ( ) + <name1> [ 1 : ]	change the case of the first letter in string <name1>
'' '' ' ' '' ' ' '' ' . join ( [ 1 , 2 , 3 , 4 ] )'	join list of numbers [1,2,3,4]  to string of numbers .
<name3> = <name3> . decode ( <val2>   , 'ignore'   ) . encode ( <val2>   )	delete every non <val2> characters from a string <name3>
<name1> = <name1> . decode ( <val2>   , 'ignore'   ) . encode ( <val2>   )	delete every non <val2> characters from a string <name1>
os . system ( <name4> )	execute a <name4> command  in the terminal from a python script
os . system ( <name1> )	execute a <name1> command  in the terminal from a python script
c . <name4> ( <val5>   , ( <name2> , <name3> ) )	MySQL <name4> query <val5> with parameters <name2> and <name3>
c . <name1> ( <val2>   , ( <name3> , <name4> ) )	MySQL <name1> query <val2> with parameters <name3> and <name4>
dateobj = <name4> . <name4> . strptime ( <name5> , <val3>   ) . date ( )	Parse string <name5> into a <name4> object using format pattern <val3>
dateobj = <name1> . <name1> . strptime ( <name2> , <val3>   ) . date ( )	Parse string <name2> into a <name1> object using format pattern <val3>
