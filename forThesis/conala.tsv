os . kill ( os . getpid ( ) , <name5> . SIGUSR1 )	send a <name5> signal.SIGUSR1 to the current process
bytes . fromhex ( <val4>   ) . <name3> ( 'utf-8'   )	<name3> a hex string <val4> to UTF -8 .
<name5> ( x == <name2> [ 0 ] for x <name6> <name2> )	check if <name5> elements <name6> list <name2> are identical
print ( '%*s : %*s'     % ( <val4> , <val6>   , <val4> , <val1>   ) )	format number of spaces between strings <val6> , : and <val1> to be <val4>
res = {  k : v for k , v <name5> list ( <name2> . items ( ) ) if v is not <name3> }	get rid of <name3> values <name5> dictionary <name2>
res = dict ( ( k , v ) for k , v <name5> <name2> . items ( ) if v is not <name6> )	get rid of <name6> values <name5> dictionary <name2>
subprocess . check_output ( <val2>   , shell = True )	capture final output of a chain of system commands <val2>
""""" """" """" . join ( [ 'a'   , 'b'   , 'c'   ] )"	concatenate a list of strings ['a', 'b', 'c']
pd . Series ( list ( set ( <name6> ) . <name5> ( set ( <name3> ) ) ) )	find <name5> data between series <name6> and series <name3>
<name3> . send ( 'HTTP/1.0 200 OK\r\n'   )	sending http headers to <name3>
then = <name2> . <name2> . strptime ( <name1> , '%Y-%m-%d'   ) . <name3> ( )	Format a <name2> string <name1> to extract <name3> only
<name4> . <name6> ( '\n'   )	<name6> a multi - line string <name4> into separate strings
<val6>   . split ( <val2>   )	Split a multi - line string <val6> by new line character <val2>
""""" <val4> """" . join ( str ( x ) for x in <name5> )"	concatenate elements of list <name5> by a colon <val4>
<name6> . objects . filter ( ) [ : 1 ] . <name1> ( )	<name1> the first object from a queryset in django model <name6>
a . <name1> ( axis = 1 )	Calculate <name1> over all rows of 2 D numpy array
<name3> . simplefilter ( <val6>   )	enable <name3> using action <val6>
print ( <val2>   . join ( map ( str , <name5> ) ) )	concatenate items of list <name5> with a space <val2>
subprocess . call ( [ 'python.exe'   , <val4>   , <val5>   ] )	run script <val4> with argument <val5> on terminal using python executable
<name1> = <name2> ( <name5> . replace ( ','   , ''   ) )	convert a string <name5> with dot and comma into a <name2> number <name1>
float ( <val6>   . replace ( ','   , ''   ) )	convert a string <val6> with dot and comma into a floating number
sys . path . append ( '/path/to/whatever'   )	set pythonpath in python script .
re . <name6> ( <val2>   , <val5>   )	<name6> string <val5> using a regex <val2>
<name5> = <name2> ( <val6>   , 'a'   )	<name2> a <name5> <val6> in append mode
urllib . request . urlretrieve ( <val2>   , <val5>   )	download a file <val2> over HTTP and save to <val5>
r = requests . get ( <name1> )	download a file <name1> over HTTP
<name2> . add_argument ( <val1>   , <name6> = 'version'   , <name5> = <val3>   )	argparse add argument with flag <val1> and <name5> <name6> of <val3> to <name2> <name2>
{  i : <name3> [ i ] for i in <name3> if i != <val4>  }	remove key <val4> from dictionary <name3>
pd . merge ( <name1> , <name2> , on = [ <val6>   ] , suffixes = ( <val5>   , <val4>   ) )	Create new DataFrame object by merging columns <val6> of dataframes <name1> and <name2> and rename the columns from dataframes <name1> and <name2> with suffix <val5> and <val4> respectively
<name5> . split ( ' '   , <val6> )	Split a string <name5> by space with <val6> splits
<name4> ( 'Enter your input:'   )	read keyboard - <name4>
<name6> . run ( <name4> = True )	enable <name4> mode on Flask application <name6>
pickle . dump ( <name4> , open ( <val6>   , 'wb'   ) )	python save list <name4> to file object <val6>
<name5> . tensordot ( <name4> , <name6> , axes = [ 1 , 1 ] ) . swapaxes ( 0 , 1 )	Multiply a matrix <name4> with a 3 d tensor <name6> in <name5>
numpy . zeros ( ( <val5> , <val5> , <val5> ) )	Create <val5> d array of zeroes of size (3,3,3)
""""" "" "" """" . join ( <name1> . split ( ' '   ) [ : -1 ] )"	cut off the last word of a sentence <name1>
<name6> = np . asarray ( <name6> ) . reshape ( 1 , -1 ) [ ( 0 ) , : ]	convert scalar <name6> to array
<name1> ( <name1> ( i ) if isinstance ( i , <name4> ) else i for i in <name3> )	<name1> all elements of nested <name4> <name3>
struct . unpack ( '!f'   , <val1>   . decode ( 'hex'   ) ) [ 0 ]	convert hex string <val1> to a float number
<name6> . update ( ( x , y * <val5> ) <name4> x , y <name3> list ( <name6> . items ( ) ) )	Multiple each value by <val5> <name4> all keys <name3> a dictionary <name6>
subprocess . call ( <val3>   , shell = True )	running bash script <val3>
""""" <val3> """" . join ( <name6> )"	Join elements of list <name6> with a comma <val3>
<name1> = ','   . join ( map ( str , <name1> ) )	make a comma - separated string from a list <name1>
<name6> ( reversed ( <name6> ( range ( <val2> ) ) ) )	reverse the <name6> that contains 1 to <val2>
print ( <val1>   . replace ( <val2>   , ''   ) )	remove substring <val2> from a string <val1>
""""" <val3> """" . join ( <name4> . split ( <val3>   ) [ : : -1 ] )"	Reverse the order of words , delimited by <val3> , in string <name4>
datetime . datetime . fromtimestamp ( <name5> ) . strftime ( <val1>   )	convert epoch time represented as milliseconds <name5> to string using format <val1>
<name1> . strftime ( <val5>   , <name1> . gmtime ( 1236472051807 / 1000.0 ) )	parse milliseconds epoch <name1> '1236472051807' to format <val5>
( datetime . datetime . now ( ) - datetime . timedelta ( <name1> = <val2> ) ) . <name3> ( )	get the <name3> <val2> <name1> before the current <name3>
print ( <name3> ( row [ <name6> ] for row <name2> <name1> ) )	<name3> elements at index <name6> of each list <name2> list <name1>
[ <name4> ( row [ i ] for row in <name1> ) for i in range ( len ( <name1> [ 0 ] ) ) ]	<name4> columns of a list <name1>
<name3> . b64encode ( bytes ( <val6>   , 'utf-8'   ) )	encode binary string <val6> to <name3> code
dict ( ( k , [ d [ k ] for d <name3> <name2> ] ) for k <name3> <name2> [ 0 ] )	combine list of dictionaries <name2> with the same keys <name3> each list to a single dictionary
{  <name3> : [ d [ <name3> ] for d in <name4> ] for <name3> in <name4> [ 0 ] }	Merge a nested dictionary <name4> into a flat dictionary by concatenating nested values with the same key <name3>
[ k for k , v <name1> <name4> ( Counter ( <name5> ) . items ( ) ) if v >   1 ]	identify duplicate values <name1> <name4> <name5>
sys . path . insert ( 1 , os . path . join ( os . path . dirname ( <name6> ) , <val5>   ) )	Insert directory <val5> into directory <name6>
<name2> . path . append ( os . path . join ( os . path . dirname ( __file__ ) , <val3>   ) )	modify <name2> .path for python module <val3>
"db . execute ( ""INSERT INTO present VALUES('test2', ?, 10)"" , ( None , ) )"	Insert a 'None' value into a SQLite3 table .
[ image for menuitem in <name5> for image in menuitem ]	flatten list <name5>
<name6> . extend ( <name3> )	append elements of <name6> set <name3> to <name6> list <name6>
np . savetxt ( 'c:\\data\\np.txt'   , <name5> . values , fmt = '%d'   )	write the data of dataframe <name5> into text file np.txt
<name5> . to_csv ( <val6>   , header = None , index = None , sep = ' '   , mode = 'a'   )	write content of DataFrame <name5> into text file <val6>
print ( <name5> . rpartition ( <val2>   ) [ 0 ] )	Split a string <name5> by last occurrence of character <val2>
print ( x . rsplit ( <val3>   , 1 ) [ 0 ] )	get the last part of a string before the character <val3>
ftp . storlines ( 'STOR '     + filename , open ( filename , 'r'   ) )	upload file using FTP
np . <name1> ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] )	create array containing the <name1> value of respective elements of array [2, 3, 4] and array [1, 5, 2]
<name3> ( <name5> [ <val6> : ] + <name5> [ : <val6> ] )	<name3> a list <name5> and move first <val6> elements to the end of the list
[ int ( 1000 * <name5> . <name5> ( ) ) for i in range ( 10000 ) ]	create a <name5> list of integers
db . GqlQuery ( <val2>   , foo . key ( ) )	Google App Engine execute GQL query <val2> with parameter foo.key()
df . b . str . contains ( '^f'   )	filter rows in pandas starting with alphabet 'f' using regular expression .
<name5> ( '\n'   . join ( '\t'   . join ( str ( col ) for col in row ) for row in <name1> ) )	<name5> a 2 dimensional list <name1> as a table with delimiters
<name6> . set_index ( list ( 'BC'   ) ) . drop ( tuples , errors = 'ignore'   ) . reset_index ( )	pandas : delete rows in dataframe <name6> based on multiple columns values
""""" ""({:d} goals, ${:d})"" """" . <name1> ( self . goals , self . penalties )"	<name1> the variables self.goals and self.penalties using string formatting
""""" <val5> """" . <name4> ( self . <name1> , self . <name3> )"	<name4> string <val5> with variables <name1> and <name3>
""""" <val4> """" . <name6> ( self )"	<name6> string <val4>
[ int ( ''   . join ( str ( d ) for d in x ) ) for x in <name1> ]	convert list of lists <name1> to list of integers
[ ''   . join ( str ( d ) for d <name6> x ) for x <name6> <name4> ]	combine elements of each list <name6> list <name4> into digits of a single integer
<name3> = [ int ( ''   . join ( [ str ( y ) for y in x ] ) ) for x in <name3> ]	convert a list of lists <name3> to list of integers
<name3> . <name2> ( <val4>   . join ( <name1> ) )	<name2> the elements of list <name1> concatenated by special character <val4> to file <name3>
[ x for x in [ 'AAT'   , 'XAC'   , 'ANT'   , 'TTA'   ] if <val3>     not in x and <val4>     not in x ]	removing an element from a list based on a predicate <val3> or <val4>
<name1> = re . sub ( '\\b(\\w+)( \\1\\b)+'   , '\\1'   , <name1> )	Remove duplicate words from a string <name1> using regex
df . astype ( bool ) . sum ( axis = 1 )	count non zero values in each column in pandas data frame
re . <name3> ( <val1>   , <val2>   )	<name3> for string that matches regular expression pattern <val1> in string <val2>
""""" <val6> """" . <name4> ( )"	<name4> string <val6> into a list on white spaces
print ( re . <name4> ( <val6>   , <name5> ) . group ( 0 ) )	<name4> for occurrences of regex pattern <val6> in xml string <name5>
open ( <name1> , 'w'   ) . close ( )	erase all the contents of a file <name1>
<name1> . <name1> . strptime ( string_date , <val3>   )	convert a string into <name1> using the format <val3>
[ <name1> for <name1> , item in enumerate ( <name2> ) if item [ 0 ] == <val6>   ]	find the <name1> of a list with the first element equal to <val6> within the list of lists <name2>
re . sub ( '[^\\sa-zA-Z0-9]'   , ''   , <name2> ) . <name6> ( ) . strip ( )	<name6> a string <name2> and remove non - alphanumeric characters aside from space
re . sub ( '(?!\\s)[\\W_]'   , ''   , <name4> ) . <name6> ( ) . strip ( )	remove all non - alphanumeric characters except space from a string <name4> and <name6> it
plt . plot ( x , y , label = 'H\u2082O'   )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y' .
plt . plot ( x , y , label = '$H_2O$'   )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y' .
[ x for x in <name5> <name4> len ( x ) == <val1> ]	loop over a list <name5> <name4> sublists length equals <val1>
<name2> = [ <name3> ( ) for _ in range ( <val1> ) ]	initialize a list <name2> of <val1> objects <name3> ( )
<name1> = [ <name4> ( ) for i in range ( <val2> ) ]	create list <name1> containing <val2> instances of object <name4>
self . driver . find_element_by_css_selector ( '.someclass a'   ) . get_attribute ( <val5>   )	get the content of child tag with <val5> attribute whose parent has css someclass
<name5> . merge ( <name4> , <name1> = <val6>   )	joining data from dataframe <name5> with data from dataframe <name4> based <name1> matching values of column <val6> in both dataframes
'first string is: %s, second one is: %s'     % ( <name6> , 'geo.tif'   )	use %s operator to print variable values <name6> inside a string
distutils . dir_util . mkpath ( <name6> )	check if a directory <name6> exists and create it if necessary
re . sub ( '\\bH3\\b'   , <val2>   , text )	Replace a separate word 'H3' by <val2> in a string 'text'
re . sub ( '\\D'   , <val3>   , <val6>   )	substitute ASCII letters in string <val6> with empty string <val3>
""""" """" """" . join ( [ x for x in <val5>     if x . isdigit ( ) ] )"	get digits only from a string <val5> using lambda function
print ( <name2> . find ( <val4>   ) . string )	access a tag called <val4> in beautifulsoup <name2>
<name1> = dict ( ( record [ '_id'   ] , record ) for record <name6> <name3> )	get a dictionary <name1> of key - value pairs <name6> PyMongo <name3> <name3>
np . concatenate ( ( <name6> , <name4> ) )	Create new matrix object by concatenating data from matrix <name6> and matrix <name4>
np . vstack ( ( <name3> , <name4> ) )	concat two matrices <name3> and <name4> in numpy
os . stat ( <name1> ) . st_size	Get the characters count in a file <name1>
<name2> . <name5> ( <val3>   )	<name5> the occurrences of item <val3> in list <name2>
Counter ( <name4> )	count the occurrences of items in list <name4>
[ [ x , <name3> . <name6> ( x ) ] for x <name2> set ( <name3> ) ]	<name6> the occurrences of items <name2> list <name3>
dict ( ( ( x , <name2> . <name1> ( x ) ) for x <name5> set ( <name2> ) ) )	<name1> the occurrences of items <name5> list <name2>
<name5> . <name1> ( <val2>   )	<name1> the occurrences of item <val2> in list <name5>
shutil . <name3> ( <name6> , <name5> )	<name3> file <name6> to directory <name5>
max ( k for k , v <name3> <name2> . items ( ) if v != 0 )	find the key associated with the largest value <name3> dictionary <name2> whilst key is non - zero value
( k for k , v <name3> <name4> . items ( ) if v != <val5> )	get the largest key whose not associated with value of <val5> <name3> dictionary <name4>
max ( k for k , v <name3> <name6> . items ( ) if v != 0 )	get the largest key <name3> a dictionary <name6> with non - zero value
<name1> . seek ( 0 )	Put the curser at beginning of the <name1>
<name5> [ <val1>   ] = np . where ( <name5> [ <val3>   ] . isnull , <name5> [ <val4>   ] , <name5> [ <val3>   ] )	combine values from column <val4> and column <val3> of dataframe <name5> into column <val1> of datafram <name5>
del <name2> [ <val3>   ]	remove key <val3> from dictionary <name2>
<name1> . objects . update ( timestamp = F ( <val3>   ) + timedelta ( days = 36524.25 ) )	Update datetime field in <name1> to be the existing <val3> plus 100 years
[ 'it'   ] + [ 'was'   ] + [ 'annoying'   ]	merge list ['it'] and list ['was'] and list ['annoying'] into one list
str ( int ( <name2> ) + 1 ) . zfill ( len ( <name2> ) )	increment a value with leading zeroes in a number <name2>
all ( <name2> . <name4> [ : -1 ] <= <name2> . <name4> [ 1 : ] )	check if a pandas dataframe <name2> ' s <name4> is sorted
<name6> ( <name5> )	Convert tuple <name5> to <name6>
<name4> ( l )	Convert list t to <name4>
<name4> = map ( <name1> , <name4> )	Convert tuple <name4> to <name1>
<name1> . <name1> ( <name6> , <name5> )	send the output of <name1> object <name6> to file <name5>
df . loc [ df [ <val5>   ] ]	get index of rows in column <val5>
<name5> . iloc [ np . flatnonzero ( <name5> [ <val4>   ] ) ]	Create a list containing the indexes of rows where the value of column <val4> in dataframe <name5> are equal to True
df [ df [ <val1>   ] == <name3> ] . index . tolist ( )	get list of indexes of rows where column <val1> values match <name3>
<name1> [ <name1> [ <val5>   ] ] . <name2> . tolist ( )	get <name2> of rows in dataframe <name1> which column <val5> matches value True
os . chdir ( <name3> )	change working directory to the directory <name3>
"<name2> . execute ( ""INSERT INTO test VALUES (?, 'bar')"" , ( <name6> , ) )"	insert data from a string <name6> to sqlite db <name2>
""""" <val1> """" . <name5> ( 'string_escape'   )"	<name5> string <val1> into a normal string
<name2> . decode ( 'string_escape'   )	convert a raw string <name2> into a normal string
<name2> . decode ( 'unicode_escape'   )	convert a raw string <name2> into a normal string
[ m . group ( 0 ) for m in re . finditer ( '(\\d)\\1*'   , <name1> ) ]	split a string <name1> with into all strings of repeated characters
plt . <name2> ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , facecolors = 'none'   )	<name2> a plot with x , y position of np.random.randn(100) and face color equal to none
plt . <name5> ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , 'o'   , mfc = 'none'   )	do a scatter <name5> with empty circles
soup . find ( 'div'   , <name5> = <val2>   ) . decompose ( )	remove a div with a <name5> <val2> using beautifulsoup
df [ df [ <val4>   ] . str . contains ( <val3>   ) ]	filter rows containing key word <val3> in column <val4>
<name1> . reset_index ( <name5> = <val3> , inplace = True )	convert index at <name5> <val3> into a column in dataframe <name1>
<name2> [ <val1>   ] = <name2> . index	Add indexes in a data frame <name2> to a column <val1>
df . reset_index ( level = [ 'tick'   , 'obs'   ] )	convert pandas index in a dataframe to columns
[ x [ : : -1 ] for x in b ]	Get reverse of list items from list 'b' using extended slicing
np . <name2> ( [ zip ( x , y ) for x , y <name5> zip ( <name4> , <name3> ) ] )	join each element <name5> <name2> <name4> with element at the same index <name5> <name2> <name3> as <name4> tuple
np . array ( <name6> ( <name2> . ravel ( ) , <name5> . ravel ( ) ) , dtype = 'i4,i4'   ) . reshape ( <name2> . shape )	<name6> two 2 - d arrays <name2> and <name5>
""""" "","" """" . join ( [ str ( i ) for i in <name1> ] )"	convert list <name1> into a comma separated string
requests . <name4> ( url , <name1> = <name2> , headers = HEADERS_DICT , auth = ( <name6> , <name5> ) )	Send a <name4> request with raw <name1> <name2> and basic authentication with <name6> and <name5>
<val6>   . rfind ( <val5>   )	Find last occurrence of character <val5> in string <val6>
print ( [ item for item in [ 1 , 2 , 3 ] ] )	Iterate ove list [1, 2, 3] using list comprehension
[ ( x [ <val4>   ] , x [ <val6>   ] ) for x in <name2> ]	extract all the values with keys <val4> and <val6> from a list of dictionaries <name2> to list of tuples
print ( os . path . splitext ( os . path . basename ( <val1>   ) ) [ 0 ] )	get the filename without the extension from file <val1>
dict ( <name4> [ i : i + 2 ] for i <name1> range ( 0 , len ( <name4> ) , 2 ) )	create a dictionary by adding each two adjacent elements <name1> tuple <name4> as key / value pair to it
values = sum ( [ [ 'A'   , 'B'   , 'C'   ] , [ 'D'   , 'E'   , 'F'   ] , [ 'G'   , 'H'   , 'I'   ] ] , [ ] )	create a list containing flattened list [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]
<name4> = <name4> [ ( <name4> [ <val3>   ] >= <val2> ) &   ( <name4> [ <val3>   ] <= <val5> ) ]	select rows in a dataframe <name4> column <val3> between two values <val2> and <val5>
<name3> . <name6> ( {  <val2>   : <val4>  }  , regex = True )	<name6> all occurences of newlines <val2> with <val4> in dataframe <name3>
<name4> . <name3> ( {  <val6>   : <val2>  }  , regex = True )	<name3> all occurrences of a string <val6> by string <val2> in a pandas data frame <name4>
[ ( x + y ) for x , y <name3> zip ( <name1> , <name1> [ 1 : ] ) ]	create a list containing each two adjacent letters <name3> string <name1> as its elements
<name2> ( map ( <name1> x , y : x + y , <name3> [ : -1 ] , <name3> [ 1 : ] ) )	Get a <name2> of pairs from a string <name3> using <name1> function
print ( re . findall ( '(https?://[^\\s]+)'   , <name4> ) )	extract a url from a string <name4>
print ( re . search ( '(?P<url>https?://[^\\s]+)'   , <name3> ) . group ( 'url'   ) )	extract a url from a string <name3>
re . sub ( '[^A-Za-z0-9]+'   , ''   , <name6> )	remove all special characters , punctuation and spaces from a string <name6> using regex
pd . date_range ( <val3>   , freq = 'WOM-2FRI'   , <name2> = <val4> )	create a DatetimeIndex containing <val4> <name2> of the second friday of each month starting from date <val3>
<name6> = [ [ a , b ] , [ c , d ] , [ e , f ] ]	Create multidimensional array <name6> with 3 rows and 2 columns in python
mystring . <name2> ( ' '   , '_'   )	<name2> spaces with underscore
os . <name6> . abspath ( <val5>   )	get an absolute file <name6> of file <val5>
""""" "" "" """" . join ( <name1> . <name6> ( ) )"	<name6> string <name1> on white spaces
os . path . splitext ( <name5> ) [ 0 ]	get <name5> without extension from file <name5>
[ <name1> ( <name6> [ : <name2> ] ) for <name2> , _ <name4> enumerate ( <name6> ) ]	get a list containing the <name1> of each element <name2> <name4> list <name6> plus the previous elements
""""" <val6> """" . replace ( <val2>   , '/\x00/'   ) . <name5> ( '\x00'   )"	<name5> a string <val6> by <val2> keeping <val2> in the result
np . random . <name3> ( np . transpose ( r ) )	<name3> columns of an numpy array 'r'
df [ <val2>   ] = df [ <val3>   ]	copy all values in a column <val3> to a new column <val2> in a pandas data frame 'df'
list ( data [ 'A'   ] [ <val1>   ] . values ( ) ) [ 0 ] [ 'maindata'   ] [ 0 ] [ 'Info'   ]	find a value within nested json 'data' where the key inside another key <val1> is unknown .
all ( <name2> ( x ) for x in <name5> )	check characters of <name5> <name5> are true predication of function <name2>
os . statvfs ( '/'   ) . f_files - os . statvfs ( '/'   ) . f_ffree	determine number of files on a drive with python
<name1> = [ int ( number ) for number in <name5> . split ( ','   ) ]	convert string <name5> into a list of integers <name1>
[ int ( s ) for s in <name6> . split ( ','   ) ]	Get a list of integers by splitting a string <name6> with comma
<name2> . <name1> ( key = <name3> , reverse = True )	<name1> a list of objects <name2> , based on a function <name3> in descending order
<name5> . sort ( key = lambda x : x . <name2> , <name6> = True )	<name6> list <name5> based on the <name2> attribute of each object
<name1> . <name6> ( key = lambda x : x . <name4> , <name2> = True )	<name6> a list of objects <name1> in <name2> order by their <name4> property
driver . find_element_by_partial_link_text ( <val5>   ) . <name3> ( )	<name3> a href button <val5> with selenium
driver . findElement ( By . linkText ( <val4>   ) ) . <name2> ( )	<name2> a href button having text <val4> with selenium
driver . find_element_by_link_text ( <val6>   ) . <name4> ( )	<name4> a href button with text <val6> with selenium
<val2>     + str ( <name4> )	cast an int <name4> to a string and concat to string <val2>
open ( <val4>   , 'w'   ) . write ( <val6>     + open ( <val2>   ) . read ( ) )	prepend the line <val6> to the contents of file <val2> and save as the file <val4>
<name6> . <name1> ( key = lambda t : len ( t [ 1 ] ) , reverse = True )	<name1> a list <name6> by length of value in tuple
re . findall ( '\\b(\\w+)d\\b'   , <name6> )	split string <name6> by words that ends with 'd'
bool ( re . search ( <val6>   , <val4>   ) )	return True if string <val4> contains regex <val6>
<name6> ( set ( <name1> ) )	Removing duplicates in <name6> <name1>
<name4> ( set ( <name1> ) )	Removing duplicates in <name4> <name1>
<name5> ( OrderedDict . fromkeys ( <val4>   ) )	Removing duplicates in <name5> <val4>
numpy . <name4> ( <name5> ) . reshape ( -1 ) . tolist ( )	Convert <name4> <name5> into <name5> list
<name6> . array ( <name3> ) [ 0 ] . tolist ( )	Convert the first row of <name6> matrix <name3> to <name3> list
print ( <name2> . find ( <name1> = <val6>   ) . findNext ( <val3>   ) . contents [ 0 ] )	In <name2> , get the content of the sibling of the <val3> tag with <name1> content <val6>
""""" "" "" """" . join ( [ ( '%d@%d'     % t ) for t <name5> <name6> ] )"	convert elements of each tuple <name5> list <name6> into a string separated by character @
""""" "" "" """" . join ( [ ( '%d@%d'     % ( t [ 0 ] , t [ 1 ] ) ) for t <name4> <name6> ] )"	convert each tuple <name4> list <name6> to a string with '@' separating the tuples '  elements
<name4> . execute_script ( 'return document.documentElement.outerHTML;'   )	get the html from the current web page of a Selenium <name4>
[ i for i <name6> <name5> if re . search ( <val1>   , i ) ]	Get all matches with regex pattern <val1> <name6> list of string <name5>
<name2> [ <val5>   ] [ ( <name2> [ <val6>   ] >   <val1> ) &   ( <name2> [ <val4>   ] == <val3> ) ]	select values from column <val5> for which corresponding values in column <val6> will be greater than <val1> , and in column <val4> - equal <val3> in dataframe <name2>
sorted ( <name3> . <name5> ( ) )	Sort dictionary <name3> in ascending order based on its keys and <name5>
<name5> ( <name4> )	get <name5> list of keys of dict <name4>
int ( <val3>   )	convert string <val3> into integer
int ( )	function to convert strings into integers
T2 = [ map ( int , x ) for x <name1> <name4> ]	convert items <name1> <name4> to integers
<name1> . <name4> ( [ <val6>   ] )	<name4> a shell script <val6> using <name1>
<name5> . <name2> ( [ <val3>   ] )	<name2> a shell script <val3> using <name5>
[ val for pair in zip ( <name3> , <name6> ) for val in pair ]	combine lists <name3> and <name6> by alternating their elements
encoded = base64 . b64encode ( <val3>   )	encode string <val3>
encoded = <val5>   . <name3> ( <val4>   )	<name3> a string <val5> to <val4> encoding
lol = <name1> ( csv . reader ( open ( <val3>   , 'rb'   ) , delimiter = '\t'   ) )	parse tab - delimited CSV file <val3> into a <name1>
getattr ( <name2> , <name1> )	Get attribute <name1> of object <name2>
print ( <name3> ( zip ( <name1> [ 0 ] , zip ( * [ <name4> ( d . values ( ) ) for d in <name1> ] ) ) ) )	group a <name4> of dicts <name1> into one <name3> by key
d = ast . literal_eval ( <val1> )	convert unicode string u <val1> into dictionary
[ word for word <name3> <name1> . split ( ) if word . startswith ( <val4>   ) ]	find all words <name3> a string <name1> that start with the <val4> sign
<name5> = re . sub ( '^https?:\\/\\/.*[\\r\\n]*'   , ''   , <name5> , flags = re . MULTILINE )	remove any url within string <name5>
np . where ( np . in1d ( <name4> , [ 1 , 3 , 4 ] ) . reshape ( <name4> . shape ) , <name4> , 0 )	replace all elements in array <name4> that are not present in array [1, 3, 4] with zeros
np . <name3> ( <name6> , axis = 1 )	calculate <name3> across dimension in <name6> 2 d array <name6>
subprocess . call ( [ '/usr/bin/Rscript'   , '--vanilla'   , <val3>   ] )	running r script <val3> from python
subprocess . call ( <val6>   , shell = True )	run r script <val6>
writer . writeheader ( )	add a header to a csv file
<name6> . fillna ( <name6> . mean ( axis = 1 ) , axis = 1 )	replacing nan in the dataframe <name6> with row average
time . strftime ( <val2>   , time . localtime ( 1347517370 ) )	Convert unix timestamp '1347517370' to formatted string <val2>
super ( <name2> , cls ) . <name4> ( <name3> )	Call <name3> base class ' s class method <name4> from derived class <name2>
a [ np . <name1> ( ( a [ : , ( <val4> ) ] == <val4> ) * ( a [ : , ( <val2> ) ] == <val2> ) ) ]	selecting rows in Numpy ndarray 'a' , <name1> the value in the first column is <val4> and value in the second column is <val2>
re . split ( ' +'   , 'hello world sample text'   )	separate words delimited by one or more spaces into a list
len ( max ( <name6> , key = len ) )	length of longest element in list <name6>
<name5> [ 0 ] [ <val3>   ]	get the value associated with unicode key <val3> of first dictionary in list <name5>
[ <name6> . split ( ) for <name6> in open ( <val3>   ) ]	Retrieve each <name6> from a file <val3> as a list
res = dict ( ( v , k ) for k , v <name5> <name2> . items ( ) )	swap keys with values <name5> <name2> dictionary <name2>
new_file = open ( <val5>   , 'w'   )	Open a file <val5> in write mode
<name4> ( <name6> . startswith ( <val2>   ) for <name6> <name5> <name3> )	Check if <name4> <name6> <name5> the dictionary <name3> starts with the string <val2>
[ value for <name4> , value in <name5> ( <name3> . items ( ) ) if <name4> . startswith ( <val1>   ) ]	create <name5> of values from dictionary <name3> that have a <name4> that starts with <val1>
pd . DataFrame ( {  <val6>   : <name2> . index , <val3>   : <name2> . values }  )	convert a pandas series <name2> into a pandas dataframe df with columns <val6> and <val3>
<name5> ( <val4>   . join ( map ( str , <name2> ) ) )	<name5> elements of <name2> <name2> seperated by tabs <val4>
<name2> ( <val6>   . encode ( 'raw_unicode_escape'   ) )	<name2> unicode string <val6> with utf -8
<val4>   . encode ( 'latin-1'   ) . decode ( 'utf-8'   )	Encode a latin character in string <val4> properly
<name5> = <name5> . resize ( ( x , y ) , Image . <name4> )	resized <name5> <name5> to width , height of (x, y) with filter of <name4>
re . findall ( 'n(?<=[^n]n)n+(?=[^n])(?i)'   , <name2> )	"regex , find ""n"" <name2> only in the middle of string <name2>"
print ( '{0:.0f}%'   . format ( 1.0 / 3 * 100 ) )	display the float 1/3*100 as a percentage
<name4> . <name5> ( <name1> = lambda x : x [ <val6>   ] )	<name5> a list of dictionary <name4> by the <name1> <val6>
<name1> . <name5> ( key = lambda x : x [ <val3>   ] )	<name5> a list <name1> of dicts by dict value <val3>
l . <name3> ( key = lambda x : ( x [ <val4>   ] , x [ <val5>   ] , x [ <val2>   ] ) )	<name3> a list of dictionaries by the value of keys <val4> , <val5> , <val2> in ascending order .
heapq . nlargest ( <val5> , range ( len ( <name2> ) ) , key = lambda i : abs ( <name2> [ i ] - <name3> [ i ] ) )	find <val5> largest differences between each respective elements of list <name2> and list <name3>
<name1> . find_all ( <val3>   , {  'class'   : <val4>  }  )	BeautifulSoup find all <val3> elements in HTML string <name1> with class of <val4>
<name6> . to_sql ( <val4>   , engine , <name5> = <val1>   )	write records in dataframe <name6> to table <val4> in <name5> <val1>
<name5> = re . sub ( '[^(){}[\\]]'   , ''   , <name3> )	Extract <name5> from string <name3>
<name1> ( dict ( ( x [ 0 ] , x ) for x in L ) . values ( ) )	remove duplicate elements from <name1> 'L'
[ line . rstrip ( '\n'   ) for line in <name5> ]	read a <name5> <name5> without newlines
[ i for ( i , x ) <name3> enumerate ( <name5> ) if ( x == <val4> ) ]	get the position of item <val4> <name3> <name5>
[ i for ( i , x ) <name6> enumerate ( <name4> ) if ( x == <val2> ) ]	get the position of item <val2> <name6> <name4>
print ( <name3> . index ( <name4> ) )	get the position of item <name4> in list <name3>
max ( <name4> , key = lambda item : item [ 1 ] ) [ 0 ]	find the first element of the tuple with the maximum second element in a list of tuples <name4>
max ( <name2> , key = itemgetter ( <val4> ) ) [ <val1> ]	get the item at index <val1> from the tuple that has maximum value at index <val4> in list <name2>
time . sleep ( <val3> )	Make a delay of <val3> second
""""" "", "" """" . join ( '('     + ', '   . join ( i ) + ')'     for i in <name5> )"	convert list of tuples <name5> to a string
<name4> = models . CharField ( max_length = 7 , <name1> = <val3>   , editable = False )	Django set <name1> value of field <name4> equal to <val3>
sorted ( <name5> , lambda x : ( degree ( x ) , x ) )	Sort lis <name5> in ascending order based on the degrees value of its elements
( n for n in [ 1 , 2 , 3 , 5 ] )	convert a list into a generator object
newlist = [ v for i , v <name2> enumerate ( <name1> ) if i not <name2> <name5> ]	remove elements from list <name1> that have an index number mentioned <name2> list <name5>
f = open ( <val6>   , 'w'   )	Open a file <val6> in write mode
getattr ( <name1> , <val4>   )	get attribute <val4> from object <name1>
map ( lambda a : a [ 0 ] , ( ( 'aa'   , ) , ( 'bb'   , ) , ( 'cc'   , ) ) )	convert tuple of tuples (('aa',), ('bb',), ('cc',)) to list in one line
zip ( * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) ] )	unzip the list [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
zip ( * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) ] )	unzip the list [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
result = ( [ a for ( a , b ) in <name5> ] , [ b for ( a , b ) in <name5> ] )	unzip list <name5>
result = ( ( <name3> for ( <name3> , b ) in <name2> ) , ( b for ( <name3> , b ) in <name2> ) )	unzip list <name2> and return <name3> generator
zip ( * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) , ( 'e'   , ) ] )	unzip list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]
map ( <name6> , * [ ( 'a'   , 1 ) , ( 'b'   , 2 ) , ( 'c'   , 3 ) , ( 'd'   , 4 ) , ( 'e'   , ) ] )	unzip list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )] and fill empty results with <name6>
json . dumps ( Decimal ( '3.9'   ) )	encode Decimal('3.9') to a JSON string
<name4> [ <val1>   ] = <val6>	Add key <val1> to dictionary <name4> with value <val6>
<name5> . update ( {  <val2>   : <val1> , }  )	Add key <val2> to dictionary <name5> with value <val1>
<name5> . update ( dict ( a = <val3> ) )	Add key 'a' to dictionary <name5> with value <val3>
<name1> . update ( a = <val2> )	Add key 'a' to dictionary <name1> with value <val2>
max ( [ max ( i ) for i <name6> <name5> ] )	find maximal value <name6> <name5> <name5>
<name2> = str ( round ( <name2> , <val1> ) )	Round number <name2> to <val1> precision after the decimal point
<name2> = re . findall ( '[0-9]+(?:\\.[0-9]+){3}'   , s )	extract <name2> address from an html string
<name5> . groupby ( <val6>   ) . <name2> ( lambda x : len ( x ) >   1 )	<name2> dataframe <name5> by values in column <val6> that appear more than once
[ x for x <name5> <name3> . splitlines ( ) if x != ''   ]	append each line <name5> file <name3> into a list
<name4> = map ( int , open ( <val6>   ) . readlines ( ) )	Get a list of integers <name4> from a file <val6>
<name3> . colorbar ( <name2> = <name2> , cax = ax3 )	add color bar with image <name2> to plot <name3>
Counter ( ' '   . join ( <name2> [ <val4>   ] ) . split ( ) ) . most_common ( <val1> )	count most frequent <val1> words in column <val4> of dataframe <name2>
list ( itertools . combinations ( ( 1 , <val4> , 3 ) , <val4> ) )	generate all <val4> - element subsets of tuple (1, 2, 3)
<name3> . now ( pytz . utc )	get a value of <name3> .today ( ) in the UTC time zone
<name2> = [ x for x in <name1> if x != [ ] ]	Get a new list <name2> by removing empty list from a list of lists <name1>
<name3> = [ x for x in <name1> if x ]	Create <name3> to contain the lists from list <name1> excluding the empty lists from <name1>
return HttpResponse ( <name3> , mimetype = 'application/json'   )	Django response with JSON <name3>
re . findall ( '(.*?)\\[.*?\\]'   , <name3> )	get all text that is not enclosed within square brackets in string <name3>
re . findall ( '(.*?)(?:\\[.*?\\]|$)'   , <name6> )	Use a regex to get all text in a string <name6> that is not surrounded by square brackets
re . findall ( '\\(.+?\\)|\\w'   , <val4>   )	get whatever is between parentheses as a single match , and any char outside as an individual match in string <val4>
re . findall ( <val4>   , <val2>   )	match regex <val4> with string <val2>
re . findall ( '\\(.*?\\)|\\w'   , <val4>   )	match multiple regex patterns with the alternation operator | in a string <val4>
<name2> = [ <val1>   . format ( element ) for element in <name2> ]	formate each string cin list <name2> into pattern <val1>
subprocess . Popen ( [ <val6>   , <val1>   ] )	Open a background process <val6> with arguments <val1>
[ mydict [ x ] for x in mykeys ]	get list of values from dictionary 'mydict' w .r .t . list of keys 'mykeys'
dict ( [ ( 'Name'   , 'Joe'   ) , ( 'Age'   , 22 ) ] )	convert list [('Name', 'Joe'), ('Age', 22)] into a dictionary
<name1> . reshape ( -1 , j ) . mean ( axis = 1 ) . reshape ( <name1> . shape [ 0 ] , -1 )	average each two columns of array <name1>
re . <name2> ( '(\\W+)'   , s )	<name2> a string into a list of words and whitespace
{  i [ 1 ] : i [ 0 ] for i <name1> list ( <name6> . items ( ) ) }	reverse the keys and values <name1> a dictionary <name6>
[ i for i , j <name2> enumerate ( myList ) if <val3>     <name2> j . lower ( ) or <val1>     <name2> j . lower ( ) ]	finding the index of elements containing substring <val3> and <val1> <name2> a list of strings 'myList' .
isinstance ( <name1> , str )	check if object <name1> is a string
isinstance ( <name2> , str )	check if object <name2> is a string
( type ( <name5> ) <name4> str )	check if object <name5> <name4> a string
isinstance ( <name4> , str )	check if object <name4> is a string
isinstance ( <name2> , str )	check if <name2> is a string
<name1> . extend ( <name2> )	append list <name2> to <name1>
<name6> . extend ( <name4> )	append list <name4> to <name6>
<name2> . extend ( <name3> )	append list <name3> to <name2>
<name6> . <name2> ( ( <name5> [ 0 ] [ 0 ] , <name5> [ 0 ] [ 2 ] ) )	<name2> <name5> tuple of elements from list <name5> with indexes '[0][0] [0][2]' to list <name6>
app . <name4> [ <val2>   ] = 'Your_secret_string'	Initialize <val2> in flask <name4> with Your_secret_string 
pd . <name6> ( out . tolist ( ) , columns = [ <val2>   , <val5>   ] , index = out . index )	unpack a series of tuples in pandas into a <name6> with column names <val2> and <val5>
[ x for x <name3> range ( len ( <name4> ) ) if <name4> [ x ] == <val5>   ]	find the index of an element <val5> <name3> a list <name4>
<name2> . set_xticklabels ( <name5> , rotation = <val3> )	rotate the xtick <name5> of matplotlib plot <name2> by <val3> degrees to make long <name5> readable
re . sub ( '[^\\w]'   , ' '   , <name6> )	remove symbols from a string <name6>
os . path . basename ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	Get the current directory of a script
re . <name4> ( <val6>   , <name2> )	<name4> string <name2> based on occurrences of regex pattern <val6>
re . split ( '[ ](?=[A-Z])'   , <name6> )	Split string <name6> at every space followed by an upper - case letter
r = requests . post ( <name1> , <name5> = <name5> , <name6> = <name6> , <name3> = <name3> )	send multipart encoded file <name5> to <name1> <name1> with <name6> <name6> and metadata <name3>
open ( <val3>   , 'wb'   ) . <name4> ( <name1> )	<name4> bytes <name1> to a file <val3> in python 3
[ <name2> [ k ] for k in <name6> ]	get a list from a list <name6> with values mapped into a dictionary <name2>
<name1> . set_index ( <val3>   ) . index . get_duplicates ( )	find duplicate names in column <val3> of the dataframe <name1>
round ( <val3> , <val6> )	truncate float <val3> to <val6> decimal places
sorted ( <name1> , key = lambda x : datetime . strptime ( x [ 1 ] , '%d/%m/%Y'   ) , reverse = True )	sort list <name1> in descending order based on the date value in second element of each list in list <name1>
<name4> . set_rlabel_position ( <val5> )	place the radial ticks in plot <name4> at <val5> degrees
os . <name5> . isabs ( <name6> )	check if <name5> <name6> is an absolute <name5>
len ( list ( <name5> . <name2> ( ) ) )	get number of <name2> in dictionary <name5>
len ( set ( open ( <name3> ) . read ( ) . split ( ) ) )	count the number of keys in dictionary <name3>
df . groupby ( <val6>   ) . <name5> ( )	pandas dataframe get <name5> row of each group by <val6>
pd . concat ( [ df [ 0 ] . apply ( pd . Series ) , df [ 1 ] ] , axis = 1 )	split a list in first column into multiple columns keeping other columns as well in pandas data frame
re . findall ( <val3>   , <name1> )	extract attributes <val3> from string <name1>
sum ( int ( float ( item ) ) for item <name1> [ _f for _f <name1> [ ''   , '3.4'   , ''   , ''   , '1.0'   ] if _f ] )	Sum integers contained <name1> strings <name1> list ['', '3.4', '', '', '1.0']
<name2> . Popen ( [ <val3>   ] )	Call a <name2> with arguments <val3> that may contain spaces
<name6> . put ( ( - n , n ) )	reverse a priority queue <name6> in python without using classes
<name5> [ <val1>   ] . plot ( kind = 'bar'   , <name4> = [ 'r'   , 'g'   , 'b'   , 'r'   , 'g'   , 'b'   , 'r'   ] )	make a barplot of data in column <val1> of dataframe <name5> colour - coded according to list <name4>
re . findall ( <val2>   , <name1> )	find all matches of regex pattern <val2> in string <name1>
len ( <name1> )	Get the length of list <name1>
len ( <name4> )	Getting the length of array <name4>
len ( <name6> )	Getting the length of array <name6>
len ( <name1> )	Getting the length of <name1>
len ( <name3> )	Getting the length of <name3>
""""" <val2> """" . decode ( 'string_escape'   )"	remove escape character from string <val2>
""""" <val6> """" . <name2> ( <val4>   , '%temp%'   ) . <name2> ( <val5>   , <val4>   ) . <name2> ( '%temp%'   , <val5>   )"	<name2> each <val4> with <val5> and each <val5> with <val4> in the string <val6> in a single pass .
shutil . rmtree ( <val4>   )	remove directory tree <val4>
<name5> [ <val1>   ] = <name5> [ <val4>   ] . apply ( lambda x : x . weekday ( ) )	create a new column <val1> in pandas <name5> frame <name5> based on the values in column <val4>
sorted ( <name1> , key = <name1> . get , <name5> = True )	<name5> sort Counter <name1> by values
sorted ( list ( <name3> . items ( ) ) , key = lambda pair : pair [ 1 ] , <name1> = True )	<name1> sort counter <name3> by value
np . vstack ( ( <name6> , b ) )	append <name6> numpy array 'b' to <name6> numpy array 'a'
print ( <name5> ( ( <name2> , <name1> ) , <name3> = 0 ) )	numpy <name5> two arrays <name2> and <name1> along the first <name3>
print ( <name4> ( ( <name2> , <name5> ) , <name3> = 1 ) )	numpy <name4> two arrays <name2> and <name5> along the second <name3>
c = np . r_ [ ( <name1> [ None , : ] , <name3> [ None , : ] ) ]	numpy concatenate two arrays <name1> and <name3> along the first axis
np . array ( ( <name3> , <name4> ) )	numpy concatenate two arrays <name3> and <name4> along the first axis
print ( socket . getaddrinfo ( <val2>   , <val3> ) )	fetch address information for host <val2> ion port <val3>
<name4> . xs ( <val1>   , level = <val6>   , drop_level = False )	add a column <val6> with value <val1> to dataframe <name4>
<name5> HttpResponse ( 'Unauthorized'   , status = <val1> )	<name5> a <val1> unauthorized in django
<name6> ( __name__ , template_folder = <val3>   )	<name6> set folder <val3> as the default template folder
session . execute ( 'INSERT INTO t1 (SELECT * FROM t2)'   )	How do I INSERT INTO t1 ( SELECT * FROM t2 ) in SQLAlchemy ?
c2 . <name4> ( key = lambda <name5> : <name5> [ 2 ] )	<name4> a list of lists 'c2' such that third <name5> comes first
<name4> . rc ( 'font'   , ** {  'sans-serif'   : <val1>   , 'family'   : 'sans-serif'  }  )	set font <val1> to display non - ascii characters in <name4>
df [ <val6>   ] . apply ( lambda x : x . toordinal ( ) )	Convert DateTime column <val6> of pandas dataframe 'df' to ordinal
<name3> . get_attribute ( 'innerHTML'   )	get html source of Selenium WebElement <name3>
df . index . get_loc ( <val1>   )	Get the integer location of a key <val1> in a pandas data frame
"os . system ( 'gnome-terminal -e \'bash -c ""sudo apt-get update; exec bash""\''   )"	open a 'gnome' terminal from python script and run 'sudo apt-get update' command .
<name4> . update ( {  <val2>   : <val3> }  )	add an item with key <val2> and value <val3> to an dictionary <name4>
my_list = [ ]	declare an array
<name2> . append ( <val5> )	Insert item <val5> to a list <name2>
<name3> . insert ( 0 , <val2>   )	add an entry <val2> at the beginning of list <name3>
""""" ""\\xF3\\xBE\\x80\\x80"" """" . replace ( '\\x'   , ''   ) . decode ( 'hex'   )"	convert a hex - string representation to actual bytes
<name4> [ <name4> . columns [ -1 ] ]	select the last column of dataframe <name4>
<name1> . loc [ <name1> [ <val2>   ] == <val5>   , <val2>   ] . values [ 0 ]	get the first value from dataframe <name1> where column <val2> is equal to <val5>
np . column_stack ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )	converting two lists [1, 2, 3] and [4, 5, 6] into a matrix
<name1> ( <name2> )	get the <name1> of <name2>
<name5> ( <name2> )	determine the <name5> of variable <name2>
<name4> ( <name3> )	determine the <name4> of variable <name3>
<name6> ( <name4> )	determine the <name6> of variable <name4>
<name4> ( <name5> )	determine the <name4> of variable <name5>
print ( <name3> ( <name5> ) )	get the <name3> of variable <name5>
next ( itertools . islice ( range ( 10 ) , <val2> , <val2> + 1 ) )	get the <val2> th item of a generator
""""" <val4> """" . <name6> ( <name3> )"	<name6> a <name3> of strings <name3> using a space <val4>
<name4> = [ [ ] for n in range ( 2 ) ]	create list <name4> containing two empty lists
<name5> = [ line . strip ( ) for line in open ( <val3>   , 'r'   ) ]	read a file <val3> into a list <name5>
""""" """" """" . join ( [ char for char <name3> <val6>     if char != <val4>   ] )"	delete all occurrences of character <val4> <name3> string <val6>
re . sub ( <val6>   , ''   , <val2>   )	delete all instances of a character <val6> in a string <val2>
""""" <val5> """" . replace ( <val1>   , ''   )"	delete all characters <val1> in string <val5>
<name4> . dropna ( subset = [ 1 ] )	"Drop rows of pandas dataframe <name4> having NaN in column at index ""1"""
[ x for x in <name4> if x . <name6> == <val2> ]	get elements from list <name4> , that have a field <name6> value <val2>
<name1> = [ int ( x ) for x in <name6> ]	converting list of strings <name6> to list of integer <name1>
map ( int , eval ( input ( 'Enter the unfriendly numbers: '   ) ) )	convert list of string numbers into list of integers
sys . stdout . write ( <val2>   )	print <val2> without newline
<name5> ( <name2> ( 2.51 * 100 ) )	<name2> off the float that is the product of 2.52 * 100 and convert it to an <name5>
<name6> . <name3> ( <name5> = False )	<name3> dataframe <name6> without a <name5>
generator = iter_iprange ( '192.168.1.1'   , '192.168.255.255'   , step = 1 )	"loop through the IP address range ""192.168.x.x"""
sum ( 1 << i <name1> i , b <name4> enumerate ( <name5> ) if b )	Sum the corresponding decimal values <name1> binary values of each boolean element <name4> list <name5>
<name1> . <name3> ( '%r\n%r\n%r\n'     % ( <name2> , <name5> , <name4> ) )	<name3> multiple strings <name2> , <name5> and <name4> in one line in a file <name1>
[ y for x in <name4> for y in ( x if isinstance ( x , <name1> ) else [ x ] ) ]	Convert <name1> of lists <name4> into a flat <name1>
print ( <val4>   . encode ( 'string_escape'   ) )	Print new line character as \n in a string <val4>
""""" """" """" . join ( <name2> . rsplit ( <val1>   , 1 ) )"	remove last comma character <val1> in string <name2>
( <name4> [ 1 : ] + <name4> [ : -1 ] ) / 2	calculate the mean of each element in array <name4> with the element previous to it
<name6> [ : -1 ] + ( <name6> [ 1 : ] - <name6> [ : -1 ] ) / 2	get an array of the mean of each two consecutive values in numpy array <name6>
<name1> = <name3> . fromiter ( codecs . open ( <val2>   , encoding = <val4>   ) , dtype = '<U2'   )	load data containing <val4> from file <val2> into <name3> array <name1>
<name5> = sorted ( <name5> , <name4> = itemgetter ( <val3>   ) , <name1> = True )	<name1> sort list of dicts <name5> by value for <name4> <val3>
<name2> = sorted ( <name2> , <name1> = lambda <name6> : <name6> [ <val5>   ] , reverse = True )	Sort <name6> list of dictionary <name2> based on <name1> <val5> in descending order
<name6> . loc [ <name6> [ 0 ] . str . contains ( <val4>   ) ]	get rows of dataframe <name6> that match regex <val4>
re . search ( '\\[(.*)\\]'   , <name1> ) . group ( 1 )	"find the string in <name1> between two special characters ""["" and ""]"""
""""" <val6> """" . <name1> ( <val2>   )"	<name1> number of times string <val2> occurred in string <val6>
<name3> . loads ( request . body )	decode <name3> string request.body to python dict
urllib . request . urlretrieve ( <name5> , <name4> )	download the file from <name5> <name5> and save it under file <name4>
<name2> . <name4> ( )	<name4> string <name2> by space
<name5> . <name4> ( <val6>   )	<name4> string <name5> by <val6>
<name6> . split ( )	Split string <name6> into a list by whitespace
[ re . sub ( '(?<!\\d)\\.(?!\\d)'   , <val4>   , i ) for i <name6> <name1> ]	replace dot characters '.' associated with ascii letters <name6> list <name1> with space <val4>
sorted ( <name2> , key = lambda <name3> : <name3> . split ( ','   ) [ 1 ] )	sort list <name2> based on second index of each string <name3>
subprocess . check_call ( 'vasp | tee tee_output'   , shell = True )	call multiple bash function ‘ vasp ’  and ‘ tee tee_output ’  using ‘|’
[ element for element in <name1> if isinstance ( element , int ) ]	eliminate all strings from list <name1>
[ element for element in lst if not isinstance ( element , str ) ]	get all the elements except strings from the list 'lst' .
newlist = sorted ( <name3> , <name1> = lambda k : k [ <val5>   ] )	Sort a list of dictionaries <name3> by the value of the dictionary <name1> <val5>
newlist = sorted ( <name1> , <name5> = itemgetter ( <val6>   ) , reverse = True )	sort a list of dictionaries <name1> by values in <name5> <val6> in descending order
""""" <val2> """" . <name1> ( <name5> [ <val3>   ] )"	<name1> together with <val2> elements inside a list indexed with <val3> within a dictionary <name5>
""""" """" """" . join ( [ 'A'   , 'B'   , 'C'   , 'D'   ] )"	concatenate array of strings ['A', 'B', 'C', 'D'] into a string
<name3> . load ( urllib . request . urlopen ( <val1>   ) )	get <name3> data from restful service <val1>
[ x for x in <name6> if not x . startswith ( <val4>   ) and not x . startswith ( <val5>   ) ]	Remove all strings from a list a strings <name6> where the values starts with <val4> or <val5>
Entry . objects . <name6> ( pub_date__contains = '08:00'   )	django <name6> by hour
<name6> . <name3> ( <name4> = lambda item : ( item [ <val5>   ] , item [ <val2>   ] ) )	<name3> a <name6> of dictionary <name6> first by <name4> <val5> and then by <val2>
( t - <name1> . <name1> ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <name1> object (1970, 1, 1) to seconds
re . sub ( '(\\_a)?\\.([^\\.]*)$'   , '_suff.\\2'   , <val6>   )	insert _suff before the file extension in <val6> or replace _a with suff if it precedes the extension .
struct . unpack ( 'H'   , struct . pack ( 'h'   , <name5> ) )	Convert integer <name5> into an unassigned integer
<name6> = [ <name5> ( x ) for x <name4> <name6> ]	convert int values <name4> list <name6> to <name5>
<name2> . to_csv ( filename , <name5> = False )	write dataframe <name2> , excluding <name5> , to a csv file
<name1> = <name2> . loads ( <name6> )	convert a urllib unquoted string <name6> to a <name2> data <name1>
[ chr ( i ) for i in range ( 127 ) ]	Create a list containing all ascii characters as its elements
<name2> . <name1> ( struct . pack ( '5B'   , * <name5> ) )	<name1> <name5> to a binary file <name2>
re . sub ( '^[A-Z0-9]*(?![a-z])'   , ''   , <name5> )	python regex - check for a capital letter with a following lowercase in <name5> <name5>
list ( <name5> . keys ( ) ) [ -1 ]	get the last key of dictionary <name5>
print ( <val6>   , <name5> = <name4> )	write line <val6> to <name5> <name4>
<name4> . encode ( 'iso-8859-15'   )	convert unicode string <name4> to ascii
<name4> . objects . filter ( group = group ) . order_by ( '-added'   ) [ 0 ]	Django get maximum value associated with field 'added' in model <name4>
re . findall ( 'Test([0-9.]*[0-9]+)'   , <name4> )	Find all numbers and dots from a string <name4> using regex
re . findall ( 'Test([\\d.]*\\d+)'   , text )	python regex to find all numbers and dots from 'text'
os . system ( <val1>   , <val2>   )	execute script <val2> using <val1> shell
<name1> . sort ( key = lambda x : x [ 1 ] [ 2 ] )	Sort a list of tuples <name1> by third item in the tuple
<name2> ( <name5> . get_range ( ) . get_keys ( ) )	get a <name2> of all keys in Cassandra database <name5> with pycassa
<name1> . <name1> . now ( )	create a <name1> with the current date &  time
next ( i for i , x in enumerate ( <name6> ) <name3> not isinstance ( x , bool ) and x == <val1> )	get the index of an integer <val1> from a list <name6> <name3> the list also contains boolean items
<name2> [ : ] = [ ( x - <val6> ) for x <name1> <name2> ]	subtract <val6> from every number <name1> <name2> list <name2>
<name4> . choice ( os . listdir ( '  <name2> : \\'  ) )	choose a <name4> file from the directory contents of the <name2> drive , C:\\
max ( <name2> . min ( ) , <name2> . max ( ) , key = abs )	get the highest element in absolute value in a numpy matrix <name2>
<name1> . replace ( <val5>   , '! !'   ) . <name2> ( '!'   )	<name2> a string <name1> considering the spaces <val5>
<name5> ( <name6> , <val1>   )	<name5> file <name6> with mode <val1>
[ [ <name4> ( item ) for item <name5> zip ( * items ) ] for items <name5> zip ( * <name6> ) ]	<name4> elements at the same index <name5> list <name6>
<name5> [ : , ( np . newaxis ) ]	add <name5> new axis to array <name5>
sum ( d * 10 ** i for i , d in enumerate ( x [ : : -1 ] ) )	Concatenate elements of a list 'x' of multiple integers to a single integer
r = int ( ''   . join ( map ( str , x ) ) )	convert a list of integers into a single integer
datetime . strptime ( '2010-11-13 10:33:54.227806'   , <val5>   )	convert a DateTime string back to a DateTime object of format <val5>
[ ( i , sum ( j ) / len ( j ) ) <name6> i , j <name2> <name1> ( <name5> . items ( ) ) ]	get the average of a <name1> values <name6> each key <name2> dictionary <name5> )
<name1> ( [ 1 , 2 ] , [ 3 , 4 ] )	<name1> two lists [1, 2] and [3, 4] into a list of two tuples containing elements at the same index in each list
[ 'hello{0}'   . format ( i ) for i <name4> a ]	prepend string 'hello' to all items <name4> list 'a'
re . sub ( '(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)'   , '\\1'   , <name5> )	regex for repeating words in a string <name5>
<name5> . div ( <name5> . sum ( axis = 1 ) , axis = 0 )	normalize a pandas dataframe <name5> by row
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , <name1> )	swap values in a tuple / list inside a list <name1>
[ ( t [ 1 ] , t [ 0 ] ) for t <name2> <name1> ]	Swap values <name2> a tuple / list <name2> list <name1>
re . findall ( <val1>   , <name6> )	find all occurrences of the pattern <val1> within <name6>
print ( list ( itertools . <name1> ( {  1 , 2 , <val2> , 4 }  , <val2> ) ) )	generate the <name1> of <val2> from a set {1, 2, 3, 4}
<name2> [ [ <val5>   , <val1>   , <val6>   ] ] = <name2> . apply ( <name3> , axis = 1 )	add multiple columns <val5> , <val1> , <val6> to pandas data frame <name2> from lambda function <name3>
soup . find_all ( <val4>   , <name5> = <val2>   )	BeautifulSoup search <name5> <val2> inside tag <val4>
<name3> . strftime ( <val4>   )	Convert a datetime object <name3> into readable format <val4>
<name2> ( ''   . join ( c for c in <name5> if c . isdigit ( ) ) )	parse string <name5> to <name2> when string contains a number
<name2> [ <val4>   ] . update ( {  'class'   : {  'section'   : 5 }}  )	add dictionary {'class': {'section': 5}} to key <val4> of dictionary <name2>
dict ( map ( int , x . split ( ':'   ) ) for x in <name6> . split ( ','   ) )	transforming the string <name6> into dictionary
np . where ( ( <name6> == ( 0 , 1 ) ) . all ( axis = 1 ) )	find rows matching (0,1) in a 2 dimensional numpy array <name6>
dict ( [ [ 'two'   , 2 ] , [ 'one'   , 1 ] ] )	build a dictionary containing the conversion of each list in list [['two', 2], ['one', 1]] to a key / value pair as its items
dict ( zip ( <name4> [ : : 2 ] , <name4> [ 1 : : 2 ] ) )	convert list <name4> to dictionary having each two adjacent elements as key / value pair
<name5> = <val6>	assign float <val6> to variable <name5>
re . findall ( '(([0-9]+)([A-Z]))'   , '20M10000N80M'   )	"separate numbers from characters in string ""30m1000n20m"""
re . findall ( '([0-9]+|[A-Z])'   , <val5>   )	separate numbers and characters in string <val5>
re . findall ( '([0-9]+)([A-Z])'   , <val3>   )	separate numbers and characters in string <val3>
re . compile ( '\\w+'   ) . findall ( <val2>   )	Get a list of words from a string <val2> removing punctuation
<name6> . <name6> . strptime ( <val2>   , '%H:%M'   ) . time ( )	Convert string <val2> into <name6> .time object
requests . get ( <val6>   , verify = False )	request url <val6> without verifying SSL certificates
<name1> [ <name1> != <val5> ]	Extract values not equal to <val5> from numpy array <name1>
new_dict = {  k : v for k , v in zip ( <name2> , <name3> ) }	map two lists <name2> and <name3> into a dictionary
dict ( ( k , v ) for k , v in zip ( <name1> , <name5> ) )	map two lists <name1> and <name5> into a dictionary
dict ( [ ( k , v ) for k , v in zip ( <name2> , <name6> ) ] )	map two lists <name2> and <name6> into a dictionary
m = re . search ( '\\[(\\w+)\\]'   , <name3> )	find the string matches within parenthesis from a string <name3> using regex
<name3> . setsockopt ( SOL_SOCKET , <name2> , 1 )	Enable the <name2> socket option in socket object <name3> to fix the error only one usage of each socket address is normally permitted
<name2> = [ ( a + b ) for a , b <name6> zip ( <name1> , <name4> ) ]	append the sum of each tuple pair <name6> the grouped list <name1> and list <name4> elements to list <name2>
[ ord ( c ) for c in <name1> . decode ( 'hex'   ) ]	converting hex string <name1> to its integer representations
print ( sorted ( <name6> , key = lambda t : ( - t [ 2 ] , t [ 0 ] ) ) )	sort list <name6> by second element of each tuple in ascending and third element of each tuple in descending
[ y for x <name2> <name4> ( <val3> ) for y <name2> [ x , x ] ]	get list of duplicated elements <name2> <name4> of <val3>
<name2> = open ( <val5>   ) . <name1> ( )	<name1> the contents of the file <val5> into <name2>
<name4> [ : ] = [ ( x / <name1> ) for x <name6> <name4> ]	divide each element <name6> list <name4> by integer <name1>
<name3> . <name2> ( ' '   , <val6>   , regex = True )	<name2> white spaces in dataframe <name3> with <val6>
<name2> . <name2> . combine ( <name3> , <name2> . time . min )	convert date <name3> to <name2>
<name2> = str ( <name5> )	convert tuple <name5> to string <name2>
<name2> . ctime ( os . path . getmtime ( <name3> ) )	get modified <name2> of <name3> <name3>
<name3> . ctime ( os . path . getctime ( <name4> ) )	get creation <name3> of <name4> <name4>
t = os . path . getmtime ( <name4> )	get modification time of file <name4>
os . <name5> . getmtime ( <name5> )	get modification time of file <name5>
print ( ( 'last modified: %s'     % <name1> . ctime ( os . path . getmtime ( <name2> ) ) ) )	get modified <name1> of <name2> <name2>
print ( ( 'created: %s'     % <name6> . ctime ( os . path . getctime ( <name4> ) ) ) )	get the creation <name6> of <name4> <name4>
return os . path . getctime ( <name3> )	get the creation time of file <name3>
<name6> . system ( 'TASKKILL /F /IM firefox.exe'   )	execute <name6> command '' TASKKILL / F / IM firefox .exe ''
"return ( x . group ( 0 ) for x in re . finditer ( ""[A-Za-z']+"" , <name1> ) )"	split <name1> <name1> on whitespaces using a generator
""""" "", "" """" . join ( [ <val5>   ] * len ( <name3> ) )"	Unpack each value in list <name3> to its placeholder '%' in string <val5>
print ( re . <name3> ( <val4>   , <val1>   ) . group ( 1 ) )	<name3> regex pattern <val4> with string <val1>
<name5> [ <val3>   ] . str . <name2> ( '\\(.*\\)'   , <val1>   )	<name2> parentheses and all data within it with empty string <val1> in column <val3> of dataframe <name5>
<name1> = [ x for x <name6> <name4> <name2> x [ 0 ] <name6> <name3> ]	create a list <name1> containing elements form list <name4> <name2> first element of list <name4> is <name6> list <name3>
print ( [ ''   . join ( a ) for a <name1> combinations ( [ 'hel'   , 'lo'   , 'bye'   ] , 2 ) ] )	generate all possible string permutations of each two elements <name1> list ['hel', 'lo', 'bye']
[ x for x in <name4> if <val6>     in x [ 2 ] ]	get a list of items form nested list <name4> where third element of each item contains string <val6>
<name1> . sort ( key = lambda x : x [ <val2> ] )	Sort lists in the list <name1> by the element at index <val2> of each list
logging . info ( <val4>   )	Log message <val4> on the root logger .
fig . add_subplot ( 1 , 1 , 1 )	Return a subplot axes positioned by the grid definition 1,1,1 using matpotlib
sorted ( list ( <name3> . items ( ) ) , key = operator . itemgetter ( 1 ) )	Sort dictionary <name3> by value in ascending order
sorted ( <name4> , key = <name4> . get )	Sort dictionary <name4> by value in ascending order
sorted ( <name5> , key = <name5> . get , reverse = True )	Sort dictionary <name5> by value in descending order
sorted ( list ( <name2> . items ( ) ) , key = ( lambda x : x [ 1 ] ) )	Sort dictionary <name2> by value in ascending order
np . einsum ( 'ijk,ikl->ijl'   , <name3> , <name1> )	elementwise product of 3 d arrays <name3> and <name1>
print ( 'I have: {0.price}'   . format ( <name2> ) )	Print a string <name2> with string formatting
<name1> . write ( <val4>   )	Write a comment <val4> to a file object <name1>
<name1> = <name1> [ -1 : ] + <name1> [ : -1 ]	move the last item in list <name1> to the beginning
<name1> . strftime ( <val3>   )	Parse DateTime object <name1> using format <val3>
mixed . replace ( '\r\n'   , '\n'   ) . replace ( '\r'   , '\n'   )	Normalize line ends in a string 'mixed'
os . path . expanduser ( '~user'   )	find the real user home directory using python
T = [ <name6> [ i ] for i in <name4> ]	index a list <name6> with another list <name4>
<name5> = open ( <val3>   ) . read ( ) . split ( )	get a list of <name5> <name5> of a file <val3>
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in <name3> ]	Get a list of lists with summing the values of the second element from each list of lists <name3>
[ sum ( [ x [ 1 ] for x <name4> i ] ) for i <name4> data ]	summing the second item <name4> a list of lists of lists
Article . <name1> . annotate ( like_count = Count ( <val5>   ) ) . order_by ( '-like_count'   )	sort <name1> in Articles in descending order of counts of <val5>
today = datetime . datetime . utcnow ( ) . <name4> ( )	return a DateTime object with the current UTC <name4>
[ ( <name4> * b ) for <name4> , b in zip ( <name6> , <name1> ) ]	create <name4> list containing the multiplication of each elements at the same index of list <name6> and list <name1>
re . findall ( <val6>   , <name5> )	fetch smilies matching regex pattern <val6> in string <name5>
re . <name2> ( <val3>   , <name6> )	<name2> the pattern <val3> to the string <name6>
<name6> = <name3> . dumps ( [ ob . __dict__ for ob in <name2> ] )	convert a list of objects <name2> to <name3> string <name6>
<name1> = [ 0 ] * <name3>	create a list <name1> of <name3> zeros
stringnamehere . <name4> ( 'utf-8'   , 'ignore'   )	<name4> the string 'stringnamehere' to UTF -8
re . findall ( <val6>   , <val3>   )	Match regex pattern <val6> on string <val3>
<name5> . setdefault ( <name6> , [ ] ) . <name1> ( <name4> )	Create a <name6> <name6> if it does not exist in dict <name5> and <name1> element <name4> to <name4> .
<name6> [ np . argmin ( <name6> [ : , ( 1 ) ] ) ]	Get the value of the minimum element in the second column of array <name6>
<name3> . update ( <name6> )	extend dictionary <name3> with key / value pairs of dictionary <name6>
[ {  k : v for k , v in d . items ( ) if k != <val4>  }   for d in <name3> ]	removing key values pairs with key <val4> from a list of dictionaries <name3>
numpy . <name6> . <name6> ( ( <val1> , <val1> ) )	create <val1> by <val1> matrix of <name6> numbers
df [ <val5>   ] = df [ <val2>   ] + df [ <val6>   ]	make new column <val5> in panda dataframe by adding values from other columns <val2> and <val6>
[ value for <name4> , value in <name1> ( <name5> . items ( ) ) if <val2>     in <name4> . lower ( ) ]	create a <name1> of values from the dictionary <name5> that have a <name4> with a case insensitive match to <val2>
sys . <name4> . <name1> ( <val5>   )	<name1> a <name4> <val5> in system <name4>
re . findall ( '\\d+(?=[^[]+$)'   , <name2> )	get all digits in a string <name2> after a '[' character
<name3> . load ( open ( <val2>   , 'rb'   ) )	python <name3> / unpickle a list to / from a file <val2>
<name2> . groupby ( level = <val4>   ) . agg ( lambda x : x . <name5> . get_level_values ( 1 ) . nunique ( ) )	count unique <name5> values in column <val4> in pandas dataframe <name2>
pd . concat ( map ( pd . DataFrame , iter ( <name3> . <name1> ( ) ) ) , keys = list ( <name3> . keys ( ) ) ) . stack ( ) . unstack ( 0 )	Create a pandas dataframe of <name1> from a dictionary <name3> which contains dictionaries of dictionaries
sum ( 1 for i , j in zip ( <name6> , <name3> ) if i != j )	find out the number of non - matched elements at the same index of list <name6> and list <name3>
<name3> = {  ( a . lower ( ) , b ) : v for ( a , b ) , v <name6> list ( <name3> . items ( ) ) }	make all keys lowercase <name6> dictionary <name3>
<name2> . <name1> ( key = lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] )	<name1> list <name2> based on first element of each tuple and by the length of the second element of each tuple
<name5> . strip ( )	trim whitespace in string <name5>
<name1> = <name1> . lstrip ( )	trim whitespace ( including tabs ) in <name1> on the left side
<name3> = <name3> . rstrip ( )	trim whitespace ( including tabs ) in <name3> on the right side
<name6> = <name6> . strip ( <val1>   )	trim characters <val1> in <name6>
print ( re . sub ( '[\\s+]'   , ''   , <name1> ) )	trim whitespaces ( including tabs ) in string <name1>
Task . objects . exclude ( prerequisites__status__in = [ <val1>   , <val5>   , <val2>   ] )	In Django , filter Task.objects based on all entities in [ <val1> , <val5> , <val2> ]
root . configure ( <name1> = 'black'   )	Change <name1> color in Tkinter
<name6> . <name4> ( [ ( key , val ) for key , val in <name2> . items ( ) ] , dtype )	convert dict <name2> to <name6> structured <name4>
pd . concat ( [ <name3> , <name1> . sort_values ( <val4>   ) ] )	Concatenate dataframe <name3> to dataframe <name1> sorted by values of the column <val4>
re . sub ( '(.*)</div>'   , '\\1</bad>'   , <name2> )	replace the last occurence of an expression '</div>' with '</bad>' in a string <name2>
print ( max ( d , key = lambda x : ( d [ x ] [ <val4>   ] , d [ x ] [ <val1>   ] ) ) )	get the maximum of <val4> and <val1> values in a dictionary
Book . <name3> . filter ( author__id = <val2> ) . filter ( author__id = <val4> )	Filter Django <name3> by author with ids <val2> and <val4>
re . compile ( <val1>   , re . IGNORECASE ) . <name2> ( <val3>   )	<name2> string <val3> based on case - insensitive matching using string <val1>
[ sum ( map ( int , s ) ) for s <name5> <name2> . split ( ) ]	get list of sums of neighboring integers <name5> string <name2>
[ i for i in <name5> if <name5> [ i ] == <val4> ]	Get all the keys from dictionary <name5> whose value is <val4>
<name3> . decode ( 'unicode_escape'   )	converting byte string <name3> in unicode string
pd . melt ( <name3> , id_vars = [ 'farm'   , 'fruit'   ] , var_name = <val1>   , value_name = <val6>   )	unpivot first 2 columns into new columns <val1> and <val6> from a pandas dataframe <name3>
default_data [ <val1>   ] = 3	"add key <val1> and value ""3"" to dictionary default_data "
default_data . update ( {  <val5>   : 3 , }  )	"add key <val5> and value ""3"" to dictionary default_data "
<name6> . update ( {  <val2>   : <val1> , <val5>   : <val3> , }  )	add key value pairs <val2> , <val1> and <val5> , <val3> to dictionary <name6>
<name1> [ : <val3> ] + <name1> [ -3 : ]	Get the first and last <val3> elements of list <name1>
<name3> = <name3> . reset_index ( drop = True )	reset index to default in dataframe <name3>
[ <name1> [ <name5> ] . <name3> ( <name6> [ <name5> ] ) for <name5> in range ( <val2> ) ]	For each index <name5> from 0 to <val2> , <name3> the element at index <name5> of list <name6> to the list at index <name5> of list <name1> .
os . <name4> . realpath ( <name4> )	get canonical <name4> of the filename <name4>
set ( L [ 0 ] . f . items ( ) ) . issubset ( set ( a3 . f . items ( ) ) )	check if dictionary L[0].f.items() is in dictionary a3.f.items()
zip ( * np . <name6> ( <name1> == <val2> ) )	find all the indexes in <name1> Numpy 2 D array <name6> the value is <val2>
<name6> . columns = <name6> . columns . get_level_values ( <val2> )	Collapse hierarchical column index to level <val2> in dataframe <name6>
x = scipy . <name1> ( [ 1 , 2 , 3 ] ) . transpose ( )	create a <name1> from a list [1, 2, 3]
<name6> = re . sub ( '(\\bget\\b)'   , '\\1@'   , <name6> )	add character '@' after word 'get' in string <name6>
np . <name1> ( [ np . arange ( <val2> ) , np . arange ( 2 , -1 , -1 ) , np . ones ( ( <val2> , ) ) ] ) . min ( axis = 0 )	get a numpy <name1> that contains the element wise minimum of three <val2> x1 arrays
<name2> [ <val5>   ] = list ( <name3> ( 1 , len ( <name2> ) + 1 ) )	add a column <val5> to dataframe <name2> for index in <name3>
os . environ [ <val4>   ] = '1'	set environment variable <val4> equal to 1
print ( os . environ [ <val2>   ] )	Get a environment variable <val2>
os . environ [ <val6>   ] = <val3>	set environment variable <val6> to <val3>
<name1> . <name3> ( <name5> )	<name3> dictionary <name1> , overwriting values where keys are identical , with contents of dictionary <name5>
<name3> [ <val2>   ]	get all the values in column <val2> from pandas data frame <name3>
<name2> = plt . errorbar ( x , y , yerr = err , ecolor = <val3>   )	make a line plot with errorbars , <name2> , from data x, y, err and set color of the errorbars to <val3> ( yellow )
results += [ each for each <name6> os . listdir ( <name1> ) if each . endswith ( <val3>   ) ]	find all files with extension <val3> <name6> directory <name1>
print ( <val3>   . decode ( 'utf8'   ) + <val5>   )	add unicode string <val5> to UTF -8 decoded string <val3>
re . sub ( <val3>   , <val4>   , <name5> ) . <name2> ( )	<name2> - case the string obtained by replacing the occurrences of regex pattern <val3> in string <name5> with eplacement <val4>
""""" ""{0:.3g}"" """" . <name1> ( <name4> )"	<name1> a string <name4> using string formatting
numpy . <name1> ( <name2> , <name2> [ 0 ] )	<name1> the first element of array <name2> to array <name2>
<name3> . ix [ : , ( <name3> . loc [ 0 ] == <val4> ) ] . columns	return the column for value <val4> in dataframe <name3>
<name1> [ <val4>   ] = <name1> . CET . map ( <name3> . set_index ( <val6>   ) [ <val4>   ] )	merge 2 dataframes <name3> and <name1> with same values in a column <val4> with and index <val6>
<name2> = <name4> . loads ( <name6> )	load a <name4> data <name6> into variable <name2>
math . cos ( math . <name5> ( <val3> ) )	convert <name5> <val3> to degrees
sum ( isinstance ( x , int ) for x <name5> <name3> )	count the number of integers <name5> list <name3>
'used\u200b'   . replace ( <val1>   , <val4>   )	replacing <val1> with <val4> in a string using regular expressions
threading . Thread ( target = SudsMove ) . start ( )	run function 'SudsMove' simultaneously
<name6> ( i * i for i <name5> <name2> )	<name6> of squares values <name5> a list <name2>
<name2> ( map ( lambda x : x * x , <name4> ) )	calculate the <name2> of the squares of each value in list <name4>
<name3> = dict ( ( ( key , value ) for ( key , value ) in <name2> ) )	Create a dictionary <name3> from list <name2>
<name4> = {  key : value for ( key , value ) in <name6> }	Create a dictionary <name4> from list <name6>
<name1> = {  k : v for ( k , v ) in <name2> }	Create a dictionary <name1> from list of key value pairs <name2>
<name4> . <name6> ( {  <val3>   : 2 , <val2>   : 3 }  )	<name6> off entries in dataframe <name4> column <val3> to two decimal places , and entries in column <val2> to three decimal places
<name5> . setopt ( pycurl . <name3> , lambda x : None )	Make function <name3> output nothing in curl <name5>
print ( <name4> . choice ( words ) )	return a <name4> word from a word list 'words'
<name6> ( <name3> , <name2> = lambda x : <name3> [ x ] [ <val5>   ] )	Find a <name6> value of the <name2> <val5> in a nested dictionary <name3>
[ ( int ( x ) if x else <val2> ) for x <name5> <name1> . split ( ','   ) ]	get list of string elements <name5> string <name1> delimited by commas , putting <val2> <name5> place of empty strings
""""" <val2> """" . join ( x or '0'     for x in <name6> . <name4> ( <val2>   ) )"	<name4> string <name6> into a list of strings based on <val2> then replace empty strings with zero
re . compile ( '$^'   )	regular expression match nothing
re . compile ( '.\\A|.\\A*|.\\A+'   )	regular expression syntax for not to match anything
re . compile ( 'a^'   )	create a regular expression object with a pattern that will match nothing
<name2> . <name6> [ <name2> . max ( ) >   <val4> ]	drop all <name6> in dataframe <name2> that holds a maximum value bigger than <val4>
<name5> . <name6> ( ) == datetime . <name1> ( ) . <name6> ( )	check if <name6> <name5> is equal to <name1> ' s <name6>
<name6> ( '\x1b[1m'     + <val4>   )	<name6> bold text <val4>
re . sub ( '.{20}(.mkv)'   , '\\1'   , <val5>   )	remove 20 symbols in front of '.' in string <val5>
[ 'a'   , 'c'   , 'b'   , 'obj'   ]	Define a list with string values ['a', 'c', 'b', 'obj']
""""" "" "" """" . join ( <name4> . split ( ) )"	substitute multiple whitespace with single whitespace in string <name4>
<name5> ( '{:.100f}'   . format ( <val3> <name6> <val4> ) )	<name5> a floating point number <val3> <name6> <val4> without any truncation
( <val6>     <name2> <name3> )	Check if key <val6> <name2> <name3>
( <val2>     <name5> <name1> )	Check if key <val2> <name5> <name1>
( <val4>     <name2> <name3> )	Check if key <val4> <name2> <name3>
Blog . objects . filter ( pk__in = [ 1 , 4 , 7 ] )	create a django query for a list of values 1, 4, 7
f = open ( <val5>   , 'rb'   )	read a binary file <val5>
format ( <val2> , <val1>   ) . <name5> ( <val1>   , <val3>   ) . <name5> ( <val6>   , <val1>   )	insert <val3> between every three digit before <val6> and <name5> <val1> with <val6> in <val2>
pd . merge ( <name2> , <name5> , left_on = <val3>   , right_on = <val6>   )	Join pandas data frame <name2> and <name5> with left join by <val3> and right join by <val6>
np . isnan ( <name2> ) . sum ( ) / np . prod ( <name2> . shape )	calculate ratio of sparsity in <name2> numpy array <name2>
sorted ( iter ( <name5> . <name3> ( ) ) , <name4> = lambda k_v : k_v [ 1 ] [ 2 ] , <name2> = True )	<name2> sort <name3> in default dictionary <name5> by the third item in each <name4> ' s list of values
sorted ( list ( <name1> . items ( ) ) , key = lambda v : v [ 1 ] )	Sort dictionary <name1> in ascending order based on second elements of its values
sorted ( list ( <name4> . items ( ) ) , key = lambda k_v : k_v [ 1 ] , <name2> = True )	<name2> sort dictionary <name4> based on its values
sorted ( list ( <name6> . items ( ) ) , key = lambda k_v : k_v [ 1 ] )	sorting a defaultdict <name6> by value
f = <name6> ( os . path . join ( __location__ , <val2>   ) )	<name6> a file <val2> in the same directory as a python script
f = <name3> ( <val6>   , <val5>   )	<name3> the file <val6> in <val5> mode
{  k : ( float ( <name6> [ k ] ) / <name1> [ k ] ) for k in <name6> }	divide the values with same keys of two dictionary <name1> and <name6>
{  <name4> : ( <name5> [ <name4> ] / <name6> [ <name4> ] ) <name2> <name4> <name1> list ( <name6> . keys ( ) ) &   <name5> }	divide the value <name2> each key <name4> <name1> dict <name5> by the value <name2> the same key <name4> <name1> dict <name6>
dict ( ( k , float ( <name3> [ k ] ) / <name5> [ k ] ) for k <name4> <name3> )	divide values associated with each key <name4> dictionary <name5> from values associated with the same key <name4> dictionary <name3>
<name1> . to_csv ( <name5> , date_format = <val2>   )	write dataframe <name1> to csv file <name5> with dates formatted as yearmonthday <val2>
<name2> . pop ( <val6>   , None )	remove a key <val6> from a dictionary <name2>
b = np . where ( np . isnan ( <name6> ) , 0 , <name6> )	replace NaN values in array <name6> with zeros
<name5> . call ( <val3>   , <name6> = True )	<name5> run command <val3> through the <name6>
subprocess . call ( <val4>   , shell = True )	run command <val4> on command line tools as separate processes
<name6> = urllib . <name4> . urlopen ( url , urllib . parse . unquote ( urllib . parse . urlencode ( params ) ) )	replace percent - encoded code in <name4> <name6> to their single - character equivalent
""""" <val1> """" . rstrip ( )"	remove white spaces from the end of string <val1>
urllib . parse . quote ( <name1> . encode ( 'utf-8'   ) )	Replace special characters in utf -8 encoded string <name1> using the % xx escape
np . <name3> ( map ( int , <val4>   ) )	Create an <name3> containing the conversion of string <val4> into separate elements
print ( np . <name6> ( list ( mystr ) , dtype = int ) )	convert a string 'mystr' to numpy <name6> of integer values
<name4> = cv2 . imread ( <val5>   , 0 )	convert an rgb image <val5> into grayscale <name4>
<name4> . <name5> ( key = lambda x : x [ 2 ] , reverse = True )	<name5> list <name4> in descending order based on the second item of each tuple in it
subprocess . call ( <val5>   , <name2> = True )	execute <name2> command <val5> with a |  pipe in it
len ( <name5> ) - len ( <name5> . rstrip ( '?'   ) )	count the number of trailing question marks in string <name5>
df [ df . columns [ 1 : ] ] . replace ( '[\\$,]'   , ''   , regex = True ) . astype ( float )	remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats
<name2> . merge ( <name5> , how = 'left'   , <name1> = <val6>   )	Merge column <val6> in dataframe <name5> with column <val6> <name1> dataframe <name2>
print ( ''   . join ( ''   . join ( i ) for i <name3> zip ( a2 , a1 ) ) + <name2> [ -1 ] if len ( <name2> ) % 2 else ''   )	switch positions of each two adjacent characters <name3> string <name2>
<name6> . attributes ( '-topmost'   , True )	make a window <name6> jump to the front
<name5> . lift ( )	make a window <name5> jump to the front
<name5> ( int ( ''   . join ( [ str ( int ( b ) ) for b in <name3> ] ) , 2 ) )	Convert list of booleans <name3> into a <name5> string
<name3> ( <name6> ( b << i for i , b in enumerate ( reversed ( <name1> ) ) ) )	convert the <name6> of list <name1> into a <name3> presentation
<name5> ( ( <val1>   , <name6> , <val3>   , <name2> ) )	<name5> the string <val1> , the value of the variable <name6> , the string <val3> and the value of the variable <name2> in one <name5> call .
<name3> ( 'Total score for {} is {}'   . format ( name , score ) )	<name3> multiple arguments 'name' and 'score' .
<name2> ( 'Total score for %s is %s  '     % ( <name6> , <name3> ) )	<name2> a string using multiple strings <name6> and <name3>
<name2> ( ( 'Total score for'   , <name5> , 'is'   , <name3> ) )	<name2> string including multiple variables <name5> and <name3>
url ( '^$'   , TemplateView . as_view ( template_name = <val6>   ) )	serve a static html page <val6> at the root of a django project
<name3> [ <name3> [ 'A'   ] . isin ( [ 3 , 6 ] ) ]	use a list of values [3,6] to select rows from a pandas dataframe <name3> 's column ' A '
system ( '/path/to/my/venv/bin/python myscript.py'   )	execute python code myscript.py in a virtualenv /path/to/my/venv from matlab
<name5> . objects . values_list ( <val3>   , flat = True )	django return a QuerySet list containing the values of field <val3> in model <name5>
re . findall ( '\\d|\\d,\\d\\)'   , <val4>   )	find all digits in string <val4> and put them to a list
input ( <val5>   )	prompt string <val5> to the console
""""" ""ABC"" """" . encode ( 'hex'   )"	"print string ""ABC"" as hex literal"
db . Doc . update ( {  '_id'   : b [ '_id'   ] }  , {  '$set'   : {  <val6>   : myGeolocCountry }}  )	insert a new field <val6> on an existing document 'b' using pymongo
re . sub ( 'l+'   , 'l'   , 'lollll'   )	Write a regex statement to match 'lol' to 'lolllll' .
rows = <name3> . findAll ( <val4>   ) [ 4 : : 5 ]	BeautifulSoup find all <val4> elements in HTML string <name3> at the five stride starting from the fourth element
plt . gca ( ) . invert_xaxis ( )	reverse all x - axis points in pyplot
plt . gca ( ) . invert_yaxis ( )	reverse y - axis in pyplot
pd . concat ( [ GOOG , AAPL ] , keys = [ 'GOOG'   , 'AAPL'   ] , axis = 1 )	stack two dataframes next to each other in pandas
return HttpResponse ( <name6> . dumps ( <name1> ) , content_type = 'application/json'   )	create a <name6> response <name1>
<name5> . <name4> ( 'string_escape'   )	<name4> escape sequences in string <name5>
hashlib . <name3> ( open ( <val2>   , 'rb'   ) . read ( ) ) . hexdigest ( )	calculate the <name3> checksum of a file named <val2>
[ k for k , v in <name2> . items ( ) if v == <name3> ]	Find all keys from a dictionary <name2> whose values are <name3>
{  k for d in <name4> for k in list ( d . <name1> ( ) ) }	create a set containing all <name1> '  names from dictionary <name4>
<name1> ( [ i for s in [ <name6> ( d . <name5> ( ) ) for d in <name4> ] for i in s ] )	create a <name1> containing all <name5> names from <name6> of dictionaries <name4>
[ i for s in [ <name6> ( d . <name2> ( ) ) for d in <name3> ] for i in s ]	extract all <name2> from a <name6> of dictionaries <name3>
<name3> , <name1> = zip ( * list ( <name5> . items ( ) ) )	unpack <name3> and <name1> of a dictionary <name5> into two lists
int ( Decimal ( <name4> ) )	convert a string <name4> containing a decimal to an integer
numpy . in1d ( <name3> , <name6> ) . <name4> ( )	check if array <name3> contains <name4> elements of array <name6>
<name6> . <name3> ( [ ( x <name1> a ) for x <name1> b ] )	<name6> : check if <name3> 'a' contains all the numbers <name1> <name3> 'b' .
<name2> . draw_networkx_labels ( G , <name5> , <name4> )	Draw node <name4> <name4> on <name2> graph G  at position <name5>
<name6> = [ <name2> [ : ] for <name2> in <name1> ]	make a <name2> - by - <name2> copy <name6> of array <name1>
X = <name3> . loadtxt ( <val5>   , delimiter = ','   )	Create 2 D <name3> array from the data provided in <val5> with each row in the file having same number of values
matching = [ s for s in <name6> if <val2>     in s ]	get a list of items from the list <name6> that contain string <val2>
<name5> . to_csv ( <val1>   , sep = '\t'   )	export a pandas data frame <name5> to a file <val1> and retain the indices
<name4> . rsplit ( ','   , 1 )	split a string <name4> on last delimiter
<name6> ( isinstance ( x , <name2> ) for x <name5> <name3> )	Check if <name6> elements <name5> list <name3> are tupples of long and <name2>
<name1> ( isinstance ( x , int ) for x <name4> lst )	check if <name1> elements <name4> a list 'lst' are the same type 'int'
<name2> . <name4> ( )	<name4> a string <name2> of all carriage returns and newlines
driver . execute_script ( 'window.scrollTo(0, Y)'   )	scroll to the bottom of a web page using selenium webdriver
driver . execute_script ( 'window.scrollTo(0, document.body.scrollHeight);'   )	scroll a to the bottom of a web page using selenium webdriver
datetime . datetime . combine ( <name5> , datetime . time ( ) )	convert Date object <name5> into a DateTime object
print ( <name5> ( x <name3> <name4> for x <name3> <name2> ) )	check if <name5> item from list <name2> is <name3> list <name4>
scipy . misc . imsave ( <val1>   , <name2> )	save a numpy array <name2> as an image <val1>
<name3> = re . sub ( ' ?\\([^)]+\\)'   , ''   , <name3> )	Remove anything in parenthesis from string <name3> with a regex
<name1> = re . sub ( ' ?\\(\\w+\\)'   , ''   , <name1> )	Remove word characters in parenthesis from string <name1> with a regex
<name6> = re . sub ( ' \\(\\w+\\)'   , ''   , <name6> )	Remove all data inside parenthesis in string <name6>
len ( set ( <name5> ) . intersection ( <name1> ) ) >   0	check if any elements in one list <name5> are in another list <name1>
i = int ( <name1> , 16 )	convert hex string <name1> to decimal
int ( <val5>   , 16 )	convert hex string <val5> to decimal
int ( <val4>   , 16 )	convert hex string <val4> to decimal
ast . literal_eval ( <val4>   )	convert hex string <val4> to decimal
int ( <val3>   , 16 )	convert hex string <val3> to decimal
<name6> . system ( 'screencapture screen.png'   )	take screenshot 'screen.png' on mac <name6> x
driver . set_window_size ( 1400 , 1000 )	Set a window size to 1400, 1000 using selenium webdriver
unicodedata . normalize ( 'NFKD'   , <val5>   ) . encode ( 'ascii'   , 'ignore'   )	replace non - ascii chars from a unicode string u <val5>
pandas . concat ( [ <name2> , <name6> ] ) . drop_duplicates ( ) . reset_index ( drop = True )	concatenate dataframe <name2> with <name6> whilst removing duplicates
<name4> = numpy . fromfile ( <val6>   , dtype = numpy . <name1> )	Construct an array with data type <name1> <name4> from data in binary file <val6>
<name1> . call ( <val6>   , shell = True )	execute a mv command <val6> in <name1>
<name2> ( <val5>   . encode ( 'utf-8'   ) )	<name2> a character that has unicode value <val5>
<name2> . SequenceMatcher ( None , <name5> . read ( ) , <name6> . read ( ) )	compare contents at filehandles <name5> and <name6> using <name2>
dict ( ( k , int ( v ) ) for k , v in ( <name3> . split ( ' - '   ) for <name3> in s . split ( <val4>   ) ) )	Create a dictionary from string <name3> separated by - and <val4>
<name4> ( i <name1> ( 1 , 2 , 3 , 4 , 5 ) for i <name1> ( 1 , 6 ) )	check if <name4> elements <name1> a tuple (1, 6) are <name1> another (1, 2, 3, 4, 5)
<name4> [ <val3>   ] . map ( lambda t : t . date ( ) ) . <name6> ( )	extract <name6> dates from time series <val3> in dataframe <name4>
""""" ""{:>7s}"" """" . format ( <name1> )"	right align string <name1> with a width of 7
open ( <val3>   , 'rb'   ) . <name1> ( 200 )	<name1> an excel file <val3>
<name1> . sort_values ( [ <val6>   , <val2>   ] , <name5> = [ True , False ] , inplace = True )	sort dataframe <name1> based on column <val6> in <name5> and column <val2> in descending
<name1> . sort_values ( [ <val5>   , <val3>   ] , <name6> = [ True , False ] )	sort dataframe <name1> based on column <val5> in <name6> and column <val3> in descending
df1 . <name2> ( [ <val6>   , <val1>   ] , <name3> = [ True , False ] , inplace = True )	<name2> a pandas data frame with column <val6> in <name3> and <val1> in descending order
df . <name4> ( [ <val5>   , <val6>   ] , <name2> = [ True , False ] )	<name4> a pandas data frame by column <val5> in <name2> , and by column <val6> in descending order
<name4> ( <val6>   )	django <name4> to view <val6>
[ x for x in <name2> if x not in [ 2 , 3 , 7 ] ]	remove all values within one list [2, 3, 7] from another list <name2>
out = ''   . join ( c for c in <name1> if c not in ( <val4>   , <val6>   , <val3>   ) )	remove the punctuation <val4> , <val6> , <val3> from a string <name1>
<name4> . find ( <val3>   , {  <val2>   : <val6>  }  ) [ <val1>   ]	BeautifulSoup get value associated with attribute <val1> where attribute <val2> is equal to <val6> in tag <val3> in HTML parsed string <name4>
urllib . parse . <name3> ( <val6>   )	<name3> a urlencoded unicode string <val6>
urllib . parse . unquote ( <name6> ) . <name4> ( 'utf8'   )	<name4> <name6> <name6> from UTF -16 code to UTF -8 code
del <name2> [ : ]	empty a list <name2>
del lst1 [ : ]	empty a list lst
<name1> [ : ] = [ ]	empty a list <name1>
<name4> [ : ] = [ ]	empty a list <name4>
<name3> . reset_index ( 0 ) . reset_index ( drop = True )	reset index of series <name3>
<name5> [ <val3> ] . getText ( ) . encode ( <val2>   )	convert unicode text from list <name5> with index <val3> to normal text <val2>
[ ( y - x ) for x , y <name6> zip ( <name2> , <name2> [ 1 : ] ) ]	create a list containing the subtraction of each item <name6> list <name2> from the item prior to it
print ( re . search ( <val5>   , <name1> ) . group ( 1 ) )	get value in string <name1> matched by regex pattern <val5>
globals ( ) . update ( importlib . import_module ( <val3>   ) . __dict__ )	import all classes from module <val3>
""""" """" """" . join ( [ 'a'   , 'b'   , 'c'   , 'd'   ] )"	convert a list of characters ['a', 'b', 'c', 'd'] into a string
<name5> . split ( <val3>   )	"Slice <name5> with <val3> as delimiter to get ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234"" from <name5> ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"""
od = collections . OrderedDict ( sorted ( <name5> . items ( ) ) )	sort dictionary <name5> by key
OrderedDict ( sorted ( list ( <name3> . items ( ) ) , <name2> = ( lambda t : t [ 0 ] ) ) )	sort a dictionary <name3> by <name2>
response = requests . <name1> ( <name5> , data = json . dumps ( data ) , headers = headers )	Execute a <name1> request to the <name5> <name5>
re . sub ( '[\\W_]+'   , <val2>   , s )	replace everything that is not an alphabet or a digit with <val2> in 's' .
[ ( x + y ) for x in <name4> for y in <name2> ]	create a list of aggregation of each element from list <name4> to all elements of list <name2>
dict ( [ x . split ( '='   ) for x in s . split ( ) ] )	convert string x'  to dictionary splitted by  = `  using list comprehension
<name1> . pop ( <val5> )	remove index <val5> element from a list <name1>
<name1> = <name1> . replace ( <val4>   , ''   )	Delete character <val4> from a string <name1> using python
<name6> ( x * y for x , y <name2> zip ( <name1> , <name5> ) )	get the <name6> of the products of each pair of corresponding elements <name2> lists <name1> and <name5>
<name4> ( x * y for x , y in <name4> ( zip ( <name5> , <name1> ) ) )	sum the products of each two elements at the same index of <name4> <name5> and <name4> <name1>
<name5> ( i * j for i , j in zip ( <name1> , <name3> ) )	<name5> the product of each two items at the same index of list <name1> and list <name3>
<name5> ( x * y for x , y in list ( zip ( <name4> , <name6> ) ) )	<name5> the product of elements of two lists named <name4> and <name6>
<name6> . <name4> ( open ( <val3>   , 'rb'   ) . read ( ) )	<name4> the content of file <val3> to file <name6>
new_list = [ ( x + <val6> ) for x <name1> <name4> ]	Add <val6> to each integer value <name1> list <name4>
[ x for x <name5> <name4> if x >= <val1> ]	get a list of all items <name5> list <name4> with values greater than <val1>
plt . plot ( list ( range ( 10 ) ) , <val1>   )	set color marker styles <val1> in matplotlib
plt . <name2> ( <name1> ( <name4> ( <val3> ) ) , linestyle = '--'   , marker = 'o'   , color = 'b'   )	set circle markers on <name2> for individual points defined in <name1> [1,2,3,4,5,6,7,8,9,10] created by <name4> ( <val3> )
[ i . <name6> ( <val1>   , 1 ) [ 0 ] for i <name4> <name2> ]	<name6> strings <name4> list <name2> on the first occurring tab <val1> and enter only the first resulting substring <name4> a new list
<name6> = [ i . split ( '\t'   ) [ 0 ] for i <name3> <name6> ]	Split each string <name3> list <name6> on the tab character
sum ( your_list )	Sum numbers in a list 'your_list'
<name2> ( ) . set_trace ( )	attach debugger pdb to class <name2>
result = {  k : <name2> . get ( v ) for k , v <name1> list ( <name6> . items ( ) ) }	Compose keys from dictionary <name6> with respective values <name1> dictionary <name2>
<name4> . <name4> . now ( ) + <name4> . timedelta ( days = 1 , <name6> = 3 )	add one day and three <name6> to the present time from <name4> .now ( )
dict ( ( v , k ) for k , v <name5> <name6> . items ( ) )	switch keys and values <name5> a dictionary <name6>
print ( sorted ( <name1> , key = lambda x : int ( x . split ( <val3>   ) [ 2 ] ) ) )	sort a list <name1> by number after second <val3>
any ( d [ <val6>   ] == <val3>     for d <name1> <name2> )	Check if the value of the key <val6> is <val3> <name1> a list of dictionaries <name2>
<name2> [ : ] = [ x for x in <name2> if x != [ <val5> , <val5> ] ]	remove all instances of [ <val5> , <val5> ] from list <name2>
[ x for x in <name3> if x != [ 1 , 1 ] ]	remove all instances of [1, 1] from <name3> list <name3>
b = {  <name4> [ i ] : <name4> [ i + 1 ] for i in range ( 0 , len ( <name4> ) , 2 ) }	convert <name4> list 'a' to <name4> dictionary where each even element represents the key to the dictionary , and the following odd element is the value
len ( set ( <name5> ) ) == len ( <name5> )	check whether elements in list <name5> appear only once
print ( <name1> . md5 ( open ( <name2> , 'rb'   ) . read ( ) ) . hexdigest ( ) )	Generate MD5 checksum of file in the path <name2> in <name1>
""""" """" """" . join ( x . upper ( ) if random . randint ( 0 , 1 ) else x for x <name4> <name5> )"	randomly switch letters '  cases <name4> string <name5>
"os . system ( 'GREPDB=""echo 123""; /bin/bash -c ""$GREPDB""'   )"	force bash interpreter '/bin/bash' to be used instead of shell
"os . system ( '/bin/bash -c ""echo hello world""'   )"	"Run a command ""echo hello world"" in bash instead of shell"
getattr ( <name4> , <name2> )	access the class variable <name2> from a class object <name4>
Image . open ( <val5>   ) . show ( )	Display a image file <val5>
<name1> . <name5> ( key = <name3> )	<name5> list <name1> based on variable <name3>
<name3> . replace ( ' '   , ''   )	remove all whitespace in a string <name3>
<name3> . strip ( )	remove whitespace in string <name3> from beginning and end
<name5> = re . sub ( '\\s+'   , ''   , <name5> , flags = re . UNICODE )	remove all whitespaces in string <name5>
<name3> = ''   . join ( <name3> . split ( ) )	remove all whitespaces in a string <name3>
<name5> ( <name6> . <name1> ( ) )	<name5> all the <name1> in a counter variable <name6>
np . sqrt ( ( ( <name5> - <name1> ) ** 2 ) . sum ( -1 ) )	find the euclidean distance between two 3 - d arrays <name5> and <name1>
<name6> = [ {}  , {}  , {}  ]	create list <name6> containing 3 empty dictionaries
weekly = [ sum ( visitors [ x : x + <val6> ] ) for x in range ( 0 , len ( <name2> ) , <val6> ) ]	find the sums of length <val6> subsets of a list <name2>
del <name5> [ <name3> ]	Delete an element <name3> from a dictionary <name5>
{  i : <name2> [ i ] for i in <name2> if ( i != <val1> ) }	Delete an element <val1> from <name2> dictionary <name2>
<name1> . pop ( <val2>   )	Delete an element <val2> from a dictionary <name1>
del <name3> [ <name5> ]	Delete an element with <name5> <name5> dictionary <name3>
np . linalg . <name1> ( np . dot ( <name5> . T , <name5> ) , np . dot ( <name5> . T , <name4> ) )	<name1> for the least squares '  solution of matrices <name5> and <name4>
pd . concat ( [ <name4> . drop ( <val1>   , axis = 1 ) , pd . DataFrame ( <name4> [ <val1>   ] . tolist ( ) ) ] , axis = 1 )	split dictionary / list inside a pandas column <val1> into separate columns in dataframe <name4>
[ {  <val6>   : x [ <val6>   ] . lower ( ) }   for x <name1> <name4> ]	lowercase string values with key <val6> <name1> a list of dictionaries <name4>
""""" "" "" """" . join ( <name3> )"	convert a list <name3> into string with values separated by spaces
re . sub ( <val5>   , <val4>   , <name2> )	replace each occurrence of the pattern <val5> within <name2> with <val4>
<name3> ( n ) == <name3> ( n ) [ : : -1 ]	check if string <name3> is palindrome
ftp . storbinary ( 'STOR myfile.txt'   , open ( <val6>   , 'rb'   ) )	upload binary file <val6> with ftplib
re . sub ( '.*I'   , <val6>   , <name2> )	remove all characters from string <name2> upto character <val6>
<name6> ( <val3>   . replace ( ','   , ''   ) )	parse a comma - separated string number <val3> into <name6>
pd . merge ( <name6> , <name2> , left_index = True , right_index = True , how = 'outer'   )	combine dataframe <name6> and dataframe <name2> by index number
<name2> ( <name1> . <name6> ( ) )	check if <name2> boolean <name6> in a python dictionary <name1> are true
<name6> . <name2> . str . replace ( <val1>   , ''   )	use regex pattern <val1> to remove digit 12 if followed by 4 other digits in column <name2> of dataframe <name6>
<name5> [ : : ( -1 ) ]	reverse a list <name5>
reversed ( <name5> )	reverse a list <name5>
<name1> . <name2> ( )	<name2> a list <name1>
<name1> ( reversed ( <name6> ) )	reverse a <name1> <name6>
[ tup [ 0 ] for tup <name3> <name5> ]	get first element of each tuple <name3> list <name5>
newcontents = <name6> . <name5> ( <val1>   , <val4>   ) . <name5> ( <val3>   , <val2>   )	<name5> character <val1> with character <val4> and character <val3> with character <val2> in file <name6>
<name2> . dumps ( [ dict ( list ( <name4> . items ( ) ) ) for <name4> in rs ] )	serialise SqlAlchemy RowProxy object <name4> to a <name2> object
config_file = os . path . expanduser ( <val4>   )	get file <val4>
request . params . getall ( 'c'   )	get multiple parameters with same name from a url in pylons
np . corrcoef ( <name5> )	Convert array <name5> into a correlation matrix
print ( max ( 1 , 2 , 3 ) )	Find the greatest number in set (1, 2, 3)
self . <name3> . get ( <val4>   )	Retrieve parameter <val4> from a GET <name3> .
<name4> [ <val6>   ] . apply ( lambda x , y : x + y , args = ( <val3> , ) )	Add <val3> to each element of column <val6> in dataframe <name4>
<name1> . objects . order_by ( '-pet__age'   ) [ : <val2> ]	Django get first <val2> records of model <name1> ordered by criteria 'age' of model 'pet'
time . sleep ( 5 )	"delay for ""5"" seconds"
<name1> . sleep ( <val3> )	make a <val3> seconds <name1> delay
sleep ( <val4> )	make a <val4> seconds time delay
<name4> . sleep ( <val1> )	make a <val1> seconds <name4> delay
<name2> . sleep ( <val1> )	make a <val1> seconds <name2> delay
[ x for x in <name2> if not any ( c . isdigit ( ) for c in x ) ]	From a list of strings <name2> , remove the values that contains numbers .
<name6> [ <val5>   ] . apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] )	get the middle two characters of a string <val5> in a pandas dataframe <name6>
<name3> . <name6> ( True )	draw a <name6> line on every tick of plot <name3>
sorted ( <name1> , key = lambda x : ( -1 * c [ x ] , <name1> . index ( x ) ) )	sort list <name1> based on each element ' s number of occurrences
[ max ( len ( str ( x ) ) for x <name1> line ) for line <name1> zip ( * <name2> ) ]	Get the value with the maximum length <name1> each column <name1> array <name2>
<name3> . <name1> . value_counts ( ) . reset_index ( name = <val6>   )	get the count of each unique value in column <name1> of dataframe <name3> and store in column <val6>
<name5> . set_index ( 'Date'   ) . diff ( )	calculat the difference between each row and the row previous to it in dataframe <name5>
<name3> . update ( [ 3 , 4 ] )	append values [3, 4] to <name3> set <name3>
<name2> [ 1 : : 2 ] = <val6>	set every two - stride far element to <val6> starting from second element in array <name2>
<name6> . groupby ( <val1>   ) [ <val4>   ] . <name5> ( ascending = False )	Get <name5> of rows from highest to lowest of dataframe <name6> , grouped by value in column <val1> , according to value in column <val4>
<name1> . strptime ( <val2>   , '%a, %d %b %Y %H:%M:%S %Z'   )	convert js date object <val2> to python <name1>
struct . pack ( '<I'   , 1633837924 )	Convert a binary value '1633837924' to string
<name6> . <name2> ( <val5>   )	<name2> string <val5> to <name6> <name6>
<name3> . <name5> ( <val2> , <val4>   )	<name5> string <val4> at position <val2> of <name3> <name3>
theset = set ( k . lower ( ) for k <name6> <name1> )	convert keys <name6> dictionary <name1> into case insensitive
""""" ""{s:{c}^{n}}"" """" . format ( s = <val3>   , n = <val2> , c = <val6>   )"	pad <val3> up to a length of <val2> characters with <val6>
isinstance ( <name1> , str )	check if type of variable <name1> is a string
isinstance ( <name6> , str )	check if type of a variable <name6> is string
dict ( pair for d in <name2> for pair in <name5> ( d . items ( ) ) )	Convert <name5> of dictionaries <name2> into a flat dictionary
{  k : v for d <name5> <name4> for k , v <name5> <name2> ( d . items ( ) ) }	merge a <name2> of dictionaries <name5> <name2> <name4> into a single dict
df . sort_values ( [ <val6>   , <val1>   ] , <name2> = [ True , False ] , inplace = True )	sort a pandas data frame according to column <val6> in <name2> and <val1> in descending order
df . <name4> ( [ <val5>   , <val3>   ] , <name1> = [ True , False ] , inplace = True )	<name4> a pandas data frame by column <val5> in <name1> and <val3> in descending order
eval ( <val4> )	run the code contained in string <val4>
[ {  <val1>   : <val6> , <val5>   : <val3> , <val4>   : <val2> , <val1>   : <val3> }  , {  <val1>   : <val6> , <val5>   : <val3> , <val4>   : <val6> , <val1>   : <val6> }  ]	creating a list of dictionaries [ { <val1> : <val6> , <val5> : <val3> , <val4> : <val2> , <val1> : <val3> } , { <val1> : <val6> , <val5> : <val3> , <val4> : <val6> , <val1> : <val6> } ]
<name2> ( itertools . product ( * <name4> ) )	get all possible combination of items from 2 - dimensional <name2> <name4>
<name5> . groupby ( [ <val1>   , 'Item_Code'   ] ) [ [ <val3>   , <val4>   , <val2>   ] ] . <name6> ( )	"Get <name6> of values of columns <val3> , <val4> , <val2> after group by on columns <val1> and ""Item_code"" in dataframe <name5> ."
<name4> = [ ( el , <name1> ) for el <name3> [ a , b , c , d ] ]	create list <name4> containing permutations of each element <name3> list [a, b, c, d] with variable <name1> as tuples
<name3> = <name3> [ numpy . logical_not ( numpy . isnan ( <name3> ) ) ]	remove Nan values from array <name3>
os . <name5> . join ( * x . split ( os . <name5> . sep ) [ 2 : ] )	remove first directory from <name5> '/First/Second/Third/Fourth/Fifth'
<name1> = <name1> . replace ( <val5>   , <val6>   )	Replace <val5> with <val6> in a string <name1>
subprocess . <name5> ( <val6>   , shell = True )	<name5> bash command <val6> with pipe
""""" ""437c2123"" """" . decode ( 'hex'   )"	Convert a hex string 437c2123  according to ascii value .
[ k for k , v <name6> <name5> . _fields . items ( ) if v . <name4> ]	Get a list of all fields <name6> class <name5> that are marked <name4>
<name4> = <name4> . ix [ : , 0 : 2 ]	remove column by index [:, 0:2] in dataframe <name4>
<name2> = map ( <name4> , <name2> . split ( ) )	change a string of integers <name2> separated by spaces to a list of <name4>
<name6> = [ int ( i ) for i in <name6> . split ( ) ]	convert a string of integers <name6> separated by spaces to a list of integers
driver . find_element_by_css_selector ( <val4> )	find element by css selector <val4>
webbrowser . open ( 'file:///my_pdf.pdf'   )	display a pdf file that has been downloaded as my_pdf.pdf
<name6> = <name6> . <name1> ( '\\', '  '  )	<name1> backslashes in string <name6> with empty string ''
<name3> . replace ( '\\', '  '  )	remove backslashes from string <name3>
df . <name1> ( <val4>   , <val6>   )	<name1> value <val4> in any column of pandas dataframe to <val6>
<name1> . <name1> . now ( ) . <name4> ( )	convert <name1> object to <name4> object in python
[ elem . tag for elem <name3> <name6> . iter ( ) ]	get all sub - elements of an element <name6> <name3> an elementtree
[ elem . tag for elem in <name4> . iter ( ) if elem is not <name4> ]	get all sub - elements of an element tree <name4> excluding the root element
sorted ( <name6> , <name4> = lambda x : x [ <val3>   ] != <val2>   )	move dictionaries in list <name6> to the end of the list if value of <name4> <val3> in each dictionary is not equal to <val2>
<name5> ( value == <val1> for value in list ( <name4> . <name3> ( ) ) )	check if <name5> <name3> of a dictionary <name4> are zero <val1>
<name1> . pivot_table ( <val3>   , rows = 'X'   , cols = 'X2'   )	produce a pivot table as dataframe using column <val3> in datafram <name1> to form the axes of the resulting dataframe
<name5> . <name1> ( axis = 0 ) . <name1> ( axis = 0 )	get a <name1> of 4 d array <name5>
time . mktime ( <name2> . timetuple ( ) ) + <name2> . microsecond / 1000000.0	Convert a datetime object <name2> to microtime
<name3> [ ( <name5> <= <name3> [ <val2>   ] ) &   ( <name3> [ <val2>   ] <= <name6> ) ]	select all rows in dataframe <name3> where the values of column <val2> is bigger than or equal to <name5> and smaller than or equal to <name6>
sorted ( <name1> , key = itemgetter ( <val4> ) )	sort a list of lists <name1> by index <val4> of the inner list
<name6> . <name2> ( key = ( lambda x : x [ <val1> ] ) )	<name2> a list of lists <name6> by index <val1> of the inner list
sorted ( <name5> , key = ( lambda x : x [ <val6> ] ) )	sort list <name5> by index <val6> of the item
sorted_list = sorted ( <name1> , key = itemgetter ( <val5> , <val2> , <val3> ) )	sort a list of lists <name1> by indices <val5> , <val2> , <val3> of the inner list
np . argwhere ( np . all ( arr == [ [ 0 , <val5> ] , [ <val5> , 0 ] ] , axis = ( 1 , <val2> ) ) )	find rows of <val2> d array in <val5> d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'
<name4> . loc [ : , ( list ( itertools . product ( [ <val6>   , <val2>   ] , [ <val3>   , <val5>   ] ) ) ) ]	From multiIndexed dataframe <name4> select columns <val3> and <val5> within each higher order column <val6> and <val2>
data . loc [ : , ( [ ( 'one'   , <val6>   ) , ( 'one'   , <val2>   ) , ( 'two'   , <val6>   ) , ( 'two'   , <val2>   ) ] ) ]	select only specific columns <val6> and <val2> from a dataframe 'data' with multiindex columns
hashtags = re . findall ( '#(\\w+)'   , <name1> , re . UNICODE )	match a sharp , followed by letters ( including accent characters ) in string <name1> using a regex
os . rename ( <name1> , <name6> )	Rename file from <name1> to <name6>
print ( <name3> . tostring ( <name1> . find ( <val2>   ) ) )	Get all texts and tags from a tag <val2> from <name3> tag <name1> using lxml
json . dumps ( {  str ( k ) : v for k , v in <name6> . items ( ) }  )	Serialize dictionary <name6> and its keys to a JSON formatted string
soup = <name2> ( <name5> . read ( ) . decode ( 'utf-8'   ) )	parse UTF -8 encoded HTML <name5> <name5> to <name2> object
os . remove ( <name4> )	delete file <name4>
min ( [ x for x in <name6> if x >   <val5> ] )	get the next value greatest to <val5> from a list of numbers <name6>
<name5> [ <val4>   ] = <val2>	Replace each value in column <val4> of dataframe <name5> with string <val2>
<name2> ( <name1> , key = lambda x : ( x <   0 , x ) )	sort list <name1> with positives coming before negatives with values <name2> respectively
six_months = ( <name3> . <name2> ( ) + relativedelta ( <name5> = ( + <val1> ) ) )	get the <name3> <val1> <name5> from <name2>
( <name2> ( 2010 , 12 , 31 ) + relativedelta ( months = ( + <val6> ) ) )	get the <name2> <val6> month from today
( <name5> ( 2010 , 12 , 31 ) + relativedelta ( <name6> = ( + <val4> ) ) )	get the <name5> <val4> <name6> from today
print ( ( datetime . <name5> . today ( ) + datetime . timedelta ( ( ( 6 * 365 ) / 12 ) ) ) . isoformat ( ) )	calculate the <name5> six months from the current <name5>
<name6> ( <name3> ( <name2> . <name5> ( ) ) , <name4> = lambda x : <name2> [ x ] [ <val1>   ] , reverse = True )	get a <name3> of <name5> of dictionary <name2> <name6> by the value of nested dictionary <name4> <val1>
<name5> [ np . arange ( len ( <name5> ) ) != <val3> ]	get all the values from <name5> numpy array <name5> excluding index <val3>
[ <name2> for <name2> in lst <name4> <name1> ( <name2> ) != <val3> ]	delete all elements from a list <name2> <name4> a function <name1> taking value as parameter returns <val3>
<name6> . set_index ( <val5>   )	set dataframe <name6> index using column <val5>
<name3> = [ line . split ( ','   ) for line in open ( <val1>   ) ]	read lines from a csv file <val1> into a list of lists <name3>
[ i for i in range ( 100 ) if i >   10 if i <   20 ]	list comprehension that produces integers between 11 and 19
""""" """" """" . join ( [ c for c in <name3> if c . isdigit ( ) ] )"	Get only digits from a string <name3>
re . <name5> ( '\\t+'   , <name3> . rstrip ( <val1>   ) )	<name5> a string <name3> based on tab <val1>
( <name4> . T * <name3> ) . T	scalar multiply matrix <name4> by <name3>
<val2>   . rstrip ( )	remove trailing newline in string <val2>
<val6>   . rstrip ( '\n'   )	remove trailing newline in string <val6>
<name4> . strip ( )	remove newline in string <name4>
<name4> . rstrip ( )	remove newline in string <name4> on the right side
<name4> . lstrip ( )	remove newline in string <name4> on the left side
<val4>   . rstrip ( '\r\n'   )	remove newline in string <val4>
<val1>   . rstrip ( '\r\n'   )	remove newline in string <val1> on the right side
<val6>   . rstrip ( '\r\n'   )	remove newline in string <val6> on the right side
<val2>   . rstrip ( '\n'   )	remove newline in string <val2> on the right side
re . findall ( '.{,16}\\b'   , <name4> )	split string <name4> into chunks of 16 characters each
[ [ <name4> [ i ] [ j ] for j <name5> range ( len ( <name4> [ i ] ) ) ] for i <name5> range ( len ( <name4> ) ) ]	Get a list comprehension <name5> list of lists <name4>
<val3>   . encode ( 'latin-1'   )	convert unicode string <val3> to byte string
<name6> . groupby ( ( <name6> . <name2> == <val5>   ) . shift ( 1 ) . fillna ( 0 ) . cumsum ( ) )	split dataframe <name6> where the value of column <name2> is equal to <val5>
urllib . request . urlretrieve ( 'http://search.twitter.com/search.json?q=hi'   , 'hi.json'   )	save json output from a url ‘ http : // search .twitter .com / search .json ? q = hi ’  to file ‘ hi .json ’  in Python 2
<name4> . where ( ( <name1> == 0 ) ) [ 0 ]	Find indices of elements equal to zero from <name4> array <name1>
sys . stdout . <name2> ( )	<name2> output of python print
str ( <name5> )	convert <name5> to string
<name3> . __str__ ( )	convert <name3> to string
str ( <name6> )	convert <name6> to string
<name3> . <name4> ( key = operator . itemgetter ( 1 ) )	<name4> list of lists <name3> by the second item in each list
print ( str ( <name4> ) + <val3>     + str ( <name2> ) )	Print variable <name4> and variable <name2> with space string <val3> in between
<name1> . fillna ( method = 'ffill'   , inplace = True )	change NaN values in dataframe <name1> using preceding values in the frame
text . config ( <name5> = DISABLED )	change the <name5> of the Tkinter Text widget to read only i .e . disabled
<name5> ( map ( ord , <name6> ) )	python <name5> of ascii values of all characters in a <name6> <name6>
<name3> ( <name6> . product ( * <name1> ) )	apply <name6> .product to elements of a <name3> of lists <name1>
'{:,}'   . format ( <name3> )	print number <name3> as thousands separators
<name3> [ <name3> . <name6> . isin ( [ 'men'   , 'rocks'   , 'mountains'   ] ) ]	get rows of dataframe <name3> where column <name6> has values ['men', 'rocks', 'mountains']
[ x [ <val5> ] <name6> x <name1> <name2> ]	get the value at index <val5> <name6> each tuple <name1> the list of tuples <name2>
'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'   . <name3> ( )	"<name3> unicode string ""раз два три"" into words"
<name4> . objects . extra ( select = {  <val2>   : 'Length(name)'  }  ) . order_by ( <val2>   )	sort query set by number of characters in a field <val2> in django model <name4>
min ( <name6> , <name1> = lambda x : ( abs ( <val5> - x [ <val4>   ] ) , - x [ 'pixels'   ] ) )	get a dictionary in list <name6> which <name1> <val4> is closer to a global value <val5>
<name4> [ ~  <name4> . mask ]	get the non - masked values of array <name4>
re . findall ( '\\b[A-Z]'   , <name2> )	Find all words containing letters between A and Z in string <name2>
<name2> = [ ( [ <val6> ] * <val4> ) for i in range ( <val4> ) ]	create a list <name2> containing <val4> lists , each of <val4> items all set to <val6>
np . vstack ( np . meshgrid ( <name4> , <name3> , <name6> ) ) . reshape ( <val5> , -1 ) . T	creating a numpy array of <val5> d coordinates from three 1 d arrays <name4> , <name3> and <name6>
<name1> [ <name1> != <val3> ] . min ( )	find the minimum value in a numpy array <name1> excluding <val3>
browser . find_elements_by_xpath ( <val1> ) . <name3>	get the <name3> of multiple elements found by xpath <val1>
"browser . find_elements_by_xpath ( ""//*[@type='submit']"" ) . get_attribute ( <val4>   )"	find all the values in attribute <val4> for the tags whose type attribute is 'submit' in selenium
pd . DataFrame ( <name3> . <name2> [ <name4> . argsort ( <name3> . <name1> ) ] , <name3> . index , <name4> . unique ( <name3> . <name1> ) )	Sort the <name1> of the dataframe <name3> and align the <name2> accordingly based on the obtained indices after <name4> .argsort .
datetime . datetime . <name5> ( ) . strftime ( '%Y-%m-%d'   )	Getting <name5> ' s date in YYYY - MM - DD
urllib . parse . quote_plus ( <val3>   )	urlencode a querystring <val3> in python 2
<name4> ( ' '   . join ( sorted ( <name2> , key = lambda k : len ( <name2> [ k ] ) , reverse = True ) ) )	sort a dictionary <name2> by length of its values and <name4> as string
map ( <name6> , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )	convert tuple elements in <name6> [(1,2),(3,4),(5,6),] into lists
[ ( x , y ) <name1> x , y <name6> zip ( myList , myList [ 1 : ] ) if y == <val2> ]	create a list of tuples which contains number <val2> and the number before it , <name1> each occurrence of <val2> <name6> the list 'myList'
driver . get ( 'http://www.google.com.br'   )	navigate to webpage given by url http://www.python.org using Selenium
b = <name3> . decode ( 'utf8'   ) [ : : -1 ] . encode ( 'utf8'   )	reverse <name3> UTF -8 string 'a'
dparser . parse ( <val2>   , fuzzy = True )	extract date from a string <val2>
dparser . parse ( <val1>   , fuzzy = True )	extract date from a string <val1>
dparser . parse ( <val6>   , fuzzy = True )	extract date from a string <val6>
dict ( map ( lambda s : s . split ( ':'   ) , [ 'A:1'   , 'B:2'   , 'C:3'   , 'D:4'   ] ) )	Convert a list ['A:1', 'B:2', 'C:3', 'D:4'] to dictionary
re . search ( '[a-zA-Z]'   , <name4> )	check if string <name4> contains any upper or lower - case ASCII letters
DataFrame ( {  'count'   : <name4> . <name2> ( [ 'Name'   , 'City'   ] ) . size ( ) }  ) . reset_index ( )	convert a pandas <name4> <name2> object to dataframe
re . sub ( '[^0-9]'   , ''   , 'sdkjh987978asd098as0980a98sd'   )	remove all non - numeric characters from string sdkjh987978asd098as0980a98sd 
[ y for y <name6> <name4> if y not <name6> <name5> ]	get items from list <name4> that don ' t appear <name6> list <name5>
<name3> . groupby ( <val4>   ) . head ( 4 )	extract the first four rows of the column <val4> from a pandas dataframe <name3>
zip ( * <name3> )	Unzip a list of tuples <name3> into a list of lists
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a'   , 'b'   , 'c'   , 'd'   ] ) )	combine two lists [1, 2, 3, 4] and ['a', 'b', 'c', 'd'] into a dictionary
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a'   , 'b'   , 'c'   , 'd'   ] ) )	combine two lists [1, 2, 3, 4] and ['a', 'b', 'c', 'd'] into a dictionary
<name5> . url	retrieve the path from a Flask <name5>
<name3> . <name4> ( '\\r'   , <val2>   )	<name4> carriage return in string <name3> with empty string <val2>
simplejson . dumps ( dict ( [ ( <val6>     % k , v ) for k , v in list ( <name1> . items ( ) ) ] ) )	serialize dictionary <name1> as a JSON formatted string with each key formatted to pattern <val6>
<name4> . strptime ( <val5>   , <val3>   )	parse string <val5> into <name4> by format <val3>
parser . <name4> ( <val3>   )	<name4> string <val3> into datetime
os . <name2> . split ( os . <name2> . abspath ( existGDBPath ) )	Get absolute folder <name2> and filename for file existGDBPath 
os . <name5> . dirname ( os . <name5> . abspath ( existGDBPath ) )	extract folder <name5> from file <name5>
requests . <name5> ( <val6>   , <name4> = {  'test'   : 'cheers'  }  )	Execute a <name5> request to url <val6> with <name4> data {'test': 'cheers'}
<name4> = [ x for x <name3> <name4> <name2> x [ <val6>   ] not <name3> <name5> ]	remove dictionary from list <name4> <name2> the value associated with its key <val6> is <name3> list <name5>
{{  <name3> . args . <name2> ( <val6>   ) }}	<name2> a <name3> parameter <val6> in jinja2
<name2> ( range ( <val3> , <val4> ) )	create a <name2> of integers between 2 values <val3> and <val4>
<name6> [ <val3>   ] = <name6> [ <val3>   ] . astype ( <name2> ) . astype ( <name4> )	Change data type of data in column <val3> of dataframe <name6> into <name2> and then to <name4>
<name3> ( <name5> , key = lambda x : x [ 1 ] )	Find the list in a list of lists <name5> with the <name3> value of the second element .
your_string . strip ( '0'   )	remove leading and trailing zeros in the string 'your_Strip'
<name1> ( permutations ( <name1> ( range ( 9 ) ) , 2 ) )	generate a <name1> of all unique pairs of integers in range(9)
re . compile ( <val5>   , re . MULTILINE )	create a regular expression that matches the pattern <val5> over multiple lines of text
re . compile ( <val1>   , re . MULTILINE )	regular expression <val1> matching a multiline block of text
call ( [ <val5>   , <val3>   , <val4>   ] )	Run <val3> file with python location <val5> and arguments <val4> as a subprocess
<name4> . <name1> ( key = operator . itemgetter ( 2 , 3 ) )	<name1> <name4> multidimensional list <name4> by second and third column
final_choices = ( ( <name5> , ) + <name2> )	Add a tuple with value <name5> to a tuple <name2>
final_choices = ( ( <name4> , ) + <name2> )	Add a tuple with value <name4> to a tuple <name2>
os . getcwd ( )	find the current directory
os . path . realpath ( __file__ )	find the current directory
os . <name4> . dirname ( <name4> )	get the directory name of <name4>
os . <name2> . realpath ( <name2> )	get the canonical <name2> of file <name2>
dir_path = os . path . dirname ( os . path . realpath ( __file__ ) )	Find name of current directory
cwd = os . getcwd ( )	Find current directory
full_path = os . <name5> . realpath ( __file__ )	Find the full <name5> of current directory
<name2> [ <name2> [ : , ( 2 ) ] . argsort ( ) ]	sort array <name2> in ascending order by values of the 3 rd column
<name5> . <name4> ( <name1> , axis = 0 )	<name4> rows of <name5> matrix <name1> in ascending order according to all column values
re . <name5> ( '[ .]'   , <val3>   )	"<name5> string <val3> on space "" "" and dot character ""."""
shutil . <name2> ( <val5>   , <val6>   )	<name2> the content of file <val5> to file <val6>
print ( ''   . join ( choice ( ascii_uppercase ) for i in range ( <val1> ) ) )	generate random upper - case ascii string of <val1> characters length
[ ''   . join ( seq ) for seq <name3> zip ( <name2> , <name2> [ 1 : ] ) ]	merge the elements <name3> a list <name2> sequentially
<name5> . <name3> ( columns = {  <val1>   : <val4>  }  , inplace = True )	<name3> column <val1> in dataframe <name5> to <val4>
print ( <name6> . get_text ( ) )	convert a beautiful <name6> html <name6> to text
sorted ( <name3> , key = operator . itemgetter ( 1 ) , reverse = True )	Sort list <name3> in descending order based on the second element of each list inside list <name3>
<name3> [ <val4>   ] . <name6> ( [ <val5> , <val1> ] , [ <val2>   , <val3>   ] , inplace = True )	<name6> value <val5> with <val2> and value <val1> with <val3> in column <val4> of dataframe <name3>
re . <name4> ( '\\W+'   , <val2>   )	<name4> string <val2> on punctuation
re . match ( '(.*?[.?!](?:\\s+.*?[.?!]){0,1})'   , <name4> ) . group ( 1 )	Extract first two substrings in string <name4> that end in . , ? or !
print ( [ a for a , b in re . findall ( '((\\w)\\2*)'   , <name3> ) ] )	split string <name3> into strings of repeating elements
print ( <val2>   . join ( OrderedDict . fromkeys ( <name1> ) ) )	Create new string with unique characters from <name1> seperated by <val2>
print ( ' '   . join ( <name3> ( <name6> ) ) )	create a <name3> from string <name6> to remove duplicate characters
[ x for x <name2> <name1> . namelist ( ) if x . endswith ( <val4>   ) ]	list folders <name2> zip <name1> 'file' that ends with <val4>
<name4> . <name2> ( <val6>   )	find the <name2> of a word <val6> in a string <name4>
print ( <val1>   . join ( [ item [ 0 ] for item in <name6> ] ) )	reduce the first element of list of strings <name6> to a string , separated by <val1>
<name1> . seek ( 2 )	Move the cursor of file pointer <name1> at the end of the file .
print ( zip ( my_list [ 0 : : 2 ] , my_list [ 1 : : 2 ] ) )	convert a flat list into a list of tuples of every two items in the list , in order
my_new_list = zip ( my_list [ 0 : : <val2> ] , my_list [ 1 : : <val2> ] )	group a list of ints into a list of tuples of each <val2> elements
sys . setdefaultencoding ( 'utf8'   )	set the default encoding to 'utf-8'
datetime . datetime . now ( ) . strftime ( <val3>   )	Formate current date and time to a string using pattern <val3>
print ( re . findall ( '[\\u0600-\\u06FF]+'   , <name3> ) )	retrieve arabic texts from string <name3>
<name6> . groupby ( <name6> . index . map ( lambda t : t . <name1> ) )	group dataframe <name6> based on <name1> interval
<name3> [ <val2>   ] [ <val6>   ]	access value associated with key <val6> of key <val2> from dictionary <name3>
<name3> . dropna ( subset = [ <val1>   , <val5>   , <val4>   ] , how = 'all'   )	remove all null values from columns <val1> , <val5> and <val4> of dataframe <name3>
<name5> . <name6> ( 0 , <name2> )	<name6> <name5> list <name2> at the front of list <name5>
<name6> = <name6> [ : <name2> ] + <name3> + <name6> [ <name2> : ]	insert elements of list <name3> into list <name6> at position <name2>
np . flatnonzero ( x ) . <name3> ( )	calculate the <name3> of the nonzero values '  indices of dataframe df
<name5> [ <val6>   ] = <name5> [ <val2>   ] . dt . <name3>	get <name3> from dataframe <name5> column <val2> to column <val6>
[ x for x <name1> <name2> if x not <name1> <name5> ]	remove elements <name1> list <name5> from list <name2>
[ ''   . <name1> ( x ) for x <name3> <name6> ]	<name1> elements of each tuple <name3> list <name6> into one string
<name2> ( map ( ''   . <name4> , <name6> ) )	<name4> items of each tuple in <name2> of tuples <name6> into <name6> <name2> of strings
re . split ( '\n\\s*\n'   , <name4> )	match blank lines in <name4> with regular expressions
""""" ""{0:,.2f}"" """" . format ( <val3> )"	Convert float <val3> to comma - separated string
<name6> ( ** <name3> )	pass dictionary items <name3> as keyword arguments in function <name6>
sum ( ( 1 for <name3> in open ( <val6>   ) ) )	get <name3> count of file <val6>
print ( <name5> ( <val2> , -1 ) )	<name5> <val2> to be an integer
[ x for y , x in sorted ( zip ( <name3> , <name2> ) ) ]	sort list <name2> based on values from another list <name3>
[ x for y , x in sorted ( zip ( Y , X ) ) ]	sorting list 'X' based on values from another list 'Y'
datetime . <name2> ( 2010 , 6 , 16 ) . <name1> ( ) [ 1 ]	get equivalent week number from a <name2> 2010/6/16 using <name1>
<name3> . iloc [ : , ( np . r_ [ <val5> : 10 , ( <val2> ) , ( <val6> ) , <val1> : 100 ] ) ]	select multiple ranges of columns <val5> -10 , <val2> , <val6> , and <val1> -100 in pandas dataframe <name3>
<name6> . groupby ( <val2>   ) . agg ( {  'returns'   : [ np . <name3> , np . <name4> ] }  )	apply two different aggregating functions <name3> and <name4> to the same column <val2> in pandas data frame <name6>
<name1> . lower ( )	convert string <name1> to lowercase
<name1> . decode ( 'utf-8'   ) . lower ( )	convert utf -8 string <name1> to lowercase
urlfetch . fetch ( <name2> , deadline = 10 * 60 )	handle the urlfetch_errors  exception for imaplib request to <name2> <name2>
print ( <name5> [ 0 : <val3> ] )	output first <val3> characters in a string <name5>
<name4> ( numpoints = 1 )	make matplotlib plot <name4> put marker in <name4> only once
dict ( ( x , <name5> ( y ) &   <name5> ( <name3> . <name2> ( x , ( ) ) ) ) for x , y in <name6> . items ( ) )	<name2> <name5> intersection between dictionaries <name3> and <name6>
numpy . loadtxt ( open ( <val4>   , 'rb'   ) , delimiter = ','   , skiprows = 1 )	convert csv file <val4> into two - dimensional matrix
Sample . <name5> . <name1> ( date__range = [ <val6>   , <val4>   ] )	<name1> the <name5> in django model 'Sample' between date range <val6> and <val4>
<name2> . <name4> . <name6> ( date__year = <val1>   , date__month = '01'   )	<name6> <name4> month wise in django model <name2> for year <val1>
<name4> [ <val3>   ] = {  'spam'   : 5 , 'ham'   : 6 }	create a dictionary {'spam': 5, 'ham': 6} into another dictionary <name4> field <val3>
numpy . apply_along_axis ( numpy . linalg . norm , 1 , <name3> )	apply numpy.linalg.norm to each row of <name3> matrix <name3>
dict ( ( k , v ) for d <name5> <name4> for k , v <name5> list ( d . items ( ) ) )	merge dictionaries form array <name4> <name5> a single expression
print ( <val5>   . decode ( 'string_escape'   ) )	Convert escaped utf string to utf string in <val5>
sum ( [ True , True , False , False , False , True ] )	counting the number of true booleans in a python list [True, True, False, False, False, True]
<name1> . set_size_inches ( <name4> , <name6> , forward = True )	set the size of figure <name1> in inches to width height of <name4> , <name6>
'hello there %(5)s'     % {  '5'   : 'you'  }	format string with dict {'5': 'you'} with integer keys
map ( int , <name3> . split ( <val1>   ) )	Convert a string of numbers <name3> separated by <val1> into a list of integers
[ int ( s ) for s in example_string . split ( ','   ) ]	Convert a string of numbers 'example_string' separated by comma into a list of numbers
<name3> = [ i [ 0 ] for i in <name3> ]	Flatten list <name3>
y = map ( operator . itemgetter ( 0 ) , <name6> )	convert list <name6> into a flat list
<name1> = [ i [ 0 ] for i <name5> <name3> ]	get a list <name1> of the first element of every tuple <name5> list <name3>
results = [ item [ 'value'   ] for item in test_data ]	extract all the values of a specific key named 'values' from a list of dictionaries
<name4> . <name4> . now ( ) . isoformat ( )	get current <name4> in ISO format
<name5> . <name5> . utcnow ( ) . isoformat ( )	get UTC <name5> in ISO format
<name6> . apply ( ' '   . join , axis = 0 )	Merge all columns in dataframe <name6> into one column
pd . DataFrame ( <name1> . values - <name6> . values , columns = <name1> . columns )	pandas subtract a row from dataframe <name6> from dataframe <name1>
print ( open ( <val2>   , <val4>   ) . <name1> ( ) )	<name1> file <val2> using universal newline mode <val4>
<name5> ( <name3> . decode ( <val6>   ) . split ( ) )	<name5> <name3> <name3> from text file with <val6> format
<name3> = <name2> . <name5> ( <val6>   , 'r'   , <name1> = <val4>   )	<name5> a text <name3> <val6> in <name2> module with <name1> <val4>
s1 = pd . merge ( <name4> , <name6> , how = 'inner'   , <name1> = [ <val5>   ] )	Join data of dataframe <name4> with data in dataframe <name6> based <name1> similar values of column <val5> in both dataframes
<name2> . decode ( 'utf8'   ) . encode ( 'utf8'   )	check if string <name2> is UTF -8 encoded
<name3> . shape	get the dimensions of numpy array <name3>
N . shape ( <name1> )	get the dimensions of numpy array <name1>
N . shape ( <name3> )	get the dimensions of array <name3>
<name1> . shape	get the dimensions of numpy array <name1>
[ i for i , v <name2> enumerate ( <name1> ) if v [ 0 ] == <val3> ]	get the indices of tuples <name2> list of tuples <name1> where the first value is <val3>
struct . unpack ( '<L'   , <val6>   ) [ 0 ]	convert string of bytes <val6> into an int
<name6> [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ]	get the first row , second column ; second row , first column , and first row third column values of numpy array <name6>
<name4> ( powerset ( <val1>   ) )	create a <name4> with permutations of string <val1>
s in [ 'true'   , '1'   , 't'   , 'y'   , 'yes'   , 'yeah'   , 'yup'   , 'certainly'   , 'uh-huh'   ]	Convert string to boolean from defined set of strings
urllib . parse . quote ( <val4>   )	replace special characters in url <val4> using the '%xx' escape
<name2> . savefig ( <val1>   )	Save plot <name2> as svg file <val1>
len ( <name3> )	count the number of elements in array <name3>
sys . path . <name4> ( 0 , <val3>   )	<name4> directory <val3> to current directory
<name6> . execute ( 'INSERT OR REPLACE INTO master.table1 SELECT * FROM table1'   )	"Insert records in bulk from ""table1"" of ""master"" DB to ""table1"" of sqlite3 <name6> object"
re . match ( <val1>   , <val5>   )	Match regex <val1> on string <val5>
re . <name1> ( <val2>   , <val6>   )	<name1> regex <val2> on string <val6>
int ( <val3>   , 16 )	Convert hex string <val3> to integer
int ( <val4>   , 16 )	Convert hex string <val4> to integer
int ( <val2>   , 16 )	Convert hex string <val2> to integer
int ( <name3> , 16 )	Convert hex string <name3> to integer
<name6> ( <name5> , 16 )	Convert hex string <name5> to <name6>
"print ( 'Value is ""{}""'   . format ( <name3> ) )"	Print a string <name3> with string formatting
{{  <name4> |   <name2> ( <val3>   ) }}	Jinja <name2> elements of array <name4> with space string <val3>
help ( 'modules'   )	get a list of locally installed Python modules
[ [ [ x [ 0 ] ] for x <name2> <name5> [ i ] ] for i <name2> range ( len ( <name5> ) ) ]	Get only first element <name2> each of the innermost of the multidimensional list <name5>
sorted ( <name5> , key = str . upper )	Sort a string <name5> in lexicographic order
sorted ( sorted ( <name6> ) , key = str . upper )	sort string <name6> in lexicographic order
<name1> ( <name2> , key = str . lower )	get a <name1> list of the characters of string <name2> in lexicographic order , with lowercase letters first
pd . merge ( df1 , df2 , on = [ <val4>   , <val5>   , <val3>   , <val6>   ] , how = 'inner'   )	find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1' , for the columns <val4> , <val5> , <val3> and <val6> .
dict ( ( v , k ) for k , v <name6> <name4> . items ( ) )	Reverse key - value pairs <name6> a dictionary <name4>
<name5> . <name2> ( 'unicode_escape'   )	<name2> unicode string <name5> into a readable unicode literal
[ int ( i ) for i in <name6> ]	convert list of strings <name6> into list of integers
map ( int , [ '1'   , '2'   , '3'   ] )	convert a list with string ['1', '2', '3'] into list with integers
<name4> ( map ( <name3> , [ '1'   , '2'   , '3'   ] ) )	convert <name4> with str into <name4> with <name3>
<name5> . find_all ( 'a'   , href = re . compile ( 'http://www\\.iwashere\\.com/'   ) )	find all anchor tags in html <name5> whose url begins with http://www.iwashere.com
soup . find_all ( 'a'   , href = re . compile ( <val4>   ) )	find all anchors with a hyperlink that matches the pattern <val4>
<name3> . call ( [ 'java'   , '-jar'   , <val6>   ] )	execute a jar file <val6> using <name3>
cursor . execute ( 'INSERT INTO table (`column1`) VALUES (%s)'   , ( <name2> , ) )	insert row into mysql database with column 'column1' set to the <name2> <name2>
<name1> = re . sub ( '\\.com$'   , ''   , <name1> )	"remove a substring "".com"" from the end of string <name1>"
print ( <name1> . replace ( <val3>   , ''   ) )	remove a substring <val3> from the end of string <name1>
<name6> ( ', ,'   . join ( [ str ( i [ 0 ] ) for i in <name1> ] ) )	<name6> each first value from a list of tuples <name1> with string formatting
max ( min ( <name3> , <name1> ) , <name5> )	clamping floating number <name3> to be between <name5> and <name1>
re . findall ( '\\w+|[^\\w\\s]'   , <name5> , re . UNICODE )	split a unicode string <name5> into a list of words and punctuation characters with a regex
result = <name1> . engine . <name6> ( <val2>   )	<name6> raw sql queue <val2> in database <name1> in sqlalchemy - flask app
sys . exit ( 0 )	quit program
""""" """" """" . join ( c for c <name3> <name5> if c . isdigit ( ) )"	get digits <name3> string <name5>
re . <name3> ( ' +'   , <name6> )	<name3> string <name6> on one or more spaces with a regular expression
<name4> ( <name4> ( <name5> , 'id'   , None ) , <val6>   , None )	Evaluate a nested dictionary myobject.id.number to get <val6> if <name5> is present with <name4>
{  i : ( i * 2 ) for i in range ( 10 ) }	convert generator object to a dictionary
dict ( ( i , i * 2 ) for i in range ( 10 ) )	convert generator object to a dictionary
plt . cla ( )	Matplotlib clear the current axes .
<name1> = <name4> ( <name5> ( item ) for item in <name6> . <name3> ( ','   ) )	<name3> string <name6> into <name5> values and write <name4> to <name1>
bin ( ord ( <val1>   ) )	Convert ascii value <val1> to binary
<name1> ( my_string . split ( <val5>   , 1 ) [ 1 ] )	<name1> a string after a specific substring <val5> in string my_string 
print ( <name5> [ <val4>   ] [ 0 ] [ <val1>   ] )	get value of key <val1> associated with first index of key <val4> of dictionary <name5>
<name1> = re . sub ( '([aeiou]):(([aeiou][^aeiou]*){3})$'   , '\\1\\2'   , <name1> )	remove colon character surrounded by vowels letters in string <name1>
"<name1> . loads ( '{""foo"": 42, ""bar"": ""baz""}'   ) [ <val3>   ]"	extract data field <val3> from <name1> object
data = json . loads ( <name4> )	Convert JSON <name4> <name4> to Python object
data = json . loads ( <name5> )	Convert JSON <name5> <name5> to Python object
re . findall ( '#(\\w+)'   , <val4>   )	pars a string <val4> to extract hashtags into an array
<name1> ( e <name5> <name3> for e <name5> <name2> )	do a boolean check if a string <name3> contains <name1> of the items <name5> list <name2>
plt . <name3> ( figsize = ( <val2> , <val6> ) )	change <name3> size to <val2> by <val6> in matplotlib
<name4> . translate ( None , <name2> . <name5> )	Strip <name5> from <name2> <name4>
<name6> . urlsafe_b64decode ( <name5> . encode ( 'ascii'   ) )	django urlsafe <name6> decode string <name5> with decryption
len ( dict_test ) + sum ( len ( v ) for v <name3> dict_test . values ( ) )	get the number of all keys <name3> the nested dictionary dict_list
<name3> ( <name4> ) . split ( 'x'   ) [ 1 ]	return the conversion of decimal <name4> to <name3> without the '0x' prefix
<name4> ( str ( <val5> ) )	create a <name4> containing digits of number <val5> as its elements
[ int ( x ) for x in str ( <name2> ) ]	converting integer <name2> to list
br . select_form ( nr = 0 )	select a first form with no name in mechanize
json . load ( codecs . open ( <val6>   , 'r'   , <val1>   ) )	Open file <val6> in read mode with encoding of <val1>
<name1> . loads ( open ( <val6>   ) . read ( ) . decode ( 'utf-8-sig'   ) )	load <name1> file <val6> with utf -8 bom header
<name3> = smtplib . SMTP ( <val4>   , <val2> )	setup a smtp mail <name3> to <val4> with port <val2>
int ( '{:08b}'   . format ( <name4> ) [ : : -1 ] , 2 )	revers correlating bits of integer <name4>
<name4> . set_index ( [ <val1>   ] , append = True )	add column <val1> to index of dataframe <name4>
list ( <name3> . <name4> ( ) )	get keys and <name4> of dictionary <name3>
<name3> ( <name4> . <name1> ( ) )	get keys and <name1> of dictionary <name4> as a <name3>
session . <name6> ( <name1> ) . filter ( <name1> . <name5> >   timedelta ( <name2> = <val3> ) ) . <name4> ( )	<name6> <name4> data from table <name1> where the value of column <name5> is bigger than <val3> <name2>
os . system ( 'msbuild project.sln /p:Configuration=Debug'   )	compile Visual Studio project project.sln from the command line through python
<name6> ( list ( <name5> . keys ( ) ) , <name2> = int )	get <name6> <name2> in dictionary <name5>
os . system ( <val2>   )	execute command <val2> from python script
<name6> . __name__	get a name of function <name6> as a string
np . <name3> ( <name6> == <name6> [ ( 0 ) , : ] , axis = 0 )	check if <name3> values in the columns of <name6> numpy matrix <name6> are same
sorted ( <name4> , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) )	sort list <name4> in ascending order based on the addition of the second and third elements of each tuple in it
sorted ( <name1> , key = lambda x : ( <name4> ( x [ 1 : 3 ] ) , x [ 0 ] ) , reverse = True )	sort <name1> list of tuples <name1> by the <name4> of second and third element of each tuple
sorted ( <name6> , key = lambda x : ( <name1> ( x [ 1 : ] ) , x [ 0 ] ) )	sorting a list of tuples <name6> by the <name1> of the second elements onwards , and third element of the tuple
sorted ( <name3> , key = lambda x : ( <name5> ( x [ 1 : ] ) , x [ 0 ] ) , <name4> = True )	sort the list of tuples <name3> by the <name5> of every value except the first and by the first value in <name4> order
del request . <name5> [ <val2>   ]	clear <name5> key <val2>
datetime . datetime . strptime ( <val4>   , <val6>   ) . <name1> ( )	convert <name1> string <val4> to <name1> object in format <val6>
re . sub ( '[^\\x00-\\x7F]+'   , ' '   , <name4> )	Replace non - ASCII characters in string <name4> with a single space
<name4> = [ i for i in range ( <val5> ) ]	Get a list <name4> from 1 to <val5>
[ m [ 0 ] for m in re . compile ( <val1>   ) . findall ( <val3>   ) ]	use regex pattern <val1> to split string <val3>
[ i [ 0 ] for i in re . findall ( <val5>   , <name1> ) ]	use regular expression <val5> to split string <name1>
fig . subplots_adjust ( wspace = 0 , hspace = 0 )	remove the space between subplots in matplotlib .pyplot
<name3> [ : : -1 ]	Reverse list <name3>
<name4> . writerow ( <name5> )	write a list of strings <name5> to csv object <name4>
{{  ( item . <name1> |   <name1> ) : <val6>  }}	Jinja2 formate <name1> item.date accorto pattern <val6>
re . split ( '(?<=[\\.\\?!]) '   , <name2> )	Split a string <name2> with comma , question mark or exclamation by non - consuming regex using look - behind
re . compile ( <val1>   )	create a regular expression object with the pattern <val1>
<name5> = [ ]	declare an array <name5>
intarray = <name1> ( <val4>   )	declare an <name1> with element <val4>
[ sublist [ : : -1 ] for sublist in <name2> [ : : -1 ] ]	given list <name2> , reverse the all sublists and the list itself
""""" """" """" . join ( [ 'I '   , '<'   , '3s U '   , '&'   , ' you luvz me'   ] )"	unescape special characters without splitting data in array of strings ['I ', u'<', '3s U ', u'&', ' you luvz me']
<name6> . <name5> ( <name6> . CRITICAL )	<name5> <name6> while running unit tests in python django
cursor . execute ( 'INSERT INTO index(url) VALUES(%s)'   , ( <name3> , ) )	adding <name3> <name3> to mysql row
<name6> [ <val3>   ] = <name6> [ <val4>   ] . dt . strftime ( '%d%m%Y'   )	convert column of date objects <val4> in pandas dataframe <name6> to strings in new column <val3>
<name3> . <name5> ( <val6>   ) [ 0 ]	<name5> string <name3> by <val6> and get the first element
<name3> . query ( 'index < @start_remove or index > @end_remove'   )	drop rows of dataframe <name3> whose index is smaller than the value of start_remove or bigger than the value of end_remove
<name1> . loc [ ( <name1> . <name5> <   <name2> ) |   ( <name1> . <name5> >   <name6> ) ]	Drop the rows in pandas timeseries <name1> from the row containing <name5> <name2> to the row containing <name5> <name6>
<name4> . isnull ( ) . sum ( )	Get the number of NaN values in each column of dataframe <name4>
<name1> . reset_index ( inplace = True )	reset index of dataframe <name1> so that existing index values are transferred into <name1> as columns
[ x [ <val6>   ] for x in <name4> ]	generate a list containing values associated with the key <val6> of each dictionary inside list <name4>
np . <name1> ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) . tolist ( )	convert numpy <name1> into python list structure
ast . literal_eval ( <val5>   )	converting string <val5> to a tuple
<name5> . sort ( key = lambda x : x [ 1 ] )	keep a list <name5> of lists sorted as it is created by second element
<name3> ( map ( <name3> , set ( map ( lambda i : tuple ( i ) , <name5> ) ) ) )	remove duplicated items from <name3> of lists <name5>
[ <name3> ( i ) <name6> i in set ( tuple ( i ) <name6> i in <name2> ) ]	uniqueness <name6> <name3> of lists <name2>
return <name4> . groups . filter ( name = <val6>   ) . exists ( )	in django , check if a <name4> is in a group <val6>
return <name6> . <name4> . filter ( name__in = [ 'group1'   , 'group2'   ] ) . exists ( )	check if a <name6> <name6> is in a group from list of <name4> ['group1', 'group2']
logging . getLogger ( ) . setLevel ( logging . DEBUG )	Change log level dynamically to 'DEBUG' without restarting the application
""""" """" """" . join ( str ( i ) for i <name6> ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) )"	Concat each values <name6> a tuple (34.2424, -64.2344, 76.3534, 45.2344) to get a string
""""" """" """" . join ( [ <name5> [ x : x + 2 ] [ : : -1 ] for x <name2> range ( 0 , len ( <name5> ) , 2 ) ] )"	swap each pair of characters <name2> string <name5>
plt . savefig ( <val4>   , <name6> = <val5> )	save current figure to file <val4> with resolution of <val5> <name6>
<name1> = [ [ x for x <name5> sublist <name4> x not <name5> to_del ] for sublist <name5> <name1> ]	delete items from list <name1> <name4> the item exist <name5> list to_dell
[ item for item <name4> <name5> if 1 <name4> item ]	find all the elements that consists value '1' <name4> <name5> list of tuples 'a'
[ item for item <name1> <name6> if item [ 0 ] == <val3> ]	find all elements <name1> <name6> list of tuples <name6> where the first element of each tuple equals <val3>
{  p . id : {  'id'   : p . id , 'position'   : ind }   for ind , p <name6> <name5> ( <name1> ) }	Get the index value <name6> list <name1> using <name5> <name6> list comprehension
exec ( compile ( open ( <val3>   ) . read ( ) , <val3>   , 'exec'   ) )	load a file <val3> into the python console
<name1> = session . query ( <name5> ) . <name2> ( )	SQLAlchemy <name2> the number of <name1> in table <name5>
dfs = pd . read_excel ( <name4> , sheetname = None )	read excel file <name4> using pandas
struct . <name6> ( 'd'   , binascii . unhexlify ( <val3>   ) )	<name6> the binary data represented by the hexadecimal string <val3> to a float
<name1> [ tuple ( <name2> ) ]	Get index of numpy array <name1> with another numpy array <name2>
map ( <name3> , permutations ( [ 2 , 3 , 4 ] ) )	find all possible sequences of elements in a <name3> [2, 3, 4]
<name2> ( <name5> , key = <name1> . index )	sort a list <name5> based on another <name2> list <name1>
<name6> = pd . DataFrame ( <val5> , index = np . arange ( len ( <name1> ) ) , columns = <name3> )	create a dataframe <name6> filled with zeros with indices from <val5> to length of <name1> and column names from <name3>
<name1> . <name2> ( <val4>   )	<name2> the index of sub string <val4> in <name1>
<name3> . <name5> ( <val1>   )	<name5> the index of sub string <val1> in <name3>
<val2>   . <name4> ( <val5>   )	find the <name4> of sub string <val5> in string <val2>
<val2>   . <name3> ( <val4>   )	find the <name3> of sub string <val4> in string <val2>
<name2> . <name5> ( <val1>   )	<name5> the index of sub string <val1> in string <name2>
<name2> . <name4> ( <val5>   )	<name4> the index of sub string <val5> in string <name2>
<name1> . <name4> ( <val2>   , <val6> )	<name4> the index of sub string <val2> in string <name1> starting from index <val6>
<name1> . <name3> ( <val4>   , <val5> )	<name3> the index of sub string <val4> in string <name1> starting from index <val5>
<name3> . <name2> ( <val1>   , <val4> )	<name2> the index of sub string <val1> in string <name3> starting from index <val4>
<name6> . <name4> ( <val5>   , <val3> , <val2> )	<name4> the index of sub string <val5> in string <name6> starting from index <val3> and ending at index <val2>
sorted ( d , key = lambda x : datetime . datetime . strptime ( x , '%m-%Y'   ) )	sort list of date strings 'd'
re . split ( '\\.\\s'   , <name3> )	Get all the sentences from a string <name3> using regex
""""" <val3> """" [ : 4 ]"	get all characters in string <val3> up to the fourth index
s . rfind ( <val3>   )	cut a string by delimiter <val3>
s [ : s . rfind ( <val4>   ) ]	cut a string using delimiter <val4>
open ( <val1>   , 'a+b'   ) . write ( <val6>   )	append to file <val1> content <val6>
print ( [ i for i in re . <name1> ( '([\\d.]+|\\W+)'   , <val4>   ) if i ] )	<name1> string <val4> into tokens
re . findall ( '[\u4e00-\u9fff]+'   , <name4> )	Find all Chinese characters in string <name4>
s . <name1> ( <val6>   )	<name1> string <val6> by letter <val6>
subprocess . Popen ( [ 'rm'   , '-r'   , 'some.file'   ] )	run shell command 'rm -r some.file' in the background
dict ( ( d [ 'name'   ] , d ) for d in <name5> )	convert a list of dictionaries ` <name5> into a dictionary of dictionaries
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d %H:%M'   )	print current date and time in a regular format
<name5> . strftime ( '%Y-%m-%d %H:%M'   )	print current date and <name5> in a regular format
re . findall ( '[bcdfghjklmnpqrstvwxyz]+'   , 'CONCERTATION'   , re . IGNORECASE )	find consecutive consonants in a word CONCENTRATION using regex
[ i for i , e <name1> enumerate ( <name3> ) if e != 0 ]	get <name3> list of indices of non zero elements <name1> <name3> list <name3>
map ( int , re . findall ( '\\d+'   , string1 ) )	get multiple integer values from a string 'string1'
os . <name5> . dirname ( sys . <name2> )	get the <name5> of Python <name2> under windows
<name1> . xaxis . set_label_position ( 'top'   )	move an x - axis label to the top of a plot <name1> in matplotlib
<name1> . xaxis . tick_top ( )	move x - axis to the top of a plot <name1>
<name4> . xaxis . set_ticks_position ( 'top'   )	Move x - axis of the pyplot object <name4> to the top of a plot in matplotlib
datetime . strptime ( <val6>   , <val3>   )	parse string <val6> to DateTime object using format <val3>
sys . exit ( <val5> )	terminate the script using status value <val5>
sys . exit ( <val4>   )	abort the execution of the script using message <val4>
sys . exit ( )	abort the execution of a python script
[ max ( abs ( x ) for x <name3> <name5> [ i : i + <val4> ] ) for i <name3> range ( 0 , len ( <name5> ) , <val4> ) ]	find maximum with lookahead = <val4> <name3> a list <name5>
os . chdir ( <val4>   )	set the current working directory to <val4>
os . chdir ( <name2> )	set the current working directory to <name2> <name2>
<name3> = [ x for x <name6> <name1> if <name2> isinstance ( x , <name5> ) ]	get a list <name3> of all the items <name6> list <name1> that are <name2> of type <name5>
"tree . <name6> ( "".//a[text()='Example']"" ) [ 0 ] . tag"	match contents of an element to 'Example' in <name6> ( lxml )
""""" <val6> """" . join ( [ ( str ( k ) + ' '     + str ( v ) ) for k , v <name2> list ( <name5> . items ( ) ) ] )"	concatenate key / value pairs <name2> dictionary <name5> with string <val6> into <name5> single string
print ( set ( re . sub ( '[\x00-\x7f]'   , ''   , <val4>   ) ) )	Strip all non - ASCII characters from a unicode string , <val4>
print ( re . sub ( '[\x00-\x7f]'   , ''   , <val5>   ) )	Get all non - ascii characters in a unicode string <val5>
ast . literal_eval ( <val5> )	build a dict of key : value pairs from a string representation of a dict , <val5>
print ( <name6> . decode ( 'unicode_escape'   ) )	Print string <name6> with proper unicode representations
print ( <name6> . encode ( <val4>   ) . decode ( <val2>   ) . encode ( <val4>   ) . decode ( <val2>   ) )	Normalize string <name6> from <val4> code to <val2> code
zip ( <name2> , <name4> )	merge lists <name2> and <name4> into a list of tuples
<name4> ( zip ( <name1> , b ) )	merge lists <name1> and <name1> into <name1> <name4> of tuples
<name3> . set_index ( <val4>   ) . to_dict ( )	convert pandas DataFrame <name3> to a dictionary using <val4> field as the key
<name5> . set_index ( <val4>   ) [ <val1>   ] . to_dict ( )	convert pandas dataframe <name5> with fields <val4> , <val1> to dictionary
re . sub ( '\\([^)]*\\)'   , ''   , <name6> )	remove parentheses and text within it in string <name6>
""""" <val6> """" . replace ( ' '   , ''   ) . isalpha ( )"	Check if string <val6> only contains letters and spaces
[ ( <name5> + <name6> ) for <name5> , <name6> <name2> zip ( <name4> , <name1> ) ]	sum each element <name5> <name2> list <name4> with element <name6> at the same index <name2> list <name1> .
sorted ( list ( <name6> . items ( ) ) , key = lambda item : item [ <val5> ] [ <val5> ] )	sort a python dictionary <name6> by element <val5> of the value
sorted ( <name5> ( range ( len ( <name4> ) ) ) , key = lambda i : <name4> [ i ] ) [ -2 : ]	get index of the biggest 2 values of <name4> <name5> <name4>
zip ( * sorted ( enumerate ( <name5> ) , key = operator . <name4> ( 1 ) ) ) [ 0 ] [ -2 : ]	get indexes of the largest 2 values from <name5> list <name5> using <name4>
sorted ( <name3> ( range ( len ( <name2> ) ) ) , key = lambda i : <name2> [ i ] , reverse = True ) [ : <val6> ]	get the indexes of the largest <val6> values from <name2> <name3> of integers <name2>
list ( <name3> . keys ( ) ) . <name1> ( <val4>   )	get <name1> of key <val4> in dictionary <name3>
print ( <val3>   . <name4> ( score ) )	Print + 1 using <name4> <val3>
[ k for k , g in itertools . groupby ( [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] ) ]	remove adjacent duplicate elements from a list [1, 2, 2, 3, 2, 2, 4]
[ int ( x ) for x in <val5>   . split ( ','   ) ]	convert the string <val5> to a list of integers
dict ( [ ( 'A'   , 1 ) , ( 'B'   , 2 ) , ( 'C'   , 3 ) ] )	convert list of key - value tuples [('A', 1), ('B', 2), ('C', 3)] into dictionary
np . savetxt ( <val3>   , <name4> )	save numpy array <name4> into text file <val3>
<name2> = subprocess . check_output ( <val3>   , shell = True )	store the output of command <val3> in variable <name2>
<name2> [ <name2> . columns - [ <val4>   ] ]	get all column name of dataframe <name2> except for column <val4>
( ( <val6> <   <name3> ) &   ( <name3> <   <val2> ) ) . sum ( )	get count of values in numpy array <name3> that are between values <val6> and <val2>
date . today ( ) . strftime ( '%A'   )	Get day name from a datetime object
{{  car . date_of_manufacture |   <name2> }}	Jinja parse <name2> object car.date_of_manufacture to use format pattern <name2>
{{  <name4> . <name3> . strftime ( <val6>   ) }}	Get the date object <name3> of object <name4> in string format <val6>
[ item for <name3> in l for item in <name3> ]	make a flat list from list of lists <name3>
<name3> ( itertools . chain ( * <name6> ) )	make a flat <name3> from <name3> of lists <name6>
<name4> ( itertools . chain . from_iterable ( <name6> ) )	make a flat <name4> from <name4> of lists <name6>
ord ( <val6>   )	convert ascii value <val6> to int
re . sub ( '(?m)^[^\\S\\n]+'   , <val3>   , <val2>   )	replace white spaces in string <val2> with empty string <val3>
re . sub ( '(?m)^\\s+'   , ''   , <val3>   )	remove white spaces from all the lines using a regular expression in string <val3>
<name3> , <name4> , <name6> = [ 1 , 2 , 3 ]	destruct elements of list [1, 2, 3] to variables <name3> , <name4> and <name6>
[ <name6> ( v ) for k , v in itertools . groupby ( <name3> , key = lambda x : x [ : 5 ] ) ]	split <name6> <name3> into a <name6> of lists whose elements have the same first five characters
<name6> = re . sub ( '\\(+as .*?\\) '   , ''   , <name6> )	remove all instances of parenthesesis containing text beginning with as  from string <name6>
print ( <name2> . rstrip ( '\n'   ) )	skip the newline while printing <name2>
<name6> . <name1> . <name5> . tolist ( )	get <name1> <name5> of pandas dataframe <name6> as list
[ i for i , v <name2> enumerate ( <name6> ) if v >   <val5> ]	create <name6> list containing the indices of elements greater than <val5> <name2> list <name6>
sorted ( <name2> , <name4> = True )	<name4> list <name2>
sorted ( <name2> , key = lambda d : d . get ( 'key'   , {}  ) . get ( 'subkey'   ) , <name4> = True )	sort list of nested dictionaries <name2> in <name4> based on values associated with each dictionary 's key ' subkey '
<name2> . <name1> ( key = lambda e : e [ <val4>   ] [ <val5>   ] , <name3> = True )	<name1> list of nested dictionaries <name2> in <name3> order of <val4> and <val5>
df . <name1> ( )	remove decimal points in pandas data frame using <name1>
gca ( ) . get_lines ( ) [ n ] . get_xydata ( )	Get data from matplotlib plot
<name4> [ : , -2 : ]	get the maximum 2 values per row in array <name4>
<name5> . <name2> . get ( <val3>   , ''   )	Get value for <val3> parameter in <name2> <name5> in Django
pprint ( dict ( list ( <name6> . items ( ) ) ) )	pretty - print ordered dictionary <name6>
url ( '^$'   , include ( 'sms.urls'   ) ) ,	Confirm urls in Django properly
<name1> ( '^'   , include ( 'sms.urls'   ) ) ,	Configure <name1> in django properly
max_item = max ( <name5> , key = operator . itemgetter ( 1 ) )	get the tuple in list <name5> that has the largest item in the second index
max ( <name2> , key = operator . itemgetter ( 1 ) )	find tuple in list of tuples <name2> with the largest second element
<name2> . <name6> ( '3M'   , how = 'sum'   )	<name6> series <name2> into 3 months bins and sum each bin
[ <name5> [ i ] for i in ( <val3> , <val2> , <val1> ) ]	extract elements at indices ( <val3> , <val2> , <val1> ) from <name5> list <name5>
[ line for line in open ( <val5>   ) if <val3>     in line ]	filter lines from a text file <val5> which contain a word <val3>
<name4> . <name4> . strptime ( <name6> , '%Y-%m-%dT%H:%M:%SZ'   )	convert a date string <name6> to a <name4> object
<name2> . read_csv ( <name3> , sep = '\t'   , lineterminator = '\r'   )	reading tab - delimited csv file <name3> with <name2> on mac
<val4>   . <name2> ( <val3>   , '?'   , 1 )	<name2> only first occurence of string <val3> from a string <val4>
archive . write ( <name4> , os . path . <name1> ( <name4> ) )	zip file <name4> using its <name1> as directory name
dict ( x [ 1 : ] for x in reversed ( <name2> ) )	create a dictionary of pairs from a list of tuples <name2>
[ ( x1 - x2 ) for x1 , x2 in zip ( <name4> , <name5> ) ]	subtract elements of list <name4> from elements of list <name5>
<name1> [ 0 ] . isdigit ( )	check if <name1> <name1> starts with a number
<name3> . startswith ( ( <val1>   , <val5>   , <val4>   , <val2>   , <val6>   , <val3>   , <val1>   , <val5>   , <val4>   , <val2>   ) )	Check if string <name3> starts with any of the elements in list ( <val1> , <val5> , <val4> , <val2> , <val6> , <val3> , <val1> , <val5> , <val4> , <val2> )
<name3> ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	<name3> script ' s directory
re . <name6> ( <val3>   , <name4> )	<name6> string <name4> by the occurrences of regex pattern <val3>
plt . <name1> ( * zip ( * <name5> ) )	Make a <name1> plot using unpacked values of list <name5>
<name6> ( zip ( * <name1> ) )	rearrange <name6> of tuples <name1>
<name2> . groupby ( np . arange ( len ( <name2> . <name5> ) ) // 3 , axis = 1 ) . mean ( )	Get average for every three <name5> in <name2> dataframe
""""" """" """" . join ( chr ( i ) for i in <name1> )"	convert a list <name1> of ascii values to a string
sum ( x == <name1> for x <name2> list ( <name4> . values ( ) ) )	count the number of pairs <name2> dictionary <name4> whose value equal to <name1>
sum ( 1 for x <name3> list ( <name1> . <name4> ( ) ) if <name5> ( x ) )	count the number of <name4> <name3> <name1> dictionary that are predicate to function <name5>
struct . unpack ( 'f'   , struct . pack ( 'f'   , <val1> ) )	convert double <val1> to float
<name1> = ( <name4> - <name3> ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <name3> .date <name4> to utc <name1>
<name5> . <name6> ( <val4>   )	<name6> column <val4> in panda dataframe <name5>
<name1> = sorted ( <name1> , key = <name4> x : x . <name2> , reverse = True )	Sort <name1> data <name1> in descending order based on the <name2> attribute of elements using <name4> function
<name5> ( bool ( <name3> ) )	<name5> the truth value of <name3>
<name5> = <name5> . <name4> ( <name3> = {  <name1> : <val2>  }  )	<name4> <name1> row <name3> label in dataframe <name5> to <val2>
km . fit ( <name1> . reshape ( -1 , 1 ) )	Fit Kmeans function to a one - dimensional array <name1> by reshaping it to be a multidimensional array of single values
sorted ( words , key = lambda x : 'a'     + x if x . startswith ( <val1>   ) else 'b'     + x )	Sort a list of strings 'words' such that items starting with <val1> come first .
webbrowser . <name1> ( <val4>   )	<name1> the login site <val4> in the browser
dict ( ( k , v ) for k , v <name2> <name1> . items ( ) if <val4> <   k <   <val3> )	fetch all elements <name2> a dictionary <name1> , falling between two keys <val4> and <val3>
dict ( ( k , v ) for k , v <name3> parent_dict . items ( ) if k >   <val6> and k <   <val4> )	fetch all elements <name3> a dictionary 'parent_dict' where the key is between the range of <val6> to <val4>
[ list ( x ) for x in zip ( * sorted ( zip ( <name3> , <name6> ) , key = <name4> pair : pair [ 0 ] ) ) ]	sort two lists <name3> and <name6> together using <name4> function
sum ( ( ( i >   <val2> ) for i <name1> <name3> ) )	get the number of values <name1> list <name3> that is greater than <val2>
len ( [ 1 for i <name2> <name4> if ( i >   <val6> ) ] )	get the number of values <name2> list <name4> that is greater than <val6>
[ ( x + tuple ( y ) ) for x , y in <name6> ( <name6> ( <name3> , <name2> ) , <name5> ) ]	<name6> list <name3> , <name2> , <name5> into <name3> list of tuples
os . chmod ( <name3> , stat . S_IRUSR |   stat . S_IRGRP |   stat . S_IROTH )	changing permission of file <name3> to stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
parser . add_argument ( <val2>   , nargs = '*'   )	argparse associate zero or more arguments with flag <val2>
<name2> = [ ( i == j ) for i , j <name5> zip ( <name6> , <name4> ) ]	get a list of booleans <name2> that shows wether the corresponding items <name5> list <name6> and <name4> are equal
[ ( <name2> [ i ] == <name1> [ i ] ) for i <name5> range ( len ( <name2> ) ) ]	create a list which indicates whether each element <name5> <name2> and <name1> is identical
<name2> = pd . DataFrame ( <name6> = <name4> . <name6> )	create an empty data frame <name2> with <name6> from another data frame <name4>
struct . <name1> ( 'h'   , <name5> [ 0 : 2 ] )	<name1> first and second bytes of byte string <name5> into integer
<name2> ( '\n'   . join ( '  '   . join ( map ( str , row ) ) for row in <name5> ) )	<name2> list <name5> into a table - like shape
driver . find_element_by_name ( '<check_box_name>'   ) . is_selected ( )	check if a checkbox is checked in selenium python webdriver
driver . find_element_by_id ( <val1>   ) . is_selected ( )	determine if checkbox with id <val1> is checked in selenium python webdriver
[ ( a if a else <val4> ) for a <name1> [ <val5> , 1 , <val5> , 3 ] ]	replace <val5> with <val4> <name1> the list [0, 1, 0, 3]
<val5>   . encode ( ) . decode ( 'unicode-escape'   )	Produce a string that is suitable as Unicode literal from string <val5>
<val1>   . decode ( 'unicode-escape'   )	Parse a unicode string <val1>
chr ( int ( 'fd9b'   , 16 ) ) . encode ( 'utf-8'   )	convert Unicode codepoint to utf8 hex
<name5> ( '0x%X'     % <name3> )	use upper case letters to <name5> hex <name3> <name3>
<name4> = [ x for x <name1> <name3> if x ]	get a list <name4> that contains all non - empty elements <name1> list <name3>
<name5> ( * [ ( int ( i . strip ( ) ) if i else None ) for i in <name6> . split ( ':'   ) ] )	create a <name5> object using string <name6>
<name4> . find_all ( [ <val5>   , <val1>   ] )	Find all the tags <val5> and <val1> from Beautiful Soup object <name4>
print ( <name2> . __name__ )	get the name of function <name2> as a string
""""" """" """" . join ( '{}{}'   . format ( key , val ) for key , val in sorted ( <name4> . items ( ) ) )"	convert dictionary <name4> into string
""""" """" """" . join ( '{}{}'   . format ( key , val ) for key , val in list ( <name5> . items ( ) ) )"	convert dictionary <name5> into string
<name4> = <name5> [ : ]	copy list <name5> as <name4>
<name3> = <name4> ( <name1> )	copy <name4> <name1> as <name3>
<name4> = <name6> . <name6> ( <name2> )	<name6> list <name2> as <name4>
<name2> = <name6> . deepcopy ( <name3> )	deep <name6> list <name3> as <name2>
[ i for i in <name2> ]	make a copy of list <name2>
<name4> . <name2> ( frameon = False )	remove frame of <name2> in plot <name4>
""""" <val3> """" . encode ( 'utf-16'   , 'surrogatepass'   ) . decode ( 'utf-16'   )"	Print a emoji from a string <val3> having surrogate pairs
globals ( ) [ <val5>   ] ( )	calling a function named <val5> in the module
urllib . request . urlopen ( <val4>   ) . getcode ( )	Check the status code of url <val4>
print ( urllib . request . urlopen ( <val6>   ) . getcode ( ) )	Checking if website <val6> is up
<name6> . find_element_by_css_selector ( <val4> ) . <name1> ( )	Selenium <name6> <name1> a hyperlink with the pattern <val4>
<name1> . to_pickle ( <name2> )	store data frame <name1> to file <name2> using pandas , python
<name2> . groupby ( by = <name2> . <name1> , axis = 1 ) . <name3> ( )	calculate the <name3> of <name1> with same name in dataframe <name2>
<name4> . <name2> ( key = lambda x : ( x . <name3> , x . <name5> ) , <name6> = True )	<name2> list <name4> by each element ' s attribute <name3> and attribute <name5> in <name6> order
<name2> = <name4> . split ( ) [ -1 ]	get <name2> value <name2> of a png image <name4>
<name4> . findAll ( <val5>   , style = <val2>   )	BeautifulSoup find tag <val5> with styling <val2> in HTML string <name4>
cursor . execute ( <name2> , list ( <name3> . <name5> ( ) ) )	Execute SQL statement <name2> with <name5> of dictionary <name3> as parameters
df . to_csv ( <val2>   , index = False , sep = <val4>   )	Convert CSV file <val2> to Pandas dataframe using separator <val4>
globals ( ) . <name4> ( vars ( args ) )	<name4> the globals() dictionary with the contents of the vars(args) dictionary
re . findall ( '\\[(.*?)\\]'   , <name1> )	find all substrings in <name1> beginning and ending with square brackets
<name3> ( '%.2f kg = %.2f lb = %.2f gal = %.2f l'     % ( <name2> , <name6> , <name5> , var4 ) )	Format all floating variables <name2> , <name6> , <name5> , <name2> to <name3> to two decimal places .
<name3> = dict ( ( k , v ) for k , v in <name3> . <name1> ( ) if v >   0 )	Remove all <name1> from a dictionary <name3> where the values are less than 1
<name4> = {  k : v for k , v in list ( <name4> . <name3> ( ) ) if v >   <val6> }	Filter dictionary <name4> to have <name3> with value greater than <val6>
pd . to_datetime ( pd . Series ( date_stngs ) )	convert a string of date strings date_stngs  to datetime objects and put them in a dataframe
<name1> . iloc [ 2 , 0 ]	get value at index [2, 0] in dataframe <name1>
<name4> . rcParams . update ( {  'font.size'   : <val6> }  )	change the font size on plot <name4> to <val6>
<name4> . DataFrame ( list ( <name2> . items ( ) ) , columns = [ <val1>   , <val5>   ] )	converting dictionary <name2> into a dataframe <name4> with keys as data for column <val1> and the corresponding values as data for column <val5>
pd . DataFrame ( <name3> . values * <name5> . values , columns = <name3> . columns , <name6> = <name3> . <name6> )	create a dataframe containing the multiplication of element - wise in dataframe <name3> and dataframe <name5> using <name6> name and column labels of dataframe <name3>
re . findall ( '\\d+\\.\\d+'   , <val6>   )	extract floating number from string <val6>
re . findall ( '[-+]?\\d*\\.\\d+|\\d+'   , <val3>   )	extract floating point numbers from a string <val3>
zip ( <name4> , <name4> , <name4> )	pair each element in list <name4> 3 times into a tuple
<name5> [ <val1>   ] . str . lower ( )	lowercase a python dataframe string in column <val1> if it has missing values in dataframe <name5>
jsobj [ 'a'   ] [ 'b'   ] [ <val1>   ] . <name3> ( {  'f'   : var6 , 'g'   : var7 , 'h'   : var8 }  )	<name3> dict {'f': var6, 'g': var7, 'h': var8} to value of key <val1> in dict jsobj['a']['b']
""""" """" """" . join ( <name1> )"	Concat a list of strings <name1> using string formatting
<name1> ( v for v <name5> list ( <name3> . <name6> ( ) ) if v >   <val2> )	<name1> <name6> greater than <val2> <name5> dictionary <name3>
<name1> . <name6> ( <name5> = True )	<name6> flask application <name1> in <name5> mode .
<name2> . <name5> ( <name2> . <name6> [ [ 1 , 3 ] ] , inplace = True )	<name5> rows whose <name6> value in list [1, 3] in dataframe <name2>
df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )	replace nan values in a pandas data frame with the average of columns
[ o . <name6> for o <name2> <name4> ]	extract attribute <name6> from each object <name2> list <name4>
<name2> . strftime ( <val4>   , <name2> . gmtime ( os . path . getmtime ( <name1> ) ) )	python get <name2> stamp on <name1> <name1> in <val4> format
all ( item in list ( <name2> . items ( ) ) for item in list ( <name4> . items ( ) ) )	check if dictionary <name4> is a <name4> of dictionary <name2>
[ str ( wi ) for wi <name1> <name6> ]	Convert integer elements <name1> list <name6> to strings
df2 = df . reset_index ( )	Reset the indexes of a pandas data frame
<name1> . strftime ( '%m/%d/%Y'   )	format datetime in <name1> as string in format '%m/%d/%Y
print ( 'Total cost is: ${:,.2f}'   . <name5> ( <name4> ) )	<name5> floating point number <name4> to be rounded off to two decimal places and have a comma thousands '  seperator
<name5> . groupby ( np . arange ( len ( <name5> . <name2> ) ) // 2 + 1 , axis = 1 ) . <name1> ( ) . add_prefix ( 's'   )	<name1> the values in each row of every two adjacent <name2> in dataframe <name5>
<name3> = [ <name4> . <name4> ( ) for _ in range ( <val6> ) ]	create list <name3> with <val6> <name4> floating point numbers between 0.0 and 1.0
print ( soup . <name4> ( 'a'   , <name6> = re . compile ( '.*follow\\?page.*'   ) ) )	<name4> <name6> value that has string 'follow?page' inside it
sys . stdout . flush ( )	immediately see output of print statement that doesn ' t end in a newline
<name3> , <name5> = <name6> . choice ( list ( <name2> . items ( ) ) )	get a <name6> key <name3> and value <name5> form a dictionary <name2>
<name2> ( <val6>   )	split string <val6> into a <name2> of characters
[ w for w <name6> open ( 'file.txt'   ) if not re . search ( '[aeiou]{2}'   , w ) ]	Create a list containing words that contain vowel letter followed by the same vowel <name6> file 'file.text'
pat = re . compile ( '^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'   )	Validate IP address using Regex
exec ( compile ( open ( <val6>   ) . read ( ) , <val6>   , 'exec'   ) )	execute file <val6>
session . query ( <name1> ) . <name5> ( <name1> . <name2> ) . group_by ( <name1> . <name2> ) . <name6> ( )	SQLAlchemy <name6> the number of rows with <name5> values in column <name2> of table <name1>
<name4> = <name4> . dropna ( axis = 1 , how = 'all'   )	remove null columns in a dataframe <name4>
<name6> ( x . count ( <val5> ) == 3 for x <name2> <name1> )	check if <name6> lists <name2> list <name1> have three elements of integer <val5>
[ x [ 0 ] for x <name6> <name2> <name5> <name3> ( x [ 0 ] == y [ 0 ] for y <name6> <name1> ) ]	Get a list comparing two lists of tuples <name2> and <name1> <name5> <name3> first value <name6> <name2> matches with first value <name6> <name1>
tex . delete ( '1.0'   , END )	clear the textbox text in tkinter
datetime . datetime . fromtimestamp ( <name5> ) . strftime ( <val4>   )	Convert long int <name5> into date and time represented in the the string format <val4>
system ( 'python myscript.py'   )	Spawn a process to run python script myscript.py in C + +
<name1> . <name5> ( key = operator . attrgetter ( <val6>   ) )	<name5> a list <name1> of class objects by their values for the attribute <val6>
<name5> . <name3> ( key = lambda x : x . <name4> )	<name3> list <name5> by the <name4> attribute of each object
print ( type ( tf . Session ( ) . run ( tf . constant ( [ 1 , 2 , 3 ] ) ) ) )	convert a tensor with list of constants [1, 2, 3] into a numpy array in tensorflow
<name2> ( itertools . chain ( * <name6> ) )	convert <name2> <name6> from being consecutive sequences of tuples into <name6> single sequence of elements
<name3> . setdefault ( <val4>   , <val6> )	Set value for key <val4> in dict <name3> to <val6> if key <val4> does not exist or if value is none
<name2> . groupby ( [ <val4>   ] ) . <name1> ( )	Do group by on <val4> column in <name2> and get its <name1>
min ( <name4> , key = lambda x : abs ( x - <name2> ) )	get number in list <name4> closest in value to number <name2>
<name5> ( x <name1> <name4> for x <name1> <name6> )	check if <name5> of the items <name1> <name6> appear <name1> <name4>
print ( <name6> . <name4> ( <name5> ) . group ( 1 ) )	<name4> for occurrences of regex <name6> <name6> in string <name5>
( <name1> . <name6> ( ) [ 0 ] + 1 ) . astype ( 'float'   )	<name6> all string values in dataframe <name1> into floats
<name6> = [ ( <name1> - b ) for <name1> , b <name4> zip ( <name5> , <name2> ) ]	Get <name1> list <name6> by subtracting values <name4> one list <name2> from corresponding values <name4> another list <name5>
datetime . datetime . strptime ( '2011, 4, 0'   , '%Y, %U, %w'   )	derive the week start for the given week number and year ‘ 2011 , 4 , 0 ’
map ( int , [ '1'   , '-1'   , '1'   ] )	convert a list of strings ['1', '-1', '1'] to a list of numbers
<name4> . <name4> . strptime ( '16Sep2012'   , '%d%b%Y'   )	"create <name4> object from ""16sep2012"""
<name1> . objects . filter ( <name5> = <name5> ) . <name4> ( ** <name3> )	<name4> fields in Django model <name1> with arguments in dictionary <name3> where primary key is equal to <name5>
<name6> . objects . create ( ** <name5> )	update the fields in django model <name6> using dictionary <name5>
<name4> ( '{0:.2f}'   . format ( <name2> ) )	<name4> a digit <name2> with exactly 2 digits after decimal
<name3> . randint ( 100000000000 , 999999999999 )	generate a 12 - digit <name3> number
int ( ''   . join ( str ( <name3> . randint ( 0 , 9 ) ) for _ in range ( <val5> ) ) )	generate a <name3> <val5> - digit number
""""" """" """" . join ( str ( <name4> . randint ( 0 , 9 ) ) for _ in range ( <val6> ) )"	generate a <name4> <val6> - digit number
'%0.12d'     % <name6> . randint ( 0 , 999999999999 )	generate a 12 - digit <name6> number
<name5> . delete ( <name1> , index )	remove specific elements in <name1> <name5> array <name1>
sorted ( <name5> , key = lambda x : trial_dict [ x ] )	sort list <name5> based on values of dictionary trail_dict
sys . <name4> . <name2> ( 1 )	<name2> a single character from <name4>
print ( re . findall ( <name4> , <name6> ) )	get a list of characters in string <name6> matching regex <name4> <name4>
k = <name5> . find ( text = re . compile ( <val3>   ) ) . parent . text	get the context of a search by keyword <val3> in beautifulsoup <name5>
<name6> . apply ( lambda x : x . tolist ( ) , axis = 1 )	convert rows in pandas data frame <name6> into list
<name5> = np . reshape ( <name2> , ( -1 , <val6> ) )	convert a 1 d <name2> array to a <val6> d array <name5>
<name2> . <name5> ( <name6> = <val1>   , <name4> = <val3> , debug = False )	<name5> <name2> <name2> on <name6> <val1> and <name4> <val3> in Flask
print ( <val3>   . <name4> ( 'UTF8'   ) )	<name4> unicode string <val3> to utf -8 code
[ x [ 0 ] for x in <name6> ]	get the first element of each tuple from a list of tuples <name6>
re . findall ( '-(?!aa-|bb-)([^-]+)'   , <name3> )	regular expression matching all but 'aa' and 'bb' for <name3> <name3>
re . findall ( '-(?!aa|bb)([^-]+)'   , string )	regular expression matching all but 'aa' and 'bb'
{  k : v for k , v in list ( <name5> . items ( ) ) if v }	remove false entries from a dictionary <name5>
dict ( ( k , v ) for k , v in <name6> . items ( ) if v )	Get a dictionary from a dictionary <name6> where the values are present
sorted ( <name2> , key = operator . itemgetter ( <val5>   ) )	sort list <name2> based on the value of variable <val5> for each object in list <name2>
<name2> . <name6> ( key = operator . attrgetter ( <val5>   ) )	<name6> a list of objects <name2> by a member variable <val5>
somelist . <name2> ( key = lambda x : x . <name6> )	<name2> a list of objects 'somelist' where the object has member number variable <name6>
df1 . merge ( df2 , <name2> = <val6>   ) . merge ( df3 , <name2> = <val6>   )	join multiple dataframes d1 , d2 , and d3 <name2> column <val6>
decimal . <name4> ( <name1> . randrange ( 10000 ) ) / 100	generate <name1> <name4>
onlyfiles = [ f for f in listdir ( <name4> ) if isfile ( join ( <name4> , f ) ) ]	list all files of a directory <name4>
print ( glob . glob ( '/home/adam/*.txt'   ) )	"list all "".txt"" files of a directory ""/home/adam/"""
os . listdir ( <val6>   )	list all files of a directory <val6>
cur . executemany ( <val3>   , <name2> )	execute sql query <val3> with all parameters in list <name2>
print ( [ key for key <name2> <name5> if <name5> [ key ] == 1 ] )	get keys with same value <name2> dictionary <name5>
print ( [ key for key , <name2> <name3> <name1> . items ( ) if <name2> == 1 ] )	get keys with same <name2> <name3> dictionary <name1>
print ( [ key for key , <name5> in list ( d . items ( ) ) if <name5> == 1 ] )	Get keys from a dictionary 'd' where the <name5> is '1' .
strs = [ ''     for x in range ( size ) ]	create list of 'size' empty strings
[ <name6> ( t ) for t <name1> set ( [ tuple ( d . items ( ) ) for d <name1> <name2> ] ) ]	remove duplicate <name6> <name1> list <name2>
TIME_ZONE = <val3>	Set time zone <val3> in Django
<name3> . setdefault ( <name2> , [ ] ) . <name1> ( <name4> )	<name1> <name4> to list value of <name2> in dictionary <name3> , or create <name2> <name2> with value <name4> in a list if it does not exist
<name2> . objects . <name5> ( <val1>   ) . <name4> ( article_count = Count ( <val3>   ) )	Group the <name5> from django model <name2> with group by value <val1> and <name4> by <val3>
<name3> . delete ( 'all'   )	clear Tkinter Canvas <name3>
<name6> = pd . Series ( [ 'A'   , 'B'   , 'A1R'   , 'B2'   , 'AABB4'   ] )	Initialize a pandas series object <name6> with columns ['A', 'B', 'A1R', 'B2', 'AABB4']
<name1> . <name4> ( <name5> = lambda x : <name6> . index ( x [ 0 ] ) )	<name4> list <name1> using the first dimension of the element as the <name5> to list <name6>
<name4> . savefig ( <val6>   )	Save plot <name4> as png file <val6>
plt . savefig ( <val6>   , dpi = 300 )	Save matplotlib graph to image file <val6> at a resolution of 300 dpi
<name2> . communicate ( ) [ 0 ]	get output from process <name2>
soup . body . findAll ( <name6> = <val5>   )	searche in HTML string for elements that have <name6> <val5>
soup . <name1> . findAll ( text = <val6>   )	BeautifulSoup find string <val6> in HTML <name1> <name1>
sorted ( list ( <name6> . <name3> ( ) ) , <name4> = lambda name_num : ( name_num [ 0 ] . rsplit ( None , 1 ) [ 0 ] , name_num [ 1 ] ) )	Sort <name3> in dictionary <name6> using the first part of the <name4> after splitting the <name4>
<name6> ( [ <val4> , <val3> , <val5> ] ) ^   <name6> ( [ <val5> , <val2> , <val1> ] )	create a <name6> that is the exclusive or of [ <val4> , <val3> , <val5> ] and [ <val5> , <val2> , <val1> ]
request . POST . getlist ( <val4>   )	Get a list values of a dictionary item <val4> from post requests in django
<name2> ( dict ( ( x [ <val6>   ] , x ) for x <name4> L ) . values ( ) )	Filter duplicate entries w .r .t . value <name4> <val6> from a <name2> of dictionaries 'L'
<name2> . groupby ( <name2> . columns , axis = 1 ) . <name3> ( )	Get pandas GroupBy object with <name3> over the rows with same column names within dataframe <name2>
dict ( <name2> ( list ( <name5> ( 1 , 5 ) ) , list ( <name5> ( 7 , 11 ) ) ) )	convert the <name2> of <name5> (1, 5) and <name5> (7, 11) into a dictionary
<name1> . <name6> ( <name5> )	Get all indexes of boolean <name1> array <name6> boolean value <name5> is True
( <name4> . lower ( ) == <name2> . lower ( ) )	case insensitive string comparison between <name4> and <name2>
( <name2> . lower ( ) == <name4> . lower ( ) )	case insensitive string comparison between <name2> and <name4>
( <name4> . upper ( ) == <name6> . upper ( ) )	case insensitive comparison between strings <name4> and <name6>
os . system ( <val6> )	Taking the results of a bash command <val6>
del <name3> [ <val6> : <val4> ]	remove multiple values from a list <name3> at the same time with index starting at <val6> and ending just before <val4> .
int ( <name2> . encode ( 'hex'   ) , 16 )	convert a string <name2> to its base -10 representation
re . findall ( <val4>   , <name5> )	match regex pattern <val4> on string <name5>
sorted ( <name6> , key = float )	sort a set <name6> by numerical value
<name6> ( <val4> )	convert an int <val4> to <name6> string
<name2> . <name5> ( <name1> ) . reset_index ( drop = True )	<name5> <name2> pandas series <name1> to the series <name2> and get <name2> continuous index
pd . concat ( [ <name5> , <name2> ] , ignore_index = True )	simple way to append <name5> pandas series <name5> and <name2> with same index
[ ( i , j ) for i in range ( 1 , 3 ) for j in range ( 1 , 5 ) ]	Get a list of tuples with multiple iterators using list comprehension
sorted ( iter ( <name3> . <name5> ( ) ) , key = itemgetter ( 1 ) , <name2> = True )	<name2> sort <name5> in dictionary <name3> by value
pd . date_range ( '1/1/2014'   , periods = 12 , freq = 'BM'   )	select the last business day of the month for each month in 2014 in pandas
<name1> . get ( <val3>   , verify = False )	disable the certificate check in https <name1> for url <val3>
<name5> . ix [ : -1 ]	return dataframe <name5> with last row dropped
<name1> . find ( <val5>   )	check if <name1> <val5> is in <name1>
pd . concat ( [ <name6> . head ( 1 ) , <name6> . tail ( 1 ) ] )	extract first and last row of a dataframe <name6>
<name5> . objects . extra ( where = [ 'CHAR_LENGTH(text) > 254'   ] )	filter a Django model <name5> to have charfield length of max 255
<name3> . <name4> . filter ( text__regex = '^.{254}.*'   )	Filter queryset for all <name4> in Django model <name3> where texts length are greater than 254
sum ( <name2> . apply ( lambda x : sum ( x . isnull ( ) . <name3> ) , axis = 1 ) >   0 )	count the number of rows with missing <name3> in a pandas dataframe <name2>
<name6> . create_text ( x , y , <name3> = ( <val4>   , <val2> ) , <name5> = <name1> )	set the <name3> <val4> of size <val2> for a <name6> '  <name5> item <name1>
[ y [ <val4>   ] for x <name2> <name6> for y <name2> x [ 'bar'   ] ]	create a list containing all values associated with key <val4> <name2> dictionaries of list <name6> using list comprehension
<name4> [ <val2>   ] = <name4> [ <val2>   ] . str . <name3> ( <val5>   , <val1>   )	<name3> string <val5> with <val1> in dataframe <name4> column <val2>
[ i for i in range ( len ( <name2> ) ) if <name2> [ i ] >   <val4> ]	Get all indexes of <name2> list <name2> where each value is greater than <val4>
( <val3>     in locals ( ) )	check if a local variable <val3> exists
( <val5>     in globals ( ) )	check if a global variable <val5> exists
hasattr ( <name2> , <val4>   )	check if object <name2> has attribute <val4>
<name4> x , y : x + y	<name4> function that adds two operands
sum ( 1 for i <name6> <name4> )	count the number of items <name6> a generator / iterator <name4>
[ ( x , <name6> [ i ] ) for i , x in enumerate ( <name1> ) ]	get tuples of the corresponding elements from lists <name1> and <name6>
[ ( i , j ) for i , j in zip ( <name5> , <name2> ) ]	create tuples containing elements that are at the same index of list <name5> and list <name2>
[ ( <name5> [ i ] , <name6> [ i ] ) for i <name4> range ( len ( <name5> ) ) ]	get tuples from lists <name5> and <name6> using list comprehension <name4> python 2
struct . unpack ( 'BBB'   , <name6> . decode ( 'hex'   ) )	convert hex triplet string <name6> to rgb tuple
( <val1> <name3> <name4> [ <val5> , <val1> , <val2> ] )	Check if <val1> is <name3> <name4> a list [ <val5> , <val1> , <val2> ]
( ( <val5> , <val3> ) <name2> <name4> [ ( <val5> , <val3> ) , ( <val1> , <val6> ) , ( <val5> , <val3> ) ] )	Check if tuple ( <val5> , <val3> ) is <name2> <name4> a list [ ( <val5> , <val3> ) , ( <val1> , <val6> ) , ( <val5> , <val3> ) ]
( ( <val4> , <val1> ) <name6> <name2> [ ( <val4> , <val3> ) , ( <val3> , <val1> ) , <val5>   ] )	Check if tuple ( <val4> , <val1> ) is <name6> <name2> a list [ ( <val4> , <val3> ) , ( <val3> , <val1> ) , <val5> ]
( <val2> <name1> <name4> [ <val3> , <val5> , <val6> ] )	Check if <val2> is <name1> <name4> the list [ <val3> , <val5> , <val6> ]
[ value for pair in zip ( <name6> , <name5> [ : : -1 ] ) for value in pair ]	create <name6> list by appending components from list <name6> and reversed list <name5> interchangeably
<name6> = np . <name5> ( <name1> , -1 , 1 )	<name5> the last column of numpy array <name1> and assign resulting array to <name6>
dbb . <name2> ( )	<name2> all the changes after executing a query .
pd . merge ( a , b , <name3> = [ 'A'   , 'B'   ] , how = 'outer'   )	join two dataframes based <name3> values in selected columns
setStyleSheet ( 'QPushButton {background-color: #A3C1DA; color: red;}'   )	set text color as red and background color as #A3C1DA in qpushbutton
sum ( <name3> ) / float ( len ( <name3> ) )	find the mean of elements in list <name3>
[ ( k , v ) for k , v in <name6> . <name3> ( ) <name5> <val2>     in k ]	Find all the <name3> from a dictionary <name6> <name5> the key contains the string <val2>
k = hashlib . <name4> ( <val5>   ) . hexdigest ( )	Get a <name4> hash from string <val5>
<name3> . <name6> ( key = lambda d : ( d . <name2> , d . <name4> ) )	<name6> datetime objects <name3> by <name2> and <name4>
[ [ td . findNext ( text = True ) for td in tr . findAll ( 'td'   ) ] for tr in <name5> ]	extract table data from table <name5> using beautifulsoup
""""" <val5> """" . replace ( <val3>   , ''   )"	strip the string <val3> from anywhere in the string <val5>
<name2> ( df . <name4> )	get a <name2> of the row names from <name4> of a pandas data frame
df . <name5>	get the row names from <name5> in a pandas data frame
""""" """" """" . join ( <name2> ( OrderedDict . fromkeys ( <val5>   ) . keys ( ) ) )"	create a <name2> of all unique characters in string <val5>
<name4> ( set ( <val6>   ) )	get <name4> of all unique characters in a string <val6>
df . loc [ ( df . loc [ : , ( df . dtypes != <name4> ) ] != 0 ) . any ( 1 ) ]	find rows with non zero values in a subset of columns where df.dtypes is not equal to <name4> in pandas dataframe
<name4> ( word <name1> <name2> for word <name1> [ 'somekey'   , 'someotherkey'   , 'somekeyggg'   ] )	check if dictionary <name2> contains <name4> keys <name1> list ['somekey', 'someotherkey', 'somekeyggg']
<name1> . check_output ( [ 'espeak'   , text ] , stderr = <name1> . STDOUT )	hide output of <name1> ['espeak', text]
<name6> . fillna ( method = 'ffill'   , inplace = True )	replace nans by preceding values in pandas dataframe <name6>
print ( np . linspace ( <val1> , <val6> , num = <val3> , endpoint = False ) )	create <val3> numbers in range between <val1> and <val6>
print ( np . linspace ( <val1> , <val2> , num = <val6> ) )	Create numpy array of <val6> numbers starting from <val1> with interval of <val2>
kdll . CreateSymbolicLinkW ( <val6>   , <val5>   , 1 )	create a symlink directory <val6> for directory <val5> with unicode support using ctypes library
<name1> = [ <name2> [ i ] [ 0 : 2 ] for i in range ( 0 , 2 ) ]	get a list <name1> of array slices of the first two rows and columns from array <name2>
upload_url = blobstore . create_upload_url ( <val4>   , gs_bucket_name = <val6>   )	upload uploaded file from path <val4> to Google cloud storage <val6> bucket
os . chdir ( os . path . dirname ( __file__ ) )	change directory to the directory of a python script
func ( * <name5> )	call a function with argument list <name5>
<name2> [ <val4>   ] . str . <name1> ( <val3>   , 1 , expand = True )	<name1> column <val4> in dataframe <name2> into two columns by first whitespace <val3>
df [ <val4>   ] , df [ <val5>   ] = df [ <val2>   ] . str . <name6> ( <val3>   , 1 ) . str	pandas dataframe , how do i <name6> a column <val2> into two <val4> and <val5> on delimiter <val3>
print ( sorted ( <name5> , key = len ) )	sort list <name5> based on the length of its elements
<name4> . <name3> ( lambda x , y : cmp ( len ( x ) , len ( y ) ) )	<name3> list <name4> in ascending order of length of elements
<name5> . <name2> ( key = lambda s : len ( s ) )	<name2> list of strings <name5> by the length of string
<name3> . <name5> ( <name6> = <val1>   )	<name5> point <name6> <val1> on series <name3>
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = <name6> ) )	get all combination of <name6> binary values
lst = map ( list , itertools . product ( [ 0 , 1 ] , repeat = <name5> ) )	get all combination of <name5> binary values
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = <val2> ) )	get all combination of <val2> binary values
<name1> [ <val4>   ] = <val2>     + <name1> [ <val4>   ] . astype ( str )	append string <val2> at the beginning of each value in column <val4> of dataframe <name1>
<name3> ( ( name , eval ( name ) ) for name in [ 'some'   , 'list'   , 'of'   , 'vars'   ] )	get a <name3> of variable names ['some', 'list', 'of', 'vars'] as a string and their values
<name5> . <name3> ( <name1> , <name2> = <name2> )	add a <name3> to plot <name5> using image <name1> on axes <name2>
[ <name3> for c in Cards for b in c for <name3> in b ]	convert nested list 'Cards' into <name3> flat list
sorted ( <name4> , key = <name4> . get )	create a list containing keys of dictionary <name4> and sort it alphabetically
<name2> ( len ( [ x for x <name5> <name3> if x is <name4> None ] ) )	<name2> the number of occurences of <name4> none <name5> a list <name3> <name5> Python 2
{{  <name2> . <name4> }}	lookup dictionary key <name4> in Django template <name2>
mynewlist = <name1> ( <name5> )	remove duplicates from <name1> <name5>
set ( [ 'a'   , 'b'   , 'c'   , 'd'   ] )	get unique values from the list ['a', 'b', 'c', 'd']
<name2> ( figsize = ( 11.69 , 8.27 ) )	set size of <name2> to landscape A4 i .e . 11.69, 8.27 inches
url . rsplit ( <val3>   , 1 )	get every thing after last <val3>
<name2> . rsplit ( '/'   , 1 ) [ -1 ]	get everything after last slash in a <name2> stored in variable 'url'
x_file = <name3> ( os . path . join ( <name1> , <val5>   ) , 'r'   )	<name3> file <val5> in directory <name1>
<name6> ( <val2>   )	create a <name6> with the characters of a string <val2>
np . <name5> ( <name2> ) . ravel ( ) . tolist ( )	<name5> a list of numpy arrays <name2> together into a flattened list of values
print ( [ y for x in <name3> ( <name6> . items ( ) ) for y in x ] )	convert dictionary <name6> into a flat <name3>
[ y for x in <name6> ( <name5> . <name1> ( ) ) for y in x ]	Convert a dictionary <name5> into a <name6> with key and values as <name6> <name1> .
MyModel . objects . order_by ( '?'   ) . first ( )	get a random record from model 'MyModel' using django ' s orm
os . chdir ( <val1>   )	change current working directory to directory <val1>
os . chdir ( 'C:\\Users\\username\\Desktop\\headfirstpython\\chapter3'   )	change current working directory
os . chdir ( '.\\chapter3'   )	change current working directory
dict ( ( key , sum ( d [ key ] for d <name3> dictList ) ) for key <name3> dictList [ 0 ] )	create a flat dictionary by summing values associated with similar keys <name3> each dictionary of list dictlist
<name4> . <name5> ( [ <val3>   , <val1>   ] , <name2> = [ True , True ] )	<name5> pandas data frame <name4> using values from columns <val3> and <val1> in <name2> order
floats = [ <name4> ( x ) for x in <name3> . split ( ) ]	Converting string lists <name3> to <name4> list
floats = map ( <name2> , <name6> . split ( ) )	Converting string lists <name6> to <name2> list
<name2> . xticks ( [ 1 , 2 , 3 , 4 , 5 ] )	set labels [1, 2, 3, 4, 5] on axis X in plot <name2>
<val2>     <name5> list ( <name6> . <name1> ( ) )	check if string <val2> exists <name5> the <name1> of dictionary <name6>
<val2>     in iter ( <name5> . <name6> ( ) )	Check if value <val2> is among the <name6> of dictionary <name5>
super ( <name1> , self ) . __init__ ( name , year )	call parent class <name1> of child class constructor
dict ( zip ( <name1> , <name4> ) )	create a dictionary using two lists <name1> and <name4>
sorted ( <name3> , key = lambda i : <name1> ( i . <name2> ( ) ) [ 0 ] , reverse = True )	sort <name3> <name1> of dictionaries <name3> by dictionary <name2> in descending order
sorted ( <name2> , key = dict . <name4> , reverse = True )	sorting <name2> list of dictionary <name2> by <name4> in descending order
<name3> . <name2> ( level = 0 ) . <name4> ( [ <val1>   , <val5>   , <val6>   ] )	Use multiple <name2> and <name4> operations <val1> , <val5> , <val6> for pandas data frame <name3>
<name4> . setdefault ( <val6>   , [ ] ) . <name2> ( <val5>   )	for <name4> dictionary <name4> , set default value for key <val6> as list and <name2> value <val5> in that key
<name3> ( item [ <val4>   ] for item <name2> <name5> )	<name3> values <name2> list of dictionaries <name5> with key <val4>
<name2> ( [ item [ <val4>   ] for item <name3> <name6> ] )	get a <name2> of all values from key <val4> <name3> a list of dictionary <name6>
sum ( item [ <val4>   ] for item <name5> <name2> )	Get all the values <name5> key <val4> summed from a list of dictionary <name2>
<name1> . write ( <val4>   )	writing string <val4> to file <name1>
<name4> . write ( 'My String\n'   )	Write a string My String to a <name4> <name4> including new line character
df . reset_index ( ) . groupby ( <val4>   ) [ 'index'   ] . apply ( np . array )	find consecutive segments from a column <val4> in a pandas data frame 'df'
<name1> = os . <name5> . join ( os . <name5> . dirname ( __file__ ) , <val6>   )	get a relative <name5> of file <val6> into variable <name1>
e = next ( iter ( <name5> ) )	retrieve an element from a set <name5> without removing it
os . system ( '  dir <name6> : \\'  )	execute a command in the command prompt to list directory contents of the <name6> drive ` <name6> : \\'
self . treeview . connect ( 'size-allocate'   , self . treeview_changed )	Make a auto scrolled window to the end of the list in gtk
<val3> in [ 1 , 2 , <val3> ]	check if <val3> is inside list [1, 2, 3]
datetime . datetime . strptime ( <val3>   , <val1>   ) . strftime ( <val5>   )	Represent DateTime object <val3> with format <val1> into format <val5>
<name4> = <name4> . replace ( '\\', '  \\\\'  )	convert a string literal <name4> with values '\\' to raw string literal
print ( <name6> . communicate ( ) [ 0 ] )	get output of script <name6>
pd . concat ( [ pd . DataFrame ( l ) for l in <name4> ] , axis = 1 ) . T	create a pandas data frame from list of nested dictionaries <name4>
<name5> . loc [ : , ( ( <name5> != 0 ) . any ( axis = 0 ) ) ]	delete all columns in DataFrame <name5> that do not hold a non - zero value in its records
sorted ( <name3> , key = lambda x : x [ <val2> ] )	sort <name3> multidimensional array <name3> by column with index <val2>
[ x . strip ( ) for x in <name6> . <name2> ( <val4>   ) ]	<name2> string <name6> to list conversion by <val4>
<name4> = [ item for item <name5> <name6> if item . <name2> == <name1> ]	Get a list of <name4> <name5> the list <name6> with <name2> equal to <name1>
open ( <val6>   , 'w'   ) . write ( '\n'   . join ( '%s %s'     % x for x <name4> <name2> ) )	create a file <val6> with each tuple <name4> the list <name2> written to a line
<name5> = re . compile ( <val4>   , re . IGNORECASE )	Get multiple matched strings using regex <name5> <val4>
<name4> = open ( <val6>   , 'r'   ) . <name5> ( )	<name5> a text file <val6> into a string variable <name4>
<name3> . groupby ( [ <val1>   , <val5>   ] ) [ <val6>   ] . unique ( )	Return values for column <val6> after group by on column <val1> and <val5> in dataframe <name3>
<name2> = [ <name5> . rstrip ( '\n'   ) for <name5> in open ( <val4>   ) ]	read file <val4> <name5> by <name5> into a list <name2>
df [ <val4>   ] = pd . to_datetime ( df [ <val4>   ] )	convert the dataframe column <val4> from string types to datetime types
[ k for d <name6> <name5> ( <name4> . values ( ) ) for k <name6> d ]	get a <name5> of the keys <name6> each dictionary <name6> a dictionary of dictionaries <name4>
print ( <val6>   . format ( <name1> ( <val5>   ) ) )	get user <name1> using message <val5> and insert it to the first placeholder in string <val6>
<name3> = pd . read_csv ( <val1>   , sep = <val5>   , names = [ <val6>   ] )	create pandas data frame <name3> from txt file <val1> with column <val6> and separator <val5>
<name3> . system ( )	get the <name3> OS name
<name5> = sorted ( <name5> , key = lambda x : <name1> ( x ) )	sort list <name5> in ascending order based on its elements '  <name1> values
re . search ( 'name (.*)'   , <name2> )	finding words in string <name2> after keyword 'name'
db . <name4> . find ( {}  , {  <val5>   : False }  )	Find all records from <name4> <name4> without extracting mongo id <val5>
[ row [ 1 ] for row in <name6> ]	Get all the second values from a list of lists <name6>
[ row [ 0 ] for row in <name2> ]	extract first column from <name2> multi - dimensional array <name2>
sorted ( [ '10'   , '3'   , '2'   ] , key = int )	sort list ['10', '3', '2'] in ascending order based on the integer value of its elements
os . path . commonprefix ( [ <val1>   , os . path . realpath ( <name4> ) ] ) == <val1>	check if file <name4> is descendant of directory <val1>
<name6> ( substring <name3> <name2> for substring <name3> <name4> )	check if <name6> element of list <name4> are <name3> <name2> <name2>
df = <name5> . DataFrame ( data , columns = [ 'R_Number'   , 'C_Number'   , 'Avg'   , 'Std'   ] )	construct <name5> dataframe from a list of tuples
re . sub ( '^((?:(?!cat).)*cat(?:(?!cat).)*)cat'   , '\\1Bull'   , s )	find and replace 2 nd occurrence of word 'cat' by 'Bull' in a sentence 's'
re . sub ( '^((.*?cat.*?){1})cat'   , '\\1Bull'   , s )	find and replace 2 nd occurrence of word 'cat' by 'Bull' in a sentence 's'
sorted ( <name6> , key = lambda k : int ( k . split ( '_'   ) [ 1 ] ) )	sort list of strings in list <name6> by integer suffix
sorted ( <name3> , key = lambda x : int ( x . split ( <val2>   ) [ 1 ] ) )	sort list of strings <name3> by integer suffix before <val2>
[ <name3> ( <name4> ) for _ , <name4> <name5> itertools . groupby ( <name6> , lambda x : x . split ( <val2>   ) [ 0 ] ) ]	make a <name3> of lists <name5> which each <name3> <name4> are the elements from <name3> <name6> which have the same characters up to the first <val2> character
<name4> . get ( <val2>   )	Load the url <val2> in selenium webdriver <name4>
( <name5> . <name5> . utcnow ( ) - <name5> . timedelta ( hours = 11 ) ) . <name2>	using python ' s <name5> module , get the <name2> that utc -11 is currently in
Counter ( [ 1 , 2 , 2 , 2 , 3 ] ) - Counter ( [ 1 , 2 ] )	Get the difference between two lists [1, 2, 2, 2, 3] and [1, 2] that may have duplicate values
re . sub ( '<[^>]*>'   , ''   , <name6> )	remove tags from a string <name6>
<name2> . <name3> ( <val4>   )	<name3> string <name2> as <val4>
User . objects . <name1> ( userprofile__level__gte = <val2> )	<name1> Users by field userprofile with level greater than or equal to <val2>
soup . findAll ( <name2> = re . compile ( 'para$'   ) )	BeautifulSoup find a tag whose <name2> ends with string 'para'
"soup . <name5> ( 'div[id^=""value_xxx_c_1_f_8_a_""]'   )"	"<name5> div tags whose id s begin with ""value_xxx_c_1_f_8_a_"""
cleaned_list = [ x for x <name6> <name4> <name1> x is not <name5> ]	delete an item <name5> <name6> a list <name4> <name1> it exists
<name6> = <name4> ( <val3>   )	print <val3> to console , and read user <name4> to <name6>
<name3> . <name1> ( <val2> )	<name1> <val2> to list <name3>
<name6> . <name5> ( [ <val1> , <val3> ] )	<name5> a list [ <val1> , <val3> ] to list <name6>
<name1> . <name6> ( <val3> , <val2> )	<name6> <val2> to index <val3> of list <name1>
plt . savefig ( <val1>   , bbox_inches = 'tight'   )	remove white space padding around a saved image <val1> in matplotlib
( <name2> + <name3> )	concatenate lists <name2> and <name3>
<name6> = <name4> [ ( <name4> [ <name5> ] == <val1>   ) &   ( <name4> [ <name3> ] == <val2> ) ]	create dataframe <name6> containing data of dataframe <name4> where column <name5> is equal to <val1> and column <name3> is equal to <val2>
<name4> ( '\\'  )	<name4> backslash
<name6> . <name4> ( <val5>   , np . nan )	<name4> <val5> in pandas dataframe <name6> with np.nan
<name5> = <name5> . drop ( <val1>   , 1 )	delete column <val1> from dataframe <name5>
<name5> . drop ( <name5> . <name4> [ [ 0 , <val1> , 3 ] ] , axis = <val1> )	delete <val1> st , 2 nd and 4 th <name4> from dataframe <name5>
<name6> . drop ( <val3>   , axis = 1 , inplace = True )	delete a column <val3> without having to reassign from pandas data frame <name6>
parser = <name5> . ArgumentParser ( allow_abbrev = False )	disable abbreviation in <name5>
feature3 = [ d . get ( <val2>   ) for d in <name1> . dic ]	extract dictionary values by key <val2> from data frame <name1>
<name5> . loc [ gb . groups [ <val6>   ] , ( <val4>   , <val1>   ) ]	get data of column <val4> and column <val1> in dataframe <name5> where column <val4> is equal to <val6>
<name2> ( '[%s, %s, %s]'     % ( 1 , 2 , 3 ) )	<name2> '[1, 2, 3]'
print ( '[{0}, {1}, {2}]'   . format ( 1 , 2 , 3 ) )	Display 1 2 3 as a list of string
[ v for k , v in list ( <name3> . items ( ) ) if <val5>     in k ]	get values from a dictionary <name3> whose key contains the string <val5>
<name6> . <name4> ( ( <val3>   , <val5>   ) , axis = 1 )	<name4> a single subcolumn <val5> in column <val3> from a dataframe <name6>
df . drop ( <val3>   , <name1> = 1 , axis = 1 )	dropping all columns named <val3> from a multiindex 'df' , across all <name1> .
{  _key : <name3> ( _key ) for _key in <name1> }	build dictionary with keys of dictionary <name1> as keys and values of returned value of function <name3> with correlating key as parameter
browser . find_element_by_class_name ( <val2>   ) . <name4> ( )	<name4> on the text button <val2> using selenium python
dict ( ( k , d . get ( k , ''   ) + <name1> . get ( k , ''   ) ) for k in <name3> )	combine two dictionaries d  and <name1> , concatenate string values with identical <name3>
<name3> ( pformat ( <name1> ) ) == <name3> ( pformat ( <name2> ) )	generate unique equal <name3> for equal dictionaries <name1> and <name2>
<name1> ( map ( tuple , [ [ 'tom'   , 'cat'   ] , [ 'jerry'   , 'mouse'   ] , [ 'spark'   , 'dog'   ] ] ) )	convert nested <name1> of lists [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']] into a <name1> of tuples
<name6> . groupby ( [ <val3>   , <val5>   , <val2>   ] , as_index = False ) [ <val1>   ] . <name4> ( )	<name4> the column <val1> along the other columns <val3> , <val5> , <val2> in a pandas data frame <name6>
<name1> . <name4> ( )	change string <name1> to <name4> case
dict ( item . <name1> ( '='   ) for item in <name2> . <name1> ( <val3>   ) )	<name1> a string <name2> by <val3> and convert to a dictionary
<name3> . addheaders = [ ( 'Cookie'   , 'cookiename=cookie value'   ) ]	Add header ('Cookie', 'cookiename=cookie value') to mechanize browser <name3>
<name1> [ <val6>   ] = <name1> [ <val6>   ] . str [ 0 ]	set data in column <val6> of dataframe <name1> equal to first element of each list
<name2> [ <val5>   ] = <name2> [ <val5>   ] . str . <name3> ( <val1> )	<name3> element at index <val1> of each list in column <val5> of dataframe <name2>
<name2> [ <val5>   ] = <name2> [ <val5>   ] . str . strip ( <val6>   )	remove square bracket <val6> from pandas dataframe <name2> column <val5>
""""" "", "" """" . join ( [ '{}_{}'   . format ( k , v ) for k , v in <name3> . items ( ) ] )"	Get a string with string formatting from dictionary <name3>
sum ( sum ( x ) for x <name3> <name1> )	Sum of sums of each list , <name3> a list of <name1> named 'lists' .
any ( np . equal ( <name6> , [ 1 , 2 ] ) . all ( 1 ) )	Check whether <name6> numpy array <name6> contains <name6> given row [1, 2]
len ( set ( <name1> ) ) == 1	check if all elements in list <name1> are the same
[ map ( int , x . <name2> ( '\t'   ) ) for x in <name4> . rstrip ( ) . <name2> ( <val5>   ) ]	<name2> a string <name4> at line breaks <val5>
t = sorted ( <name5> ( <name6> . items ( ) ) , key = lambda x : x [ 1 ] )	sort <name6> dictionary <name6> by values that are <name5> type
<name2> . replace ( ''   , <name1> ) [ len ( <name1> ) : - len ( <name1> ) ]	insert string <name1> after each character of <name2>
<name1> ( itertools . combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) )	getting every possible combination of two elements in a <name1>
""""" ""x = {}"" """" . format ( <name1> . decode ( 'utf8'   ) ) . encode ( 'utf8'   )"	get a utf -8 string literal representation of byte string <name1>
isinstance ( <name5> , int )	check if <name5> is an integer
( type ( <name3> ) == int )	check if <name3> is an integer
winsound . PlaySound ( <val3>   , winsound . SND_FILENAME )	play the wav file <val3>
[ <name4> ( <name1> ) for _ in range ( <name3> ) ]	create a list containing the <name3> <name4> values of generator <name1>
<name2> ( itertools . islice ( <name1> , 0 , <name5> , 1 ) )	get <name2> of <name5> next values of a generator <name1>
set ( <name5> ) . intersection ( <name1> )	compare two lists in python <name5> and <name1> and return matches
print ( ''   . join ( map ( str , <name2> ) ) )	convert list <name2> into a string of its elements
re . <name1> ( <val4>   , <val6>   )	<name1> regex pattern <val4> on string <val6>
<name4> . import_module ( '.c'   , 'a.b'   )	import a nested module c.py within b within a with <name4>
<name4> . import_module ( <val5>   )	import a module <val5> with <name4> .import_module in python 2
<name1> = np . <name4> ( <name1> )	Convert <name4> <name1> to numpy <name4>
<name6> . find_all ( <val2>   , class_ = re . compile ( <val5>   ) )	Find all <val2> tags whose classes has the value <val5> in a beautiful <name6> object <name6>
[ [ ] for _ in range ( <name6> ) ]	a sequence of empty lists of length <name6>
dict ( ( k , globals ( ) [ k ] ) for k in ( <val5>   , <val4>   ) )	create dictionary from list of variables <val5> and <val4> already defined
MyModel . objects . order_by ( '?'   ) [ : 2 ]	get two random records from model 'MyModel' in Django
""""" ""Hello {user[name]}"" """" . format ( ** {  'user'   : {  'name'   : 'Markus'  }}  )"	Print a dictionary {'user': {'name': 'Markus'}} with string formatting
<name6> = {  t [ 0 ] : t for t <name1> <name4> }	create a dictionary <name6> containing each tuple <name1> list <name4> as values and the tuple ' s first element as the corresponding key
randint ( <val4> , <val6> )	Generate a random integer between <val4> and <val6>
<name3> . randint ( <name4> , <name6> )	Generate <name4> <name3> integer between <name4> and <name6>
print ( ( <name3> . randint ( <val5> , <val4> ) ) )	Generate <name3> integers between <val5> and <val4>
""""" """" """" . join ( reversed ( [ <name2> [ i : i + <val4> ] for i in range ( 0 , len ( <name2> ) , <val4> ) ] ) )"	reverse <name2> string <name2> by <val4> characters at <name2> time
pd . pivot_table ( <name6> , <name1> = <name6> . <name1> . date , <name3> = <name6> . <name1> . <name2> , <name5> = <val4>   )	transform <name2> series <name6> into a pivot table aggregated by column <val4> using column df.index.date as <name1> and <name5> of column df.index.time as <name3>
any ( item [ 2 ] == 0 for item <name6> items )	"check if the third element of all the lists <name6> a list ""items"" is equal to zero ."
[ x for x <name3> items <name2> x [ 2 ] == 0 ]	Find all the lists from a lists of list 'items' <name2> third element <name3> all sub - lists is '0'
sorted ( list ( <name2> . items ( ) ) , <name6> = lambda x : x [ 1 ] [ <val1>   ] , reverse = True )	sort dictionary of dictionaries <name2> according to the <name6> <val1>
plt . yscale ( 'log'   , nonposy = 'clip'   )	plot a data logarithmically in y axis
os . listdir ( <val4>   )	list the contents of a directory <val4>
os . listdir ( <val4>   )	list all the contents of the directory <val4> .
pd . concat ( [ <name3> , <name6> . <name5> ] , axis = 1 )	merge a pandas data frame <name3> and column <name5> in pandas data frame <name6> into single
[ x [ 0 ] for x <name4> <name5> ]	get value of first index of each element <name4> list <name5>
[ i [ 0 ] for i <name1> <name4> ]	python how to get every first element <name1> 2 dimensional list <name4>
re . sub ( '(?<=[a-z])\\r?\\n'   , ' '   , <name1> )	remove line breaks from string <name1> using regex
<name4> . open ( <val6>   , 'rt'   , encoding = 'utf-8'   )	Open <name4> - compressed file encoded as utf -8 <val6> in text mode
<name4> ( [ <val2>   , <val1>   ] ) . issubset ( [ <val1>   , <val2>   , 'foo'   , 'bar'   ] )	test if either of strings <val2> or <val1> are members of the <name4> of strings , ['b', 'a', 'foo', 'bar']
<name6> ( x <name5> [ 'b'   , 'a'   , 'foo'   , 'bar'   ] for x <name5> [ 'a'   , 'b'   ] )	Check if <name6> the values <name5> a list ['a', 'b'] are present <name5> another list ['b', 'a', 'foo', 'bar']
<name3> . translate ( None , <val6>   )	Remove characters <val6> from a string <name3>
<name2> = re . sub ( '[!@#$]'   , ''   , <name2> )	"Remove characters ""!@#$"" from a string <name2>"
<name4> . replace ( <val6>   , ''   )	Remove <name4> <val6> from <name4> <name4>
<name5> = <name5> . replace ( <name6> , ''   )	Remove character <name6> from <name5> string <name5>
<name6> = <name6> . replace ( char , ''   )	Remove characters in b from <name6> string <name6>
<name4> = <name4> . translate ( <name5> . maketrans ( ''   , ''   ) , <val6>   )	Remove characters in <val6> from a <name5> <name4>
pd . concat ( [ df , pd . get_dummies ( df , ''   , ''   ) . astype ( int ) ] , axis = 1 ) [ <name5> ]	binarize the values in columns of list <name5> in a pandas data frame
[ <val3> , <val6> , <val1> , <val4> ]	store integer <val3> , <val6> , <val1> and <val4> in a list
globals ( ) [ <val4>   ] = <val1>	define global variable <val4> with value <val1>
re . sub ( '([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))'   , '\\1 '   , <name3> )	insert spaces before capital letters in string <name3>
<name1> ( <val2>   . upper ( ) )	<name1> unicode string <val2> in uppercase
[ l . split ( '\\'  ) [ -1 ] for l in <name4> ]	get last element of string splitted by '\\'  from list of strings <name4>
dict ( zip ( keys , values ) )	combine two sequences into a dictionary
formatter = <name6> . Formatter ( '%(asctime)s;%(levelname)s;%(message)s'   )	customize the time format in python <name6>
<name3> . <name2> ( 'test.sh otherfunc'   )	<name2> a function otherfunc inside a bash script test.sh using <name3>
""""" "" "" """" . join ( <name2> . split ( ) )"	remove multiple spaces in a string <name2>
<name5> ( '{0:0b}'   . format ( <val2> ) )	convert decimal <val2> to a <name5> of its binary values
[ int ( x ) for x in <name2> ( '{0:0b}'   . format ( <val6> ) ) ]	convert decimal integer <val6> to a <name2> of its binary values as elements
[ int ( x ) for x in bin ( <val4> ) [ 2 : ] ]	convert decimal <val4> to binary list
dict ( zip ( <name1> , map ( <name4> . <name2> , <name1> ) ) )	<name2> key - value pairs in dictionary <name4> for all keys in list <name1> in the order they appear in <name1>
numpy . dstack ( numpy . meshgrid ( <name6> , <name2> ) ) . reshape ( -1 , <val4> )	cartesian product of <name6> and <name2> array points into single array of <val4> d points
<name3> . implicitly_wait ( <val4> )	selenium wait for <name3> <name3> <val4> seconds before throwing a NoSuchElementExceptions exception
driver . switch_to_frame ( <val5>   )	selenium webdriver switch to frame <val5>
time . strftime ( <val2>   )	format current date to pattern <val2>
sorted ( [ '14:10:01'   , '03:12:08'   ] )	sort list ['14:10:01', '03:12:08']
re . findall ( <val3>   , <name2> )	find all occurrences of regex pattern <val3> in string <name2>
<name4> . groupby ( [ 'key'   , 'year'   ] ) . size ( ) . reset_index ( )	remove duplicate rows from dataframe <name4> and calculate their frequency
sorted ( list ( <name3> . items ( ) ) , key = operator . itemgetter ( 1 ) )	sort <name3> <name3> in ascending order by its values
sorted ( iter ( <name3> . items ( ) ) , key = lambda x : x [ 1 ] )	Iterate over dictionary <name3> in ascending order of values
sorted ( list ( <name6> . items ( ) ) , key = lambda x : x [ 1 ] )	iterate over a python <name6> , ordered by values
np . <name3> ( <name2> , [ -1 ] )	<name3> 1 d array <name2> into 2 d array at the last element
<name5> . <name1> ( <name2> = <val4>   , <name6> = <val3>   )	convert dataframe <name5> into a <name1> table using column <val4> as <name2> and values of column <val3> as <name6>
df [ ( df [ <val3>   ] >   <val2> ) |   ( df [ <val4>   ] <   <val6> ) ]	select all rows from pandas DataFrame 'df' where the value in column <val3> is greater than <val2> or less than <val6> in column <val4> .
[ <name6> ( a ) for a in <name1> ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ]	Get the <name1> output as <name6> from the lists [1, 2, 3] , [4, 5, 6] , [7, 8, 9]
print ( <name4> . loc [ <name4> [ <val6>   ] == <val3>   ] )	select rows of dataframe <name4> whose value for column <val6> is <val3>
df . loc [ df [ <val2>   ] != <name5> ]	select rows whose column value in column <val2> does not equal <name5> in pandas data frame
<name2> . loc [ ~  <name2> [ <val5>   ] . isin ( <name4> ) ]	select rows from a dataframe <name2> whose value for column <val5> is not in <name4>
<name1> . loc [ <name1> [ <val6>   ] == <name3> ]	select all rows whose values in a column <val6> equals a scalar <name3> in pandas data frame object <name1>
print ( <name6> . loc [ <name6> [ <val1>   ] . isin ( [ <val5>   , <val2>   ] ) ] )	Select rows whose value of the <val1> column is <val5> or <val2> in the DataFrame <name6>
""""" """" """" . join ( map ( lambda x : x * <val4> , <val1>   ) )"	repeat every character for <val4> times in string <val1>
os . rmdir ( )	delete an empty directory
shutil . rmtree ( <name3> , ignore_errors = False , onerror = None )	recursively delete all contents in directory <name3>
os . removedirs ( <name6> )	recursively remove folder <name6>
<name3> . loc [ len ( <name3> ) ] = [ '8/19/2014'   , 'Jun'   , 'Fly'   , '98765'   ]	Add row ['8/19/2014', 'Jun', 'Fly', '98765'] to dataframe <name3>
glob . glob ( '*'   )	list all files in a current directory
glob . glob ( '[!hello]*.txt'   )	List all the files that doesn ' t contain the name hello
glob . glob ( <val6>   )	List all the files that matches the pattern <val6>
eval ( <val3>   )	evaluate the expression <val3>
<name2> = [ x [ : ] for x in <name1> ]	Copy list <name1> and name it <name2>
""""" ""{:.50f}"" """" . format ( float ( <name1> [ 0 ] / <name1> [ 1 ] ) )"	convert scientific notation of variable <name1> to decimal
<name1> . to_sparse ( 0 )	convert dataframe <name1> to integer - type sparse object
print ( [ <name5> . <name3> <name4> <name5> <name2> <name1> ] )	display attribute <name3> <name4> each object <name5> <name2> list <name1>
sum ( 1 if <name4> [ <val2>   ] else 0 for <name4> <name6> s )	count the number of True values associated with key <val2> <name6> dictionary <name4>
<name2> ( d [ 'success'   ] <name6> d in <name4> )	get the <name2> of values associated with the key ‘ success ’  <name6> a list of dictionaries <name4>
imp . find_module ( <val4>   ) [ 1 ]	get complete path of a module named <val4>
( bool ( <name1> ) != bool ( <name5> ) )	get logical xor of <name1> and <name5>
( ( <name2> <name4> ( not <name6> ) ) or ( ( not <name2> ) <name4> <name6> ) )	get logical xor of <name2> <name4> <name6>
( bool ( <name6> ) ^   bool ( <name3> ) )	get logical xor of <name6> and <name3>
<name3> ( bool ( <name6> ) , bool ( <name2> ) )	get logical <name3> of <name6> and <name2>
return ( bool ( <name3> ) ^   bool ( <name1> ) )	get the logical xor of two variables <name3> and <name1>
<name6> . sort ( <name2> = operator . itemgetter ( <val5>   ) )	Sort list <name6> in alphabetical order based on the values associated with <name2> <val5> of each dictionary in the list
re . <name4> ( '\\s*,\\s*|\\s*;\\s*'   , <val3>   )	<name4> a string <val3> using both commas and semicolons as delimeters
[ t . strip ( ) for s in <name5> . split ( <val6>   ) for t in s . split ( <val1>   ) ]	Split a <name5> <name5> by multiple separators <val6> and <val1>
<name4> = lambda <name1> , <name5> : <name1> + <name5>	make a function <name4> that calculates the sum of two integer variables <name1> and <name5>
<name5> = [ <name2> ( ) for i in range ( <val4> ) ]	Create list <name5> containing <val4> objects of type <name2>
{  <name2> [ i + 1 ] : [ <name2> [ i ] , <name2> [ i + 2 ] ] for i <name6> range ( 0 , len ( <name2> ) , 3 ) }	"Make a dictionary from list <name2> which is <name6> the format of four sets of ""val, key, val"""
struct . unpack ( '>q'   , <name3> ) [ 0 ]	convert bytes string <name3> to an unsigned integer
pd . concat ( [ <name1> , pd . DataFrame ( <name3> ) ] , axis = 1 )	concatenate a series <name1> onto a dataframe <name3> with pandas
<name6> . sort ( key = lambda x : x . <name3> )	Sort list <name6> in ascending order based on each of its elements '  attribute <name3>
<name6> . <name5> ( 'div[id$=_answer]'   )	BeautifulSoup <name5> 'div' elements with an id attribute value ending with sub - string '_answer' in HTML parsed string <name6>
linsolve ( Matrix ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) , ( x , y , z ) )	sympy solve matrix of linear equations (([1, 1, 1, 1], [1, 1, 2, 3])) with variables (x, y, z)
{  k : bigdict [ k ] for k in list ( bigdict . <name3> ( ) ) & {  <val1>   , <val4>   , <val5>  }}	best way to extract subset of key - value pairs with <name3> matching <val1> , <val4> , or <val5> from python dictionary object
dict ( ( k , <name6> [ k ] ) for k in ( 'l'   , 'm'   , 'n'   ) )	extract subset of key - value pairs with keys as ('l', 'm', 'n') from dictionary object <name6>
{  k : <name4> . get ( k , None ) for k <name6> ( 'l'   , 'm'   , 'n'   ) }	Get items from a dictionary <name4> where the keys are present <name6> ('l', 'm', 'n')
{  k : <name6> [ k ] <name3> k <name5> ( <val2>   , <val1>   , <val4>   ) }	Extract subset of key value pair <name3> keys <val2> , <val1> , <val4> from <name6> <name5> python 3
<name2> . page_source	Selenium get the entire <name2> page text
<name5> [ : , ( [ <val3> , <val2> ] ) ]	extracting column <val3> and <val2> from array <name5>
re . sub ( '\\[.*?\\]'   , ''   , <val6>   )	remove all square brackets from string <val6>
re . findall ( '\\b(?:b+a)+b+\\b'   , <name6> )	find all substrings in string <name6> composed only of letters a and b where each a is directly preceded and succeeded by b
<name2> = [ tuple ( '{0:.8e}'   . format ( flt ) for flt <name6> sublist ) for sublist <name6> <name1> ]	convert list <name1> of tuples of floats to list <name2> of tuples of strings of floats <name6> scientific notation with eight decimal point precision
<name4> = [ [ '{0:.8e}'   . format ( flt ) for flt <name2> sublist ] for sublist <name2> <name3> ]	convert list of sublists <name3> of floats to a list of sublists <name4> of strings of integers <name2> scientific notation with 8 decimal points
<name3> = <name1> ( x [ 0 ] for x <name5> <name6> )	Create a <name1> <name3> containing first element of each <name1> <name5> <name1> <name6>
<name6> . <name6> . now ( ) . strftime ( '%a'   )	obtain the current day of the week in a 3 letter format from a <name6> object
ord ( <val1>   )	get the ASCII value of a character <val1> as an int
ord ( '\u3042'   )	get the ASCII value of a character u 'あ' as an int
ord ( )	get the ASCII value of a character as an int
json . load ( <name5> )	decode JSON string <name5> to a dictionary
<name5> . drop ( [ <val4>   , <val3>   ] , axis = 1 , inplace = True )	Delete mulitple columns <val4> , <val3> in pandas data frame <name5>
[ <name1> . strip ( ) for <name1> in <name5> ( ) . split ( ','   ) ]	get a list of of elements resulting from splitting user <name5> by commas and stripping white space from each resulting string <name1>
[ int ( d ) for d in str ( bin ( <name5> ) ) [ 2 : ] ]	create a list containing the digits values from binary string <name5> as elements
<name3> ( len ( word ) for word <name2> <name1> )	get the <name3> string length <name2> list <name1>
len ( max ( <name5> , key = len ) )	get the maximum string length in nested list <name5>
<name2> . system ( <name1> )	execute <name2> command <name1>
<name2> . <name5> ( key = lambda x : x . lower ( ) )	<name5> list <name2> alphabetically
<name5> . <name1> ( key = str . lower )	<name1> list <name5> in alphabetical order
mylist . <name4> ( )	<name4> a list of strings 'mylist' .
<name6> . <name5> ( )	<name5> a <name6> of strings <name6>
<name3> . set_index ( [ <val2>   , <val4>   ] , inplace = True )	Set multi index on columns <val2> and <val4> of data frame <name3> in pandas .
getattr ( <name4> , <name5> )	get the attribute <name5> from object <name4>
<name4> . split ( ' '   , 1 ) [ 1 ]	remove first word in string <name4>
<name4> = <name3> . Workbook ( <val2>   )	save <name3> file in <val2> path and assign to variable <name4>
workbook = <name1> . Workbook ( <val6>   )	save <name1> file to <val6> path
pyplot . <name5> ( loc = 2 , fontsize = <val2>   )	change <name5> size to <val2> in upper - left location
plot . <name5> ( loc = 2 , prop = {  'size'   : <val1> }  )	change <name5> font size with matplotlib .pyplot to <val1>
[ <name6> [ i : i + <name3> ] for i in range ( 0 , len ( <name6> ) , <name3> ) ]	split list <name6> into <name3> sized lists
[ <name2> [ i : i + <name1> ] for i in range ( 0 , len ( <name2> ) , <name1> ) ]	split a list <name2> into evenly sized chunks <name1>
<name1> [ <val6>   ] . str . contains ( <val4>   )	check if character <val4> exists in a dataframe <name1> cell <val6>
"re . sub ( ""[^\\w' ]"" , ''   , <val2> )"	remove all non - word , - whitespace , or - apostrophe characters from string <val2>
print ( re . findall ( '\\d+'   , '\n'   . join ( re . findall ( '\xab([\\s\\S]*?)\xbb'   , <name2> ) ) ) )	find all digits between two characters \xab and \xbb in a string <name2>
<name3> . reset_index ( ) . <name4> ( x = <val1>   , y = <val5>   )	<name4> data of column <val1> versus column <val5> of dataframe <name3> after resetting its index
<name4> . check_output ( <val2>   , shell = True )	get the output of a <name4> command <val2> in command line
[ x . encode ( <val3>   ) for x <name2> <name6> ]	Encode each value to <val3> <name2> the list <name6>
<name3> . concat ( [ df [ <val1>   ] . dropna ( ) , df [ <val6>   ] . dropna ( ) ] ) . reindex_like ( df )	combine two columns <val1> and <val6> in a <name3> data frame
<name4> ( range ( 9 ) )	generate a <name4> of consecutive integers from 0 to 8
""""" """" """" . join ( chr ( i ) for i in <name1> )"	convert list <name1> into a unicode string
super ( <name3> , self ) . __init__ ( * args )	inherit from class <name3>
[ item for item in <name3> if item != <val5>   ]	Remove the string value <val5> from a list of strings <name3>
random . choice ( <name2> )	randomly select an item from list <name2>
set ( [ 'a'   , 'b'   ] ) . issubset ( [ 'a'   , 'b'   , 'c'   ] )	check if all of the following items in list ['a', 'b'] are in a list ['a', 'b', 'c']
set ( [ 'a'   , 'b'   ] ) . issubset ( set ( <name2> ) )	Check if all the items in a list ['a', 'b'] exists in another list <name2>
[ <name4> ( t ) for t in zip ( * <name3> ) ]	to convert a <name4> of tuples <name3> into <name4> of lists
zip ( * <name6> )	group a list <name6> of tuples by values
pd . <name3> ( y , <name5> , on = 'k'   ) [ [ <val1>   , <val6>   , <val4>   ] ]	<name3> pandas dataframe <name5> with columns <val1> and <val6> and dataframe <val4> with column <val4>
[ item . strip ( ) for item in my_string . split ( ','   ) ]	Split string with comma ( , ) and remove whitespace from a string 'my_string'
print ( ( <name1> . __dict__ ) )	Get all object attributes of object <name1>
dir ( )	Get all object attributes of an object
dir ( )	Get all object attributes of an object
<name2> . set_position ( Gtk . WindowPosition . CENTER )	pygobject center <name2> <name2>
<name2> . rc ( 'font'   , ** {  'size'   : <val4>  }  )	change the size of the sci notation to <val4> above the y axis in matplotlib <name2>
<name3> . isnull ( ) . values . <name2> ( )	check if datafram <name3> has <name2> NaN vlaues
<name2> ( * <name1> )	unpack the arguments out of list <name1> to function <name2>
urllib . parse . unquote ( h . path . encode ( 'utf-8'   ) ) . <name2> ( 'utf-8'   )	<name2> encodeuricomponent in GAE
( <name5> [ <val6>   ] >   <val4> ) . mean ( )	get proportion of rows in dataframe <name5> whose values for column <val6> are greater than <val4>
<name2> = '\n'   . join ( item [ 0 ] for item in <name1> )	convert a set of tuples <name1> to a string <name2>
[ item [ 0 ] for item in <name3> ]	convert a set of tuples <name3> to a list of strings
emaillist = '\n'   . join ( [ item [ 0 ] for item in <name2> ] )	convert a list of tuples <name2> to a string from the first indexes .
print ( ( 'focus object class:'   , <name3> . focus_get ( ) . __class__ ) )	get the widget which has currently the focus in tkinter instance <name3>
<name3> = [ <val5> ] * <val1>	Initialize <name3> list <name3> with <val1> items and each item ' s value <val5>
print ( ' '   . <name4> ( sorted ( set ( <name3> ) , key = <name3> . index ) ) )	Keep only unique <name3> in list of <name3> <name3> and <name4> into string
<name4> . sample ( range ( <val2> , <val3> ) , <val6> )	generate <val6> <name4> numbers between <val2> and <val3>
<name5> . sample ( <name1> ( <val6> , 50 ) , 6 )	generate six unique <name5> numbers in the <name1> of <val6> to 49 .
{  k . lower ( ) : v . lower ( ) for k , v <name3> list ( {  'My Key'   : 'My Value'  }  . items ( ) ) }	lowercase keys and values <name3> dictionary {'My Key': 'My Value'}
dict ( ( k . lower ( ) , v ) for k , v <name1> {  'My Key'   : 'My Value'  }  . items ( ) )	lowercase all keys and values <name1> dictionary {'My Key': 'My Value'}
dict ( ( k . lower ( ) , v . lower ( ) ) for k , v <name5> {  'My Key'   : 'My Value'  }  . items ( ) )	Convert each key , value pair <name5> a dictionary {'My Key': 'My Value'} to lowercase
[ sorted ( item ) for item <name3> <name1> ]	sorting the lists <name3> list of lists <name1>
<name1> = <name5> ( map ( lambda x : x [ 0 ] , <name2> . description ) )	SQLite get a <name5> of column <name1> from <name2> object <name2>
os . <name5> . abspath ( __file__ )	get the absolute <name5> of a running python script
sorted ( <name1> , key = itemgetter ( <val4> ) )	sort 2 d array <name1> by row with index <val4>
[ index for index , <name6> in enumerate ( <name4> ) if <name6> == <val2>   ]	Get all indexes of a <name6> <val2> from a string <name4>
print ( str ( <name2> ) . <name6> ( 'raw_unicode_escape'   ) )	<name6> utf -8 code <name2> into a raw unicode literal
re . findall ( '\\w'   , <val6>   )	split string <val6> into a list of characters
os . path . isfile ( <name3> )	check whether a file <name3> exists
os . path . <name1> ( <name4> )	check whether file <name4> <name1>
print ( os . path . isfile ( <val6>   ) )	check whether a file <val6> exists
print ( os . path . isfile ( <val5>   ) )	check whether a file <val5> exists
print ( os . <name4> . <name2> ( <val1>   ) )	check whether a <name4> <val1> <name2>
print ( os . path . isfile ( <val6>   ) )	check whether a file <val6> exists
print ( os . <name3> . <name1> ( <val2>   ) )	check whether a <name3> <val2> <name1>
print ( os . <name2> . <name4> ( <val6>   ) )	check whether a <name2> <val6> <name4>
<name2> ( <name6> for <name6> <name3> range ( 3 ) )	get a <name2> each value <name6> <name3> the implicit tuple range(3)
<name3> . writeheader ( )	add field names as headers in csv constructor <name3>
[ ( <name1> , b , c ) for <name1> , ( b , c ) in <name5> ]	flatten <name1> tuple <name5>
""""" ""0x{0:08X}"" """" . format ( <val2> )"	convert <val2> to string represent a 32 bit hex number
[ ( v , k ) for k , v in <name5> ( <name6> . items ( ) ) ]	convert a python dictionary <name6> to a <name5> of tuples
[ ( v , k ) for k , v in <name3> . items ( ) ]	convert dictionary of pairs <name3> to a list of tuples
[ ( v , k ) for k , v in <name1> . items ( ) ]	convert python 2 dictionary <name1> to <name1> list of tuples where the value is the first tuple element and the key is the second tuple element
[ ( k , v ) for k , v in <name6> . items ( ) ]	convert <name6> python dictionary 'a' to <name6> list of tuples
[ int ( x , 16 ) for x in [ 'BB'   , 'A7'   , 'F6'   , '9E'   ] ]	convert a list of hex byte strings ['BB', 'A7', 'F6', '9E'] to a list of hex integers
[ int ( x , 16 ) for x in <name4> ]	convert the elements of list <name4> from hex byte strings to hex integers
<name3> , <name6> = <name5> ( 'Enter two numbers here: '   ) . <name2> ( )	assign values to two variables , <name3> and <name6> from user <name5> response to 'Enter two numbers here:  <name2> on whitespace
Test . objects . filter ( actions__contains = [ {  'fixed_key_1'   : 'foo2'  }  ] )	Filter a json from a key - value pair as {'fixed_key_1': 'foo2'} in Django
itertools . product ( <name3> ( range ( 2 ) ) , repeat = 4 )	create a <name3> containing a four elements long tuples of permutations of binary values
( datetime . now ( ) - <name5> ( 1 ) ) . strftime ( '%Y-%m-%d'   )	get yesterday ' s date as a string in YYYY-MM-DD format using <name5>
np . <name2> ( [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] ] )	Get the <name2> product of matrix [1,0,0,1,0,0] and matrix [[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]
df [ 'date'   ] = pd . to_datetime ( df [ 'date'   ] , <name5> = <val6>   )	convert date strings in pandas dataframe column df['date'] to pandas timestamps using the <name5> <val6>
<name5> . reset_index ( ) . <name1> ( <name2> , how = <val6>   , <name3> = <val4>   , <name5> = False ) . <name5> ( <val1>   )	do a <val6> <name1> of dataframes <name5> and <name2> <name3> the column <val4> and <name5> by <val1>
<name5> . loads ( <name1> . POST . get ( <val4>   , '{}'   ) )	Create a default empty <name5> object if no <name5> is available in <name1> parameter <val4>
<name1> ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) )	get a <name1> of tuples of every three consecutive items in <name1> [1, 2, 3, 4, 5, 6, 7, 8, 9]
<name3> ( grouper ( 2 , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )	slice <name3> [1, 2, 3, 4, 5, 6, 7] into lists of two elements each
<name4> . sort ( key = lambda x : map ( int , x . split ( '.'   ) ) )	Sort list <name4> based on its elements '  dot - seperated numbers
<name4> . sort ( key = lambda x : [ int ( y ) for y <name6> x . split ( '.'   ) ] )	Sort a list of integers <name4> where each value is <name6> string format
<name3> . transpose ( <val5> , 0 , 1 ) . reshape ( <val2> , -1 )	convert a <val2> d array <name3> of dimensions 4 x2x3 to a <val5> d array of dimensions <val2> x8
<name1> [ <val5>   ] . replace ( [ <val2>   , <val4>   ] , <val6>   )	replacing <val2> and <val4> values in column <val5> of dataframe <name1> with <val6>
<name1> [ <val3>   ] = <name1> [ <val3>   ] . <name5> ( [ 'ABC'   , 'AB'   ] , <val6>   )	<name5> values ['ABC', 'AB'] in a column <val3> of pandas dataframe <name1> with another value <val6>
<name2> . sub ( <name2> . <name4> ( axis = 1 ) , axis = 0 )	Subtract the <name4> of each row in dataframe <name2> from the corresponding row ' s elements
""""" """" """" . join ( [ i for i in <name6> if i . isalpha ( ) ] )"	remove all non - alphabet chars from string <name6>
l = ( int ( x ) for x in <name6> . <name2> ( ) )	<name2> a string <name6> into integers
""""" <val6> """" . <name5> ( )"	<name5> a string <val6> by white spaces .
[ i for i , elem in enumerate ( <name6> , 1 ) if elem ]	get indexes of all true boolean values from a list <name6>
<name2> . groupby ( <name2> [ <val5>   ] . map ( lambda x : x . <name6> ) )	group dataframe <name2> entries by <name6> value of the date in column <val5>
np . in1d ( <name1> , <name2> ) . nonzero ( ) [ 0 ]	Get the indices in array <name1> of each element appearing in array <name2>
<name6> . strftime ( '%l:%M%p %z on %b %d, %Y'   )	display current <name6> in readable format
<name2> . set_xticklabels ( <name2> . xaxis . get_majorticklabels ( ) , rotation = <val1> )	rotate x - axis text labels of plot <name2> <val1> degrees
""""" """" """" . join ( [ 'x'   , 'x'   , 'x'   ] )"	append array of strings ['x', 'x', 'x'] into one string
x [ ( np . arange ( x . shape [ 0 ] ) != <val2> ) , : , : ]	retrieve all items in an numpy array 'x' except the item of the index <val2>
print ( <name2> [ <val5>   ] )	pull a value with key <val5> from a json object <name2>
<name1> = sys . <name5> . <name2> ( )	<name2> a file from redirected <name5> and save to variable <name1>
""""" """" """" . join ( <name6> . findAll ( text = True ) )"	Get all the texts without tags from beautiful <name6> object <name6>
<name3> [ <name3> [ <val5>   ] == <name4> ]	extract all rows from dataframe <name3> where the value of column <val5> is <name4>
""""" """" """" . join ( set ( foo ) )"	"removing duplicate characters from a string variable ""foo"""
sorted ( <name5> . <name3> . all ( ) , key = lambda p : p . <name4> )	sort <name3> in model <name5> based on Theirs <name4> attribute
<name1> . values . <name6> ( )	<name6> a dataframe <name1> to a list
<name5> . <name2> ( <name1> = lambda x : <name6> . index ( x [ <val4>   ] ) )	<name2> list <name5> using values associated with <name1> <val4> according to elements in list <name6>
<name1> . <name3> ( key = lambda x : <name6> . index ( x [ <val5>   ] ) )	<name3> a python list of dictionaries <name1> by a given list <name6> of ids <val5> with the desired <name6>
r = requests . get ( <val3>   , headers = {  'Authorization'   : <val4>  }  )	request URI <val3> and pass authorization token <val4> to the header
re . findall ( <val3>   , <val5>   , re . <name6> )	match regex pattern <val3> on string <val5> with <name6> enabled
<name3> . shape [ 1 ]	get second array column length of array <name3>
d . apply ( lambda <name4> : <name2> ( [ <name4> [ 'A'   ] , <name4> [ 'B'   ] ] ) - <name4> [ 'C'   ] , axis = 1 )	use operations like max / <name2> within a <name4> to a dataframe 'd' in pandas
""""" <val2> """" . <name4> ( <val5>   )"	<name4> number of occurrences of a substring <val5> in a string <val2>
[ d [ <val5>   ] for d in <name2> if <val5>     in d ]	get a list of values with key <val5> from a list of dictionaries <name2>
[ d [ <val6>   ] <name4> d in <name3> ]	get a list of values <name4> key <val6> from a list of dictionaries <name3>
[ d [ <val6>   ] <name3> d <name5> <name4> ]	get a list of values <name3> key <val6> from a list of dictionaries <name5> <name4>
<name4> . sort ( key = lambda x : int ( x [ 0 ] ) )	order a list of lists <name4> by the first value
sorted ( [ [ 1 , 'mike'   ] , [ 1 , 'bob'   ] ] )	order a list of lists [[1, 'mike'], [1, 'bob']] by the first value of individual list
""""" <val3> """" . translate ( <name1> ( 'abcABC'   , 'defDEF'   ) )"	replace a string <val3> in case sensitive way using <name1>
""""" ""<br/>"" """" . join ( [ ( '%s:: %s'     % ( key , value ) ) for key , value in list ( <name5> . items ( ) ) ] )"	dictionary <name5> to string , custom format
os . system ( 'cls'   )	clear terminal screen on windows
os . system ( 'clear'   )	clear the terminal screen in Linux
os . system ( 'tcsh your_own_script'   )	execute external commands / script your_own_script with csh instead of bash
[ dict ( d , <name3> = n ) for d , n in zip ( <name5> , <name1> ) ]	update a list <name5> dictionaries with a key <name3> and value from list <name1>
[ <name3> ( x ) for x in zip ( * <name2> ) ]	create a list with the <name3> of respective elements of the tuples of list <name2>
map ( <name4> , zip ( * <name3> ) )	<name4> each value in a list <name3> of tuples
np . count_nonzero ( ~  np . isnan ( <name5> ) )	count the number of non - nan elements in a numpy ndarray matrix <name5>
map ( <name5> , zip ( * <name2> ) )	Convert each <name5> in <name5> <name2> into a tuple
<name4> . <name1> . <name2> ( <val5>   , <val3>   )	django <name2> the value of key <val5> from <name1> <name4> <name4> if exists , else return empty string <val3>
""""" <val2> """" . endswith ( ( '.mp3'   , '.avi'   ) )"	check if string <val2> ends with one of the strings from a tuple ('.mp3', '.avi')
"re . findall ( '\\[[^\\]]*\\]|""[^""]*""|\\S+'   , s )"	split a string 's' by space while ignoring spaces within square braces and quotes .
<name5> . apply ( lambda x : sorted ( x , <val3> ) )	get biggest <val3> values from each column of the pandas dataframe <name5>
os . chdir ( <val2>   )	permanently set the current directory to the <val2>
re . findall ( '\\$([^$]*)\\$'   , <name5> )	get all characters between two $ characters in <name5> <name5>
re . findall ( '\\$(.*?)\\$'   , <val6>   )	getting the string between 2 '$' characters in <val6>
datetime . datetime . strptime ( str_date , '%m/%d/%Y'   ) . <name1> ( ) . isoformat ( )	Format a <name1> object str_data into iso fomrat
<name3> [ [ <val4> , <val6> ] , [ <val4> , <val6> ] ]	get element at index <val4> of first row and element at index <val6> of second row in array <name3>
<name6> [ np . arange ( 3 ) , ( 0 , 1 , 0 ) ]	subset numpy array <name6> by column and row , returning the values from the first row , first column and the second row , second column and the third row , first column .
[ k for k , v <name5> <name6> . items ( ) if v . count ( <val4>   ) >   <val1> ]	Get a list of all keys from dictionary <name6> where the number of occurrences of value <val4> <name5> that key is more than <val1>
[ [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] ]	Create sub matrix of a list of lists [[2, 3, 4], [2, 3, 4], [2, 3, 4]] ( without numpy )
print ( <name6> [ 1 , 1 ] )	get an element at index [1,1] in a numpy array <name6>
<name5> . set_clim ( vmin = <val3> , vmax = <val1> )	Set colorbar range from <val3> to <val1> for pyplot object <name5> in matplotlib
my_data = genfromtxt ( <val3>   , delimiter = ','   )	read csv file <val3> into numpy array
df = pd . read_csv ( <val4>   , sep = ','   , header = None )	read csv file <val4> into array
np . genfromtxt ( <val2>   , delimiter = ','   )	read csv file <val2> into array
np . genfromtxt ( <val6>   , delimiter = ','   , dtype = None )	read csv file <val6> into array
<name3> . splitlines ( ) [ 0 ]	read the first line of a string <name3>
<name1> . <name5> . tolist ( )	generate a list from a pandas dataframe <name1> with the column name and column <name5>
re . sub ( '\\*\\*+'   , <val1>   , text )	Replace repeated instances of a character <val1> with a single instance in a string 'text'
re . sub ( '\\*+'   , <val2>   , text )	replace repeated instances of <val2> with a single instance of <val2>
<name1> ( ( k , v * <name2> [ k ] ) for k , v <name3> list ( dict1 . items ( ) ) if k <name3> <name2> )	multiply values of dictionary <name1> with their respective values <name3> dictionary <name2>
return ''   . join ( <name1> . choice ( <name4> . lowercase ) for i in range ( <name3> ) )	Get a <name1> <name4> of <name3> <name3>
sum ( len ( x ) for x <name4> list ( <name5> . <name3> ( ) ) )	Get total number of <name3> <name4> a nested dictionary <name5>
sum ( len ( v ) for v <name6> <name5> . values ( ) )	count all elements <name6> a nested dictionary <name5>
<name2> ( <name5> )	apply logical operator 'AND' to <name2> elements in list <name5>
""""" """" """" . join ( c for c in <name2> if c not in <val4>   )"	removing vowel characters <val4> from string <name2>
[ ( x / y ) for x , y <name6> zip ( <name1> , <name3> ) ]	Divide elements <name6> list <name1> from elements at the same index <name6> list <name3>
re . findall ( <val2>   , <val3>   )	match regex <val2> on string <val3>
<name6> . groupby ( <val2>   ) . <name4> ( lambda x : np . mean ( np . <name3> ( x [ 'v'   ] ) ) )	<name4> function <name3> to the grouped values by <val2> in dataframe <name6>
[ key for key , value in <name2> ( <name5> . items ( ) ) if set ( value ) . intersection ( <name4> ) ]	get geys of dictionary <name5> that contain any values from <name2> <name4>
[ key for item <name6> <name5> for key , value <name6> <name2> ( <name4> . items ( ) ) if item <name6> value ]	get <name2> of keys <name6> dictionary <name4> whose values contain values from <name2> <name5>
c = [ [ ( i + j ) for i , j <name2> zip ( e , <name6> ) ] for e <name2> <name4> ]	Sum elements of tuple <name6> to their respective elements of each tuple <name2> list <name4>
os . path . commonprefix ( [ <val6>   , <val3>   ] )	get the common prefix from comparing two absolute paths <val6> and <val3>
print ( os . <name3> . relpath ( <val1>   , <val4>   ) )	get relative <name3> of <name3> <val4> regarding <name3> <val1>
<name4> . <name3> ( lambda <name2> : len ( <name2> ) >   <val1> )	<name3> dataframe <name4> where the length of each group <name2> is bigger than <val1>
sorted ( <name4> ( <name6> . items ( ) ) , key = lambda e : e [ 1 ] [ 2 ] )	sort dictionary of lists <name6> by the third item in each <name4>
""""" <val6> """" . format ( <name4> = <val3>   )"	Format string <val6> to be interspersed by <name4> three times , specifying the value as <val3> only once
<name2> . reindex ( [ 'Z'   , 'C'   , 'A'   ] )	reorder indexed rows ['Z', 'C', 'A'] based on a list in pandas data frame <name2>
<name6> ( isinstance ( el , <name1> ) for el <name5> <name4> )	check if <name6> values <name5> a <name1> <name4> is a <name1>
len ( <name5> )	get the size of list <name5>
len ( [ 1 , 2 , 3 ] )	get the size of a list [1,2,3]
<name3> . __len__ ( )	get the size of object <name3>
len ( )	function to get the size of object
len ( <name4> )	get the size of list <name4>
<name6> . <name3> ( axis = 1 , ascending = False )	<name3> each row in a pandas dataframe <name6> in descending order
<name5> . groupby ( [ <val3>   , <val2>   ] ) . size ( ) . groupby ( level = 1 ) . max ( )	get count of rows in each series grouped by column <val3> and column <val2> of dataframe <name5>
<val5>     <name6> [ <val5>   , 'd'   , 'a'   , 's'   , 'd'   , 's'   ]	check if string <val5> is <name6> list ['x', 'd', 'a', 's', 'd', 's']
<name4> . pop ( <val1>   , None )	Delete an item with key <val1> from <name4>
del <name4> [ <name1> ]	Delete an item with <name1> <name1> from <name4>
parser . add_argument ( 'input'   , nargs = '+'   )	specify multiple positional arguments with argparse
<name4> . plot ( x , y , <name2> = <val1>   )	Plot using the <name2> code <val1> in matplotlib <name4>
re . sub ( '<[^<]+?>'   , ''   , text )	strip html from strings
<name2> [ np . in1d ( <name2> , <name1> ) ]	align values in array <name1> to the order of corresponding values in array <name2>
<name4> ( '[%s]'     % ', '   . join ( '%.3f'     % val for val <name6> <name1> ) )	<name4> numbers <name6> <name1> <name1> with precision of 3 decimal places
<name5> ( '['     + ', '   . join ( '%5.3f'     % v for v in <name1> ) + ']'   )	format <name5> output of list of floats <name1> to <name5> only up to 3 decimal points
<name2> ( [ ( '%5.3f'     % val ) for val in <name4> ] )	<name2> a list of floating numbers <name4> using string formatting
os . chdir ( '..'   )	Change the current directory one level up
<name1> ( <name2> . encode ( 'windows-1252'   ) )	<name1> a unicode string <name2>
struct . unpack ( 'd'   , struct . pack ( 'Q'   , int ( <name2> , 0 ) ) ) [ 0 ]	convert string representation <name2> of binary string rep of integer to floating point number
<name4> ( int ( <val1>   , 0 ) )	convert a binary <val1> to a <name4> number
struct . unpack ( 'd'   , <name3> ) [ 0 ]	convert a binary <name3> to a float number
df . colour . value_counts ( ) . <name5> ( kind = 'bar'   )	<name5> a bar graph from the column 'color' in the DataFrame 'df'
<name6> . groupby ( 'colour'   ) . size ( ) . <name3> ( <name5> = <val4>   )	<name3> categorical data in series <name6> with <name5> <val4> using pandas and matplotlib
<name6> . <name5> ( ) . <name4> ( ' '   )	<name5> and <name4> each <name6> <name6> on white spaces
<name6> . groupby ( lambda idx : 0 ) . agg ( [ <val2>   , <val4>   ] )	apply functions <val2> and <val4> to each column in dataframe <name6>
sorted ( list ( <name4> . items ( ) ) , key = lambda x : int ( x [ 1 ] ) , <name3> = True )	sort dictionary <name4> in <name3> order by values cast to integers
int ( math . ceil ( <name2> ) ) - 1	find the largest integer less than <name2>
it = iter ( <name5> ( <name6> . items ( ) ) )	iterate over a dictionary <name6> in <name5> order
return <name5> ( <name6> . items ( ) )	iterate over a dictionary <name6> in <name5> order
return iter ( <name1> ( <name3> . items ( ) ) )	iterate over a dictionary <name3> in <name1> order
<name3> = len ( <name6> ) - <name6> [ : : -1 ] . <name4> ( <name5> ) - 1	assign the <name4> of the <name3> occurence of <name5> in list <name6> to the variable <name3>
str1 = ''   . join ( <name6> )	concatenating values in <name6> to a string
' '   . join ( ( str ( x ) for x <name6> <name2> ) )	concatenating values <name6> list <name2> to a string , separate by space
str1 = ''   . join ( ( str ( e ) for e <name2> <name5> ) )	concatenating values <name2> <name5> to a string
makeitastring = ''   . join ( map ( str , <name5> ) )	concatenating values in list <name5> to a string
[ x for x in <name3> if x is not <name2> ]	remove <name2> value from list <name3>
<name1> . choice ( [ 1 , 2 , 3 ] )	select a <name1> element from array [1, 2, 3]
<name6> = [ [ <name1> for _ in range ( <val3> ) ] for _ in range ( 6 ) ]	creating a <val3> x6 matrix filled with <name1> and save it as <name6>
<name1> [ ( np . <name5> . choice ( <name1> . shape [ 0 ] , <val4> , replace = False ) ) , : ]	create a new <val4> D array with <val4> <name5> rows from array <name1>
<name2> [ ( np . <name5> . randint ( <name2> . shape [ 0 ] , size = <val4> ) ) , : ]	create a new <val4> dimensional array containing two <name5> rows from array <name2>
df . groupby ( df . index ) . sum ( )	combining rows in pandas by adding their values
root . findall ( '{http://www.w3.org/2002/07/owl#}Class'   )	find all owl:Class tags by parsing xml with namespace
""""" """" """" . join ( <name5> . choice ( <name2> . lowercase ) for <name3> in range ( X ) )"	generate a <name5> <name2> of length <name3> containing lower cased ASCII letters
sys . <name3> . append ( <val4>   )	add a <name3> <val4> to system <name3>
int ( <name6> ( <name3> ) )	<name6> number <name3> to nearest integer
<name5> = int ( <name6> ( <name5> ) )	<name6> number <name5> to nearest integer
<name2> ( <val4> , <val5> )	<name2> number <val4> up to <val5> decimal points
<name5> ( <name2> , <name6> )	<name5> number <name2> up to <name6> decimal places
<name6> ( <val1> , <val5> )	<name6> number <val1> up to <val5> decimal places
<name5> ( <val4> , <val2> )	<name5> number <val4> up to <val2> decimal places
<name4> ( <val6> , <val5> )	<name4> number <val6> up to <val5> decimal places
<name1> ( <val3> , <val5> )	<name1> number <val3> up to <val5> decimal places
<name4> ( <val1> , <val5> )	<name4> number <val1> up to <val5> decimal places
<name5> ( <val1> , <val4> )	<name5> number <val1> up to <val4> decimal places
<name6> ( <val5> , <val2> )	<name6> number <val5> up to <val2> decimal places
<name2> ( <val3> , <val1> )	<name2> number <val3> up to <val1> decimal places
df [ <val5>   ] . fillna ( df [ <val6>   ] )	fill missing value in one column <val5> with the value of another column <val6>
<name4> . info ( 'date=%s'   , <name6> )	convert the argument <name6> with string formatting in <name4>
logging . info ( 'date={}'   . format ( <name2> ) )	Log message of level 'info' with value of <name2> in the message
{  k : int ( v ) for k , v <name4> <name5> . items ( ) }	convert values <name4> dictionary <name5> into integers
map ( <name5> , zip ( * <name4> ) )	<name5> elements at the same index of each list in list <name4>
<name4> . decode ( 'hex'   )	Convert a string <name4> containing hex bytes to a hex string
binascii . a2b_hex ( <name3> )	convert a string <name3> containing hex bytes to a hex string
<name2> . <name4> ( 'HTTP/1.0 200 established\r\n\r\n'   )	<name4> data 'HTTP/1.0 200 OK\r\n\r\n' to socket <name2>
<name5> . <name3> ( <val6>   )	<name3> data <val6> to socket <name5>
<name1> [ 'x'   ] [ 'C'   ] = <val5>	set the value of cell ['x']['C'] equal to <val5> in dataframe <name1>
np . sqrt ( np . square ( <name6> ) . sum ( axis = 1 ) )	normalize the dataframe <name6> along the rows
sorted ( set ( <name3> ) )	remove identical items from list <name3> and sort it alphabetically
max ( enumerate ( <name6> ) , key = lambda x : x [ 1 ] ) [ 0 ]	find the index of the element with the maximum value from <name6> list 'a' .
[ <name3> [ <val4>   ] <name6> <name3> <name5> <name1> ]	create a list where each element is a value of the key <val4> <name6> each dictionary <name3> <name5> the list <name1>
[ ( <name2> [ <val1>   ] , <name2> [ <val5>   ] ) for <name2> <name6> <name3> ]	create a list of tuples with the values of keys <val1> and <val5> from each dictionary <name2> <name6> the list <name3>
<name2> . objects . all ( ) . order_by ( '?'   ) [ 0 ]	grab one random item from a database <name2> in django / postgresql
os . system ( 'script2.py 1'   )	run python script 'script2.py' from another python script , passing in 1 as an argument
re . findall ( '\\w+(?:-\\w+)+'   , <name1> )	python regex for hyphenated words in <name1>
parser . add_argument ( '--conf'   , nargs = 2 , action = 'append'   )	create variable key / value pairs with argparse
random . sample ( <name5> ( range ( 1 , 16 ) ) , <val6> )	Get <val6> unique items from a <name5>
<name5> . <name3> ( key = lambda str : re . sub ( '.*%(.).*'   , '\\1'   , str ) )	<name3> list <name5> in alphabetical order based on the letter after percent character % in each element
<name5> . <name6> ( key = lambda str : re . sub ( '.*%'   , ''   , str ) )	<name6> a list of <name5> <name5> based on regex match
<name5> = [ [ ] for i in range ( <val6> ) ]	Create list <name5> containing <val6> empty lists
<name1> = np . <name4> ( sorted ( <name1> , key = tuple ) )	sort numpy float <name4> <name1> column by column
[ ( x + y ) for x in <val1>     for y in <val5>   ]	Get a list from two strings <val1> and <val5> with values as each character concatenated
<val3>   . strip ( )	trim string <val3>
myString . strip ( )	trim string myString 
<val1>   . strip ( )	Trimming a string <val1>
<val3>   . strip ( )	Trimming a string <val3>
<val3>   . strip ( )	Trimming a string <val3>
<val1>   . strip ( )	Trimming a string <val1>
<name4> . strip ( )	Trimming a string <name4>
<name4> . strip ( <val1>   )	Trimming <val1> from string <name4>
<name5> . lstrip ( <val4>   )	left trimming <val4> from string <name5>
<name6> . rstrip ( <val2>   )	right trimming <val2> from string <name6>
<val2>   . strip ( ' '   )	Trimming a string <val2> by space
sorted ( unsorted , key = lambda element : ( element [ 1 ] , element [ 2 ] ) )	sort a list of tuples 'unsorted' based on two elements , second and third
print ( <name3> . <name6> ( 'utf8'   ) )	<name6> string <name3> to UTF -8 code
np . ma . <name2> ( np . tile ( <name6> , 2 ) . reshape ( 2 , 3 ) , mask = ~  <name5> ) . argmax ( axis = 1 )	find the index of the maximum value in the <name2> <name6> where the boolean condition in <name2> <name5> is true
pd . to_datetime ( <name3> . <name2> . str [ 1 : -3 ] )	convert a dataframe <name3> ' s column <name2> into datetime , after removing the first and last 3 letters
<name5> = pd . read_csv ( <val3>   , dtype = {  <val4>   : np . float64 }  , na_values = [ <val6>   ] )	read CSV file <val3> into a dataframe <name5> with datatype of float for column <val4> considering character <val6> as NaN value
df = pd . <name4> ( 'my.csv'   , na_values = [ 'n/a'   ] )	convert nan values to ‘ n / a ’  while reading rows from a csv <name4> with pandas
<name4> ( itertools . product ( * <name1> ) )	create <name1> <name4> containing all cartesian products of elements in <name4> <name1>
re . sub ( '[^A-Z]'   , ''   , <name3> )	remove uppercased characters in string <name3>
datetime . strptime ( <val4>   , <val6>   )	convert string <val4> into a DateTime object using format <val6>
codecs . open ( <val5>   , 'r'   , <val2>   ) . <name1> ( )	<name1> file <val5> using encoding <val2>
[ <name2> ( x ) for x in <name1> ]	create a <name1> containing elements from <name1> <name1> that are predicate to function <name2>
re . findall ( '(?<!\\d)\\d{5}(?!\\d)'   , <name1> )	regex matching 5 - digit substrings not enclosed with digits in <name1>
[ item for item in <name3> <name6> <name5> ( item ) >   <val2> ]	create <name3> list containing elements of list <name3> <name6> the <name5> of the element is greater than <val2>
<name5> = int ( round ( float ( <name1> . strip ( '$'   ) ) * 100 ) )	convert currency string <name1> to decimal <name5>
""""" """" """" . join ( dropwhile ( lambda x : x <name3> <name5> , <name6> [ : : -1 ] ) ) [ : : -1 ]"	remove letters from string <name6> if the letter exist <name3> list <name5>
<name2> = [ ]	Creating an empty list <name2>
<name2> = <name3> ( )	Creating an empty <name3> <name2>
<name5> ( )	Creating an empty <name5>
[ ]	Creating an empty list
sys . exit ( 0 )	properly quit a program
<name6> [ : 4 ] + <val2>     + <name6> [ 4 : ]	add string <val2> in 4th position of a string <name6>
[ [ ] for i <name6> range ( <val2> ) ]	append <val2> lists <name6> one list
<name5> = [ [ ] for i in range ( <val2> ) ]	Initialize <name5> list of empty lists <name5> of size <val2>
requests . get ( <name2> , headers = {  'referer'   : my_referer }  )	request URL <name2> using http header {'referer': my_referer}
<name1> . ylim ( [ 0 , 1000 ] )	set the y axis range to 0, 1000 in subplot using <name1>
pd . get_dummies ( <name4> . apply ( pd . Series ) . stack ( ) ) . sum ( level = 0 )	convert a column of list in series <name4> to dummies
y = str ( int ( <name4> , 16 ) )	convert a hex string <name4> to string
<name2> . isdigit ( )	check if string <name2> is an integer
isdigit ( )	function to check if a string is a number
<name6> . isdigit ( )	check if string <name6> is a number
pd . read_csv ( StringIO ( <name4> ) , sep = ','   , comment = <val3>   )	pandas read comma - separated CSV file <name4> and skip commented lines starting with <val3>
df [ <val6>   ] = df [ <val6>   ] . apply ( lambda x : int ( str ( x ) [ -4 : ] ) )	"pandas : change all the values of a column <val6> into ""int(str(x)[-4:])"""
<name5> ( <name2> )	<name5> a list of numbers <name2>
max ( <name6> , <name1> = <name2> x : x [ <val3>   ] )	Get an item from a list of dictionary <name6> which has maximum value in the <name1> <val3> using <name2> function
soup . findAll ( attrs = {  <val3>   : <val4>  }  )	BeautifulSoup find all tags with attribute <val3> equal to <val4>
str ( {  'a'   : 1 , 'b'   : 'as df'  }  ) . replace ( ': '   , ':'   ) . replace ( ', '   , ','   )	remove all spaces from a string converted from dictionary {'a': 1, 'b': 'as df'}
'{'     + ','   . join ( '{0!r}:{1!r}'   . format ( * x ) for x in list ( dct . items ( ) ) ) + '}'	convert dictionary dict into a string formatted object
""""" """" """" . join ( <name2> [ 1 : ] )"	concatenate items from list <name2> into a string starting from the second element
""""" "",+"" """" . join ( c . rsplit ( <val5>   , 1 ) )"	insert a character ',' into a string in front of <val5> character in second part of the string
<name2> [ np . <name1> ( <name2> != <val3> , axis = 1 ) ]	delete <name1> rows in <name2> numpy array <name2> where any value in <name2> row is zero <val3>
""""" "" "" """" . join ( re . split ( '[^a-zA-Z]*'   , <val4>   ) )"	extract only alphabetic characters from a string <val4>
re . split ( '[^a-zA-Z]*'   , 'your string'   )	Extract only characters from a string as a list
results_union = <name1> ( ) . <name5> ( * <name6> )	get the <name5> <name1> from list of lists <name6>
return <name1> ( set ( itertools . chain ( * <name6> ) ) )	get the union of values in <name1> of lists <name6>
np . <name2> ( np . in1d ( <name5> , <name6> ) )	check if a numpy array <name5> contains <name2> element of another array <name6>
return ''   . join ( ch for ch in <name3> if unicodedata . category ( ch ) [ 0 ] != 'C'   )	removing control characters from a string <name3>
all ( i <   j for i , j <name2> zip ( <name4> , <name6> ) )	Compare if each value <name2> list <name4> is less than respective index value <name2> list <name6>
driver . find_element_by_css_selector ( <val2>   ) . <name4> ( )	python selenium <name4> on button <val2>
os . system ( 'taskkill /im make.exe'   )	kill a process make.exe from python script on windows
print ( <name2> ( [ <name6> , func . current_date ( ) ] ) . execute ( ) )	SQLAlchemy <name2> records of columns of table <name6> in addition to current date column
re . sub ( '([a-z])\\1+'   , '\\1'   , <val6>   )	remove duplicate characters from string <val6>
re . sub ( '(?<!\\w)([A-Z])\\.'   , '\\1'   , <name5> )	remove periods inbetween capital letters that aren ' t immediately preceeded by word character ( <name5> ) in a string <name5> using regular expressions
split_list = [ <name2> [ i : i + <name6> ] for i in range ( 0 , len ( <name2> ) , <name6> ) ]	Get a list of strings split_text with fixed chunk size <name6> from a string <name2>
re . sub ( <val4>   , '<markup>\\1</markup>'   , <val1>   )	"match string <val1> with regex <val4> pandas . set_option ( 'display.max_columns' , 7 ) output data of the first 7 columns of Pandas dataframe pandas . set_option ( 'display.max_columns' , None ) Display maximum output data of columns in dataframe pandas that will fit into the screen df . ix [ df . A == 0 , 'B' ] = np . nan set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe df driver . find_element_by_xpath ( """" // li / label / input [ contains ( . . , 'polishpottery' ) ] """" ) """
<name1> . sort ( key = operator . itemgetter ( <val2>   , <val6>   ) )	Sort a list of dictionaries <name1> by keys <val2> and <val6>
<name6> . sort ( key = lambda d : ( d [ <val5>   ] , d [ <val3>   ] ) )	ordering a list of dictionaries <name6> by elements <val5> and <val3>
{  x [ 1 ] : x for x in <name4> }	Convert a list of lists <name4> to a dictionary with key as second value of a list and value as list itself
sorted ( d , key = lambda k : d [ k ] [ 1 ] )	sort keys of dictionary 'd' based on their values
int ( <name3> ( <val5> , -2 ) )	<name3> <val5> to 100
fd = os . open ( <val6>   , os . O_WRONLY |   os . O_CREAT |   os . O_EXCL )	create file <val6> if file <val6> does not exist
new_list = [ x . split ( ) [ -1 ] for x in <name1> ]	get a list of last trailing words from another list of strings <name1>
<val6>   [ : : ( -1 ) ]	Reverse a string <val6>
<name2> [ : : ( -1 ) ]	Reverse list <name2>
''   . join ( reversed ( <val2>   ) )	Reverse string <val2>
''   . join ( reversed ( <name5> ) )	Reverse a <name5> <name5>
<val4>   [ : : ( -1 ) ]	Reverse a string <val4>
<name5> [ : : ( -1 ) ]	Reverse a string <name5>
''   . join ( reversed ( <name2> ) )	Reverse a string <name2>
""""" "","" """" . join ( str ( i ) for i in range ( 100 ) if i % <val1> in ( <val2> , <val3> ) )"	generate a string of numbers separated by comma which is divisible by <val1> with remainder <val2> or <val3> .
dict ( [ ( e [ 0 ] , int ( e [ 1 ] ) ) for e in <name3> ] )	convert list <name3> of key , value pairs into a dictionary
sorted ( <name1> , key = lambda tup : tup [ : : -1 ] )	sorting a list of tuples <name1> where each tuple is reversed
sorted ( <name2> , <name6> = lambda tup : tup [ 1 ] )	sorting a list of tuples <name2> by second <name6>
numpy . concatenate ( [ a , b ] )	Concatenating two one - dimensional NumPy arrays 'a' and 'b' .
pickle . dump ( <name6> , <name3> )	serialize <name6> to file <name3>
<name3> . write ( '\n'   . join ( <name6> ) )	writing items in list <name6> to file <name3>
session . query ( User ) . filter_by ( <name3> = <val6> ) . update ( {  'name'   : <val5>  }  )	Update a user ' s name as <val5> having <name3> <val6> in SQLAlchemy
r = <name6> . <name1> ( <val4>   , <name5> = <name2> )	send <name5> <name2> in a <name1> request to url <val4> with the python <name6> library
sys . path . <name1> ( <val3> , <val2>   )	<name1> directory <val2> at the <val3> th index of current directory
datetime . datetime . now ( )	get current date and time
datetime . datetime . now ( ) . <name5> ( )	get current <name5>
strftime ( '%Y-%m-%d %H:%M:%S'   , gmtime ( ) )	get current time in pretty format
str ( datetime . now ( ) )	get current time in string format
datetime . datetime . <name2> ( datetime . datetime . now ( ) )	get current <name2>
ord ( <val4>   )	convert hex <val4> to integer
<name1> . groupby ( [ <val2>   , <val3>   ] ) . cumcount ( ) + 1	identify duplicated rows in columns <val2> and <val3> with additional column in dataframe <name1>
datetime . utcnow ( )	get current utc time
<name2> [ -1 : ] + <name2> [ : -1 ]	move last item of array <name2> to the first position
<name5> . set_index ( [ <val4>   , <val6>   , <val3>   ] ) . unstack ( level = -1 )	Convert dataframe <name5> to a pivot table using column <val4> , <val6> , and <val3> as indexes
df . pivot_table ( values = 'value'   , <name5> = [ <val6>   , <val1>   ] , columns = 'item'   )	run a pivot with a multi - <name5> <val6> and <val1> in a pandas data frame
<name5> ( '\n\x1b[4m'     + '3'     + '\x1b[0m'     + '\n2'   )	<name5> a rational number 3/2
range ( <val3> , <val2> , -1 )	iterate backwards from <val3> to <val2>
<name5> [ 0 ] . firstChild . nodeValue	get value of first child of xml node <name5>
<name2> . start_new_thread ( <name6> , ( <val5>   , <val3> ) )	start a new <name2> for <name6> with parameters <val5> and <val3>
<name4> . start_new_thread ( <name1> , ( <val2>   , <val5> ) )	start a new <name4> for <name1> with parameters <val2> and <val5>
<name6> . <name4> ( max ( <name6> ) )	get <name4> of the first biggest element in list <name6>
re . sub ( '\\.(?=[^ .])'   , <val3>   , para )	replace periods . that are not followed by periods or spaces with a period and a space <val3>
[ i . split ( ) for i <name3> re . findall ( '\\[([^\\[\\]]+)\\]'   , <name2> ) ]	convert <name2> string <name2> of letters embedded <name3> squared brackets into embedded lists
[ <name3> for <name3> in <name4> if <name3> [ <val2>   ] == <val1>   ]	extract dictionary <name3> from list <name4> where the value associated with the key <val2> of dictionary <name3> is equal to <val1>
[ d for d in <name5> if d [ 'name'   ] == 'pluto'   ]	extract dictionary from list of dictionaries based on <name5> key ' s value .
<name3> ( d . <name6> ( ) )	Retrieve <name3> of <name6> from dictionary 'd'
re . sub ( ' +'   , <val6>   , <name5> )	replace occurrences of two whitespaces or more with one whitespace <val6> in string <name5>
os . chmod ( <val3>   , <val2> )	Change the mode of file <val3> to permission number <val2>
<name2> . to_csv ( <val1>   , index = False )	write pandas dataframe <name2> to the file <val1> without row names
re . sub ( '\\w*\\d\\w*'   , ''   , <name4> ) . strip ( )	remove all <name4> which contains number from a string <name4> using regex
<name5> . rawinput . click ( 100 , 100 )	control the keyboard and mouse with <name5> in linux
datetime . strptime ( <val2>   , <val6>   )	parse date string <val2> using format <val6>
re . search ( '\\bis\\b'   , <name2> ) . start ( )	Get the position of a regex match for word is in a string <name2>
re . search ( <val1>   , <name3> ) . start ( )	Get the position of a regex match <val1> in a string <name3>
<name3> ( map ( int , <name6> ( ) . split ( ','   ) ) )	<name6> an integer <name3> from user
<name1> ( int ( x . strip ( ) ) for x in <name2> ( ) . split ( ','   ) )	<name2> a <name1> of integers from user
str . decode ( 'utf-8'   ) . <name1> ( <val2>   , <val5>   ) . encode ( 'utf-8'   )	<name1> unicode character <val2> in string 'str' with <val5>
<name3> . decode ( 'utf-8'   ) . <name5> ( '\u2022'   , '*'   )	<name5> unicode characters '' \ u2022 ' in string ' <name3> ' with ' * '
np . zeros ( ( <val5> , <val5> ) ) . ravel ( )	convert ndarray with shape <val5> x3 to array
print ( os . <name5> )	get the <name5> of the OS
min ( <name4> , key = lambda x : <name2> ( 'inf'   ) if math . isnan ( x [ 1 ] ) else x [ 1 ] )	Get a minimum value from a <name4> of tuples <name4> with values of type string and <name2> with nan
<name2> = [ ( sum ( x ) / len ( x ) ) for x in zip ( * <name2> ) ]	Find average of <name2> nested list <name2>
logging . <name5> ( <val2>   , extra = {  'app_name'   : 'myapp'  }  )	Log <name5> message <val2> with attributes {'app_name': 'myapp'}
<name1> . applymap ( lambda x : isinstance ( x , ( int , float ) ) )	replace values of dataframe <name1> with True if numeric
sorted ( <name3> , key = lambda x : int ( re . search ( '\\d+'   , x ) . group ( 0 ) ) )	sort list <name3> based on its elements '  digits
self . root . destroy ( )	close the window in tkinter
<name1> . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] . <name5> ( axis = 1 )	get <name5> of columns 2, 5, 6, 7, 8 for all rows in dataframe <name1>
<name1> [ <name1> . <name2> . map ( lambda x : x [ 1 ] . endswith ( <val3>   ) ) ]	filter dataframe <name1> by sub - level <name2> <val3> in pandas
db . session . <name4> ( <name1> )	flask - sqlalchemy <name4> row <name1>
""""" """" """" . join ( chr ( ord ( c ) ) for c in 'Andr\xc3\xa9'   )"	Format a string u'Andr\xc3\xa9' that has unicode characters
""""" """" """" . join ( chr ( ord ( c ) ) for c in <val2>   ) . decode ( 'utf8'   )"	convert a unicode <val2> to a string
os . listdir ( <name1> )	list all files in directory <name1>
os . <name3> ( <name2> , <name2> + <val1>   )	<name3> file <name2> to <name2> + <val1>
""""" <val1> """" . join ( <name2> + b for <name2> , b <name6> zip ( <name3> [ : : 2 ] , <name3> [ 1 : : 2 ] ) )"	Insert <name2> character <val1> after every two elements <name6> <name2> string <name3>
print ( '%.3f'     % 3.1415 )	printing numbers rounding up to third decimal place
<name6> [ 0 ] [ <val3>   ] = <name1>	add variable <name1> to key <val3> of first element in JSON <name6> <name6>
print ( <name4> . __file__ )	get the path of module <name4>
print ( os . getcwd ( ) )	get the path of the current python module
<name2> = os . <name2> . abspath ( <name1> . __file__ )	get the <name2> of the python module <name1>
self . <name4> . extend ( [ <val2> ] * ( <val5> - len ( self . <name4> ) ) )	fill list <name4> with <val5> <val2> ' s
<name6> [ ~  <name6> . index . duplicated ( ) ]	drop duplicate indexes in a pandas data frame <name6>
<name3> ( * <name1> )	unpack elements of list <name1> as arguments into function <name3>
[ ( '%.2d'     % i ) for i <name3> range ( 16 ) ]	generate list of numbers <name3> specific format using string formatting precision .
sorted ( iter ( <name6> . items ( ) ) , key = lambda tup : <name5> ( tup [ 1 ] ) , reverse = True ) [ : 3 ]	sort dictionary <name6> in descending order based on the <name5> of each value in it
heapq . nlargest ( <val5> , iter ( <name2> . <name4> ( ) ) , key = lambda tup : <name6> ( tup [ 1 ] ) )	get top <val5> <name4> from a dictionary <name2> with largest <name6> of values
[ 'a'   , <val3>   ] . <name4> ( <val3>   )	get <name4> of character <val3> in list '[' a ', ' b ']'
<name1> . setp ( <name6> . get_title ( ) , fontsize = <val5>   )	set font size of axis <name6> of plot <name1> to <val5>
[ x [ 1 ] for x in <name1> ]	extract the 2 nd <name1> from a list of tuples
np . diag ( np . rot90 ( <name4> ) )	get the opposite diagonal of a numpy <name4> <name4>
<name3> ( chain . from_iterable ( <name6> ) )	flatten <name3> of tuples <name6>
re . sub ( '\\s{2,}'   , <val1>   , <name6> . strip ( ) )	substitute two or more whitespace characters with character <val1> in string <name6>
<name1> ( ( '%.2f'     % <name3> ) )	<name1> float <name3> with two decimal points
<name6> ( ( '{0:.2f}'   . format ( <name3> ) ) )	<name6> float <name3> with two decimal points
<name2> ( ( '{0:.2f}'   . format ( round ( <name3> , 2 ) ) ) )	<name2> float <name3> with two decimal points
<name4> ( ( '%.2f'     % round ( <name2> , 2 ) ) )	<name4> float <name2> with two decimal points
( '%.2f'     % <val6> )	limit float <val6> to two decimal points
( '%.2f'     % <val3> )	limit float <val3> to two decimal points
<name3> ( '{0:.2f}'   . format ( 13.95 ) )	limit <name3> 13.949999999999999 to two decimal points
'{0:.2f}'   . format ( 13.95 )	limit float 13.949999999999999 to two decimal points
DataFrame . from_csv ( <val5>   , sep = '\t'   )	load a tsv file <val5> into a pandas data frame
dateutil . parser . parse ( '2013/09/11 00:17 +0900'   )	set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'
cur . mogrify ( <val2>   , ( ( <val6> , <val1> , <val3> ) , ) )	pass a list of parameters ` ( ( <val6> , <val1> , <val3> ) , ) to sql queue <val2>
<name1> ( [ <name1> ( x ) for x in [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ] )	<name1> all elements of two - dimensions list [[1, 2, 3, 4], [2, 4, 5, 6]]]
next ( iter ( <name6> . values ( ) ) )	Retrieve an arbitrary value from dictionary <name6>
next ( iter ( list ( <name3> . values ( ) ) ) )	access an arbitrary value from dictionary <name3>
<name2> . groupby ( [ <val5>   , <val3>   ] ) . sum ( ) . unstack ( level = 0 )	group dataframe <name2> by columns <val5> and <val3>
sorted ( <name1> , <name4> = lambda x : <name5> . index ( x [ 1 ] ) )	sort list <name1> of tuples by arbitrary <name4> from list <name5>
sorted ( <name5> , <name4> = lambda x : x [ 'passport'   ] [ 'birth_info'   ] [ 'date'   ] )	sort a list of dictionary <name5> according to the <name4> ['passport']['birth_info']['date']
urlparse . urldefrag ( <val6>   )	remove the fragment identifier #something from a url <val6>
urllib . request . urlretrieve ( <val3>   , <val2>   )	download to a directory <val2> from source <val3>
<name3> ( set ( frozenset ( item ) for item in <name5> ) )	remove all duplicates from a <name3> of sets <name5>
[ set ( item ) for item in set ( frozenset ( item ) for item in L ) ]	remove duplicates from a list of sets 'L'
<name6> . <name2> ( )	<name2> process <name6>
del <name3> [ : ]	delete all values in a list <name3>
ctypes . windll . user32 . MessageBoxW ( 0 , 'Error'   , 'Error'   , 0 )	throw an error window in python in windows
<name4> = <name3> ( [ _f for _f in <name4> if _f ] )	remove empty strings from <name3> <name4>
re . sub ( '[\\ \\n]{2,}'   , ''   , <name4> )	remove newlines and whitespace from string <name4>
re . sub ( '\\.[^.]+$'   , ''   , <name5> )	remove the last dot and all text beyond it in string <name5>
<name2> [ np . all ( np . any ( <name2> - <name3> [ : , ( None ) ] , axis = 2 ) , axis = 0 ) ]	remove elements from an array <name2> that are in array <name3>
<name6> . to_csv ( <val4>   , cols = [ <val2>   ] )	Write column <val2> of DataFrame <name6> to csv file <val4>
exec ( compile ( open ( <val4>   ) . read ( ) , <val4>   , 'exec'   ) )	call a Python script <val4>
subprocess . <name4> ( <val3>   , shell = True )	<name4> a Python script <val3>
sorted ( <name4> , key = <name5> x : x [ 1 ] )	sort a <name4> list <name4> using <name5> function
sorted ( list ( <name4> . items ( ) ) , <name5> = lambda x : ( x [ 1 ] , x [ 0 ] ) , reverse = True )	sort a dictionary <name4> by value then by <name5>
<name6> . find_all ( 'div'   , class_ = 'crBlock '   )	using beautifulsoup to select div blocks within html <name6>
[ element for i , element <name4> enumerate ( <name6> ) if i not <name4> <name3> ]	remove elements from list <name6> the indexes of which are <name4> array <name3>
<name4> ( set ( <name3> ) &   set ( <name2> ) )	<name4> duplicated elements in two lists <name3> and <name2>
urllib . request . urlretrieve ( <val1>   , <val3>   )	download file from http url <val1> and save as <val3>
file_name = wget . <name3> ( <name5> )	<name3> file from http url <name5>
<name2> . set_yticklabels ( [ '\xe9'   , '\xe3'   , '\xe2'   ] )	set an array of unicode characters [u'\xe9', u'\xe3', u'\xe2'] as labels in Matplotlib <name2>
<name1> ( itertools . product ( <name1> ( range ( - x , <name2> ) ) , repeat = <name6> ) )	get a <name1> of all integer points in a <name6> dimensional hypercube with coordinates from -x to <name2> for all dimensions
print ( <name2> . encode ( 'unicode_escape'   ) )	convert unicode string <name2> into string literals
'Hello %s'     % ', '   . join ( <name4> )	how to format a list of arguments <name4> into a string
re . <name3> ( <val5>   , <val4>   , 1 )	search and <name3> string <val4> by delimiter <val5>
re . <name1> ( <val4>   , <val3>   , 1 )	regex search and <name1> string <val3> by delimiter <val4>
pd . DataFrame ( <name1> )	convert a list of dictionaries <name1> to pandas data frame
""""" <val6> """" . <name1> ( )"	<name1> string <val6> into words that do not contain whitespaces
""""" <val2> """" . <name1> ( )"	<name1> string <val2> into words that does not contain whitespaces
woduplicates = <name6> ( set ( <name3> ) )	remove all duplicate items from a <name6> <name3>
<name6> ( [ ( i * j ) for i , j <name3> <name4> ( itertools . <name5> ( <name2> , 2 ) ) ] )	<name6> of product of <name5> <name3> a <name4> <name2>
re . compile ( '{}-\\d*'   . format ( user ) )	regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits .
[ <name6> ( i ) for i <name4> <name2> ]	convert all of the items <name4> a list <name2> to <name6>
writer . writerow ( <name3> )	write a tuple of tuples <name3> to a csv file using python
writer . writerows ( <name6> )	Write all tuple of tuples <name6> at once into csv file
""""" <val4> """" . <name1> ( <val2>   , <val5>   )"	python , <name1> string <val4> to have <val2> and <val5> in the first and second positions
<name1> = [ x . replace ( <val5>   , ''   ) for x <name4> <name1> ]	Truncate <val5> from each string <name4> a list of string <name1>
[ i . partition ( <val3>   ) [ -1 ] for i in <name2> if <val3>     in i ]	split elements of a list <name2> by <val3>
re . <name5> ( <val2>   , <name6> , re . DOTALL )	<name5> for regex pattern <val2> in string <name6> including new line character '\n'
<name5> = driver . find_element_by_css_selector ( 'li.next>a'   )	find button that is in li class <name5> and assign it to variable <name5>
os . stat ( <val6>   ) . st_size	get the size of file <val6>
imtag = re . <name1> ( <val6>   , line ) . group ( 0 )	return a string from a regex <name1> with pattern <val6> in string 'line'
os . rename ( <val2>   , <val5>   )	Rename a folder <val2> to <val5>
re . findall ( '(?=(\\w\\w))'   , <val4>   )	find overlapping matches from a string <val4> using regex
bin ( <val2> )	convert <val2> to binary string
int ( <val1>   , 2 )	convert binary string <val1> to integer
int ( <val3>   , 2 )	convert binary string <val3> to integer
int ( <val2>   , 2 )	convert binary string <val2> to integer
bin ( <val4> )	convert <val4> to binary string
int ( <val5>   , 2 )	convert binary string <val5> to integer
re . sub ( '$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$'   , ''   , <name3> )	delete all digits in string <name3> that are not directly attached to a word character
re . sub ( '\\b\\d+\\b'   , ''   , <name5> )	delete digits at the end of string <name5>
<name5> = re . sub ( '^\\d+\\s|\\s\\d+\\s|\\s\\d+$'   , ' '   , <name5> )	Delete self - contained digits from string <name5>
<name6> . split ( <val4>   , 1 ) [ 1 ]	truncate string <name6> up to character <val4>
<name2> ( <name3> . split ( <val4>   ) )	<name2> a string <name3> by splitting with comma <val4>
<name5> . split ( <val6>   )	Create list by splitting string <name5> using <val6> as delimiter
re . sub ( '\\((\\w+)\\)'   , '\\1'   , <name5> )	remove parentheses only around single words in a string <name5> using regex
<name6> . open_new ( <name2> )	<name6> open <name2> <name2>
<name5> . <name2> ( <val1>   )	<name5> <name2> url <val1>
self . pushButton . setStyleSheet ( 'background-color: red'   )	change the background colour of the button pushbutton to red
[ x ( y ) for x , y in zip ( <name1> , <name6> ) ]	apply a list of <name1> named 'functions' over a list of <name6> named 'values'
wx . TextCtrl ( self , -1 , size = ( <val2> , -1 ) )	modify the width of a text control as <val2> keeping default height in wxpython
imshow ( <name5> , cmap = 'Greys_r'   )	display a grayscale image from array of pixels <name5>
<name2> . fillna ( <val1> )	replace all the nan values with <val1> in a pandas dataframe <name2>
<name2> . toPandas ( ) . to_csv ( <val6>   )	export a table dataframe <name2> in pyspark to csv <val6>
<name1> . write . <name3> ( <val4>   )	Write DataFrame <name1> to <name3> file <val4>
<name5> ( x [ 1 ] for x in <name6> )	get the <name5> of each second value from a list of tuple <name6>
df . <name3> ( <val4>   ) [ <val1>   ] . agg ( lambda x : x . nlargest ( <val6> ) . <name2> ( ) )	<name2> the <val6> largest integers in <name3> by <val4> and <val1>
datetime . strptime ( <val2>   , <val3>   )	Parse string <val2> according to format <val3>
os . path . dirname ( os . path . abspath ( __file__ ) )	get current script directory
re . sub ( '(.)'   , '\\1\\1'   , text . read ( ) , 0 , re . S )	double each character in string text.read()
""""" """" """" . join ( ( 'a'   , 'b'   , 'c'   , 'd'   , 'g'   , 'x'   , 'r'   , 'e'   ) )"	concatenate strings in tuple ('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e') into a single string
os . <name5> . dirname ( os . <name5> . abspath ( __file__ ) )	get full <name5> of current directory
""""" <val5> """" . <name6> ( <name4> , <name2> )"	variable number of <name2> <name2> in variable <name4> in <name6> string <val5>
self . request . <name2>	get current requested <name2>
random_choice = <name2> . choice ( <name3> )	get a <name2> item from list <name3>
<name4> = <name3> ( len ( s ) for s <name5> <name6> )	<name3> the <name4> of all <name6> <name5> a list <name6>
<name6> = sorted ( <name6> , key = lambda x : ( x [ 1 ] , x [ 2 ] ) )	sort a list <name6> by first and second attributes
<name3> . <name6> ( key = operator . itemgetter ( 1 , 2 ) )	<name6> a list of lists <name3> by second and third element in each list .
con . <name4> ( )	Mysql <name4> current transaction
[ k for k in <name6> if <val2>     in k ]	filtering out strings that contain <val2> from a list of strings <name6>
output = ''   . join ( item [ 0 ] . upper ( ) for item <name6> <name3> . split ( ) )	find the first letter of each element <name6> string <name3>
<name2> . _meta . pk . <name4>	get <name4> of primary field <name4> of django model <name2>
len ( <name2> . split ( ) )	count the number of words in a string <name2>
np . einsum ( 'ji,i->j'   , <name5> , <name6> )	multiply array <name5> and array <name6> respective elements then sum each row of the new array
sys . <name6>	check python <name6>
sys . version_info	check python version
print ( '\\num{{{0:.2g}}}'   . <name6> ( <val1> ) )	<name6> number <val1> using latex notation
<name6> = [ [ ] for i in range ( <val3> ) ]	Initialize a list of empty lists <name6> of size <val3>
{{  <name1> |   <name3> |   <name2> }}	apply jinja2 filters <name3> and <name2> on variable <name1>
<name3> ( * [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] )	<name3> a list of tuples [(1, 4), (2, 5), (3, 6)] into a list of tuples according to original tuple index
[ <name5> ( group ) for key , group in <name2> . groupby ( <name4> , operator . itemgetter ( 1 ) ) ]	split a <name5> of tuples <name4> into sub - lists of the same tuple field using <name2>
<name4> ( 'hello'   )	Convert a string into a <name4>
<name3> [ <val5>   ] = <name3> [ <val2>   ] / <name3> [ <val4>   ]	create new column <val5> in dataframe <name3> with row values equal to the value in column <val2> divided by the value in column <val4>
os . walk ( <name3> )	getting a list of all subdirectories in the <name3> <name3>
[ x [ 0 ] for x <name6> os . walk ( <name4> ) ]	get a list of all subdirectories <name6> the <name4> <name4>
{  <name4> : <val6>     for <name4> , <name5> <name1> list ( <name2> . items ( ) ) <name3> <name5> != <val4>  }	update all values associated with key <name4> to string <val6> <name3> value <name5> is not equal to <val4> <name1> dictionary <name2>
dict ( ( k , <val2>   ) for k , v in <name6> . items ( ) if v is <name5> )	Filter a dictionary <name6> to remove keys with value <name5> and replace other values with <val2>
dict ( ( k , <val6>   ) for k , v in <name5> . items ( ) if v != <val4>   )	Filter a dictionary <name5> to remove keys with value <val4> and replace other values with <val6>
<name6> . <name5> ( <name3> ) . size ( )	count number of rows in a group <name3> in pandas <name5> object <name6>
<name6> = [ <name5> ( <name3> ) for <name3> <name1> <name4> ]	return list <name6> of <name5> of elements of each list <name3> <name1> list of lists <name4>
any ( d [ 'site'   ] == 'Superuser'     <name3> d <name6> data )	What ' s the best way to search <name3> a Python dictionary value <name6> a list of dictionaries ?
nodes = [ [ <name1> ( ) for j in range ( <name5> ) ] for i in range ( <name4> ) ]	create a 2 D array of <name1> objects with dimensions <name5> columns and <name4> <name4>
print ( os . path . splitext ( <val1>   ) [ 0 ] + <val2>   )	replace extension '.txt' in basename <val1> with extension <val2>
<name4> . display . set_mode ( ( 0 , 0 ) , <name4> . <name5> )	Set the resolution of a monitor as <name5> in <name4>
<name1> . set_title ( '$%s \\times 10^{%s}$'     % ( '3.5'   , '+20'   ) )	format float 3.5e+20 to $3.5 \\times 10^{20}$ and set as title of matplotlib plot <name1>
print ( os . path . getmtime ( <val4>   ) )	Get the age of directory ( or file ) <val4> in seconds .
<name4> . strftime ( '%B'   )	how to get month name of datetime <name4>
<name3> . strftime ( '%B'   )	get month name from a datetime object <name3>
[ j for i in <name6> for j in i ]	Convert nested list <name6> into a flat list
print ( <name4> ( <name2> . chain . from_iterable ( <name5> ) ) )	get each value from <name5> <name4> of lists <name5> using <name2>
datetime . datetime . strptime ( <val1>   , '%B %d, %Y'   ) . strftime ( '%A'   )	convert date string <val1> into day of week
<name2> . <name4> ( <val1>   )	<name4> item <val1> in list <name2>
<name4> . <name1> ( <name5> )	<name1> item <name5> in list <name4>
<name4> . remove ( <val6> )	delete the element <val6> from list <name4>
<name2> . remove ( <val6> )	delete the element <val6> from list <name2>
re . findall ( '(?=(a.*?a))'   , <val1>   )	Get all matching patterns 'a.*?a' from a string <val1> .
np . einsum ( 'ij,kj->jik'   , <name1> , <name1> )	outer product of each column of a 2 d <name1> array to form a 3 d array <name1>
<name3> [ ( -1 ) ]	Getting the last element of list <name3>
<name1> [ ( -2 ) ]	Getting the second to last element of list <name1>
<name1> [ ( - <name3> ) ]	gets the <name3> th - to - last element in list <name1>
<name5> [ ( -1 ) ]	get the last element in list <name5>
<name5> [ ( -1 ) ]	get the last element in list <name5>
print ( [ u for v in [ [ i , i ] for i in range ( <val5> ) ] for u in v ] )	make a list of integers from 0 to <val5> where each second element is a duplicate of the previous element
[ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ]	create a list of integers with duplicate values [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]
[ ( i // 2 ) for i in range ( 10 ) ]	create a list of integers from 1 to 5 with each value duplicated
<name6> [ <name6> . find ( '\n'   ) + 1 : <name6> . rfind ( '\n'   ) ]	remove first and last lines of string <name6>
{  ( x ** 2 ) for x <name5> <name4> ( <val2> ) }	create dict of squared int values <name5> <name4> of <val2>
<name1> ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )	<name1> lists [1, 2], [3, 4], [5, 6] in a list
<name1> ( * [ [ <val4> , <val5> ] , [ <val6> , <val2> ] , [ <val3> , <val1> ] ] )	<name1> lists in a list [ [ <val4> , <val5> ] , [ <val6> , <val2> ] , [ <val3> , <val1> ] ]
requests . get ( <val4>   , auth = ( <val1>   , <val2>   ) )	request page <val4> with credentials of username <val1> and password <val2>
<name1> [ 2 : ]	get a new string from the 3 rd character to the end of the string <name1>
<name4> [ : 2 ]	get a new string including the first two characters of string <name4>
<name6> [ : ( -2 ) ]	get a new string including all but the last character of string <name6>
<name1> [ ( -2 ) : ]	get a new string including the last two characters of string <name1>
<name2> [ 2 : ( -2 ) ]	get a new string with the 3 rd to the second - to - last characters of string <name2>
<name5> [ : : ( -1 ) ]	reverse a string <name5>
<val3>   [ : : 2 ]	select alternate characters of <val3>
<name4> = <name4> [ <name3> : ( <name3> + <name6> ) ]	select a substring of <name4> <name3> at <name3> of length <name6>
sys . exit ( )	terminate the program
quit ( )	terminate the program
sys . exit ( <val1>   )	Terminating a Python script with error message <val1>
<name6> [ <val5>   ] . <name1> ( <val4>   , 'ignore'   )	<name1> value of key <val5> in dictionary <name6> as <val4> , ignoring non - ascii characters
pd . read_csv ( <val3>   , <name2> = list ( 'abcdef'   ) )	read a ragged csv file <val3> using <name2> parameter in pandas
<name1> . stack ( ) . groupby ( level = 0 ) . <name2> ( )	get <name2> non - null value per each row from dataframe <name1>
""""" ""{0} {1}"" """" . format ( <val6> , <val4> )"	print two numbers <val6> and <val4> using string formatting
""""" <val2> """" . format ( 10 , 20 , foo = 'bar'   , ham = 'spam'   )"	replace placeholders in string <val2> with arguments (10, 20, foo='bar', ham='spam')
changed_list = [ ( int ( f ) if f . isdigit ( ) else f ) for f in <name3> ]	create list changed_list  containing elements of list <name3> whilst converting strings containing digits to integers
dict ( zip ( <name6> , zip ( * <name3> ) ) )	get a dictionary with <name6> from one list <name6> and values from other list <name3>
<name2> . decode ( 'iso-8859-1'   ) . encode ( 'utf8'   )	convert string <name2> from iso -8859 -1 / latin1 to utf -8
<name1> . to_csv ( <val3>   , header = False )	Exclude column names when writing dataframe <name1> to a csv file <val3>
print ( <val4>   . <name3> ( '1'   , '2'   , '3'   ) )	Escape character '}' in string <val4> while using function <name3> with arguments ('1', '2', '3')
<name3> ( <name4> , <name6> = lambda d : d [ <val1>   ] )	get dictionary with <name3> value of <name6> <val1> in list of dicts <name4>
""""" <val6> """" . <name2> ( <val1>   , <val3>   )"	<name2> parameters <val1> and <val3> into plcaeholders in string <val6>
<name3> = models . ForeignKey ( <val4>   , unique = True )	django create a foreign key column <name3> and link it to table <val4>
re . compile ( '^([^A]*)AA([^A]|AA)*$'   )	write a regex pattern to match even number of letter A
<name3> = np . concatenate ( ( a , a ) , <name1> = <val6> )	join Numpy array <name3> with Numpy array 'a' along <name1> <val6>
sorted ( <name3> , key = lambda x : x . replace ( '0'   , 'Z'   ) )	custom sort an alphanumeric list <name3>
ax . set_yscale ( 'log'   )	plot logarithmic axes with matplotlib
os . environ [ <val6>   ]	Access environment variable <val6>
os . environ [ <val4>   ]	get value of environment variable <val4>
<name4> ( os . environ )	<name4> all environment variables
os . environ	get all environment variables
print ( os . environ . <name1> ( <val2>   ) )	<name1> value of the environment variable <val2>
print ( os . getenv ( <val3>   , <name1> ) )	get value of the environment variable <val3> with default value <name1>
print ( os . environ . <name3> ( <val6>   , <val1>   ) )	<name3> value of the environment variable <val6> with default value <val1>
print ( dict ( [ s . <name5> ( <val2>   ) for s <name3> <name1> ] ) )	create a dictionary containing each string <name3> list <name1> <name5> by <val2> as a key / value pairs
min ( enumerate ( <name2> ) , key = lambda x : abs ( x [ 1 ] - <val3> ) )	find the index of element closest to number <val3> in list <name2>
"e = <name6> . xpath ( './/a[contains(text(),""TEXT A"")]'   )"	"find element a that contains string ""TEXT A"" in file <name6>"
"<name2> = <name1> . xpath ( './/a[starts-with(text(),""TEXT A"")]'   )"	"Find the a tag in html <name1> which starts with the text ""TEXT A"" and assign it to <name2>"
"e = <name3> . xpath ( './/a[text()=""TEXT A""]'   )"	find the element that holds string 'TEXT A' in file <name3>
<name1> = [ <name5> [ i ] for i <name4> <name2> ]	create list <name1> containing items from list <name5> whose <name2> is <name4> list <name2>
np . <name6> ( a [ : , ( None ) ] , b [ ( None ) , : ] )	get the <name6> product of two one dimensional numpy arrays
np . outer ( a , b )	multiplication of two 1 - dimensional arrays in numpy
subprocess . call ( [ <val6>   , <name1> , <name3> ] )	execute a file <val6> with arguments <name1> and <name3> in python shell
<name4> [ [ <val5>   ] ] . fillna ( <name4> . groupby ( <val1>   ) . transform ( 'mean'   ) )	Replace NaN values in column <val5> with the mean of data in column <val1> of dataframe <name4>
re . sub ( '(.)(?=.)'   , '\\1-'   , <name6> )	separate each character in string <name6> by '-'
re . sub ( '(?<=.)(?=.)'   , <val5>   , <name1> )	concatenate <val5> in between characters of string <name1>
i , j = <name4> . <name5> ( <name6> == <name3> )	get the indexes of the x and y axes in Numpy array <name4> <name5> variable <name6> is equal to variable <name3>
<name4> ( collections . Counter ( <name2> ) . most_common ( 1 ) [ 0 ] )	<name4> letter that appears most frequently in string <name2>
<name4> ( re . findall ( '(?:^|_)'     + <name6> + '(\\d+\\.\\d*)'   , <name5> ) [ 0 ] )	find <name4> number proceeding sub - string <name6> in string <name5>
re . findall ( '[^a]'   , <val3>   )	Get all the matches from a string <val3> if it begins with a character a
print ( [ item for item <name1> dir ( adfix ) if not item . startswith ( '__'   ) ] )	get a list of variables from module 'adfix.py' <name1> current module .
[ x [ 0 ] for x <name4> <name1> ]	get the first element of each tuple <name4> a list <name1>
<name4> = [ x [ 0 ] for x <name1> <name2> ]	get a list <name4> of the first elements of each tuple <name1> a list of tuples <name2>
pd . concat ( [ <name5> ] * <val1> , ignore_index = True )	duplicate data in pandas dataframe <name5> for <val1> times
pd . concat ( [ <name5> ] * <val2> )	Get a repeated pandas data frame object <name5> by <val2> times
sorted_list_of_keyvalues = sorted ( list ( <name1> . items ( ) ) , <name4> = item [ 1 ] [ <val3>   ] )	sort json <name1> by a <name4> <val3>
pd . read_json ( <name3> )	read json <name3> to pandas dataframe df
numpy . <name6> . choice ( numpy . arange ( <val1> , <val3> ) , p = [ <val5> , <val4> , <val4> , <val2> , <val6> , <val2> ] )	generate a <name6> number in <val1> to <val3> with a given distribution [ <val5> , <val4> , <val4> , <val2> , <val6> , <val2> ]
<name3> . loc [ <name3> [ <val5>   ] . idxmax ( ) ]	Return rows of data associated with the maximum value of column <val5> in dataframe <name3>
re . findall ( '^(.+?)((.+)\\3+)$'   , <val1>   ) [ 0 ] [ : -1 ]	find recurring patterns in a string <val1>
np . fromstring ( <val2>   , dtype = '<f4'   )	convert binary string <val2> to numpy array
np . fromstring ( '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@'   , dtype = '>f4'   )	convert binary string to numpy array
cursor . execute ( <val6>   , ( var1 , var2 , var3 ) )	insert variables (var1, var2, var3) into sql statement <val6>
cursor . execute ( 'INSERT INTO table VALUES (%s, %s, %s)'   , ( <name3> , <name2> , <name5> ) )	Execute a sql statement using variables <name3> , <name2> and <name5>
<name2> [ <val5>   ] . str [ 1 : -1 ] . str . <name4> ( <val6>   , expand = True ) . astype ( float )	pandas <name4> strings in column <val5> by <val6> into columns in dataframe <name2>
<name3> [ <val6>   ] . str [ 1 : -1 ] . str . <name2> ( <val5>   ) . apply ( pd . Series ) . astype ( float )	<name2> string in column <val6> by <val5> into separate columns in dataframe <name3>
<name5> [ <val2>   ] . apply ( pd . Series )	Unpack column <val2> in dataframe <name5> into a series of columns
<name1> . <name5> ( )	<name5> for shell command <name1> evoked by subprocess .Popen to complete
<name3> . <name2> ( 'utf8'   )	<name2> string <name3> to utf -8 code
<name4> . <name4> . strptime ( <val1>   , <val6>   )	parse string <val1> into a <name4> object using format <val6>
copyfile ( <name3> , <name4> )	copy a file from <name3> to <name4>
shutil . copy2 ( <val2>   , <val4>   )	copy file <val2> to <val4>
shutil . copy2 ( <val6>   , <val3>   )	copy file <val6> to <val3>
<name4> ( ', '   . join ( str ( x ) for x in <name3> ) )	<name4> a list of integers <name3> using string formatting
<name4> [ [ <val5>   , <val1>   ] ] . <name6> ( <name4> [ <val2>   ] , axis = 'index'   )	<name6> column <val5> and column <val1> by column <val2> in datafram <name4>
<name6> ( ord ( <val3>   ) )	convert string <val3> to <name6>
<name5> ( j ** i for i , j <name6> enumerate ( <name1> , 1 ) )	Get the <name5> of values to the power of their indices <name6> a list <name1>
""""" "" "" """" . join ( <name2> . split ( ) )"	remove extra white spaces &  tabs from a string <name2>
<name6> = <name6> . <name4> ( ','   , <val5>   )	<name4> comma in string <name6> with empty string <val5>
<name4> . resample ( <val2>   ) . agg ( {  <val6>   : np . sum , <val5>   : np . mean }  )	Resample dataframe <name4> to resolution of 1 hour <val2> for timeseries index , summing values in the column <val6> averaging those in column <val5>
<name5> = pd . DataFrame . from_dict ( {  k : v for k , v in list ( <name2> . items ( ) ) if k != 'y3'  }  )	create a pandas dataframe <name5> from elements of a dictionary <name2>
first_name = <name6> . args . <name5> ( <val3>   )	Flask <name5> value of <name6> variable <val3>
first_name = request . <name2> . <name1> ( <val3>   )	Flask <name1> posted <name2> data <val3>
[ s [ : <val4> ] for s <name6> <name5> ]	get a list of substrings consisting of the first <val4> characters of every string <name6> list <name5>
<name4> . <name2> ( key = lambda item : ( - len ( item ) , item ) )	<name2> list <name4> by the length of string followed by alphabetical order
<name5> = <name5> . set_index ( [ <val2>   ] )	Set index equal to field <val2> in dataframe <name5>
list ( accumulate ( list ( <name1> ( <val5> ) ) ) )	List comprehension with an accumulator in <name1> of <val5>
datetime . datetime . strptime ( <val4>   , <val3>   ) . strftime ( <val2>   )	How to convert a date string <val4> in format <val3> to different format <val2>
datetime . datetime . strptime ( <val6>   , <val4>   ) . strftime ( <val5>   )	convert a date string <val6> in format <val4> to different format <val5>
<name6> = <name3> . ix [ : , ( ~  <name3> . <name1> . str . endswith ( <val5>   ) ) ]	get a dataframe <name6> that contains all the <name1> of dataframe <name3> that do not end in <val5>
<name5> = <name1> [ -10 : ]	create list <name5> containing the last 10 elements of list <name1>
<name3> [ -10 : ]	get the last 10 elements from a list <name3>
np . <name2> ( <name6> . _data ) . reshape ( <name6> . size [ : : -1 ] ) . T	convert matlab engine <name2> <name6> to a numpy ndarray
<name6> . groupby ( <name2> = <val1> , as_index = False ) . nth ( <val1> )	select the first row grouped per <name2> <val1> of dataframe <name6>
<name4> . <name6> ( <name1> , <name5> = 0 )	<name6> sequence of <name4> arrays <name1> into a one dimensional array along the first <name5>
""""" <val4> """" . encode ( 'utf-8'   ) . decode ( 'unicode_escape'   )"	convert and escape string <val4> to UTF -8 code
""""" <val5> """" . <name3> ( 'utf-8'   )"	<name3> string <val5> to bytes
[ j for i in zip ( <name2> , <name5> ) for j in i ]	interleave the elements of two lists <name2> and <name5>
[ j for i in zip ( <name1> , <name4> ) for j in i ]	merge two lists <name1> and <name4> into <name1> single list
print ( [ <name2> . replace ( <val5>   , ''   ) for <name2> <name1> <name4> ] )	delete all occureces of <val5> <name1> each string <name2> <name1> list <name4>
""""" <val6> """" . join ( <val2>   )"	Split string <val2> into a string of letters seperated by <val6>
Content . objects . all ( ) . order_by ( '?'   ) [ : <val1> ]	in Django , select <val1> random records from the database Content.objects
<name2> [ np . arange ( <name2> . shape [ 0 ] ) [ : , ( None ) ] , <name1> ]	create a NumPy array containing elements of array <name2> as pointed to by index in array <name1>
<name2> . pivot_table ( <name4> = <val5>   , columns = <val3>   , aggfunc = 'size'   , fill_value = 0 )	pivot dataframe <name2> so that values for <val3> become column headings and values for <val5> become the <name4>
re . findall ( '([a-z]*)'   , 'f233op'   )	match zero - or - more instances of lower case alphabet characters in a string f233op 
re . findall ( '([a-z])*'   , 'f233op'   )	match zero - or - more instances of lower case alphabet characters in a string f233op 
re . <name1> ( <val5>   , <val6>   )	<name1> string <val6> using string <val5>
re . split ( '_(?:for|or|and)_'   , <val1>   )	Split string <val1> based on string 'and' , 'or' or 'for'
[ re . split ( '_(?:f?or|and)_'   , s ) <name4> s in <name3> ]	Split a string <name3> by multiple words <name4> or or or and
[ dict ( <name6> ( <name4> , x ) ) for x <name1> <name3> ]	<name6> keys with individual values <name1> lists <name4> and <name3>
sorted ( lst , reverse = True )	Sort a list 'lst' in descending order .
<name5> . <name6> ( order = [ <val2>   , <val4>   , <val3>   ] )	<name6> array <name5> based on column <val2> , <val4> and <val3>
df . sort ( [ <val1>   , <val5>   , <val6>   ] )	Sort a structured numpy array 'df' on multiple columns <val1> , <val5> and <val6> .
return <name5> == <name2> ( range ( <name5> [ 0 ] , <name5> [ -1 ] + 1 ) )	check if elements in <name2> <name5> are coherent in order
<name6> . groupby ( <val1>   ) . agg ( lambda x : x . tolist ( ) )	group rows of pandas dataframe <name6> with same <val1>
'X\xc3\xbcY\xc3\x9f'   . <name1> ( 'raw_unicode_escape'   ) . <name5> ( 'utf-8'   )	<name1> u'X\xc3\xbcY\xc3\x9f' as unicode and <name5> with utf -8
<name4> ( <name3> )	parse string <name3> to <name4>
getattr ( <name3> , <val2>   , <val6>   )	get the value of attribute <val2> of object <name3> with default value <val6>
np . <name2> ( <name5> , list ( range ( 0 , <name5> . shape [ 1 ] , <val3> ) ) , axis = 1 )	<name2> every <val3> th column in <name5> numpy array 'a' .
<name3> . <name3> . fromtimestamp ( <name6> / 1000.0 )	convert <name6> milliseconds to a <name3> object
np . einsum ( '...j,...j->...'   , <name1> , <name1> )	find the magnitude ( length ) squared of a vector <name1> field
r = requests . get ( <name6> )	request http <name6> <name6>
r = requests . get ( <name5> , params = <name2> )	request http <name5> <name5> with parameters <name2>
r = requests . <name1> ( <name4> , data = <name5> )	<name1> request <name4> <name4> with parameters <name5>
post_response = requests . <name3> ( url = 'http://httpbin.org/post'   , json = <name6> )	make an HTTP <name3> request with data <name6>
{{  ( <name5> |   <name4> ) : <val3>  }}	django jinja <name4> list <name5> by <val3>
df1 = pd . read_hdf ( <val3>   , <val6>   )	create dataframe df with content of hdf store file <val3> with key of <val6>
max ( <name1> . rfind ( i ) for i <name2> <val5>   )	get the largest index of the last occurrence of characters <val5> <name2> string <name1>
<name5> ( <val1>     + <val2>   )	<name5> <val1> plus unicode character u <val2>
<name6> ( <val4>   )	<name6> unicode characters in a string <val4>
print ( '{0}'   . format ( <val4>   . zfill ( 2 ) ) )	pads string <val4> on the left with 1 zero
sorted ( set ( itertools . chain . from_iterable ( <name4> ) ) )	Remove duplicates elements from list <name4> and sort it in ascending order
<name6> [ <val3>   ] . values . tolist ( )	pandas dataframe <name6> column <val3> to list
<name1> [ <val6>   ] . tolist ( )	Get a list of all values in column <val6> in pandas data frame <name1>
print ( <name1> ( word [ 0 ] . isupper ( ) for word <name4> <name3> ) )	check if <name1> string elements <name4> list <name3> are upper - cased
<name6> = {  key : <name3> for key , <name3> in list ( <name6> . <name5> ( ) ) <name1> <name3> != <val4> }	remove <name5> from dictionary <name6> <name1> the item ' s value <name3> is equal to <val4>
{  key : val for key , val in list ( <name2> . <name4> ( ) ) if val != <val3> }	Remove all <name4> from a dictionary <name2> whose values are <val3>
return len ( <name4> . encode ( 'utf-8'   ) )	Determine the byte length of a utf -8 encoded string <name4>
os . <name1> ( <name4> . pid , signal . SIGKILL )	<name1> a <name4> with id process.pid
<name3> [ pd . isnull ( <name3> ) . any ( axis = 1 ) ]	get data of columns with Null values in dataframe <name3>
<name3> . split ( <val1>   ) [ -1 ] . replace ( <val2>   , ''   ) + <val5>	strip everything up to and including the character <val1> from <name3> <name3> , strip the character <val2> from the remaining string and concatenate <val5> to the end
parser . ParseFile ( open ( <val2>   , 'rb'   ) )	Parse a file <val2> using expat parsing in python 3
sys . exit ( )	Exit script
setattr ( self , <name1> , <name2> )	assign value in <name2> dynamically to class property <name1>
urllib . parse . unquote ( urllib . parse . unquote ( <name2> ) )	decode url - encoded string <name2> to its character equivalents
urllib . parse . unquote ( urllib . parse . unquote ( 'FireShot3%2B%25282%2529.png'   ) )	"decode a double URL encoded string app . config [ 'SECURITY_REGISTER_URL' ] = '/create_account' change flask security register url to /create_account output = open ( '/home/user/test/wsservice/data.pkl' , 'wb' ) open a file /home/user/test/wsservice/data.pkl in binary write mode del a [ ( -1 ) ] remove the last element in list a a . pop ( 1 ) remove the element in list a with index 1 a . pop ( ) remove the last element in list a a . pop ( index ) remove the element in list a at index index del a [ index ] remove the element in list a at index index ax . set_xlabel ( 'Temperature (\u2103)' ) print a celsius symbol on x axis of a plot ax ax . set_xlabel ( 'Temperature ($^\\circ$C)' ) Print a celsius symbol with matplotlib [ '' . join ( l ) for l in list_of_lists ] convert a list of lists list_of_lists into a list of strings keeping empty sub - lists as empty string '' pd . concat ( g for _ , g in df . groupby ( 'ID' ) if len ( g ) >   1 ) get a list of all the duplicate items in dataframe df using pandas x = numpy . delete ( x , 2 , axis = 1 ) Delete third row in a numpy array x x = numpy . delete ( x , 0 , axis = 0 ) delete first row of array x pd . concat ( ( df1 , df2 ) , axis = 1 ) . mean ( axis = 1 ) merge rows from dataframe df1 with rows from dataframe df2 and calculate the mean for rows that have the same value of axis 1 np . mean ( np . array ( [ old_set , new_set ] ) , axis = 0 ) Get the average values from two numpy arrays old_set and new_set scatter ( x , y , s = 500 , color = 'green' , marker = 'h' ) Matplotlib change marker size to 500 result = [ item for word in words for item in word . split ( ',' ) ] Create new list result by splitting each item in list words datetime . datetime . strptime ( '2012-05-29T19:30:03.283Z' , '%Y-%m-%dT%H:%M:%S.%fZ' ) convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ' sum ( item [ 'one' ] for item in list ( tadas . values ( ) ) ) count True values associated with key 'one' in dictionary tadas a = open ( 'pdf_reference.pdf' , 'rb' ) . read ( ) . encode ( 'base64' ) encode a pdf file pdf_reference.pdf with base64 encoding a . rstrip ( ) . split ( '\n' ) split string a using new - line character '\n' as separator a . split ( '\n' ) [ : -1 ] split a string a with new line character return HttpResponse ( status = 204 ) return http status code 204 from a django view ( 7 in a ) check if 7 is in a ( 'a' in a ) check if 'a' is in list a sorted ( results , key = itemgetter ( 'year' ) ) sort list results by keys value 'year' print ( browser . current_url ) get current url in selenium webdriver browser re . split ( '; |, ' , str ) split string str with delimiter '; ' or delimiter ', ' """" """" \\ u003Cp \\ u003E """" """" """" . decode ( 'unicode-escape' ) """
time . mktime ( datetime . datetime . strptime ( <name2> , <val6>   ) . timetuple ( ) )	convert date string <name2> in format pattern <val6> into a timestamp
int ( datetime . datetime . strptime ( <val4>   , '%d/%m/%Y'   ) . strftime ( '%s'   ) )	convert string <val4> to an integer timestamp
request . headers [ <val2>   ]	get http header of the key <val2> in flask
<name5> . groupby ( <val1>   ) [ <val3>   ] . filter ( lambda x : x . <name6> ( ) == <val4> )	select records of dataframe <name5> where the <name6> of column <val3> for each value in column <val1> is <val4>
<name2> . loc [ <name2> . groupby ( <val5>   ) [ <val6>   ] . transform ( <name4> ) == <val1> ]	Get data of dataframe <name2> where the <name4> of column <val6> grouped by column <val5> is equal to <val1>
<name4> . groupby ( 'User'   ) [ <val6>   ] . transform ( sum ) == <val2>	Get data from dataframe <name4> where column <val6> is equal to <val2>
df . set_index ( [ <val4>   , <val2>   ] )	convert pandas group by object to multi - indexed dataframe with indices <val4> and <val2>
print ( re . sub ( '(\\W)\\1+'   , '\\1'   , <name1> ) )	coalesce non - word - characters in string <name1>
"os . system ( 'start ""$file""'   )"	"open a file ""$file"" under Unix"
unicodedata . normalize ( 'NFKD'   , <name6> ) . encode ( <val4>   , 'ignore'   )	Convert a Unicode string <name6> to a <val4> string
<name4> . encode ( <val2>   , 'ignore'   )	Convert <name4> Unicode string <name4> to <name4> <val2> string
<name3> = [ f for f <name1> os . listdir ( <val6>   ) if re . match ( '[0-9]+.*\\.jpg'   , f ) ]	create a list <name3> containing all <name3> <name1> directory <val6> that starts with numbers between 0 and 9 and ends with the extension '.jpg'
np . zeros ( ( 6 , 9 , 20 ) ) + np . <name3> ( [ <val6> , 2 , <val1> , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( None ) , : , ( None ) ]	adding a <val6> - d <name3> [1, 2, 3, 4, 5, 6, 7, 8, 9] to a <val1> - d <name3> np.zeros((6, 9, 20))
np . zeros ( ( 6 , 9 , 20 ) ) + np . <name1> ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) )	add <name1> of shape (6, 9, 20) to <name1> [1, 2, 3, 4, 5, 6, 7, 8, 9]
print ( max ( <name1> , key = <name5> ) )	get the list with the highest <name5> value in list <name1>
<name3> ( len ( y ) for y <name2> <name5> if len ( y ) >   <val4> )	<name3> the length of lists <name2> list <name5> that are more than <val4> item <name2> length
numpy . dot ( numpy . dot ( <name1> , <name6> ) , <name1> )	multiply the columns of sparse matrix <name6> by array <name1> then multiply the rows of the resulting matrix by array <name1>
<name2> . objects . filter ( name = <val4>   , title = <val1>   ) . <name5> ( )	Django check if an object with criteria <val4> equal to <val4> and criteria <val1> equal to <val1> <name5> in model <name2>
sorted ( l , key = lambda x : ( - int ( x [ <val1> ] ) , x [ 0 ] ) )	sort a nested list by the inverse of element 2 , then by element <val1>
<name2> . META [ 'HTTP_HOST'   ]	get domain / host name from <name2> object in Django
subprocess . call ( [ <val2>   , <val6>   , <name1> ] )	invoke perl script <val6> using perl interpeter <val2> and send argument <name1> to it
<name6> ( '\n'   . join ( str ( p ) for p in <name2> ) )	<name6> list of items <name2>
<name5> . <name4> ( {  <name6> : <name3> [ <val1>   ] }  )	<name4> the dictionary <name5> with dynamic keys <name6> and values with key <val1> from dictionary <name3>
<name1> ( <name6> . decode ( <val2>   ) )	split a <val2> encoded string <name6> into a <name1> of characters
<name5> = <name3> . decode ( 'utf-8-sig'   )	convert utf -8 with bom string <name3> to utf -8 with no bom <name5>
Entry . objects . filter ( ~  Q ( id = <val2> ) )	Filter model 'Entry' where 'id' is not equal to <val2> in Django
getattr ( __builtins__ , <val2>   )	lookup an attribute in any scope by name <val2>
<name3> . call ( [ 'shutdown'   , '/r'   , '/t'   , <val6>   ] )	restart a computer after <val6> seconds using <name3>
<name2> . call ( [ 'shutdown'   , '/s'   ] )	shutdown a computer using <name2>
<name3> . call ( [ 'shutdown'   , '/a '   ] )	abort a computer shutdown using <name3>
subprocess . call ( [ 'shutdown'   , '/l '   ] )	logoff computer having windows operating system using python
subprocess . call ( [ 'shutdown'   , '/r'   ] )	shutdown and restart a computer running windows from script
open ( <val4>   , 'w'   ) . close ( )	erase the contents of a file <val4>
<name3> . to_dict ( 'index'   )	convert dataframe <name3> to list of dictionaries including the index values
<name1> . to_dict ( 'records'   )	Create list of dictionaries from pandas dataframe <name1>
df . <name3> ( pd . TimeGrouper ( freq = <val1>   ) )	Group a pandas data frame by monthly frequenct <val1> using <name3>
[ ( c / t ) for c , t in zip ( <name3> , <name4> ) ]	divide the members of a list <name3> by the corresponding members of another list <name4>
sorted ( <name3> , key = <name3> . get )	sort dict <name3> by value
sorted ( <name1> . <name3> ( ) )	Sort a dictionary <name1> by its <name3>
<name5> ( <name6> ( <name1> . items ( ) ) , <name3> = lambda x : x [ 1 ] )	Get a <name6> of pairs of <name3> - value <name5> by values in dictionary <name1>
now = datetime . datetime . now ( ) . strftime ( '%H:%M:%S'   )	display current time
""""" <val3> """" . replace ( <val4>   , 'XXX'   , 1 ) . <name6> ( <val4>   )"	<name6> the index of the second occurrence of the substring <val4> in string <val3>
set ( [ <val2>   , <val4>   ] ) . issubset ( <name3> )	check if key <val2> and key <val4> are presented in dictionary <name3>
<name6> . <name5> ( <val4>   , <val1>   )	<name5> string <val4> in string <name6> with character <val1>
<name3> . savez ( <name2> , * [ getarray [ <val4> ] , getarray [ <val5> ] , getarray [ <val6> ] ] )	Save array at index <val4> , index <val5> and index <val6> of array <name3> to <name2> file <name2>
( <name2> - datetime . timedelta ( hours = <val5> , <name6> = <val4> ) )	subtract <val5> hour and <val4> <name6> from time object <name2>
dt = datetime . datetime . combine ( datetime . date . today ( ) , <name6> )	add 1 hour and 2 minutes to time object <name6>
<name3> -= datetime . timedelta ( <name1> = <val6> )	subtract <val6> <name1> from the time object <name3>
print ( <name4> . <name3> ( <val6>   ) )	<name3> string <name4> using hex <val6> encoding
print ( ' '   . join ( [ str ( ord ( a ) ) <name5> a <name6> <name3> ] ) )	Return the decimal value <name5> each hex character <name6> <name3> <name3>
[ x for x <name1> l if x [ 1 ] == 1 ]	Get all the items from a list of tuple 'l' where second item <name1> tuple is '1' .
<name5> . fromlist ( [ int ( val ) for val in <name1> . read ( ) . split ( ) ] )	Create array <name5> containing integers from <name1>
print ( re . sub ( '[_%^$]'   , '\\\\\\g<0>'   , <name5> ) )	place '\'  infront of each non - letter char in string <name5>
"doc . xpath ( ""//a[starts-with(text(),'some text')]"" )"	Get all a tags where the text starts with value 'some text' using regex
zip ( * <name1> )	convert <name1> list of lists <name1> into list of tuples of appropriate elements form nested lists
[ map ( int , sublist ) for sublist in <name6> ]	convert a list of strings <name6> to list of integers
[ [ int ( x ) for x <name2> sublist ] for sublist <name2> <name3> ]	convert strings <name2> list - of - lists <name3> to ints
np . where ( np . in1d ( <name2> , <name4> ) ) [ 0 ]	get index of elements in array <name2> that occur in another array <name4>
[ {  <val4>   : <name2> , <val1>   : b }   for <name2> , b <name3> zip ( <name5> [ <val4>   ] , <name5> [ <val1>   ] ) ]	create <name2> list where each element is <name2> dictionary with keys <val4> and <val1> and values corresponding to each value <name3> the lists referenced by keys <val4> and <val1> <name3> dictionary <name5>
calendar . monthrange ( <val1> , 1 )	Get Last Day of the first month in <val1>
calendar . monthrange ( 2008 , 2 )	Get Last Day of the second month in 2002
calendar . monthrange ( <val6> , 2 )	Get Last Day of the second month in <val6>
calendar . monthrange ( <name6> , <name2> ) [ 1 ]	Get Last Day of the <name2> <name2> in <name6> <name6>
monthrange ( <val3> , 2 )	Get Last Day of the second month in year <val3>
( datetime . date ( <val4> , 2 , 1 ) - datetime . timedelta ( days = 1 ) )	Get Last Day of the first month in year <val4>
from subprocess import call	"Calling an external command ""ls -l"""
os . system ( <val3>   )	Calling an external command <val3>
os . system ( <val2>   )	Calling an external command <val2>
stream = os . popen ( <val6>   )	Calling an external command <val6>
print ( subprocess . Popen ( <val1>   , shell = True , stdout = subprocess . PIPE ) . stdout . read ( ) )	Calling an external command <val1>
print ( os . popen ( <val4>   ) . read ( ) )	Calling an external command <val4>
return_code = subprocess . call ( <val6>   , shell = True )	Calling an external command <val6>
call ( [ 'ls'   , '-l'   ] )	"Calling an external command ""ls -l"""
<name2> ( urllib . parse . unquote ( <name5> ) . <name3> ( 'utf8'   ) )	<name3> <name5> <name5> with utf8 and <name2> it
<name4> = <name1> . parse . unquote ( <name4> ) . <name2> ( <val3>   )	<name2> a <name1> escaped <name4> string <name4> with <val3>
""""" """" """" . join ( filter ( str . isdigit , <val3>   ) )"	delete letters from string <val3>
df [ <val2>   ] . str . split ( '-'   ) . str [ 0 ] . astype ( int )	Update row values for a column <val2> using vectorized string operation in pandas
<name5> . <name6> ( key = lambda x : x [ 1 ] )	<name6> a list of tuples <name5> by second parameter in the tuple
[ m . start ( ) for m <name4> re . finditer ( '(?=tt)'   , <val2>   ) ]	find indexes of all occurrences of a substring tt <name4> a string <val2>
[ m . start ( ) for m <name4> re . finditer ( 'test'   , 'test test test test'   ) ]	find all occurrences of a substring <name4> a string
re . findall ( '\\s+|\\S+'   , <name6> )	split string <name6> based on white spaces
<name1> . set_index ( [ 'race_date'   , 'track_code'   , 'race_number'   ] )	set columns ['race_date', 'track_code', 'race_number'] as indexes in dataframe <name1>
<name2> . <name1> ( key = lambda item : item [ <val4>   ] , <name3> = True )	<name1> a <name2> of dictionary values by <val4> in <name3> order
""""" ""{:.5}"" """" . format ( <val4>   )"	display first 5 characters of string <val4>
struct . <name1> ( '11B'   , <name2> )	<name1> hexadecimal string <name2> to a list of integer values
[ i for i , j in enumerate ( [ <val5>   , 'bar'   , 'baz'   ] ) if j == <val5>   ]	finding the index of an item <val5> given a list ['foo', 'bar', 'baz'] containing it
print ( <name3> ( itertools . product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) )	generate all permutations of <name3> [1, 2, 3] and <name3> [4, 5, 6]
itertools . <name6> ( [ 1 , 2 , 3 ] )	generate all <name6> of a list [1, 2, 3]
return re . sub ( <val1>   , <val6>   , <name4> )	substitute occurrences of unicode regex pattern u <val1> with empty string <val6> in string <name4>
<name2> <name1> ( <val5>   )	manually throw / <name2> a <name1> exception with the message <val5>
raise Exception ( <val2>   )	throw an exception <val2>
raise Exception ( <val4>   )	Manually throw an exception <val4>
raise <name2> ( <val5>   )	throw a <name2> with message <val5>
raise <name2> ( <val4>   )	throw an <name2> with message <val4>
raise ValueError ( <val5>   )	throw a value error with message <val5> , 'foo' , 'bar' , 'baz'
raise RuntimeError ( <val3>   )	throw a runtime error with message <val3>
raise AssertionError ( <val3> , <name2> )	throw an assertion error with message <val3> , <name2>
driver . find_element_by_id ( <val4>   ) . <name2> ( )	if Selenium textarea element <val4> is not empty , <name2> the field
driver . find_element_by_id ( <val4>   ) . <name1> ( )	<name1> text from textarea <val4> with selenium
socket . inet_ntoa ( struct . pack ( '!L'   , <val5> ) )	convert a number <val5> to ip string
<name2> = <name2> [ [ <val3>   , <val1>   , <val6>   , <val4>   ] ]	Rearrange the columns <val6> , <val4> , <val3> , <val1> of pandas DataFrame <name2> in mentioned sequence <val3> , <val1> , <val6> , <val4>
super ( <name5> , self ) . <name4> ( * args , ** kwargs )	call base class ' s <name4> method from the child class <name5>
<name3> ( <name2> . <name4> ( ) )	<name3> of all <name4> in a python dict <name2>
<name1> . dumps ( <name3> , ensure_ascii = False )	convert python dictionary <name3> to <name1> array
<name3> = np . <name2> ( [ i for i <name1> <name5> ( <val4> ) ] , dtype = np . float64 )	assign an <name2> of floats <name1> <name5> from 0 to <val4> to a variable <name3>
sorted ( <name2> , key = lambda x : <name5> . index ( <name1> ( x . <name6> ( ) ) [ 0 ] ) )	sort a <name1> of dictionaries <name2> by <name6> in an <name5> <name5>
return <name1> [ 0 ] . upper ( ) + <name1> [ 1 : ]	change the case of the first letter in string <name1>
""""" """" """" . <name6> ( [ 1 , 2 , 3 , 4 ] )"	<name6> list of numbers [1,2,3,4]  to string of numbers .
<name5> = <name5> . decode ( <val1>   , 'ignore'   ) . encode ( <val1>   )	delete every non <val1> characters from a string <name5>
os . system ( <name3> )	execute a <name3> command  in the terminal from a python script
c . <name6> ( <val5>   , ( <name2> , <name1> ) )	MySQL <name6> query <val5> with parameters <name2> and <name1>
dateobj = <name3> . <name3> . strptime ( <name2> , <val6>   ) . date ( )	Parse string <name2> into a <name3> object using format pattern <val6>
