def <A> ( ) :	関数 <A> の定義
<A> = [ <B> , <C> ]	<A> に <B> と <C> からなるリストを代入
while <A> [ -1 ] <  <B> :	<A> の末尾要素が <B> 未満の間繰り返し
<A> . append ( <A> [ -1 ] + <A> [ -2 ] )	<A> の末尾要素とその次の要素を足して <A> の末尾に追加する
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を前から順に <A> として
if <A> % <B> == 0 :	<A> が <B> でわりきれるなら
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> % <B> == 0	<A> が <B> で割り切れる場合 True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> + <B>	<A> と <B> の和を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を順に <A> として
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return sum ( <A> )	<A> の全要素の総和を返す
def euler002_n_fibnocci_sequence ( <A> ) :	<A> を引数とする関数 euler002_n_fibonacci_sequence の定義
<A> = [ <B> , <C> ]	<A> に <B> と <C> からなるリストを代入
<A> = <B> - <C>	<A> に <B> から <C> を引いた数を代入
if <A> == <B> :	もし <A> が <B> であれば
return [ <A> ]	<A> のみからなるリストを返す
else :	そうでなければ
while <A> >  <B> :	<A> が <B> より大きい間
<A> . append ( <A> [ -1 ] + <A> [ -2 ] )	<A> の末尾要素とその次の要素を足して <A> の末尾に追加
<A> -= <B>	<A> から <B> を引く
return <A>	<A> を返す
def euler002_n_fibnocci_number ( <A> ) :	<A> を引数とする関数 euler002_n_fibonacci_number の定義
<A> = [ <B> , <C> ]	<A> に <B> と <C> からなるリストを代入
if <A> <  <B> <= <C> :	もし <B> が <A> より大きく、かつ <C> 以下であるなら
return <A> [ <B> - 1 ]	<A> の <B> -1 番目の要素を返す
else :	そうでなければ
<A> = <B> - <C>	<A> に <B> から <C> を引いた数を代入
while <A> >  <B> :	<A> が <B> より大きい間
<A> . append ( <A> [ -1 ] + <A> [ -2 ] )	<A> の末尾要素とその次の要素を足して <A> の末尾に追加
<A> -= <B>	<A> から <B> を引く
return <A> [ -1 ]	<A> の末尾要素を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> に <B> を代入
<A> = <B>	<A> に <B> を代入
while <A> * <A> <  <B> :	<A> の自乗が <B> 未満の間
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> = <A> / <B>	<A> を <B> で割る
<A> = <A> + <B>	<A> に <B> を足す
return int ( <A> )	<A> を整数にした結果を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> * <A> <  <B>	<A> の自乗が <B> より小さければ True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
return int ( <A> )	<A> を整数にした結果を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> , <C> , -1 ) :	<C> より大きく <B> 以下の整数を大きい方から順に <A> として
for <A> in range ( <B> , <C> , -1 ) :	<C> より大きく <B> 以下の整数を大きい方から順に <A> として
<A> = ( str ) ( <B> * <C> )	<A> に <B> と <C> の積の文字列表現を代入
"<A> = """""	<A> に空文字列を代入
"<A> = """""	<A> に空文字列を代入
<A> = ( int ) ( len ( <B> ) / <C> ) + ( len ( <B> ) % <C> )	<A> に <B> の長さを <C> で割った商と <B> を <C> で割った余りの和を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ <C> ]	<A> に <B> の <C> 番目の要素を足す
<A> += <B> [ len ( <B> ) - <C> - 1 ]	<A> に <B> の後ろから <C> 番目の要素を足す
if <A> == <B> :	もし <A> と <B> が等しければ
<A> = max ( <A> , <B> * <C> )	<A> と、 <B> と <C> の積の大きい方を新しい <A> とする
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
"<A> = """""	<A> に空文字列を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ <C> ]	<A> に <B> の <C> 番目の要素を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
"<A> = """""	<A> に空文字列を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ len ( <B> ) - 1 - <C> ]	<A> に <B> の後ろから <C> 番目の要素を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> == <B>	<A> と <B> が等しければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = ( str ) ( <B> )	<A> に <B> の文字列表現を代入
<A> = len ( <B> )	<A> に <B> の長さを代入
return ( int ) ( <A> / <B> ) + ( <A> % <B> )	<A> を <B> で割った商と s を <B> で割った余りの和を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
return <A> * <B>	<A> と <B> の積を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
"<A> = """""	<A> に空文字列を代入
for <A> in reversed ( <B> ) :	<B> の各要素を後ろから順に <A> として
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
"<A> = """""	<A> に空文字列を代入
for <A> in reversed ( <B> ) :	<B> の各要素を後ろから順に <A> として
<A> += <B>	<A> に <B> を足す
return <A> == <B>	<A> と <B> が等しければ True 、そうでなければ False を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ ]	<A> に空のリストを代入
for <A> in range ( <B> , <C> ) :	<B> から <C> 未満の整数を順に <A> として
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> の各要素を <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
<A> . append ( <B> )	<A> に <B> を追加する
if len ( <A> ) == <B> :	もし <A> の長さが <B> であれば
<A> . append ( <B> )	<A> に <B> を追加する
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を <A> として
for <A> in range ( int ( <B> ** ( <C> / <D> ) ) ) :	<B> の <C> / <D> 乗未満の非負整数を順に <A> として
<A> = <A> * <B>	<A> に <B> を掛ける
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
for <A> in range ( <B> , <C> + 1 ) :	<B> から <C> までの各整数を順に <A> として
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> 内の各要素を <A> として
if <A> % <B> == 0 :	<A> が <B> で割り切れるなら
<A> = <B>	<A> を <B> にする
break	ループから抜ける
if <A> :	<A> が True であれば
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( <B> , <C> + 1 ) :	<B> から <C> までの各整数を順に <A> として
if <A> == <B> :	<A> が <B> であれば
<A> . append ( <B> )	<A> に <B> を追加する
else :	そうでなければ
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<B> から <C> の平方根までの整数を <A> として
if <A> % <B> == 0 :	<A> が <B> で割り切れるなら
break	ループを抜ける
else :	ループが正常に終了した場合
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ <B> ] * ( <C> + <D> )	<A> を <B> が <C> + <D> 個繋がったリストとする
<A> = [ ]	<A> を空リストとする
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<B> から <C> の平方根までの整数を <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が True であれば
for <A> in range ( <B> + <B> , <C> + 1 , <B> ) :	<B> の自乗から <C> までの <B> 個飛ばしの整数を <A> として
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
for <A> in range ( <B> , <C> + <D> ) :	<B> から <C> + <D> までの整数を順に <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が True であれば
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
while <A> <  <B> :	<A> が <B> より小さい間
<A> *= <B>	<A> に <B> を掛ける
return int ( <A> / <B> )	<A> 割る <B> の整数部分を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> ** int ( <B> ** ( 1 / <A> ) )	<A> の ( <B> の <A> 乗根の整数部分 ) 乗を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を小さい方から順に <A> として
<A> += ( <B> + <C> ) * ( <B> + <C> )	<A> に <B> + <C> の自乗を足す
<A> = <B> * <C>	<A> に <B> と <C> の積を代入
return <A> - <B>	<A> と <B> の差を返す
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> の定義
<A> = [ <B> ]	<A> に <B> のみからなるリストを代入
for i in range ( <A> - 1 ) :	以下の処理を <A> -1 回繰り返す
<A> . append ( <A> [ -1 ] + <B> )	<A> の末尾要素に <B> を加えたものを <A> の末尾に追加する
return <A>	<A> を返す
def euler006_make_common_diff_sequence_a ( <A> , <B> , <C> ) :	<A> と <B> と <C> を引数とする関数 euler006_make_common_dif_sequence_a の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( <B> , <B> + ( <C> * <D> ) , <C> ) :	<B> から <C> 個飛ばしで <D> 個の整数を <A> として
<A> . append ( <B> )	<A> に <B> を追加
return <A>	<A> を返す
def euler006_n_square ( <A> ) :	<A> を引数とする関数 euler006_n_sequence の定義
return <A> * <A>	<A> の自乗を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
while <A> <  <B> :	<A> が <B> より小さい間
<A> += <B>	<A> に <B> を足す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return sum ( range ( <A> , <B> ) )	<A> 以上 <B> 未満の整数の総和を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> を <B> とする
<A> = <B>	<A> を <B> とする
<A> = [ ]	<A> を空のリストとする
while <A> <  <B> :	<A> が <B> 未満である間
<A> += <B>	<A> に <B> を足す
<A> = [ <B> for <B> in range ( <C> , int ( math . sqrt ( <D> ) ) + 1 ) if <D> % <B> == 0 ]	<C> から <D> の平方根までの整数 <B> のうち、 <D> を割り切ることができるもののリストを <A> に代入
if len ( <A> ) == 0 :	もし <A> が空なら
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def euler007_n_division ( <A> , <B> ) :	<A> と <B> を引数とする関数 euler007_n_difision の定義
return <A> % <B> == 0	<A> が <B> で割り切れるなら True 、そうでないなら False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
while <A> >  <B> :	<A> が <B> より大きい間
<A> -= <B>	<A> から <B> を引く
return <A> == <B>	<A> が <B> であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( <B> , <C> ) :	<B> 以上 <C> 未満の整数を順に <A> として
if <A> % <B> == 0 :	<A> が <B> で割り切れるなら
<A> . append ( <B> )	<A> に <B> を追加
return len ( <A> ) == 0	<A> が空であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
if <A> <  <B> :	もし <A> が <B> 未満であれば
return <A>	<A> を返す
elif <A> == <B> :	そうでなく、もし <A> が <B> であれば
return <A>	<A> を返す
else :	いずれでもなければ
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<B> から <C> の平方根までの整数を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れれば
return <A>	<A> を返す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> + <B>	<A> に <B> を足した数を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <  <B>	<A> が <B> より小さければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> == <B>	<A> が <B> であれば True 、そうでなければ False を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( <B> ) :	<B> 未満の非負整数 <A> について
<A> . append ( int ( <B> [ <C> ] ) )	<A> に <B> の <C> 番目の要素の表す整数を追加
<A> = <B>	<A> を <B> とする
for <A> in <B> :	<B> 内の各要素を <A> として
<A> *= <B>	<A> に <B> を掛ける
for <A> in range ( <B> , len ( <C> ) ) :	<B> から <C> の要素数未満の整数 <A> について
<A> . append ( int ( <B> [ <C> ] ) )	<A> に <B> の <C> 番目の要素の表す整数を追加
<A> . pop ( 0 )	<A> の最初の要素を削除する
<A> = <B>	<A> を <B> とする
for <A> in <B> :	<B> 内の各要素を <A> として
<A> *= <B>	<A> に <B> を掛ける
<A> = max ( <A> , <B> )	<A> と <B> の大きい方を新しい <A> とする
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> を <B> とする
for <A> in <B> :	<B> 内の全ての要素 <A> について
<A> *= <B>	<A> に <B> を掛ける
return <A>	<A> を返す
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> の定義
<A> = [ ]	<A> を空のリストとする
for <A> in range ( <B> ) :	<B> 未満の非負整数 <A> について
<A> . append ( <B> [ <C> + <D> ] )	<B> の <C> + <D> 番目の要素を <A> に追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> if <B> <  <A> else <B>	<A> が <B> より大きければ <A> 、そうでなければ <B> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return max ( <A> , <B> )	<A> と <B> の大きい方を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = [ <B> ]	<A> を <B> のみからなるリストとする
<A> += <B>	<A> の末尾に <B> を結合する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
for <A> in range ( <B> , <C> ) :	<B> 以上 <C> 未満の整数 <A> について
for <A> in range ( <B> , <C> ) :	<B> 以上 <C> 未満の整数 <A> について
for <A> in range ( <B> , <C> ) :	<B> 以上 <C> 未満の整数 <A> について
<A> = <B> * <B> + <C> * <C>	<A> に <B> の自乗と <C> の自乗の和を代入
if <A> == <B> * <B> and <C> + <D> + <B> == <E> :	もし <A> が <B> の自乗と等しく、かつ <C> と <D> と <B> の和が <E> であれば
return <A> * <B> * <C>	<A> と <B> と <C> の積を返す
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> の定義
return <A> * <A> + <B> * <B> == <C> * <C>	<A> の自乗と <B> の自乗が <C> の自乗と等しければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> * <A>	<A> の自乗を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入する
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を <A> として
<A> += <B>	<A> に <B> を足す
return <A> == <B>	<A> が <B> ならば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return sum ( <A> ) == <B>	<A> の各要素の総和が <B> と等しければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> を <B> とする
for <A> in <B> :	<B> 内の全要素 <A> について
<A> *= <B>	<B> を <A> に掛ける
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ <B> ] * 2000000	<A> に <B> のみからなるリストを代入
for <A> in range ( <B> , int ( <C> ** <D> ) + 1 ) :	<A> を <B> から <C> の <D> 乗までの間で変化させて繰り返し
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
for <A> in range ( <B> * <C> , len ( <D> ) , <C> ) :	<A> を <C> の <B> 倍から <D> の長さ未満まで <C> ごとに変化させて繰り返し
<A> [ <B> ] = <C>	<A> の <B> 番目に <C> を代入
<A> = [ ]	<A> に空のリストを代入
for <A> in range ( <B> , <C> ) :	<A> を <B> から <C> まで変化させて繰り返し
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
<A> . append ( <B> )	<A> の末尾に <B> を追加
return sum ( <A> )	<A> の要素の総和を返す
def <A> ( <B> ) :	引数 <B> を取る関数 <A> の定義
<A> = [ <B> ] * <C>	<B> が <C> 個並んでいるリストを <A> に代入
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<A> を <B> から <C> の平方根の範囲で変化させて繰り返し
if <A> [ <B> ] :	<A> の <B> 番目が真であれば
for <A> in range ( <B> * <C> , len ( <D> ) , <C> ) :	<A> を <C> の <B> 倍から <D> の長さまで <C> 単位で変化させて繰り返し
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
<A> = [ ]	<A> に空のリストを代入
for <A> in range ( <B> , <C> ) :	<A> を <B> 以上 <C> 未満の間で増加させながら繰り返し
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
<A> . append ( <B> )	<A> の末尾に <B> を追加
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
if <A> <  <B> :	もし <A> が <B> より小さければ
return <A>	<A> を返す
elif <A> == <B> :	そうでなくて、もし <A> が <B> であれば
return <A>	<A> を返す
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<A> を <B> 以上 <C> の平方根以下の間で繰り返し
if <A> and <B> % <C> == 0 :	もし <A> が真でかつ <B> が <C> で割り切れるなら
<A> = <B>	<A> を <B> にする
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> に含まれる各要素を <A> に代入して繰り返し
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return sum ( <A> )	<A> 内の要素の総和を返す
def <A> ( <B> , <C> , <D> ) :	<B> , <C> , <D> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空のリストを代入
while <A> <  <B> :	<A> が <B> より小さい間繰り返し
<A> . append ( <B> )	<A> の末尾に <B> を追加する
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def euler011 ( ) :	関数 euler001 の定義
"<A> = """" """" """" . split ( )"	<A> に文字列を空白文字で分割したリストを代入
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> 中の各要素を順に <A> として
<A> . append ( int ( <B> ) )	<A> の末尾に <B> の表す数値を追加
<A> = <B>	<A> を <B> にする
for <A> in range ( <B> ) :	0 から <B> 未満の整数を順に <A> として
for <A> in range ( <B> ) :	0 から <B> 未満の整数を順に <A> として
if <A> <= <B> :	もし <A> が <B> 以下であれば
<A> = max ( <A> , <B> [ <C> * <D> + <E> ] * <B> [ <C> * <D> + <E> + <F> ] * <B> [ <C> * <D> + <E> + <G> ] * <B> [ <C> * <D> + <E> + <H> ] )	現在の <A> と ( <B> [ <C> * <D> + <E> ] * <B> [ <C> * <D> + <E> + <F> ] * <B> [ <C> * <D> + <E> + <G> ] * <B> [ <C> * <D> + <E> + <H> ] ) のうち大きい方を新しい <A> とする
if <A> <= <B> :	もし <A> が <B> 以下であれば
<A> = max ( <A> , <B> [ <C> * <D> + <E> ] * <B> [ ( <C> + <F> ) * <D> + <E> + <F> ] * <B> [ ( <C> + <G> ) * <D> + <E> + <G> ] * <B> [ ( <C> + <H> ) * <D> + <E> + <H> ] )	現在の <A> と ( <B> [ <C> * <D> + <E> ] * <B> [ ( <C> + <F> ) * <D> + <E> + <F> ] * <B> [ ( <C> + <G> ) * <D> + <E> + <G> ] * <B> [ ( <C> + <H> ) * <D> + <E> + <H> ] ) のうち大きい方を新しい <A> とする
if <A> <= <B> and <C> <= <D> :	もし <B> が <A> 以上で <C> が <D> 以下であれば
<A> = max ( <A> , <B> [ <C> * <D> + <E> ] * <B> [ ( <C> + <F> ) * <D> + <E> <G> ] * <B> [ ( <C> + <H> ) * <D> + <E> <I> ] * <B> [ ( <C> + <J> ) * <D> + <E> <K> ] )	現在の <A> と ( <B> [ <C> * <D> + <E> ] * <B> [ ( <C> + <F> ) * <D> + <E> <G> ] * <B> [ ( <C> + <H> ) * <D> + <E> <I> ] * <B> [ ( <C> + <J> ) * <D> + <E> <K> ] ) のうち大きい方を新しい <A> とする
if <A> <= <B> :	もし <A> が <B> 以下であれば
<A> = max ( <A> , <B> [ <C> * <D> + <E> ] * <B> [ ( <C> + <F> ) * <D> + <E> ] * <B> [ ( <C> + <G> ) * <D> + <E> ] * <B> [ ( <C> + <H> ) * <D> + <E> ] )	現在の <A> と ( <B> [ <C> * <D> + <E> ] * <B> [ ( <C> + <F> ) * <D> + <E> ] * <B> [ ( <C> + <G> ) * <D> + <E> ] * <B> [ ( <C> + <H> ) * <D> + <E> ] ) のうち大きい方を新しい <A> とする
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <= <B>	<A> が <B> 以下であれば True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = <B> - <C>	<A> に <B> と <C> の差を代入
return <A> >= <B>	<A> が <B> 以上であれば True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <= <B>	<A> が <B> 以下であれば True 、そうでなければ False を返す
def euler011_over_or_equal_a ( <A> , <B> ) :	<A> と <B> を引数とする関数 euler011_ver_or_equal_a の定義
<A> = <B> - <C>	<A> に <B> と <C> の差を代入
return <A> <= <B>	<A> が <B> 以下であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
"<A> = """""	<A> に空文字列を代入
for <A> in <B> :	<B> 内の全ての要素を順に <A> として
"if <A> == "" "" :"	もし <A> が半角スペースなら
<A> . append ( <B> )	<A> の末尾に <B> を追加
"<A> = """""	<A> を空文字列にする
else :	そうでなければ
<A> += <B>	<A> に <B> を加える
<A> . append ( <B> )	<A> の末尾に <B> を追加
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
<A> = <B>	<A> に <B> を代入
while <A> <  <B> :	<A> が <B> 未満の間
<A> . append ( <B> )	<A> の末尾に <B> を追加
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return list ( range ( <A> ) )	0 から <A> -1 までを順に要素として持つリストを返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> , <B> - 1 )	<A> と <B> -1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> , <B> + <C> )	<A> と <B> + <C> の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> - 1 , <B> )	<A> -1 と <B> の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> + <B> , <C> )	<A> + <B> と <C> の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> - 1 , <B> - 1 )	<A> -1 と <B> -1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> + <B> , <C> - <B> )	<A> + <B> と <C> -1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> - <B> , <C> + <B> )	<A> -1 と <C> + <B> の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> + <B> , <C> + <B> )	<A> + <B> と <C> + <B> の組を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> に <B> を代入
<A> = <B>	<A> に <B> を代入
<A> = [ <B> ]	<A> に <B> のみからなるリストを代入
<A> = [ <B> ] * <C> + [ <D> ] * <E>	<A> に <B> が <C> 個と <D> が <E> 個繋がったリストを代入
while <A> <  <B> :	<A> が <B> 未満である間
<A> = sum ( range ( <B> , <C> + <B> ) )	<A> に <B> から <C> の総和を代入
if not <A> % <B> :	もし <A> が <B> で割り切れるなら
<A> = ( int ( <B> / <C> ) , <B> + <D> )	<A> に <B> を <C> で割った商と <B> + <D> の組を代入
else :	そうでなければ
<A> = ( <B> , int ( ( <B> + <C> ) / <D> ) )	<A> に <B> と <B> + <C> を <D> で割った商の組を代入
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> 内の各要素を <A> として
if len ( <A> ) <  <B> :	もし <A> の長さが <B> より小さければ
<A> = [ <B> ] * ( <C> - len ( <D> ) + <E> )	<A> に <B> を ( <C> - <D> の長さ + <E> ) 回繰り返したリストを代入
<A> += <B>	<A> に <B> を代入
if not <A> [ <B> ] :	もし <A> の <B> 番目が偽であれば
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> [ -1 ] , <C> + 1 ) :	<B> の末尾要素から <C> までの数を順に <A> として
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<B> から <C> の平方根までの数を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
break	ループから抜ける
else :	ループが最後まで処理された場合
if not <A> in <B> :	<B> に <A> が含まれていなければ
<A> . append ( <B> )	<A> に <B> を追加する
for <A> in <B> :	<B> 内の各要素を <A> として
if <A> >  int ( <B> / 2 ) :	もし <A> が <B> の半分よりも大きければ
break	ループから抜ける
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
<A> = <B>	<A> を <B> にする
<A> = <B>	<A> を <B> にする
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
<A> += <B>	<A> に <B> を足す
else :	ループが正常に終了した場合
<A> *= <B>	<A> に <B> を掛ける
<A> [ <B> ] = <C>	<A> の <B> 番目の要素を <C> にする
<A> *= <B> [ <C> ]	<A> に <B> の <C> 番目の要素を掛ける
<A> += <B>	<A> に <B> を足す
<A> = <B>	<A> を <B> にする
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <  <B>	<A> が <B> より小さければ True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
if <A> <= <B> :	もし <A> が <B> 以下であれば
<A> = <B>	<A> を <B> にする
for <A> in range ( <B> , <C> + 1 ) :	<B> から <C> までの数を順に <A> として
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<B> から <C> の平方根までの数を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
break	ループを抜ける
else :	ループが正常に終了した場合
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
while <A> != <B> :	<A> が <B> でない間
<A> , <B> = <B> , <A> % <B>	<A> に <B> を、 <B> に <A> を <B> で割った余りを代入
return <A> == <B>	<A> が <B> であれば True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ <B> ] * ( <C> + <D> )	<A> に <C> + <D> 個の <B> からなるリストを代入
<A> = [ ]	<A> に空リストを代入
for <A> in range ( <B> , int ( <C> ** 0.5 ) + 1 ) :	<B> から <C> の平方根までの数を順に <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
for <A> in range ( <B> + <B> , <C> + 1 , <B> ) :	<B> の倍から <C> までの数を <B> 個飛ばしで順に <A> として
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
for <A> in range ( <B> , <C> + 1 ) :	<B> から <C> までの数を順に <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が真なら
<A> . append ( <B> )	<A> の末尾に <B> を追加する
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> 内の各要素を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
<A> = <B>	<A> を <B> とする
<A> = <B>	<A> を <B> とする
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
<A> += <B>	<A> に <B> を足す
else :	ループが終了したら
<A> . append ( ( <B> , <C> ) )	<B> と <C> の組を <A> に追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return sum ( range ( <A> , <B> + <A> ) )	<A> から <B> までの整数の総和を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = <B>	<A> に <B> を代入
<A> = <B>	<A> に <B> を代入
while <A> <= <B> :	<A> が <B> 以下の間繰り返し
<A> += <B>	<A> に <B> を足す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を <A> として
<A> *= ( <B> + <C> )	<A> に <B> + <C> を掛ける
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return not <A>	<A> が偽であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return len ( <A> ) == <B>	<A> の長さが <B> であれば True 、そうでなければ False を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ ]	<A> に空のリストを代入
<A> = str ( sum ( <B> ) )	<A> に <B> の要素の総和の文字列表現を代入
"<A> = """""	<A> に空文字列を代入
for <A> , <B> in enumerate ( <C> ) :	<B> を <C> の各要素、 <A> をその番号として
if <A> <  <B> :	もし <A> が <B> 未満であれば
<A> += <B>	<A> に <B> を追加
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
"<A> = """""	<A> に空文字列を代入
for <A> , <B> in enumerate ( <C> ) :	<B> を <C> の各要素、 <A> をその番号として
if <A> <  <B> :	もし <A> が <B> 未満であれば
<A> += <B>	<A> に <B> を追加
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ <C> ]	<A> に <B> の <C> 番目を足す
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B> ** <C>	<A> に <B> の <C> 乗を代入
<A> = [ <B> ] * <C>	<A> に <C> 個の <B> を要素とするリストを代入
<A> [ 1 ] = <B>	<A> の 2 番目の要素を <B> とする
for <A> in range ( <B> , <C> ) :	<B> から <C> 未満の各数を順に <A> として
<A> = [ ]	<A> に空リストを代入
while <A> >= <B> or <C> [ <A> ] == <D> :	<A> が <B> 以上か <C> の <A> 番目が <D> である間
<A> . append ( <B> )	<A> の末尾に <B> を追加
<A> = int ( <A> / <B> ) if <A> % <B> == 0 else <A> * <C> + <D>	<A> が <B> で割り切れる場合 <A> を <B> で割った商を、そうでない場合 <A> の <C> 倍に <D> を足した数を <A> に代入
<A> = <B> [ <C> ]	<A> に <B> の <C> 番目の要素を代入
for <A> in reversed ( <B> ) :	<B> の要素を末尾から順に <A> として繰り返し
<A> += <B>	<A> に <B> を足す
if <A> <  <B> :	もし <A> が <B> 未満なら
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
<A> = <B>	<A> に <B> を代入
<A> = <B>	<A> に <B> を代入
for <A> , <B> in enumerate ( <C> ) :	<C> の各要素を <B> 、 <A> を番号として繰り返し
if <A> <  <B> :	もし <A> が <B> より小さい場合
<A> = <B>	<A> を <B> にする
<A> = <B>	<A> を <B> にする
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return int ( <A> / <B> ) if <A> % <B> == 0 else <A> * <C> + <D>	<A> が <B> で割り切れるなら <A> を <B> で割った商を、そうでないなら <A> の <C> 倍に <D> を足した数を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = <B>	<A> に <B> を代入
while <A> != <B> :	<A> が <B> でない間
<A> = int ( <A> / <B> ) if <A> % <B> == 0 else <A> * <C> + <D>	<A> が <B> で割り切れるなら <A> を <B> で割った商を、そうでないなら <A> の <C> 倍に <D> を足した数を新しい <A> とする
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空リストとする
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( len ( <B> ) ) :	<B> の各要素の番号を順に <A> として
<A> . append ( ( <B> , <C> [ <B> ] ) )	<A> に <B> と <C> の <B> 番目からなる組を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空リストとする
for <A> in reversed ( <B> ) :	<B> の末尾要素から順に <A> として
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空とする
for <A> in range ( <B> , <C> ) :	<B> 以上 <C> 未満の整数を小さい方から <A> として
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ <B> ] * <C>	<A> を <C> 個の <B> からなるリストとする
for <A> in range ( <B> ) :	<B> 未満の非負整数を小さい方から順に <A> として
<A> [ <B> + <C> ] = <A> [ <B> ] * ( <B> + <C> )	<A> の <B> + <C> 番目に <A> の <B> 番目と <B> + <C> の積を代入
dinomials = [ <A> ] * <B>	dinominals を <A> が <B> 個並んだリストとする
for <A> in range ( <B> ) :	<B> 未満の非負整数を小さい方から順に <A> として
dinomials [ <A> ] = int ( <B> [ <C> ] / ( <B> [ <A> ] * <B> [ <C> - <A> ] ) )	<B> の <C> 番目の要素を <A> 番目の要素と <C> - <A> 番目の要素の積で割った結果を dinominals の <A> 番目に格納する
for <A> in range ( <B> ) :	<B> 未満の非負整数 <A> を小さい方から順に調べる
for <A> in range ( <B> ) :	<B> 未満の非負整数 <A> を小さい方から順に調べる
dinomials [ <A> ] += dinomials [ <A> + <B> ]	dinominals の <A> 番目に <A> + <B> 番目の要素を足す
return dinomials [ 0 ]	dinominals の最初の要素を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = [ <B> ] * ( <C> + <B> )	<A> を <B> が <C> + <B> 個並んだリストとする
for x in range ( <A> ) :	<A> 未満の非負整数 <A> を小さい方から順に
<A> [ <B> + <C> ] = <A> [ <B> ] * ( <B> + <C> )	<A> の <B> + <C> 番目の要素に <B> 番目の要素と <B> + <C> の積を代入
return int ( <A> [ <B> ] / ( <A> [ <C> ] * <A> [ <B> - <C> ] ) )	<A> の <B> 番目の要素を <C> 番目と <B> - <C> 番目の要素の積で割った結果を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ <B> ] * ( <C> + <B> )	<A> に <B> が <C> + <B> 個繋がったリストを格納
for <A> in range ( <B> ) :	<B> 未満の非負整数 <A> を小さい方から順に
<A> [ <B> + <C> ] = <A> [ <B> ] * ( <B> + <C> )	<A> の <B> + <C> 番目の要素に <B> 番目の要素と <B> + <C> 積を代入する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
if <A> == <B> :	もし <A> が <B> と等しければ
return [ <A> ]	<A> のみからなるリストを返す
else :	そうでなければ
<A> = <B> ( <C> - 1 )	<B> に <C> -1 を渡した結果を <A> とする
<A> = [ <B> [ 0 ] , <B> [ -1 ] ]	<A> を <B> の最初の要素と末尾の要素からなるリストとする
for <A> in range ( <B> - 2 ) :	<B> -2 未満の非負整数 <A> を小さい方から順に調べる
<A> . insert ( <B> + <C> , <D> [ <B> ] + <D> [ <B> + <C> ] )	<A> の <B> + <C> 番目に <D> の <B> 番目と <B> + <C> 番目の要素の和を追加する
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = str ( <B> ** <C> )	<A> に <B> の <C> 乗の文字列表現を格納
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を前から順に <A> として
<A> += int ( <B> )	<A> に <B> を表す整数を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = str ( <B> )	<A> に <B> の文字列表現を格納
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を前から順に <A> として
<A> += int ( <B> )	<A> に <B> の表す整数を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ <B> % <C> ]	<A> を <B> を <C> で割った余りのみからなるリストとする
while int ( <A> / <B> ) >  <C> :	<A> を <B> で割った整数部分が <C> でない間繰り返し
<A> = int ( <A> / <B> )	<A> を <B> で割った整数部分を新しい <A> とする
<A> . insert ( 0 , <B> % <C> )	<A> の先頭に <B> を <C> で割った余りを追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = <B>	<A> を <B> とする
<A> = <B>	<A> を <B> とする
while <A> <  <B> :	<A> が <B> より小さい間
<A> *= <B>	<A> に <B> を掛ける
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> ** <B>	<A> の <B> 乗を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> , <C> ) :	<B> から <C> 未満の数を順に <A> として
if <A> <= <B> :	もし <A> が <B> 以下であれば
<A> += len ( <B> [ <C> ] )	<A> に <B> の <C> 番目の要素の長さを足す
elif len ( str ( <A> ) ) == <B> :	そうでなくて、もし <A> の文字列表現の長さが <B> であれば
<A> += len ( twoword [ int ( <B> / <C> ) ] )	toword の <B> / <C> 番目の要素の長さを <A> に足す
<A> += len ( <B> [ <C> % <D> ] )	<B> の <C> % <D> 番目の要素の長さを <A> に足す
elif len ( str ( <A> ) ) == <B> :	そうでなくて、もし <A> の文字列表現の長さが <B> であれば
<A> += len ( <B> [ int ( <C> / <D> ) ] )	<B> の <C> / <D> 番目の要素の長さを <A> に足す
"<A> += len ( ""hundredand"" )"	hundredand の文字数を <A> に足す
<A> = <B> % <C>	<A> に <B> を <C> で割った余りを代入
if <A> != <B> and <A> <= <C> :	もし <A> が <B> でなくて、かつ <A> が <C> 以下であれば
<A> += len ( <B> [ <C> ] )	<A> に <B> の <C> 番目の要素の長さを足す
elif <A> == <B> :	そうでなくて、もし <A> が <B> であれば
<A> -= <B>	<A> から <B> を引く
else :	いずれでもなければ
<A> += len ( twoword [ int ( <B> / <C> ) ] )	<A> に toword の <B> / <C> 番目の要素の長さを足す
<A> += len ( <B> [ <C> % <D> ] )	<A> に <B> の <C> % <D> 番目の要素の長さを足す
else :	上記のいずれでもなければ
<A> += len ( <B> )	<A> に <B> の文字数を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = str ( <B> )	<A> を <B> の文字列表現とする
<A> = [ ]	<A> を空リストとする
for <A> in <B> :	<B> の各要素を前から順に <A> として
<A> . append ( int ( <B> ) )	<A> の末尾に <B> の表す整数を追加
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = <B>	<A> に <B> を代入
while int ( <A> / <B> ) >  <C> :	<A> を <B> で割った整数部分が <C> より大きい間
<A> /= <B>	<A> を <B> で割る
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return <A> [ <B> % <C> ]	<A> の <B> % <C> 番目を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> == <B>	<A> と <B> が等しければ True 、そうでなければ False を返す
def euler017_divid_integer_part ( <A> , <B> ) :	<A> と <B> を引数とする関数 euler -17_ divid_inateger_part を定義
return int ( <A> / <B> )	<A> を <B> で割った整数部分を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> 内の各要素を <A> として
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return len ( <A> )	<A> の長さを返す
def <A> ( ) :	関数 <A> の定義
for <A> in reversed ( range ( len ( <B> ) - 1 ) ) :	<B> の長さ -1 未満の非負整数を大きい方から <A> として
for <A> in range ( len ( <B> [ <C> ] ) ) :	<B> の <C> 番目の長さ未満の非負整数を小さい方から <A> として
<A> [ <B> ] [ <C> ] += max ( <A> [ <B> + <D> ] [ <C> ] , <A> [ <B> + <D> ] [ <C> + <D> ] )	<A> [ <B> + <D> ] [ <C> ] と <A> [ <B> + <D> ] [ <C> + <D> ] の大きい方を <A> [ <B> ] [ <C> ] に足す
return <A> [ 0 ] [ 0 ]	<A> の先頭要素の先頭要素を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> に <B> を代入
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> , <C> ) :	<B> 以上 <C> 未満の整数を順に <A> として
for <A> , <B> in enumerate ( <C> ) :	<B> を <C> の各要素、 <A> をその番号として
if <A> % <B> == <C> :	もし <A> を <B> で割った余りが <C> であれば
<A> += <B>	<A> に <B> を足す
<A> += <B>	<A> に <B> を足す
if ( <A> % <B> == 0 or ( ( not <A> % <C> == 0 ) and <A> % <D> == 0 ) ) and <E> == <F> :	<A> が <B> で割り切れるか、 <C> で割り切れずに <D> で割り切れ、さらに <E> が <F> である場合、
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return <A> % <B> == 0 or ( ( not <A> % <C> == 0 ) and <A> % <D> == 0 )	<A> が <B> で割り切れるか、 <C> で割り切れずに <D> で割り切れる場合 True 、そうでない場合 False を返す。
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> を定義
if <A> <= <B> :	もし <A> が <B> 以下であれば
<A> += <B>	<A> に <B> を足す
<A> -= <B>	<A> から <B> を引く
<A> = <B>	<A> に <B> を代入
if <A> <= <B> :	もし <B> が <A> 以上であれば
<A> = <B> * int ( <C> / <D> ) + int ( int ( <C> / <D> ) / <E> )	<A> に <C> / <D> の整数部分の <B> 倍と <C> / <D> の整数部分を <E> で割った整数部分の和を代入
else :	そうでなければ
<A> = <B> * int ( <C> / <D> ) + <E>	<A> に <C> を <D> で割った整数部分の <B> 倍に <E> を足したものを代入
<A> = ( <B> + int ( <C> * ( <D> + <E> ) / <F> ) + ( <G> % <H> ) + int ( ( <G> % <H> ) / <I> ) + <J> ) % 7	<A> に <B> 、 <C> ( <D> + <E> ) / <F> の整数部分、 yy を <H> で割った余り、 <G> % <H> / <I> の整数部分、 <J> を足した結果を代入
return <A> [ <B> ]	<A> の <B> 番目を返す
def <A> ( ) :	関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を小さい方から順に <A> として
<A> *= ( <B> + <C> )	<A> に <B> + <C> を掛ける
<A> = str ( <B> )	<A> に <B> の文字列表現を代入
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> の各要素を順に <A> として
<A> . append ( int ( <B> ) )	<A> の末尾にに <B> の表す整数を追加
return sum ( <A> )	<A> の全要素の総和を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を小さい方から順に <A> として
<A> *= ( <B> + <C> )	<A> に <B> + <C> を掛ける
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = str ( <B> )	<A> に <B> の文字列表現を代入
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> の各要素を順に <A> として
<A> += int ( <B> )	<A> に <B> の表す整数を足す
return <A>	<A> を返す
