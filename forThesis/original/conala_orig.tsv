os . kill ( os . getpid ( ) , signal . SIGUSR1 )	send a signal `signal.SIGUSR1` to the current process
bytes . fromhex ( '4a4b4c' ) . decode ( 'utf-8' )	decode a hex string '4a4b4c' to UTF-8.
all ( x == myList [ 0 ] for x in myList )	check if all elements in list `myList` are identical
print ( '%*s : %*s'   % ( 20 , 'Python' , 20 , 'Very Good' ) )	format number of spaces between strings `Python`, `:` and `Very Good` to be `20`
res = { k : v for k , v in list ( kwargs . items ( ) ) if v is not None }	get rid of None values in dictionary `kwargs`
res = dict ( ( k , v ) for k , v in kwargs . items ( ) if v is not None )	get rid of None values in dictionary `kwargs`
subprocess . check_output ( 'ps -ef | grep something | wc -l' , shell = True )	capture final output of a chain of system commands `ps -ef | grep something | wc -l`
""""" """" """" . join ( [ 'a' , 'b' , 'c' ] )"	concatenate a list of strings `['a', 'b', 'c']`
pd . Series ( list ( set ( s1 ) . intersection ( set ( s2 ) ) ) )	find intersection data between series `s1` and series `s2`
client . send ( 'HTTP/1.0 200 OK\r\n' )	sending http headers to `client`
then = datetime . datetime . strptime ( when , '%Y-%m-%d' ) . date ( )	Format a datetime string `when` to extract date only
inputString . split ( '\n' )	split a multi-line string `inputString` into separate strings
' a \n b \r\n c ' . split ( '\n' )	Split a multi-line string ` a \n b \r\n c ` by new line character `\n`
""""" "":"" """" . join ( str ( x ) for x in b )"	"concatenate elements of list `b` by a colon "":"""
Entry . objects . filter ( ) [ : 1 ] . get ( )	get the first object from a queryset in django model `Entry`
a . sum ( axis = 1 )	Calculate sum over all rows of 2D numpy array
warnings . simplefilter ( 'always' )	enable warnings using action 'always'
print ( ' ' . join ( map ( str , l ) ) )	concatenate items of list `l` with a space ' '
subprocess . call ( [ 'python.exe' , 'hello.py' , 'htmlfilename.htm' ] )	run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable
my_float = float ( my_string . replace ( ',' , '' ) )	convert a string `my_string` with dot and comma into a float number `my_float`
float ( '123,456.908' . replace ( ',' , '' ) )	convert a string `123,456.908` with dot and comma into a floating number
sys . path . append ( '/path/to/whatever' )	set pythonpath in python script.
re . split ( '(\\W+)' , 'Words, words, words.' )	split string 'Words, words, words.' using a regex '(\\W+)'
file = open ( 'Output.txt' , 'a' )	open a file `Output.txt` in append mode
urllib . request . urlretrieve ( 'http://www.example.com/songs/mp3.mp3' , 'mp3.mp3' )	"download a file ""http://www.example.com/songs/mp3.mp3"" over HTTP and save to ""mp3.mp3"""
r = requests . get ( url )	download a file `url` over HTTP
parser . add_argument ( '--version' , action = 'version' , version = '%(prog)s 2.0' )	argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`
{ i : d [ i ] for i in d if i != 'c' }	remove key 'c' from dictionary `d`
pd . merge ( split_df , csv_df , on = [ 'key' ] , suffixes = ( '_left' , '_right' ) )	"Create new DataFrame object by merging columns ""key"" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively"
s . split ( ' ' , 4 )	Split a string `s` by space with `4` splits
input ( 'Enter your input:' )	read keyboard-input
app . run ( debug = True )	enable debug mode on Flask application `app`
pickle . dump ( mylist , open ( 'save.txt' , 'wb' ) )	python save list `mylist` to file object 'save.txt'
scipy . tensordot ( P , T , axes = [ 1 , 1 ] ) . swapaxes ( 0 , 1 )	Multiply a matrix `P` with a 3d tensor `T` in scipy
numpy . zeros ( ( 3 , 3 , 3 ) )	Create 3d array of zeroes of size `(3,3,3)`
""""" "" "" """" . join ( content . split ( ' ' ) [ : -1 ] )"	cut off the last word of a sentence `content`
x = np . asarray ( x ) . reshape ( 1 , -1 ) [ ( 0 ) , : ]	convert scalar `x` to array
sum ( sum ( i ) if isinstance ( i , list ) else i for i in L )	sum all elements of nested list `L`
struct . unpack ( '!f' , '470FC614' . decode ( 'hex' ) ) [ 0 ]	convert hex string '470FC614' to a float number
my_dict . update ( ( x , y * 2 ) for x , y in list ( my_dict . items ( ) ) )	Multiple each value by `2` for all keys in a dictionary `my_dict`
subprocess . call ( 'sleep.sh' , shell = True )	running bash script 'sleep.sh'
""""" "","" """" . join ( l )"	Join elements of list `l` with a comma `,`
myList = ',' . join ( map ( str , myList ) )	make a comma-separated string from a list `myList`
list ( reversed ( list ( range ( 10 ) ) ) )	reverse the list that contains 1 to 10
print ( 'lamp, bag, mirror' . replace ( 'bag,' , '' ) )	remove substring 'bag,' from a string 'lamp, bag, mirror'
""""" ""."" """" . join ( s . split ( '.' ) [ : : -1 ] )"	Reverse the order of words, delimited by `.`, in string `s`
datetime . datetime . fromtimestamp ( s ) . strftime ( '%Y-%m-%d %H:%M:%S.%f' )	convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'
time . strftime ( '%Y-%m-%d %H:%M:%S' , time . gmtime ( 1236472051807 / 1000.0 ) )	parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'
( datetime . datetime . now ( ) - datetime . timedelta ( days = 7 ) ) . date ( )	get the date 7 days before the current date
print ( sum ( row [ column ] for row in data ) )	sum elements at index `column` of each list in list `data`
[ sum ( row [ i ] for row in array ) for i in range ( len ( array [ 0 ] ) ) ]	sum columns of a list `array`
base64 . b64encode ( bytes ( 'your string' , 'utf-8' ) )	encode binary string 'your string' to base64 code
dict ( ( k , [ d [ k ] for d in dicts ] ) for k in dicts [ 0 ] )	combine list of dictionaries `dicts` with the same keys in each list to a single dictionary
{ k : [ d [ k ] for d in dicts ] for k in dicts [ 0 ] }	Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`
[ k for k , v in list ( Counter ( mylist ) . items ( ) ) if v >  1 ]	identify duplicate values in list `mylist`
sys . path . insert ( 1 , os . path . join ( os . path . dirname ( __file__ ) , 'apps' ) )	Insert directory 'apps' into directory `__file__`
sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , 'subdir' ) )	modify sys.path for python module `subdir`
"db . execute ( ""INSERT INTO present VALUES('test2', ?, 10)"" , ( None , ) )"	Insert a 'None' value into a SQLite3 table.
[ image for menuitem in list_of_menuitems for image in menuitem ]	flatten list `list_of_menuitems`
a . extend ( b )	append elements of a set `b` to a list `a`
np . savetxt ( 'c:\\data\\np.txt' , df . values , fmt = '%d' )	write the data of dataframe `df` into text file `np.txt`
df . to_csv ( 'c:\\data\\pandas.txt' , header = None , index = None , sep = ' ' , mode = 'a' )	write content of DataFrame `df` into text file 'c:\\data\\pandas.txt'
print ( x . rpartition ( '-' ) [ 0 ] )	Split a string `x` by last occurrence of character `-`
print ( x . rsplit ( '-' , 1 ) [ 0 ] )	get the last part of a string before the character '-'
ftp . storlines ( 'STOR '   + filename , open ( filename , 'r' ) )	upload file using FTP
np . maximum ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] )	create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`
print ( l [ 3 : ] + l [ : 3 ] )	print a list `l` and move first 3 elements to the end of the list
[ int ( 1000 * random . random ( ) ) for i in range ( 10000 ) ]	create a random list of integers
db . GqlQuery ( 'SELECT * FROM Schedule WHERE station = $1' , foo . key ( ) )	Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`
df . b . str . contains ( '^f' )	filter rows in pandas starting with alphabet 'f' using regular expression.
print ( '\n' . join ( '\t' . join ( str ( col ) for col in row ) for row in tab ) )	print a 2 dimensional list `tab` as a table with delimiters
df . set_index ( list ( 'BC' ) ) . drop ( tuples , errors = 'ignore' ) . reset_index ( )	pandas: delete rows in dataframe `df` based on multiple columns values
""""" ""({:d} goals, ${:d})"" """" . format ( self . goals , self . penalties )"	format the variables `self.goals` and `self.penalties` using string formatting
""""" ""({} goals, ${})"" """" . format ( self . goals , self . penalties )"	"format string ""({} goals, ${})"" with variables `goals` and `penalties`"
""""" ""({0.goals} goals, ${0.penalties})"" """" . format ( self )"	"format string ""({0.goals} goals, ${0.penalties})"""
[ int ( '' . join ( str ( d ) for d in x ) ) for x in L ]	convert list of lists `L` to list of integers
[ '' . join ( str ( d ) for d in x ) for x in L ]	combine elements of each list in list `L` into digits of a single integer
L = [ int ( '' . join ( [ str ( y ) for y in x ] ) ) for x in L ]	convert a list of lists `L` to list of integers
myfile . write ( '\n' . join ( lines ) )	write the elements of list `lines` concatenated by special character '\n' to file `myfile`
[ x for x in [ 'AAT' , 'XAC' , 'ANT' , 'TTA' ] if 'X'   not in x and 'N'   not in x ]	removing an element from a list based on a predicate 'X' or 'N'
text = re . sub ( '\\b(\\w+)( \\1\\b)+' , '\\1' , text )	Remove duplicate words from a string `text` using regex
df . astype ( bool ) . sum ( axis = 1 )	count non zero values in each column in pandas data frame
re . search ( '(?<!Distillr)\\\\AcroTray\\.exe' , 'C:\\SomeDir\\AcroTray.exe' )	search for string that matches regular expression pattern '(?<!Distillr)\\\\AcroTray\\.exe' in string 'C:\\SomeDir\\AcroTray.exe'
""""" ""QH QD JC KD JS"" """" . split ( )"	split string 'QH QD JC KD JS' into a list on white spaces
print ( re . search ( '>.*<' , line ) . group ( 0 ) )	search for occurrences of regex pattern '>.*<' in xml string `line`
open ( filename , 'w' ) . close ( )	erase all the contents of a file `filename`
datetime . datetime . strptime ( string_date , '%Y-%m-%d %H:%M:%S.%f' )	convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'
[ index for index , item in enumerate ( thelist ) if item [ 0 ] == '332' ]	find the index of a list with the first element equal to '332' within the list of lists `thelist`
re . sub ( '[^\\sa-zA-Z0-9]' , '' , text ) . lower ( ) . strip ( )	lower a string `text` and remove non-alphanumeric characters aside from space
re . sub ( '(?!\\s)[\\W_]' , '' , text ) . lower ( ) . strip ( )	remove all non-alphanumeric characters except space from a string `text` and lower it
plt . plot ( x , y , label = 'H\u2082O' )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.
plt . plot ( x , y , label = '$H_2O$' )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.
[ x for x in mylist if len ( x ) == 3 ]	loop over a list `mylist` if sublists length equals 3
lst = [ Object ( ) for _ in range ( 100 ) ]	initialize a list `lst` of 100 objects Object()
lst = [ Object ( ) for i in range ( 100 ) ]	create list `lst` containing 100 instances of object `Object`
self . driver . find_element_by_css_selector ( '.someclass a' ) . get_attribute ( 'href' )	get the content of child tag with`href` attribute whose parent has css `someclass`
df1 . merge ( df2 , on = 'Date_Time' )	joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes
'first string is: %s, second one is: %s'   % ( str1 , 'geo.tif' )	use `%s` operator to print variable values `str1` inside a string
distutils . dir_util . mkpath ( path )	check if a directory `path` exists and create it if necessary
re . sub ( '\\bH3\\b' , 'H1' , text )	Replace a separate word 'H3' by 'H1' in a string 'text'
re . sub ( '\\D' , '' , 'aas30dsa20' )	substitute ASCII letters in string 'aas30dsa20' with empty string ''
""""" """" """" . join ( [ x for x in 'aas30dsa20'   if x . isdigit ( ) ] )"	get digits only from a string `aas30dsa20` using lambda function
print ( soup . find ( 'name' ) . string )	"access a tag called ""name"" in beautifulsoup `soup`"
records = dict ( ( record [ '_id' ] , record ) for record in cursor )	get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`
np . concatenate ( ( A , B ) )	Create new matrix object  by concatenating data from matrix A and matrix B
np . vstack ( ( A , B ) )	concat two matrices `A` and `B` in numpy
os . stat ( filepath ) . st_size	Get the characters count in a file `filepath`
l . count ( 'a' )	"count the occurrences of item ""a"" in list `l`"
Counter ( l )	count the occurrences of items in list `l`
[ [ x , l . count ( x ) ] for x in set ( l ) ]	count the occurrences of items in list `l`
dict ( ( ( x , l . count ( x ) ) for x in set ( l ) ) )	count the occurrences of items in list `l`
l . count ( 'b' )	"count the occurrences of item ""b"" in list `l`"
shutil . copy ( srcfile , dstdir )	copy file `srcfile` to directory `dstdir`
max ( k for k , v in x . items ( ) if v != 0 )	find the key associated with the largest value in dictionary `x` whilst key is non-zero value
( k for k , v in x . items ( ) if v != 0 )	get the largest key whose not associated with value of 0 in dictionary `x`
max ( k for k , v in x . items ( ) if v != 0 )	get the largest key in a dictionary `x` with non-zero value
file . seek ( 0 )	Put the curser at beginning of the file
df [ 'c' ] = np . where ( df [ 'a' ] . isnull , df [ 'b' ] , df [ 'a' ] )	combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`
del d [ 'ele' ]	remove key 'ele' from dictionary `d`
MyModel . objects . update ( timestamp = F ( 'timestamp' ) + timedelta ( days = 36524.25 ) )	Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years
[ 'it' ] + [ 'was' ] + [ 'annoying' ]	merge list `['it']` and list `['was']` and list `['annoying']` into one list
str ( int ( x ) + 1 ) . zfill ( len ( x ) )	increment a value with leading zeroes in a number `x`
all ( df . index [ : -1 ] <= df . index [ 1 : ] )	check if a pandas dataframe `df`'s index is sorted
list ( t )	Convert tuple `t` to list
tuple ( l )	Convert list `t` to tuple
level1 = map ( list , level1 )	Convert tuple `level1` to list
pprint . pprint ( dataobject , logFile )	send the output of pprint object `dataobject` to file `logFile`
df . loc [ df [ 'BoolCol' ] ]	get index of rows in column 'BoolCol'
df . iloc [ np . flatnonzero ( df [ 'BoolCol' ] ) ]	Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True
df [ df [ 'BoolCol' ] == True ] . index . tolist ( )	get list of indexes of rows where column 'BoolCol' values match True
df [ df [ 'BoolCol' ] ] . index . tolist ( )	get index of rows in dataframe `df` which column 'BoolCol' matches value True
os . chdir ( owd )	change working directory to the directory `owd`
"c . execute ( ""INSERT INTO test VALUES (?, 'bar')"" , ( testfield , ) )"	insert data from a string `testfield` to sqlite db `c`
""""" ""\\x89\\n"" """" . decode ( 'string_escape' )"	"decode string ""\\x89\\n"" into a normal string"
raw_string . decode ( 'string_escape' )	convert a raw string `raw_string` into a normal string
raw_byte_string . decode ( 'unicode_escape' )	convert a raw string `raw_byte_string` into a normal string
[ m . group ( 0 ) for m in re . finditer ( '(\\d)\\1*' , s ) ]	split a string `s` with into all strings of repeated characters
plt . scatter ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , facecolors = 'none' )	scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none
plt . plot ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , 'o' , mfc = 'none' )	do a scatter plot with empty circles
soup . find ( 'div' , id = 'main-content' ) . decompose ( )	remove a div with a id `main-content` using beautifulsoup
df [ df [ 'ids' ] . str . contains ( 'ball' ) ]	filter rows containing key word `ball` in column `ids`
df . reset_index ( level = 0 , inplace = True )	convert index at level 0 into a column in dataframe `df`
df [ 'index1' ] = df . index	Add indexes in a data frame `df` to a column `index1`
df . reset_index ( level = [ 'tick' , 'obs' ] )	convert pandas index in a dataframe to columns
[ x [ : : -1 ] for x in b ]	Get reverse of list items from list 'b' using extended slicing
np . array ( [ zip ( x , y ) for x , y in zip ( a , b ) ] )	join each element in array `a` with element at the same index in array `b` as a tuple
np . array ( zip ( a . ravel ( ) , b . ravel ( ) ) , dtype = 'i4,i4' ) . reshape ( a . shape )	zip two 2-d arrays `a` and `b`
""""" "","" """" . join ( [ str ( i ) for i in list_of_ints ] )"	convert list `list_of_ints` into a comma separated string
requests . post ( url , data = DATA , headers = HEADERS_DICT , auth = ( username , password ) )	Send a post request with raw data `DATA` and basic authentication with `username` and `password`
'abcd}def}' . rfind ( '}' )	"Find last occurrence of character '}' in string ""abcd}def}"""
print ( [ item for item in [ 1 , 2 , 3 ] ] )	Iterate ove list `[1, 2, 3]` using list comprehension
[ ( x [ 'x' ] , x [ 'y' ] ) for x in d ]	extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples
print ( os . path . splitext ( os . path . basename ( 'hemanth.txt' ) ) [ 0 ] )	get the filename without the extension from file 'hemanth.txt'
dict ( x [ i : i + 2 ] for i in range ( 0 , len ( x ) , 2 ) )	create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it
values = sum ( [ [ 'A' , 'B' , 'C' ] , [ 'D' , 'E' , 'F' ] , [ 'G' , 'H' , 'I' ] ] , [ ] )	create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`
df = df [ ( df [ 'closing_price' ] >= 99 ) &  ( df [ 'closing_price' ] <= 101 ) ]	select rows in a dataframe `df` column 'closing_price' between two values 99 and 101
df . replace ( { '\n' : '<br>' } , regex = True )	replace all occurences of newlines `\n` with `<br>` in dataframe `df`
df . replace ( { '\n' : '<br>' } , regex = True )	replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`
[ ( x + y ) for x , y in zip ( word , word [ 1 : ] ) ]	create a list containing each two adjacent letters in string `word` as its elements
list ( map ( lambda x , y : x + y , word [ : -1 ] , word [ 1 : ] ) )	Get a list of pairs from a string `word` using lambda function
print ( re . findall ( '(https?://[^\\s]+)' , myString ) )	extract a url from a string `myString`
print ( re . search ( '(?P<url>https?://[^\\s]+)' , myString ) . group ( 'url' ) )	extract a url from a string `myString`
re . sub ( '[^A-Za-z0-9]+' , '' , mystring )	remove all special characters, punctuation and spaces from a string `mystring` using regex
pd . date_range ( '2016-01-01' , freq = 'WOM-2FRI' , periods = 13 )	create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'
matrix = [ [ a , b ] , [ c , d ] , [ e , f ] ]	Create multidimensional array `matrix` with 3 rows and 2 columns in python
mystring . replace ( ' ' , '_' )	replace spaces with underscore
os . path . abspath ( 'mydir/myfile.txt' )	get an absolute file path of file 'mydir/myfile.txt'
""""" "" "" """" . join ( my_string . split ( ) )"	split string `my_string` on white spaces
os . path . splitext ( filename ) [ 0 ]	get filename without extension from file `filename`
[ sum ( l [ : i ] ) for i , _ in enumerate ( l ) ]	get a list containing the sum of each element `i` in list `l` plus the previous elements
""""" ""Docs/src/Scripts/temp"" """" . replace ( '/' , '/\x00/' ) . split ( '\x00' )"	split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result
np . random . shuffle ( np . transpose ( r ) )	shuffle columns of an numpy array 'r'
df [ 'D' ] = df [ 'B' ]	copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'
list ( data [ 'A' ] [ 'B' ] . values ( ) ) [ 0 ] [ 'maindata' ] [ 0 ] [ 'Info' ]	find a value within nested json 'data' where the key inside another key 'B' is unknown.
all ( predicate ( x ) for x in string )	check characters of string `string` are true predication of function `predicate`
os . statvfs ( '/' ) . f_files - os . statvfs ( '/' ) . f_ffree	determine number of files on a drive with python
user_list = [ int ( number ) for number in user_input . split ( ',' ) ]	convert string `user_input` into a list of integers `user_list`
[ int ( s ) for s in user . split ( ',' ) ]	Get a list of integers by splitting  a string `user` with comma
ut . sort ( key = cmpfun , reverse = True )	sort a list of objects `ut`, based on a function `cmpfun` in descending order
ut . sort ( key = lambda x : x . count , reverse = True )	reverse list `ut` based on the `count` attribute of each object
ut . sort ( key = lambda x : x . count , reverse = True )	sort a list of objects `ut` in reverse order by their `count` property
driver . find_element_by_partial_link_text ( 'Send' ) . click ( )	click a href button 'Send' with selenium
driver . findElement ( By . linkText ( 'Send InMail' ) ) . click ( )	click a href button having text `Send InMail` with selenium
driver . find_element_by_link_text ( 'Send InMail' ) . click ( )	click a href button with text 'Send InMail' with selenium
'ME'   + str ( i )	cast an int `i` to a string and concat to string 'ME'
open ( 'outfile' , 'w' ) . write ( '#test firstline\n'   + open ( 'infile' ) . read ( ) )	prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'
l . sort ( key = lambda t : len ( t [ 1 ] ) , reverse = True )	sort a list `l` by length of value in tuple
re . findall ( '\\b(\\w+)d\\b' , s )	split string `s` by words that ends with 'd'
bool ( re . search ( 'ba[rzd]' , 'foobarrrr' ) )	return `True` if string `foobarrrr` contains regex `ba[rzd]`
list ( set ( t ) )	Removing duplicates in list `t`
list ( set ( source_list ) )	Removing duplicates in list `source_list`
list ( OrderedDict . fromkeys ( 'abracadabra' ) )	Removing duplicates in list `abracadabra`
numpy . array ( a ) . reshape ( -1 ) . tolist ( )	Convert array `a` into a list
numpy . array ( a ) [ 0 ] . tolist ( )	Convert the first row of numpy matrix `a` to a list
print ( soup . find ( text = 'Address:' ) . findNext ( 'td' ) . contents [ 0 ] )	In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`
""""" "" "" """" . join ( [ ( '%d@%d'   % t ) for t in l ] )"	convert elements of each tuple in list `l` into a string  separated by character `@`
""""" "" "" """" . join ( [ ( '%d@%d'   % ( t [ 0 ] , t [ 1 ] ) ) for t in l ] )"	convert each tuple in list `l` to a string with '@' separating the tuples' elements
driver . execute_script ( 'return document.documentElement.outerHTML;' )	get the html from the current web page of a Selenium driver
[ i for i in teststr if re . search ( '\\d+[xX]' , i ) ]	Get all matches with regex pattern `\\d+[xX]` in list of string `teststr`
df [ 'A' ] [ ( df [ 'B' ] >  50 ) &  ( df [ 'C' ] == 900 ) ]	select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`
sorted ( o . items ( ) )	Sort dictionary `o` in ascending order based on its keys and items
sorted ( d )	get sorted list of keys of dict `d`
int ( '1' )	"convert string ""1"" into integer"
int ( )	function to convert strings into integers
T2 = [ map ( int , x ) for x in T1 ]	convert items in `T1` to integers
subprocess . call ( [ './test.sh' ] )	call a shell script `./test.sh` using subprocess
subprocess . call ( [ 'notepad' ] )	call a shell script `notepad` using subprocess
[ val for pair in zip ( l1 , l2 ) for val in pair ]	combine lists `l1` and `l2`  by alternating their elements
encoded = base64 . b64encode ( 'data to be encoded' )	encode string 'data to be encoded'
encoded = 'data to be encoded' . encode ( 'ascii' )	encode a string `data to be encoded` to `ascii` encoding
lol = list ( csv . reader ( open ( 'text.txt' , 'rb' ) , delimiter = '\t' ) )	parse tab-delimited CSV file 'text.txt' into a list
getattr ( my_object , my_str )	Get attribute `my_str` of object `my_object`
print ( dict ( zip ( LD [ 0 ] , zip ( * [ list ( d . values ( ) ) for d in LD ] ) ) ) )	group a list of dicts `LD` into one dict by key
"d = ast . literal_eval ( ""{'code1':1,'code2':1}"" )"	"convert unicode string u""{'code1':1,'code2':1}"" into dictionary"
[ word for word in mystring . split ( ) if word . startswith ( '$' ) ]	find all words in a string `mystring` that start with the `$` sign
text = re . sub ( '^https?:\\/\\/.*[\\r\\n]*' , '' , text , flags = re . MULTILINE )	remove any url within string `text`
np . where ( np . in1d ( A , [ 1 , 3 , 4 ] ) . reshape ( A . shape ) , A , 0 )	replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros
np . mean ( a , axis = 1 )	calculate mean across dimension in a 2d array `a`
subprocess . call ( [ '/usr/bin/Rscript' , '--vanilla' , '/pathto/MyrScript.r' ] )	running r script '/pathto/MyrScript.r' from python
subprocess . call ( '/usr/bin/Rscript --vanilla /pathto/MyrScript.r' , shell = True )	run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'
writer . writeheader ( )	add a header to a csv file
df . fillna ( df . mean ( axis = 1 ) , axis = 1 )	replacing nan in the dataframe `df` with row average
time . strftime ( '%Y-%m-%d %H:%M:%S' , time . localtime ( 1347517370 ) )	Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'
super ( Derived , cls ) . do ( a )	Call a base class's class method `do` from derived class `Derived`
a [ np . where ( ( a [ : , ( 0 ) ] == 0 ) * ( a [ : , ( 1 ) ] == 1 ) ) ]	selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1
re . split ( ' +' , 'hello world sample text' )	separate words delimited by one or more spaces into a list
len ( max ( words , key = len ) )	length of longest element in list `words`
result [ 0 ] [ 'from_user' ]	get the value associated with unicode key 'from_user' of first dictionary in list `result`
[ line . split ( ) for line in open ( 'File.txt' ) ]	Retrieve each line from a file 'File.txt' as a list
res = dict ( ( v , k ) for k , v in a . items ( ) )	swap keys with values in a dictionary `a`
new_file = open ( 'path/to/FILE_NAME.ext' , 'w' )	Open a file `path/to/FILE_NAME.ext` in write mode
any ( key . startswith ( 'EMP$$' ) for key in dict1 )	Check if any key in the dictionary `dict1` starts with the string `EMP$$`
[ value for key , value in list ( dict1 . items ( ) ) if key . startswith ( 'EMP$$' ) ]	create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'
pd . DataFrame ( { 'email' : sf . index , 'list' : sf . values } )	convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`
print ( '\t' . join ( map ( str , list ) ) )	print elements of list `list` seperated by tabs `\t`
print ( '\xd0\xbf\xd1\x80\xd0\xb8' . encode ( 'raw_unicode_escape' ) )	print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8
'Sopet\xc3\xb3n' . encode ( 'latin-1' ) . decode ( 'utf-8' )	Encode a latin character in string `Sopet\xc3\xb3n` properly
image = image . resize ( ( x , y ) , Image . ANTIALIAS )	resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`
re . findall ( 'n(?<=[^n]n)n+(?=[^n])(?i)' , s )	"regex, find ""n""s only in the middle of string `s`"
print ( '{0:.0f}%' . format ( 1.0 / 3 * 100 ) )	display the float `1/3*100` as a percentage
mylist . sort ( key = lambda x : x [ 'title' ] )	sort a list of dictionary `mylist` by the key `title`
l . sort ( key = lambda x : x [ 'title' ] )	sort a list `l` of dicts by dict value 'title'
l . sort ( key = lambda x : ( x [ 'title' ] , x [ 'title_url' ] , x [ 'id' ] ) )	sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.
heapq . nlargest ( 10 , range ( len ( l1 ) ) , key = lambda i : abs ( l1 [ i ] - l2 [ i ] ) )	find 10 largest differences between each respective elements of list `l1` and list `l2`
soup . find_all ( 'span' , { 'class' : 'starGryB sp' } )	BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'
df . to_sql ( 'test' , engine , schema = 'a_schema' )	write records in dataframe `df` to table 'test' in schema 'a_schema'
brackets = re . sub ( '[^(){}[\\]]' , '' , s )	Extract brackets from string `s`
list ( dict ( ( x [ 0 ] , x ) for x in L ) . values ( ) )	remove duplicate elements from list 'L'
[ line . rstrip ( '\n' ) for line in file ]	read a file `file` without newlines
[ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ]	get the position of item 1 in `testlist`
[ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ]	get the position of item 1 in `testlist`
print ( testlist . index ( element ) )	get the position of item `element` in list `testlist`
max ( lis , key = lambda item : item [ 1 ] ) [ 0 ]	find the first element of the tuple with the maximum second element in a list of tuples `lis`
max ( lis , key = itemgetter ( 1 ) ) [ 0 ]	get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`
time . sleep ( 1 )	Make a delay of 1 second
""""" "", "" """" . join ( '('   + ', ' . join ( i ) + ')'   for i in L )"	convert list of tuples `L` to a string
b = models . CharField ( max_length = 7 , default = '0000000' , editable = False )	Django set default value of field `b` equal to '0000000'
sorted ( list5 , lambda x : ( degree ( x ) , x ) )	Sort lis `list5` in ascending order based on the degrees value of its elements
( n for n in [ 1 , 2 , 3 , 5 ] )	convert a list  into a generator object
newlist = [ v for i , v in enumerate ( oldlist ) if i not in removelist ]	remove elements from list `oldlist` that have an index number mentioned in list `removelist`
f = open ( 'yourfile.txt' , 'w' )	Open a file `yourfile.txt` in write mode
getattr ( obj , 'attr' )	get attribute 'attr' from object `obj`
map ( lambda a : a [ 0 ] , ( ( 'aa' , ) , ( 'bb' , ) , ( 'cc' , ) ) )	convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line
zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) ] )	unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`
zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) ] )	unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`
result = ( [ a for ( a , b ) in original ] , [ b for ( a , b ) in original ] )	unzip list `original`
result = ( ( a for ( a , b ) in original ) , ( b for ( a , b ) in original ) )	unzip list `original` and return a generator
zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) , ( 'e' , ) ] )	unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`
map ( None , * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) , ( 'e' , ) ] )	unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None
json . dumps ( Decimal ( '3.9' ) )	encode `Decimal('3.9')` to a JSON string
d [ 'mynewkey' ] = 'mynewvalue'	"Add key ""mynewkey"" to dictionary `d` with value ""mynewvalue"""
data . update ( { 'a' : 1 , } )	Add key 'a' to dictionary `data` with value 1
data . update ( dict ( a = 1 ) )	Add key 'a' to dictionary `data` with value 1
data . update ( a = 1 )	Add key 'a' to dictionary `data` with value 1
max ( [ max ( i ) for i in matrix ] )	find maximal value in matrix `matrix`
answer = str ( round ( answer , 2 ) )	Round number `answer` to 2 precision after the decimal point
ip = re . findall ( '[0-9]+(?:\\.[0-9]+){3}' , s )	extract ip address from an html string
df . groupby ( 'A' ) . filter ( lambda x : len ( x ) >  1 )	filter dataframe `df` by values in column `A` that appear more than once
[ x for x in myfile . splitlines ( ) if x != '' ]	append each line in file `myfile` into a list
lst = map ( int , open ( 'filename.txt' ) . readlines ( ) )	Get a list of integers `lst` from a file `filename.txt`
plt . colorbar ( mappable = mappable , cax = ax3 )	add color bar with image `mappable` to plot `plt`
Counter ( ' ' . join ( df [ 'text' ] ) . split ( ) ) . most_common ( 100 )	count most frequent 100 words in column 'text' of dataframe `df`
list ( itertools . combinations ( ( 1 , 2 , 3 ) , 2 ) )	generate all 2-element subsets of tuple `(1, 2, 3)`
datetime . now ( pytz . utc )	get a value of datetime.today() in the UTC time zone
list2 = [ x for x in list1 if x != [ ] ]	Get a new list `list2`by removing empty list from a list of lists `list1`
list2 = [ x for x in list1 if x ]	Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`
return HttpResponse ( data , mimetype = 'application/json' )	Django response with JSON `data`
re . findall ( '(.*?)\\[.*?\\]' , example_str )	get all text that is not enclosed within square brackets in string `example_str`
re . findall ( '(.*?)(?:\\[.*?\\]|$)' , example_str )	Use a regex to get all text in a string `example_str` that is not surrounded by square brackets
re . findall ( '\\(.+?\\)|\\w' , '(zyx)bc' )	get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'
re . findall ( '\\((.*?)\\)|(\\w)' , '(zyx)bc' )	match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'
re . findall ( '\\(.*?\\)|\\w' , '(zyx)bc' )	match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`
elements = [ '%{0}%' . format ( element ) for element in elements ]	formate each string cin list `elements` into pattern '%{0}%'
subprocess . Popen ( [ 'background-process' , 'arguments' ] )	Open a background process 'background-process' with arguments 'arguments'
[ mydict [ x ] for x in mykeys ]	get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'
dict ( [ ( 'Name' , 'Joe' ) , ( 'Age' , 22 ) ] )	convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary
data . reshape ( -1 , j ) . mean ( axis = 1 ) . reshape ( data . shape [ 0 ] , -1 )	average each two columns of array `data`
re . split ( '(\\W+)' , s )	split a string into a list of words and whitespace
{ i [ 1 ] : i [ 0 ] for i in list ( myDictionary . items ( ) ) }	reverse the keys and values in a dictionary `myDictionary`
[ i for i , j in enumerate ( myList ) if 'how'   in j . lower ( ) or 'what'   in j . lower ( ) ]	finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.
isinstance ( obj , str )	check if object `obj` is a string
isinstance ( o , str )	check if object `o` is a string
( type ( o ) is str )	check if object `o` is a string
isinstance ( o , str )	check if object `o` is a string
isinstance ( obj_to_test , str )	check if `obj_to_test` is a string
list2 . extend ( list1 )	append list `list1` to `list2`
list1 . extend ( mylog )	append list `mylog` to `list1`
c . extend ( a )	append list `a` to `c`
b . append ( ( a [ 0 ] [ 0 ] , a [ 0 ] [ 2 ] ) )	append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`
app . config [ 'SECRET_KEY' ] = 'Your_secret_string'	Initialize `SECRET_KEY` in flask config with `Your_secret_string `
pd . DataFrame ( out . tolist ( ) , columns = [ 'out-1' , 'out-2' ] , index = out . index )	unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'
[ x for x in range ( len ( stocks_list ) ) if stocks_list [ x ] == 'MSFT' ]	find the index of an element 'MSFT' in a list `stocks_list`
ax . set_xticklabels ( labels , rotation = 45 )	rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable
re . sub ( '[^\\w]' , ' ' , s )	remove symbols from a string `s`
os . path . basename ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	Get the current directory of a script
re . split ( '[ ](?=[A-Z]+\\b)' , input )	split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\b)'
re . split ( '[ ](?=[A-Z])' , input )	Split string `input` at every space followed by an upper-case letter
r = requests . post ( url , files = files , headers = headers , data = data )	send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`
open ( 'filename' , 'wb' ) . write ( bytes_ )	write bytes `bytes_` to a file `filename` in python 3
[ dct [ k ] for k in lst ]	get a list from a list `lst` with values mapped into a dictionary `dct`
x . set_index ( 'name' ) . index . get_duplicates ( )	find duplicate names in column 'name' of the dataframe `x`
round ( 1.923328437452 , 3 )	truncate float 1.923328437452 to 3 decimal places
sorted ( li , key = lambda x : datetime . strptime ( x [ 1 ] , '%d/%m/%Y' ) , reverse = True )	sort list `li` in descending order based on the date value in second element of each list in list `li`
ax . set_rlabel_position ( 135 )	place the radial ticks in plot `ax` at 135 degrees
os . path . isabs ( my_path )	check if path `my_path` is an absolute path
len ( list ( yourdict . keys ( ) ) )	get number of keys in dictionary `yourdict`
len ( set ( open ( yourdictfile ) . read ( ) . split ( ) ) )	count the number of keys in dictionary `yourdictfile`
df . groupby ( 'id' ) . first ( )	pandas dataframe get first row of each group by 'id'
pd . concat ( [ df [ 0 ] . apply ( pd . Series ) , df [ 1 ] ] , axis = 1 )	split a list in first column  into multiple columns keeping other columns as well in pandas data frame
"re . findall ( 'src=""js/([^""]*\\bjquery\\b[^""]*)""' , data )"	"extract attributes 'src=""js/([^""]*\\bjquery\\b[^""]*)""' from string `data`"
sum ( int ( float ( item ) ) for item in [ _f for _f in [ '' , '3.4' , '' , '' , '1.0' ] if _f ] )	Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`
subprocess . Popen ( [ 'c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat' ] )	Call a subprocess with arguments `c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat` that may contain spaces
q . put ( ( - n , n ) )	reverse a priority queue `q` in python without using classes
df [ 'group' ] . plot ( kind = 'bar' , color = [ 'r' , 'g' , 'b' , 'r' , 'g' , 'b' , 'r' ] )	make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`
re . findall ( '([a-fA-F\\d]{32})' , data )	find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`
len ( my_list )	Get the length of list `my_list`
len ( l )	Getting the length of array `l`
len ( s )	Getting the length of array `s`
len ( my_tuple )	Getting the length of `my_tuple`
len ( my_string )	Getting the length of `my_string`
""""" ""\\a"" """" . decode ( 'string_escape' )"	"remove escape character from string ""\\a"""
""""" ""obama"" """" . replace ( 'a' , '%temp%' ) . replace ( 'b' , 'a' ) . replace ( '%temp%' , 'b' )"	replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.
shutil . rmtree ( '/folder_name' )	remove directory tree '/folder_name'
data [ 'weekday' ] = data [ 'my_dt' ] . apply ( lambda x : x . weekday ( ) )	create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`
sorted ( x , key = x . get , reverse = True )	reverse sort Counter `x` by values
sorted ( list ( x . items ( ) ) , key = lambda pair : pair [ 1 ] , reverse = True )	reverse sort counter `x` by value
np . vstack ( ( a , b ) )	append a numpy array 'b' to a numpy array 'a'
print ( concatenate ( ( a , b ) , axis = 0 ) )	numpy concatenate two arrays `a` and `b` along the first axis
print ( concatenate ( ( a , b ) , axis = 1 ) )	numpy concatenate two arrays `a` and `b` along the second axis
c = np . r_ [ ( a [ None , : ] , b [ None , : ] ) ]	numpy concatenate two arrays `a` and `b` along the first axis
np . array ( ( a , b ) )	numpy concatenate two arrays `a` and `b` along the first axis
print ( socket . getaddrinfo ( 'google.com' , 80 ) )	fetch address information for host 'google.com' ion port 80
df . xs ( 'sat' , level = 'day' , drop_level = False )	add a column 'day' with value 'sat' to dataframe `df`
return HttpResponse ( 'Unauthorized' , status = 401 )	return a 401 unauthorized in django
Flask ( __name__ , template_folder = 'wherever' )	Flask set folder 'wherever' as the default template folder
session . execute ( 'INSERT INTO t1 (SELECT * FROM t2)' )	How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?
c2 . sort ( key = lambda row : row [ 2 ] )	sort a list of lists 'c2' such that third row comes first
matplotlib . rc ( 'font' , ** { 'sans-serif' : 'Arial' , 'family' : 'sans-serif' } )	set font `Arial` to display non-ascii characters in matplotlib
df [ 'date' ] . apply ( lambda x : x . toordinal ( ) )	Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal
element . get_attribute ( 'innerHTML' )	get html source of Selenium WebElement `element`
df . index . get_loc ( 'bob' )	Get the integer location of a key `bob` in a pandas data frame
"os . system ( 'gnome-terminal -e \'bash -c ""sudo apt-get update; exec bash""\'' )"	open a 'gnome' terminal from python script and run  'sudo apt-get update' command.
my_dict . update ( { 'third_key' : 1 } )	add an item with key 'third_key' and value 1 to an dictionary `my_dict`
my_list = [ ]	declare an array
my_list . append ( 12 )	Insert item `12` to a list `my_list`
myList . insert ( 0 , 'wuggah' )	add an entry 'wuggah' at the beginning of list `myList`
""""" ""\\xF3\\xBE\\x80\\x80"" """" . replace ( '\\x' , '' ) . decode ( 'hex' )"	convert a hex-string representation to actual bytes
df [ df . columns [ -1 ] ]	select the last column of dataframe `df`
df . loc [ df [ 'Letters' ] == 'C' , 'Letters' ] . values [ 0 ]	get the first value from dataframe `df` where column 'Letters' is equal to 'C'
np . column_stack ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )	converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix
type ( i )	get the type of `i`
type ( v )	determine the type of variable `v`
type ( v )	determine the type of variable `v`
type ( v )	determine the type of variable `v`
type ( v )	determine the type of variable `v`
print ( type ( variable_name ) )	get the type of variable `variable_name`
next ( itertools . islice ( range ( 10 ) , 5 , 5 + 1 ) )	get the 5th item of a generator
""""" "" "" """" . join ( list )"	join a list of strings `list` using a space ' '
y = [ [ ] for n in range ( 2 ) ]	create list `y` containing two empty lists
data = [ line . strip ( ) for line in open ( 'C:/name/MyDocuments/numbers' , 'r' ) ]	read a file 'C:/name/MyDocuments/numbers' into a list `data`
""""" """" """" . join ( [ char for char in 'it is icy'   if char != 'i' ] )"	delete all occurrences of character 'i' in string 'it is icy'
re . sub ( 'i' , '' , 'it is icy' )	delete all instances of a character 'i' in a string 'it is icy'
""""" ""it is icy"" """" . replace ( 'i' , '' )"	"delete all characters ""i"" in string ""it is icy"""
df . dropna ( subset = [ 1 ] )	"Drop rows of pandas dataframe `df` having NaN in column at index ""1"""
[ x for x in myList if x . n == 30 ]	get elements from list `myList`, that have a field `n` value 30
nums = [ int ( x ) for x in intstringlist ]	converting list of strings `intstringlist` to list of integer `nums`
map ( int , eval ( input ( 'Enter the unfriendly numbers: ' ) ) )	convert list of string numbers into list of integers
sys . stdout . write ( '.' )	"print ""."" without newline"
int ( round ( 2.51 * 100 ) )	round off the float that is the product of `2.52 * 100` and convert it to an int
df . plot ( legend = False )	plot dataframe `df` without a legend
generator = iter_iprange ( '192.168.1.1' , '192.168.255.255' , step = 1 )	"loop through the IP address range ""192.168.x.x"""
sum ( 1 << i for i , b in enumerate ( x ) if b )	Sum the corresponding decimal values for binary values of each boolean element in list `x`
target . write ( '%r\n%r\n%r\n'   % ( line1 , line2 , line3 ) )	write multiple strings `line1`, `line2` and `line3` in one line in a file `target`
[ y for x in data for y in ( x if isinstance ( x , list ) else [ x ] ) ]	Convert list of lists `data` into a flat list
print ( 'foo\nbar' . encode ( 'string_escape' ) )	Print new line character as `\n` in a string `foo\nbar`
""""" """" """" . join ( s . rsplit ( ',' , 1 ) )"	remove last comma character ',' in string `s`
( x [ 1 : ] + x [ : -1 ] ) / 2	calculate the mean of each element in array `x` with the element previous to it
x [ : -1 ] + ( x [ 1 : ] - x [ : -1 ] ) / 2	get an array of the mean of each two consecutive values in numpy array `x`
arr = numpy . fromiter ( codecs . open ( 'new.txt' , encoding = 'utf-8' ) , dtype = '<U2' )	load data containing `utf-8` from file `new.txt` into numpy array `arr`
l = sorted ( l , key = itemgetter ( 'time' ) , reverse = True )	reverse sort list of dicts `l` by value for key `time`
l = sorted ( l , key = lambda a : a [ 'time' ] , reverse = True )	Sort a list of dictionary `l` based on key `time` in descending order
df . loc [ df [ 0 ] . str . contains ( '(Hel|Just)' ) ]	get rows of dataframe `df` that match regex '(Hel|Just)'
re . search ( '\\[(.*)\\]' , your_string ) . group ( 1 )	"find the string in `your_string` between two special characters ""["" and ""]"""
""""" ""The big brown fox is brown"" """" . count ( 'brown' )"	count number of times string 'brown' occurred in string 'The big brown fox is brown'
json . loads ( request . body )	decode json string `request.body` to python dict
urllib . request . urlretrieve ( url , file_name )	download the file from url `url` and save it under file `file_name`
text . split ( )	split string `text` by space
text . split ( ',' )	"split string `text` by "","""
line . split ( )	Split string `line` into a list by whitespace
[ re . sub ( '(?<!\\d)\\.(?!\\d)' , ' ' , i ) for i in s ]	replace dot characters  '.' associated with ascii letters in list `s` with space ' '
sorted ( list_of_strings , key = lambda s : s . split ( ',' ) [ 1 ] )	sort list `list_of_strings` based on second index of each string `s`
subprocess . check_call ( 'vasp | tee tee_output' , shell = True )	call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’
[ element for element in lst if isinstance ( element , int ) ]	eliminate all strings from list `lst`
[ element for element in lst if not isinstance ( element , str ) ]	get all the elements except strings from the list 'lst'.
newlist = sorted ( list_to_be_sorted , key = lambda k : k [ 'name' ] )	Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`
newlist = sorted ( l , key = itemgetter ( 'name' ) , reverse = True )	sort a list of dictionaries `l` by values in key `name` in descending order
""""" "","" """" . join ( trans [ 'category' ] )"	"join together with "","" elements inside a list indexed with 'category' within a dictionary `trans`"
""""" """" """" . join ( [ 'A' , 'B' , 'C' , 'D' ] )"	concatenate array of strings `['A', 'B', 'C', 'D']` into a string
json . load ( urllib . request . urlopen ( 'url' ) )	get json data from restful service 'url'
[ x for x in sents if not x . startswith ( '@$\t' ) and not x . startswith ( '#' ) ]	Remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`
Entry . objects . filter ( pub_date__contains = '08:00' )	django filter by hour
list . sort ( key = lambda item : ( item [ 'points' ] , item [ 'time' ] ) )	sort a list of dictionary `list` first by key `points` and then by `time`
( t - datetime . datetime ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert datetime object `(1970, 1, 1)` to seconds
re . sub ( '(\\_a)?\\.([^\\.]*)$' , '_suff.\\2' , 'long.file.name.jpg' )	insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.
struct . unpack ( 'H' , struct . pack ( 'h' , number ) )	Convert integer `number` into an unassigned integer
numlist = [ float ( x ) for x in numlist ]	convert int values in list `numlist` to float
df . to_csv ( filename , index = False )	write dataframe `df`, excluding index, to a csv file
json_data = json . loads ( unescaped )	convert a urllib unquoted string `unescaped` to a json data `json_data`
[ chr ( i ) for i in range ( 127 ) ]	Create a list containing all ascii characters as its elements
newFile . write ( struct . pack ( '5B' , * newFileBytes ) )	write `newFileBytes` to a binary file `newFile`
re . sub ( '^[A-Z0-9]*(?![a-z])' , '' , string )	python regex - check for a capital letter with a following lowercase in string `string`
list ( dict . keys ( ) ) [ -1 ]	get the last key of dictionary `dict`
print ( 'hi there' , file = f )	"write line ""hi there"" to file `f`"
s . encode ( 'iso-8859-15' )	convert unicode string `s` to ascii
AuthorizedEmail . objects . filter ( group = group ) . order_by ( '-added' ) [ 0 ]	Django get maximum value associated with field 'added' in model `AuthorizedEmail`
re . findall ( 'Test([0-9.]*[0-9]+)' , text )	Find all numbers and dots from a string `text` using regex
re . findall ( 'Test([\\d.]*\\d+)' , text )	python regex  to find all numbers and dots from 'text'
os . system ( 'powershell.exe' , 'script.ps1' )	execute script 'script.ps1' using 'powershell.exe' shell
b . sort ( key = lambda x : x [ 1 ] [ 2 ] )	Sort a list of tuples `b` by third item in the tuple
list ( cf . get_range ( ) . get_keys ( ) )	get a list of all keys in Cassandra database `cf` with pycassa
datetime . datetime . now ( )	create a datetime with the current date & time
next ( i for i , x in enumerate ( lst ) if not isinstance ( x , bool ) and x == 1 )	get the index of an integer `1` from a list `lst` if the list also contains boolean items
a [ : ] = [ ( x - 13 ) for x in a ]	subtract 13 from every number in a list `a`
random . choice ( os . listdir ( ' C : \\' ) )	choose a random file from the directory contents of the C drive, `C:\\`
max ( x . min ( ) , x . max ( ) , key = abs )	get the highest element in absolute value in a numpy matrix `x`
mystring . replace ( ' ' , '! !' ) . split ( '!' )	split a string `mystring` considering the spaces ' '
open ( path , 'r' )	open file `path` with mode 'r'
[ [ sum ( item ) for item in zip ( * items ) ] for items in zip ( * data ) ]	sum elements at the same index in list `data`
a [ : , ( np . newaxis ) ]	add a new axis to array `a`
sum ( d * 10 ** i for i , d in enumerate ( x [ : : -1 ] ) )	Concatenate elements of a list 'x' of multiple integers to a single integer
r = int ( '' . join ( map ( str , x ) ) )	convert a list of integers into a single integer
datetime . strptime ( '2010-11-13 10:33:54.227806' , '%Y-%m-%d %H:%M:%S.%f' )	convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'
[ ( i , sum ( j ) / len ( j ) ) for i , j in list ( d . items ( ) ) ]	get the average of a list values for each key in dictionary `d`)
zip ( [ 1 , 2 ] , [ 3 , 4 ] )	zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list
[ 'hello{0}' . format ( i ) for i in a ]	prepend string 'hello' to all items in list 'a'
re . sub ( '(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)' , '\\1' , s )	regex for repeating words in a string `s`
df . div ( df . sum ( axis = 1 ) , axis = 0 )	normalize a pandas dataframe `df` by row
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , mylist )	swap values in a tuple/list inside a list `mylist`
[ ( t [ 1 ] , t [ 0 ] ) for t in mylist ]	Swap values in a tuple/list in list `mylist`
"re . findall ( '\\[[^\\]]*\\]|\\([^\\)]*\\)|""[^""]*""|\\S+' , strs )"	"find all occurrences of the pattern '\\[[^\\]]*\\]|\\([^\\)]*\\)|""[^""]*""|\\S+' within `strs`"
print ( list ( itertools . combinations ( { 1 , 2 , 3 , 4 } , 3 ) ) )	generate the combinations of 3 from a set `{1, 2, 3, 4}`
df [ [ 'hour' , 'weekday' , 'weeknum' ] ] = df . apply ( lambdafunc , axis = 1 )	add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`
soup . find_all ( 'a' , string = 'Elsie' )	BeautifulSoup search string 'Elsie' inside tag 'a'
my_datetime . strftime ( '%B %d, %Y' )	Convert a datetime object `my_datetime` into readable format `%B %d, %Y`
int ( '' . join ( c for c in s if c . isdigit ( ) ) )	parse string `s` to int when string contains a number
dic [ 'Test' ] . update ( { 'class' : { 'section' : 5 }} )	add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`
dict ( map ( int , x . split ( ':' ) ) for x in s . split ( ',' ) )	transforming the string `s` into dictionary
np . where ( ( vals == ( 0 , 1 ) ) . all ( axis = 1 ) )	find rows matching `(0,1)` in a 2 dimensional numpy array `vals`
dict ( [ [ 'two' , 2 ] , [ 'one' , 1 ] ] )	build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key/value pair as its items
dict ( zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) )	convert list `l` to dictionary having each two adjacent elements as key/value pair
GRAVITY = 9.8	assign float 9.8 to variable `GRAVITY`
re . findall ( '(([0-9]+)([A-Z]))' , '20M10000N80M' )	"separate numbers from characters in string ""30m1000n20m"""
re . findall ( '([0-9]+|[A-Z])' , '20M10000N80M' )	separate numbers and characters in string '20M10000N80M'
re . findall ( '([0-9]+)([A-Z])' , '20M10000N80M' )	separate numbers and characters in string '20M10000N80M'
re . compile ( '\\w+' ) . findall ( 'Hello world, my name is...James the 2nd!' )	Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation
datetime . datetime . strptime ( '03:55' , '%H:%M' ) . time ( )	Convert string '03:55' into datetime.time object
requests . get ( 'https://www.reporo.com/' , verify = False )	request url 'https://www.reporo.com/' without verifying SSL certificates
a [ a != 0 ]	Extract values not equal to 0 from numpy array `a`
new_dict = { k : v for k , v in zip ( keys , values ) }	map two lists `keys` and `values` into a dictionary
dict ( ( k , v ) for k , v in zip ( keys , values ) )	map two lists `keys` and `values` into a dictionary
dict ( [ ( k , v ) for k , v in zip ( keys , values ) ] )	map two lists `keys` and `values` into a dictionary
m = re . search ( '\\[(\\w+)\\]' , s )	find the string matches within parenthesis from a string `s` using regex
s . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 )	Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`
list3 = [ ( a + b ) for a , b in zip ( list1 , list2 ) ]	append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`
[ ord ( c ) for c in s . decode ( 'hex' ) ]	converting hex string `s` to its integer representations
print ( sorted ( student_tuples , key = lambda t : ( - t [ 2 ] , t [ 0 ] ) ) )	sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending
[ y for x in range ( 3 ) for y in [ x , x ] ]	get list of duplicated elements in range of 3
txt = open ( 'file.txt' ) . read ( )	read the contents of the file 'file.txt' into `txt`
myList [ : ] = [ ( x / myInt ) for x in myList ]	divide each element in list `myList` by integer `myInt`
df . replace ( ' ' , '_' , regex = True )	replace white spaces in dataframe `df` with '_'
datetime . datetime . combine ( my_date , datetime . time . min )	convert date `my_date` to datetime
tst2 = str ( tst )	convert tuple `tst` to string `tst2`
time . ctime ( os . path . getmtime ( file ) )	get modified time of file `file`
time . ctime ( os . path . getctime ( file ) )	get creation time of file `file`
t = os . path . getmtime ( filename )	get modification time of file `filename`
os . path . getmtime ( path )	get modification time of file `path`
print ( ( 'last modified: %s'   % time . ctime ( os . path . getmtime ( file ) ) ) )	get modified time of file `file`
print ( ( 'created: %s'   % time . ctime ( os . path . getctime ( file ) ) ) )	get the creation time of file `file`
return os . path . getctime ( path_to_file )	get the creation time of file `path_to_file`
os . system ( 'TASKKILL /F /IM firefox.exe' )	execute os command ''TASKKILL /F /IM firefox.exe''
"return ( x . group ( 0 ) for x in re . finditer ( ""[A-Za-z']+"" , string ) )"	split string `string` on whitespaces using a generator
""""" "", "" """" . join ( [ '%.2f' ] * len ( x ) )"	Unpack each value in list `x` to its placeholder '%' in string '%.2f'
print ( re . match ( '(\\d+(\\.\\d+)?)' , '3434.35353' ) . group ( 1 ) )	match regex pattern '(\\d+(\\.\\d+)?)' with string '3434.35353'
df [ 'name' ] . str . replace ( '\\(.*\\)' , '' )	replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`
result = [ x for x in list_a if x [ 0 ] in list_b ]	create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`
print ( [ '' . join ( a ) for a in combinations ( [ 'hel' , 'lo' , 'bye' ] , 2 ) ] )	generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`
[ x for x in li if 'ar'   in x [ 2 ] ]	get a list of items form nested list `li` where third element of each item contains string 'ar'
unsorted_list . sort ( key = lambda x : x [ 3 ] )	Sort lists in the list `unsorted_list` by the element at index 3 of each list
logging . info ( 'test' )	Log message 'test' on the root logger.
fig . add_subplot ( 1 , 1 , 1 )	Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib
sorted ( list ( x . items ( ) ) , key = operator . itemgetter ( 1 ) )	Sort dictionary `x` by value in ascending order
sorted ( dict1 , key = dict1 . get )	Sort dictionary `dict1` by value in ascending order
sorted ( d , key = d . get , reverse = True )	Sort dictionary `d` by value in descending order
sorted ( list ( d . items ( ) ) , key = ( lambda x : x [ 1 ] ) )	Sort dictionary `d` by value in ascending order
np . einsum ( 'ijk,ikl->ijl' , A , B )	elementwise product of 3d arrays `A` and `B`
print ( 'I have: {0.price}' . format ( card ) )	Print a string `card` with string formatting
f . write ( '# Data for Class A\n' )	Write a comment `# Data for Class A\n` to a file object `f`
a = a [ -1 : ] + a [ : -1 ]	move the last item in list `a` to the beginning
datetimevariable . strftime ( '%Y-%m-%d' )	Parse DateTime object `datetimevariable` using format '%Y-%m-%d'
mixed . replace ( '\r\n' , '\n' ) . replace ( '\r' , '\n' )	Normalize line ends in a string 'mixed'
os . path . expanduser ( '~user' )	find the real user home directory using python
T = [ L [ i ] for i in Idx ]	index a list `L` with another list `Idx`
words = open ( 'myfile' ) . read ( ) . split ( )	get a list of words `words` of a file 'myfile'
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in data ]	Get a list of lists with summing the values of the second element from each list of lists `data`
[ sum ( [ x [ 1 ] for x in i ] ) for i in data ]	summing the second item in a list of lists of lists
Article . objects . annotate ( like_count = Count ( 'likes' ) ) . order_by ( '-like_count' )	sort objects in `Articles` in descending order of counts of `likes`
today = datetime . datetime . utcnow ( ) . date ( )	return a DateTime object with the current UTC date
[ ( a * b ) for a , b in zip ( lista , listb ) ]	create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`
re . findall ( '(?::|;|=)(?:-)?(?:\\)|\\(|D|P)' , s )	fetch smilies matching regex pattern '(?::|;|=)(?:-)?(?:\\)|\\(|D|P)' in string `s`
re . match ( '[:;][)(](?![)(])' , str )	match the pattern '[:;][)(](?![)(])' to the string `str`
json_string = json . dumps ( [ ob . __dict__ for ob in list_name ] )	convert a list of objects `list_name` to json string `json_string`
listofzeros = [ 0 ] * n	create a list `listofzeros` of `n` zeros
stringnamehere . decode ( 'utf-8' , 'ignore' )	decode the string 'stringnamehere'  to UTF-8
re . findall ( '((?:A|B|C)D)' , 'BDE' )	Match regex pattern '((?:A|B|C)D)' on string 'BDE'
dic . setdefault ( key , [ ] ) . append ( value )	Create a key `key` if it does not exist in dict `dic` and append element `value` to value.
a [ np . argmin ( a [ : , ( 1 ) ] ) ]	Get the value of the minimum element in the second column of array `a`
a . update ( b )	extend dictionary `a` with key/value pairs of dictionary `b`
[ { k : v for k , v in d . items ( ) if k != 'mykey1' }  for d in mylist ]	removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`
numpy . random . random ( ( 3 , 3 ) )	create 3 by 3 matrix of random numbers
df [ 'C' ] = df [ 'A' ] + df [ 'B' ]	make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B'
[ value for key , value in list ( programs . items ( ) ) if 'new york'   in key . lower ( ) ]	create a list of values from the dictionary `programs` that have a key with a case insensitive match to 'new york'
sys . path . append ( '/path/to/main_folder' )	append a path `/path/to/main_folder` in system path
re . findall ( '\\d+(?=[^[]+$)' , s )	get all digits in a string `s` after a '[' character
pickle . load ( open ( 'afile' , 'rb' ) )	python pickle/unpickle a list to/from a file 'afile'
ex . groupby ( level = 'A' ) . agg ( lambda x : x . index . get_level_values ( 1 ) . nunique ( ) )	count unique index values in column 'A' in pandas dataframe `ex`
pd . concat ( map ( pd . DataFrame , iter ( d . values ( ) ) ) , keys = list ( d . keys ( ) ) ) . stack ( ) . unstack ( 0 )	Create a pandas dataframe of values from a dictionary `d` which contains dictionaries of dictionaries
sum ( 1 for i , j in zip ( a , b ) if i != j )	find out the number of non-matched elements at the same index of list `a` and list `b`
d = { ( a . lower ( ) , b ) : v for ( a , b ) , v in list ( d . items ( ) ) }	make all keys lowercase in dictionary `d`
list_ . sort ( key = lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] )	sort list `list_` based on first element of each tuple and by the length of the second element of each tuple
s . strip ( )	trim whitespace in string `s`
s = s . lstrip ( )	trim whitespace (including tabs) in `s` on the left side
s = s . rstrip ( )	trim whitespace (including tabs) in `s` on the right side
s = s . strip ( ' \t\n\r' )	trim characters ' \t\n\r' in `s`
print ( re . sub ( '[\\s+]' , '' , s ) )	trim whitespaces (including tabs) in string `s`
Task . objects . exclude ( prerequisites__status__in = [ 'A' , 'P' , 'F' ] )	In Django, filter `Task.objects` based on all entities in ['A', 'P', 'F']
root . configure ( background = 'black' )	Change background color in Tkinter
numpy . array ( [ ( key , val ) for key , val in result . items ( ) ] , dtype )	convert dict `result` to numpy structured array
pd . concat ( [ df_1 , df_2 . sort_values ( 'y' ) ] )	Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y'
re . sub ( '(.*)</div>' , '\\1</bad>' , s )	replace the last occurence of an expression '</div>' with '</bad>' in a string `s`
print ( max ( d , key = lambda x : ( d [ x ] [ 'salary' ] , d [ x ] [ 'bonus' ] ) ) )	get the maximum of 'salary' and 'bonus' values in a dictionary
Book . objects . filter ( author__id = 1 ) . filter ( author__id = 2 )	Filter Django objects by `author` with ids `1` and `2`
re . compile ( 'XYZ' , re . IGNORECASE ) . split ( 'fooxyzbar' )	split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'
[ sum ( map ( int , s ) ) for s in example . split ( ) ]	get list of sums of neighboring integers in string `example`
[ i for i in y if y [ i ] == 1 ]	Get all the keys from dictionary `y` whose value is `1`
c . decode ( 'unicode_escape' )	converting byte string `c` in unicode string
pd . melt ( x , id_vars = [ 'farm' , 'fruit' ] , var_name = 'year' , value_name = 'value' )	unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`
default_data [ 'item3' ] = 3	"add key ""item3"" and value ""3"" to dictionary `default_data `"
default_data . update ( { 'item3' : 3 , } )	"add key ""item3"" and value ""3"" to dictionary `default_data `"
default_data . update ( { 'item4' : 4 , 'item5' : 5 , } )	add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`
l [ : 3 ] + l [ -3 : ]	Get the first and last 3 elements of list `l`
df = df . reset_index ( drop = True )	reset index to default in dataframe `df`
[ a [ x ] . append ( b [ x ] ) for x in range ( 3 ) ]	For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a.
os . path . realpath ( path )	get canonical path of the filename `path`
set ( L [ 0 ] . f . items ( ) ) . issubset ( set ( a3 . f . items ( ) ) )	check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`
zip ( * np . where ( a == 1 ) )	find all the indexes in a Numpy 2D array where the value is 1
df . columns = df . columns . get_level_values ( 0 )	Collapse hierarchical column index to level 0 in dataframe `df`
x = scipy . matrix ( [ 1 , 2 , 3 ] ) . transpose ( )	create a matrix from a list `[1, 2, 3]`
text = re . sub ( '(\\bget\\b)' , '\\1@' , text )	add character '@' after word 'get' in string `text`
np . array ( [ np . arange ( 3 ) , np . arange ( 2 , -1 , -1 ) , np . ones ( ( 3 , ) ) ] ) . min ( axis = 0 )	get a numpy array that contains the element wise minimum of three 3x1 arrays
df [ 'new_col' ] = list ( range ( 1 , len ( df ) + 1 ) )	add a column 'new_col' to dataframe `df` for index in range
os . environ [ 'DEBUSSY' ] = '1'	set environment variable 'DEBUSSY' equal to 1
print ( os . environ [ 'DEBUSSY' ] )	Get a environment variable `DEBUSSY`
os . environ [ 'DEBUSSY' ] = '1'	set environment variable 'DEBUSSY' to '1'
b . update ( d )	update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`
df [ 'b' ]	get all the values in column `b` from pandas data frame `df`
ebar = plt . errorbar ( x , y , yerr = err , ecolor = 'y' )	make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)
results += [ each for each in os . listdir ( folder ) if each . endswith ( '.c' ) ]	find all files with extension '.c' in directory `folder`
print ( '\xc2\xa3' . decode ( 'utf8' ) + '1' )	add unicode string '1' to UTF-8 decoded string '\xc2\xa3'
re . sub ( '(?<=[a-z])([A-Z])' , '-\\1' , s ) . lower ( )	lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string `s` with eplacement '-\\1'
""""" ""{0:.3g}"" """" . format ( num )"	format a string `num` using string formatting
numpy . append ( a , a [ 0 ] )	append the first element of array `a` to array `a`
df . ix [ : , ( df . loc [ 0 ] == 38.15 ) ] . columns	return the column for value 38.15 in dataframe `df`
df2 [ 'revenue' ] = df2 . CET . map ( df1 . set_index ( 'date' ) [ 'revenue' ] )	merge 2 dataframes `df1` and `df2` with same values in a column 'revenue' with and index 'date'
json_data = json . loads ( json_string )	load a json data `json_string` into variable `json_data`
math . cos ( math . radians ( 1 ) )	convert radians 1 to degrees
sum ( isinstance ( x , int ) for x in a )	count the number of integers in list `a`
'used\u200b' . replace ( '\u200b' , '*' )	replacing  '\u200b' with '*' in a string  using regular expressions
threading . Thread ( target = SudsMove ) . start ( )	run function 'SudsMove' simultaneously
sum ( i * i for i in l )	sum of squares values in a list `l`
sum ( map ( lambda x : x * x , l ) )	calculate the sum of the squares of each value in list `l`
d = dict ( ( ( key , value ) for ( key , value ) in iterable ) )	Create a dictionary `d` from list `iterable`
d = { key : value for ( key , value ) in iterable }	Create a dictionary `d` from list `iterable`
d = { k : v for ( k , v ) in iterable }	Create a dictionary `d` from list of key value pairs `iterable`
df . round ( { 'Alabama_exp' : 2 , 'Credit_exp' : 3 } )	round off entries in dataframe `df` column `Alabama_exp` to two decimal places, and entries in column `Credit_exp` to three decimal places
p . setopt ( pycurl . WRITEFUNCTION , lambda x : None )	Make function `WRITEFUNCTION` output nothing in curl `p`
print ( random . choice ( words ) )	return a random word from a word list 'words'
max ( d , key = lambda x : d [ x ] [ 'count' ] )	Find a max value of the key `count` in a nested dictionary `d`
[ ( int ( x ) if x else 0 ) for x in data . split ( ',' ) ]	get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings
""""" "","" """" . join ( x or '0'   for x in s . split ( ',' ) )"	split string `s` into a list of strings based on ',' then replace empty strings with zero
re . compile ( '$^' )	regular expression match nothing
re . compile ( '.\\A|.\\A*|.\\A+' )	regular expression syntax for not to match anything
re . compile ( 'a^' )	create a regular expression object with a pattern that will match nothing
df . columns [ df . max ( ) >  0 ]	drop all columns in dataframe `df` that holds a maximum value bigger than 0
yourdatetime . date ( ) == datetime . today ( ) . date ( )	check if date `yourdatetime` is equal to today's date
print ( '\x1b[1m'   + 'Hello' )	print bold text 'Hello'
re . sub ( '.{20}(.mkv)' , '\\1' , 'unique12345678901234567890.mkv' )	remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'
[ 'a' , 'c' , 'b' , 'obj' ]	Define a list with string values `['a', 'c', 'b', 'obj']`
""""" "" "" """" . join ( mystring . split ( ) )"	substitute multiple whitespace with single whitespace in string `mystring`
print ( '{:.100f}' . format ( 2.345 e -67 ) )	print a floating point number 2.345e-67 without any truncation
( 'key1'   in dict )	Check if key 'key1' in `dict`
( 'a'   in d )	Check if key 'a' in `d`
( 'c'   in d )	Check if key 'c' in `d`
Blog . objects . filter ( pk__in = [ 1 , 4 , 7 ] )	create a django query for a list of values `1, 4, 7`
f = open ( 'test/test.pdf' , 'rb' )	read a binary file 'test/test.pdf'
format ( 12345678.46 , ',' ) . replace ( ',' , ' ' ) . replace ( '.' , ',' )	insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46
pd . merge ( frame_1 , frame_2 , left_on = 'county_ID' , right_on = 'countyid' )	Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`
np . isnan ( a ) . sum ( ) / np . prod ( a . shape )	calculate ratio of sparsity in a numpy array `a`
sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 2 ] , reverse = True )	reverse sort items in default dictionary `cityPopulation` by the third item in each key's list of values
sorted ( list ( u . items ( ) ) , key = lambda v : v [ 1 ] )	Sort dictionary `u` in ascending order based on second elements of its values
sorted ( list ( d . items ( ) ) , key = lambda k_v : k_v [ 1 ] , reverse = True )	reverse sort dictionary `d` based on its values
sorted ( list ( d . items ( ) ) , key = lambda k_v : k_v [ 1 ] )	sorting a defaultdict `d` by value
f = open ( os . path . join ( __location__ , 'bundled-resource.jpg' ) )	open a file 'bundled-resource.jpg' in the same directory as a python script
f = open ( 'words.txt' , 'rU' )	open the file 'words.txt' in 'rU' mode
{ k : ( float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 }	divide the values with same keys of two dictionary `d1` and `d2`
{ k : ( d2 [ k ] / d1 [ k ] ) for k in list ( d1 . keys ( ) ) &  d2 }	divide the value for each key `k` in dict `d2` by the value for the same key `k` in dict `d1`
dict ( ( k , float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 )	divide values associated with each key in dictionary `d1` from values associated with the same key in dictionary `d2`
df . to_csv ( filename , date_format = '%Y%m%d' )	write dataframe `df` to csv file `filename` with dates formatted as yearmonthday  `%Y%m%d`
my_dict . pop ( 'key' , None )	remove a key 'key' from a dictionary `my_dict`
b = np . where ( np . isnan ( a ) , 0 , a )	replace NaN values in array `a` with zeros
subprocess . call ( 'start command -flags arguments' , shell = True )	subprocess run command 'start command -flags arguments' through the shell
subprocess . call ( 'command -flags arguments &' , shell = True )	run command 'command -flags arguments &' on command line tools as separate processes
f = urllib . request . urlopen ( url , urllib . parse . unquote ( urllib . parse . urlencode ( params ) ) )	replace percent-encoded code in request `f` to their single-character equivalent
""""" ""    xyz     "" """" . rstrip ( )"	"remove white spaces from the end of string ""    xyz     """
urllib . parse . quote ( s . encode ( 'utf-8' ) )	Replace special characters in utf-8 encoded string `s` using the %xx escape
np . array ( map ( int , '100110' ) )	Create an array containing the conversion of string '100110' into separate elements
print ( np . array ( list ( mystr ) , dtype = int ) )	convert a string 'mystr' to numpy array of integer values
img = cv2 . imread ( 'messi5.jpg' , 0 )	convert an rgb image 'messi5.jpg' into grayscale `img`
lst . sort ( key = lambda x : x [ 2 ] , reverse = True )	sort list `lst` in descending order based on the second item of each tuple in it
subprocess . call ( 'grep -r PASSED *.log | sort -u | wc -l' , shell = True )	execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it
len ( my_text ) - len ( my_text . rstrip ( '?' ) )	count the number of trailing question marks in string `my_text`
df [ df . columns [ 1 : ] ] . replace ( '[\\$,]' , '' , regex = True ) . astype ( float )	remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats
df1 . merge ( df2 , how = 'left' , on = 'word' )	Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`
print ( '' . join ( '' . join ( i ) for i in zip ( a2 , a1 ) ) + a [ -1 ] if len ( a ) % 2 else '' )	switch positions of each two adjacent characters in string `a`
root . attributes ( '-topmost' , True )	make a window `root` jump to the front
root . lift ( )	make a window `root` jump to the front
hex ( int ( '' . join ( [ str ( int ( b ) ) for b in walls ] ) , 2 ) )	Convert list of booleans `walls` into a hex string
hex ( sum ( b << i for i , b in enumerate ( reversed ( walls ) ) ) )	convert the sum of list `walls` into a hex presentation
print ( ( 'Total score for' , name , 'is' , score ) )	print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call.
print ( 'Total score for {} is {}' . format ( name , score ) )	print multiple arguments 'name' and 'score'.
print ( 'Total score for %s is %s  '   % ( name , score ) )	print a string using multiple strings `name` and `score`
print ( ( 'Total score for' , name , 'is' , score ) )	print string including multiple variables `name` and `score`
url ( '^$' , TemplateView . as_view ( template_name = 'your_template.html' ) )	serve a static html page 'your_template.html' at the root of a django project
df [ df [ 'A' ] . isin ( [ 3 , 6 ] ) ]	use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'
system ( '/path/to/my/venv/bin/python myscript.py' )	execute python code `myscript.py` in a virtualenv `/path/to/my/venv` from matlab
Employees . objects . values_list ( 'eng_name' , flat = True )	django return a QuerySet list containing the values of field 'eng_name' in model `Employees`
re . findall ( '\\d|\\d,\\d\\)' , '6,7)' )	find all digits in string '6,7)' and put them to a list
input ( 'Press Enter to continue...' )	prompt string 'Press Enter to continue...' to the console
""""" ""ABC"" """" . encode ( 'hex' )"	"print string ""ABC"" as hex literal"
db . Doc . update ( { '_id' : b [ '_id' ] } , { '$set' : { 'geolocCountry' : myGeolocCountry }} )	insert a new field 'geolocCountry' on an existing document  'b' using pymongo
re . sub ( 'l+' , 'l' , 'lollll' )	Write a regex statement to match 'lol' to 'lolllll'.
rows = soup . findAll ( 'tr' ) [ 4 : : 5 ]	BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element
plt . gca ( ) . invert_xaxis ( )	reverse all x-axis points in pyplot
plt . gca ( ) . invert_yaxis ( )	reverse y-axis in pyplot
pd . concat ( [ GOOG , AAPL ] , keys = [ 'GOOG' , 'AAPL' ] , axis = 1 )	stack two dataframes next to each other in pandas
return HttpResponse ( json . dumps ( response_data ) , content_type = 'application/json' )	create a json response `response_data`
myString . decode ( 'string_escape' )	decode escape sequences in string `myString`
hashlib . md5 ( open ( 'filename.exe' , 'rb' ) . read ( ) ) . hexdigest ( )	calculate the md5 checksum of a file named  'filename.exe'
[ k for k , v in d . items ( ) if v == desired_value ]	Find all keys from a dictionary `d` whose values are `desired_value`
{ k for d in LoD for k in list ( d . keys ( ) ) }	create a set containing all keys' names from dictionary `LoD`
set ( [ i for s in [ list ( d . keys ( ) ) for d in LoD ] for i in s ] )	create a set containing all keys names from list of dictionaries `LoD`
[ i for s in [ list ( d . keys ( ) ) for d in LoD ] for i in s ]	extract all keys from a list of dictionaries `LoD`
keys , values = zip ( * list ( d . items ( ) ) )	unpack keys and values of a dictionary `d` into two lists
int ( Decimal ( s ) )	convert a string `s` containing a decimal to an integer
numpy . in1d ( b , a ) . all ( )	check if array `b` contains all elements of array `a`
numpy . array ( [ ( x in a ) for x in b ] )	numpy:  check if array 'a' contains all the numbers in array 'b'.
networkx . draw_networkx_labels ( G , pos , labels )	Draw node labels `labels` on networkx graph `G ` at position `pos`
y = [ row [ : ] for row in x ]	make a row-by-row copy `y` of array `x`
X = numpy . loadtxt ( 'somefile.csv' , delimiter = ',' )	Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values
matching = [ s for s in some_list if 'abc'   in s ]	get a list of items from the list `some_list` that contain string 'abc'
df . to_csv ( 'mydf.tsv' , sep = '\t' )	export a pandas data frame `df` to a file `mydf.tsv` and retain the indices
s . rsplit ( ',' , 1 )	split a string `s` on last delimiter
all ( isinstance ( x , int ) for x in lst )	Check if all elements in list `lst` are tupples of long and int
all ( isinstance ( x , int ) for x in lst )	check if all elements in a list 'lst' are the same type 'int'
line . strip ( )	strip a string `line` of all carriage returns and newlines
driver . execute_script ( 'window.scrollTo(0, Y)' )	scroll to the bottom of a web page using selenium webdriver
driver . execute_script ( 'window.scrollTo(0, document.body.scrollHeight);' )	scroll a to the bottom of a web page using selenium webdriver
datetime . datetime . combine ( dateobject , datetime . time ( ) )	convert Date object `dateobject` into a DateTime object
print ( any ( x in a for x in b ) )	check if any item from list `b` is in list `a`
scipy . misc . imsave ( 'outfile.jpg' , image_array )	save a numpy array `image_array` as an image 'outfile.jpg'
item = re . sub ( ' ?\\([^)]+\\)' , '' , item )	Remove anything in parenthesis from string `item` with a regex
item = re . sub ( ' ?\\(\\w+\\)' , '' , item )	Remove word characters in parenthesis from string `item` with a regex
item = re . sub ( ' \\(\\w+\\)' , '' , item )	Remove all data inside parenthesis in string `item`
len ( set ( list1 ) . intersection ( list2 ) ) >  0	check if any elements in one list `list1` are in another list `list2`
i = int ( s , 16 )	convert hex string `s` to decimal
int ( '0xff' , 16 )	"convert hex string ""0xff"" to decimal"
int ( 'FFFF' , 16 )	"convert hex string ""FFFF"" to decimal"
ast . literal_eval ( '0xdeadbeef' )	convert hex string '0xdeadbeef' to decimal
int ( 'deadbeef' , 16 )	convert hex string 'deadbeef' to decimal
os . system ( 'screencapture screen.png' )	take screenshot 'screen.png' on mac os x
driver . set_window_size ( 1400 , 1000 )	Set a window size to `1400, 1000` using selenium webdriver
unicodedata . normalize ( 'NFKD' , 'm\xfasica' ) . encode ( 'ascii' , 'ignore' )	replace non-ascii chars from a unicode string u'm\xfasica'
pandas . concat ( [ df1 , df2 ] ) . drop_duplicates ( ) . reset_index ( drop = True )	concatenate dataframe `df1` with `df2` whilst removing duplicates
a = numpy . fromfile ( 'filename' , dtype = numpy . float32 )	Construct an array with data type float32 `a` from data in binary file 'filename'
subprocess . call ( 'mv /home/somedir/subdir/* somedir/' , shell = True )	execute a mv command `mv /home/somedir/subdir/* somedir/` in subprocess
print ( '\u25b2' . encode ( 'utf-8' ) )	print a character that has unicode value `\u25b2`
difflib . SequenceMatcher ( None , file1 . read ( ) , file2 . read ( ) )	compare contents  at filehandles `file1` and `file2` using difflib
dict ( ( k , int ( v ) ) for k , v in ( e . split ( ' - ' ) for e in s . split ( ',' ) ) )	Create a dictionary from string `e` separated by `-` and `,`
all ( i in ( 1 , 2 , 3 , 4 , 5 ) for i in ( 1 , 6 ) )	check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`
df [ 'Date' ] . map ( lambda t : t . date ( ) ) . unique ( )	extract unique dates from time series 'Date' in dataframe `df`
""""" ""{:>7s}"" """" . format ( mystring )"	right align string `mystring` with a width of 7
open ( 'ComponentReport-DJI.xls' , 'rb' ) . read ( 200 )	read an excel file 'ComponentReport-DJI.xls'
df . sort_values ( [ 'b' , 'c' ] , ascending = [ True , False ] , inplace = True )	sort dataframe `df` based on column 'b' in ascending and column 'c' in descending
df . sort_values ( [ 'a' , 'b' ] , ascending = [ True , False ] )	sort dataframe `df` based on column 'a' in ascending and column 'b' in descending
df1 . sort ( [ 'a' , 'b' ] , ascending = [ True , False ] , inplace = True )	sort a pandas data frame with column `a` in ascending and `b` in descending order
df . sort ( [ 'a' , 'b' ] , ascending = [ True , False ] )	sort a pandas data frame by column `a` in ascending, and by column `b` in descending order
redirect ( 'Home.views.index' )	django redirect to view 'Home.views.index'
[ x for x in a if x not in [ 2 , 3 , 7 ] ]	remove all values within one list `[2, 3, 7]` from another list `a`
out = '' . join ( c for c in asking if c not in ( '!' , '.' , ':' ) )	remove the punctuation '!', '.', ':' from a string `asking`
soup . find ( 'meta' , { 'name' : 'City' } ) [ 'content' ]	BeautifulSoup get value associated with attribute 'content' where attribute 'name' is equal to 'City' in tag 'meta' in HTML parsed string `soup`
urllib . parse . unquote ( '%0a' )	unquote a urlencoded unicode string '%0a'
urllib . parse . unquote ( url ) . decode ( 'utf8' )	decode url `url` from UTF-16 code to UTF-8 code
del lst [ : ]	empty a list `lst`
del lst1 [ : ]	empty a list `lst`
lst [ : ] = [ ]	empty a list `lst`
alist [ : ] = [ ]	empty a list `alist`
s . reset_index ( 0 ) . reset_index ( drop = True )	reset index of series `s`
elems [ 0 ] . getText ( ) . encode ( 'utf-8' )	convert unicode text from list `elems` with index 0 to normal text 'utf-8'
[ ( y - x ) for x , y in zip ( L , L [ 1 : ] ) ]	create a list containing the subtraction of each item in list `L` from the item prior to it
print ( re . search ( '\\bLOG_ADDR\\s+(\\S+)' , line ) . group ( 1 ) )	get value in string `line` matched by regex pattern '\\bLOG_ADDR\\s+(\\S+)'
globals ( ) . update ( importlib . import_module ( 'some.package' ) . __dict__ )	import all classes from module `some.package`
""""" """" """" . join ( [ 'a' , 'b' , 'c' , 'd' ] )"	convert a list of characters `['a', 'b', 'c', 'd']` into a string
url . split ( '&' )	"Slice `url` with '&' as delimiter  to get  ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234"" from url ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"""
od = collections . OrderedDict ( sorted ( d . items ( ) ) )	sort dictionary `d` by key
OrderedDict ( sorted ( list ( d . items ( ) ) , key = ( lambda t : t [ 0 ] ) ) )	sort a dictionary `d` by key
response = requests . put ( url , data = json . dumps ( data ) , headers = headers )	Execute a put request to the url `url`
re . sub ( '[\\W_]+' , '' , s )	replace everything that is not an alphabet or a digit with '' in 's'.
[ ( x + y ) for x in l2 for y in l1 ]	create a list of aggregation of each element from list `l2` to all elements of list `l1`
dict ( [ x . split ( '=' ) for x in s . split ( ) ] )	convert string `x'  to dictionary splitted by `=` using list comprehension
my_list . pop ( 2 )	remove index 2 element from a list `my_list`
s = s . replace ( 'M' , '' )	"Delete character ""M"" from a string `s` using python"
sum ( x * y for x , y in zip ( a , b ) )	get the sum of the products of each pair of corresponding elements in lists `a` and `b`
list ( x * y for x , y in list ( zip ( a , b ) ) )	sum the products of each two elements at the same index of list `a` and list `b`
sum ( i * j for i , j in zip ( a , b ) )	sum the product of each two items at the same index of list `a` and list `b`
sum ( x * y for x , y in list ( zip ( a , b ) ) )	sum the product of elements of two lists named `a` and `b`
f . write ( open ( 'xxx.mp4' , 'rb' ) . read ( ) )	write the content of file `xxx.mp4` to file `f`
new_list = [ ( x + 1 ) for x in my_list ]	Add 1 to each integer value in list `my_list`
[ x for x in j if x >= 5 ]	get a list of all items in list `j` with values greater than `5`
plt . plot ( list ( range ( 10 ) ) , '--bo' )	set color marker styles `--bo` in matplotlib
plt . plot ( list ( range ( 10 ) ) , linestyle = '--' , marker = 'o' , color = 'b' )	set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)
[ i . split ( '\t' , 1 ) [ 0 ] for i in l ]	split strings in list `l` on the first occurring tab `\t` and enter only the first resulting substring in a new list
myList = [ i . split ( '\t' ) [ 0 ] for i in myList ]	Split each string in list `myList` on the tab character
sum ( your_list )	Sum numbers in a list 'your_list'
ForkedPdb ( ) . set_trace ( )	attach debugger pdb to class `ForkedPdb`
result = { k : d2 . get ( v ) for k , v in list ( d1 . items ( ) ) }	Compose keys from dictionary `d1` with respective values in dictionary `d2`
datetime . datetime . now ( ) + datetime . timedelta ( days = 1 , hours = 3 )	add one day and three hours to the present time from datetime.now()
dict ( ( v , k ) for k , v in my_dict . items ( ) )	switch keys and values in a dictionary `my_dict`
print ( sorted ( L , key = lambda x : int ( x . split ( '.' ) [ 2 ] ) ) )	sort a list `L` by number after second '.'
any ( d [ 'name' ] == 'Test'   for d in label )	"Check if the value of the key ""name"" is ""Test"" in a list of dictionaries `label`"
a [ : ] = [ x for x in a if x != [ 1 , 1 ] ]	remove all instances of [1, 1] from list `a`
[ x for x in a if x != [ 1 , 1 ] ]	remove all instances of `[1, 1]` from a list `a`
b = { a [ i ] : a [ i + 1 ] for i in range ( 0 , len ( a ) , 2 ) }	convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value
len ( set ( a ) ) == len ( a )	check whether elements in list `a` appear only once
print ( hashlib . md5 ( open ( full_path , 'rb' ) . read ( ) ) . hexdigest ( ) )	Generate MD5 checksum of file in the path `full_path` in hashlib
""""" """" """" . join ( x . upper ( ) if random . randint ( 0 , 1 ) else x for x in s )"	randomly switch letters' cases in string `s`
"os . system ( 'GREPDB=""echo 123""; /bin/bash -c ""$GREPDB""' )"	force bash interpreter '/bin/bash' to be used instead of shell
"os . system ( '/bin/bash -c ""echo hello world""' )"	Run a command `echo hello world` in bash instead of shell
getattr ( test , a_string )	access the class variable `a_string` from a class object `test`
Image . open ( 'pathToFile' ) . show ( )	Display a image file `pathToFile`
files . sort ( key = file_number )	sort list `files` based on variable `file_number`
sentence . replace ( ' ' , '' )	remove all whitespace in a string `sentence`
sentence . strip ( )	remove whitespace in string `sentence` from beginning and end
sentence = re . sub ( '\\s+' , '' , sentence , flags = re . UNICODE )	remove all whitespaces in string `sentence`
sentence = '' . join ( sentence . split ( ) )	remove all whitespaces in a string `sentence`
sum ( my_counter . values ( ) )	sum all the values in a counter variable `my_counter`
np . sqrt ( ( ( A - B ) ** 2 ) . sum ( -1 ) )	find the euclidean distance between two 3-d arrays `A` and `B`
levels = [ {} , {} , {} ]	create list `levels` containing 3 empty dictionaries
weekly = [ sum ( visitors [ x : x + 7 ] ) for x in range ( 0 , len ( daily ) , 7 ) ]	find the sums of length 7 subsets of a list `daily`
del d [ key ]	Delete an element `key` from a dictionary `d`
{ i : a [ i ] for i in a if ( i != 0 ) }	Delete an element 0 from a dictionary `a`
lol . pop ( 'hello' )	"Delete an element ""hello"" from a dictionary `lol`"
del r [ key ]	Delete an element with key `key` dictionary `r`
np . linalg . solve ( np . dot ( a . T , a ) , np . dot ( a . T , b ) )	solve for the least squares' solution of matrices `a` and `b`
pd . concat ( [ df . drop ( 'b' , axis = 1 ) , pd . DataFrame ( df [ 'b' ] . tolist ( ) ) ] , axis = 1 )	split dictionary/list inside a pandas column 'b' into separate columns in dataframe `df`
[ { 'content' : x [ 'content' ] . lower ( ) }  for x in messages ]	lowercase string values with key 'content' in a list of dictionaries `messages`
""""" "" "" """" . join ( my_list )"	convert a list `my_list` into string with values separated by spaces
re . sub ( '(http://\\S+|\\S*[^\\w\\s]\\S*)' , '' , a )	replace each occurrence of the pattern '(http://\\S+|\\S*[^\\w\\s]\\S*)' within `a` with ''
str ( n ) == str ( n ) [ : : -1 ]	check if string `str` is palindrome
ftp . storbinary ( 'STOR myfile.txt' , open ( 'myfile.txt' , 'rb' ) )	upload binary file `myfile.txt` with ftplib
re . sub ( '.*I' , 'I' , stri )	remove all characters from string `stri` upto character 'I'
int ( '1,000,000' . replace ( ',' , '' ) )	parse a comma-separated string number '1,000,000' into int
pd . merge ( df1 , df2 , left_index = True , right_index = True , how = 'outer' )	combine  dataframe `df1` and dataframe `df2` by index number
all ( dict . values ( ) )	check if all boolean values in a python dictionary `dict` are true
df . c_contofficeID . str . replace ( '^12(?=.{4}$)' , '' )	use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`
L [ : : ( -1 ) ]	reverse a list `L`
reversed ( array )	reverse a list `array`
L . reverse ( )	reverse a list `L`
list ( reversed ( array ) )	reverse a list `array`
[ tup [ 0 ] for tup in A ]	get first element of each tuple in list `A`
newcontents = contents . replace ( 'a' , 'e' ) . replace ( 's' , '3' )	replace character 'a' with character 'e' and character 's' with character '3' in file `contents`
json . dumps ( [ dict ( list ( row . items ( ) ) ) for row in rs ] )	serialise SqlAlchemy RowProxy object `row` to a json object
config_file = os . path . expanduser ( '~/foo.ini' )	get file '~/foo.ini'
request . params . getall ( 'c' )	get multiple parameters with same name from a url in pylons
np . corrcoef ( x )	Convert array `x` into a correlation matrix
print ( max ( 1 , 2 , 3 ) )	Find the greatest number in set `(1, 2, 3)`
self . request . get ( 'var_name' )	Retrieve parameter 'var_name' from a GET request.
a [ 'x' ] . apply ( lambda x , y : x + y , args = ( 100 , ) )	"Add 100 to each element of column ""x"" in dataframe `a`"
User . objects . order_by ( '-pet__age' ) [ : 10 ]	Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'
time . sleep ( 5 )	"delay for ""5"" seconds"
time . sleep ( 60 )	make a 60 seconds time delay
sleep ( 0.1 )	make a 0.1 seconds time delay
time . sleep ( 60 )	make a 60 seconds time delay
time . sleep ( 0.1 )	make a 0.1 seconds time delay
[ x for x in my_list if not any ( c . isdigit ( ) for c in x ) ]	From a list of strings `my_list`, remove the values that contains numbers.
df [ 'state' ] . apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] )	get the middle two characters of a string 'state' in a pandas dataframe `df`
plt . grid ( True )	draw a grid line on every tick of plot `plt`
sorted ( lst , key = lambda x : ( -1 * c [ x ] , lst . index ( x ) ) )	sort list `lst` based on each element's number of occurrences
[ max ( len ( str ( x ) ) for x in line ) for line in zip ( * foo ) ]	Get the value with the maximum length in each column in array `foo`
df . Country . value_counts ( ) . reset_index ( name = 'Sum of Accidents' )	get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`
data . set_index ( 'Date' ) . diff ( )	calculat the difference between each row and the row previous to it in dataframe `data`
a . update ( [ 3 , 4 ] )	append values `[3, 4]` to a set `a`
a [ 1 : : 2 ] = -1	set every two-stride far element to -1 starting from second element in array `a`
df . groupby ( 'group' ) [ 'value' ] . rank ( ascending = False )	Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`
datetime . strptime ( 'Tue, 22 Nov 2011 06:00:00 GMT' , '%a, %d %b %Y %H:%M:%S %Z' )	convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime
struct . pack ( '<I' , 1633837924 )	Convert a binary value '1633837924' to string
list . append ( 'foo' )	append string `foo` to list `list`
list . insert ( 0 , 'foo' )	insert string `foo` at position `0` of list `list`
theset = set ( k . lower ( ) for k in thedict )	convert keys in dictionary `thedict` into case insensitive
""""" ""{s:{c}^{n}}"" """" . format ( s = 'dog' , n = 5 , c = 'x' )"	pad 'dog' up to a length of 5 characters with 'x'
isinstance ( s , str )	check if type of variable `s` is a string
isinstance ( s , str )	check if type of a variable `s` is string
dict ( pair for d in L for pair in list ( d . items ( ) ) )	Convert list of dictionaries `L` into a flat dictionary
{ k : v for d in L for k , v in list ( d . items ( ) ) }	merge a list of dictionaries in list `L` into a single dict
df . sort_values ( [ 'Peak' , 'Weeks' ] , ascending = [ True , False ] , inplace = True )	sort a pandas data frame according to column `Peak` in ascending and `Weeks` in descending order
df . sort ( [ 'Peak' , 'Weeks' ] , ascending = [ True , False ] , inplace = True )	sort a pandas data frame by column `Peak` in ascending and `Weeks` in descending order
"eval ( ""print('Hello')"" )"	"run the code contained in string ""print('Hello')"""
[ { 'A' : 1 , 'C' : 4 , 'B' : 2 , 'D' : 4 } , { 'A' : 1 , 'C' : 4 , 'B' : 1 , 'D' : 5 } ]	creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
list ( itertools . product ( * a ) )	get all possible combination of items from 2-dimensional list `a`
df . groupby ( [ 'Country' , 'Item_Code' ] ) [ [ 'Y1961' , 'Y1962' , 'Y1963' ] ] . sum ( )	"Get sum of values of columns  'Y1961', 'Y1962', 'Y1963' after group by on columns ""Country"" and ""Item_code"" in dataframe `df`."
done = [ ( el , x ) for el in [ a , b , c , d ] ]	create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples
x = x [ numpy . logical_not ( numpy . isnan ( x ) ) ]	remove Nan values from array `x`
os . path . join ( * x . split ( os . path . sep ) [ 2 : ] )	remove first directory from path '/First/Second/Third/Fourth/Fifth'
line = line . replace ( ';' , ':' )	Replace `;` with `:` in a string `line`
subprocess . call ( 'tar c my_dir | md5sum' , shell = True )	call bash command 'tar c my_dir | md5sum' with pipe
""""" ""437c2123"" """" . decode ( 'hex' )"	Convert a hex string `437c2123 ` according to ascii value.
[ k for k , v in User . _fields . items ( ) if v . required ]	Get a list of all fields in class `User` that are marked `required`
df = df . ix [ : , 0 : 2 ]	remove column by index `[:, 0:2]` in dataframe `df`
x = map ( int , x . split ( ) )	change a string of integers `x` separated by spaces to a list of int
x = [ int ( i ) for i in x . split ( ) ]	convert a string of integers `x` separated by spaces to a list of integers
"driver . find_element_by_css_selector ( ""input[onclick*='1 Bedroom Deluxe']"" )"	"find element by css selector ""input[onclick*='1 Bedroom Deluxe']"""
webbrowser . open ( 'file:///my_pdf.pdf' )	display a pdf  file that has been downloaded as `my_pdf.pdf`
result = result . replace ( '\\', ' ' )	replace backslashes in string `result` with empty string ''
result . replace ( '\\', ' ' )	remove backslashes from string `result`
df . replace ( '-' , 'NaN' )	"replace value '-' in any column of pandas dataframe to ""NaN"""
datetime . datetime . now ( ) . date ( )	convert datetime object to date object in python
[ elem . tag for elem in a . iter ( ) ]	get all sub-elements of an element `a` in an elementtree
[ elem . tag for elem in a . iter ( ) if elem is not a ]	get all sub-elements of an element tree `a` excluding the root element
sorted ( lst , key = lambda x : x [ 'language' ] != 'en' )	move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en'
all ( value == 0 for value in list ( your_dict . values ( ) ) )	check if all values of a dictionary `your_dict` are zero `0`
df . pivot_table ( 'Y' , rows = 'X' , cols = 'X2' )	produce a pivot table as dataframe using column 'Y' in datafram `df` to form the axes of the resulting dataframe
M . sum ( axis = 0 ) . sum ( axis = 0 )	get a sum of 4d array `M`
time . mktime ( dt . timetuple ( ) ) + dt . microsecond / 1000000.0	Convert a datetime object `dt` to microtime
df [ ( x <= df [ 'columnX' ] ) &  ( df [ 'columnX' ] <= y ) ]	select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`
sorted ( L , key = itemgetter ( 2 ) )	sort a list of lists `L` by index 2 of the inner list
l . sort ( key = ( lambda x : x [ 2 ] ) )	sort a list of lists `l` by index 2 of the inner list
sorted ( l , key = ( lambda x : x [ 2 ] ) )	sort list `l` by index 2 of the item
sorted_list = sorted ( list_to_sort , key = itemgetter ( 2 , 0 , 1 ) )	sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list
np . argwhere ( np . all ( arr == [ [ 0 , 3 ] , [ 3 , 0 ] ] , axis = ( 1 , 2 ) ) )	find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'
data . loc [ : , ( list ( itertools . product ( [ 'one' , 'two' ] , [ 'a' , 'c' ] ) ) ) ]	From multiIndexed dataframe `data` select columns `a` and `c` within each higher order column `one` and `two`
data . loc [ : , ( [ ( 'one' , 'a' ) , ( 'one' , 'c' ) , ( 'two' , 'a' ) , ( 'two' , 'c' ) ] ) ]	select only specific columns 'a' and 'c' from a dataframe 'data' with multiindex columns
hashtags = re . findall ( '#(\\w+)' , str1 , re . UNICODE )	match a sharp, followed by letters (including accent characters) in string `str1` using a regex
os . rename ( src , dst )	Rename file from `src` to `dst`
print ( etree . tostring ( some_tag . find ( 'strong' ) ) )	Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml
json . dumps ( { str ( k ) : v for k , v in data . items ( ) } )	Serialize dictionary `data` and its keys to a JSON formatted string
soup = BeautifulSoup ( response . read ( ) . decode ( 'utf-8' ) )	parse UTF-8 encoded HTML response `response` to BeautifulSoup object
os . remove ( filename )	delete file `filename`
min ( [ x for x in num_list if x >  2 ] )	get the next value greatest to `2` from a list of numbers `num_list`
df [ 'prod_type' ] = 'responsive'	Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'
sorted ( lst , key = lambda x : ( x <  0 , x ) )	sort list `lst` with positives coming before negatives with values sorted respectively
six_months = ( date . today ( ) + relativedelta ( months = ( + 6 ) ) )	get the date 6 months from today
( date ( 2010 , 12 , 31 ) + relativedelta ( months = ( + 1 ) ) )	get the date 1 month from today
( date ( 2010 , 12 , 31 ) + relativedelta ( months = ( + 2 ) ) )	get the date 2 months from today
print ( ( datetime . date . today ( ) + datetime . timedelta ( ( ( 6 * 365 ) / 12 ) ) ) . isoformat ( ) )	calculate the date six months from the current date
sorted ( list ( things . keys ( ) ) , key = lambda x : things [ x ] [ 'weight' ] , reverse = True )	get a list of keys of dictionary `things` sorted by the value of nested dictionary key 'weight'
a [ np . arange ( len ( a ) ) != 3 ]	get all the values from a numpy array `a` excluding index 3
[ x for x in lst if fn ( x ) != 0 ]	delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`
df . set_index ( 'month' )	set dataframe `df` index using column 'month'
arr = [ line . split ( ',' ) for line in open ( './urls-eu.csv' ) ]	read lines from a csv file `./urls-eu.csv` into a list of lists `arr`
[ i for i in range ( 100 ) if i >  10 if i <  20 ]	list comprehension that produces integers between 11 and 19
""""" """" """" . join ( [ c for c in strs if c . isdigit ( ) ] )"	Get only digits from a string `strs`
re . split ( '\\t+' , yas . rstrip ( '\t' ) )	split a string `yas` based on tab '\t'
( a . T * b ) . T	scalar multiply matrix `a` by `b`
'test string\n' . rstrip ( )	"remove trailing newline in string ""test string\n"""
'test string \n\n' . rstrip ( '\n' )	remove trailing newline in string 'test string \n\n'
s . strip ( )	remove newline in string `s`
s . rstrip ( )	remove newline in string `s` on the right side
s . lstrip ( )	remove newline in string `s` on the left side
'Mac EOL\r' . rstrip ( '\r\n' )	remove newline in string 'Mac EOL\r'
'Windows EOL\r\n' . rstrip ( '\r\n' )	remove newline in string 'Windows EOL\r\n' on the right side
'Unix EOL\n' . rstrip ( '\r\n' )	remove newline in string 'Unix EOL\n' on the right side
'Hello\n\n\n' . rstrip ( '\n' )	"remove newline in string ""Hello\n\n\n"" on the right side"
re . findall ( '.{,16}\\b' , text )	split string `text` into chunks of 16 characters each
[ [ X [ i ] [ j ] for j in range ( len ( X [ i ] ) ) ] for i in range ( len ( X ) ) ]	Get a list comprehension in list of lists `X`
'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0' . encode ( 'latin-1' )	convert unicode string '\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0' to byte string
df . groupby ( ( df . a == 'B' ) . shift ( 1 ) . fillna ( 0 ) . cumsum ( ) )	split dataframe `df` where the value of column `a` is equal to 'B'
urllib . request . urlretrieve ( 'http://search.twitter.com/search.json?q=hi' , 'hi.json' )	save json output from a url ‘http://search.twitter.com/search.json?q=hi’ to file ‘hi.json’ in Python 2
numpy . where ( ( x == 0 ) ) [ 0 ]	Find indices of elements equal to zero from numpy array `x`
sys . stdout . flush ( )	flush output of python print
str ( i )	convert `i` to string
a . __str__ ( )	convert `a` to string
str ( a )	convert `a` to string
L . sort ( key = operator . itemgetter ( 1 ) )	sort list of lists `L` by the second item in each list
print ( str ( count ) + '    '   + str ( conv ) )	Print variable `count` and variable `conv` with space string '    ' in between
df . fillna ( method = 'ffill' , inplace = True )	change NaN values in dataframe `df` using preceding values in the frame
text . config ( state = DISABLED )	change the state of the Tkinter `Text` widget to read only i.e. `disabled`
sum ( map ( ord , string ) )	python sum of ascii values of all characters in a string `string`
list ( itertools . product ( * arrays ) )	apply itertools.product to elements of a list of lists `arrays`
'{:,}' . format ( value )	print number `value` as thousands separators
df [ df . Col1 . isin ( [ 'men' , 'rocks' , 'mountains' ] ) ]	get rows of dataframe `df` where column `Col1` has values `['men', 'rocks', 'mountains']`
[ x [ 1 ] for x in L ]	get the value at index 1 for each tuple in the list of tuples `L`
'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438' . split ( )	"split unicode string ""раз два три"" into words"
MyModel . objects . extra ( select = { 'length' : 'Length(name)' } ) . order_by ( 'length' )	sort query set by number of characters in a field `length` in django model `MyModel`
min ( dicts , key = lambda x : ( abs ( 1.77672955975 - x [ 'ratio' ] ) , - x [ 'pixels' ] ) )	get a dictionary in list `dicts` which key 'ratio' is closer to a global value 1.77672955975
m [ ~ m . mask ]	get the non-masked values of array `m`
re . findall ( '\\b[A-Z]' , formula )	Find all words containing letters between A and Z in string `formula`
matrix = [ ( [ 0 ] * 5 ) for i in range ( 5 ) ]	create a list `matrix` containing 5 lists, each of 5 items  all set to 0
np . vstack ( np . meshgrid ( x_p , y_p , z_p ) ) . reshape ( 3 , -1 ) . T	creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`
arr [ arr != 0 ] . min ( )	find the minimum value in a numpy array `arr` excluding 0
"browser . find_elements_by_xpath ( ""//*[@type='submit']/@value"" ) . text"	"get the text of multiple elements found by xpath ""//*[@type='submit']/@value"""
"browser . find_elements_by_xpath ( ""//*[@type='submit']"" ) . get_attribute ( 'value' )"	find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium
pd . DataFrame ( df . columns [ np . argsort ( df . values ) ] , df . index , np . unique ( df . values ) )	Sort the values of the dataframe `df` and align the columns accordingly based on the obtained indices after np.argsort.
datetime . datetime . today ( ) . strftime ( '%Y-%m-%d' )	Getting today's date in YYYY-MM-DD
urllib . parse . quote_plus ( 'string_of_characters_like_these:$#@=?%^Q^$' )	urlencode a querystring 'string_of_characters_like_these:$#@=?%^Q^$' in python 2
print ( ' ' . join ( sorted ( d , key = lambda k : len ( d [ k ] ) , reverse = True ) ) )	sort a dictionary `d` by length of its values and print as string
map ( list , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )	convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists
[ ( x , y ) for x , y in zip ( myList , myList [ 1 : ] ) if y == 9 ]	create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'
driver . get ( 'http://www.google.com.br' )	navigate to webpage given by url `http://www.python.org` using Selenium
b = a . decode ( 'utf8' ) [ : : -1 ] . encode ( 'utf8' )	reverse a UTF-8 string 'a'
dparser . parse ( 'monkey 2010-07-32 love banana' , fuzzy = True )	extract date from a string 'monkey 2010-07-32 love banana'
dparser . parse ( 'monkey 20/01/1980 love banana' , fuzzy = True )	extract date from a string 'monkey 20/01/1980 love banana'
dparser . parse ( 'monkey 10/01/1980 love banana' , fuzzy = True )	extract date from a string `monkey 10/01/1980 love banana`
dict ( map ( lambda s : s . split ( ':' ) , [ 'A:1' , 'B:2' , 'C:3' , 'D:4' ] ) )	Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary
re . search ( '[a-zA-Z]' , the_string )	check if string `the_string` contains any upper or lower-case ASCII letters
DataFrame ( { 'count' : df1 . groupby ( [ 'Name' , 'City' ] ) . size ( ) } ) . reset_index ( )	convert a pandas `df1` groupby object to dataframe
re . sub ( '[^0-9]' , '' , 'sdkjh987978asd098as0980a98sd' )	remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `
[ y for y in a if y not in b ]	get items from list `a` that don't appear in list `b`
df . groupby ( 'ID' ) . head ( 4 )	extract the first four rows of the column `ID` from a pandas dataframe `df`
zip ( * l )	Unzip a list of tuples `l` into a list of lists
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a' , 'b' , 'c' , 'd' ] ) )	combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a' , 'b' , 'c' , 'd' ] ) )	combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary
request . url	retrieve the path from a Flask request
somestring . replace ( '\\r' , '' )	replace carriage return in string `somestring` with empty string ''
simplejson . dumps ( dict ( [ ( '%d,%d'   % k , v ) for k , v in list ( d . items ( ) ) ] ) )	serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'
datetime . strptime ( 'Jun 1 2005  1:33PM' , '%b %d %Y %I:%M%p' )	"parse string ""Jun 1 2005  1:33PM"" into datetime by format ""%b %d %Y %I:%M%p"""
parser . parse ( 'Aug 28 1999 12:00AM' )	"parse string ""Aug 28 1999 12:00AM"" into datetime"
os . path . split ( os . path . abspath ( existGDBPath ) )	Get absolute folder path and filename for file `existGDBPath `
os . path . dirname ( os . path . abspath ( existGDBPath ) )	extract folder path from file path
requests . post ( 'http://httpbin.org/post' , json = { 'test' : 'cheers' } )	Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`
a = [ x for x in a if x [ 'link' ] not in b ]	remove dictionary from list `a` if the value associated with its key 'link' is in list `b`
{{ request . args . get ( 'a' ) }}	get a request parameter `a` in jinja2
list ( range ( 11 , 17 ) )	create a list of integers between 2 values `11` and `17`
data_df [ 'grade' ] = data_df [ 'grade' ] . astype ( float ) . astype ( int )	Change data type of data in column 'grade' of dataframe `data_df` into float and then to int
max ( alkaline_earth_values , key = lambda x : x [ 1 ] )	Find the list in a list of lists `alkaline_earth_values` with the max value of the second element.
your_string . strip ( '0' )	remove leading and trailing zeros in the string 'your_Strip'
list ( permutations ( list ( range ( 9 ) ) , 2 ) )	generate a list of all unique pairs of integers in `range(9)`
re . compile ( '^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)' , re . MULTILINE )	create a regular expression that matches the pattern '^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)' over multiple lines of text
re . compile ( '^(.+)\\n((?:\\n.+)+)' , re . MULTILINE )	"regular expression ""^(.+)\\n((?:\\n.+)+)"" matching a multiline block of text"
call ( [ 'path/to/python' , 'test2.py' , 'neededArgumetGoHere' ] )	Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess
a . sort ( key = operator . itemgetter ( 2 , 3 ) )	sort a multidimensional list `a` by second and third column
final_choices = ( ( another_choice , ) + my_choices )	Add a tuple with value `another_choice` to a tuple `my_choices`
final_choices = ( ( another_choice , ) + my_choices )	Add a tuple with value `another_choice` to a tuple `my_choices`
os . getcwd ( )	find the current directory
os . path . realpath ( __file__ )	find the current directory
os . path . dirname ( path )	get the directory name of `path`
os . path . realpath ( path )	get the canonical path of file `path`
dir_path = os . path . dirname ( os . path . realpath ( __file__ ) )	Find name of current directory
cwd = os . getcwd ( )	Find current directory
full_path = os . path . realpath ( __file__ )	Find the full path of current directory
arr [ arr [ : , ( 2 ) ] . argsort ( ) ]	sort array `arr` in ascending order by values of the 3rd column
numpy . sort ( arr , axis = 0 )	sort rows of numpy matrix `arr` in ascending order according to all column values
re . split ( '[ .]' , 'a b.c' )	"split string 'a b.c' on space "" "" and dot character ""."""
shutil . copy ( 'file.txt' , 'file2.txt' )	copy the content of file 'file.txt' to file 'file2.txt'
print ( '' . join ( choice ( ascii_uppercase ) for i in range ( 12 ) ) )	generate random upper-case ascii string of 12 characters length
[ '' . join ( seq ) for seq in zip ( lst , lst [ 1 : ] ) ]	merge the elements in a list `lst` sequentially
data . rename ( columns = { 'gdp' : 'log(gdp)' } , inplace = True )	rename column 'gdp' in dataframe `data` to 'log(gdp)'
print ( soup . get_text ( ) )	convert a beautiful soup html `soup` to text
sorted ( li , key = operator . itemgetter ( 1 ) , reverse = True )	Sort list `li` in descending order based on the second element of each list inside list`li`
data [ 'sex' ] . replace ( [ 0 , 1 ] , [ 'Female' , 'Male' ] , inplace = True )	replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`
re . split ( '\\W+' , 'Words, words, words.' )	split string 'Words, words, words.' on punctuation
re . match ( '(.*?[.?!](?:\\s+.*?[.?!]){0,1})' , phrase ) . group ( 1 )	Extract first two substrings in string `phrase` that end in `.`, `?` or `!`
print ( [ a for a , b in re . findall ( '((\\w)\\2*)' , s ) ] )	split string `s` into strings of repeating elements
print ( ' ' . join ( OrderedDict . fromkeys ( s ) ) )	Create new string with unique characters from `s` seperated by ' '
print ( ' ' . join ( set ( s ) ) )	create a set from string `s` to remove duplicate characters
[ x for x in file . namelist ( ) if x . endswith ( '/' ) ]	list folders in zip file 'file' that ends with '/'
input_string . count ( 'Hello' )	find the count of a word 'Hello' in a string `input_string`
print ( '.' . join ( [ item [ 0 ] for item in data ] ) )	reduce the first element of list of strings `data` to a string, separated by '.'
fh1 . seek ( 2 )	Move the cursor of file pointer `fh1` at the end of the file.
print ( zip ( my_list [ 0 : : 2 ] , my_list [ 1 : : 2 ] ) )	convert a flat list into a list of tuples of every two items in the list, in order
my_new_list = zip ( my_list [ 0 : : 2 ] , my_list [ 1 : : 2 ] )	group a list of ints into a list of tuples of each 2 elements
sys . setdefaultencoding ( 'utf8' )	set the default encoding to 'utf-8'
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d %H:%M:%S' )	Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S'
print ( re . findall ( '[\\u0600-\\u06FF]+' , my_string ) )	retrieve arabic texts from string `my_string`
df . groupby ( df . index . map ( lambda t : t . minute ) )	group dataframe `df` based on minute interval
dict [ 'Apple' ] [ 'American' ]	access value associated with key 'American' of key 'Apple' from dictionary `dict`
df2 . dropna ( subset = [ 'three' , 'four' , 'five' ] , how = 'all' )	remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`
a . insert ( 0 , k )	insert a list `k` at the front of list `a`
a = a [ : n ] + k + a [ n : ]	insert elements of list `k` into list `a` at position `n`
np . flatnonzero ( x ) . mean ( )	calculate the mean of the nonzero values' indices of dataframe `df`
df [ 'just_date' ] = df [ 'dates' ] . dt . date	get date from dataframe `df` column 'dates' to column 'just_date'
[ x for x in a if x not in b ]	remove elements in list `b` from list `a`
[ '' . join ( x ) for x in a ]	join elements of each tuple in list `a` into one string
list ( map ( '' . join , a ) )	join items of each tuple in list of tuples `a` into a list of strings
re . split ( '\n\\s*\n' , s )	match blank lines in `s` with regular expressions
""""" ""{0:,.2f}"" """" . format ( 24322.34 )"	Convert float 24322.34 to comma-separated string
my_function ( ** data )	pass dictionary items `data` as keyword arguments in function `my_function`
sum ( ( 1 for line in open ( 'myfile.txt' ) ) )	get line count of file 'myfile.txt'
print ( round ( 1123.456789 , -1 ) )	round 1123.456789 to be an integer
[ x for y , x in sorted ( zip ( Y , X ) ) ]	sort list `X` based on values from another list `Y`
[ x for y , x in sorted ( zip ( Y , X ) ) ]	sorting list 'X' based on values from another list 'Y'
datetime . date ( 2010 , 6 , 16 ) . isocalendar ( ) [ 1 ]	get equivalent week number from a date `2010/6/16` using  isocalendar
df . iloc [ : , ( np . r_ [ 1 : 10 , ( 15 ) , ( 17 ) , 50 : 100 ] ) ]	select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`
df . groupby ( 'dummy' ) . agg ( { 'returns' : [ np . mean , np . sum ] } )	apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`
s . lower ( )	convert string `s` to lowercase
s . decode ( 'utf-8' ) . lower ( )	convert utf-8 string `s` to lowercase
urlfetch . fetch ( url , deadline = 10 * 60 )	handle the `urlfetch_errors ` exception for imaplib request to url `url`
print ( my_string [ 0 : 100 ] )	output first 100 characters in a string `my_string`
legend ( numpoints = 1 )	make matplotlib plot legend put marker in legend only once
dict ( ( x , set ( y ) &  set ( d1 . get ( x , ( ) ) ) ) for x , y in d2 . items ( ) )	get set intersection between dictionaries `d1` and `d2`
numpy . loadtxt ( open ( 'test.csv' , 'rb' ) , delimiter = ',' , skiprows = 1 )	convert csv file 'test.csv' into two-dimensional matrix
Sample . objects . filter ( date__range = [ '2011-01-01' , '2011-01-31' ] )	filter the objects in django model 'Sample' between date range `2011-01-01` and `2011-01-31`
Sample . objects . filter ( date__year = '2011' , date__month = '01' )	filter objects month wise in django model `Sample` for year `2011`
d [ 'dict3' ] = { 'spam' : 5 , 'ham' : 6 }	create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'
numpy . apply_along_axis ( numpy . linalg . norm , 1 , a )	apply `numpy.linalg.norm` to each row of a matrix `a`
dict ( ( k , v ) for d in dicts for k , v in list ( d . items ( ) ) )	merge dictionaries form array `dicts` in a single expression
print ( 'your string' . decode ( 'string_escape' ) )	Convert escaped utf string to utf string in `your string`
sum ( [ True , True , False , False , False , True ] )	counting the number of true booleans in a python list `[True, True, False, False, False, True]`
fig . set_size_inches ( w , h , forward = True )	set the size of figure `fig` in inches to width height of `w`, `h`
'hello there %(5)s'   % { '5' : 'you' }	format string with dict `{'5': 'you'}` with integer keys
map ( int , example_string . split ( ',' ) )	Convert a string of numbers `example_string` separated by `,` into a list of integers
[ int ( s ) for s in example_string . split ( ',' ) ]	Convert a string of numbers 'example_string' separated by comma into a list of numbers
x = [ i [ 0 ] for i in x ]	Flatten list `x`
y = map ( operator . itemgetter ( 0 ) , x )	convert list `x` into a flat list
y = [ i [ 0 ] for i in x ]	get a list `y` of the first element of every tuple in list `x`
results = [ item [ 'value' ] for item in test_data ]	extract all the values of a specific key named 'values' from a list of dictionaries
datetime . datetime . now ( ) . isoformat ( )	get current datetime in ISO format
datetime . datetime . utcnow ( ) . isoformat ( )	get UTC datetime in ISO format
df . apply ( ' ' . join , axis = 0 )	Merge all columns in dataframe `df` into one column
pd . DataFrame ( df . values - df2 . values , columns = df . columns )	pandas subtract a row from dataframe `df2` from dataframe `df`
print ( open ( 'myfile.txt' , 'U' ) . read ( ) )	read file 'myfile.txt' using universal newline mode 'U'
print ( line . decode ( 'utf-16-le' ) . split ( ) )	print line `line` from text file with 'utf-16-le' format
file = io . open ( 'data.txt' , 'r' , encoding = 'utf-16-le' )	open a text file `data.txt` in io module with encoding `utf-16-le`
s1 = pd . merge ( df1 , df2 , how = 'inner' , on = [ 'user_id' ] )	Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes
foo . decode ( 'utf8' ) . encode ( 'utf8' )	check if string `foo` is UTF-8 encoded
a . shape	get the dimensions of numpy array `a`
N . shape ( a )	get the dimensions of numpy array `a`
N . shape ( a )	get the dimensions of array `a`
a . shape	get the dimensions of numpy array `a`
[ i for i , v in enumerate ( L ) if v [ 0 ] == 53 ]	get the indices of tuples in list of tuples `L` where the first value is 53
struct . unpack ( '<L' , 'y\xcc\xa6\xbb' ) [ 0 ]	convert string of bytes `y\xcc\xa6\xbb` into an int
arr [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ]	get the first row, second column; second row, first column, and first row third column values of numpy array `arr`
list ( powerset ( 'abcd' ) )	create a list with permutations of string 'abcd'
s in [ 'true' , '1' , 't' , 'y' , 'yes' , 'yeah' , 'yup' , 'certainly' , 'uh-huh' ]	Convert string to boolean from defined set of strings
urllib . parse . quote ( 'http://spam.com/go/' )	replace special characters in url 'http://spam.com/go/' using the '%xx' escape
plt . savefig ( 'test.svg' )	Save plot `plt` as svg file 'test.svg'
len ( myArray )	count the number of elements in array `myArray`
sys . path . insert ( 0 , './path/to/your/modules/' )	insert directory './path/to/your/modules/' to current directory
cursor . execute ( 'INSERT OR REPLACE INTO master.table1 SELECT * FROM table1' )	"Insert records in bulk from ""table1"" of ""master"" DB to ""table1"" of  sqlite3 `cursor` object"
re . match ( '[a-zA-Z][\\w-]*\\Z' , 'A\n' )	Match regex '[a-zA-Z][\\w-]*\\Z' on string 'A\n'
re . match ( '[a-zA-Z][\\w-]*$' , '!A_B' )	match regex '[a-zA-Z][\\w-]*$' on string '!A_B'
int ( 'deadbeef' , 16 )	"Convert hex string ""deadbeef"" to integer"
int ( 'a' , 16 )	"Convert hex string ""a"" to integer"
int ( '0xa' , 16 )	"Convert hex string ""0xa"" to integer"
int ( s , 16 )	Convert hex string `s` to integer
int ( hexString , 16 )	Convert hex string `hexString` to int
"print ( 'Value is ""{}""' . format ( value ) )"	Print a string `value` with string formatting
{{ tags |  join ( ' ' ) }}	Jinja join elements of array `tags` with space string ' '
help ( 'modules' )	get a list of locally installed Python modules
[ [ [ x [ 0 ] ] for x in listD [ i ] ] for i in range ( len ( listD ) ) ]	Get only first element in each of the innermost of the multidimensional list `listD`
sorted ( s , key = str . upper )	Sort a string `s` in lexicographic order
sorted ( sorted ( s ) , key = str . upper )	sort string `s` in lexicographic order
sorted ( s , key = str . lower )	get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first
pd . merge ( df1 , df2 , on = [ 'A' , 'B' , 'C' , 'D' ] , how = 'inner' )	find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'.
dict ( ( v , k ) for k , v in map . items ( ) )	Reverse key-value pairs in a dictionary `map`
s . decode ( 'unicode_escape' )	decode unicode string `s` into a readable unicode literal
[ int ( i ) for i in str_list ]	convert list of strings `str_list` into list of integers
map ( int , [ '1' , '2' , '3' ] )	convert a list with string `['1', '2', '3']` into list with integers
list ( map ( int , [ '1' , '2' , '3' ] ) )	convert list with str into list with int
soup . find_all ( 'a' , href = re . compile ( 'http://www\\.iwashere\\.com/' ) )	find all anchor tags in html `soup` whose url begins with `http://www.iwashere.com`
soup . find_all ( 'a' , href = re . compile ( '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))' ) )	find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'
subprocess . call ( [ 'java' , '-jar' , 'Blender.jar' ] )	execute a jar file 'Blender.jar' using subprocess
cursor . execute ( 'INSERT INTO table (`column1`) VALUES (%s)' , ( value , ) )	insert row into mysql database with column 'column1' set to the value `value`
url = re . sub ( '\\.com$' , '' , url )	"remove a substring "".com"" from the end of string `url`"
print ( url . replace ( '.com' , '' ) )	"remove a substring "".com"" from the end of string `url`"
print ( ', ,' . join ( [ str ( i [ 0 ] ) for i in mytuple ] ) )	print each first value from a list of tuples `mytuple` with string formatting
max ( min ( my_value , max_value ) , min_value )	clamping floating number `my_value` to be between `min_value` and `max_value`
re . findall ( '\\w+|[^\\w\\s]' , text , re . UNICODE )	split a unicode string `text` into a list of words and punctuation characters with a regex
result = db . engine . execute ( '<sql here>' )	execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app
sys . exit ( 0 )	quit program
""""" """" """" . join ( c for c in my_string if c . isdigit ( ) )"	get digits in string `my_string`
re . split ( ' +' , str1 )	split string `str1` on one or more spaces with a regular expression
getattr ( getattr ( myobject , 'id' , None ) , 'number' , None )	Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr
{ i : ( i * 2 ) for i in range ( 10 ) }	convert generator object to a dictionary
dict ( ( i , i * 2 ) for i in range ( 10 ) )	convert generator object to a dictionary
plt . cla ( )	Matplotlib clear the current axes.
total = sum ( float ( item ) for item in s . split ( ',' ) )	split string `s` into float values and write sum to `total`
bin ( ord ( 'P' ) )	Convert ascii value 'P' to binary
print ( my_string . split ( ', ' , 1 ) [ 1 ] )	print a string after a specific substring ', ' in string `my_string `
print ( data [ 'places' ] [ 0 ] [ 'post code' ] )	get value of key `post code` associated with first index of key `places` of dictionary `data`
word = re . sub ( '([aeiou]):(([aeiou][^aeiou]*){3})$' , '\\1\\2' , word )	remove colon character surrounded by vowels letters in string `word`
"json . loads ( '{""foo"": 42, ""bar"": ""baz""}' ) [ 'bar' ]"	extract data field 'bar' from json object
data = json . loads ( array )	Convert JSON array `array` to Python object
data = json . loads ( array )	Convert JSON array `array` to Python object
re . findall ( '#(\\w+)' , 'http://example.org/#comments' )	pars a string 'http://example.org/#comments' to extract hashtags into an array
any ( e in lestring for e in lelist )	do a boolean check if a string `lestring` contains any of the items in list `lelist`
plt . figure ( figsize = ( 3 , 4 ) )	change figure size to 3 by 4 in matplotlib
s . translate ( None , string . punctuation )	Strip punctuation from string `s`
base64 . urlsafe_b64decode ( uenc . encode ( 'ascii' ) )	django urlsafe base64 decode string `uenc` with decryption
len ( dict_test ) + sum ( len ( v ) for v in dict_test . values ( ) )	get the number of all keys in the nested dictionary `dict_list`
hex ( d ) . split ( 'x' ) [ 1 ]	return the conversion of decimal `d` to hex without the '0x' prefix
list ( str ( 123 ) )	create a list containing digits of number 123 as its elements
[ int ( x ) for x in str ( num ) ]	converting integer `num` to list
br . select_form ( nr = 0 )	select a first form with no name in mechanize
json . load ( codecs . open ( 'sample.json' , 'r' , 'utf-8-sig' ) )	Open file 'sample.json' in read mode with encoding of 'utf-8-sig'
json . loads ( open ( 'sample.json' ) . read ( ) . decode ( 'utf-8-sig' ) )	load json file 'sample.json' with utf-8 bom header
server = smtplib . SMTP ( 'smtp.gmail.com' , 587 )	setup a smtp mail server to `smtp.gmail.com` with port `587`
int ( '{:08b}' . format ( n ) [ : : -1 ] , 2 )	revers correlating bits of integer `n`
df . set_index ( [ 'd' ] , append = True )	add column `d` to index of dataframe `df`
list ( d . items ( ) )	get keys and items of dictionary `d`
list ( d . items ( ) )	get keys and items of dictionary `d` as a list
session . query ( Task ) . filter ( Task . time_spent >  timedelta ( hours = 3 ) ) . all ( )	query all data from table `Task` where the value of column `time_spent` is bigger than 3 hours
os . system ( 'msbuild project.sln /p:Configuration=Debug' )	compile Visual Studio project `project.sln` from the command line through python
max ( list ( MyCount . keys ( ) ) , key = int )	get max key in dictionary `MyCount`
os . system ( 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' )	execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from python script
my_function . __name__	get a name of function `my_function` as a string
np . all ( a == a [ ( 0 ) , : ] , axis = 0 )	check if all values in the columns of a numpy matrix `a` are same
sorted ( a , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) )	sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it
sorted ( a , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) , reverse = True )	sort a list of tuples `a` by the sum of second and third element of each tuple
sorted ( lst , key = lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) )	sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple
sorted ( lst , key = lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) , reverse = True )	sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order
del request . session [ 'mykey' ]	clear session key 'mykey'
datetime . datetime . strptime ( '24052010' , '%d%m%Y' ) . date ( )	convert date string '24052010' to date object in format '%d%m%Y'
re . sub ( '[^\\x00-\\x7F]+' , ' ' , text )	Replace non-ASCII characters in string `text` with a single space
myList = [ i for i in range ( 10 ) ]	Get a list `myList` from 1 to 10
[ m [ 0 ] for m in re . compile ( '((.+?)\\2+)' ) . findall ( '44442(2)2(2)44' ) ]	use regex pattern '((.+?)\\2+)' to split string '44442(2)2(2)44'
[ i [ 0 ] for i in re . findall ( '((\\d)(?:[()]*\\2*[()]*)*)' , s ) ]	use regular expression '((\\d)(?:[()]*\\2*[()]*)*)' to split string `s`
fig . subplots_adjust ( wspace = 0 , hspace = 0 )	remove the space between subplots in matplotlib.pyplot
x [ : : -1 ]	Reverse list `x`
csvwriter . writerow ( row )	write a list of strings `row` to csv object `csvwriter`
{{ ( item . date |  date ) : 'Y M d' }}	Jinja2 formate date `item.date` accorto pattern 'Y M d'
re . split ( '(?<=[\\.\\?!]) ' , text )	Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind
re . compile ( '\xe2\x80\x93' )	create a regular expression object with the pattern '\xe2\x80\x93'
variable = [ ]	declare an array `variable`
intarray = array ( 'i' )	declare an array with element 'i'
[ sublist [ : : -1 ] for sublist in to_reverse [ : : -1 ] ]	given list `to_reverse`, reverse the all sublists and the list itself
""""" """" """" . join ( [ 'I ' , '<' , '3s U ' , '&' , ' you luvz me' ] )"	unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`
logging . disable ( logging . CRITICAL )	disable logging while running unit tests in python django
cursor . execute ( 'INSERT INTO index(url) VALUES(%s)' , ( url , ) )	adding url `url` to mysql row
df [ 'DateStr' ] = df [ 'DateObj' ] . dt . strftime ( '%d%m%Y' )	convert column of date objects 'DateObj' in pandas dataframe `df` to strings in new column 'DateStr'
s . split ( '@' ) [ 0 ]	split string `s` by '@' and get the first element
df . query ( 'index < @start_remove or index > @end_remove' )	drop rows of dataframe `df` whose index is smaller than the value of `start_remove` or bigger than the value of`end_remove`
df . loc [ ( df . index <  start_remove ) |  ( df . index >  end_remove ) ]	Drop the rows in pandas timeseries `df` from the row containing index `start_remove` to the row containing index `end_remove`
df . isnull ( ) . sum ( )	Get the number of NaN values in each column of dataframe `df`
df . reset_index ( inplace = True )	reset index of dataframe `df`so that existing index values are transferred into `df`as columns
[ x [ 'value' ] for x in list_of_dicts ]	generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`
np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) . tolist ( )	convert numpy array into python list structure
ast . literal_eval ( '(1,2,3,4)' )	converting string '(1,2,3,4)' to a tuple
dataList . sort ( key = lambda x : x [ 1 ] )	keep a list `dataList` of lists sorted as it is created by second element
list ( map ( list , set ( map ( lambda i : tuple ( i ) , testdata ) ) ) )	remove duplicated items from list of lists `testdata`
[ list ( i ) for i in set ( tuple ( i ) for i in testdata ) ]	uniqueness for list of lists `testdata`
return user . groups . filter ( name = 'Member' ) . exists ( )	in django, check if a user is in a group 'Member'
return user . groups . filter ( name__in = [ 'group1' , 'group2' ] ) . exists ( )	check if a user `user` is in a group from list of groups `['group1', 'group2']`
logging . getLogger ( ) . setLevel ( logging . DEBUG )	Change log level dynamically to 'DEBUG' without restarting the application
""""" """" """" . join ( str ( i ) for i in ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) )"	Concat each values in a tuple `(34.2424, -64.2344, 76.3534, 45.2344)` to get a string
""""" """" """" . join ( [ s [ x : x + 2 ] [ : : -1 ] for x in range ( 0 , len ( s ) , 2 ) ] )"	swap each pair of characters in string `s`
plt . savefig ( 'graph.png' , dpi = 1000 )	save current figure to file 'graph.png' with resolution of 1000 dpi
my_list = [ [ x for x in sublist if x not in to_del ] for sublist in my_list ]	delete items from list `my_list` if the item exist in list `to_dell`
[ item for item in a if 1 in item ]	find all the elements that consists value '1' in a list of tuples 'a'
[ item for item in a if item [ 0 ] == 1 ]	find all elements in a list of tuples `a` where the first element of each tuple equals 1
{ p . id : { 'id' : p . id , 'position' : ind }  for ind , p in enumerate ( p_list ) }	Get the index value in list `p_list` using enumerate in list comprehension
exec ( compile ( open ( 'file.py' ) . read ( ) , 'file.py' , 'exec' ) )	load a file `file.py` into the python console
rows = session . query ( Congress ) . count ( )	SQLAlchemy count the number of rows in table `Congress`
dfs = pd . read_excel ( file_name , sheetname = None )	read excel file `file_name` using pandas
struct . unpack ( 'd' , binascii . unhexlify ( '4081637ef7d0424a' ) )	unpack the binary data represented by the hexadecimal string '4081637ef7d0424a' to a float
a [ tuple ( b ) ]	Get index of numpy array `a` with another numpy array `b`
map ( list , permutations ( [ 2 , 3 , 4 ] ) )	find all possible sequences of elements in a list `[2, 3, 4]`
sorted ( unsorted_list , key = presorted_list . index )	sort a list `unsorted_list` based on another sorted list `presorted_list`
d = pd . DataFrame ( 0 , index = np . arange ( len ( data ) ) , columns = feature_list )	create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`
x . find ( 'World' )	find the index of sub string 'World' in `x`
x . find ( 'Aloha' )	find the index of sub string 'Aloha' in `x`
'sdfasdf' . index ( 'cc' )	find the index of sub string 'cc' in string 'sdfasdf'
'sdfasdf' . index ( 'df' )	find the index of sub string 'df' in string 'sdfasdf'
str . find ( 'a' )	find the index of sub string 'a' in string `str`
str . find ( 'g' )	find the index of sub string 'g' in string `str`
str . find ( 's' , 11 )	find the index of sub string 's' in string `str` starting from index 11
str . find ( 's' , 15 )	find the index of sub string 's' in string `str` starting from index 15
str . find ( 's' , 16 )	find the index of sub string 's' in string `str` starting from index 16
str . find ( 's' , 11 , 14 )	find the index of sub string 's' in string `str` starting from index 11 and ending at index 14
sorted ( d , key = lambda x : datetime . datetime . strptime ( x , '%m-%Y' ) )	sort list of date strings 'd'
re . split ( '\\.\\s' , text )	Get all the sentences from a string `text` using regex
""""" ""foobar"" """" [ : 4 ]"	get all characters in string 'foobar' up to the fourth index
s . rfind ( '&' )	cut a string by delimiter '&'
s [ : s . rfind ( '&' ) ]	cut a string using delimiter '&'
open ( 'test' , 'a+b' ) . write ( 'koko' )	append to file 'test' content 'koko'
print ( [ i for i in re . split ( '([\\d.]+|\\W+)' , 'x+13.5*10x-4e1' ) if i ] )	split string 'x+13.5*10x-4e1' into tokens
re . findall ( '[\u4e00-\u9fff]+' , ipath )	Find all Chinese characters in string `ipath`
s . split ( 's' )	split string `s` by letter 's'
subprocess . Popen ( [ 'rm' , '-r' , 'some.file' ] )	run shell command 'rm -r some.file' in the background
dict ( ( d [ 'name' ] , d ) for d in listofdict )	convert a list of dictionaries `listofdict into a dictionary of dictionaries
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d %H:%M' )	print current date and time in a regular format
time . strftime ( '%Y-%m-%d %H:%M' )	print current date and time in a regular format
re . findall ( '[bcdfghjklmnpqrstvwxyz]+' , 'CONCERTATION' , re . IGNORECASE )	find consecutive consonants in a word `CONCENTRATION` using regex
[ i for i , e in enumerate ( a ) if e != 0 ]	get a list of indices of non zero elements in a list `a`
map ( int , re . findall ( '\\d+' , string1 ) )	get multiple integer values from a string 'string1'
os . path . dirname ( sys . executable )	get the path of Python executable under windows
ax . xaxis . set_label_position ( 'top' )	move an x-axis label to the top of a plot `ax` in matplotlib
ax . xaxis . tick_top ( )	move x-axis to the top of a plot `ax`
ax . xaxis . set_ticks_position ( 'top' )	Move x-axis of the pyplot object `ax` to the top of a plot in matplotlib
datetime . strptime ( '2015/01/01 12:12am' , '%Y/%m/%d %I:%M%p' )	parse string '2015/01/01 12:12am' to DateTime object using format '%Y/%m/%d %I:%M%p'
sys . exit ( 0 )	terminate the script using status value 0
sys . exit ( 'aa! errors!' )	abort the execution of the script using message 'aa! errors!'
sys . exit ( )	abort the execution of a python script
[ max ( abs ( x ) for x in arr [ i : i + 4 ] ) for i in range ( 0 , len ( arr ) , 4 ) ]	find maximum with lookahead = 4 in a list `arr`
os . chdir ( 'c:\\Users\\uname\\desktop\\python' )	set the current working directory to 'c:\\Users\\uname\\desktop\\python'
os . chdir ( path )	set the current working directory to path `path`
no_integers = [ x for x in mylist if not isinstance ( x , int ) ]	get a list `no_integers` of all the items in list `mylist` that are not of type `int`
"tree . xpath ( "".//a[text()='Example']"" ) [ 0 ] . tag"	match contents of an element to 'Example' in xpath (lxml)
""""" "", "" """" . join ( [ ( str ( k ) + ' '   + str ( v ) ) for k , v in list ( a . items ( ) ) ] )"	concatenate key/value pairs in dictionary `a` with string ', ' into a single string
print ( set ( re . sub ( '[\x00-\x7f]' , '' , '\xa3\u20ac\xa3\u20ac' ) ) )	Strip all non-ASCII characters from a unicode string, `\xa3\u20ac\xa3\u20ac`
print ( re . sub ( '[\x00-\x7f]' , '' , '\xa3100 is worth more than \u20ac100' ) )	Get all non-ascii characters in a unicode string `\xa3100 is worth more than \u20ac100`
"ast . literal_eval ( ""{'muffin' : 'lolz', 'foo' : 'kitty'}"" )"	build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`
print ( t . decode ( 'unicode_escape' ) )	Print string `t` with proper unicode representations
print ( str . encode ( 'cp1252' ) . decode ( 'utf-8' ) . encode ( 'cp1252' ) . decode ( 'utf-8' ) )	Normalize string `str` from 'cp1252' code to 'utf-8' code
zip ( list_a , list_b )	merge lists `list_a` and `list_b` into a list of tuples
list ( zip ( a , b ) )	merge lists `a` and `a` into a list of tuples
df . set_index ( 'id' ) . to_dict ( )	convert pandas DataFrame `df` to a dictionary using `id` field as the key
df . set_index ( 'id' ) [ 'value' ] . to_dict ( )	convert pandas dataframe `df` with fields 'id', 'value' to dictionary
re . sub ( '\\([^)]*\\)' , '' , filename )	remove parentheses and text within it in string `filename`
""""" ""a b"" """" . replace ( ' ' , '' ) . isalpha ( )"	Check if string 'a b' only contains letters and spaces
[ ( x + y ) for x , y in zip ( first , second ) ]	sum each element `x` in list `first` with element `y` at the same index in list `second`.
sorted ( list ( a_dict . items ( ) ) , key = lambda item : item [ 1 ] [ 1 ] )	sort a python dictionary `a_dict` by element `1` of the value
sorted ( list ( range ( len ( a ) ) ) , key = lambda i : a [ i ] ) [ -2 : ]	get index of the biggest 2 values of a list `a`
zip ( * sorted ( enumerate ( a ) , key = operator . itemgetter ( 1 ) ) ) [ 0 ] [ -2 : ]	get indexes of the largest `2` values from a list `a` using itemgetter
sorted ( list ( range ( len ( a ) ) ) , key = lambda i : a [ i ] , reverse = True ) [ : 2 ]	get the indexes of the largest `2` values from a list of integers `a`
list ( x . keys ( ) ) . index ( 'c' )	get index of key 'c' in dictionary `x`
print ( '{0:+d}' . format ( score ) )	Print +1 using format '{0:+d}'
[ k for k , g in itertools . groupby ( [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] ) ]	remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`
[ int ( x ) for x in '0,1,2' . split ( ',' ) ]	convert the string '0,1,2' to a list of integers
dict ( [ ( 'A' , 1 ) , ( 'B' , 2 ) , ( 'C' , 3 ) ] )	convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary
np . savetxt ( 'test.txt' , x )	save numpy array `x` into text file 'test.txt'
direct_output = subprocess . check_output ( 'ls' , shell = True )	store the output of command 'ls' in variable `direct_output`
df [ df . columns - [ 'T1_V6' ] ]	get all column name of dataframe `df` except for column 'T1_V6'
( ( 25 <  a ) &  ( a <  100 ) ) . sum ( )	get count of values in numpy array `a` that are between values `25` and `100`
date . today ( ) . strftime ( '%A' )	Get day name from a datetime object
{{ car . date_of_manufacture |  datetime }}	Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`
{{ car . date_of_manufacture . strftime ( '%Y-%m-%d' ) }}	Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d'
[ item for sublist in l for item in sublist ]	make a flat list from list of lists `sublist`
list ( itertools . chain ( * list2d ) )	make a flat list from list of lists `list2d`
list ( itertools . chain . from_iterable ( list2d ) )	make a flat list from list of lists `list2d`
ord ( 'a' )	convert ascii value 'a' to int
re . sub ( '(?m)^[^\\S\\n]+' , '' , '  a\n b\n c\nd  e' )	replace white spaces in string '  a\n b\n c\nd  e' with empty string ''
re . sub ( '(?m)^\\s+' , '' , 'a\n b\n c' )	remove white spaces from all the lines using a regular expression in string 'a\n b\n c'
a , b , c = [ 1 , 2 , 3 ]	destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`
[ list ( v ) for k , v in itertools . groupby ( mylist , key = lambda x : x [ : 5 ] ) ]	split list `mylist` into a list of lists whose elements have the same first five characters
line = re . sub ( '\\(+as .*?\\) ' , '' , line )	remove all instances of parenthesesis containing text beginning with `as ` from string `line`
print ( line . rstrip ( '\n' ) )	skip the newline while printing `line`
df . index . values . tolist ( )	get index values of pandas dataframe `df` as list
[ i for i , v in enumerate ( a ) if v >  4 ]	create a list containing the indices of elements greater than 4 in list `a`
sorted ( yourdata , reverse = True )	reverse list `yourdata`
sorted ( yourdata , key = lambda d : d . get ( 'key' , {} ) . get ( 'subkey' ) , reverse = True )	sort list of nested dictionaries `yourdata` in reverse based on values associated with each dictionary's key 'subkey'
yourdata . sort ( key = lambda e : e [ 'key' ] [ 'subkey' ] , reverse = True )	sort list of nested dictionaries `yourdata` in reverse order of 'key' and 'subkey'
df . round ( )	remove decimal points in pandas data frame using round
gca ( ) . get_lines ( ) [ n ] . get_xydata ( )	Get data from matplotlib plot
A [ : , -2 : ]	get the maximum 2 values per row in array `A`
request . GET . get ( 'username' , '' )	"Get value for  ""username"" parameter in GET request  in Django"
pprint ( dict ( list ( o . items ( ) ) ) )	pretty-print ordered dictionary `o`
url ( '^$' , include ( 'sms.urls' ) ) ,	Confirm urls in Django properly
url ( '^' , include ( 'sms.urls' ) ) ,	Configure url in django properly
max_item = max ( a_list , key = operator . itemgetter ( 1 ) )	get the tuple in list `a_list` that has the largest item in the second index
max ( a_list , key = operator . itemgetter ( 1 ) )	find tuple in list of tuples `a_list` with the largest second element
s . resample ( '3M' , how = 'sum' )	resample series `s` into 3 months bins and sum each bin
[ a [ i ] for i in ( 1 , 2 , 5 ) ]	extract elements at indices (1, 2, 5) from a list `a`
[ line for line in open ( 'textfile' ) if 'apple'   in line ]	filter lines from a text file 'textfile' which contain a word 'apple'
datetime . datetime . strptime ( s , '%Y-%m-%dT%H:%M:%SZ' )	convert a date string `s` to a datetime object
pandas . read_csv ( filename , sep = '\t' , lineterminator = '\r' )	reading tab-delimited csv file `filename` with pandas on mac
'longlongTESTstringTEST' . replace ( 'TEST' , '?' , 1 )	replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`
archive . write ( pdffile , os . path . basename ( pdffile ) )	zip file `pdffile` using its basename as directory name
dict ( x [ 1 : ] for x in reversed ( myListOfTuples ) )	create a dictionary of pairs from a list of tuples `myListOfTuples`
[ ( x1 - x2 ) for x1 , x2 in zip ( List1 , List2 ) ]	subtract elements of list `List1` from elements of list `List2`
string [ 0 ] . isdigit ( )	check if string `string` starts with a number
strg . startswith ( ( '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ) )	Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')
print ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	print script's directory
re . split ( '(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)' , text )	split string `text` by the occurrences of regex pattern '(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)'
plt . scatter ( * zip ( * li ) )	Make a scatter plot using unpacked values of list `li`
tuple ( zip ( * t ) )	rearrange tuple of tuples `t`
df . groupby ( np . arange ( len ( df . columns ) ) // 3 , axis = 1 ) . mean ( )	Get average for every three columns in `df` dataframe
""""" """" """" . join ( chr ( i ) for i in L )"	convert a list `L` of ascii values to a string
sum ( x == chosen_value for x in list ( d . values ( ) ) )	count the number of pairs in dictionary `d` whose value equal to `chosen_value`
sum ( 1 for x in list ( d . values ( ) ) if some_condition ( x ) )	count the number of values in `d` dictionary that are predicate to function `some_condition`
struct . unpack ( 'f' , struct . pack ( 'f' , 0.00582811585976 ) )	convert double 0.00582811585976 to float
timestamp = ( dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert datetime.date `dt` to utc timestamp
df . sort ( 'm' )	sort column `m` in panda dataframe `df`
a = sorted ( a , key = lambda x : x . modified , reverse = True )	Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function
print ( bool ( a ) )	print the truth value of `a`
df = df . rename ( index = { last : 'a' } )	rename `last` row index label in dataframe `df` to `a`
km . fit ( x . reshape ( -1 , 1 ) )	Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values
sorted ( words , key = lambda x : 'a'   + x if x . startswith ( 's' ) else 'b'   + x )	Sort a list of strings 'words' such that items starting with 's' come first.
webbrowser . open ( 'http://somesite.com/adminpanel/index.php' )	open the login site 'http://somesite.com/adminpanel/index.php' in the browser
dict ( ( k , v ) for k , v in parent_dict . items ( ) if 2 <  k <  4 )	fetch all elements in a dictionary `parent_dict`, falling between two keys 2 and 4
dict ( ( k , v ) for k , v in parent_dict . items ( ) if k >  2 and k <  4 )	fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4
[ list ( x ) for x in zip ( * sorted ( zip ( list1 , list2 ) , key = lambda pair : pair [ 0 ] ) ) ]	sort two lists `list1` and `list2` together using lambda function
sum ( ( ( i >  5 ) for i in j ) )	get the number of values in list `j` that is greater than 5
len ( [ 1 for i in j if ( i >  5 ) ] )	get the number of values in list `j` that is greater than 5
[ ( x + tuple ( y ) ) for x , y in zip ( zip ( a , b ) , c ) ]	zip list `a`, `b`, `c` into a list of tuples
os . chmod ( path , stat . S_IRUSR |  stat . S_IRGRP |  stat . S_IROTH )	changing permission of file `path` to `stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH`
parser . add_argument ( 'file' , nargs = '*' )	argparse associate zero or more arguments with flag 'file'
z = [ ( i == j ) for i , j in zip ( x , y ) ]	get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal
[ ( x [ i ] == y [ i ] ) for i in range ( len ( x ) ) ]	create a list which indicates whether each element in `x` and `y` is identical
df2 = pd . DataFrame ( index = df1 . index )	create an empty data frame `df2` with index from another data frame `df1`
struct . unpack ( 'h' , pS [ 0 : 2 ] )	unpack first and second bytes of byte string `pS` into integer
print ( '\n' . join ( '  ' . join ( map ( str , row ) ) for row in t ) )	print list `t` into a table-like shape
driver . find_element_by_name ( '<check_box_name>' ) . is_selected ( )	check if a checkbox is checked in selenium python webdriver
driver . find_element_by_id ( '<check_box_id>' ) . is_selected ( )	determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver
[ ( a if a else 2 ) for a in [ 0 , 1 , 0 , 3 ] ]	replace `0` with `2` in the list `[0, 1, 0, 3]`
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s' . encode ( ) . decode ( 'unicode-escape' )	Produce a string that is suitable as Unicode literal from string 'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s' . decode ( 'unicode-escape' )	Parse a unicode string `M\\N{AMPERSAND}M\\N{APOSTROPHE}s`
chr ( int ( 'fd9b' , 16 ) ) . encode ( 'utf-8' )	convert Unicode codepoint to utf8 hex
print ( '0x%X'   % value )	use upper case letters to print hex value `value`
cleaned = [ x for x in your_list if x ]	get a list `cleaned` that contains all non-empty elements in list `your_list`
slice ( * [ ( int ( i . strip ( ) ) if i else None ) for i in string_slice . split ( ':' ) ] )	create a slice object using string `string_slice`
soup . find_all ( [ 'a' , 'div' ] )	Find all the tags `a` and `div` from Beautiful Soup object `soup`
print ( func . __name__ )	get the name of function `func` as a string
""""" """" """" . join ( '{}{}' . format ( key , val ) for key , val in sorted ( adict . items ( ) ) )"	convert dictionary `adict` into string
""""" """" """" . join ( '{}{}' . format ( key , val ) for key , val in list ( adict . items ( ) ) )"	convert dictionary `adict` into string
new_list = old_list [ : ]	copy list `old_list` as `new_list`
new_list = list ( old_list )	copy list `old_list` as `new_list`
new_list = copy . copy ( old_list )	copy list `old_list` as `new_list`
new_list = copy . deepcopy ( old_list )	deep copy list `old_list` as `new_list`
[ i for i in old_list ]	make a copy of list `old_list`
plt . legend ( frameon = False )	remove frame of legend in plot `plt`
""""" ""\\ud83d\\ude4f"" """" . encode ( 'utf-16' , 'surrogatepass' ) . decode ( 'utf-16' )"	Print a emoji from a string `\\ud83d\\ude4f` having surrogate pairs
globals ( ) [ 'myfunction' ] ( )	calling a function named 'myfunction' in the module
urllib . request . urlopen ( 'http://www.stackoverflow.com' ) . getcode ( )	"Check the status code of url ""http://www.stackoverflow.com"""
print ( urllib . request . urlopen ( 'http://www.stackoverflow.com' ) . getcode ( ) )	"Checking if website ""http://www.stackoverflow.com"" is up"
"driver . find_element_by_css_selector ( ""a[href^='javascript']"" ) . click ( )"	"Selenium `driver` click a hyperlink with the pattern ""a[href^='javascript']"""
df . to_pickle ( file_name )	store data frame `df` to file `file_name` using pandas, python
df . groupby ( by = df . columns , axis = 1 ) . mean ( )	calculate the mean of columns with same name in dataframe `df`
bar . sort ( key = lambda x : ( x . attrb1 , x . attrb2 ) , reverse = True )	sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order
alpha = img . split ( ) [ -1 ]	get alpha value `alpha` of a png image `img`
soup . findAll ( 'div' , style = 'width=300px;' )	BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`
cursor . execute ( sql , list ( myDict . values ( ) ) )	Execute SQL statement `sql` with values of dictionary `myDict` as parameters
df . to_csv ( 'Result.csv' , index = False , sep = ' ' )	Convert CSV file `Result.csv` to Pandas dataframe using separator ' '
globals ( ) . update ( vars ( args ) )	update the `globals()` dictionary with the contents of the `vars(args)` dictionary
re . findall ( '\\[(.*?)\\]' , mystring )	find all substrings in `mystring` beginning and ending with square brackets
print ( '%.2f kg = %.2f lb = %.2f gal = %.2f l'   % ( var1 , var2 , var3 , var4 ) )	Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places.
d = dict ( ( k , v ) for k , v in d . items ( ) if v >  0 )	Remove all items from a dictionary `d` where the values are less than `1`
d = { k : v for k , v in list ( d . items ( ) ) if v >  0 }	Filter dictionary `d` to have items with value greater than 0
pd . to_datetime ( pd . Series ( date_stngs ) )	convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe
df . iloc [ 2 , 0 ]	get  value at index `[2, 0]` in dataframe `df`
matplotlib . rcParams . update ( { 'font.size' : 22 } )	change the font size on plot `matplotlib` to 22
pd . DataFrame ( list ( d . items ( ) ) , columns = [ 'Date' , 'DateValue' ] )	converting dictionary `d` into a dataframe `pd` with keys as data for column 'Date' and the corresponding values as data for column 'DateValue'
pd . DataFrame ( df . values * df2 . values , columns = df . columns , index = df . index )	create a dataframe containing the multiplication of element-wise in dataframe `df` and dataframe `df2` using index name and column labels of dataframe `df`
re . findall ( '\\d+\\.\\d+' , 'Current Level: 13.4 db.' )	extract floating number from string 'Current Level: 13.4 db.'
re . findall ( '[-+]?\\d*\\.\\d+|\\d+' , 'Current Level: -13.2 db or 14.2 or 3' )	extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3'
zip ( it , it , it )	pair each element in list `it` 3 times into a tuple
df [ 'x' ] . str . lower ( )	lowercase a python dataframe string in column 'x' if it has missing values in dataframe `df`
jsobj [ 'a' ] [ 'b' ] [ 'e' ] . append ( { 'f' : var6 , 'g' : var7 , 'h' : var8 } )	append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`
""""" """" """" . join ( lst )"	Concat a list of strings `lst` using string formatting
sum ( v for v in list ( d . values ( ) ) if v >  0 )	sum values greater than 0 in dictionary `d`
app . run ( debug = True )	run flask application `app` in debug mode.
df . drop ( df . index [ [ 1 , 3 ] ] , inplace = True )	drop rows whose index value in list `[1, 3]` in dataframe `df`
df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )	replace nan values in a pandas data frame with the average of columns
[ o . my_attr for o in my_list ]	extract attribute `my_attr` from each object in list `my_list`
time . strftime ( '%m/%d/%Y' , time . gmtime ( os . path . getmtime ( file ) ) )	python get time stamp on file `file` in '%m/%d/%Y' format
all ( item in list ( superset . items ( ) ) for item in list ( subset . items ( ) ) )	check if dictionary `subset` is a subset of dictionary `superset`
[ str ( wi ) for wi in wordids ]	Convert integer elements in list `wordids` to strings
df2 = df . reset_index ( )	Reset the indexes of a pandas data frame
dt . strftime ( '%m/%d/%Y' )	format datetime in `dt` as string in format `'%m/%d/%Y`
print ( 'Total cost is: ${:,.2f}' . format ( TotalAmount ) )	format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator
df . groupby ( np . arange ( len ( df . columns ) ) // 2 + 1 , axis = 1 ) . sum ( ) . add_prefix ( 's' )	sum the values in each row of every two adjacent columns in dataframe `df`
randomList = [ random . random ( ) for _ in range ( 10 ) ]	create list `randomList` with 10 random floating point numbers between 0.0 and 1.0
print ( soup . find ( 'a' , href = re . compile ( '.*follow\\?page.*' ) ) )	find href value that has string 'follow?page' inside it
sys . stdout . flush ( )	immediately see output of print statement that doesn't end in a newline
country , capital = random . choice ( list ( d . items ( ) ) )	get a random key `country` and value `capital` form a dictionary `d`
list ( 'Word to Split' )	split string `Word to Split` into a list of characters
[ w for w in open ( 'file.txt' ) if not re . search ( '[aeiou]{2}' , w ) ]	Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'
pat = re . compile ( '^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$' )	Validate IP address using Regex
exec ( compile ( open ( 'filename.py' ) . read ( ) , 'filename.py' , 'exec' ) )	execute file 'filename.py'
session . query ( Tag ) . distinct ( Tag . name ) . group_by ( Tag . name ) . count ( )	SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`
df = df . dropna ( axis = 1 , how = 'all' )	remove null columns in a dataframe `df`
all ( x . count ( 1 ) == 3 for x in L )	check if all lists in list `L` have three elements of integer 1
[ x [ 0 ] for x in l1 if any ( x [ 0 ] == y [ 0 ] for y in l2 ) ]	Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`
tex . delete ( '1.0' , END )	clear the textbox `text` in tkinter
datetime . datetime . fromtimestamp ( myNumber ) . strftime ( '%Y-%m-%d %H:%M:%S' )	Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'
system ( 'python myscript.py' )	Spawn a process to run python script `myscript.py` in C++
your_list . sort ( key = operator . attrgetter ( 'anniversary_score' ) )	sort a list `your_list` of class objects by their values for the attribute `anniversary_score`
your_list . sort ( key = lambda x : x . anniversary_score )	sort list `your_list` by the `anniversary_score` attribute of each object
print ( type ( tf . Session ( ) . run ( tf . constant ( [ 1 , 2 , 3 ] ) ) ) )	convert a tensor with list of constants `[1, 2, 3]` into a numpy array in tensorflow
list ( itertools . chain ( * a ) )	convert list `a` from being consecutive sequences of tuples into a single sequence of elements
count . setdefault ( 'a' , 0 )	Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`
df . groupby ( [ 'cluster' ] ) . mean ( )	Do group by on `cluster` column in `df` and get its mean
min ( myList , key = lambda x : abs ( x - myNumber ) )	get number in list `myList` closest in value to number `myNumber`
any ( x in string for x in search )	check if any of the items in  `search` appear in `string`
print ( pattern . search ( url ) . group ( 1 ) )	search for occurrences of regex pattern `pattern` in string `url`
( s . factorize ( ) [ 0 ] + 1 ) . astype ( 'float' )	factorize all string values in dataframe `s` into floats
C = [ ( a - b ) for a , b in zip ( A , B ) ]	Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`
datetime . datetime . strptime ( '2011, 4, 0' , '%Y, %U, %w' )	derive the week start for the given week number and year ‘2011, 4, 0’
map ( int , [ '1' , '-1' , '1' ] )	convert a list of strings `['1', '-1', '1']` to a list of numbers
datetime . datetime . strptime ( '16Sep2012' , '%d%b%Y' )	"create datetime object from ""16sep2012"""
Book . objects . filter ( pk = pk ) . update ( ** d )	update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`
Book . objects . create ( ** d )	update the fields in django model `Book` using dictionary `d`
print ( '{0:.2f}' . format ( your_number ) )	print a digit `your_number` with exactly 2 digits after decimal
random . randint ( 100000000000 , 999999999999 )	generate a 12-digit random number
int ( '' . join ( str ( random . randint ( 0 , 9 ) ) for _ in range ( 12 ) ) )	generate a random 12-digit number
""""" """" """" . join ( str ( random . randint ( 0 , 9 ) ) for _ in range ( 12 ) )"	generate a random 12-digit number
'%0.12d'   % random . randint ( 0 , 999999999999 )	generate a 12-digit random number
numpy . delete ( a , index )	remove specific elements in a numpy array `a`
sorted ( trial_list , key = lambda x : trial_dict [ x ] )	sort list `trial_list` based on values of dictionary `trail_dict`
sys . stdin . read ( 1 )	read a single character from stdin
print ( re . findall ( pattern , x ) )	get a list of characters in string `x` matching regex pattern `pattern`
k = soup . find ( text = re . compile ( 'My keywords' ) ) . parent . text	get the context of a search by keyword 'My keywords' in beautifulsoup `soup`
df . apply ( lambda x : x . tolist ( ) , axis = 1 )	convert rows in pandas data frame `df` into list
B = np . reshape ( A , ( -1 , 2 ) )	convert a 1d `A` array to a 2d array `B`
app . run ( host = '192.168.0.58' , port = 9000 , debug = False )	run app `app` on host '192.168.0.58' and port 9000 in Flask
print ( '\xc5\xc4\xd6' . encode ( 'UTF8' ) )	encode unicode string '\xc5\xc4\xd6' to utf-8 code
[ x [ 0 ] for x in G ]	get the first element of each tuple from a list of tuples `G`
re . findall ( '-(?!aa-|bb-)([^-]+)' , string )	regular expression matching all but 'aa' and 'bb' for string `string`
re . findall ( '-(?!aa|bb)([^-]+)' , string )	regular expression matching all but 'aa' and 'bb'
{ k : v for k , v in list ( hand . items ( ) ) if v }	remove false entries from a dictionary `hand`
dict ( ( k , v ) for k , v in hand . items ( ) if v )	Get a dictionary from a dictionary `hand` where the values are present
sorted ( L , key = operator . itemgetter ( 'resultType' ) )	sort list `L` based on the value of variable 'resultType' for each object in list `L`
s . sort ( key = operator . attrgetter ( 'resultType' ) )	sort a list of objects `s` by a member variable 'resultType'
somelist . sort ( key = lambda x : x . resultType )	sort a list of objects 'somelist' where the object has member number variable `resultType`
df1 . merge ( df2 , on = 'name' ) . merge ( df3 , on = 'name' )	join multiple dataframes `d1`, `d2`, and `d3` on column 'name'
decimal . Decimal ( random . randrange ( 10000 ) ) / 100	generate random Decimal
onlyfiles = [ f for f in listdir ( mypath ) if isfile ( join ( mypath , f ) ) ]	list all files of a directory `mypath`
print ( glob . glob ( '/home/adam/*.txt' ) )	"list all "".txt"" files of a directory ""/home/adam/"""
os . listdir ( 'somedirectory' )	"list all files of a directory ""somedirectory"""
cur . executemany ( 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' , tup )	execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`
print ( [ key for key in d if d [ key ] == 1 ] )	get keys with same value in dictionary `d`
print ( [ key for key , value in d . items ( ) if value == 1 ] )	get keys with same value in dictionary `d`
print ( [ key for key , value in list ( d . items ( ) ) if value == 1 ] )	Get keys from a dictionary 'd' where the value is '1'.
strs = [ ''   for x in range ( size ) ]	create list of 'size' empty strings
[ dict ( t ) for t in set ( [ tuple ( d . items ( ) ) for d in l ] ) ]	remove duplicate dict in list `l`
TIME_ZONE = 'Europe/Istanbul'	Set time zone `Europe/Istanbul` in Django
dates_dict . setdefault ( key , [ ] ) . append ( date )	append `date` to list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist
Article . objects . values ( 'pub_date' ) . annotate ( article_count = Count ( 'title' ) )	Group the values from django model `Article` with group by value `pub_date` and annotate by `title`
canvas . delete ( 'all' )	clear Tkinter Canvas `canvas`
s = pd . Series ( [ 'A' , 'B' , 'A1R' , 'B2' , 'AABB4' ] )	Initialize a pandas series object `s` with columns `['A', 'B', 'A1R', 'B2', 'AABB4']`
a . sort ( key = lambda x : b . index ( x [ 0 ] ) )	sort list `a` using the first dimension of the element as the key to list `b`
plt . savefig ( 'filename.png' )	Save plot `plt` as png file 'filename.png'
plt . savefig ( 'filename.png' , dpi = 300 )	Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`
p1 . communicate ( ) [ 0 ]	get output from process `p1`
soup . body . findAll ( text = 'Python' )	searche in HTML string for elements that have text 'Python'
soup . body . findAll ( text = 'Python Jobs' )	BeautifulSoup find string 'Python Jobs' in HTML body `body`
sorted ( list ( d . items ( ) ) , key = lambda name_num : ( name_num [ 0 ] . rsplit ( None , 1 ) [ 0 ] , name_num [ 1 ] ) )	Sort items in dictionary `d`  using the first part of the key after splitting the key
set ( [ 1 , 2 , 3 ] ) ^  set ( [ 3 , 4 , 5 ] )	create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]
request . POST . getlist ( 'pass_id' )	Get a list values of a dictionary item `pass_id` from post requests in django
list ( dict ( ( x [ 'id' ] , x ) for x in L ) . values ( ) )	Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'
df . groupby ( df . columns , axis = 1 ) . sum ( )	Get pandas GroupBy object with sum over the rows with same column names within  dataframe `df`
dict ( zip ( list ( range ( 1 , 5 ) ) , list ( range ( 7 , 11 ) ) ) )	convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary
numpy . where ( mask )	Get all indexes of boolean numpy array where boolean value `mask` is True
( string1 . lower ( ) == string2 . lower ( ) )	case insensitive string comparison between `string1` and `string2`
( first . lower ( ) == second . lower ( ) )	case insensitive string comparison between `first` and `second`
( first . upper ( ) == second . upper ( ) )	case insensitive comparison between strings `first` and `second`
"os . system ( ""awk '{print $10, $11}' test.txt > test2.txt"" )"	"Taking the results of a bash command ""awk '{print $10, $11}' test.txt > test2.txt"""
del my_list [ 2 : 6 ]	remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`.
int ( s . encode ( 'hex' ) , 16 )	convert a string `s` to its base-10 representation
re . findall ( 'TAA(?:[ATGC]{3})+?TAA' , seq )	match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`
sorted ( s , key = float )	sort a set `s` by numerical value
hex ( 65 )	convert an int 65 to hex string
a . append ( b ) . reset_index ( drop = True )	append a pandas series `b` to the series `a` and get a continuous index
pd . concat ( [ a , b ] , ignore_index = True )	simple way to append a pandas series `a` and `b` with same index
[ ( i , j ) for i in range ( 1 , 3 ) for j in range ( 1 , 5 ) ]	Get a list of tuples with multiple iterators using list comprehension
sorted ( iter ( mydict . items ( ) ) , key = itemgetter ( 1 ) , reverse = True )	reverse sort items in dictionary `mydict` by value
pd . date_range ( '1/1/2014' , periods = 12 , freq = 'BM' )	select the last business day of the month for each month in 2014 in pandas
requests . get ( 'https://kennethreitz.com' , verify = False )	disable the certificate check in https requests for url `https://kennethreitz.com`
df . ix [ : -1 ]	return dataframe `df` with last row dropped
string . find ( 'substring' )	"check if string ""substring"" is in string"
pd . concat ( [ df . head ( 1 ) , df . tail ( 1 ) ] )	extract first and last row of a dataframe `df`
MyModel . objects . extra ( where = [ 'CHAR_LENGTH(text) > 254' ] )	filter a Django model `MyModel` to have charfield length of max `255`
MyModel . objects . filter ( text__regex = '^.{254}.*' )	Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`
sum ( df . apply ( lambda x : sum ( x . isnull ( ) . values ) , axis = 1 ) >  0 )	count the number of rows with missing values in a pandas dataframe `df`
canvas . create_text ( x , y , font = ( 'Purisa' , 12 ) , text = k )	set the font 'Purisa' of size 12 for a canvas' text item `k`
[ y [ 'baz' ] for x in foos for y in x [ 'bar' ] ]	create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension
df [ 'a' ] = df [ 'a' ] . str . replace ( 'in.' , ' in. ' )	replace string 'in.' with ' in. ' in dataframe `df` column 'a'
[ i for i in range ( len ( a ) ) if a [ i ] >  2 ]	Get all indexes of a list `a` where each value is greater than `2`
( 'myVar'   in locals ( ) )	check if a local variable `myVar` exists
( 'myVar'   in globals ( ) )	check if a global variable `myVar` exists
hasattr ( obj , 'attr_name' )	check if object `obj` has attribute 'attr_name'
lambda x , y : x + y	lambda function that adds two operands
sum ( 1 for i in it )	count the number of items in a generator/iterator `it`
[ ( x , lst2 [ i ] ) for i , x in enumerate ( lst ) ]	get tuples of the corresponding elements from lists `lst` and `lst2`
[ ( i , j ) for i , j in zip ( lst , lst2 ) ]	create tuples containing elements that are at the same index of list `lst` and list `lst2`
[ ( lst [ i ] , lst2 [ i ] ) for i in range ( len ( lst ) ) ]	get tuples from lists `lst` and `lst2` using list comprehension in python 2
struct . unpack ( 'BBB' , rgbstr . decode ( 'hex' ) )	convert hex triplet string `rgbstr` to rgb tuple
( 3 not in [ 2 , 3 , 4 ] )	Check if 3 is not in a list [2, 3, 4]
( ( 2 , 3 ) not in [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ] )	Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]
( ( 2 , 3 ) not in [ ( 2 , 7 ) , ( 7 , 3 ) , 'hi' ] )	"Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), ""hi""]"
( 3 not in [ 4 , 5 , 6 ] )	Check if 3 is not in the list [4,5,6]
[ value for pair in zip ( a , b [ : : -1 ] ) for value in pair ]	create a list by appending components from list `a` and reversed list `b` interchangeably
b = np . delete ( a , -1 , 1 )	delete the last column of numpy array `a` and assign resulting array to `b`
dbb . commit ( )	commit all the changes after executing a query.
pd . merge ( a , b , on = [ 'A' , 'B' ] , how = 'outer' )	join two dataframes based on values in selected columns
setStyleSheet ( 'QPushButton {background-color: #A3C1DA; color: red;}' )	set text color as `red` and background color as `#A3C1DA` in qpushbutton
sum ( l ) / float ( len ( l ) )	find the mean of elements in list `l`
[ ( k , v ) for k , v in D . items ( ) if 'Light'   in k ]	Find all the items from a dictionary `D` if the key contains the string `Light`
k = hashlib . md5 ( 'thecakeisalie' ) . hexdigest ( )	Get a md5 hash from string `thecakeisalie`
birthdays . sort ( key = lambda d : ( d . month , d . day ) )	sort datetime objects `birthdays` by `month` and `day`
[ [ td . findNext ( text = True ) for td in tr . findAll ( 'td' ) ] for tr in rows ]	extract table data from table `rows` using beautifulsoup
""""" ""Boat.txt.txt"" """" . replace ( '.txt' , '' )"	strip the string `.txt` from anywhere in the string `Boat.txt.txt`
list ( df . index )	get a list of the row names from index of a pandas data frame
df . index	get the row names from index in a pandas data frame
""""" """" """" . join ( list ( OrderedDict . fromkeys ( 'aaabcabccd' ) . keys ( ) ) )"	create a list of all unique characters in string 'aaabcabccd'
list ( set ( 'aaabcabccd' ) )	get list of all unique characters in a string 'aaabcabccd'
df . loc [ ( df . loc [ : , ( df . dtypes != object ) ] != 0 ) . any ( 1 ) ]	find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe
all ( word in d for word in [ 'somekey' , 'someotherkey' , 'somekeyggg' ] )	check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`
subprocess . check_output ( [ 'espeak' , text ] , stderr = subprocess . STDOUT )	hide output of subprocess `['espeak', text]`
df . fillna ( method = 'ffill' , inplace = True )	replace nans by preceding values in pandas dataframe `df`
print ( np . linspace ( 1 , 3 , num = 4 , endpoint = False ) )	create 4 numbers in range between 1 and 3
print ( np . linspace ( 1 , 3 , num = 5 ) )	Create numpy array of `5` numbers starting from `1` with interval of `3`
kdll . CreateSymbolicLinkW ( 'D:\\testdirLink' , 'D:\\testdir' , 1 )	create a symlink directory `D:\\testdirLink` for directory `D:\\testdir` with unicode support using ctypes library
slice = [ arr [ i ] [ 0 : 2 ] for i in range ( 0 , 2 ) ]	get a list `slice` of array slices of the first two rows and columns from array `arr`
upload_url = blobstore . create_upload_url ( '/upload' , gs_bucket_name = 'my_bucket' )	upload uploaded file from path '/upload' to Google cloud storage 'my_bucket' bucket
os . chdir ( os . path . dirname ( __file__ ) )	change directory to the directory of a python script
func ( * args )	call a function with argument list `args`
df [ 'AB' ] . str . split ( ' ' , 1 , expand = True )	split column 'AB' in dataframe `df` into two columns by first whitespace ' '
df [ 'A' ] , df [ 'B' ] = df [ 'AB' ] . str . split ( ' ' , 1 ) . str	pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' '
print ( sorted ( xs , key = len ) )	sort list `xs` based on the length of its elements
xs . sort ( lambda x , y : cmp ( len ( x ) , len ( y ) ) )	sort list `xs` in ascending order of length of elements
xs . sort ( key = lambda s : len ( s ) )	sort list of strings `xs` by the length of string
ts . plot ( marker = '.' )	plot point marker '.' on series `ts`
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = n ) )	get all combination of n binary values
lst = map ( list , itertools . product ( [ 0 , 1 ] , repeat = n ) )	get all combination of n binary values
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = 3 ) )	get all combination of 3 binary values
df [ 'col' ] = 'str'   + df [ 'col' ] . astype ( str )	append string 'str' at the beginning of each value in column 'col' of dataframe `df`
dict ( ( name , eval ( name ) ) for name in [ 'some' , 'list' , 'of' , 'vars' ] )	get a dict of variable names `['some', 'list', 'of', 'vars']` as a string and their values
plt . colorbar ( im , ax = ax )	add a colorbar to plot `plt` using image `im` on axes `ax`
[ a for c in Cards for b in c for a in b ]	convert nested list 'Cards' into a flat list
sorted ( d , key = d . get )	create a list containing keys of dictionary `d` and sort it alphabetically
print ( len ( [ x for x in lst if x is not None ] ) )	print the number of occurences of not `none` in a list `lst` in Python 2
{{ json . key1 }}	lookup dictionary key `key1` in Django template `json`
mynewlist = list ( myset )	remove duplicates from list `myset`
set ( [ 'a' , 'b' , 'c' , 'd' ] )	get unique values from the list `['a', 'b', 'c', 'd']`
figure ( figsize = ( 11.69 , 8.27 ) )	set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches
url . rsplit ( '/' , 1 )	get every thing after last `/`
url . rsplit ( '/' , 1 ) [ -1 ]	get everything after last slash in a url stored in variable 'url'
x_file = open ( os . path . join ( direct , '5_1.txt' ) , 'r' )	open file '5_1.txt' in directory `direct`
list ( '5+6' )	create a list with the characters of a string `5+6`
np . concatenate ( input_list ) . ravel ( ) . tolist ( )	concatenate a list of numpy arrays `input_list` together into a flattened list of values
print ( [ y for x in list ( dict . items ( ) ) for y in x ] )	convert dictionary `dict` into a flat list
[ y for x in list ( dict . items ( ) ) for y in x ]	Convert a dictionary `dict` into a list with key and values as list items.
MyModel . objects . order_by ( '?' ) . first ( )	get a random record from model 'MyModel' using django's orm
os . chdir ( 'chapter3' )	change current working directory to directory 'chapter3'
os . chdir ( 'C:\\Users\\username\\Desktop\\headfirstpython\\chapter3' )	change current working directory
os . chdir ( '.\\chapter3' )	change current working directory
dict ( ( key , sum ( d [ key ] for d in dictList ) ) for key in dictList [ 0 ] )	create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`
df . sort ( [ 'c1' , 'c2' ] , ascending = [ True , True ] )	sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order
floats = [ float ( x ) for x in s . split ( ) ]	Converting string lists `s` to float list
floats = map ( float , s . split ( ) )	Converting string lists `s` to float list
plt . xticks ( [ 1 , 2 , 3 , 4 , 5 ] )	set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`
'one'   in list ( d . values ( ) )	check if string `one` exists in the values of dictionary `d`
'one'   in iter ( d . values ( ) )	Check if value 'one' is among the values of dictionary `d`
super ( Instructor , self ) . __init__ ( name , year )	call parent class `Instructor` of child class constructor
dict ( zip ( x , y ) )	create a dictionary using two lists`x` and `y`
sorted ( a , key = lambda i : list ( i . values ( ) ) [ 0 ] , reverse = True )	sort a list of dictionaries `a` by dictionary values in descending order
sorted ( a , key = dict . values , reverse = True )	sorting a list of dictionary `a` by values in descending order
df . groupby ( level = 0 ) . agg ( [ 'sum' , 'count' , 'std' ] )	Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`
a . setdefault ( 'somekey' , [ ] ) . append ( 'bob' )	for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key
sum ( item [ 'gold' ] for item in example_list )	sum values in list of dictionaries `example_list` with key 'gold'
sum ( [ item [ 'gold' ] for item in example_list ] )	get a sum of all values from key `gold` in a list of dictionary `example_list`
sum ( item [ 'gold' ] for item in myLIst )	Get all the values in key `gold` summed from a list of dictionary `myLIst`
f . write ( 'text to write\n' )	writing string 'text to write\n' to file `f`
file . write ( 'My String\n' )	Write a string `My String` to a file `file` including new line character
df . reset_index ( ) . groupby ( 'A' ) [ 'index' ] . apply ( np . array )	find consecutive segments from a column 'A' in a pandas data frame 'df'
fn = os . path . join ( os . path . dirname ( __file__ ) , 'my_file' )	get a relative path of file 'my_file' into variable `fn`
e = next ( iter ( s ) )	retrieve an element from a set `s` without removing it
os . system ( ' dir c : \\' )	execute a command in the command prompt to list directory contents of the c drive `c:\\'
self . treeview . connect ( 'size-allocate' , self . treeview_changed )	Make a auto scrolled window to the end of the list in gtk
3 in [ 1 , 2 , 3 ]	check if 3 is inside list `[1, 2, 3]`
datetime . datetime . strptime ( '10/05/2012' , '%d/%m/%Y' ) . strftime ( '%Y-%m-%d' )	Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d'
s = s . replace ( '\\', ' \\\\' )	convert a string literal `s` with values `\\` to raw string literal
print ( proc . communicate ( ) [ 0 ] )	get output of script `proc`
pd . concat ( [ pd . DataFrame ( l ) for l in my_list ] , axis = 1 ) . T	create a pandas data frame from list of nested dictionaries `my_list`
df . loc [ : , ( ( df != 0 ) . any ( axis = 0 ) ) ]	delete all columns in  DataFrame `df` that do not hold a non-zero value in its records
sorted ( a , key = lambda x : x [ 1 ] )	sort a multidimensional array `a` by column with index 1
[ x . strip ( ) for x in s . split ( ',' ) ]	split string `s` to list conversion by ','
items = [ item for item in container if item . attribute == value ]	Get a list of items in the list `container` with attribute equal to `value`
open ( 'filename' , 'w' ) . write ( '\n' . join ( '%s %s'   % x for x in mylist ) )	create a file 'filename' with each tuple in the list `mylist` written to a line
pattern = re . compile ( '(?:review: )?(http://url.com/(\\d+))\\s?' , re . IGNORECASE )	Get multiple matched strings using regex pattern `(?:review: )?(http://url.com/(\\d+))\\s?`
str = open ( 'very_Important.txt' , 'r' ) . read ( )	read a text file 'very_Important.txt' into a string variable `str`
df . groupby ( [ 'A' , 'B' ] ) [ 'C' ] . unique ( )	Return values for column `C` after group by on column `A` and `B` in dataframe `df`
lines = [ line . rstrip ( '\n' ) for line in open ( 'filename' ) ]	read file 'filename' line by line into a list `lines`
df [ 'col' ] = pd . to_datetime ( df [ 'col' ] )	convert the dataframe column 'col' from string types to datetime types
[ k for d in list ( foo . values ( ) ) for k in d ]	get a list of the keys in each dictionary in a dictionary of dictionaries `foo`
print ( 'Hello, {0}, how do you do?' . format ( input ( 'Enter name here: ' ) ) )	get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'
df = pd . read_csv ( 'filename.txt' , sep = ';' , names = [ 'Region Name' ] )	create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`
platform . system ( )	get the platform OS name
a = sorted ( a , key = lambda x : float ( x ) )	sort list `a` in ascending order based on its elements' float values
re . search ( 'name (.*)' , s )	finding words in string `s` after keyword 'name'
db . collection . find ( {} , { '_id' : False } )	Find all records from collection `collection` without extracting mongo id `_id`
[ row [ 1 ] for row in A ]	Get all the second values from a list of lists `A`
[ row [ 0 ] for row in a ]	extract first column from a multi-dimensional array `a`
sorted ( [ '10' , '3' , '2' ] , key = int )	sort list `['10', '3', '2']` in ascending order based on the integer value of its elements
os . path . commonprefix ( [ '/the/dir/' , os . path . realpath ( filename ) ] ) == '/the/dir/'	check if file `filename` is descendant of directory '/the/dir/'
any ( substring in string for substring in substring_list )	check if any element of list `substring_list` are in string `string`
df = pandas . DataFrame ( data , columns = [ 'R_Number' , 'C_Number' , 'Avg' , 'Std' ] )	construct pandas dataframe from a list of tuples
re . sub ( '^((?:(?!cat).)*cat(?:(?!cat).)*)cat' , '\\1Bull' , s )	find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'
re . sub ( '^((.*?cat.*?){1})cat' , '\\1Bull' , s )	find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'
sorted ( the_list , key = lambda k : int ( k . split ( '_' ) [ 1 ] ) )	sort list of strings in list `the_list` by integer suffix
sorted ( the_list , key = lambda x : int ( x . split ( '_' ) [ 1 ] ) )	"sort list of strings `the_list` by integer suffix before ""_"""
[ list ( g ) for _ , g in itertools . groupby ( test , lambda x : x . split ( '_' ) [ 0 ] ) ]	make a list of lists in which each list `g` are the elements from list `test` which have the same characters up to the first `_` character
driver . get ( 'http://www.google.com' )	Load the url `http://www.google.com` in selenium webdriver `driver`
( datetime . datetime . utcnow ( ) - datetime . timedelta ( hours = 11 ) ) . year	using python's datetime module, get the year that utc-11 is currently in
Counter ( [ 1 , 2 , 2 , 2 , 3 ] ) - Counter ( [ 1 , 2 ] )	Get the difference between two lists `[1, 2, 2, 2, 3]` and `[1, 2]` that may have duplicate values
re . sub ( '<[^>]*>' , '' , mystring )	remove tags from a string `mystring`
data . encode ( 'hex' )	encode string `data` as `hex`
User . objects . filter ( userprofile__level__gte = 0 )	filter `Users` by field `userprofile` with level greater than or equal to `0`
soup . findAll ( id = re . compile ( 'para$' ) )	BeautifulSoup find a tag whose id ends with string 'para'
"soup . select ( 'div[id^=""value_xxx_c_1_f_8_a_""]' )"	select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`
cleaned_list = [ x for x in some_list if x is not thing ]	delete an item `thing` in a list `some_list` if it exists
var = input ( 'Please enter something: ' )	"print ""Please enter something: "" to console, and read user input to `var`"
foo . append ( 4 )	append 4 to list `foo`
foo . append ( [ 8 , 7 ] )	append a list [8, 7] to list `foo`
x . insert ( 2 , 77 )	insert 77 to index 2 of list `x`
plt . savefig ( 'test.png' , bbox_inches = 'tight' )	remove white space padding around a saved image `test.png` in matplotlib
( listone + listtwo )	concatenate lists `listone` and `listtwo`
males = df [ ( df [ Gender ] == 'Male' ) &  ( df [ Year ] == 2014 ) ]	create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014
print ( '\\' )	print backslash
df . replace ( '-' , np . nan )	replace '-' in pandas dataframe `df` with `np.nan`
df = df . drop ( 'column_name' , 1 )	delete column 'column_name' from dataframe `df`
df . drop ( df . columns [ [ 0 , 1 , 3 ] ] , axis = 1 )	delete 1st, 2nd and 4th columns from dataframe `df`
df . drop ( 'column_name' , axis = 1 , inplace = True )	delete a column `column_name` without having to reassign from pandas data frame `df`
parser = argparse . ArgumentParser ( allow_abbrev = False )	disable abbreviation in argparse
feature3 = [ d . get ( 'Feature3' ) for d in df . dic ]	extract dictionary values by key 'Feature3' from data frame `df`
df . loc [ gb . groups [ 'foo' ] , ( 'A' , 'B' ) ]	get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'
print ( '[%s, %s, %s]'   % ( 1 , 2 , 3 ) )	print '[1, 2, 3]'
print ( '[{0}, {1}, {2}]' . format ( 1 , 2 , 3 ) )	Display `1 2 3` as a list of string
[ v for k , v in list ( my_dict . items ( ) ) if 'Date'   in k ]	get values from a dictionary `my_dict` whose key contains the string `Date`
df . drop ( ( 'col1' , 'a' ) , axis = 1 )	drop a single subcolumn 'a' in column 'col1' from a dataframe `df`
df . drop ( 'a' , level = 1 , axis = 1 )	dropping all columns named 'a' from a multiindex 'df', across all level.
{ _key : _value ( _key ) for _key in _container }	build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter
browser . find_element_by_class_name ( 'section-select-all' ) . click ( )	click on the text button 'section-select-all' using selenium python
dict ( ( k , d . get ( k , '' ) + d1 . get ( k , '' ) ) for k in keys )	combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`
hash ( pformat ( a ) ) == hash ( pformat ( b ) )	generate unique equal hash for equal dictionaries `a` and `b`
list ( map ( tuple , [ [ 'tom' , 'cat' ] , [ 'jerry' , 'mouse' ] , [ 'spark' , 'dog' ] ] ) )	convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples
df . groupby ( [ 'stock' , 'same1' , 'same2' ] , as_index = False ) [ 'positions' ] . sum ( )	sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`
s . upper ( )	change string `s` to upper case
dict ( item . split ( '=' ) for item in s . split ( ';' ) )	split a string `s` by ';' and convert to a dictionary
br . addheaders = [ ( 'Cookie' , 'cookiename=cookie value' ) ]	Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`
df [ 'value' ] = df [ 'value' ] . str [ 0 ]	set data in column 'value' of dataframe `df` equal to first element of each list
df [ 'value' ] = df [ 'value' ] . str . get ( 0 )	get element at index 0 of each list in column 'value' of dataframe `df`
df [ 'value' ] = df [ 'value' ] . str . strip ( '[]' )	remove square bracket '[]' from pandas dataframe `df` column 'value'
""""" "", "" """" . join ( [ '{}_{}' . format ( k , v ) for k , v in d . items ( ) ] )"	Get a string with string formatting from dictionary `d`
sum ( sum ( x ) for x in lists )	Sum of sums of each list, in a list of lists named 'lists'.
any ( np . equal ( a , [ 1 , 2 ] ) . all ( 1 ) )	Check whether a numpy array `a` contains a given row `[1, 2]`
len ( set ( mylist ) ) == 1	check if all elements in list `mylist` are the same
[ map ( int , x . split ( '\t' ) ) for x in s . rstrip ( ) . split ( '\r\n' ) ]	split a string `s` at line breaks `\r\n`
t = sorted ( list ( a . items ( ) ) , key = lambda x : x [ 1 ] )	sort a dictionary `a` by values that are list type
string2 . replace ( '' , string1 ) [ len ( string1 ) : - len ( string1 ) ]	insert string `string1` after each character of `string2`
list ( itertools . combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) )	getting every possible combination of two elements in a list
""""" ""x = {}"" """" . format ( x . decode ( 'utf8' ) ) . encode ( 'utf8' )"	get a utf-8 string literal representation of byte string `x`
isinstance ( x , int )	check if `x` is an integer
( type ( x ) == int )	check if `x` is an integer
winsound . PlaySound ( 'sound.wav' , winsound . SND_FILENAME )	play the wav file 'sound.wav'
[ next ( it ) for _ in range ( n ) ]	create a list containing the `n` next values of generator `it`
list ( itertools . islice ( it , 0 , n , 1 ) )	get list of n next values of a generator `it`
set ( a ) . intersection ( b )	compare two lists in python `a` and `b` and return matches
print ( '' . join ( map ( str , data ) ) )	convert list `data` into a string of its elements
re . match ( '\\$[0-9]+[^\\$]*$' , '$1 off delicious $5 ham.' )	match regex pattern '\\$[0-9]+[^\\$]*$' on string '$1 off delicious $5 ham.'
importlib . import_module ( '.c' , 'a.b' )	import a nested module `c.py` within `b` within `a` with importlib
importlib . import_module ( 'a.b.c' )	import a module 'a.b.c' with importlib.import_module in python 2
a = np . array ( a )	Convert array `a` to numpy array
soup . find_all ( 'div' , class_ = re . compile ( 'comment-' ) )	Find all `div` tags whose classes has the value `comment-` in a beautiful soup object `soup`
[ [ ] for _ in range ( n ) ]	a sequence of empty lists of length `n`
dict ( ( k , globals ( ) [ k ] ) for k in ( 'foo' , 'bar' ) )	create dictionary from list of variables 'foo' and 'bar' already defined
MyModel . objects . order_by ( '?' ) [ : 2 ]	get two random records from model 'MyModel' in Django
""""" ""Hello {user[name]}"" """" . format ( ** { 'user' : { 'name' : 'Markus' }} )"	Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting
list_dict = { t [ 0 ] : t for t in tuple_list }	create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key
randint ( 0 , 9 )	Generate a random integer between 0 and 9
random . randint ( a , b )	Generate a random integer between `a` and `b`
print ( ( random . randint ( 0 , 9 ) ) )	Generate random integers between 0 and 9
""""" """" """" . join ( reversed ( [ a [ i : i + 2 ] for i in range ( 0 , len ( a ) , 2 ) ] ) )"	reverse a string `a` by 2 characters at a time
pd . pivot_table ( df , index = df . index . date , columns = df . index . time , values = 'Close' )	transform time series `df` into a pivot table aggregated by column 'Close' using column `df.index.date` as index and values of column `df.index.time` as columns
any ( item [ 2 ] == 0 for item in items )	"check if the third element of all the lists in a list ""items"" is equal to zero."
[ x for x in items if x [ 2 ] == 0 ]	Find all the lists from a lists of list 'items' if third element in all sub-lists is '0'
sorted ( list ( dic . items ( ) ) , key = lambda x : x [ 1 ] [ 'Fisher' ] , reverse = True )	sort dictionary of dictionaries `dic` according to the key 'Fisher'
plt . yscale ( 'log' , nonposy = 'clip' )	plot a data logarithmically in y axis
os . listdir ( '/home/username/www/' )	list the contents of a directory '/home/username/www/'
os . listdir ( 'path' )	list all the contents of the directory 'path'.
pd . concat ( [ distancesDF , datesDF . dates ] , axis = 1 )	merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single
[ x [ 0 ] for x in a ]	get value of first index of each element in list `a`
[ i [ 0 ] for i in a ]	python how to get every first element in 2 dimensional list `a`
re . sub ( '(?<=[a-z])\\r?\\n' , ' ' , textblock )	remove line breaks from string `textblock` using regex
gzip . open ( 'file.gz' , 'rt' , encoding = 'utf-8' )	Open gzip-compressed file encoded as utf-8 'file.gz' in text mode
set ( [ 'a' , 'b' ] ) . issubset ( [ 'b' , 'a' , 'foo' , 'bar' ] )	test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`
all ( x in [ 'b' , 'a' , 'foo' , 'bar' ] for x in [ 'a' , 'b' ] )	Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`
line . translate ( None , '!@#$' )	"Remove characters ""!@#$"" from a string `line`"
line = re . sub ( '[!@#$]' , '' , line )	"Remove characters ""!@#$"" from a string `line`"
string . replace ( '1' , '' )	"Remove string ""1"" from string `string`"
a = a . replace ( char , '' )	Remove character `char` from a string `a`
a = a . replace ( char , '' )	Remove characters in `b` from a string `a`
line = line . translate ( string . maketrans ( '' , '' ) , '!@#$' )	Remove characters in '!@#$' from a string `line`
pd . concat ( [ df , pd . get_dummies ( df , '' , '' ) . astype ( int ) ] , axis = 1 ) [ order ]	binarize the values in columns of list `order` in a pandas data frame
[ 3 , 4 , 1 , 2 ]	store integer 3, 4, 1 and 2 in a list
globals ( ) [ 'something' ] = 'bob'	define global variable `something` with value `bob`
re . sub ( '([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))' , '\\1 ' , text )	insert spaces before capital letters in string `text`
print ( 'ex\xe1mple' . upper ( ) )	print unicode string `ex\xe1mple` in uppercase
[ l . split ( '\\' ) [ -1 ] for l in list_dirs ]	get last element of string splitted by '\\' from list of strings `list_dirs`
dict ( zip ( keys , values ) )	combine two sequences into a dictionary
formatter = logging . Formatter ( '%(asctime)s;%(levelname)s;%(message)s' )	customize the time format in python logging
subprocess . call ( 'test.sh otherfunc' )	call a function `otherfunc` inside a bash script `test.sh` using subprocess
""""" "" "" """" . join ( foo . split ( ) )"	remove multiple spaces in a string `foo`
list ( '{0:0b}' . format ( 8 ) )	convert decimal 8 to a list of its binary values
[ int ( x ) for x in list ( '{0:0b}' . format ( 8 ) ) ]	convert decimal integer 8 to a list of its binary values as elements
[ int ( x ) for x in bin ( 8 ) [ 2 : ] ]	convert decimal `8` to binary list
dict ( zip ( my_list , map ( my_dictionary . get , my_list ) ) )	get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`
numpy . dstack ( numpy . meshgrid ( x , y ) ) . reshape ( -1 , 2 )	cartesian product of `x` and `y` array points into single array of 2d points
driver . implicitly_wait ( 60 )	selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception
driver . switch_to_frame ( 'frameName' )	selenium webdriver switch to frame 'frameName'
time . strftime ( '{%Y-%m-%d %H:%M:%S}' )	format current date to pattern '{%Y-%m-%d %H:%M:%S}'
sorted ( [ '14:10:01' , '03:12:08' ] )	sort list `['14:10:01', '03:12:08']`
re . findall ( '(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)' , x )	find all occurrences of regex pattern '(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)' in string `x`
df1 . groupby ( [ 'key' , 'year' ] ) . size ( ) . reset_index ( )	remove duplicate rows from dataframe `df1` and calculate their frequency
sorted ( list ( dictionary . items ( ) ) , key = operator . itemgetter ( 1 ) )	sort dictionary `dictionary` in ascending order by its values
sorted ( iter ( d . items ( ) ) , key = lambda x : x [ 1 ] )	Iterate over dictionary `d` in ascending order of values
sorted ( list ( dictionary . items ( ) ) , key = lambda x : x [ 1 ] )	iterate over a python dictionary, ordered by values
np . split ( a , [ -1 ] )	split 1d array `a` into 2d array at the last element
df . pivot ( index = 'order' , columns = 'sample' )	convert dataframe `df` into a pivot table using column 'order' as index and values of column 'sample' as columns
df [ ( df [ 'A' ] >  1 ) |  ( df [ 'B' ] <  -1 ) ]	select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'.
[ list ( a ) for a in zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ]	Get the zip output as list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`
print ( df . loc [ df [ 'A' ] == 'foo' ] )	select rows of dataframe `df` whose value for column `A` is `foo`
df . loc [ df [ 'column_name' ] != some_value ]	select rows whose column value in column `column_name` does not equal `some_value` in pandas data frame
df . loc [ ~ df [ 'column_name' ] . isin ( some_values ) ]	select rows from a dataframe `df` whose value for column `column_name` is not in `some_values`
df . loc [ df [ 'column_name' ] == some_value ]	select all rows whose values in a column `column_name` equals a scalar `some_value` in pandas data frame object `df`
print ( df . loc [ df [ 'B' ] . isin ( [ 'one' , 'three' ] ) ] )	"Select rows whose value of the ""B"" column is ""one"" or ""three"" in the DataFrame `df`"
""""" """" """" . join ( map ( lambda x : x * 7 , 'map' ) )"	repeat every character for 7 times in string 'map'
os . rmdir ( )	delete an empty directory
shutil . rmtree ( path , ignore_errors = False , onerror = None )	recursively delete all contents in directory `path`
os . removedirs ( name )	recursively remove folder `name`
df . loc [ len ( df ) ] = [ '8/19/2014' , 'Jun' , 'Fly' , '98765' ]	Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`
glob . glob ( '*' )	list all files in a current directory
glob . glob ( '[!hello]*.txt' )	List all the files that doesn't contain the name `hello`
glob . glob ( 'hello*.txt' )	List all the files that matches the pattern `hello*.txt`
eval ( '20<30' )	evaluate the expression '20<30'
new_list = [ x [ : ] for x in old_list ]	Copy list `old_list` and name it `new_list`
""""" ""{:.50f}"" """" . format ( float ( a [ 0 ] / a [ 1 ] ) )"	convert scientific notation of variable `a` to decimal
df . to_sparse ( 0 )	convert dataframe `df` to integer-type sparse object
print ( [ obj . attr for obj in my_list_of_objs ] )	display attribute `attr` for each object `obj` in list `my_list_of_objs`
sum ( 1 if d [ 'success' ] else 0 for d in s )	count the number of True values associated with key 'success' in dictionary `d`
sum ( d [ 'success' ] for d in s )	get the sum of values associated with the key ‘success’ for a list of dictionaries `s`
imp . find_module ( 'os' ) [ 1 ]	get complete path of a module named `os`
( bool ( a ) != bool ( b ) )	get logical xor of `a` and `b`
( ( a and ( not b ) ) or ( ( not a ) and b ) )	get logical xor of `a` and `b`
( bool ( a ) ^  bool ( b ) )	get logical xor of `a` and `b`
xor ( bool ( a ) , bool ( b ) )	get logical xor of `a` and `b`
return ( bool ( str1 ) ^  bool ( str2 ) )	get the logical xor of two variables `str1` and `str2`
my_list . sort ( key = operator . itemgetter ( 'name' ) )	Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list
re . split ( '\\s*,\\s*|\\s*;\\s*' , 'a , b; cdf' )	split a string `a , b; cdf`  using both commas and semicolons as delimeters
[ t . strip ( ) for s in string . split ( ',' ) for t in s . split ( ';' ) ]	Split a string `string` by multiple separators `,` and `;`
f = lambda x , y : x + y	make a function `f` that calculates the sum of two integer variables `x` and `y`
instancelist = [ MyClass ( ) for i in range ( 29 ) ]	Create list `instancelist` containing 29 objects of type MyClass
{ f [ i + 1 ] : [ f [ i ] , f [ i + 2 ] ] for i in range ( 0 , len ( f ) , 3 ) }	"Make a dictionary from list `f` which is in the format of four sets of  ""val, key, val"""
struct . unpack ( '>q' , s ) [ 0 ]	convert bytes string `s`  to an unsigned integer
pd . concat ( [ students , pd . DataFrame ( marks ) ] , axis = 1 )	concatenate a series `students` onto a dataframe `marks` with pandas
alist . sort ( key = lambda x : x . foo )	Sort list `alist` in ascending order based on each of its elements' attribute `foo`
soup . select ( 'div[id$=_answer]' )	BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`
linsolve ( Matrix ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) , ( x , y , z ) )	sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`
{ k : bigdict [ k ] for k in list ( bigdict . keys ( ) ) & { 'l' , 'm' , 'n' }}	best way to extract subset of key-value pairs with keys matching 'l', 'm', or 'n' from python dictionary object
dict ( ( k , bigdict [ k ] ) for k in ( 'l' , 'm' , 'n' ) )	extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`
{ k : bigdict . get ( k , None ) for k in ( 'l' , 'm' , 'n' ) }	Get items from a dictionary `bigdict` where the keys are present in `('l', 'm', 'n')`
{ k : bigdict [ k ] for k in ( 'l' , 'm' , 'n' ) }	Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3
driver . page_source	Selenium get the entire `driver` page text
data [ : , ( [ 1 , 9 ] ) ]	extracting column `1` and `9` from array `data`
re . sub ( '\\[.*?\\]' , '' , 'abcd[e]yth[ac]ytwec' )	remove all square brackets from string 'abcd[e]yth[ac]ytwec'
re . findall ( '\\b(?:b+a)+b+\\b' , mystring )	find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`
str_list = [ tuple ( '{0:.8e}' . format ( flt ) for flt in sublist ) for sublist in lst ]	convert list `lst` of tuples of floats to list `str_list` of tuples of strings of floats in scientific notation with eight decimal point precision
str_list = [ [ '{0:.8e}' . format ( flt ) for flt in sublist ] for sublist in lst ]	convert list of sublists `lst` of floats to a list of sublists `str_list` of strings of integers in scientific notation with 8 decimal points
t = tuple ( x [ 0 ] for x in s )	Create a tuple `t` containing first element of each tuple in tuple `s`
datetime . datetime . now ( ) . strftime ( '%a' )	obtain the current day of the week in a 3 letter format from a datetime object
ord ( 'a' )	get the ASCII value of a character 'a' as an int
ord ( '\u3042' )	get the ASCII value of a character u'あ' as an int
ord ( )	get the ASCII value of a character as an int
json . load ( u )	decode JSON string `u` to a dictionary
yourdf . drop ( [ 'columnheading1' , 'columnheading2' ] , axis = 1 , inplace = True )	Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`
[ s . strip ( ) for s in input ( ) . split ( ',' ) ]	get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`
[ int ( d ) for d in str ( bin ( x ) ) [ 2 : ] ]	create a list containing the digits values from binary string `x` as elements
max ( len ( word ) for word in i )	get the max string length in list `i`
len ( max ( i , key = len ) )	get the maximum string length in nested list `i`
os . system ( my_cmd )	execute os command `my_cmd`
mylist . sort ( key = lambda x : x . lower ( ) )	sort list `mylist` alphabetically
mylist . sort ( key = str . lower )	sort list `mylist` in alphabetical order
mylist . sort ( )	sort a list of strings 'mylist'.
list . sort ( )	sort a list of strings `list`
df . set_index ( [ 'Company' , 'date' ] , inplace = True )	Set multi index on columns 'Company' and 'date' of data frame `df` in pandas.
getattr ( your_obj , x )	get the attribute `x` from object `your_obj`
s . split ( ' ' , 1 ) [ 1 ]	remove first word in string `s`
workbook = xlsxwriter . Workbook ( 'app/smth1/smth2/Expenses01.xlsx' )	save xlsxwriter file in 'app/smth1/smth2/Expenses01.xlsx' path and assign to variable `workbook`
workbook = xlsxwriter . Workbook ( 'C:/Users/Steven/Documents/demo.xlsx' )	save xlsxwriter file to 'C:/Users/Steven/Documents/demo.xlsx' path
pyplot . legend ( loc = 2 , fontsize = 'x-small' )	change legend size to 'x-small' in upper-left location
plot . legend ( loc = 2 , prop = { 'size' : 6 } )	change legend font size with matplotlib.pyplot to 6
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ]	split list `l` into `n` sized lists
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ]	split a list `l` into evenly sized chunks `n`
df [ 'a' ] . str . contains ( '-' )	check if character '-' exists in a dataframe `df` cell 'a'
"re . sub ( ""[^\\w' ]"" , '' , ""doesn't this mean it -technically- works?"" )"	remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`
print ( re . findall ( '\\d+' , '\n' . join ( re . findall ( '\xab([\\s\\S]*?)\xbb' , text ) ) ) )	find all digits between two characters `\xab` and `\xbb`in a string `text`
monthly_mean . reset_index ( ) . plot ( x = 'index' , y = 'A' )	plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index
"subprocess . check_output ( 'echo ""foo""' , shell = True )"	"get the output of a subprocess command `echo ""foo""` in command line"
[ x . encode ( 'UTF8' ) for x in EmployeeList ]	Encode each value to 'UTF8' in the list `EmployeeList`
pandas . concat ( [ df [ 'foo' ] . dropna ( ) , df [ 'bar' ] . dropna ( ) ] ) . reindex_like ( df )	combine two columns `foo` and `bar` in a pandas data frame
list ( range ( 9 ) )	generate a list of consecutive integers from 0 to 8
""""" """" """" . join ( chr ( i ) for i in myintegers )"	convert list `myintegers` into a unicode string
super ( Executive , self ) . __init__ ( * args )	inherit from class `Executive`
[ item for item in my_sequence if item != 'item' ]	Remove the string value `item` from a list of strings `my_sequence`
random . choice ( foo )	randomly select an item from list `foo`
set ( [ 'a' , 'b' ] ) . issubset ( [ 'a' , 'b' , 'c' ] )	check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`
set ( [ 'a' , 'b' ] ) . issubset ( set ( l ) )	Check if all the items in a list `['a', 'b']` exists in another list `l`
[ list ( t ) for t in zip ( * list_of_tuples ) ]	to convert a list of tuples `list_of_tuples` into list of lists
zip ( * list_of_tuples )	group a list `list_of_tuples` of tuples by values
pd . merge ( y , x , on = 'k' ) [ [ 'a' , 'b' , 'y' ] ]	merge pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y'
[ item . strip ( ) for item in my_string . split ( ',' ) ]	Split string with comma (,) and remove whitespace from a string 'my_string'
print ( ( obj . __dict__ ) )	Get all object attributes of object `obj`
dir ( )	Get all object attributes of an object
dir ( )	Get all object attributes of an object
window . set_position ( Gtk . WindowPosition . CENTER )	pygobject center window `window`
plt . rc ( 'font' , ** { 'size' : '30' } )	change the size of the sci notation to '30' above the y axis in matplotlib `plt`
df . isnull ( ) . values . any ( )	check if datafram `df` has any NaN vlaues
some_func ( * params )	unpack the arguments out of list `params` to function `some_func`
urllib . parse . unquote ( h . path . encode ( 'utf-8' ) ) . decode ( 'utf-8' )	decode encodeuricomponent in GAE
( trace_df [ 'ratio' ] >  0 ) . mean ( )	get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0
emaillist = '\n' . join ( item [ 0 ] for item in queryresult )	convert a set of tuples `queryresult` to a string `emaillist`
[ item [ 0 ] for item in queryresult ]	convert a set of tuples `queryresult` to a list of strings
emaillist = '\n' . join ( [ item [ 0 ] for item in queryresult ] )	convert a list of tuples `queryresult` to a string from the first indexes.
print ( ( 'focus object class:' , window2 . focus_get ( ) . __class__ ) )	get the widget which has currently the focus in tkinter instance `window2`
a = [ 0 ] * 10000	Initialize a list `a` with `10000` items and each item's value `0`
print ( ' ' . join ( sorted ( set ( words ) , key = words . index ) ) )	Keep only unique words in list of words `words` and join into string
random . sample ( range ( 1 , 50 ) , 6 )	generate 6 random numbers between 1 and 50
random . sample ( range ( 1 , 50 ) , 6 )	generate six unique random numbers in the range of 1 to 49.
{ k . lower ( ) : v . lower ( ) for k , v in list ( { 'My Key' : 'My Value' } . items ( ) ) }	lowercase keys and values in dictionary `{'My Key': 'My Value'}`
dict ( ( k . lower ( ) , v ) for k , v in { 'My Key' : 'My Value' } . items ( ) )	lowercase all keys and values in dictionary `{'My Key': 'My Value'}`
dict ( ( k . lower ( ) , v . lower ( ) ) for k , v in { 'My Key' : 'My Value' } . items ( ) )	Convert each key,value pair in a dictionary `{'My Key': 'My Value'}` to lowercase
[ sorted ( item ) for item in data ]	sorting the lists in list of lists `data`
names = list ( map ( lambda x : x [ 0 ] , cursor . description ) )	SQLite get a list of column names from cursor object `cursor`
os . path . abspath ( __file__ )	get the absolute path of a running python script
sorted ( matrix , key = itemgetter ( 1 ) )	sort 2d array `matrix` by row with index 1
[ index for index , letter in enumerate ( word ) if letter == 'e' ]	Get all indexes of a letter `e` from a string `word`
print ( str ( x ) . decode ( 'raw_unicode_escape' ) )	decode utf-8 code `x` into a raw unicode literal
re . findall ( '\\w' , 'abcdefg' )	split string 'abcdefg' into a list of characters
os . path . isfile ( fname )	check whether a file `fname` exists
os . path . exists ( file_path )	check whether file `file_path` exists
print ( os . path . isfile ( '/etc/password.txt' ) )	"check whether a file ""/etc/password.txt"" exists"
print ( os . path . isfile ( '/etc' ) )	"check whether a file ""/etc"" exists"
print ( os . path . exists ( '/does/not/exist' ) )	"check whether a path ""/does/not/exist"" exists"
print ( os . path . isfile ( '/does/not/exist' ) )	"check whether a file ""/does/not/exist"" exists"
print ( os . path . exists ( '/etc' ) )	"check whether a path ""/etc"" exists"
print ( os . path . exists ( '/etc/password.txt' ) )	"check whether a path ""/etc/password.txt"" exists"
list ( i for i in range ( 3 ) )	get a list each value `i` in the implicit tuple `range(3)`
writer . writeheader ( )	add field names as headers in csv constructor `writer`
[ ( a , b , c ) for a , ( b , c ) in l ]	flatten a tuple `l`
""""" ""0x{0:08X}"" """" . format ( 3652458 )"	convert 3652458 to string represent a 32bit hex number
[ ( v , k ) for k , v in list ( d . items ( ) ) ]	convert a python dictionary `d` to a list of tuples
[ ( v , k ) for k , v in d . items ( ) ]	convert dictionary of pairs `d` to a list of tuples
[ ( v , k ) for k , v in a . items ( ) ]	convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element
[ ( k , v ) for k , v in a . items ( ) ]	convert a python dictionary 'a' to a list of tuples
[ int ( x , 16 ) for x in [ 'BB' , 'A7' , 'F6' , '9E' ] ]	convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers
[ int ( x , 16 ) for x in L ]	convert the elements of list `L` from hex byte strings to hex integers
var1 , var2 = input ( 'Enter two numbers here: ' ) . split ( )	assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace
Test . objects . filter ( actions__contains = [ { 'fixed_key_1' : 'foo2' } ] )	Filter a json from a key-value pair as `{'fixed_key_1': 'foo2'}` in Django
itertools . product ( list ( range ( 2 ) ) , repeat = 4 )	create a list containing a four elements long tuples of permutations of binary values
( datetime . now ( ) - timedelta ( 1 ) ) . strftime ( '%Y-%m-%d' )	get yesterday's date as a string in `YYYY-MM-DD` format using timedelta
np . dot ( [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] ] )	Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] , format = '%d%b%Y' )	convert date strings in pandas dataframe column`df['date']` to pandas timestamps using the format '%d%b%Y'
x . reset_index ( ) . merge ( y , how = 'left' , on = 'state' , sort = False ) . sort ( 'index' )	do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`
json . loads ( request . POST . get ( 'mydata' , '{}' ) )	Create a default empty json object if no json is available in request parameter `mydata`
list ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) )	get a list of tuples of every three consecutive items in list `[1, 2, 3, 4, 5, 6, 7, 8, 9]`
list ( grouper ( 2 , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )	slice list `[1, 2, 3, 4, 5, 6, 7]` into lists of two elements each
keys . sort ( key = lambda x : map ( int , x . split ( '.' ) ) )	Sort list `keys` based on its elements' dot-seperated numbers
keys . sort ( key = lambda x : [ int ( y ) for y in x . split ( '.' ) ] )	Sort a list of integers `keys` where each value is in string format
img . transpose ( 2 , 0 , 1 ) . reshape ( 3 , -1 )	convert a 3d array `img` of dimensions 4x2x3 to a 2d array   of dimensions 3x8
df [ 'BrandName' ] . replace ( [ 'ABC' , 'AB' ] , 'A' )	replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'
df [ 'BrandName' ] = df [ 'BrandName' ] . replace ( [ 'ABC' , 'AB' ] , 'A' )	replace values `['ABC', 'AB']` in a column 'BrandName' of  pandas dataframe `df` with another value 'A'
df . sub ( df . mean ( axis = 1 ) , axis = 0 )	Subtract the mean of each row in dataframe `df` from the corresponding row's elements
""""" """" """" . join ( [ i for i in s if i . isalpha ( ) ] )"	remove all non-alphabet chars from string `s`
l = ( int ( x ) for x in s . split ( ) )	split a string `s` into integers
""""" ""42 0"" """" . split ( )"	split a string `42 0` by white spaces.
[ i for i , elem in enumerate ( bool_list , 1 ) if elem ]	get indexes of all true boolean values from a list `bool_list`
data . groupby ( data [ 'date' ] . map ( lambda x : x . year ) )	group dataframe `data` entries by year value of the date in column 'date'
np . in1d ( b , a ) . nonzero ( ) [ 0 ]	Get the indices in array `b` of each element appearing in array `a`
time . strftime ( '%l:%M%p %z on %b %d, %Y' )	display current time in readable format
ax . set_xticklabels ( ax . xaxis . get_majorticklabels ( ) , rotation = 45 )	rotate x-axis text labels of plot `ax` 45 degrees
""""" """" """" . join ( [ 'x' , 'x' , 'x' ] )"	append array of strings `['x', 'x', 'x']` into one string
x [ ( np . arange ( x . shape [ 0 ] ) != 1 ) , : , : ]	retrieve all items in an numpy array 'x' except the item of the index 1
print ( item [ 'name' ] )	pull a value with key 'name' from a json object `item`
result = sys . stdin . read ( )	read a file from redirected stdin and save to variable `result`
""""" """" """" . join ( soup . findAll ( text = True ) )"	Get all the texts without tags from beautiful soup object `soup`
data [ data [ 'Value' ] == True ]	extract all rows from dataframe `data` where the value of column 'Value' is True
""""" """" """" . join ( set ( foo ) )"	"removing duplicate characters from a string variable ""foo"""
sorted ( Profile . objects . all ( ) , key = lambda p : p . reputation )	sort objects in model `Profile` based on Theirs `reputation` attribute
df . values . flatten ( )	flatten a dataframe df to a list
users . sort ( key = lambda x : order . index ( x [ 'id' ] ) )	sort list `users` using values associated with key 'id' according to elements in list `order`
users . sort ( key = lambda x : order . index ( x [ 'id' ] ) )	sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order
r = requests . get ( '<MY_URI>' , headers = { 'Authorization' : 'TOK:<MY_TOKEN>' } )	request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header
re . findall ( 'a*?bc*?' , 'aabcc' , re . DOTALL )	match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled
a . shape [ 1 ]	get second array column length of array `a`
d . apply ( lambda row : min ( [ row [ 'A' ] , row [ 'B' ] ] ) - row [ 'C' ] , axis = 1 )	use operations like max/min within a row to a dataframe 'd' in pandas
""""" ""abcdabcva"" """" . count ( 'ab' )"	"count number of occurrences of a substring 'ab' in a string ""abcdabcva"""
[ d [ 'key' ] for d in l if 'key'   in d ]	get a list of values with key 'key' from a list of dictionaries `l`
[ d [ 'key' ] for d in l ]	get a list of values for key 'key' from a list of dictionaries `l`
[ d [ 'key' ] for d in l ]	"get a list of values for key ""key"" from a list of dictionaries in `l`"
l1 . sort ( key = lambda x : int ( x [ 0 ] ) )	order a list of lists `l1` by the first value
sorted ( [ [ 1 , 'mike' ] , [ 1 , 'bob' ] ] )	order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list
""""" ""Abc"" """" . translate ( maketrans ( 'abcABC' , 'defDEF' ) )"	replace a string `Abc` in case sensitive way using maketrans
""""" ""<br/>"" """" . join ( [ ( '%s:: %s'   % ( key , value ) ) for key , value in list ( d . items ( ) ) ] )"	dictionary `d` to string, custom format
os . system ( 'cls' )	clear terminal screen on windows
os . system ( 'clear' )	clear the terminal screen in Linux
os . system ( 'tcsh your_own_script' )	execute external commands/script `your_own_script` with csh instead of bash
[ dict ( d , count = n ) for d , n in zip ( l1 , l2 ) ]	update a list `l1` dictionaries with a key `count` and value from list `l2`
[ sum ( x ) for x in zip ( * l ) ]	create a list with the sum of respective elements of the tuples of list `l`
map ( sum , zip ( * l ) )	sum each value in a list `l` of tuples
np . count_nonzero ( ~ np . isnan ( data ) )	count the number of non-nan elements in a numpy ndarray matrix `data`
map ( list , zip ( * main_list ) )	Convert each list in list `main_list` into a tuple
request . POST . get ( 'title' , '' )	django get the value of key 'title' from POST request `request` if exists, else return empty string ''
""""" ""test.mp3"" """" . endswith ( ( '.mp3' , '.avi' ) )"	check if string `test.mp3` ends with one of the strings from a tuple `('.mp3', '.avi')`
"re . findall ( '\\[[^\\]]*\\]|""[^""]*""|\\S+' , s )"	split a string 's' by space while ignoring spaces within square braces and quotes.
data . apply ( lambda x : sorted ( x , 3 ) )	get biggest 3 values from each column of the pandas dataframe `data`
os . chdir ( 'C:/Users/Name/Desktop' )	permanently set the current directory to the 'C:/Users/Name/Desktop'
re . findall ( '\\$([^$]*)\\$' , string )	get all characters between two `$` characters in string `string`
re . findall ( '\\$(.*?)\\$' , '$sin (x)$ is an function of x' )	getting the string between 2 '$' characters in '$sin (x)$ is an function of x'
datetime . datetime . strptime ( str_date , '%m/%d/%Y' ) . date ( ) . isoformat ( )	Format a date object `str_data` into iso fomrat
A [ [ 0 , 1 ] , [ 0 , 1 ] ]	get element at index 0 of first row and element at index 1 of second row in array `A`
a [ np . arange ( 3 ) , ( 0 , 1 , 0 ) ]	subset numpy array `a` by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.
[ k for k , v in dictA . items ( ) if v . count ( 'duck' ) >  1 ]	Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`
[ [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] ]	Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)
print ( arr [ 1 , 1 ] )	get an element at index `[1,1]`in a numpy array `arr`
quadmesh . set_clim ( vmin = 0 , vmax = 15 )	Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib
my_data = genfromtxt ( 'my_file.csv' , delimiter = ',' )	read csv file 'my_file.csv' into numpy array
df = pd . read_csv ( 'myfile.csv' , sep = ',' , header = None )	read csv file 'myfile.csv' into array
np . genfromtxt ( 'myfile.csv' , delimiter = ',' )	read csv file 'myfile.csv' into array
np . genfromtxt ( 'myfile.csv' , delimiter = ',' , dtype = None )	read csv file 'myfile.csv' into array
my_string . splitlines ( ) [ 0 ]	read the first line of a string `my_string`
df . values . tolist ( )	generate a list from a pandas dataframe `df` with the column name and column values
re . sub ( '\\*\\*+' , '*' , text )	Replace repeated instances of a character '*' with a single instance in a string 'text'
re . sub ( '\\*+' , '*' , text )	"replace repeated instances of ""*"" with a single instance of ""*"""
dict ( ( k , v * dict2 [ k ] ) for k , v in list ( dict1 . items ( ) ) if k in dict2 )	multiply values of dictionary `dict` with their respective values in dictionary `dict2`
return '' . join ( random . choice ( string . lowercase ) for i in range ( length ) )	Get a random string of length `length`
sum ( len ( x ) for x in list ( food_colors . values ( ) ) )	Get total number of values in a nested dictionary `food_colors`
sum ( len ( v ) for v in food_colors . values ( ) )	count all elements in a nested dictionary `food_colors`
all ( a_list )	apply logical operator 'AND' to all elements in list `a_list`
""""" """" """" . join ( c for c in text if c not in 'aeiouAEIOU' )"	removing vowel characters 'aeiouAEIOU' from string `text`
[ ( x / y ) for x , y in zip ( a , b ) ]	Divide elements in list `a` from elements at the same index in list `b`
re . findall ( 'abc(de)fg(123)' , 'abcdefg123 and again abcdefg123' )	match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'
df . groupby ( 'type' ) . apply ( lambda x : np . mean ( np . log2 ( x [ 'v' ] ) ) )	apply function `log2` to the grouped values by 'type' in dataframe `df`
[ key for key , value in list ( my_dict . items ( ) ) if set ( value ) . intersection ( lst ) ]	get geys of dictionary `my_dict` that contain any values from list `lst`
[ key for item in lst for key , value in list ( my_dict . items ( ) ) if item in value ]	get list of keys in dictionary `my_dict` whose values contain values from list `lst`
c = [ [ ( i + j ) for i , j in zip ( e , b ) ] for e in a ]	Sum elements of tuple `b` to their respective elements of each tuple in list `a`
os . path . commonprefix ( [ '/usr/var' , '/usr/var2/log' ] )	get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'
print ( os . path . relpath ( '/usr/var/log/' , '/usr/var' ) )	get relative path of path '/usr/var' regarding path '/usr/var/log/'
grouped . filter ( lambda x : len ( x ) >  1 )	filter dataframe `grouped` where the length of each group `x` is bigger than 1
sorted ( list ( myDict . items ( ) ) , key = lambda e : e [ 1 ] [ 2 ] )	sort dictionary of lists `myDict` by the third item in each list
""""" ""hello {name}, how are you {name}, welcome {name}"" """" . format ( name = 'john' )"	Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once
df . reindex ( [ 'Z' , 'C' , 'A' ] )	reorder indexed rows `['Z', 'C', 'A']` based on a list in pandas data frame `df`
any ( isinstance ( el , list ) for el in input_list )	check if any values in a list `input_list` is a list
len ( items )	get the size of list `items`
len ( [ 1 , 2 , 3 ] )	get the size of a list `[1,2,3]`
items . __len__ ( )	get the size of object `items`
len ( )	function to get the size of object
len ( s )	get the size of list `s`
df . sort ( axis = 1 , ascending = False )	sort each row in a pandas dataframe `df` in descending order
df . groupby ( [ 'col5' , 'col2' ] ) . size ( ) . groupby ( level = 1 ) . max ( )	get count of rows in each series grouped by column 'col5' and column 'col2' of dataframe `df`
'x'   in [ 'x' , 'd' , 'a' , 's' , 'd' , 's' ]	check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`
mydict . pop ( 'key' , None )	"Delete an item with key ""key"" from `mydict`"
del mydict [ key ]	Delete an item with key `key` from `mydict`
parser . add_argument ( 'input' , nargs = '+' )	specify multiple positional arguments with argparse
pyplot . plot ( x , y , color = '#112233' )	Plot using the color code `#112233` in matplotlib pyplot
re . sub ( '<[^<]+?>' , '' , text )	strip html from strings
a [ np . in1d ( a , b ) ]	align values in array `b` to the order of corresponding values in array `a`
print ( '[%s]'   % ', ' . join ( '%.3f'   % val for val in list ) )	print numbers in list `list` with precision of 3 decimal places
print ( '['   + ', ' . join ( '%5.3f'   % v for v in l ) + ']' )	format print output of list of floats `l` to print only up to 3 decimal points
print ( [ ( '%5.3f'   % val ) for val in l ] )	print a list of floating numbers `l` using string formatting
os . chdir ( '..' )	Change the current directory one level up
print ( text . encode ( 'windows-1252' ) )	print a unicode string `text`
struct . unpack ( 'd' , struct . pack ( 'Q' , int ( s2 , 0 ) ) ) [ 0 ]	convert string representation `s2` of binary string rep of integer to floating point number
float ( int ( '-0b1110' , 0 ) )	convert a binary '-0b1110' to a float number
struct . unpack ( 'd' , b8 ) [ 0 ]	convert a binary `b8` to a float number
df . colour . value_counts ( ) . plot ( kind = 'bar' )	plot a bar graph from the column 'color' in the DataFrame 'df'
df . groupby ( 'colour' ) . size ( ) . plot ( kind = 'bar' )	plot categorical data in series `df` with kind `bar` using pandas and matplotlib
line . strip ( ) . split ( ' ' )	strip and split each line `line` on white spaces
df . groupby ( lambda idx : 0 ) . agg ( [ 'mean' , 'std' ] )	apply functions `mean` and `std` to each column in dataframe `df`
sorted ( list ( tag_weight . items ( ) ) , key = lambda x : int ( x [ 1 ] ) , reverse = True )	sort dictionary `tag_weight` in reverse order by values cast to integers
int ( math . ceil ( x ) ) - 1	find the largest integer less than `x`
it = iter ( sorted ( d . items ( ) ) )	iterate over a dictionary `d` in sorted order
return sorted ( dict . items ( ) )	iterate over a dictionary `dict` in sorted order
return iter ( sorted ( dict . items ( ) ) )	iterate over a dictionary `dict` in sorted order
last = len ( s ) - s [ : : -1 ] . index ( x ) - 1	assign the index of the last occurence of `x` in list `s` to the variable `last`
str1 = '' . join ( list1 )	concatenating values in `list1` to a string
' ' . join ( ( str ( x ) for x in L ) )	concatenating values in list `L` to a string, separate by space
str1 = '' . join ( ( str ( e ) for e in list1 ) )	concatenating values in `list1` to a string
makeitastring = '' . join ( map ( str , L ) )	concatenating values in list `L` to a string
[ x for x in L if x is not None ]	remove None value from list `L`
random . choice ( [ 1 , 2 , 3 ] )	select a random element from array `[1, 2, 3]`
x = [ [ None for _ in range ( 5 ) ] for _ in range ( 6 ) ]	creating a 5x6 matrix filled with `None` and save it as `x`
A [ ( np . random . choice ( A . shape [ 0 ] , 2 , replace = False ) ) , : ]	create a new 2D array with 2 random rows from array `A`
A [ ( np . random . randint ( A . shape [ 0 ] , size = 2 ) ) , : ]	create a new 2 dimensional array containing two random rows from array `A`
df . groupby ( df . index ) . sum ( )	combining rows in pandas by adding their values
root . findall ( '{http://www.w3.org/2002/07/owl#}Class' )	find all `owl:Class` tags by parsing xml with namespace
""""" """" """" . join ( random . choice ( string . lowercase ) for x in range ( X ) )"	generate a random string of length `x`  containing lower cased ASCII letters
sys . path . append ( '/path/to/2014_07_13_test' )	add a path `/path/to/2014_07_13_test` to system path
int ( round ( x ) )	round number `x` to nearest integer
h = int ( round ( h ) )	round number `h` to nearest integer
round ( 32.268907563 , 3 )	round number 32.268907563 up to 3 decimal points
round ( value , significantDigit )	round number `value` up to `significantDigit` decimal places
round ( 1.0005 , 3 )	round number 1.0005 up to 3 decimal places
round ( 2.0005 , 3 )	round number 2.0005 up to 3 decimal places
round ( 3.0005 , 3 )	round number 3.0005 up to 3 decimal places
round ( 4.0005 , 3 )	round number 4.0005 up to 3 decimal places
round ( 8.005 , 2 )	round number 8.005 up to 2 decimal places
round ( 7.005 , 2 )	round number 7.005 up to 2 decimal places
round ( 6.005 , 2 )	round number 6.005 up to 2 decimal places
round ( 1.005 , 2 )	round number 1.005 up to 2 decimal places
df [ 'Cat1' ] . fillna ( df [ 'Cat2' ] )	fill missing value in one column 'Cat1' with the value of another column 'Cat2'
logging . info ( 'date=%s' , date )	convert the argument `date` with string formatting in logging
logging . info ( 'date={}' . format ( date ) )	Log message of level 'info' with value of `date` in the message
{ k : int ( v ) for k , v in d . items ( ) }	convert values in dictionary `d` into integers
map ( sum , zip ( * lists ) )	sum elements at the same index of each list in list `lists`
s . decode ( 'hex' )	Convert a string `s` containing hex bytes to a hex string
binascii . a2b_hex ( s )	convert a string `s` containing hex bytes to a hex string
connection . send ( 'HTTP/1.0 200 established\r\n\r\n' )	send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`
connection . send ( 'HTTP/1.0 200 OK\r\n\r\n' )	send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`
df [ 'x' ] [ 'C' ] = 10	set the value of cell `['x']['C']` equal to 10 in dataframe `df`
np . sqrt ( np . square ( df ) . sum ( axis = 1 ) )	normalize the dataframe `df` along the rows
sorted ( set ( my_list ) )	remove identical items from list `my_list` and sort it alphabetically
max ( enumerate ( a ) , key = lambda x : x [ 1 ] ) [ 0 ]	find the index of the element with the maximum value from a list 'a'.
[ d [ 'Name' ] for d in thisismylist ]	create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`
[ ( d [ 'Name' ] , d [ 'Age' ] ) for d in thisismylist ]	create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`
model . objects . all ( ) . order_by ( '?' ) [ 0 ]	grab one random item from a database `model` in django/postgresql
os . system ( 'script2.py 1' )	run python script 'script2.py' from another python script, passing in 1 as an argument
re . findall ( '\\w+(?:-\\w+)+' , text )	python regex for hyphenated words in `text`
parser . add_argument ( '--conf' , nargs = 2 , action = 'append' )	create variable key/value pairs with argparse
random . sample ( list ( range ( 1 , 16 ) ) , 3 )	Get `3` unique items from a list
strings . sort ( key = lambda str : re . sub ( '.*%(.).*' , '\\1' , str ) )	sort list `strings` in alphabetical order based on the letter after percent character `%` in each element
strings . sort ( key = lambda str : re . sub ( '.*%' , '' , str ) )	sort a list of strings `strings` based on regex match
listy = [ [ ] for i in range ( 3 ) ]	Create list `listy` containing 3 empty lists
A = np . array ( sorted ( A , key = tuple ) )	sort numpy float array `A` column by column
[ ( x + y ) for x in '12345'   for y in 'ab' ]	Get a list from two strings `12345` and `ab` with values as each character concatenated
' Hello ' . strip ( )	"trim string "" Hello """
myString . strip ( )	trim string `myString `
' Hello ' . strip ( )	"Trimming a string "" Hello """
' Hello' . strip ( )	"Trimming a string "" Hello"""
'Bob has a cat' . strip ( )	"Trimming a string ""Bob has a cat"""
'          Hello        ' . strip ( )	"Trimming a string ""          Hello        """
str . strip ( )	Trimming a string `str`
myString . strip ( '\n' )	"Trimming ""\n"" from string `myString`"
myString . lstrip ( '\n\r' )	"left trimming ""\n\r"" from string `myString`"
myString . rstrip ( '\n\t' )	"right trimming ""\n\t"" from string `myString`"
'  Hello\n' . strip ( ' ' )	"Trimming a string ""  Hello\n"" by space"
sorted ( unsorted , key = lambda element : ( element [ 1 ] , element [ 2 ] ) )	sort a list of tuples 'unsorted' based on two elements, second and third
print ( content . decode ( 'utf8' ) )	decode string `content` to UTF-8 code
np . ma . array ( np . tile ( arr , 2 ) . reshape ( 2 , 3 ) , mask = ~ cond ) . argmax ( axis = 1 )	find the index of the maximum value in the array `arr` where the boolean condition in array `cond` is true
pd . to_datetime ( df . ID . str [ 1 : -3 ] )	convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters
df = pd . read_csv ( 'my.csv' , dtype = { 'my_column' : np . float64 } , na_values = [ 'n/a' ] )	read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n/a' as NaN value
df = pd . read_csv ( 'my.csv' , na_values = [ 'n/a' ] )	convert nan values to ‘n/a’ while reading rows from a csv `read_csv` with pandas
list ( itertools . product ( * a ) )	create a list containing all cartesian products of elements in list `a`
re . sub ( '[^A-Z]' , '' , s )	remove uppercased characters in string `s`
datetime . strptime ( '2011221' , '%Y%W%w' )	convert string '2011221' into a DateTime object using format '%Y%W%w'
codecs . open ( 'myfile' , 'r' , 'iso-8859-1' ) . read ( )	read file 'myfile' using encoding 'iso-8859-1'
[ f ( x ) for x in list ]	create a list containing elements from list `list` that are predicate to function `f`
re . findall ( '(?<!\\d)\\d{5}(?!\\d)' , s )	regex matching 5-digit substrings not enclosed with digits in `s`
[ item for item in a if sum ( item ) >  10 ]	create a list containing elements of list `a` if the sum of the element is greater than 10
cents_int = int ( round ( float ( dollars . strip ( '$' ) ) * 100 ) )	convert currency string `dollars` to decimal `cents_int`
""""" """" """" . join ( dropwhile ( lambda x : x in bad_chars , example_line [ : : -1 ] ) ) [ : : -1 ]"	remove letters from string `example_line` if the letter exist in list `bad_chars`
l = [ ]	Creating an empty list `l`
l = list ( )	Creating an empty list `l`
list ( )	Creating an empty list
[ ]	Creating an empty list
sys . exit ( 0 )	properly quit a program
s [ : 4 ] + '-'   + s [ 4 : ]	add string `-` in `4th` position of a string `s`
[ [ ] for i in range ( 3 ) ]	append 3 lists in one list
a = [ [ ] for i in range ( 3 ) ]	Initialize a list of empty lists `a` of size 3
requests . get ( url , headers = { 'referer' : my_referer } )	request URL `url` using http header `{'referer': my_referer}`
pylab . ylim ( [ 0 , 1000 ] )	set the y axis range to `0, 1000` in subplot using pylab
pd . get_dummies ( s . apply ( pd . Series ) . stack ( ) ) . sum ( level = 0 )	convert a column of list in series `s` to dummies
y = str ( int ( x , 16 ) )	convert a hex string `x` to string
a . isdigit ( )	check if string `a` is an integer
isdigit ( )	function to check if a string is a number
b . isdigit ( )	check if string `b` is a number
pd . read_csv ( StringIO ( s ) , sep = ',' , comment = '#' )	pandas read comma-separated CSV file `s` and skip commented lines starting with '#'
df [ 'Date' ] = df [ 'Date' ] . apply ( lambda x : int ( str ( x ) [ -4 : ] ) )	"pandas: change all the values of a column 'Date' into ""int(str(x)[-4:])"""
sum ( list_of_nums )	sum a list of numbers `list_of_nums`
max ( lst , key = lambda x : x [ 'score' ] )	Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function
soup . findAll ( attrs = { 'name' : 'description' } )	BeautifulSoup find all tags with attribute 'name' equal to 'description'
str ( { 'a' : 1 , 'b' : 'as df' } ) . replace ( ': ' , ':' ) . replace ( ', ' , ',' )	remove all spaces from a string converted from dictionary `{'a': 1, 'b': 'as df'}`
'{'   + ',' . join ( '{0!r}:{1!r}' . format ( * x ) for x in list ( dct . items ( ) ) ) + '}'	convert dictionary `dict` into a string formatted object
""""" """" """" . join ( parts [ 1 : ] )"	concatenate items from list `parts` into a string starting from the second element
""""" "",+"" """" . join ( c . rsplit ( '+' , 1 ) )"	insert a character ',' into a string in front of '+' character in second part of the string
a [ np . all ( a != 0 , axis = 1 ) ]	delete all rows in a numpy array `a` where any value in a row is zero `0`
""""" "" "" """" . join ( re . split ( '[^a-zA-Z]*' , 'your string' ) )"	extract only alphabetic characters from a string `your string`
re . split ( '[^a-zA-Z]*' , 'your string' )	Extract only characters from a string as a list
results_union = set ( ) . union ( * results_list )	get the union set from list of lists `results_list`
return list ( set ( itertools . chain ( * result_list ) ) )	get the union of values in list of lists `result_list`
np . any ( np . in1d ( a1 , a2 ) )	check if a numpy array `a1` contains any element of another array `a2`
return '' . join ( ch for ch in s if unicodedata . category ( ch ) [ 0 ] != 'C' )	removing control characters from a string `s`
all ( i <  j for i , j in zip ( a , b ) )	Compare if each value in list `a` is less than respective index value in list `b`
driver . find_element_by_css_selector ( '.button.c_button.s_button' ) . click ( )	python selenium click on button '.button.c_button.s_button'
os . system ( 'taskkill /im make.exe' )	kill a process `make.exe` from python script on windows
print ( select ( [ my_table , func . current_date ( ) ] ) . execute ( ) )	SQLAlchemy select records of columns of table `my_table` in addition to current date column
re . sub ( '([a-z])\\1+' , '\\1' , 'ffffffbbbbbbbqqq' )	remove duplicate characters from string 'ffffffbbbbbbbqqq'
re . sub ( '(?<!\\w)([A-Z])\\.' , '\\1' , s )	remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions
split_list = [ the_list [ i : i + n ] for i in range ( 0 , len ( the_list ) , n ) ]	Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`
re . sub ( '\\b(this|string)\\b' , '<markup>\\1</markup>' , 'this is my string' )	"match string 'this is my string' with regex '\\b(this|string)\\b'
pandas . set_option ( 'display.max_columns' , 7 )	output data of the first 7 columns of Pandas dataframe
pandas . set_option ( 'display.max_columns' , None )	Display maximum output data of columns in dataframe `pandas` that will fit into the screen
df . ix [ df . A == 0 , 'B' ] = np . nan	set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`
"driver . find_element_by_xpath ( ""//li/label/input[contains(..,'polishpottery')]"" )"	"Selecting Element ""//li/label/input"" followed by text ""polishpottery"" with Selenium WebDriver `driver`"
mylist . sort ( key = operator . itemgetter ( 'weight' , 'factor' ) )	"Sort a list of dictionaries `mylist` by keys ""weight"" and ""factor"""
mylist . sort ( key = lambda d : ( d [ 'weight' ] , d [ 'factor' ] ) )	ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'
{ x [ 1 ] : x for x in lol }	Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself
sorted ( d , key = lambda k : d [ k ] [ 1 ] )	sort keys of dictionary 'd' based on their values
int ( round ( 123 , -2 ) )	round 123 to 100
fd = os . open ( 'x' , os . O_WRONLY |  os . O_CREAT |  os . O_EXCL )	create file 'x' if file 'x' does not exist
new_list = [ x . split ( ) [ -1 ] for x in Original_List ]	get a list of last trailing words from another list  of strings`Original_List`
'hello world' [ : : ( -1 ) ]	Reverse a string 'hello world'
s [ : : ( -1 ) ]	Reverse list `s`
'' . join ( reversed ( 'foo' ) )	Reverse string 'foo'
'' . join ( reversed ( string ) )	Reverse a string `string`
'foo' [ : : ( -1 ) ]	"Reverse a string ""foo"""
a_string [ : : ( -1 ) ]	Reverse a string `a_string`
'' . join ( reversed ( s ) )	Reverse a string `s`
""""" "","" """" . join ( str ( i ) for i in range ( 100 ) if i % 4 in ( 1 , 2 ) )"	generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`.
dict ( [ ( e [ 0 ] , int ( e [ 1 ] ) ) for e in lst ] )	convert list `lst` of key, value pairs into a dictionary
sorted ( list_of_tuples , key = lambda tup : tup [ : : -1 ] )	sorting a list of tuples `list_of_tuples` where each tuple is reversed
sorted ( list_of_tuples , key = lambda tup : tup [ 1 ] )	sorting a list of tuples `list_of_tuples` by second key
numpy . concatenate ( [ a , b ] )	Concatenating two one-dimensional NumPy arrays 'a' and 'b'.
pickle . dump ( itemlist , outfile )	serialize `itemlist` to file `outfile`
outfile . write ( '\n' . join ( itemlist ) )	writing items in list `itemlist` to file `outfile`
session . query ( User ) . filter_by ( id = 123 ) . update ( { 'name' : 'Bob Marley' } )	Update a user's name as `Bob Marley` having id `123` in SQLAlchemy
r = requests . post ( 'http://wikipedia.org' , cookies = cookie )	send cookies `cookie` in a post request to url 'http://wikipedia.org' with the python requests library
sys . path . insert ( 0 , 'libs' )	insert directory 'libs' at the 0th index of current directory
datetime . datetime . now ( )	get current date and time
datetime . datetime . now ( ) . time ( )	get current time
strftime ( '%Y-%m-%d %H:%M:%S' , gmtime ( ) )	get current time in pretty format
str ( datetime . now ( ) )	get current time in string format
datetime . datetime . time ( datetime . datetime . now ( ) )	get current time
ord ( '\xff' )	convert hex '\xff' to integer
df . groupby ( [ 'PplNum' , 'RoomNum' ] ) . cumcount ( ) + 1	identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`
datetime . utcnow ( )	get current utc time
a [ -1 : ] + a [ : -1 ]	move last item of array `a` to the first position
df . set_index ( [ 'year' , 'month' , 'item' ] ) . unstack ( level = -1 )	Convert dataframe `df` to a pivot table using column 'year', 'month', and 'item' as indexes
df . pivot_table ( values = 'value' , index = [ 'year' , 'month' ] , columns = 'item' )	run a pivot with a multi-index `year` and `month` in a pandas data frame
print ( '\n\x1b[4m'   + '3'   + '\x1b[0m'   + '\n2' )	print a rational number `3/2`
range ( 10 , 0 , -1 )	iterate backwards from 10 to 0
name [ 0 ] . firstChild . nodeValue	get value of first child of xml node `name`
thread . start_new_thread ( myfunction , ( 'MyStringHere' , 1 ) )	start a new thread for `myfunction` with parameters 'MyStringHere' and 1
thread . start_new_thread ( myfunction , ( 'MyStringHere' , 1 ) )	start a new thread for `myfunction` with parameters 'MyStringHere' and 1
a . index ( max ( a ) )	get index of the first biggest element in list `a`
re . sub ( '\\.(?=[^ .])' , '. ' , para )	replace periods `.` that are not followed by periods or spaces with a period and a space `. `
[ i . split ( ) for i in re . findall ( '\\[([^\\[\\]]+)\\]' , a ) ]	convert a string `a` of letters embedded in squared brackets into embedded lists
[ d for d in a if d [ 'name' ] == 'pluto' ]	extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'
[ d for d in a if d [ 'name' ] == 'pluto' ]	extract dictionary from list of dictionaries based on a key's value.
list ( d . values ( ) )	Retrieve list of values from dictionary 'd'
re . sub ( ' +' , ' ' , s )	replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`
os . chmod ( 'my_script.sh' , 484 )	Change the mode of file 'my_script.sh' to permission number 484
df . to_csv ( 'c:\\data\\t.csv' , index = False )	write pandas dataframe `df` to the file 'c:\\data\\t.csv' without row names
re . sub ( '\\w*\\d\\w*' , '' , words ) . strip ( )	remove all words which contains number from a string `words` using regex
dogtail . rawinput . click ( 100 , 100 )	control the keyboard and mouse with dogtail in linux
datetime . strptime ( '2009/05/13 19:19:30 -0400' , '%Y/%m/%d %H:%M:%S %z' )	parse date string '2009/05/13 19:19:30 -0400' using format '%Y/%m/%d %H:%M:%S %z'
re . search ( '\\bis\\b' , String ) . start ( )	Get the position of a regex match for word `is` in a string `String`
re . search ( 'is' , String ) . start ( )	Get the position of a regex match `is` in a string `String`
tuple ( map ( int , input ( ) . split ( ',' ) ) )	input an integer tuple from user
tuple ( int ( x . strip ( ) ) for x in input ( ) . split ( ',' ) )	input a tuple of integers from user
str . decode ( 'utf-8' ) . replace ( '\u2022' , '*' ) . encode ( 'utf-8' )	replace unicode character '\u2022' in string 'str' with '*'
str . decode ( 'utf-8' ) . replace ( '\u2022' , '*' )	replace unicode characters ''\u2022' in string 'str' with '*'
np . zeros ( ( 3 , 3 ) ) . ravel ( )	convert ndarray with shape 3x3 to array
print ( os . name )	get the name of the OS
min ( list , key = lambda x : float ( 'inf' ) if math . isnan ( x [ 1 ] ) else x [ 1 ] )	Get a minimum value from a list of tuples `list` with values of type `string` and `float` with nan
a = [ ( sum ( x ) / len ( x ) ) for x in zip ( * a ) ]	Find average of a nested list `a`
logging . info ( 'Log message' , extra = { 'app_name' : 'myapp' } )	Log info message 'Log message' with attributes `{'app_name': 'myapp'}`
df . applymap ( lambda x : isinstance ( x , ( int , float ) ) )	replace values of dataframe `df` with True if numeric
sorted ( l , key = lambda x : int ( re . search ( '\\d+' , x ) . group ( 0 ) ) )	sort list `l` based on its elements' digits
self . root . destroy ( )	close the window in tkinter
df . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] . mean ( axis = 1 )	get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`
df [ df . index . map ( lambda x : x [ 1 ] . endswith ( '0630' ) ) ]	filter dataframe `df` by sub-level index '0630' in pandas
db . session . delete ( page )	flask-sqlalchemy delete row `page`
""""" """" """" . join ( chr ( ord ( c ) ) for c in 'Andr\xc3\xa9' )"	Format a string `u'Andr\xc3\xa9'` that has unicode characters
""""" """" """" . join ( chr ( ord ( c ) ) for c in 'Andr\xc3\xa9' ) . decode ( 'utf8' )"	convert a unicode 'Andr\xc3\xa9' to a string
os . listdir ( path )	list all files in directory `path`
os . rename ( dir , dir + '!' )	rename file `dir` to `dir` + '!'
""""" ""-"" """" . join ( a + b for a , b in zip ( s [ : : 2 ] , s [ 1 : : 2 ] ) )"	Insert a character `-` after every two elements in a string `s`
print ( '%.3f'   % 3.1415 )	printing numbers rounding up to third decimal place
data [ 0 ] [ 'f' ] = var	add variable `var` to key 'f' of first element in JSON data `data`
print ( a_module . __file__ )	get the path of module `a_module`
print ( os . getcwd ( ) )	get the path of the current python module
path = os . path . abspath ( amodule . __file__ )	get the path of the python module `amodule`
self . myList . extend ( [ 0 ] * ( 4 - len ( self . myList ) ) )	fill list `myList` with 4 0's
df [ ~ df . index . duplicated ( ) ]	drop duplicate indexes in a pandas data frame `df`
foo ( * i )	unpack elements of list `i` as arguments into function `foo`
[ ( '%.2d'   % i ) for i in range ( 16 ) ]	generate list of numbers in specific format using string formatting precision.
sorted ( iter ( mydict . items ( ) ) , key = lambda tup : sum ( tup [ 1 ] ) , reverse = True ) [ : 3 ]	sort dictionary `mydict` in descending order based on the sum of each value in it
heapq . nlargest ( 3 , iter ( mydict . items ( ) ) , key = lambda tup : sum ( tup [ 1 ] ) )	get top `3` items from a dictionary `mydict` with largest sum of values
[ 'a' , 'b' ] . index ( 'b' )	get index of character 'b' in list '['a', 'b']'
plt . setp ( legend . get_title ( ) , fontsize = 'xx-small' )	set font size of axis legend of plot `plt` to 'xx-small'
[ x [ 1 ] for x in elements ]	extract the 2nd elements from a list of tuples
np . diag ( np . rot90 ( array ) )	get the opposite diagonal of a numpy array `array`
list ( chain . from_iterable ( a ) )	flatten list of tuples `a`
re . sub ( '\\s{2,}' , '|' , line . strip ( ) )	substitute two or more whitespace characters with character '|' in string `line`
print ( ( '%.2f'   % a ) )	print float `a` with two decimal points
print ( ( '{0:.2f}' . format ( a ) ) )	print float `a` with two decimal points
print ( ( '{0:.2f}' . format ( round ( a , 2 ) ) ) )	print float `a` with two decimal points
print ( ( '%.2f'   % round ( a , 2 ) ) )	print float `a` with two decimal points
( '%.2f'   % 13.9499999 )	limit float 13.9499999 to two decimal points
( '%.2f'   % 3.14159 )	limit float 3.14159 to two decimal points
float ( '{0:.2f}' . format ( 13.95 ) )	limit float 13.949999999999999 to two decimal points
'{0:.2f}' . format ( 13.95 )	limit float 13.949999999999999 to two decimal points
DataFrame . from_csv ( 'c:/~/trainSetRel3.txt' , sep = '\t' )	load a tsv file `c:/~/trainSetRel3.txt` into a pandas data frame
dateutil . parser . parse ( '2013/09/11 00:17 +0900' )	set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'
cur . mogrify ( 'SELECT * FROM table WHERE column IN %s;' , ( ( 1 , 2 , 3 ) , ) )	pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;'
sum ( [ sum ( x ) for x in [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ] )	sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]]`
next ( iter ( dict . values ( ) ) )	Retrieve an arbitrary value from dictionary `dict`
next ( iter ( list ( dict . values ( ) ) ) )	access an arbitrary value from dictionary `dict`
df . groupby ( [ 'Month' , 'Fruit' ] ) . sum ( ) . unstack ( level = 0 )	group dataframe `df` by columns 'Month' and 'Fruit'
sorted ( mylist , key = lambda x : order . index ( x [ 1 ] ) )	sort list `mylist` of tuples by arbitrary key from list `order`
sorted ( persons , key = lambda x : x [ 'passport' ] [ 'birth_info' ] [ 'date' ] )	sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`
urlparse . urldefrag ( 'http://www.address.com/something#something' )	remove the fragment identifier `#something` from a url `http://www.address.com/something#something`
urllib . request . urlretrieve ( 'http://example.com/file.ext' , '/path/to/dir/filename.ext' )	download to a directory '/path/to/dir/filename.ext' from source 'http://example.com/file.ext'
list ( set ( frozenset ( item ) for item in L ) )	remove all duplicates from a list of sets `L`
[ set ( item ) for item in set ( frozenset ( item ) for item in L ) ]	remove duplicates from a list of sets 'L'
p . terminate ( )	terminate process `p`
del mylist [ : ]	delete all values in a list `mylist`
ctypes . windll . user32 . MessageBoxW ( 0 , 'Error' , 'Error' , 0 )	throw an error window in python in windows
str_list = list ( [ _f for _f in str_list if _f ] )	remove empty strings from list `str_list`
re . sub ( '[\\ \\n]{2,}' , '' , yourstring )	remove newlines and whitespace from string `yourstring`
re . sub ( '\\.[^.]+$' , '' , s )	remove the last dot and all text beyond it in string `s`
A [ np . all ( np . any ( A - B [ : , ( None ) ] , axis = 2 ) , axis = 0 ) ]	remove elements from an array `A` that are in array `B`
a . to_csv ( 'test.csv' , cols = [ 'sum' ] )	Write column 'sum' of DataFrame `a` to csv file 'test.csv'
exec ( compile ( open ( 'test2.py' ) . read ( ) , 'test2.py' , 'exec' ) )	"call a Python script ""test2.py"""
subprocess . call ( 'test1.py' , shell = True )	"call a Python script ""test1.py"""
sorted ( zipped , key = lambda x : x [ 1 ] )	sort a zipped list `zipped` using lambda function
sorted ( list ( y . items ( ) ) , key = lambda x : ( x [ 1 ] , x [ 0 ] ) , reverse = True )	sort a dictionary `y` by value then by key
soup . find_all ( 'div' , class_ = 'crBlock ' )	using beautifulsoup to select div blocks within html `soup`
[ element for i , element in enumerate ( centroids ) if i not in index ]	remove elements from list `centroids` the indexes of which are in array `index`
list ( set ( listA ) &  set ( listB ) )	list duplicated elements in two lists `listA` and `listB`
urllib . request . urlretrieve ( 'http://randomsite.com/file.gz' , 'file.gz' )	"download file from http url ""http://randomsite.com/file.gz"" and save as ""file.gz"""
file_name = wget . download ( file_url )	download file from http url `file_url`
ax . set_yticklabels ( [ '\xe9' , '\xe3' , '\xe2' ] )	set an array of unicode characters `[u'\xe9', u'\xe3', u'\xe2']` as labels in Matplotlib `ax`
list ( itertools . product ( list ( range ( - x , y ) ) , repeat = dim ) )	get a list of all integer points in a `dim` dimensional hypercube with coordinates from `-x` to `y` for all dimensions
print ( s . encode ( 'unicode_escape' ) )	convert unicode string `s` into string literals
'Hello %s'   % ', ' . join ( my_args )	how to format a list of arguments `my_args` into a string
re . split ( '(ddd)' , 'aaa bbb ccc ddd eee fff' , 1 )	search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'
re . split ( '(d(d)d)' , 'aaa bbb ccc ddd eee fff' , 1 )	regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'
pd . DataFrame ( d )	convert a list of dictionaries `d` to pandas data frame
""""" ""This is a string"" """" . split ( )"	"split string ""This is a string"" into words that do not contain whitespaces"
""""" ""This     is a     string"" """" . split ( )"	"split string ""This     is a     string"" into words that does not contain whitespaces"
woduplicates = list ( set ( lseperatedOrblist ) )	remove all duplicate items from a list `lseperatedOrblist`
sum ( [ ( i * j ) for i , j in list ( itertools . combinations ( l , 2 ) ) ] )	sum of product of combinations in a list `l`
re . compile ( '{}-\\d*' . format ( user ) )	regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits.
[ float ( i ) for i in lst ]	convert all of the items in a list `lst` to float
writer . writerow ( A )	write a tuple of tuples `A` to a csv file using python
writer . writerows ( A )	Write all tuple of tuples `A` at once into csv file
""""" ""{} %s {}"" """" . format ( 'foo' , 'bar' )"	"python, format string ""{} %s {}"" to have 'foo' and 'bar' in the first and second positions"
example = [ x . replace ( '\r\n' , '' ) for x in example ]	Truncate `\r\n` from each string in a list of string `example`
[ i . partition ( '\t' ) [ -1 ] for i in l if '\t'   in i ]	split elements of a list `l` by '\t'
re . search ( 'Test(.*)print' , testStr , re . DOTALL )	search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\n'
next = driver . find_element_by_css_selector ( 'li.next>a' )	find button that is in li class `next` and assign it to variable `next`
os . stat ( 'C:\\Python27\\Lib\\genericpath.py' ) . st_size	get the  size of file 'C:\\Python27\\Lib\\genericpath.py'
imtag = re . match ( '<img.*?>' , line ) . group ( 0 )	return a string from a regex match with pattern '<img.*?>' in string 'line'
os . rename ( 'Joe Blow' , 'Blow, Joe' )	Rename a folder `Joe Blow` to `Blow, Joe`
re . findall ( '(?=(\\w\\w))' , 'hello' )	find overlapping matches from a string `hello` using regex
bin ( 173 )	convert 173 to binary string
int ( '01010101111' , 2 )	convert binary string '01010101111' to integer
int ( '010101' , 2 )	convert binary string '010101' to integer
int ( '0b0010101010' , 2 )	convert binary string '0b0010101010' to integer
bin ( 21 )	convert 21 to binary string
int ( '11111111' , 2 )	convert binary string '11111111' to integer
re . sub ( '$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$' , '' , s )	delete all digits in string `s` that are not directly attached to a word character
re . sub ( '\\b\\d+\\b' , '' , s )	delete digits at the end of string `s`
s = re . sub ( '^\\d+\\s|\\s\\d+\\s|\\s\\d+$' , ' ' , s )	Delete self-contained digits from string `s`
s . split ( ':' , 1 ) [ 1 ]	truncate string `s` up to character ':'
print ( s . split ( ',' ) )	print a string `s` by splitting with comma `,`
mystring . split ( ',' )	"Create list  by splitting string `mystring` using "","" as delimiter"
re . sub ( '\\((\\w+)\\)' , '\\1' , s )	remove parentheses only around single words in a string `s` using regex
webbrowser . open_new ( url )	webbrowser open url `url`
webbrowser . open ( 'http://example.com' )	webbrowser open url 'http://example.com'
self . pushButton . setStyleSheet ( 'background-color: red' )	change the background colour of the button `pushbutton` to red
[ x ( y ) for x , y in zip ( functions , values ) ]	apply a list of functions named 'functions' over a list of values named 'values'
wx . TextCtrl ( self , -1 , size = ( 300 , -1 ) )	modify the width of a text control as `300` keeping default height in wxpython
imshow ( imageArray , cmap = 'Greys_r' )	display a grayscale image from array of pixels `imageArray`
df . fillna ( 0 )	replace all the nan values with 0 in a pandas dataframe `df`
df . toPandas ( ) . to_csv ( 'mycsv.csv' )	export a table dataframe `df` in pyspark to csv 'mycsv.csv'
df . write . csv ( 'mycsv.csv' )	Write DataFrame `df` to csv file 'mycsv.csv'
sum ( x [ 1 ] for x in structure )	get the sum of each second value from a list of tuple `structure`
df . groupby ( 'STNAME' ) [ 'COUNTY_POP' ] . agg ( lambda x : x . nlargest ( 3 ) . sum ( ) )	sum the 3 largest integers in groupby by 'STNAME' and 'COUNTY_POP'
datetime . strptime ( '21/11/06 16:30' , '%d/%m/%y %H:%M' )	Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M'
os . path . dirname ( os . path . abspath ( __file__ ) )	get current script directory
re . sub ( '(.)' , '\\1\\1' , text . read ( ) , 0 , re . S )	double each character in string `text.read()`
""""" """" """" . join ( ( 'a' , 'b' , 'c' , 'd' , 'g' , 'x' , 'r' , 'e' ) )"	concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string
os . path . dirname ( os . path . abspath ( __file__ ) )	get full path of current directory
""""" ""{0:.{1}%}"" """" . format ( value , digits )"	"variable number of digits `digits` in variable `value` in format string ""{0:.{1}%}"""
self . request . url	get current requested url
random_choice = random . choice ( choices )	get a random item from list `choices`
length = sum ( len ( s ) for s in strings )	sum the length of all strings in a list `strings`
s = sorted ( s , key = lambda x : ( x [ 1 ] , x [ 2 ] ) )	sort a list `s` by first and second attributes
s . sort ( key = operator . itemgetter ( 1 , 2 ) )	sort a list of lists `s` by second and third element in each list.
con . commit ( )	Mysql commit current transaction
[ k for k in lst if 'ab'   in k ]	filtering out strings that contain 'ab' from a list of strings `lst`
output = '' . join ( item [ 0 ] . upper ( ) for item in input . split ( ) )	find the first letter of each element in string `input`
CustomPK . _meta . pk . name	get name of primary field `name` of django model `CustomPK`
len ( s . split ( ) )	count the number of words in a string `s`
np . einsum ( 'ji,i->j' , a , b )	multiply array `a` and array `b`respective elements then sum each row of the new array
sys . version	check python version
sys . version_info	check python version
print ( '\\num{{{0:.2g}}}' . format ( 1000000000.0 ) )	format number 1000000000.0 using latex notation
x = [ [ ] for i in range ( 3 ) ]	Initialize a list of empty lists `x` of size 3
{{ my_variable |  forceescape |  linebreaks }}	apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`
zip ( * [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] )	zip a list of tuples `[(1, 4), (2, 5), (3, 6)]` into a list of tuples according to original tuple index
[ list ( group ) for key , group in itertools . groupby ( data , operator . itemgetter ( 1 ) ) ]	split a list of tuples `data` into sub-lists of the same tuple field using itertools
list ( 'hello' )	Convert a string into a list
df [ 'A_perc' ] = df [ 'A' ] / df [ 'sum' ]	create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`
os . walk ( directory )	getting a list of all subdirectories in the directory `directory`
[ x [ 0 ] for x in os . walk ( directory ) ]	get a list of all subdirectories in the directory `directory`
{ i : 'updated'   for i , j in list ( d . items ( ) ) if j != 'None' }	update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`
dict ( ( k , 'updated' ) for k , v in d . items ( ) if v is None )	Filter a dictionary `d` to remove keys with value None and replace other values with 'updated'
dict ( ( k , 'updated' ) for k , v in d . items ( ) if v != 'None' )	Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated'
df . groupby ( key_columns ) . size ( )	count number of rows in a group `key_columns` in pandas groupby object `df`
result = [ sum ( b ) for b in a ]	return list `result` of sum of elements of each list `b` in list of lists `a`
any ( d [ 'site' ] == 'Superuser'   for d in data )	What's the best way to search for a Python dictionary value in a list of dictionaries?
nodes = [ [ Node ( ) for j in range ( cols ) ] for i in range ( rows ) ]	create a 2D array of `Node` objects with dimensions `cols` columns and `rows` rows
print ( os . path . splitext ( '/home/user/somefile.txt' ) [ 0 ] + '.jpg' )	replace extension '.txt' in basename '/home/user/somefile.txt' with extension '.jpg'
pygame . display . set_mode ( ( 0 , 0 ) , pygame . FULLSCREEN )	Set the resolution of a monitor as `FULLSCREEN` in pygame
ax . set_title ( '$%s \\times 10^{%s}$'   % ( '3.5' , '+20' ) )	format float `3.5e+20`  to `$3.5 \\times 10^{20}$` and set as title of matplotlib plot `ax`
print ( os . path . getmtime ( '/tmp' ) )	Get the age of directory (or file) `/tmp` in seconds.
today . strftime ( '%B' )	how to get month name of datetime `today`
today . strftime ( '%B' )	get month name from a datetime object `today`
[ j for i in x for j in i ]	Convert nested list `x` into a flat list
print ( list ( itertools . chain . from_iterable ( a ) ) )	get each value from a list of lists `a` using itertools
datetime . datetime . strptime ( 'January 11, 2010' , '%B %d, %Y' ) . strftime ( '%A' )	convert date string 'January 11, 2010'  into day of week
a . remove ( 'b' )	"remove item ""b"" in list `a`"
a . remove ( c )	remove item `c` in list `a`
a . remove ( 6 )	delete the element 6 from list `a`
a . remove ( 6 )	delete the element 6 from list `a`
re . findall ( '(?=(a.*?a))' , 'a 1 a 2 a 3 a 4 a' )	Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'.
np . einsum ( 'ij,kj->jik' , X , X )	outer product of each column of a 2d `X` array to form a 3d array `X`
some_list [ ( -1 ) ]	Getting the last element of list `some_list`
some_list [ ( -2 ) ]	Getting the second to last element of list `some_list`
some_list [ ( - n ) ]	gets the `n` th-to-last element in list `some_list`
alist [ ( -1 ) ]	get the last element in list `alist`
astr [ ( -1 ) ]	get the last element in list `astr`
print ( [ u for v in [ [ i , i ] for i in range ( 5 ) ] for u in v ] )	make a list of integers from 0 to `5` where each second element is a duplicate of the previous element
[ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ]	create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`
[ ( i // 2 ) for i in range ( 10 ) ]	create a list of integers from 1 to 5 with each value duplicated
s [ s . find ( '\n' ) + 1 : s . rfind ( '\n' ) ]	remove first and last lines of string `s`
{ ( x ** 2 ) for x in range ( 100 ) }	create dict of squared int values in range of 100
zip ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )	zip lists `[1, 2], [3, 4], [5, 6]` in a list
zip ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )	zip lists in a list [[1, 2], [3, 4], [5, 6]]
requests . get ( 'https://www.mysite.com/' , auth = ( 'username' , 'pwd' ) )	request page 'https://www.mysite.com/' with credentials of username 'username' and password 'pwd'
x [ 2 : ]	get a new string from the 3rd character to the end of the string `x`
x [ : 2 ]	get a new string including the first two characters of string `x`
x [ : ( -2 ) ]	get a new string including all but the last character of string `x`
x [ ( -2 ) : ]	get a new string including the last two characters of string `x`
x [ 2 : ( -2 ) ]	get a new string with the 3rd to the second-to-last characters of string `x`
some_string [ : : ( -1 ) ]	reverse a string `some_string`
'H-e-l-l-o- -W-o-r-l-d' [ : : 2 ]	"select alternate characters of ""H-e-l-l-o- -W-o-r-l-d"""
s = s [ beginning : ( beginning + LENGTH ) ]	select a substring of `s` beginning at `beginning` of length `LENGTH`
sys . exit ( )	terminate the program
quit ( )	terminate the program
sys . exit ( 'some error message' )	"Terminating a Python script with error message ""some error message"""
data [ 'City' ] . encode ( 'ascii' , 'ignore' )	encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters
pd . read_csv ( 'D:/Temp/tt.csv' , names = list ( 'abcdef' ) )	read a ragged csv file `D:/Temp/tt.csv` using `names` parameter in pandas
df . stack ( ) . groupby ( level = 0 ) . first ( )	get first non-null value per each row from dataframe `df`
""""" ""{0} {1}"" """" . format ( 10 , 20 )"	print two numbers `10` and `20` using string formatting
""""" ""{1} {ham} {0} {foo} {1}"" """" . format ( 10 , 20 , foo = 'bar' , ham = 'spam' )"	replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`
changed_list = [ ( int ( f ) if f . isdigit ( ) else f ) for f in original_list ]	create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers
dict ( zip ( keys , zip ( * data ) ) )	get a dictionary with keys from one list `keys` and values from other list `data`
apple . decode ( 'iso-8859-1' ) . encode ( 'utf8' )	convert string `apple` from iso-8859-1/latin1 to utf-8
df . to_csv ( 'filename.csv' , header = False )	Exclude column names when writing dataframe `df` to a csv file `filename.csv`
print ( '{0}:<15}}{1}:<15}}{2}:<8}}' . format ( '1' , '2' , '3' ) )	Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`
max ( ld , key = lambda d : d [ 'size' ] )	get dictionary with max value of key 'size' in list of dicts `ld`
""""" ""{0}\\w{{2}}b{1}\\w{{2}}quarter"" """" . format ( 'b' , 'a' )"	"format parameters 'b' and 'a' into plcaeholders in string ""{0}\\w{{2}}b{1}\\w{{2}}quarter"""
user = models . ForeignKey ( 'User' , unique = True )	django create a foreign key column `user` and link it to table 'User'
re . compile ( '^([^A]*)AA([^A]|AA)*$' )	write a regex pattern to match even number of letter `A`
b = np . concatenate ( ( a , a ) , axis = 0 )	join Numpy array `b` with Numpy array 'a' along axis 0
sorted ( l , key = lambda x : x . replace ( '0' , 'Z' ) )	custom sort an alphanumeric list `l`
ax . set_yscale ( 'log' )	plot logarithmic axes with matplotlib
os . environ [ 'HOME' ]	"Access environment variable ""HOME"""
os . environ [ 'HOME' ]	"get value of environment variable ""HOME"""
print ( os . environ )	print all environment variables
os . environ	get all environment variables
print ( os . environ . get ( 'KEY_THAT_MIGHT_EXIST' ) )	get value of the environment variable 'KEY_THAT_MIGHT_EXIST'
print ( os . getenv ( 'KEY_THAT_MIGHT_EXIST' , default_value ) )	get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`
print ( os . environ . get ( 'HOME' , '/home/username/' ) )	get value of the environment variable 'HOME' with default value '/home/username/'
print ( dict ( [ s . split ( '=' ) for s in my_list ] ) )	create a dictionary containing each string in list `my_list` split by '=' as a key/value pairs
min ( enumerate ( a ) , key = lambda x : abs ( x [ 1 ] - 11.5 ) )	find the index of element closest to number 11.5 in list `a`
"e = root . xpath ( './/a[contains(text(),""TEXT A"")]' )"	"find element `a` that contains string ""TEXT A"" in file `root`"
"e = root . xpath ( './/a[starts-with(text(),""TEXT A"")]' )"	Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`
"e = root . xpath ( './/a[text()=""TEXT A""]' )"	find the element that holds string 'TEXT A' in file `root`
c = [ b [ i ] for i in index ]	create list `c` containing items from list `b` whose index is in list `index`
np . dot ( a [ : , ( None ) ] , b [ ( None ) , : ] )	get the dot product of two one dimensional numpy arrays
np . outer ( a , b )	multiplication of two 1-dimensional arrays  in numpy
subprocess . call ( [ './abc.py' , arg1 , arg2 ] )	execute a file './abc.py' with arguments `arg1` and `arg2` in python shell
df [ [ 'value' ] ] . fillna ( df . groupby ( 'group' ) . transform ( 'mean' ) )	Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`
re . sub ( '(.)(?=.)' , '\\1-' , s )	separate each character in string `s` by '-'
re . sub ( '(?<=.)(?=.)' , '-' , str )	concatenate '-' in between characters of string `str`
i , j = np . where ( a == value )	get the indexes of the x and y axes in Numpy array `np` where variable `a` is equal to variable `value`
print ( collections . Counter ( s ) . most_common ( 1 ) [ 0 ] )	print letter that appears most frequently in string `s`
float ( re . findall ( '(?:^|_)'   + par + '(\\d+\\.\\d*)' , dir ) [ 0 ] )	find float number proceeding sub-string `par` in string `dir`
re . findall ( '[^a]' , 'abcd' )	Get all the matches from a string `abcd` if it begins with a character `a`
print ( [ item for item in dir ( adfix ) if not item . startswith ( '__' ) ] )	get a list of variables from module 'adfix.py' in current module.
[ x [ 0 ] for x in rows ]	get the first element of each tuple in a list `rows`
res_list = [ x [ 0 ] for x in rows ]	get a list `res_list` of the first elements of each tuple in a list of tuples `rows`
pd . concat ( [ x ] * 5 , ignore_index = True )	duplicate data in pandas dataframe `x` for 5 times
pd . concat ( [ x ] * 5 )	Get a repeated pandas data frame object `x` by `5` times
sorted_list_of_keyvalues = sorted ( list ( ips_data . items ( ) ) , key = item [ 1 ] [ 'data_two' ] )	sort json `ips_data` by a key 'data_two'
pd . read_json ( elevations )	read json `elevations` to pandas dataframe `df`
numpy . random . choice ( numpy . arange ( 1 , 7 ) , p = [ 0.1 , 0.05 , 0.05 , 0.2 , 0.4 , 0.2 ] )	generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]
df . loc [ df [ 'Value' ] . idxmax ( ) ]	Return rows of data associated with the maximum value of column 'Value' in dataframe `df`
re . findall ( '^(.+?)((.+)\\3+)$' , '42344343434' ) [ 0 ] [ : -1 ]	find recurring patterns in a string '42344343434'
np . fromstring ( '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' , dtype = '<f4' )	convert binary string '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' to numpy array
np . fromstring ( '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' , dtype = '>f4' )	convert binary string to numpy array
cursor . execute ( 'INSERT INTO table VALUES (?, ?, ?)' , ( var1 , var2 , var3 ) )	insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'
cursor . execute ( 'INSERT INTO table VALUES (%s, %s, %s)' , ( var1 , var2 , var3 ) )	Execute a sql statement using variables `var1`, `var2` and `var3`
df [ 'stats' ] . str [ 1 : -1 ] . str . split ( ',' , expand = True ) . astype ( float )	pandas split strings in column 'stats' by ',' into columns in dataframe `df`
df [ 'stats' ] . str [ 1 : -1 ] . str . split ( ',' ) . apply ( pd . Series ) . astype ( float )	split string in column 'stats' by ',' into separate columns in dataframe `df`
df [ 'stats' ] . apply ( pd . Series )	Unpack column 'stats' in dataframe `df` into a series of columns
p . wait ( )	wait for shell command `p` evoked by  subprocess.Popen to complete
s . encode ( 'utf8' )	encode string `s` to utf-8 code
datetime . datetime . strptime ( '01-Jan-1995' , '%d-%b-%Y' )	parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'
copyfile ( src , dst )	copy a file from `src` to `dst`
shutil . copy2 ( '/dir/file.ext' , '/new/dir/newname.ext' )	"copy file ""/dir/file.ext"" to ""/new/dir/newname.ext"""
shutil . copy2 ( '/dir/file.ext' , '/new/dir' )	copy file '/dir/file.ext' to '/new/dir'
print ( ', ' . join ( str ( x ) for x in list_of_ints ) )	print a list of integers `list_of_ints` using string formatting
df [ [ 'A' , 'B' ] ] . multiply ( df [ 'C' ] , axis = 'index' )	multiply column 'A' and column 'B' by column 'C' in datafram `df`
hex ( ord ( 'a' ) )	convert string 'a' to hex
sum ( j ** i for i , j in enumerate ( l , 1 ) )	Get the sum of values to the power of their indices in a list `l`
""""" "" "" """" . join ( s . split ( ) )"	remove extra white spaces & tabs from a string `s`
s = s . replace ( ',' , '' )	replace comma in string `s` with empty string ''
frame . resample ( '1H' ) . agg ( { 'radiation' : np . sum , 'tamb' : np . mean } )	Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`
df = pd . DataFrame . from_dict ( { k : v for k , v in list ( nvalues . items ( ) ) if k != 'y3' } )	create a pandas dataframe `df` from elements of a dictionary `nvalues`
first_name = request . args . get ( 'firstname' )	Flask get value of request variable 'firstname'
first_name = request . form . get ( 'firstname' )	Flask get posted form data 'firstname'
[ s [ : 5 ] for s in buckets ]	get a list of substrings consisting of the first 5 characters of every string in list `buckets`
the_list . sort ( key = lambda item : ( - len ( item ) , item ) )	sort list `the_list` by the length of string followed by alphabetical order
df = df . set_index ( [ 'TRX_DATE' ] )	Set index equal to field 'TRX_DATE' in dataframe `df`
list ( accumulate ( list ( range ( 10 ) ) ) )	List comprehension with an accumulator in range of 10
datetime . datetime . strptime ( '2013-1-25' , '%Y-%m-%d' ) . strftime ( '%m/%d/%y' )	How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m/%d/%y'
datetime . datetime . strptime ( '2013-1-25' , '%Y-%m-%d' ) . strftime ( '%-m/%d/%y' )	convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m/%d/%y'
df2 = df . ix [ : , ( ~ df . columns . str . endswith ( 'prefix' ) ) ]	get a dataframe `df2` that contains all the columns of dataframe `df` that do not end in `prefix`
new_list = my_list [ -10 : ]	create list `new_list` containing the last 10 elements of list `my_list`
my_list [ -10 : ]	get the last 10 elements from a list `my_list`
np . array ( x . _data ) . reshape ( x . size [ : : -1 ] ) . T	convert matlab engine array `x` to a numpy ndarray
df . groupby ( level = 0 , as_index = False ) . nth ( 0 )	select the first row grouped per level 0 of dataframe `df`
numpy . concatenate ( LIST , axis = 0 )	concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis
""""" ""\\xc3\\x85あ"" """" . encode ( 'utf-8' ) . decode ( 'unicode_escape' )"	"convert and escape string ""\\xc3\\x85あ"" to UTF-8 code"
""""" ""\\xc3\\x85あ"" """" . encode ( 'utf-8' )"	"encode string ""\\xc3\\x85あ"" to bytes"
[ j for i in zip ( a , b ) for j in i ]	interleave the elements of two lists `a` and `b`
[ j for i in zip ( a , b ) for j in i ]	merge two lists `a` and `b` into a single list
print ( [ s . replace ( '8' , '' ) for s in lst ] )	delete all occureces of `8` in each string `s` in list `lst`
""""" "","" """" . join ( 'Hello' )"	Split string `Hello` into a string of letters seperated by `,`
Content . objects . all ( ) . order_by ( '?' ) [ : 100 ]	in Django, select 100 random records from the database `Content.objects`
A [ np . arange ( A . shape [ 0 ] ) [ : , ( None ) ] , B ]	create a NumPy array containing elements of array `A` as pointed to by index in array `B`
df . pivot_table ( index = 'saleid' , columns = 'upc' , aggfunc = 'size' , fill_value = 0 )	pivot dataframe `df` so that values for `upc` become column headings and values for `saleid` become the index
re . findall ( '([a-z]*)' , 'f233op' )	match zero-or-more instances of lower case alphabet characters in a string `f233op `
re . findall ( '([a-z])*' , 'f233op' )	match zero-or-more instances of lower case alphabet characters in a string `f233op `
re . split ( '_for_' , 'happy_hats_for_cats' )	split string 'happy_hats_for_cats' using string '_for_'
re . split ( '_(?:for|or|and)_' , 'sad_pandas_and_happy_cats_for_people' )	Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or' or 'for'
[ re . split ( '_(?:f?or|and)_' , s ) for s in l ]	Split a string `l` by multiple words `for` or `or` or `and`
[ dict ( zip ( k , x ) ) for x in v ]	zip keys with individual values in lists `k` and `v`
sorted ( lst , reverse = True )	Sort a list 'lst' in descending order.
order_array . sort ( order = [ 'year' , 'month' , 'day' ] )	sort array `order_array` based on column 'year', 'month' and 'day'
df . sort ( [ 'year' , 'month' , 'day' ] )	Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'.
return my_list == list ( range ( my_list [ 0 ] , my_list [ -1 ] + 1 ) )	check if elements in list `my_list` are coherent in order
df . groupby ( 'id' ) . agg ( lambda x : x . tolist ( ) )	group rows of pandas dataframe `df` with same 'id'
'X\xc3\xbcY\xc3\x9f' . encode ( 'raw_unicode_escape' ) . decode ( 'utf-8' )	encode `u'X\xc3\xbcY\xc3\x9f'` as unicode and decode with utf-8
float ( a )	parse string `a` to float
getattr ( a , 'property' , 'default value' )	get the value of attribute 'property' of object `a` with default value 'default value'
np . delete ( a , list ( range ( 0 , a . shape [ 1 ] , 8 ) ) , axis = 1 )	delete every 8th column in a numpy array 'a'.
datetime . datetime . fromtimestamp ( ms / 1000.0 )	convert `ms` milliseconds to a datetime object
np . einsum ( '...j,...j->...' , vf , vf )	find the magnitude (length) squared of a vector `vf` field
r = requests . get ( url )	request http url `url`
r = requests . get ( url , params = payload )	request http url `url` with parameters `payload`
r = requests . post ( url , data = payload )	post request url `url` with parameters `payload`
post_response = requests . post ( url = 'http://httpbin.org/post' , json = post_data )	make an HTTP post request with data `post_data`
{{ ( mylist |  slice ) : '3:8' }}	django jinja slice list `mylist` by '3:8'
df1 = pd . read_hdf ( '/home/.../data.h5' , 'firstSet' )	create dataframe `df` with content of hdf store file '/home/.../data.h5' with key of 'firstSet'
max ( test_string . rfind ( i ) for i in '([{' )	get the largest index of the last occurrence of characters '([{' in string `test_string`
print ( 'here is your checkmark: '   + '\u2713' )	print 'here is your checkmark: ' plus unicode character u'\u2713'
print ( '\u0420\u043e\u0441\u0441\u0438\u044f' )	print unicode characters in a string `\u0420\u043e\u0441\u0441\u0438\u044f`
print ( '{0}' . format ( '5' . zfill ( 2 ) ) )	pads string '5' on the left with 1 zero
sorted ( set ( itertools . chain . from_iterable ( sequences ) ) )	Remove duplicates elements from list `sequences` and sort it in ascending order
df [ 'a' ] . values . tolist ( )	pandas dataframe `df` column 'a' to list
df [ 'a' ] . tolist ( )	Get a list of all values in column `a` in pandas data frame `df`
print ( all ( word [ 0 ] . isupper ( ) for word in words ) )	check if all string elements in list `words` are upper-cased
myDict = { key : val for key , val in list ( myDict . items ( ) ) if val != 42 }	remove items from dictionary `myDict` if the item's value `val` is equal to 42
{ key : val for key , val in list ( myDict . items ( ) ) if val != 42 }	Remove all items from a dictionary `myDict` whose values are `42`
return len ( s . encode ( 'utf-8' ) )	Determine the byte length of a utf-8 encoded string `s`
os . kill ( process . pid , signal . SIGKILL )	kill a process with id `process.pid`
df [ pd . isnull ( df ) . any ( axis = 1 ) ]	get data of columns with Null values in dataframe `df`
url . split ( '&' ) [ -1 ] . replace ( '=' , '' ) + '.html'	strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end
parser . ParseFile ( open ( 'sample.xml' , 'rb' ) )	Parse a file `sample.xml` using expat parsing in python 3
sys . exit ( )	Exit script
setattr ( self , attr , group )	assign value in `group` dynamically to class property `attr`
urllib . parse . unquote ( urllib . parse . unquote ( some_string ) )	decode url-encoded string `some_string` to its character equivalents
urllib . parse . unquote ( urllib . parse . unquote ( 'FireShot3%2B%25282%2529.png' ) )	"decode a double URL encoded string 
app . config [ 'SECURITY_REGISTER_URL' ] = '/create_account'	change flask security register url to `/create_account`
output = open ( '/home/user/test/wsservice/data.pkl' , 'wb' )	open a file `/home/user/test/wsservice/data.pkl` in binary write mode
del a [ ( -1 ) ]	remove the last element in list `a`
a . pop ( 1 )	remove the element in list `a` with index 1
a . pop ( )	remove the last element in list `a`
a . pop ( index )	remove the element in list `a` at index `index`
del a [ index ]	remove the element in list `a` at index `index`
ax . set_xlabel ( 'Temperature (\u2103)' )	print a celsius symbol on x axis of a plot `ax`
ax . set_xlabel ( 'Temperature ($^\\circ$C)' )	Print a celsius symbol with matplotlib
[ '' . join ( l ) for l in list_of_lists ]	convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''
pd . concat ( g for _ , g in df . groupby ( 'ID' ) if len ( g ) >  1 )	get a list of all the duplicate items in dataframe `df` using pandas
x = numpy . delete ( x , 2 , axis = 1 )	Delete third row in a numpy array `x`
x = numpy . delete ( x , 0 , axis = 0 )	delete first row of array `x`
pd . concat ( ( df1 , df2 ) , axis = 1 ) . mean ( axis = 1 )	merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1
np . mean ( np . array ( [ old_set , new_set ] ) , axis = 0 )	Get the average values from two numpy arrays `old_set` and `new_set`
scatter ( x , y , s = 500 , color = 'green' , marker = 'h' )	Matplotlib change marker size to 500
result = [ item for word in words for item in word . split ( ',' ) ]	Create new list `result` by splitting each item in list `words`
datetime . datetime . strptime ( '2012-05-29T19:30:03.283Z' , '%Y-%m-%dT%H:%M:%S.%fZ' )	convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'
sum ( item [ 'one' ] for item in list ( tadas . values ( ) ) )	count `True` values associated with key 'one' in dictionary `tadas`
a = open ( 'pdf_reference.pdf' , 'rb' ) . read ( ) . encode ( 'base64' )	encode a pdf file `pdf_reference.pdf` with `base64` encoding
a . rstrip ( ) . split ( '\n' )	split string `a` using new-line character '\n' as separator
a . split ( '\n' ) [ : -1 ]	split a string `a` with new line character
return HttpResponse ( status = 204 )	return http status code 204 from a django view
( 7 in a )	check if 7 is in `a`
( 'a'   in a )	check if 'a' is in list `a`
sorted ( results , key = itemgetter ( 'year' ) )	sort list `results` by keys value 'year'
print ( browser . current_url )	get current url in selenium webdriver `browser`
re . split ( '; |, ' , str )	split string `str` with delimiter '; ' or delimiter ', '
""""" ""\\u003Cp\\u003E"" """" . decode ( 'unicode-escape' )"	un-escaping characters in a string with python
time . mktime ( datetime . datetime . strptime ( s , '%d/%m/%Y' ) . timetuple ( ) )	convert date string `s` in format pattern '%d/%m/%Y' into a timestamp
int ( datetime . datetime . strptime ( '01/12/2011' , '%d/%m/%Y' ) . strftime ( '%s' ) )	convert string '01/12/2011' to an integer timestamp
request . headers [ 'your-header-name' ]	get http header of the key 'your-header-name' in flask
df . groupby ( 'User' ) [ 'X' ] . filter ( lambda x : x . sum ( ) == 0 )	select records of dataframe `df` where the sum of column 'X' for each value in column 'User' is 0
df . loc [ df . groupby ( 'User' ) [ 'X' ] . transform ( sum ) == 0 ]	Get data of dataframe `df` where the sum of column 'X' grouped by column 'User' is equal to 0
df . groupby ( 'User' ) [ 'X' ] . transform ( sum ) == 0	Get data from dataframe `df` where column 'X' is equal to 0
df . set_index ( [ 'Name' , 'Destination' ] )	convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'
print ( re . sub ( '(\\W)\\1+' , '\\1' , a ) )	coalesce non-word-characters in string `a`
"os . system ( 'start ""$file""' )"	"open a file ""$file"" under Unix"
unicodedata . normalize ( 'NFKD' , title ) . encode ( 'ascii' , 'ignore' )	Convert a Unicode string `title` to a 'ascii' string
a . encode ( 'ascii' , 'ignore' )	Convert a Unicode string `a` to a 'ascii' string
files = [ f for f in os . listdir ( '.' ) if re . match ( '[0-9]+.*\\.jpg' , f ) ]	create a list `files` containing all files in directory '.' that starts with numbers between 0 and 9 and ends with the extension '.jpg'
np . zeros ( ( 6 , 9 , 20 ) ) + np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( None ) , : , ( None ) ]	adding a 1-d array `[1, 2, 3, 4, 5, 6, 7, 8, 9]` to a 3-d array `np.zeros((6, 9, 20))`
np . zeros ( ( 6 , 9 , 20 ) ) + np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) )	add array of shape `(6, 9, 20)` to array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`
print ( max ( x , key = sum ) )	get the list with the highest sum value in list `x`
sum ( len ( y ) for y in x if len ( y ) >  1 )	sum the length of lists in list `x` that are more than 1 item in length
numpy . dot ( numpy . dot ( a , m ) , a )	multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`
Entry . objects . filter ( name = 'name' , title = 'title' ) . exists ( )	Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`
sorted ( l , key = lambda x : ( - int ( x [ 1 ] ) , x [ 0 ] ) )	sort a nested list by the inverse of element 2, then by element 1
request . META [ 'HTTP_HOST' ]	get domain/host name from request object in Django
subprocess . call ( [ '/usr/bin/perl' , './uireplace.pl' , var ] )	invoke perl script './uireplace.pl' using perl interpeter '/usr/bin/perl' and send argument `var` to it
print ( '\n' . join ( str ( p ) for p in myList ) )	print list of items `myList`
mydic . update ( { i : o [ 'name' ] } )	update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`
list ( stru . decode ( 'utf-8' ) )	split a `utf-8` encoded string `stru` into a list of characters
u = s . decode ( 'utf-8-sig' )	convert utf-8 with bom string `s` to utf-8 with no bom `u`
Entry . objects . filter ( ~ Q ( id = 3 ) )	Filter model 'Entry' where 'id' is not equal to 3 in Django
getattr ( __builtins__ , 'range' )	lookup an attribute in any scope by name 'range'
subprocess . call ( [ 'shutdown' , '/r' , '/t' , '900' ] )	restart a computer after `900` seconds using subprocess
subprocess . call ( [ 'shutdown' , '/s' ] )	shutdown a computer using subprocess
subprocess . call ( [ 'shutdown' , '/a ' ] )	abort a computer shutdown using subprocess
subprocess . call ( [ 'shutdown' , '/l ' ] )	logoff computer having windows operating system using python
subprocess . call ( [ 'shutdown' , '/r' ] )	shutdown and restart a computer running windows from script
open ( 'filename' , 'w' ) . close ( )	erase the contents of a file `filename`
df . to_dict ( 'index' )	convert dataframe `df` to list of dictionaries including the index values
df . to_dict ( 'records' )	Create list of dictionaries from pandas dataframe `df`
df . groupby ( pd . TimeGrouper ( freq = 'M' ) )	Group a pandas data frame by monthly frequenct `M` using groupby
[ ( c / t ) for c , t in zip ( conversions , trials ) ]	divide the members of a list `conversions` by the corresponding members of another list `trials`
sorted ( data , key = data . get )	sort dict `data` by value
sorted ( data . values ( ) )	Sort a dictionary `data` by its values
sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )	Get a list of pairs of key-value sorted by values in dictionary `data`
now = datetime . datetime . now ( ) . strftime ( '%H:%M:%S' )	display current time
""""" ""foo bar bar bar"" """" . replace ( 'bar' , 'XXX' , 1 ) . find ( 'bar' )"	find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`
set ( [ 'stackoverflow' , 'google' ] ) . issubset ( sites )	check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`
stuff . replace ( ' and ' , '/' )	replace string ' and ' in string `stuff` with character '/'
np . savez ( tmp , * [ getarray [ 0 ] , getarray [ 1 ] , getarray [ 8 ] ] )	Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`
( t - datetime . timedelta ( hours = 1 , minutes = 10 ) )	subtract 1 hour and 10 minutes from time object `t`
dt = datetime . datetime . combine ( datetime . date . today ( ) , t )	add 1 hour and 2 minutes to time object `t`
dt -= datetime . timedelta ( hours = 5 )	subtract 5 hours from the time object `dt`
print ( data . encode ( 'hex' ) )	encode string `data` using hex 'hex' encoding
print ( ' ' . join ( [ str ( ord ( a ) ) for a in data ] ) )	Return the decimal value for each hex character in data `data`
[ x for x in l if x [ 1 ] == 1 ]	Get all the items from a list of tuple 'l' where second item in tuple is '1'.
a . fromlist ( [ int ( val ) for val in stdin . read ( ) . split ( ) ] )	Create array `a` containing integers from stdin
print ( re . sub ( '[_%^$]' , '\\\\\\g<0>' , line ) )	place '\' infront of each non-letter char in string `line`
"doc . xpath ( ""//a[starts-with(text(),'some text')]"" )"	Get all `a` tags where the text starts with value `some text` using regex
zip ( * a )	convert a list of lists `a` into list of tuples of appropriate elements form nested lists
[ map ( int , sublist ) for sublist in lst ]	convert a list of strings `lst` to list of integers
[ [ int ( x ) for x in sublist ] for sublist in lst ]	convert strings in list-of-lists `lst` to ints
np . where ( np . in1d ( A , B ) ) [ 0 ]	get index of elements in array `A` that occur in another array `B`
[ { 'key1' : a , 'key2' : b }  for a , b in zip ( d [ 'key1' ] , d [ 'key2' ] ) ]	create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`
calendar . monthrange ( 2002 , 1 )	Get Last Day of the first month in 2002
calendar . monthrange ( 2008 , 2 )	Get Last Day of the second month in 2002
calendar . monthrange ( 2100 , 2 )	Get Last Day of the second month in 2100
calendar . monthrange ( year , month ) [ 1 ]	Get Last Day of the month `month` in year `year`
monthrange ( 2012 , 2 )	Get Last Day of the second month in year 2012
( datetime . date ( 2000 , 2 , 1 ) - datetime . timedelta ( days = 1 ) )	Get Last Day of the first month in year 2000
from subprocess import call	"Calling an external command ""ls -l"""
os . system ( 'some_command with args' )	"Calling an external command ""some_command with args"""
os . system ( 'some_command < input_file | another_command > output_file' )	"Calling an external command ""some_command < input_file | another_command > output_file"""
stream = os . popen ( 'some_command with args' )	"Calling an external command ""some_command with args"""
print ( subprocess . Popen ( 'echo Hello World' , shell = True , stdout = subprocess . PIPE ) . stdout . read ( ) )	"Calling an external command ""echo Hello World"""
print ( os . popen ( 'echo Hello World' ) . read ( ) )	"Calling an external command ""echo Hello World"""
return_code = subprocess . call ( 'echo Hello World' , shell = True )	"Calling an external command ""echo Hello World"""
call ( [ 'ls' , '-l' ] )	"Calling an external command ""ls -l"""
print ( urllib . parse . unquote ( url ) . decode ( 'utf8' ) )	decode url `url` with utf8 and print it
url = urllib . parse . unquote ( url ) . decode ( 'utf8' )	decode a urllib escaped url string `url` with `utf8`
""""" """" """" . join ( filter ( str . isdigit , '12454v' ) )"	delete letters from string '12454v'
df [ 'Season' ] . str . split ( '-' ) . str [ 0 ] . astype ( int )	Update row values for a column `Season` using vectorized string operation in pandas
my_list . sort ( key = lambda x : x [ 1 ] )	sort a list of tuples `my_list` by second parameter in the tuple
[ m . start ( ) for m in re . finditer ( '(?=tt)' , 'ttt' ) ]	find indexes of all occurrences of a substring `tt` in a string `ttt`
[ m . start ( ) for m in re . finditer ( 'test' , 'test test test test' ) ]	find all occurrences of a substring in a string
re . findall ( '\\s+|\\S+' , s )	split string `s` based on white spaces
rdata . set_index ( [ 'race_date' , 'track_code' , 'race_number' ] )	set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`
list . sort ( key = lambda item : item [ 'date' ] , reverse = True )	sort a list of dictionary values by 'date' in reverse order
""""" ""{:.5}"" """" . format ( 'aaabbbccc' )"	display first 5 characters of string 'aaabbbccc'
struct . unpack ( '11B' , s )	unpack hexadecimal string `s` to a list of integer values
[ i for i , j in enumerate ( [ 'foo' , 'bar' , 'baz' ] ) if j == 'foo' ]	finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it
print ( list ( itertools . product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) )	generate all permutations of list `[1, 2, 3]` and list `[4, 5, 6]`
itertools . permutations ( [ 1 , 2 , 3 ] )	generate all permutations of a list `[1, 2, 3]`
return re . sub ( '\\p{P}+' , '' , text )	substitute occurrences of unicode regex pattern u'\\p{P}+' with empty string '' in string `text`
raise ValueError ( 'A very specific bad thing happened' )	manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened'
raise Exception ( 'I know Python!' )	"throw an exception ""I know Python!"""
raise Exception ( 'I know python!' )	"Manually throw an exception ""I know python!"""
raise ValueError ( 'represents a hidden bug, do not catch this' )	throw a ValueError with message 'represents a hidden bug, do not catch this'
raise Exception ( 'This is the exception you expect to handle' )	throw an Exception with message 'This is the exception you expect to handle'
raise ValueError ( 'A very specific bad thing happened' )	throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'
raise RuntimeError ( 'specific message' )	throw a runtime error with message 'specific message'
"raise AssertionError ( ""Unexpected value of 'distance'!"" , distance )"	"throw an assertion error with message ""Unexpected value of 'distance'!"", distance"
driver . find_element_by_id ( 'foo' ) . clear ( )	if Selenium textarea element `foo` is not empty, clear the field
driver . find_element_by_id ( 'foo' ) . clear ( )	clear text from textarea 'foo' with selenium
socket . inet_ntoa ( struct . pack ( '!L' , 2130706433 ) )	convert a number 2130706433 to ip string
df = df [ [ 'x' , 'y' , 'a' , 'b' ] ]	Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b'
super ( ChildClass , self ) . __init__ ( * args , ** kwargs )	call base class's __init__ method from the child class `ChildClass`
sum ( d . values ( ) )	sum of all values in a python dict `d`
json . dumps ( your_data , ensure_ascii = False )	convert python dictionary `your_data` to json array
values = np . array ( [ i for i in range ( 100 ) ] , dtype = np . float64 )	assign an array of floats in range from 0 to 100 to a variable `values`
sorted ( list_of_dct , key = lambda x : order . index ( list ( x . values ( ) ) [ 0 ] ) )	sort a list of dictionaries `list_of_dct` by values in an order `order`
return s [ 0 ] . upper ( ) + s [ 1 : ]	change the case of the first letter in string `s`
""""" """" """" . join ( [ 1 , 2 , 3 , 4 ] )"	join list of numbers `[1,2,3,4] ` to string of numbers.
line = line . decode ( 'utf-8' , 'ignore' ) . encode ( 'utf-8' )	delete every non `utf-8` characters from a string `line`
os . system ( command )	execute a command `command ` in the terminal from a python script
c . execute ( 'SELECT * FROM foo WHERE bar = %s AND baz = %s' , ( param1 , param2 ) )	MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`
dateobj = datetime . datetime . strptime ( datestr , '%Y-%m-%d' ) . date ( )	Parse string `datestr` into a datetime object using format pattern '%Y-%m-%d'
