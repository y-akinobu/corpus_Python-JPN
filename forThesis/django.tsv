<name2> <name6> <name4> <name1>	<name2> <name6> <name4> <name1> into default name space .
<name6> <name5>	<name6> module <name5> .
<name1> <name2> . conf <name6> <name4>	<name1> <name2> .conf <name6> <name4> into default name space .
<name5> <name1> . core <name2> <name4>	<name5> <name1> .core <name2> <name4> into default name space .
<name1> <name3> . core . cache . backends . base <name5> ( <name6> , <name2> , <name4> )	<name1> <name3> .core .cache .backends .base <name5> <name6> , <name2> and <name4> into default name space .
<name6> <name3> . core . exceptions <name1> <name2>	<name6> <name3> .core .exceptions <name1> <name2> into default name space .
<name1> <name5> . utils . deprecation <name2> <name4>	<name1> <name5> .utils .deprecation <name2> <name4> into default name space .
<name5> <name4> . utils . module_loading <name3> <name1>	<name5> <name4> .utils .module_loading <name3> <name1> into default name space .
<name5> = [ <val1>   , <val3>   , <val6>   , <val2>   , 'CacheKeyWarning'   , 'BaseCache'   , ]	<name5> is an list containing 6 elements : <val1> , <val3> , <val6> , <val2> ,
<name5> = <val3>	'CacheKeyWarning' and 'BaseCache' <name5> is a string <val3> .
<name5> <name4> <name3> <name2> <name1> . CACHES :	<name5> <name4> is <name3> contained <name2> <name1> .CACHES ,
<name4> <name2> ( <val6> % <name1> )	<name4> an exception <name2> with string <val6> as argument , with '%s' replaced with <name1> converted into a string .
def <name6> ( <name2> , ** <name3> ) :	define the function <name6> with <name2> and dictionary pair of elements <name3> as arguments .
<name6> . warn ( <val5> , <name3> , stacklevel = 2 )	call the function <name6> .warn with string <val5> , <name3> ,
<name3> = <name5> ( <name2> , ** <name6> )	and stacklevel set to 2 as arguments . call the <name5> with <name2> and dictionary <name6> as arguments , substitute the result for <name3> .
<name4> . request_finished . connect ( <name5> . close )	call the function <name4> .request_finished .connect with argument <name5> .close .
<name4> <name2>	<name4> <name2> .
def <name2> ( <name4> , ** <name6> ) :	define the function <name2> with <name4> and dictionary pair of elements <name6> as arguments .
<name6> :	<name6> ,
<name1> :	<name1> ,
<name1> = <name2> . CACHES [ <name5> ]	substitute value under the <name5> key of <name2> .CACHES dictionary for <name1> .
except <name2> :	if <name2> exception is caught ,
<name5> :	<name5> ,
<name5> ( <name2> )	call the function <name5> with argument <name2> .
except <name5> as <name6> :	if <name5> , renamed to <name6> , exception is caught ,
<name2> <name5> ( <val3> % ( <name1> , <name4> ) )	<name2> and exception <name5> with string <val3> as argument , replace '%s' with <name1> and <name4> , respectively .
<name3> = <name1> . pop ( <val6>   , ''   )	remove <val6> key from <name1> dictionary and put it into <name3> , or use an empty string if key doesnt exists .
<name2> = <name5>	substitute <name5> for <name2> .
else :	if not ,
<name6> = <name5> . copy ( )	call the function <name5> .copy , substitute it for <name6> .
<name2> . update ( <name6> )	call the function <name2> .update with argument <name6> .
<name6> = <name1> . pop ( <val5>   )	remove <val5> key from <name1> dictionary and put it into <name6> .
<name4> = params . pop ( <val6>   , ''   )	remove <val6> key from kwargs dictionary and put it into <name4> , or use an empty string if key doesnt exists .
<name2> = <name3> ( <name5> )	call the <name3> with argument <name5> , substitute it for <name2> .
except <name4> as <name5> :	if <name4> , renamed to <name5> , is caught ,
raise <name6> ( <val3> % ( <name2> , <name5> ) )	aise and exception <name6> with string <val3> as argument , replace '%s' with <name2> and <name5> , respectively .
<name1> <name4> ( <name2> , <name5> )	evaluate the function <name4> with <name2> and <name5> as arguments , <name1> the result .
<name4> <name5> ( <name2> ) :	derive the <name4> <name5> from the <name2> base <name4> .
def <name4> ( <name3> ) :	define the <name4> method with argument <name3> .
<name5> . _caches = <name2> ( )	call the function <name2> , substitute the result for <name5> ._caches .
def <name2> ( <name1> , <name5> ) :	define the <name2> method with <name1> and <name5> arguments .
<name1> :	<name1> ,
<name1> <name6> . _caches . caches [ <name5> ]	<name1> value under the <name5> key of <name6> ._caches .caches dictionary .
<name3> <name5> :	<name3> if <name5> is caught ,
<name5> . _caches . caches = { }	<name5> ._caches .caches is an empty dictionary .
<name5> <name4> :	<name5> if <name4> exception is caught ,
pass	do nothing .
<name3> <name6> <name1> <name2> settings . CACHES :	<name3> <name6> is <name1> contained <name2> setting .CACHES ,
<name6> <name4> ( <val2> % <name3> )	<name6> and exception <name4> with string <val2> as argument , replace '%s' with <name3> .
cache = <name1> ( <name6> )	call the function <name1> with argument <name6> .
<name6> . _caches . caches [ <name4> ] = <name5>	substitute <name5> for value under the <name4> key of <name6> ._caches .caches dictionary .
return <name5>	reuturn <name5> .
def <name3> ( <name2> ) :	define the method <name3> with argument <name2> .
<name6> getattr ( <name5> . _caches , <val2>   , { }  ) . <name3> ( )	get attribute <val2> from the <name5> ._caches if exists , otherwise get an empty dictionary , call the <name3> method on the <name6> value , <name6> it .
<name1> = <name3> ( )	call the <name3> function , substitute the result for <name1> .
<name5> <name4> ( <name1> ) :	derive the <name5> <name4> from the base <name5> <name1> .
def <name2> ( <name4> , <name1> ) :	define the method <name2> with <name4> and <name1> as arguments .
<name4> getattr ( <name2> [ <name3> ] , <name1> )	get attribute <name1> from value under the <name3> key of <name2> dictionary , <name4> it .
def <name2> ( <name6> , <name3> , <name1> ) :	define the method <name2> with <name6> , <name3> and <name1> as arguments .
<name2> setattr ( <name4> [ <name6> ] , <name1> , <name5> )	set the attribute <name1> from <name5> under the <name6> key of <name4> dictionary to <name5> , <name2> it .
def <name6> ( <name4> , <name5> ) :	define the method <name6> with <name4> and <name5> as arguments .
return delattr ( caches [ <name3> ] , <name4> )	delete the attribute <name4> from the cache dictionary under the <name3> key .
def <name6> ( <name4> , <name2> ) :	define the method <name6> with <name4> and <name2> as arguments .
<name2> <name6> <name3> <name1> [ <name4> ]	if <name6> if contained <name3> value under the <name4> <name6> of <name1> dictionary , <name2> boolean True , otherwise <name2> False .
def <name4> ( <name6> , <name1> ) :	define the method <name4> with <name6> and <name1> as arguments .
<name6> <name1> [ <name3> ] == <name4>	if value under the <name3> key of <name1> dictionary equals to <name4> , <name6> boolean True , otherwise <name6> False .
def <name1> ( <name3> , <name6> ) :	define the method <name1> with <name3> and <name6> as arguments .
<name2> <name4> [ <name6> ] != <name5>	if value under the <name6> key of <name4> dictionary is not equal to <name5> , <name2> boolean True , otherwise <name2> False .
<name1> = <name3> ( )	call the <name3> function , substitute it for <name1> .
def <name2> ( ** <name1> ) :	define the function <name2> with dictionary pair of elements <name1> as argument .
<name2> <name1> <name4> <name5> . all ( ) :	<name2> every <name1> <name4> return value of the function <name5> .all .
<name5> . close ( )	call the function <name5> .close .
<name3> . request_finished . connect ( <name5> )	call the function <name3> .request_finished .connect with argument <name5> .
<name4> <name5> <name2> <name1>	<name4> <name5> <name2> <name1> into default name space .
<name6> <name3>	<name6> module <name3> .
<name3> <name4>	<name3> module <name4> .
<name6> <name4> . core . exceptions <name3> <name1> , <name2>	<name6> <name4> .core .exceptions <name3> <name1> and <name2> into default name space .
<name1> <name3> . utils . module_loading <name6> <name2>	<name1> <name3> .utils .module_loading <name6> <name2> into default name space .
<name3> <name6> ( <name1> ) :	derive <name3> <name6> from the <name1> base <name3> .
pass	do nothing .
<name3> <name2> ( <name4> ) :	derive <name3> <name2> from the <name4> base <name3> .
pass	do nothing .
<name3> = <name6> ( )	<name3> is a instance of the class <name6> .
<name6> = <val5>	<name6> is integer <val5> .
def <name1> ( <name3> , <name6> , <name2> ) :	define the function <name1> with 3 arguments , <name3> , <name6> and <name2> .
<name6> '%s:%s:%s'   % ( <name1> , <name3> , <name5> )	convert <name1> , <name3> and <name5> into strings , concatenate them respectively , with character ':' as delimiter , <name6> the result .
def <name4> ( <name5> ) :	define the function <name4> with argument <name5> .
<name6> <name4> <name3> <name1> <name5> :	<name6> <name4> <name3> <name1> of <name5> type ,
<name6> <name3> ( key_func ) :	<name6> key_function is <name3> object ,
<name6> <name1>	<name6> <name1> .
else :	if not ,
<name3> <name4> ( <name5> )	evaluate the function <name4> with <name5> as argument , <name3> the result .
<name4> <name3>	<name4> <name3> .
<name2> <name3> ( <name5> ) :	derive the <name2> <name3> from the <name5> base <name2> .
def <name6> ( <name4> , <name3> ) :	define the initialization function <name6> with <name4> class instance and <name3> as arguments .
<name4> = <name3> . get ( <val5>   , <name3> . get ( <val6>   , <val1> ) )	call the <name3> .get method with string <val6> and integer <val1> as arguments , use the string <val5> and previous result as the arguments for the call to the <name3> .get method , substitute the result for <name4> .
<name6> <name1> <name5> <name4> <name2> :	<name6> <name1> <name5> <name4> <name2> ,
<name1> :	<name1> ,
<name2> = int ( <name2> )	convert <name2> into an integer .
except ( <name1> , <name5> ) :	if <name1> or <name5> exceptions occurred ,
<name5> = <val1>	<name5> is integer <val1> .
<name4> . default_timeout = <name5>	substitute <name5> for <name4> .default_timeout .
<name6> = <name1> . get ( <val3>   , { }  )	call the <name1> .get with string <val3> and empty dictionary as arguments , substitute the result for <name6> .
<name5> = <name1> . get ( <val2>   , <name3> . get ( <val4>   , <val6> ) )	call the <name3> .get method with string <val4> and integer <val6> as arguments , use the string <val2> and previous result as the arguments for the call to the <name1> .get method , substitute the result for <name5> .
<name1> :	<name1> ,
<name3> . _max_entries = int ( <name6> )	convert <name6> into a string , substitute it for <name3> ._max_entries .
except ( <name3> , <name6> ) :	if <name3> or <name6> exceptions occurred ,
<name5> . _max_entries = <val3>	<name5> ._max_entries is integer <val3> .
<name4> = <name2> . get ( <val6>   , <name3> . get ( <val5>   , <val1> ) )	call the <name3> .get method with string <val5> and integer <val1> as arguments , use the string <val6> and previous result as the arguments for the call to the <name2> .get method , substitute the result for <name4> .
<name1> :	<name1> ,
<name5> . _cull_frequency = int ( <name6> )	convert <name6> into an integer and substitute it for <name5> ._cull_frequency .
except ( <name1> , <name6> ) :	if <name1> or <name6> exceptions occurred ,
<name1> . _cull_frequency = <val5>	<name1> ._cull_frequency is integer <val5> .
<name6> . key_prefix = <name1> . get ( <val2>   , ''   )	call the <name1> .get method with string <val2> and an empty string as arguments , substitute the result for <name6> ._key_prefix .
<name4> . version = <name3> . get ( <val2>   , <val5> )	call the <name3> .get method wit string <val2> and integer <val5> as arguments , substitute the result for <name4> .version .
<name3> . key_func = <name1> ( <name4> . get ( <val5>   , <name6> ) )	call the method <name4> .get with 2 arguments , string <val5> and <name6> , use the result as the argument for the call to the function <name1> , substitute the result for the <name3> .key_func .
def <name6> ( <name1> , <name2> = <name5> ) :	define the method <name6> with <name1> class instance and <name2> set to <name5> as arguments ,
<name4> <name6> == <name3> :	<name4> <name6> equals to <name3> ,
<name2> = <name6> . default_timeout	substitute <name6> .default_timeout for <name2> .
elif <name5> == <val1> :	else if <name5> equals to integer <val1> ,
<name1> = - 1	<name1> is a integer -1 .
<name5> <name2> <name4> <name3> <name1> <name2> else <name6> . <name6> ( ) + <name3>	<name4> timeouts <name1> <name2> <name5> <name2> , otherwise <name5> the sum of function <name6> .time <name5> value and <name3> .
def <name2> ( <name6> , <name1> , <name4> = <name5> ) :	define the function <name2> with <name6> class instance , <name1> and <name4> set to <name5> as arguments .
<name6> <name1> <name2> <name4> :	<name6> <name1> <name2> <name4> ,
<name1> = <name4> . <name1>	substitute <name4> .version for <name1> .
<name1> = <name2> . key_func ( <name6> , <name2> . key_prefix , <name4> )	call the method <name2> .key_function with <name6> , <name2> .key_prefix and <name4> as arguments , substitute the result for <name1> .
<name1> <name6>	<name1> <name6> .
def <name3> ( <name4> , <name1> , <name2> , <name6> = <name5> , <name3> = <name4> ) :	define the method <name3> with 5 arguments , <name4> , <name1> , <name2> , <name6> defaulting to <name5> and <name3> defaulting to <name4> .
          Set a value in the cache if the key does not already exist . If timeout is given , that timeout will be used for the key <sep> otherwise the default cache timeout will be used . Returns True if the value was stored , False otherwise .	docsring
<name1> <name2> ( <val3>   )	<name1> an exception of class <name2> with string <val3> as argument .
def <name6> ( <name1> , <name4> , <name2> = <name3> , <name5> = <name3> ) :	define the method <name6> with 4 arguments , <name1> , <name4> , <name2> set to <name3> and <name5> set to <name3> .
<name5> <name4> ( <val6>   )	<name5> an exception of class <name4> , with string <val6> as argument .
def <name6> ( <name4> , <name1> , <name2> , <name3> = <name5> , <name6> = <name4> ) :	define the method <name6> with 5 arguments , <name4> , <name1> , <name2> , <name3> <name6> to <name5> and <name6> <name6> to <name4> .
<name5> <name1> ( <val3>   )	<name5> an exception of class <name1> , with string <val3> as argument .
def <name1> ( <name4> , <name2> , <name6> = <name5> ) :	define <name1> method with <name4> class instance , <name2> and <name6> set to <name5> , as arguments .
<name5> <name6> ( <val4>   )	<name5> an exception of class <name6> , with string <val4> as argument .
def <name4> ( <name1> , <name3> , <name5> = <name6> ) :	define the <name4> method with <name1> class instance , <name3> and <name5> set to <name6> as arguments .
<name5> = { }	<name5> is an empty dictionary .
<name4> <name6> <name2> <name3> :	<name4> every <name6> <name2> <name3> ,
<name5> = <name6> . get ( <name4> , <name1> = <name1> )	call the <name6> .get method with <name4> and <name1> set to <name1> as arguments , substitute the result for <name5> .
<name5> <name3> <name6> <name1> <name2> :	<name5> <name3> <name6> <name1> <name2> ,
<name5> [ <name6> ] = <name2>	substitute <name2> for value under the <name6> key of dictionary <name5> .
<name2> <name5>	<name2> <name5> .
def <name1> ( <name2> , <name3> , <name5> = <name4> ) :	define method <name1> with <name2> class instance , <name3> and <name5> set to <name4> as arguments .
<name4> <name2> . get ( <name1> , <name5> = <name5> ) <name6> <name3> <name4>	call the <name2> .get method with <name1> and <name5> set to <name5> as arguments , <name4> it if it <name6> <name3> <name4> .
def <name1> ( <name6> , <name5> , <name2> = <val4> , <name3> = <name1> ) :	define the method <name1> with 4 arguments , <name6> class instance , <name5> , <name2> defaulting to integer <val4> and <name3> defaulting to <name1> .
<name1> = <name4> . get ( <name2> , <name3> = <name3> )	call the method <name4> .get with <name2> and <name3> set to <name3> as arguments , substitute the result for <name1> .
<name3> <name5> <name6> <name4> :	<name3> <name5> <name6> <name4> ,
<name6> <name1> ( <val4> % <name3> )	<name6> an exception of class <name1> , with string <val4> as argument , where '%s' is substituted for <name3> .
<name1> = <name4> + <name3>	add <name4> and <name3> together , substitute the result for <name1> .
<name6> . <name5> ( <name3> , <name4> , <name2> = <name2> )	call the <name6> .set method with <name3> , <name4> and <name2> <name5> to <name2> as arguments .
<name3> <name2>	<name3> <name2> .
def <name1> ( <name2> , <name3> , <name5> = <val6> , <name4> = <name1> ) :	define the method <name1> with arguments <name2> , <name3> , <name5> defaulting to integer <val6> and <name4> defaulting to <name1> .
return <name3> . incr ( <name5> , - <name2> , <name4> = <name4> )	call the <name3> .incr method with <name5> , negative <name2> and <name4> set to <name4> as arguments .
def <name5> ( <name4> , <name3> ) :	define the private method <name5> with <name4> class instance and <name3> as arguments .
<name6> <name2> . has_key ( <name4> )	evaluate the <name2> .has_key method with <name4> as argument , <name6> the result .
def <name5> ( <name2> , <name3> , <name4> = <name6> , <name1> = <name5> ) :	define the method <name5> with arguments , <name2> , <name3> , <name4> defaulting to <name6> and <name1> set to <name5> .
<name5> <name1> , <name6> <name4> <name3> . items ( ) :	<name5> every <name1> and <name6> <name4> <name3> .items method return <name6> ,
<name2> . <name5> ( <name1> , <name4> , <name3> = <name3> , <name6> = <name6> )	call the method <name2> .set with arguments <name1> , <name4> , <name3> <name5> to <name3> , <name6> <name5> to <name6> .
def <name6> ( <name2> , <name4> , <name5> = <name3> ) :	define the method <name6> with arguments <name2> , <name4> and <name5> defaulting to <name3> .
<name4> <name1> <name3> <name5> :	<name4> every <name1> <name3> <name5> ,
self . <name4> ( <name1> , <name5> = <name5> )	call the <name4> method with <name1> and <name5> set to <name5> as arguments .
def <name4> ( <name5> ) :	define the method <name4> with <name5> class instance as the argument ,
<name4> <name6> ( <val1>   )	<name4> an exception <name6> with string <val1> as argument .
def <name2> ( <name4> , <name5> ) :	define the method <name2> with <name4> class instance and <name5> as arguments .
<name5> len ( <name1> ) >  <name6> :	<name5> length of <name1> is greater than <name6> ,
warnings . warn ( 'Cache key will cause errors if used with memcached: '    '%s (longer than %s)'   % ( <name4> , MEMCACHE_MAX_KEY_LENGTH ) , CacheKeyWarning )	substitute '%s' in string 'Cache key will cause errors if used with memcached: %s (longer than %s)' with <name4> ,
<name4> <name5> <name6> <name1> :	and MEMCACHE_MAX_KEY_LENGTH , call the function warnings .warn with previous string and CacheKeyWarning as arguments . <name4> every <name5> <name6> <name1> ,
<name2> ord ( <name1> ) <  <val6> <name5> ord ( <name1> ) == <val3> :	<name2> ascii value of <name1> is smaller than integer <val6> <name5> is equal to integer <val3> ,
warnings . warn ( 'Cache key contains characters that will cause '    'errors if used with memcached: %r'   % <name1> , CacheKeyWarning )	substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with <name1> ,
def <name6> ( <name3> , <name2> , <name1> = <val4> , <name5> = <name6> ) :	call the function warnings .warn with previous string and CacheKeyWarning as arguments . define the method <name6> with 4 arguments , <name3> , <name2> , <name1> defaulting to integer <val4> and <name5> defaulting to <name6> .
<name2> <name1> <name4> <name5> :	<name2> <name1> <name4> <name5> ,
<name2> = <name5> . <name2>	substitute <name5> .version for <name2> .
<name3> = <name1> . get ( <name6> , <name5> = <name5> )	call the <name1> .get method with arguments <name6> and <name5> set to <name5> , substitute the result for <name3> .
<name4> <name2> <name1> <name3> :	<name4> <name2> <name1> <name3> ,
<name1> <name5> ( <val2> % <name4> )	<name1> an exception of the class <name5> with string <val2> as argument , '%s' is substituted for <name4> .
<name2> . set ( <name4> , <name5> , <name1> = <name1> + <name3> )	call the method <name2> .set with <name4> , <name5> , <name1> incremented by <name3> , as arguments .
<name1> . delete ( <name5> , <name4> = <name4> )	call the <name1> .delete method with <name5> and <name4> set to <name4> as arguments .
<name6> <name3> + <name5>	sum <name3> and <name5> together , <name6> the result .
def <name2> ( <name5> , <name3> , <name6> = <val4> , <name1> = <name2> ) :	define the method <name2> with 4 arguments , <name5> , <name3> , <name6> defaulting to integer <val4> and <name1> defaulting to <name2> .
return <name3> . incr_version ( <name6> , - <name5> , <name2> )	call the method <name3> .incr_version with <name6> , negative <name5> and <name2> as arguments .
def <name1> ( <name3> , ** <name2> ) :	define the <name1> method with 2 arguments , <name3> and dictionary of argument pairs <name2> .
Close the cache connection	docstirng
pass	do nothing .
<name4> <name5>	<name4> module <name5> .
<name3> <name1> <name6> <name1>	<name3> <name1> <name6> <name1> into default name space .
<name6> :	<name6> ,
<name6> <name2> . utils . six . moves <name3> <name4> <name1> <name5>	<name6> <name2> .utils .six .moves <name3> <name4> <name1> <name5> , into default namespace .
except <name2> :	if <name2> exception occurred ,
<name4> <name2>	<name4> <name2> .
<name2> <name3> . conf <name4> <name6>	<name2> <name3> .conf <name4> <name6> into default name space .
<name3> <name2> . core . cache . backends . base <name5> <name1> , <name6>	<name3> <name2> .core .cache .backends .base <name5> <name1> and <name6> into default name space .
<name4> <name6> . db <name2> <name3> , <name1> , <name5> , <name4>	<name4> <name6> .db <name2> <name3> , <name1> , <name5> and <name4> into default name space .
<name4> <name1> . db . backends . utils <name6> <name2>	<name4> <name1> .db .backends .utils <name6> <name2> into default name space .
<name4> <name6> . utils <name2> <name5> , <name3>	<name4> <name6> .utils <name2> <name5> and <name3> into default name space .
<name5> <name2> . utils . encoding <name1> <name3>	<name5> <name2> .utils .encoding <name1> <name3> into default name space .
<name3> <name4> ( <name2> ) :	derive <name3> <name4> from the base <name3> <name2> .
def <name3> ( <name4> , <name2> ) :	define the initialization method <name3> with <name4> class instance and <name2> as arguments .
<name4> . db_table = <name3>	substitute <name3> for <name4> .db_table .
<name2> . app_label = <val1>	<name2> .app_label is a string <val1> .
<name3> . model_name = <val5>	<name3> .model_name is a string <val5> .
<name3> . verbose_name = <val2>	<name3> .verbose_name is a string <val2> .
<name6> . verbose_name_plural = <val5>	<name6> .verbose_name_plural is a string <val5> .
<name1> . object_name = <val4>	<name1> .object_name is a string <val4> .
<name3> . abstract = <name5>	<name3> .abstract is boolean <name5> .
<name6> . managed = <name4>	<name6> .managed is boolean <name4> .
<name5> . proxy = <name3>	<name5> .proxy is boolean <name3> .
<name2> <name6> ( <name1> ) :	derive <name2> <name6> from <name1> base <name2> .
def <name2> ( <name6> , <name3> , <name5> ) :	define the initialization method <name2> with <name6> , <name3> and <name5> as arguments .
<name2> . __init__ ( <name1> , <name5> )	call the <name2> .__init__ method with <name1> class instance and <name5> as the arguments .
<name6> . _table = <name5>	substitute <name5> for <name6> ._table .
<name6> <name1> ( <name2> ) :	derive <name1> <name6> from the <name2> base <name6> .
<name6> = <name2> ( <name1> )	<name6> is class <name2> class instance initialized with <name1> argument .
<name5> . cache_model_class = <name2>	substitute <name2> for <name5> .cache_model_class .
<name2> <name6> ( <name5> ) :	derive <name6> from the <name5> base <name2> .
def <name4> ( <name1> , <name6> , <name2> = <name5> , <name3> = <name5> ) :	define the method <name4> with 4 arguments , <name1> class instance , <name6> , <name2> set to <name5> and <name3> set to <name5> .
<name6> = <name2> . make_key ( <name6> , <name5> = <name5> )	call the method <name2> .make_key Whit <name6> and <name5> set to <name5> as arguments , substitute the result for <name6> .
<name5> . validate_key ( <name6> )	call the method <name5> .validate_key with argument <name6> .
<name6> = <name2> . db_for_read ( <name1> . cache_model_class )	call the method <name2> .db_for_read with <name1> .cache_model_class as argument , substitute the result for <name6> .
<name5> = <name1> [ <name3> ] . <name4> . quote_name ( <name6> . _table )	call the <name4> .quote_name method with argument <name6> ._table on the value under the <name3> key of <name1> dictionary , substitute the result for <name5> .
<name6> <name1> [ <name4> ] . <name2> ( ) as <name2> :	call the <name2> method on the value under the <name4> key of <name1> dictionary , preform following <name6> return value named <name2> ,
"<name3> . execute ( ""SELECT cache_key, value, expires FROM %s "" ""WHERE cache_key = %%s"" % table , [ key ] )"	"call the method <name3> .execute with string ""SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s"" as argument ,"
<name5> = <name1> . fetchone ( )	substitute the '%s' with table and list containing key , respectively . call the <name1> .fetchone method , substitute the result for <name5> .
<name3> <name4> <name1> <name6> :	<name3> <name4> <name1> <name6> ,
<name1> <name6>	<name1> <name6> .
<name4> = <name2> . <name4> ( )	call the <name2> .now function , substitute the result for <name4> .
<name4> = <name2> [ 2 ]	substitute third element of <name2> list for <name4> .
<name5> <name6> [ <name2> ] . <name1> . needs_datetime_string_cast and not isinstance ( expires , datetime ) :	<name5> <name1> .needs_datetime_string_cast field of the object represented stored under the <name2> key of <name6> dictionary is true ,
<name5> = <name3> ( str ( <name5> ) )	and <name5> is not an instance of datetime . convert <name5> to a string , use it as argument for the call to the function <name3> , substitute the result for <name5> .
<name4> <name3> <  <name5> :	<name4> <name3> is lesser than <name5> ,
<name6> = <name2> . db_for_write ( <name4> . cache_model_class )	call the method <name2> .db_for_write with argument <name4> .cache_model_class , substitute the result for <name6> .
<name6> <name3> [ <name4> ] . <name5> ( ) as <name5> :	call the <name5> method on the value under the <name4> key of <name3> dictionary , preform following <name6> return value named <name5> ,
"<name3> . execute ( ""DELETE FROM %s "" ""WHERE cache_key = %%s"" % table , [ key ] )"	"call the method <name3> .execute with string ""DELETE FROM %s WHERE cache_key = %%s"" as argument ,"
<name4> <name3>	substitute the '%s' with table and list containing key , respectively . <name4> <name3> .
<name6> = <name5> [ <name1> ] . <name4> . process_clob ( <name2> [ 1 ] )	call the method <name4> .process_clob with second element of <name2> as argument , on the object under the <name1> key of <name5> dictionary , substitute the result for <name6> .
return pickle . loads ( <name1> . b64decode ( <name5> ( <name4> ) ) )	call the function <name5> with argument <name4> , use the result as an argument for the call to the method <name1> .b64decode ,
def <name3> ( <name1> , <name2> , <name4> , <name6> = <name5> , <name3> = <name1> ) :	use the result as the argument for the function call to the pickle .loads , return the result . define the method <name3> with 5 arguments , <name1> class instance , <name2> , <name4> , <name6> <name3> to <name5> and <name3> <name3> to <name1> .
<name1> = <name2> . make_key ( <name1> , <name4> = <name4> )	call the method <name2> .make_key with <name1> and <name4> set to <name4> as arguments , substitute the result for <name1> .
<name5> . validate_key ( <name1> )	call the method <name5> .validate_key with <name1> as argument .
<name5> . _base_set ( <val4>   , <name3> , <name6> , <name2> )	call the method <name5> ._base_set with string <val4> , <name3> , <name6> and <name2> as arguments .
def <name3> ( <name4> , <name2> , <name6> , <name1> = <name5> , <name3> = <name4> ) :	define the method <name3> with 5 arguments , <name4> class instance , <name2> , <name6> , <name1> set to <name5> and <name3> set to <name4> .
<name5> = <name6> . make_key ( <name5> , <name1> = <name1> )	call the method <name6> .make_key with <name5> and <name1> set to <name1> as arguments , substitute the result for <name5> .
<name2> . validate_key ( <name6> )	call the method <name2> .validate_key with <name6> as argument .
<name2> <name5> . _base_set ( <val3>   , <name6> , <name1> , <name4> )	call the method <name5> ._base_set with string <val3> , <name6> , <name1> and <name4> as arguments , <name2> the result .
def <name6> ( <name3> , mode , <name1> , <name5> , <name4> = <name2> ) :	define the protected method <name6> with 4 arguments , <name3> class instance , <name1> , <name5> and <name4> set to <name2> .
<name2> = <name1> . get_backend_timeout ( <name2> )	call the method <name1> .get_backend_timeout with argument <name2> , substitute the result for <name2> .
<name6> = <name4> . db_for_write ( <name1> . cache_model_class )	call the method <name4> .db_for_write with argument <name1> .cache_model_class , substitute the result for <name6> .
<name6> = <name3> [ <name2> ] . <name5> . quote_name ( <name1> . _table )	call the <name5> .quote_name method with argument <name1> ._table on the object under the <name2> key of <name3> dictionary , substitute the result for <name6> .
<name6> <name3> [ <name4> ] . <name2> ( ) as <name2> :	call the <name2> method on the value under the <name4> key of <name3> dictionary , preform following <name6> return value named <name2> ,
<name3> . execute ( <val1> % <name6> )	call the method <name3> .execute with string <val1> as argument , substitute the '%s' with <name6> .
<name2> = <name6> . fetchone ( ) [ 0 ]	fetch one record from the database <name6> points at , substitute the first element of return value for <name2> .
<name6> = <name3> . <name6> ( )	call the <name3> .now function , substitute the result for <name6> .
<name4> = <name4> . replace ( microsecond = <val5> )	call the function <name4> .replace with microseconds set to integer <val5> , substitute the result for <name4> .
<name2> <name6> <name4> <name1> :	<name2> <name6> <name4> <name1> ,
<name6> = <name2> . max	substitute the <name2> .max for <name6> .
elif <name6> . USE_TZ :	otherwise is <name6> .USE_TI is true ,
<name1> = <name4> . utcfromtimestamp ( <name5> )	call the function <name4> .utcfromtimestamp with argument <name5> , substitute it for <name1> .
else :	if not ,
<name6> = <name1> . fromtimestamp ( <name5> )	call the function <name1> .fromtimestamp with argument <name5> , substitute it for <name6> .
<name5> = <name5> . replace ( <name6> = <val3> )	call the <name5> .replace with <name6> set to integer <val3> , substitute the result for <name5> .
<name5> <name1> >  <name6> . _max_entries :	<name5> <name1> is greater than <name6> ._max_entries ,
<name1> . _cull ( <name2> , <name6> , <name4> )	call the method <name1> ._cull with <name2> , <name6> and <name4> as arguments .
<name1> = <name6> . dumps ( <name4> , <name6> . HIGHEST_PROTOCOL )	call the method <name6> .dumps with <name4> and <name6> .HIGHEST_PROTOCOL as arguments , substitute it for <name1> .
<name1> = <name4> . b64encode ( <name3> )	call the method <name4> .b64encode with argument <name3> , substitute the result for <name1> .
<name2> <name1> . PY3 :	<name2> <name1> .PY3 is true ,
<name2> = <name2> . decode ( <val5>   )	call the method <name2> .decode with string <val5> as argument , substitute the result for <name2> .
<name4> :	<name4> ,
<name4> <name3> . atomic ( <name1> = <name2> ) :	<name4> return value of the function <name3> .atomic <name4> <name1> set to <name2> as arguments , perform the following ,
"<name1> . execute ( ""SELECT cache_key, expires FROM %s "" ""WHERE cache_key = %%s"" % table , [ key ] )"	"call the method <name1> .execute with string ""SELECT cache_key, expires FROM %s WHERE cache_key = %%s"" as argument ,"
<name5> = <name6> . fetchone ( )	substitute the '%s' with table and list containing key , respectively . fetch one entry from the database that <name6> points at , substitute it for the <name5> .
<name5> <name1> :	<name5> <name1> is true ,
     <name2> = <name3> [ 1 ]	substitute the second element of <name3> for <name2> .
<name3> ( <name6> [ <name4> ] . <name5> . needs_datetime_string_cast <name1> <name2> isinstance ( <name3> , <name6> ) ) :	<name3> <name5> .needs_datetime_string_cast field of object under the <name4> key of <name6> dictionary is true <name1> <name3> is <name2> an instance of <name6> object .
         <name3> = <name6> ( str ( <name3> ) )	convert <name3> to a string , use it as the argument for the call to the function <name6> , substitute the result for <name3> .
<name4> = <name1> [ <name3> ] . <name6> . value_to_db_datetime ( <name4> )	on the object under the <name3> key of <name1> dictionary call the method <name6> .value_to_db_datetime with argument <name4> , substitute the result for the <name4> .
<name4> <name2> <name6> ( <name3> == <val5>   <name1> ( <name3> == <val4>   <name6> <name2> <  <name6> ) ) :	<name4> <name3> equals to string <val4> <name6> <name2> is lesser than <name6> , <name1> <name3> equals to string <val5> , <name6> <name2> is true ,
"     <name3> . execute ( ""UPDATE %s SET value = %%s, expires = %%s "" ""WHERE cache_key = %%s"" % table , [ b64encoded , exp , key ] )"	"call the method <name3> .execute with string ""UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s"" as argument ,"
else :	substitute the '%s' with table and 3 elements of a list : b64encoded , exp and key , respectively . if not ,
"     <name1> . execute ( ""INSERT INTO %s (cache_key, value, expires) "" ""VALUES (%%s, %%s, %%s)"" % table , [ key , b64encoded , exp ] )"	"call the method <name1> .execute with string ""INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)"" ,"
except <name3> :	substitute the '%s' with table and 3 elements of a list : b64encoded , exp and key , respectively . if <name3> exception is caught ,
<name3> <name1>	<name3> boolean <name1> .
else :	if not ,
<name6> <name4>	<name6> boolean <name4> .
def <name6> ( <name4> , <name2> , <name3> = <name1> ) :	define the method <name6> with <name4> class instance , <name2> and <name3> set to <name1> as arguments .
<name3> = <name1> . make_key ( <name3> , <name6> = <name6> )	call the method <name1> .make_key with <name3> and <name6> set to <name6> as arguments , substitute the result for <name3> .
<name1> . validate_key ( <name5> )	call the method <name1> .validate_key with argument <name5> .
<name3> = <name5> . db_for_write ( <name2> . cache_model_class )	call the method <name5> .db_for_write with argument <name2> .cache_model_class , substitute the result for <name3> .
<name4> = <name6> [ <name3> ] . <name1> . quote_name ( <name2> . _table )	call the <name1> .quote_name method with argument <name2> ._table on the object under the <name3> key of <name6> dictionary , substitute the result for <name4> .
<name6> <name5> [ <name3> ] . <name2> ( ) as <name2> :	call the <name2> method on the value under the <name3> key of <name5> dictionary , preform following <name6> return value named <name2> ,
<name3> . execute ( <val6> % table , [ key ] )	call the method <name3> .execute with string <val6> as argument ,
def <name5> ( <name1> , <name6> , <name4> = <name3> ) :	substitute the '%s' with table and list containing <name6> , respectively . define the method <name5> with <name1> class instance , <name6> and <name4> defaulting to <name3> as arguments .
<name2> = <name3> . make_key ( <name2> , <name6> = <name6> )	call the <name3> .make_key with <name2> and <name6> set to <name6> as arguments , substitute the result for <name2> .
<name5> . validate_key ( <name1> )	call the <name5> .validate_key method with argument <name1> .
<name3> = <name1> . db_for_read ( <name2> . cache_model_class )	call the method <name1> .db_for_write with argument <name2> .cache_model_class , substitute the result for <name3> .
<name3> = <name1> [ <name5> ] . <name4> . quote_name ( <name6> . _table )	call the <name4> .quote_name method with argument <name6> ._table on the object under the <name5> key of <name1> dictionary , substitute the result for <name3> .
<name2> <name1> . USE_TZ :	<name2> <name1> .USE_TZ is true ,
<name2> = <name6> . utcnow ( )	call the function <name6> .utcnow , substitute the result for <name2> .
else :	if not ,
<name1> = <name2> . <name1> ( )	call the function <name2> .now , substitute the result to <name1> .
<name1> = <name1> . replace ( <name5> = <val6> )	call the method <name1> .replace with the argument <name5> set to integer <val6> , substitute the result for <name1> .
<name5> <name3> [ <name6> ] . <name2> ( ) as <name2> :	call the <name2> method on the value under the <name6> key of <name3> dictionary , preform following <name5> return value named <name2> ,
"<name3> . execute ( ""SELECT cache_key FROM %s "" ""WHERE cache_key = %%s and expires > %%s"" % table , [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )"	"call the method <name3> .execute with string ""SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s"" as argument ,"
<name3> <name2> . fetchone ( ) is not None	substitute the '%s' with table and list containing <name3> value of the method call ops .value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively . if exists <name3> next entry from the database that <name2> points at .
def <name6> ( <name1> , <name4> , <name3> , <name2> ) :	define the protected method <name6> with <name1> class instance , <name4> , <name3> and <name2> as arguments .
<name3> <name2> . _cull_frequency == <val1> :	<name3> <name2> ._cull_frequency equals to integer <val1> .
<name2> . clear ( )	call the <name2> .clear method .
else :	if not ,
<name2> = <name2> . replace ( <name6> = <name3> )	call the method <name2> .replace with argument <name6> set to <name3> , substitute it for <name2> .
<name4> = <name5> [ <name3> ] . <name6> . quote_name ( <name1> . _table )	call the <name6> .quote_name method with argument <name1> ._table on the object under the <name3> key of <name5> dictionary , substitute the result for <name4> .
<name4> . execute ( <val3> % table , [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )	call the method <name4> .execute with string <val3> as argument ,
<name4> . execute ( <val2> % <name3> )	substitute the '%s' with <name3> and list containing return value of the method call ops .value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively . call the method <name4> .execute with string <val2> as argument , substitute the '%s' with <name3> .
<name4> = <name1> . fetchone ( ) [ 0 ]	fetch next entry for the database that <name1> points into , substitute first element of it for <name4> .
<name4> <name3> >  <name1> . _max_entries :	<name4> <name3> is greater than <name1> ._max_entries ,
<name2> = <name1> // <name4> . _cull_frequency	divide <name1> by <name4> ._cull_frequency , floor the result and substitute it for <name2> .
<name5> . execute ( <name1> [ <name3> ] . ops . cache_key_culling_sql ( ) % <name6> , [ cull_num ] )	evaluate the method <name1> [ <name3> ] .ops .cache_key_culling_sql , evaluate the result by <name6> modulus , call the method <name5> .execute ,
"<name6> . execute ( ""DELETE FROM %s "" ""WHERE cache_key < %%s"" % table , [ <name6> . fetchone ( ) [ 0 ] ] )"	"with previous result and list containing cull_num , respectively as arguments . call the method <name6> .execute with string ""DELETE FROM %s WHERE cache_key < %%s"" as argument ,"
def <name1> ( <name2> ) :	substitute the '%s' with table and list containing first element of cursor .fetchone method , respectively . define the method <name1> with argument <name2> .
<name5> = <name1> . db_for_write ( <name6> . cache_model_class )	call the method <name1> .db_for_write with argument <name6> .cache_model_class , substitute the result for <name5> .
<name2> = <name6> [ <name4> ] . <name3> . quote_name ( <name5> . _table )	call the <name3> .quote_name method with argument <name5> ._table on the object under the <name4> key of <name6> dictionary , substitute the result for <name2> .
<name5> <name4> [ <name3> ] . <name6> ( ) as <name6> :	call the <name6> method on the value under the <name3> key of <name4> dictionary , preform following <name5> return value named <name6> ,
<name3> . execute ( <val5>   % <name6> )	call the method <name3> .execute with string <val5> as argument , substitute the '%s' with <name6> .
<name6> <name4> ( <name5> ) :	derive the <name6> <name4> from the <name5> base <name6> .
pass	do nothing .
<name4> <name2> . core . cache . backends . base <name6> <name1> , <name5>	<name4> <name2> .core .cache .backends .base <name6> <name1> and <name5> into default name space .
<name6> <name4> ( <name5> ) :	derive the <name6> <name4> from the base <name6> <name5> .
def <name3> ( <name5> , <name1> , * <name6> , ** <name4> ) :	define initialization method <name3> with 4 arguments : <name5> , <name1> , list of arguments <name6> and dictionary of arguments <name4> .
<name5> . <name1> ( <name4> , * <name6> , ** <name3> )	call the <name5> initialization method <name1> with 3 arguments <name4> , list of arguments <name6> and dictionary of arguments <name3> .
def <name2> ( <name5> , <name6> , <name1> , <name3> = <name4> , <name2> = <name5> ) :	define the method <name2> with 5 arguments : <name5> , <name6> , <name1> , <name3> set to <name4> and <name2> set to <name5> .
<name2> = <name4> . make_key ( <name2> , <name3> = <name3> )	call the method <name4> .make_key with <name2> and <name3> set to <name3> as arguments , substitute it for <name2> .
<name1> . validate_key ( <name3> )	call the method <name1> .validate_key with argument <name3> .
<name2> <name6>	<name2> boolean <name6> .
def <name6> ( <name3> , <name1> , <name4> = <name5> , <name2> = <name5> ) :	define the method <name6> with 4 arguments : <name3> , <name1> , <name4> set to <name5> and <name2> set to <name5> .
<name6> = <name3> . make_key ( <name6> , <name5> = <name5> )	call the method <name3> .make_key with <name6> and <name5> set to <name5> as arguments , substitute it for <name6> .
<name4> . validate_key ( <name6> )	call the method <name4> .validate_key with argument <name6> .
<name5> <name2>	<name5> <name2> .
def <name5> ( <name2> , <name4> , <name3> , <name1> = <name6> , <name5> = <name2> ) :	define the method <name5> with 5 arguments : <name2> , <name4> , <name3> , <name1> <name5> to <name6> and <name5> <name5> to <name2> .
<name3> = <name4> . make_key ( <name3> , <name5> = <name5> )	call the method <name4> .make_key with <name3> and <name5> set to <name5> as arguments , substitute it for <name3> .
<name3> . validate_key ( <name4> )	call the method <name3> .validate_key with argument <name4> .
def <name2> ( <name5> , <name6> , <name1> = <name3> ) :	define the method <name2> with 3 arguments : <name5> , <name6> , and <name1> set to <name3> .
<name4> = <name3> . make_key ( <name4> , <name5> = <name5> )	call the method <name3> .make_key with <name4> and <name5> set to <name5> as arguments , substitute it for <name4> .
<name5> . validate_key ( <name2> )	call the method <name5> .validate_key with argument <name2> .
def <name5> ( <name6> , <name4> , <name3> = <name2> ) :	define the method <name5> with 3 arguments : <name6> , <name4> , and <name3> set to <name2> .
<name4> { }	<name4> an empty dictionary .
def <name6> ( <name1> , <name2> , <name3> = <name4> ) :	define the method <name6> with 3 arguments : <name1> , <name2> , and <name3> set to <name4> .
<name3> = <name6> . make_key ( <name3> , <name5> = <name5> )	call the method <name6> .make_key with <name3> and <name5> set to <name5> as arguments , substitute it for <name3> .
<name6> . validate_key ( <name1> )	call the method <name6> .validate_key with argument <name1> .
<name2> <name4>	<name2> boolean <name4> .
def <name6> ( <name5> , <name1> , <name3> = <name2> , <name4> = <name6> ) :	define the method <name6> with 4 arguments : <name5> , <name1> , <name3> set to <name2> and <name4> set to <name6> .
pass	do nothing
def <name6> ( <name5> , <name2> , <name3> = <name4> ) :	define the method <name6> with 3 arguments : <name5> , <name2> , and <name3> set to <name4> .
pass	do nothing .
def <name1> ( <name3> ) :	define the method <name1> with argument <name3> .
pass	do nothing .
<name5> <name6> ( <name4> ) :	derive the <name5> <name6> from the <name4> base <name5> .
pass	do nothing .
<name6> <name1>	<name6> module <name1> .
<name2> <name3>	<name2> module <name3> .
<name1> <name5>	<name1> module <name5> .
<name4> <name6>	<name4> module <name6> .
<name4> <name2>	<name4> module <name2> .
<name4> <name5>	<name4> module <name5> .
<name2> <name6>	<name2> module <name6> .
<name4> <name1>	<name4> module <name1> .
<name5> <name1>	<name5> module <name1> .
<name4> <name2> . core . cache . backends . base <name3> <name5> , <name6>	<name4> <name2> .core .cache .backends .base <name3> <name5> and <name6> into default name space .
<name2> <name6> . core . files . move <name1> <name5>	<name2> <name6> .core .files .move <name1> <name5> into default name space .
<name5> <name2> . utils . encoding <name4> <name3>	<name5> <name2> .utils .encoding <name4> <name3> into default name space .
<name6> :	<name6> ,
<name5> <name1> . utils . six . moves <name4> <name3> <name6> <name2>	<name5> <name1> .utils .six .moves <name4> <name3> <name6> <name2> into default name space .
except <name3> :	if <name3> exception is caught ,
<name2> <name3>	<name2> <name3> .
<name5> <name3> ( <name6> ) :	derive the <name5> <name3> from <name6> base <name5> .
<name4> = <val3>	<name4> is a string <val3> .
def <name6> ( <name5> , <name2> , <name4> ) :	define the initialization method <name6> with arguments : <name5> class instance , <name2> and <name4> .
super ( FileBasedCache , self ) . <name3> ( <name1> )	call method <name3> with argument <name1> from the base class of the FileBaseCache .
<name1> . _dir = os . <name3> . abspath ( <name2> )	get absolute directory <name3> of <name2> , substitute it for <name1> ._dir .
<name2> . _createdir ( )	call the <name2> ._createdir method .
def <name3> ( <name6> , <name1> , <name5> , <name4> = <name2> , <name3> = <name6> ) :	define the method <name3> with 5 arguments , <name6> class instance , <name1> , <name5> , <name4> set to <name2> and <name3> set to <name6> .
<name4> <name2> . has_key ( <name5> , <name6> ) :	evaluate method <name2> .has_key with <name5> and <name6> as arguments , <name4> the result is true ,
<name5> <name2>	<name5> boolean <name2> .
<name3> . set ( <name6> , <name4> , <name5> , <name2> )	call the method <name3> .set with <name6> , <name4> , <name5> and <name2> as arguments .
<name6> <name5>	<name6> boolean <name5> .
def <name1> ( <name2> , <name6> , <name5> = <name3> , <name4> = <name3> ) :	define the method <name1> with 5 arguments , <name2> class instance , <name6> , <name5> set to <name3> and <name4> set to <name3> .
<name6> = <name1> . _key_to_file ( <name3> , <name5> )	call the function <name1> ._key_to_file with <name3> and <name5> as arguments , substitute it for <name6> .
<name5> os . <name2> . <name3> ( <name1> ) :	<name5> <name1> file <name2> <name3> ,
<name6> :	<name6> ,
<name6> <name2> . open ( <name1> , <val5>   ) <name3> <name4> :	<name6> return value of the function <name2> .open <name6> <name1> and string <val5> <name3> arguments , named <name3> <name4> ,
<name1> not <name2> . _is_expired ( <name5> ) :	evaluate <name2> ._is_expired method with <name5> as argument , <name1> the result is false ,
     <name1> <name5> . loads ( <name2> . decompress ( <name3> . read ( ) ) )	call <name3> .read function , use the result as the argument for <name2> .decompress function call , call the <name5> .loads function with the previous result as argument , <name1> the result .
except <name2> as <name5> :	if <name2> , renamed to <name5> , exception is caught ,
<name1> <name2> . <name6> == <name6> . ENOENT :	<name1> <name2> .errno equals to <name6> .ENOENT ,
pass	do nothing .
<name3> <name1>	<name3> <name1> .
def <name1> ( <name6> , <name2> , <name4> , <name5> = <name3> , <name1> = <name6> ) :	define the method <name1> with 5 arguments , <name6> class instance , <name2> , <name4> , <name5> <name1> to <name3> and <name1> <name1> to <name6> .
<name6> . _createdir ( )	call the <name6> ._createdir method .
<name3> = <name5> . _key_to_file ( <name4> , <name1> )	call the function <name5> ._key_to_file with <name4> and <name1> as arguments , substitute it for <name3> .
<name2> . _cull ( )	call the method <name2> ._cull .
<name6> , <name3> = <name1> . mkstemp ( <name5> = <name2> . _dir )	call the method <name1> .mkstemp with <name5> set to <name2> ._dir , substitute result for <name6> and <name3> , respectively .
<name3> = <name2>	<name3> is boolean <name2> .
<name4> :	<name4> ,
<name4> <name1> . open ( fd , 'wb'   ) <name6> <name3> :	<name4> return value of the function <name1> .open <name4> fname and string 'rb' <name6> arguments , named <name6> <name3> ,
<name4> = <name6> . get_backend_timeout ( <name2> )	call the method <name6> .get_backend_timeout with argument <name2> , substitute it for <name4> .
<name2> . write ( <name1> . dumps ( <name4> , - 1 ) )	call the function <name1> .dumps with <name4> and integer -1 as arguments , use the result as the argument for the call to <name2> .write function .
<name2> . write ( <name3> . compress ( <name1> . dumps ( <name5> ) , - 1 ) )	call the function <name1> .dumps with argument <name5> , use the result and integer -1 as arguments for the call to the function <name3> .compress , use the result as an argument for the call to the <name2> .write method .
<name6> ( <name5> , <name3> , <name2> = <name1> )	call the function <name6> with <name5> , <name3> , <name2> set to boolean <name1> as arguments .
<name4> = <name6>	<name4> is boolean <name6> .
<name3> :	<name3> perform ,
<name1> not <name2> :	<name1> <name2> is boolean False ,
os . <name4> ( <name3> )	<name4> file <name3> .
def <name5> ( <name1> , <name2> , <name3> = <name4> ) :	define the method <name5> with <name1> class instance , <name2> and <name3> defaulting to <name4> as arguments .
<name5> . _delete ( <name5> . _key_to_file ( <name1> , <name4> ) )	call the function <name5> ._key_to_file with <name1> and <name4> as arguments , use the result as an argument for the call to the <name5> ._delete method .
def <name4> ( <name6> , <name3> ) :	define the method <name4> with <name6> and <name3> as arguments .
<name1> not <name6> . startswith ( <name5> . _dir ) or not os . <name3> . <name2> ( <name6> ) :	<name1> <name6> doesnt start with <name5> ._dir and <name6> file <name3> doesnt <name2> ,
<name1>	<name1> nothing .
<name1> :	<name1> ,
<name5> . remove ( <name6> )	call the function <name5> .remove with argument <name6> .
except <name1> as <name6> :	if exception <name1> , renamed to <name6> , is caught ,
<name3> <name5> . <name4> != <name4> . ENOENT :	<name3> <name5> .errno does not equals to <name4> .ENOENT ,
<name4>	<name4> an exception .
def <name4> ( <name1> , <name3> , <name2> = <name6> ) :	define the method <name4> with <name1> class instance , <name3> and <name2> defaulting to <name6> as arguments .
<name6> = <name3> . _key_to_file ( <name1> , <name5> )	call the function <name3> ._key_to_file with <name1> and <name5> as arguments , substitute it for <name6> .
<name6> os . <name3> . <name2> ( <name1> ) :	<name6> <name1> file <name3> <name2> ,
<name3> <name2> . open ( <name5> , <val4>   ) <name6> <name1> :	<name3> call to the <name2> .open function <name3> <name5> and string <val4> <name6> arguments , renamed to <name1> ,
<name2> not <name5> . _is_expired ( <name4> )	call the method <name5> ._is_expired with argument <name4> , invert the boolean result and <name2> it .
<name3> <name6>	<name3> boolean <name6> .
def <name6> ( <name1> ) :	define the method <name6> with argument <name1> .
<name6> = <name1> . _list_cache_files ( )	call the <name1> ._list_cache_files method , substitute the result for <name6> .
<name5> = len ( <name2> )	<name5> is length of <name2> .
<name2> <name1> <  <name4> . _max_entries :	<name2> <name1> is lesser than <name4> ._max_entries ,
<name3>	<name3> nothing .
<name1> <name5> . _cull_frequency == <val2> :	<name1> <name5> ._cull_frequency equals to integer <val2> .
<name5> <name2> . clear ( )	evaluate <name2> .clear method and <name5> the result .
<name3> = <name5> . sample ( <name3> , int ( <name1> / <name4> . _cull_frequency ) )	divide <name1> by <name4> ._cull_frequency , convert the result to an integer , call the <name5> .sample function with <name3> and previous result as arguments , substitute the result for <name3> .
<name4> <name1> <name6> <name5> :	<name4> every <name1> <name6> <name5> ,
<name5> . _delete ( <name4> )	call <name5> ._delete method with argument <name4> .
def <name2> ( <name3> ) :	define the method <name2> with argument <name3> .
<name4> not os . <name2> . <name6> ( <name1> . _dir ) :	<name4> <name1> ._dir <name2> doesnt <name6> ,
<name5> :	<name5> ,
<name6> . makedirs ( <name1> . _dir , <val5> <name4> )	call <name6> .makedirs function with <name1> ._dir and hexadecimal <val5> <name4> as arguments .
except <name3> as <name6> :	if <name3> , renamed to <name6> , exception is caught ,
<name2> <name5> . <name4> != <name4> . EEXIST :	<name2> <name5> .errno is not equal to <name4> .EEXIST ,
def _key_to_file ( <name6> , <name5> , <name1> = <name3> ) :	substitute '%s' with <name6> ._dir converted to a string . define the method key_to_file with <name6> class instance , <name5> and <name1> defaulting to <name3> as arguments .
<name4> = <name3> . make_key ( <name4> , <name1> = <name1> )	call the method <name3> .make_key with <name4> and <name1> set to <name1> as arguments , substitute the result for <name4> .
<name4> . validate_key ( <name6> )	call the method <name4> .validate_key with argument <name6> .
<name5> os . <name1> . <name2> ( <name4> . _dir , ''   . <name2> ( [ hashlib . <name6> ( <name3> ( <name5> ) ) . hexdigest ( ) , <name4> . cache_suffix ] ) )	<name2> into a string : <name6> hash sum of <name3> ( <name5> ) and <name4> .cache_suffix , compose root file <name1> out of <name4> ._dir and previous result , <name5> it .
def <name4> ( <name6> ) :	define the method <name4> with argument <name6> .
<name4> <name2> os . <name5> . <name6> ( <name1> . _dir ) :	<name4> <name1> ._dir file <name5> does <name2> <name6> ,
<name4>	<name4> nothing .
for <name2> <name4> <name1> . _list_cache_files ( ) :	if <name2> is contained <name4> <name1> ._list_cache_files method return value ,
<name5> . _delete ( <name1> )	call the <name5> ._delete method with argument <name1> .
def <name1> ( <name3> , <name6> ) :	define the method <name1> with <name3> and <name6> as arguments .
<name1> = <name3> . load ( <name4> )	call the function <name3> .load with argument <name4> , substitute the result for <name1> .
<name2> <name4> <name5> <name6> <name3> <name1> <name4> <  <name2> . <name2> ( ) :	<name2> <name4> <name5> <name6> <name3> <name1> <name4> <name5> lesser than return value of the function <name2> .time ,
f . <name5> ( )	call <name5> method on a file stream .
<name1> . _delete ( <name2> . name )	call the <name1> ._delete method with argument <name2> .name .
<name2> <name4>	<name2> boolean <name4> .
<name5> <name4>	<name5> boolean <name4> .
def <name6> ( <name1> ) :	define the method <name6> with argument <name1> .
<name1> <name2> os . <name4> . <name5> ( <name3> . _dir ) :	<name1> <name3> ._dir file <name4> does <name2> <name5> ,
<name6> [ ]	<name6> an empty list .
filelist = [ os . path . join ( <name3> . _dir , <name6> ) <name1> <name6> <name4> <name5> . glob1 ( <name3> . _dir , '*%s'   % <name3> . cache_suffix ) ]	<name1> every <name6> <name4> return value of the <name5> .glob1 function called with 2 arguments : <name3> ._dir and ,
<name6> <name2>	self .cache_suffix converted to a string , appended to the character '*' , call os .path .join with self ._dir and fname as arguments , <name2> is a list containing all the previous results . <name6> <name2> .
<name2> <name3> ( <name6> ) :	derive the <name2> <name3> from the base <name2> <name6> .
pass	do nothing .
<name5> <name6>	<name5> module <name6> .
<name5> :	<name5> ,
<name3> <name4> . utils . six . moves <name6> <name1> <name5> <name2>	<name3> <name4> .utils .six .moves <name6> <name1> <name5> <name2> into default name space .
except <name6> :	if <name6> exception is caught ,
<name5> <name3>	<name5> <name3> .
<name2> <name1> . core . cache . backends . base <name4> <name5> , <name6>	<name2> <name1> .core .cache .backends .base <name4> <name5> and <name6> into default name space .
<name2> <name6> . utils . synch <name1> <name5>	<name2> <name6> .utils .synch <name1> <name5> into default name space .
_caches = { }	__caches is an empty dictionary .
_expire_info = { }	__expire_info is an empty dictionary .
_locks = { }	__locks is an empty dictionary .
<name2> <name3> ( <name1> ) :	derive the <name2> <name3> from the base <name2> <name1> .
def <name1> ( <name6> , <name5> , <name3> ) :	define the initialization method <name1> with 3 arguments : <name6> , <name5> and <name3> .
<name1> . <name3> ( <name4> , <name5> )	call the <name3> method with <name4> and <name5> arguments from the base class <name1> .
self . _cache = <name4> . setdefault ( <name3> , { }  )	call the <name4> .setdefault method with <name3> and empty dictionary as arguments , substitute the result for self_cache .
self . <name3> = <name3> . setdefault ( <name5> , { }  )	call the <name3> .setdefault method with <name5> and empty dictionary as arguments , substitute the result for self_expire_info .
self . <name4> = _locks . setdefault ( <name6> , <name2> ( ) )	call the <name4> .setdefault method with <name6> and <name2> ( ) as arguments , substitute the result for self_lock .
def <name6> ( <name4> , <name5> , <name1> , <name2> = <name3> , <name6> = <name4> ) :	define the method <name6> with 5 arguments , <name4> class instance , <name5> , <name1> , <name2> set to <name3> and <name6> set to <name4> .
<name2> = <name3> . make_key ( <name2> , <name5> = <name5> )	call the method <name3> .make_key with <name2> and <name5> set to <name5> as arguments , substitute the result for <name2> .
<name4> . validate_key ( <name1> )	call the method <name4> .validate_key with argument <name1> .
pickled = <name4> . dumps ( <name1> , <name4> . HIGHEST_PROTOCOL )	call the <name4> .dumps function with <name1> and <name4> .HIGHEST_PROTOCOL as arguments .
<name6> <name4> . _lock . writer ( ) :	call the <name4> ._lock .writer method , <name6> the result perform the following ,
<name2> <name4> . _has_expired ( <name3> ) :	evaluate <name4> ._has_expired with argument <name3> , <name2> the result is True ,
<name5> . _set ( <name1> , <name4> , <name6> )	call the method <name5> ._set with <name1> , <name4> and <name6> as arguments .
<name6> <name3>	<name6> boolean <name3> .
<name5> <name6>	<name5> boolean <name6> .
def <name4> ( <name5> , <name6> , <name2> = <name3> , <name1> = <name3> ) :	define the method <name4> with 4 arguments , <name5> class instance , <name6> , <name2> set to <name3> and <name1> set to <name3> .
<name3> = <name1> . make_key ( <name3> , <name5> = <name5> )	call the method <name1> .make_key with <name3> and <name5> set to <name5> as arguments , substitute the result for <name3> .
<name1> . validate_key ( <name5> )	call the method <name1> .validate_key with argument <name5> .
<name2> = <name5>	substitute <name5> for <name2> .
<name6> <name1> . _lock . reader ( ) :	call the <name1> ._lock .reader method , <name6> the result perform the following ,
<name4> not <name2> . _has_expired ( <name5> ) :	evaluate the method <name2> ._has_expired with argument <name5> , <name4> it as False ,
<name6> = <name3> . _cache [ <name2> ]	substitute value under the <name2> <name2> of <name3> ._cache dictionary for <name6> .
<name5> <name2> <name1> <name3> <name6> :	<name5> <name2> <name1> <name3> <name6> .
<name4> :	<name4> ,
<name3> <name5> . loads ( <name4> )	evaluate <name5> .loads with argument <name4> , <name3> the result .
except <name3> . PickleError :	if <name3> .PickleError exception is caught ,
<name4> <name2>	<name4> <name2> .
<name5> <name4> . _lock . writer ( ) :	call the <name4> ._lock .writer method , <name5> the result perform the following ,
<name4> :	<name4> ,
del <name6> . _cache [ <name5> ]	delete the value under <name5> <name5> of <name6> ._cache dictionary .
del <name5> . _expire_info [ <name6> ]	delete the value under <name6> <name6> of <name5> ._expire_info .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
<name4> <name2>	<name4> <name2> .
def <name2> ( <name1> , <name6> , <name5> , <name4> = <name3> ) :	define the method <name2> with 4 arguments , <name1> class instance , <name6> , <name5> and <name4> set to <name3> .
<name5> len ( <name1> . _cache ) >= <name1> . _max_entries :	<name5> length of <name1> ._cache is greater or equal to <name1> ._max_entries ,
<name1> . _cull ( )	call the <name1> ._cull method .
<name3> . _cache [ <name1> ] = <name2>	substitute <name2> for the <name2> under the <name1> <name1> of <name3> ._cache dictionary .
<name6> . _expire_info [ <name3> ] = <name6> . get_backend_timeout ( <name1> )	call the <name6> .get_backend_timeout with argument <name1> , substitute it for the value under the <name3> <name3> of <name6> ._expire_info dictionary .
def <name5> ( <name6> , <name3> , <name4> , <name2> = <name1> , <name5> = <name6> ) :	define the method get with 5 arguments , <name6> class instance , <name3> , <name4> , <name2> <name5> to <name1> and <name5> <name5> to <name6> .
<name1> = <name6> . make_key ( <name1> , <name3> = <name3> )	call the method <name6> .make_key with <name1> and <name3> set to <name3> as arguments , substitute the result for <name1> .
<name2> . validate_key ( <name3> )	call the method <name2> .validate_key with argument <name3> .
<name4> = <name5> . dumps ( <name1> , <name5> . HIGHEST_PROTOCOL )	call the function <name5> .dumps with <name1> and <name5> .HIGHEST_PROTOCOL as the arguments , substitute the result for <name4> .
<name6> <name1> . _lock . writer ( ) :	call the <name1> ._lock .writer method , <name6> the result perform the following ,
<name6> . _set ( <name2> , <name1> , <name4> )	call the method <name6> ._set with <name2> , <name1> and <name4> as arguments .
def <name1> ( <name4> , <name5> , <name3> = <val6> , <name2> = <name1> ) :	define the method <name1> with <name4> class instance , <name5> , <name3> set to integer <val6> and <name2> set to <name1> , as arguments .
<name3> = <name6> . get ( <name4> , <name1> = <name1> )	call the <name6> .get method with <name4> and <name1> set to <name1> as arguments , substitute the result for <name3> .
<name2> <name3> <name6> <name4> :	<name2> <name3> <name6> <name4> ,
<name3> <name1> ( <val4> % <name2> )	<name3> an <name1> exception with string <val4> as argument , substitute '%s' with <name2> converted into a string .
<name3> = <name2> + <name5>	<name3> is a sum of <name2> and <name5> .
<name1> = <name2> . make_key ( <name1> , <name3> = <name3> )	call the method <name2> .make_key with <name1> and <name3> set to <name3> as arguments , substitute the result for <name1> .
<name2> = <name1> . dumps ( new_value , <name1> . HIGHEST_PROTOCOL )	call the function <name1> .dumps with value and <name1> .HIGHEST_PROTOCOL as the arguments , substitute the result for <name2> .
<name5> <name6> . _lock . writer ( ) :	call the <name6> ._lock .writer method , <name5> the result perform the following ,
<name5> . _cache [ <name1> ] = <name6>	substitute <name6> for value under the <name1> <name1> of <name5> ._cache dictionary .
<name1> <name4>	<name1> <name4> .
def <name1> ( <name2> , <name4> , <name3> = <name6> ) :	define the method <name1> with <name2> class instance , <name4> and <name3> defaulting to <name6> as arguments .
<name6> = <name3> . make_key ( <name6> , <name4> = <name4> )	call the method <name3> .make_key with <name6> and <name4> set to <name4> as arguments , substitute the result for <name6> .
<name1> . validate_key ( <name6> )	call the method <name1> .validate_key with argument <name6> .
<name5> <name4> . _lock . reader ( ) :	call the <name4> ._lock .reader method , <name5> the result perform the following ,
<name5> not self . <name2> ( <name3> ) :	<name5> call to the <name2> method with argument <name3> evaluates to boolean False ,
<name4> <name3>	<name4> boolean <name3> .
<name4> <name1> . _lock . writer ( ) :	call the <name1> ._lock .writer method , <name4> the result perform the following ,
<name3> :	<name3> ,
del <name5> . _cache [ <name4> ]	delete the value under the <name4> <name4> of <name5> ._cache dictionary .
del <name6> . _expire_info [ <name4> ]	delete the value under the <name4> <name4> of <name6> ._expire_info dictionary .
except <name6> :	if <name6> exception is caught ,
pass	do nothing .
<name5> <name4>	<name5> boolean <name4> .
def <name4> ( <name3> , <name5> ) :	define the method <name4> with <name3> and <name5> as arguments .
<name1> = <name6> . _expire_info . get ( <name5> , - 1 )	call the method <name6> ._expire_info .get with <name5> and integer -1 as arguments , substitute the result for <name1> .
<name6> <name4> <name5> <name1> <name3> <name4> >  <name2> . <name2> ( ) :	<name6> <name4> <name5> <name1> <name3> <name4> <name5> greater than the return value of the call to the function <name2> .time ,
<name1> <name2>	<name1> boolean <name2> .
<name5> <name4>	<name5> boolean <name4> .
def <name1> ( <name4> ) :	define the method <name1> with argument <name4> .
<name3> <name2> . _cull_frequency == <val6> :	<name3> <name2> ._cull_frequency equals to integer <val6> .
<name3> . clear ( )	call <name3> .clear method .
else :	if not ,
<name3> = [ <name6> <name4> ( <name2> , <name6> ) <name1> enumerate ( <name5> . _cache ) <name3> <name2> % <name5> . _cull_frequency == 0 ]	<name4> every <name2> and <name6> <name1> enumerated values of <name5> ._cache , <name3> <name2> is divisible by <name5> ._cull_frequency , append <name6> to <name3> list .
<name3> <name2> <name6> <name5> :	<name3> every <name2> <name6> <name5> ,
<name4> . _delete ( <name2> )	call the method <name4> ._delete with argument <name2> .
def <name4> ( <name1> , <name2> ) :	define the method <name4> with arguments <name1> and <name2> .
<name5> :	<name5> ,
del <name5> . _cache [ <name2> ]	delete the value under the <name2> <name2> of <name5> ._cache dictionary .
except <name4> :	if <name4> exception is caught ,
pass	do nothing .
<name2> :	<name2> ,
del <name5> . _expire_info [ <name2> ]	delete the value under the <name2> <name2> of the <name5> ._expire_info dictionary .
except <name4> :	if <name4> exception is caught ,
pass	do nothing .
def <name6> ( <name2> , <name4> , <name3> = <name1> ) :	define the method <name6> with <name2> class instance , <name4> and <name3> defaulting to <name1> as arguments .
<name6> = <name5> . make_key ( <name6> , <name4> = <name4> )	call the method <name5> .make_key with <name6> and <name4> set to <name4> as arguments , substitute the result for <name6> .
<name2> . validate_key ( <name4> )	call the method <name2> .validate_key with argument <name4> .
<name2> <name3> . _lock . writer ( ) :	call the <name3> ._lock .writer method , <name2> the result perform the following ,
<name3> . _delete ( <name1> )	call the method <name3> ._delete with argument <name1> .
def <name1> ( <name6> ) :	define the method <name1> with argument <name6> .
<name6> . _cache . clear ( )	call the method <name6> ._cache .clear .
<name4> . _expire_info . clear ( )	call the method <name4> ._expire_info .clear .
<name2> <name3> ( <name1> ) :	derive the <name2> <name3> from the base <name2> <name1> .
pass	do nothing .
<name4> <name1>	<name4> module <name1> .
<name1> <name3>	<name1> module <name3> .
<name2> <name5> . core . cache . backends . base <name3> <name4> , <name6>	<name2> <name5> .core .cache .backends .base <name3> <name4> and <name6> into default name space .
<name1> <name3> . utils <name5> <name6>	<name1> <name3> .utils <name5> <name6> into default name space .
<name4> <name5> . utils . deprecation <name1> <name2> , <name6>	<name4> <name5> .utils .deprecation <name1> <name2> and <name6> into default name space .
<name6> <name2> . utils . encoding <name3> <name5>	<name6> <name2> .utils .encoding <name3> <name5> into default name space .
<name2> <name6> . utils . functional <name1> <name4>	<name2> <name6> .utils .functional <name1> <name4> into default name space .
<name5> <name1> ( <name3> ) :	derive the <name5> <name1> from <name3> the base <name5> .
renamed_methods = ( ( <val2>   , <val1>   , <name6> ) , )	renamed methods is a tuple containing 3 elements : <val2> , <val1> and <name6> .
<name3> <name2> ( six . with_metaclass ( <name1> , <name6> ) ) :	derive the <name3> <name2> from base <name3> <name1> and <name6> .
def <name1> ( <name5> , <name3> , <name6> , <name2> , <name4> ) :	define the method <name1> with , <name5> , <name3> , <name6> , <name2> , <name4> as arguments .
super ( <name4> , self ) . __init__ ( <name5> )	call the initialization method with argument <name5> for the base class of the <name4> class .
<name4> isinstance ( <name3> , <name2> . string_types ) :	<name4> <name3> is an instance of <name2> .string_types ,
<name5> . _servers = <name2> . <name1> ( <val3>   )	<name1> <name2> with <val3> as delimiter , substitute the result for <name5> ._servers .
else :	if not ,
<name6> . _servers = <name2>	substitute <name2> for <name6> ._servers .
<name6> . LibraryValueNotFoundException = <name4>	substitute <name4> for <name6> .LibraryValueNotFoundException .
<name1> . _lib = <name5>	substitute <name5> for <name1> ._lib .
<name1> . _options = <name5> . get ( <val2>   , <name4> )	call the <name5> .get function with string <val2> and <name4> as arguments , substitute the result for <name1> ._options .
@  <name1>	<name1> decorator ,
def <name3> ( <name6> ) :	define the method <name3> with argument <name6> .
<name2> getattr ( <name1> , <val3>   , None ) is None :	<name2> <name1> object has an attribute <val3> ,
<name5> . _client = <name5> . _lib . Client ( <name5> . _servers )	call the <name5> ._lib .Client with argument <name5> ._servers , substitute the result for <name5> ._client .
<name6> <name3> . _client	<name6> <name3> ._client .
def <name6> ( <name2> , <name4> = <name3> ) :	define the method <name6> with <name2> and <name4> set to <name3> as arguments .
<name6> <name1> == <name4> :	<name6> <name1> equals to <name4> ,
<name4> = <name5> . default_timeout	substitute <name5> .default_timeout for <name4> .
<name4> <name5> <name6> <name2> :	<name4> <name5> <name6> <name2> ,
<name6> <val5>	<name6> integer <val5> .
elif int ( <name5> ) == <val6> :	else if <name5> converted into an integer equals to integer <val6> ,
<name1> = - 1	<name1> is a integer -1 .
<name6> <name5> >  <val2> :	<name6> <name5> is greater than integer <val2> ,
<name6> += int ( <name5> . <name5> ( ) )	convert return value of the function <name5> .time to an integer , increment <name6> by it .
<name6> int ( <name3> )	convert <name3> into an integer , <name6> it .
def <name2> ( <name1> , <name5> , <name6> = <name4> ) :	define the method <name2> with <name1> class instance , <name5> and <name6> defaulting to <name4> as arguments .
<name3> <name1> ( super ( <name5> , self ) . <name2> ( <name4> , <name6> ) )	call the method <name2> with arguments <name4> and <name6> from the base class of the class <name5> , use it as an argument for the call to the function <name1> , <name3> the result .
def <name2> ( <name5> , <name6> , <name4> , <name3> = <name1> , <name2> = <name5> ) :	define the method <name2> with 5 arguments , <name5> class instance , <name6> , <name4> , <name3> set to <name1> and <name2> set to <name5> .
<name5> = <name1> . make_key ( <name5> , <name3> = <name3> )	call the method <name1> .make_key with <name5> and <name3> set to <name3> as arguments , substitute the result for <name5> .
return <name3> . _cache . add ( <name2> , <name4> , <name3> . get_backend_timeout ( <name6> ) )	call the method <name3> ._cache .add with <name2> , <name4> , <name3> .get_backend_timeout ( <name6> ) as arguments .
def <name5> ( <name6> , <name3> , <name1> = <name2> , <name4> = <name2> ) :	define the method <name5> with 5 arguments , <name6> class instance , <name3> , <name1> set to <name2> and <name4> set to <name2> .
<name5> = <name4> . make_key ( <name5> , <name2> = <name2> )	call the method <name4> .make_key with <name5> and <name2> set to <name2> as arguments , substitute the result for <name5> .
<name3> = <name6> . _cache . get ( <name4> )	call the <name6> ._cache .get method with argument <name4> , substitute the result for <name3> .
<name1> <name5> <name4> <name6> :	<name1> <name5> <name4> <name6> ,
<name5> <name3>	<name5> <name3> .
<name1> <name5>	<name1> <name5> .
def <name2> ( <name1> , <name5> , <name3> , <name6> = <name4> , <name2> = <name1> ) :	define the method <name2> with 5 arguments , <name1> class instance , <name5> , <name3> , <name6> <name2> to <name4> and <name2> <name2> to <name1> .
<name4> = <name6> . make_key ( <name4> , <name3> = <name3> )	call the method <name6> .make_key with <name4> and <name3> set to <name3> as arguments , substitute the result for <name4> .
<name2> . _cache . set ( <name3> , <name1> , <name2> . get_backend_timeout ( <name4> ) )	call the method <name2> ._cache .set with <name3> , <name1> , <name2> .get_backend_timeout ( <name4> ) as arguments .
def <name6> ( <name1> , <name2> , <name3> = <name5> ) :	define the method <name6> with <name1> , <name2> and <name3> set to <name5> as arguments .
<name4> = <name6> . make_key ( <name4> , <name2> = <name2> )	call the method <name6> .make_key with <name4> and <name2> set to <name2> as arguments , substitute the result for <name4> .
<name2> . _cache . delete ( <name6> )	call the method <name2> ._cache .delete with argument <name6> .
def <name6> ( <name1> , <name3> , <name4> = <name2> ) :	define the method <name6> with <name1> class instance , <name3> and <name4> defaulting to <name2> as arguments .
new_keys = [ <name1> . make_key ( x , <name5> = <name5> ) for x in <name4> ]	define the method get_many with 3 arguments , <name1> class instance , <name4> and <name5> set to None .
<name3> = <name2> . _cache . get_multi ( <name1> )	call the method <name2> ._cache .get_multi with argument <name1> , substitute the result for <name3> .
<name4> <name5> :	<name4> <name5> is true .
<name4> = { }	<name4> is an empty dictionary .
<name1> = dict ( <name5> ( <name2> , <name4> ) )	<name5> together <name2> and <name4> , convert it to dictionary , assign it to <name1> .
<name6> <name3> , <name5> <name4> <name1> . items ( ) :	<name6> every <name3> and <name5> <name4> return value of the <name1> .items function ,
<name5> [ <name3> [ <name6> ] ] = <name1>	substitute <name1> for value under the <name6> - th element of <name3> key of <name5> dictionary .
<name6> = <name5>	substitute <name5> for <name6> .
<name6> <name4>	<name6> <name4> .
def <name3> ( <name1> , ** <name2> ) :	define the method <name3> with <name1> and dictionary pairs of elements <name2> .
<name5> . _cache . disconnect_all ( )	call the method <name5> ._cache .disconnect_all .
def <name2> ( <name4> , <name6> , <name5> = <val1> , <name3> = <name2> ) :	define the method <name2> with <name4> , <name6> , <name5> defaulting to integer <val1> and <name3> defaulting to <name2> as arguments .
<name5> = <name3> . make_key ( <name5> , <name6> = <name6> )	call the method <name3> .make_key with <name5> and <name6> set to <name6> as arguments , substitute the result for <name5> .
<name6> <name3> <  <val5> :	<name6> <name3> is smaller than integer <val5> ,
<name6> <name3> . _cache . decr ( <name2> , - <name5> )	evaluate the method <name3> ._cache .decr with <name2> and negative <name5> as arguments , <name6> the result .
<name3> :	<name3> ,
<name5> = <name6> . _cache . incr ( <name2> , <name4> )	call the method <name6> ._cache .incr with <name2> and <name4> as arguments , substitute the result for <name5> .
except <name6> . LibraryValueNotFoundException :	if <name6> .LibraryValueNotFoundException exception is caught ,
<name1> = <name6>	<name1> is <name6> .
<name2> <name5> <name4> <name3> :	<name2> <name5> <name4> <name3> ,
<name6> <name2> ( <val5> % <name3> )	<name6> an <name2> exception with string <val5> as argument , substitute '%s' for <name3> .
<name1> <name2>	<name1> <name2> .
def <name2> ( <name1> , <name3> , <name6> = <val4> , <name5> = <name2> ) :	define the method <name2> with <name1> , <name3> , <name6> defaulting to integer <val4> and <name5> defaulting to <name2> as arguments .
<name1> = <name4> . make_key ( <name1> , <name5> = <name5> )	call the method <name4> .make_key with <name1> and <name5> set to <name5> as arguments , substitute the result for <name1> .
<name5> <name2> <  <val1> :	<name5> <name2> is smaller than integer <val1> .
<name2> <name5> . _cache . incr ( <name6> , - <name1> )	evaluate the method <name5> ._cache .incr with <name6> and negative <name1> as arguments , <name2> the result .
<name2> :	<name2> ,
<name2> = <name3> . _cache . decr ( <name4> , <name1> )	call the method <name3> ._cache .decr with <name4> and <name1> as arguments , substitute the result for <name2> .
except <name2> . LibraryValueNotFoundException :	if <name2> .LibraryValueNotFoundException exception is caught ,
<name4> = <name3>	<name4> is <name3> .
<name5> <name2> <name4> <name1> :	<name5> <name2> <name4> <name1> ,
<name1> <name6> ( <val2> % <name5> )	<name1> an <name6> exception with string <val2> as argument , substitute '%s' for <name5> .
<name6> <name1>	<name6> <name1> .
def <name2> ( <name1> , <name3> , <name6> = <name4> , <name5> = <name2> ) :	define the method <name2> with <name1> , <name3> , <name6> set to <name4> and <name5> set to <name2> as arguments .
<name5> = { }	<name5> is an empty dictionary .
<name5> <name4> , <name6> <name2> <name3> . items ( ) :	<name5> every <name4> and <name6> <name2> <name3> .items function return <name6> ,
<name3> = <name5> . make_key ( <name3> , <name6> = <name6> )	call the method <name5> .make_key with <name3> and <name6> set to <name6> as arguments , substitute the result for <name3> .
<name1> [ <name2> ] = <name6>	substitute <name6> for <name6> under the <name2> <name2> of <name1> dictionary .
<name2> . _cache . set_multi ( <name6> , <name2> . get_backend_timeout ( <name1> ) )	call the method <name2> ._cache .set_multi with <name6> , <name2> .get_backend_timeout ( <name1> ) as arguments .
def <name3> ( <name1> , <name2> , <name4> = <name6> ) :	define the function <name3> with <name1> , <name2> and <name4> set to <name6> as arguments .
<name5> = <name2> <name6> : <name3> . make_key ( <name6> , <name1> = <name1> )	<name5> is <name2> function with argument <name6> , that calls the method <name3> .make_key with <name6> and <name1> set to <name1> as arguments .
self . _cache . delete_multi ( map ( <name6> , <name5> ) )	call the method self_cache .delete_multi with argument list containing <name5> mapped through function <name6> .
def <name3> ( <name1> ) :	define the method <name3> with argument <name1> .
<name3> . _cache . flush_all ( )	call the method <name3> ._cache_flush_all .
<name3> <name1> ( <name6> ) :	derive the <name3> <name1> from the <name6> base <name3> .
def <name2> ( <name6> , <name3> , <name5> ) :	define the method <name2> with argument <name6> , <name3> and <name5> .
<name6> <name3>	<name6> <name3> .
super ( <name5> , self ) . <name2> ( <name6> , <name3> , library = memcache , value_not_found_exception = ValueError )	call method <name2> from the base class of the class <name5> with arguments : <name6> , <name3> ,
@  <name4>	library set to memcache and value_not_found_exception set to ValueError . <name4> decorator ,
def <name4> ( <name5> ) :	define the method <name4> with <name5> class instance as an argument .
<name4> getattr ( <name6> , <val3>   , <name2> ) <name1> <name2> :	<name4> attribute <val3> of the <name6> object <name1> <name2> ,
<name6> . _client = <name6> . _lib . Client ( <name6> . _servers , <name5> = <name3> . HIGHEST_PROTOCOL )	call the method <name6> ._lib .Client with <name6> ._servers and <name5> set to <name3> .HIGHEST_PROTOCOL as arguments , substitute the result for <name6> ._client .
<name3> <name6> . _client	<name3> <name6> ._client .
<name2> <name1> ( <name3> ) :	derive the <name2> <name1> from <name3> base <name2> .
def <name1> ( <name2> , <name5> , <name6> ) :	define the method <name1> with <name2> , <name5> and <name6> as arguments .
<name6> <name2>	<name6> <name2> .
super ( <name6> , self ) . <name5> ( <name3> , <name2> , library = pylibmc , value_not_found_exception = pylibmc . NotFound )	call method <name5> from the base class of the class <name6> with arguments : <name3> , <name2> ,
@  <name3>	library set to pylibmc and value_not_found_exception set to pylibmc .NotFound . decorator <name3> ,
def <name6> ( <name3> ) :	define the method <name6> with argument <name3> .
client = <name5> . _lib . Client ( <name5> . _servers )	call the method <name5> ._lib .Client with argument <name5> ._servers .
<name1> <name4> . _options :	<name1> <name4> ._options exists ,
<name4> . behaviors = <name5> . _options	substitute <name5> ._options for <name4> .behaviors .
<name3> <name5>	<name3> <name5> .
<name2> <name5> <name3> <name1>	<name2> <name5> <name3> <name1> into default name space .
<name2> <name1>	<name2> module <name1> .
<name1> <name2> . utils . encoding <name3> <name4>	<name1> <name2> .utils .encoding <name3> <name4> into default name space .
<name4> <name3> . utils . http <name5> <name6>	<name4> <name3> .utils .http <name5> <name6> into default name space .
<name3> = <val5>	<name3> is a string <val5> .
def <name2> ( <name3> , <name6> = <name5> ) :	define the function <name2> with <name3> and <name6> defaulting to <name5> as arguments .
<name2> <name3> <name6> <name4> :	<name2> <name3> <name6> <name4> ,
<name6> = ( )	<name6> is an empty tuple .
<name1> = <val2>   . <name5> ( <name6> ( <name3> ) <name4> <name3> <name1> <name2> )	call the function <name6> with argument <name3> <name4> every <name3> <name1> <name2> , <name5> the results into a string separated by <val2> , substitute it <name4> <name1> .
args = <name1> . md5 ( <name3> ( <name4> ) )	call the <name1> .md5 fuction with <name3> ( <name4> ) as argument .
<name1> <name2> % ( <name3> , <name6> . hexdigest ( ) )	substitute '%s' in <name2> string with <name3> and <name6> .hexdigest ( ) , respectively , <name1> the result .
<name2> <name4> <name6> <name5>	<name2> <name4> <name6> <name5> into default name space .
<name1> . messages <name2> ( <name4> , <name6> , <name5> , <name3> , <name1> , <name2> , <name4> , <name6> , <name5> , <name3> , <name1> )	<name1> .messages <name2> <name4> , <name6> , <name5> , <name3> , <name1> , <name2> , <name4> , <name6> , <name5> , <name3> and <name1> into default name space .
<name4> . registry <name3> <name2> , <name5> , <name1> , <name6>	<name4> .registry <name3> <name2> , <name5> , <name1> and <name6> into default name space .
<name1> <name6> . core . checks . compatibility . django_1_6_0	<name1> module <name6> .core .checks .compatibility .django_1_6_0 .
<name1> <name4> . core . checks . compatibility . django_1_7_0	<name1> module <name4> .core .checks .compatibility .django_1_7_0 .
<name1> <name4> . core . checks . model_checks	<name1> module <name4> .core .checks .model_checks .
<name6> = [ <val1>   , <val2>   , <val5>   , <val4>   , <val3>   , <val6>   , 'DEBUG'   , 'INFO'   , 'WARNING'   , 'ERROR'   , 'CRITICAL'   , 'register'   , 'run_checks'   , 'tag_exists'   , 'Tags'   , ]	<name6> is a list containing next strings , <val1> , <val2> , <val5> , <val4> , <val3> , <val6> ,
<name1> <name4> <name6> <name3>	<name1> <name4> <name6> <name3> into default name space .
<name1> <name6> . <name2> <name3> <name2>	<name1> <name6> .apps <name3> <name2> into default name space .
<name3> . . <name1> <name2> , <name5> , <name4>	<name3> . . <name1> <name2> , <name5> and <name4> into default name space .
@  <name3> ( <name4> . compatibility )	decorator <name3> with argument <name4> .compatibility .
def <name6> ( ** <name1> ) :	define the function <name6> with argument <name1> dictionary .
<name6> = [ ]	<name6> is an empty list
<name3> . extend ( <name4> ( ** <name6> ) )	call the function <name4> with dictionary <name6> as argument , use the result as an argument for the call to the function <name3> .extend .
<name3> . extend ( <name2> ( ** <name5> ) )	call the function <name2> with dictionary <name5> as argument , use the result as an argument for the call to the function <name3> .extend .
<name5> <name1>	<name5> <name1> .
def <name2> ( app_configs = <name5> , ** <name4> ) :	define the function <name2> with app_config set to <name5> and <name4> dictionary as arguments .
<name4> <name1> . conf <name2> <name6>	<name4> <name1> .conf <name2> <name6> into default name space .
<name6> = <val4>	<name6> is an integer <val4> .
<name6> not <name1> . is_overridden ( <val3>   ) :	<name6> call to the <name1> .is_overridden with string <val3> evaluates to boolean False .
<name5> :	<name5> ,
<name1> . SITE_ID	<name1> .SITE_ID .
<name4> += <val2>	increment <name4> by integer <val2> .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
<name4> :	<name4> ,
<name5> . BASE_DIR	<name5> .BASE_DIR .
except <name6> :	if <name6> exception is caught ,
<name1> += <val3>	increment <name1> by integer <val3> .
<name6> <name5> . is_overridden ( <val4>   ) :	call the function <name5> .is_overridden with argument string <val4> , <name6> it evaluates to boolean True ,
<name5> += <val3>	increment <name5> by integer <val3> .
<name4> <name6> . is_overridden ( <val3>   ) :	call the function <name6> .is_overridden with argument string <val3> , <name4> it evaluates to boolean True ,
<name5> += <val4>	increment <name5> by integer <val4> .
<name1> <name6> . is_overridden ( <val3>   ) :	call the function <name6> .is_overridden with argument string <val3> , <name1> it evaluates to boolean True ,
<name3> += 1	increment <name3> by integer 2 .
<name6> <val2>   <name1> <name4> <name5> ( <name3> . MIDDLEWARE_CLASSES ) :	<name6> string <val2> is <name1> contained <name4> <name3> .MIDDLEWARE_CLASSES <name5> ,
<name2> += 1	increment <name2> by integer 2 .
<name2> <name6> >= <val4> :	<name2> <name6> is greater or equal to integer <val4> ,
"return [ <name5> ( ""Some project unittests may not execute as expected."" , <name2> = ( ""Django 1.6 introduced a new default test runner. It looks like "" ""this project was generated using Django 1.5 or earlier. You should "" ""ensure your tests are all running & behaving as expected. See "" ""https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "" ""for more information."" ) , obj = None , id = '1_6.W001'   , ) ]"	call the <name5> function with 3 arguments : <name2> tuple containing one string , Django 1.6 introduced a new default test runner .
else :	"It looks like this project was generated using Django 1.5 or earlier . You should ensure your tests are all running &  behaving as expected . See https : // docs .djangoproject .com / en / dev / releases / 1.6 / # new - test - runner for more information . "" , obj set to None and id set to a string '1_6.W001' , put the result into a list and return it . if not ,"
<name1> [ ]	<name1> an empty list .
def <name6> ( app_configs = <name5> , ** <name4> ) :	define the function <name6> with app_config set to <name5> and <name4> dictionary as arguments .
<name3> <name2> . db <name6> <name5>	<name3> <name2> .db <name6> <name5> into default name space .
<name4> = [ <name2> <name1> <name5> <name6> <name3> . get_models ( ** <name4> ) <name2> <name1> <name5> <name6> or <name5> . _meta . app_config <name6> <name1> <name1> <name2> <name6> <name5> . _meta . local_fields <name2> isinstance ( <name2> , models . BooleanField ) and not <name2> . has_default ( ) ]	append <name2> to <name4> list <name1> every <name5> <name6> <name3> .get_models with argument <name4> dictionary , only <name2> <name1> <name5> <name6> ,
"return [ <name6> ( <val2> , hint = ( ""Django 1.6 changed the default value of BooleanField from False to None. "" ""See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "" ""for more information."" ) , obj = <name1> , id = '1_6.W002'   , ) <name3> <name1> <name5> problem_fields ]"	or model ._meta .app_config is contained <name5> app_configs , <name3> every <name1> <name5> model ._meta .local_fields , # ANNOTATION only if <name1> is an instance of models .BooleanField and <name1> .has_default ( ) evaluates to False . call the <name6> function with 4 arguments : string <val2> ,
<name1> <name5> <name2> <name3>	<name1> <name5> <name2> <name3> into default name space .
<name6> . . <name2> <name1> , <name4> , <name5>	<name6> . . <name2> <name1> , <name4> and <name5> into default name space .
@  <name1> ( <name2> . compatibility )	decorator <name1> with argument <name2> .compatibility .
def <name1> ( ** <name2> ) :	define the function <name1> with argument <name2> dictionary .
<name2> = [ ]	<name2> is an empty list .
<name3> . extend ( <name5> ( ** <name1> ) )	call the function <name5> with dictionary <name1> as argument , use the result as an argument for the call to the function <name3> .extend .
<name6> <name1>	<name6> <name1> .
def <name6> ( app_configs = <name3> , ** <name5> ) :	define the function <name6> with app_config set to <name3> and <name5> dictionary as arguments .
<name3> <name6> . conf <name4> <name2>	<name3> <name6> .conf <name4> <name2> into default name space .
<name1> not <name5> . is_overridden ( <val6>   ) :	call the function <name5> .is_overridden with argument string <val6> , <name1> the result is boolean False ,
"return [ <name3> ( <val4> , <name6> = ( ""Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "" ""django.contrib.sessions.middleware.SessionMiddleware, "" ""django.contrib.auth.middleware.AuthenticationMiddleware, and "" ""django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "" ""If your project needs these middleware then you should configure this setting."" ) , obj = None , id = '1_7.W001'   , ) ]"	call the <name3> function with 4 arguments : string <val4> , <name6> tuple containing one string ,
else :	Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES . django .contrib .sessions .middleware .SessionMiddleware , django .contrib .auth .middleware .AuthenticationMiddleware , and django .contrib .messages .middleware .MessageMiddleware were removed from the defaults . If your project needs these middleware then you should configure this setting . , obj set to None , and id set to a string '1_7.W001' , put the result into a list and return it . if not ,
<name4> [ ]	<name4> an empty list .
<name5> <name4> <name2> <name1>	<name5> <name4> <name2> <name1> into default name space .
<name1> <name6> . utils . encoding <name5> <name3> , force_str	<name1> <name6> .utils .encoding <name5> <name3> and force_st into default name space .
<name4> = <val3>	<name4> is integer <val3> .
<name2> = <val4>	<name2> is integer <val4> .
<name4> = <val2>	<name4> is integer <val2> .
<name5> = <val1>	<name5> is integer <val1> .
<name2> = <val3>	<name2> is integer <val3> .
@  <name1>	decorator <name1> .
<name2> <name6> ( <name4> ) :	derive <name2> <name6> from <name4> base <name2> .
def <name2> ( <name1> , <name3> , <name5> , <name4> = <name6> , <name2> = <name6> , id = <name6> ) :	define initialization method <name2> with <name1> class instance , <name3> , <name5> , <name4> defaulting to <name6> , <name2> defaulting to <name6> and if defaulting to <name6> as arguments .
assert isinstance ( <name6> , int ) , <val3>	if <name6> is not an integer raise an error with message string <val3> .
<name4> . <name2> = <name2>	substitute <name2> for <name4> .level .
<name2> . <name3> = <name3>	substitute <name3> for <name2> .msg .
<name4> . <name5> = <name5>	substitute <name5> for <name4> .hint .
<name3> . <name4> = <name4>	substitute <name4> for <name3> .obj .
<name6> . <name2> = <name2>	substitute <name2> for <name6> .id .
def <name5> ( <name3> , <name1> ) :	define private method <name5> with <name3> class instance and <name1> as arguments .
return <name2> ( getattr ( <name4> , <name3> ) == getattr ( <name6> , <name3> ) <name1> <name3> <name5> [ <val2>   , <val4>   , <val3>   , <val6>   , <val1>   ] )	if <name1> <name2> <name3> <name5> list of attributes <val2> , <val4> , <val3> , <val6> and <val1> , <name4> and <name6> have the same attribute <name3> ,
def <name4> ( <name1> , <name6> ) :	return boolean True , otherwise return boolean False . define private method <name4> with <name1> class instance and <name6> as arguments .
<name6> not ( <name4> == <name5> )	if <name4> equals to <name5> <name6> boolean False , otherwise <name6> True .
def <name4> ( <name5> ) :	define private method <name4> with argument <name5> .
<name6> <name3> . db <name1> <name4>	<name6> <name3> .db <name1> <name4> into default name space .
<name3> <name1> . obj <name5> <name4> :	<name3> <name1> .obj <name5> <name4> ,
<name4> = <val5>	<name4> is a string <val5> .
elif isinstance ( <name5> . obj , <name3> . base . ModelBase ) :	otherwise if <name5> .object is an instance of the <name3> .base .ModelBase class ,
<name6> = <name4> . obj	substitute <name4> .obj for <name6> .
<name1> = <name6> . _meta . app_label	substitute <name6> ._meta .app_label for <name1> .
<name3> = '%s.%s'   % ( <name6> , <name1> . _meta . object_name )	convert <name6> and <name1> ._meta .object_name to strings , join them with separating '.' character , substitute it for <name3> .
else :	if not ,
<name1> = <name3> ( <name5> . <name1> )	call the function <name3> with argument <name5> .obj , substitute the result for <name1> .
"<name2> = ""(%s) "" % <name6> . <name2> <name3> <name6> . <name2> else """""	<name3> <name6> .id exists , convert <name6> .id to a string , surround it with round brackets , substitute <name2> for it , otherwise <name2> is an empty string .
\ <name3> = <val4> % <name2> . <name3> <name1> <name2> . <name3> else '' \	\ <name1> <name2> .hint exists , replace '%s' in a string <val4> with value of <name2> .hint , substitute it for <name3> , otherwise <name3> is an empty string . \
<name4> <val5> % ( <name6> , <name2> , <name1> . msg , <name3> )	replace all '%s' from string <val5> with values of <name6> , <name2> , <name1> .msg and <name3> , respectively , <name4> the result .
def <name6> ( <name2> ) :	define private method <name6> with argument <name2> .
return <val4> % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )	in the string <val4> , replace '%s' with the name of the type of this class instance ,
def <name2> ( <name5> ) :	replace all the '%r' with <name5> .level , <name5> .msg , <name5> .hint . <name5> .obj and <name5> .id , respectively , return the result . define the method <name2> with argument <name5> .
<name6> <name3> . level >= <name5>	<name6> boolean True if <name3> .level is greater than or equals to <name5> , otherwise <name6> boolean False .
def is_silenced ( <name6> ) :	define the method is_silence with argument <name6> .
<name4> <name5> . conf <name1> <name3>	<name4> <name5> .conf <name1> <name3> into default name space .
<name5> <name2> . id <name6> <name3> . SILENCED_SYSTEM_CHECKS	if <name2> .id is contained <name6> <name3> .SILENCED_SYSTEM_CHECKS <name5> boolean True , False otherwise .
<name2> <name6> ( <name1> ) :	derive the <name2> <name6> from base <name2> <name1> .
def <name2> ( <name5> , * <name1> , ** <name3> ) :	define initialization method <name2> with <name5> class instance , unpacked list <name1> , unpacked dictionary <name3> as arguments .
return super ( <name3> , self ) . <name5> ( <name6> , * <name4> , ** <name1> )	call the <name5> method with 3 arguments : <name6> , unpacked list <name4> and unpacked dictionary <name1> from the base class of <name3> .
<name1> <name4> ( <name6> ) :	derive the <name1> <name4> from base <name1> <name6> .
def <name5> ( <name3> , * <name2> , ** <name6> ) :	define initialization method <name5> with <name3> class instance , unpacked list <name2> , unpacked dictionary <name6> as arguments .
return super ( <name3> , self ) . <name1> ( <name6> , * <name4> , ** <name5> )	call the <name1> method with 3 arguments : <name6> , unpacked list <name4> and unpacked dictionary <name5> from the base class of <name3> .
<name3> <name5> ( <name4> ) :	derive the <name3> <name5> from base <name3> <name4> .
def <name1> ( <name4> , * <name2> , ** <name6> ) :	define initialization method <name1> with <name4> class instance , unpacked list <name2> , unpacked dictionary <name6> as arguments .
return super ( <name6> , self ) . <name5> ( <name3> , * <name4> , ** <name2> )	call the <name5> method with 3 arguments : <name3> , unpacked list <name4> and unpacked dictionary <name2> from the base class of <name6> .
<name3> <name4> ( <name1> ) :	derive the <name3> <name4> from base <name3> <name1> .
def <name4> ( <name1> , * <name6> , ** <name5> ) :	define initialization method <name4> with <name1> class instance , unpacked list <name6> , unpacked dictionary <name5> as arguments .
return super ( <name2> , self ) . <name1> ( <name4> , * <name6> , ** <name5> )	call the <name1> method with 3 arguments : <name4> , unpacked list <name6> and unpacked dictionary <name5> from the base class of <name2> .
<name4> <name3> ( <name5> ) :	derive the <name4> <name3> from base <name4> <name5> .
def <name1> ( <name4> , * <name6> , ** <name3> ) :	define initialization method <name1> with <name4> class instance , unpacked list <name6> , unpacked dictionary <name3> as arguments .
return super ( <name4> , self ) . <name3> ( <name2> , * <name5> , ** <name1> )	call the <name3> method with 3 arguments : <name2> , unpacked list <name5> and unpacked dictionary <name1> from the base class of <name4> .
<name2> <name6> <name1> <name3>	<name2> <name6> <name1> <name3> into default name space .
<name2> <name1> <name6> <name3>	<name2> <name1> <name6> <name3> into default name space .
<name2> <name6>	<name2> module <name6> .
<name1> <name5> . <name6> <name2> <name6>	<name1> <name5> .apps <name2> <name6> into default name space .
<name5> . <name3> <name1> , <name6> , <name2>	<name5> . <name3> <name1> , <name6> and <name2> into default name space .
@  <name2> ( <name4> . models )	decorator <name2> with <name4> .models as an argument .
def <name5> ( <name6> = <name4> , ** <name2> ) :	define the function <name5> with <name6> defaulting to <name4> and unpacked dictionary <name2> as arguments .
errors = [ <name4> . check ( ** <name1> ) <name6> <name4> <name3> <name5> . get_models ( ) if app_configs is None or <name4> . _meta . app_config <name3> app_configs ]	call the <name4> .check method with unpacked dictionary <name1> <name6> every <name4> <name3> return value of function <name5> .get_models ,
<name4> <name2> ( <name1> ( * <name6> ) )	only if app_configs is None ot model ._meta .app_config is contained in app_configs , error is a <name2> containing all the previous elements . <name1> all <name6> elements into a <name2> , <name4> it .
@  <name3> ( <name1> . models , <name1> . signals )	decorator <name3> with <name1> .models and <name1> .signals as arguments .
def <name5> ( app_configs = <name4> , ** <name3> ) :	define the function <name5> with app_config defaulting to <name4> and unpacked dictionary <name3> as arguments ,
<name4> <name6> . db <name3> <name2>	<name4> <name6> .db <name3> <name2> into default name space .
<name6> = [ ]	<name6> is an empty list .
<name5> <name3> <name1> dir ( models . signals ) :	<name5> <name3> <name1> attributes of models_signals object ,
<name3> = getattr ( <name2> . signals , <name5> )	get <name2> .signals <name5> attribute , store it in <name3> .
<name6> isinstance ( <name2> , <name5> . signals . ModelSignal ) :	<name6> <name2> is instance of <name5> .signals .ModelSignal class ,
<name4> <name2> , <name6> <name1> <name5> . unresolved_references . items ( ) :	<name4> every <name2> and <name6> <name1> return value of the call of <name5> .unresolved_references .items method ,
<name6> <name5> , <name1> , <name1> <name2> <name4> :	<name6> every <name5> , <name1> and <name1> <name2> <name4> ,
   <name6> isinstance ( <name3> , <name2> . FunctionType ) :	<name6> <name3> is an instance of <name2> .FunctionType type ,
     <name6> = <val2> % <name5> . __name__	<name6> is a string <val2> replaced by value of <name5> .__name__ .
else :	if not ,
     <name5> = <val3> % <name4> . __class__ . __name__	<name5> is a string <val3> with '%s' replaced by value of <name4> .__class__ .__name__ .
"errors . append ( <name3> ( ""%s was connected to the '%s' signal "" ""with a lazy reference to the '%s' sender, "" ""which has not been installed."" % ( description , name , '.'   . join ( <name1> ) ) , obj = receiver . __module__ , hint = None , id = 'signals.E001'    ) )"	"call the <name3> function with 4 arguments , string "" % s was connected to the '%s' signal with a lazy <name1> to the '%s' sender ,"
<name4> <name1>	"which has not been installed . ""  with all the '%s' replaced by values of description , name and reference joined into a string delimited by '.' , respectively , obj set to receiver .__module__ , hint set to None and id set to string 'signals.E001' , append the result to <name1> . <name4> <name1> ."
<name2> <name6> <name3> <name5>	<name2> <name6> <name3> <name5> into default name space .
<name2> <name3> <name6> <name4>	<name2> <name3> <name6> <name4> into default name space .
<name1> <name4> . utils . itercompat <name2> <name6>	<name1> <name4> .utils .itercompat <name2> <name6> into default name space .
<name1> <name4> ( <name3> ) :	derive the <name1> <name4> with base <name1> <name3> .
<name1> = <val3>	<name1> is a string <val3>
<name4> = <val6>	<name4> is a string <val6> .
<name1> = <val5>	<name1> is a string <val5>
signals = <val2>	signal is a string <val2>
<name2> <name4> ( <name1> ) :	derive the <name2> <name4> with <name1> as base <name2> .
def <name1> ( <name5> ) :	define initialization method <name1> with argument <name5> .
<name6> . registered_checks = [ ]	<name6> .registered_checks is an empty list .
def <name2> ( <name6> , * <name3> ) :	define the method <name2> with <name6> ans unpacked list <name3> as arguments .
def <name5> ( <name3> ) :	define the method <name5> with argument <name3> .
<name3> . <name4> = <name4>	replace <name4> for <name3> .tags .
<name1> <name5> <name4> <name2> <name6> . registered_checks :	<name1> <name5> is <name4> contained <name2> <name6> .registered_checks .
<name3> . registered_checks . append ( <name4> )	call the method <name3> .registered_checks .append with argument <name4> .
<name4> <name2>	<name4> <name2> .
<name5> <name6>	<name5> <name6> .
def <name1> ( <name6> , <name4> = <name2> , <name5> = <name2> ) :	define the method <name1> with <name6> class instance , <name4> defaulting to <name2> , <name5> defaulting to <name2> as argument .
<name6> = [ ]	<name6> is an empty list .
<name3> <name5> <name6> <name1> <name4> :	<name3> <name5> <name6> <name1> <name4> .
<name1> = [ <name5> <name2> <name5> <name6> <name4> . registered_checks <name3> hasattr ( <name5> , <val1>   ) <name5> <name2> ( <name5> . <name6> ) &  <name2> ( <name6> ) ]	append <name5> to <name1> list , <name2> every <name5> <name6> <name4> .register_checks , <name3> <name5> has an attribute <val1> <name5> <name5> .tags <name5> <name6> <name2> intersection is a non empty <name2> .
else :	if not .
<name3> = <name5> . registered_checks	substitute <name5> .registered_checks for <name3> .
<name4> <name2> <name5> <name1> :	<name4> every <name2> <name5> <name1> ,
<name5> = <name2> ( app_configs = app_configs )	call the <name2> function with argument app_config set to app_config , substitute the result for <name5> .
"assert is_iterable ( <name6> ) , ( ""The function %r did not return a list. All functions registered "" ""with the checks registry must return a list."" % <name3> )"	"if <name6> is not an iterable object raise an error with error message ""The function %r did not return a list. All functions registered with the checks registry must return a list."" , with '%s' replaced by value of <name3> ."
<name1> . extend ( <name3> )	call the method <name1> .extend with argument <name3> .
<name5> <name4>	<name5> <name4> .
def <name2> ( <name5> , <name1> ) :	define the method <name2> with <name5> class instance and <name1> as arguments .
<name4> <name5> <name2> <name3> . tags_available ( )	<name4> boolean True if <name5> is contained <name2> <name3> .tags_available method <name4> value , <name4> False otherwise .
def <name1> ( <name6> ) :	define the method <name1> with argument <name6> .
<name1> <name2> ( chain ( * [ <name4> . tags <name3> <name4> <name5> <name6> . registered_checks <name1> hasattr ( <name4> , <val2>   ) ] ) )	append <name4> .tags into a list <name3> every <name4> <name5> <name6> .registered_checks <name1> <name4> has <val2> attribute , put the elements into a <name2> and <name1> it .
<name5> = <name1> ( )	call the function <name1> , substitute the result for <name5> .
<name2> = <name3> . <name2>	substitute <name3> .register for <name2> .
<name3> = <name6> . <name3>	substitute <name6> .run_checks for <name3> .
<name2> = <name1> . <name2>	substitute <name1> .tag_exists for <name2> .
<name3> <name6> <name4> <name2>	<name3> <name6> <name4> <name2> into default name space .
<name4> <name6> . conf <name2> <name5>	<name4> <name6> .conf <name2> <name5> into default name space .
<name2> <name4> . middleware . csrf <name3> <name5>	<name2> <name4> .middleware .csrf <name3> <name5> into default name space .
<name4> <name3> . utils <name5> <name1>	<name4> <name3> .utils <name5> <name1> into default name space .
<name3> <name6> . utils . encoding <name2> <name5>	<name3> <name6> .utils .encoding <name2> <name5> into default name space .
<name5> <name6> . utils . functional <name2> <name3>	<name5> <name6> .utils .functional <name2> <name3> into default name space .
def <name4> ( <name2> ) :	define the function <name4> with an argument <name2> .
def <name3> ( ) :	define the function <name3> .
<name1> = <name2> ( <name3> )	call the function <name2> with an argument <name3> , substitute the result for <name1> .
<name6> <name5> <name3> <name2> :	<name6> <name5> <name3> <name2> ,
<name5> <val4>	<name5> string <val4> .
else :	if not ,
<name2> <name1> ( <name3> )	call the <name1> function with an argument <name3> , <name2> the result .
<name3> = <name4> ( <name3> , <name5> . text_type )	call the function <name4> with arguments <name3> and <name5> .text_type , substitute the result for <name3> .
<name2> {  <val6>   : <name1> ( ) }	<name2> an dictionary containing 1 entry : <name2> value of the function <name1> for <val6> .
def <name1> ( <name3> ) :	define the function <name1> with an argument <name3> .
<name1> = { }	<name1> is an empty dictionary .
<name2> <name1> . DEBUG <name5> <name3> . META . get ( <val6>   ) <name4> <name1> . INTERNAL_IPS :	<name2> <name1> .DEBUG is true <name5> value of the <name3> .META dictionary under the <val6> key is contained <name4> <name1> .INTERNAL_IPS ,
<name4> [ <val3>   ] = <name1>	value under the <val3> key of the <name4> dictionary is boolean <name1> .
<name4> <name5> . db <name2> <name1>	<name4> <name5> .db <name2> <name1> into default name space .
<name3> [ 'sql_queries'   ] = <name4> . queries	substitute <name4> .queries for value under the 'debug' key of the <name3> dictionary .
<name6> <name2>	<name6> <name2> .
def <name5> ( <name4> ) :	define the function <name5> with an argument <name4> .
<name2> <name5> . utils <name3> <name4>	<name2> <name5> .utils <name3> <name4> into default name space .
<name4> = { }	<name4> is an empty dictionary .
<name2> [ <val6>   ] = <name1> . LANGUAGES	substitute <name1> .LANGUAGES for the value under the <val6> key of the <name2> dictionary .
<name6> [ <val1>   ] = <name2> . get_language ( )	call the <name2> .get_language function , substitute the result for the value under the <val1> key of the <name6> dictionary .
<name4> [ <val2>   ] = <name1> . get_language_bidi ( )	call the <name1> .get_language_bidi function , substitute the result for the value under the <val2> key of the <name4> dictionary .
<name2> <name5>	<name2> <name5> .
def <name4> ( <name3> ) :	define the function <name4> with an argument <name3> .
<name4> <name5> . utils <name6> <name3>	<name4> <name5> .utils <name6> <name3> into default name space .
<name2> {  <val6>   : <name1> . get_current_timezone_name ( ) }	<name2> an dictionary containing 1 entry : <name2> value of the function <name1> .get_current_timezone_name for <val6> .
def <name3> ( <name5> ) :	define the function <name3> with an argument <name5> .
<name2> {  <val1>   : <name4> . STATIC_URL }	<name2> an dictionary containing 1 entry : <name4> .STATIC_URL for <val1> .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name2> {  <val1>   : <name6> . MEDIA_URL }	<name2> an dictionary containing 1 entry : <name6> .MEDIA_URL for <val1> .
def <name2> ( <name2> ) :	define the function <name2> with an argument <name2> .
<name5> {  <val1>   : <name3> }	<name5> an dictionary containing 1 entry : <name3> for <val1> .
<name1> <name5> <name3> <name4>	<name1> <name5> <name3> <name4> into default name space .
<name3> <name5>	<name3> module <name5> .
<name2> <name4> . utils <name6> <name5>	<name2> <name4> .utils <name6> <name5> into default name space .
<name1> <name4> . utils . encoding <name6> <name5>	<name1> <name4> .utils .encoding <name6> <name5> into default name space .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from the <name4> base <name1> .
pass	do nothing .
<name6> <name5> ( <name1> ) :	derive the <name6> <name5> from the <name1> base <name6> .
pass	do nothing .
<name5> <name1> ( <name2> ) :	derive the <name5> <name1> from the <name2> base <name5> .
<name1> = <name6>	<name1> is an boolean <name6> .
<name1> <name3> ( <name2> ) :	derive the <name1> <name3> from the <name2> base <name1> .
pass	do nothing .
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> from the <name4> base <name3> .
<name6> <name5> ( <name4> ) :	derive the <name6> <name5> from the <name4> base <name6> .
pass	do nothing .
<name5> <name3> ( <name2> ) :	derive the <name5> <name3> from the <name2> base <name5> .
pass	do nothing .
<name4> <name6> ( <name1> ) :	derive the <name4> <name6> from the <name1> base <name4> .
pass	do nothing .
<name4> <name6> ( <name5> ) :	derive the <name4> <name6> from the <name5> base <name4> .
pass	do nothing .
<name3> <name5> ( <name1> ) :	derive the <name3> <name5> from the <name1> base <name3> .
pass	do nothing .
<name3> <name4> ( <name5> ) :	derive the <name3> <name4> from the <name5> base <name3> .
pass	do nothing .
<name1> <name5> ( <name3> ) :	derive the <name1> <name5> from the <name3> base <name1> .
pass	do nothing .
<name5> <name4> ( <name2> ) :	derive the <name5> <name4> from the <name2> base <name5> .
pass	do nothing .
<name5> <name3> ( <name2> ) :	derive the <name5> <name3> from the <name2> base <name5> .
pass	do nothing .
<name4> = <val5>	<name4> is an string <val5> .
<name2> <name3> ( <name6> ) :	derive the <name2> <name3> from the <name6> base <name2> .
def <name5> ( <name1> , <name4> , <name6> = <name3> , <name2> = <name3> ) :	define the method <name5> with 4 arguments : <name1> , <name4> , <name6> set to <name3> and <name2> set to <name3> .
super ( <name1> , self ) . <name2> ( <name3> , <name5> , <name6> )	call the <name2> method from the base class of the class <name1> with arguments <name3> , <name5> and <name6> .
<name2> isinstance ( <name4> , <name1> ) :	<name2> <name4> is an instance of <name1> class ,
<name1> hasattr ( <name4> , <val2>   ) :	<name1> <name4> has an <val2> attribute ,
<name6> = <name6> . error_dict	substitute <name6> .error_dict for <name6> .
elif <name6> hasattr ( <name2> , <val3>   <name4> <name5> . PY3 else <val1>   ) :	alternatively , <name4> <name5> .PY3 is true check <name4> <name2> does <name6> have an attribute <val3> , <name4> <name5> .PY3 is false , check <name4> <name2> doesnt have an attribute <val1> , perform the following ,
<name6> = <name6> . error_list	substitute <name6> .error_list for <name6> .
else :	if not ,
<name1> , <name4> , <name6> = <name1> . <name1> , <name1> . <name4> , <name1> . <name6>	substitute <name1> .message , <name1> .code , <name1> .params for <name1> , <name4> and <name6> , respectively .
<name4> isinstance ( <name1> , <name6> ) :	<name4> <name1> is an instance of <name6> type ,
<name2> . error_dict = { }	<name2> .error_dict is an empty dictionary .
<name2> <name1> , <name5> <name4> <name3> . items ( ) :	<name2> every <name1> , <name5> <name4> return value of the <name3> .items method ,
<name3> <name4> isinstance ( <name6> , <name5> ) :	<name3> <name6> is <name4> an instance of the <name5> class ,
<name6> = <name3> ( <name6> )	<name6> is an instance of the <name3> class created with an argument <name6> .
<name5> . error_dict [ <name2> ] = <name4> . error_list	substitute <name4> .error_list for the value under the <name2> key of the <name5> .error_dict dictionary .
elif isinstance ( <name1> , <name4> ) :	otherwise if <name1> is an instance of the <name4> type .
<name2> . error_list = [ ]	<name2> .error_list is an empty list .
<name4> <name1> in <name1> :	<name4> every <name1> is <name1> ,
<name1> <name3> isinstance ( <name2> , <name4> ) :	<name1> <name2> is <name3> an instance of the <name4> class ,
<name5> = <name6> ( <name5> )	<name5> is an instance of the <name6> class created with an argument <name5> .
<name1> . error_list . <name6> ( <name5> . error_list )	<name6> the <name1> .error_list list with <name5> .error_list .
else :	if not ,
<name6> . <name3> = <name3>	substitute <name3> for <name6> .message .
<name3> . <name4> = <name4>	substitute <name4> for <name3> .code .
<name5> . <name1> = <name1>	substitute <name1> for <name5> .params .
<name5> . error_list = [ <name5> ]	substitute list containing element <name5> for <name5> .error_list .
@  <name6>	<name6> getter decorator ,
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
getattr ( <name1> , <val5>   )	get attribute <val5> from the <name1> object .
<name5> dict ( <name2> )	convert object <name2> to a dictionary , <name5> it .
@  <name4>	<name4> getter decorator ,
def <name2> ( <name4> ) :	define the <name2> with an argument <name4> .
<name2> hasattr ( <name3> , <val5>   ) :	<name2> <name3> has an <val5> attribute ,
<name2> reduce ( <name3> . add , dict ( <name1> ) . <name6> ( ) )	call the <name3> .add on the <name6> of the <name1> object converted into a dictionary , until it is reduced to a single value , <name2> it .
<name2> <name4> ( <name6> )	convert <name6> to a <name4> and <name2> it .
def <name3> ( <name1> , <name5> ) :	define the method <name3> with arguments <name1> and <name5> .
<name3> hasattr ( <name2> , <val5>   ) :	<name3> <name2> has an <val5> attribute ,
<name2> <name5> , <name1> <name4> <name3> . error_dict . items ( ) :	<name2> every <name5> , <name1> <name4> <name3> .error_dict .items method return value ,
<name4> . setdefault ( <name3> , [ ] ) . <name6> ( <name5> )	call the method <name6> with an argument <name5> on the return value of the method <name4> .setdefault called with 2 arguments : <name3> and an empty list .
else :	if not ,
<name4> . setdefault ( <name5> , [ ] ) . <name6> ( self . <name1> )	call the method <name6> with an argument <name1> on the return value of the method <name4> .setdefault called with 2 arguments : <name5> and an empty list .
<name4> <name1>	<name4> <name1> .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name3> hasattr ( <name4> , <val2>   ) :	<name3> <name4> has an <val2> attribute ,
<name6> <name2> , <name1> <name5> <name3> . error_dict . items ( ) :	<name6> every <name2> , <name1> <name5> <name3> .error_dict .items method return value ,
<name6> <name1> , <name4> ( <name2> ( <name5> ) )	<name6> <name1> and <name2> object converted to an <name4> , created with an argument <name5> .
else :	if not ,
<name6> <name5> <name4> <name2> . error_list :	<name6> every <name5> <name4> <name2> .error_list ,
<name5> = <name1> . <name5>	substitute <name1> .message for <name5> .
<name1> <name6> . params :	<name1> <name6> .params is true ,
<name6> % = <name1> . params	divide <name6> by <name1> .params , substitute the residue of the division for <name6> .
<name4> <name3> ( <name1> )	call the <name3> with an argument <name1> , <name4> the result .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name3> hasattr ( <name1> , <val6>   ) :	<name3> <name1> has an attribute <val6> ,
<name1> repr ( dict ( <name3> ) )	<name1> the printable representation of the <name3> object converted to a dictionary .
<name3> repr ( <name2> ( <name5> ) )	<name3> the printable representation of the <name5> object converted to a <name2> .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name6> <val3>   % <name5>	<name6> the string <val3> , replace '%s' with <name5> .
<name3> <name4> . core . files . base <name2> <name1>	<name3> <name4> .core .files .base <name2> <name1> into default name space .
<name5> = [ <val4>   ]	<name5> is an list containing a string <val4> .
<name2> <name6> <name4> <name5>	<name2> <name6> <name4> <name5> into default name space .
<name2> <name4>	<name2> module <name4> .
<name2> <name1> <name4> <name6> , <name5> , <name3>	<name2> <name1> <name4> <name6> , <name5> and <name3> into default name space .
<name6> <name3> . utils . encoding <name1> <name2>	<name6> <name3> .utils .encoding <name1> <name2> into default name space .
<name1> <name2> . core . files . utils <name3> <name5>	<name1> <name2> .core .files .utils <name3> <name5> into default name space .
<name6> <name2> . utils <name3> <name4>	<name6> <name2> .utils <name3> <name4> into default name space .
<name3> <name6> . utils . encoding <name4> <name5> , <name1>	<name3> <name6> .utils .encoding <name4> <name5> and <name1> into default name space .
@  <name6>	decorator <name6> ,
<name6> <name5> ( <name4> ) :	derive the <name6> <name5> from the <name4> base <name6> .
<name6> = <val5> * <val3> ** <val2>	bring integer <val3> to the power of <val2> , multiply it by <val5> , substitute the result for <name6> .
def <name1> ( <name2> , <name3> , <name5> = <name6> ) :	define the method <name1> with <name2> class instance , <name3> , and <name5> defaulting to <name6> as arguments .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .file .
<name5> <name1> <name6> <name4> :	<name5> <name1> <name6> <name4> ,
<name4> = getattr ( <name6> , <val2>   , <name3> )	get <val2> attribute from the <name6> object , if it doesnt exists use <name3> , substitute it for <name4> .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .name .
<name3> hasattr ( <name2> , <val1>   ) :	<name3> <name2> object has an attribute <val1> ,
<name2> . mode = <name1> . mode	substitute <name1> .mode for <name2> .mode .
def <name2> ( <name4> ) :	define the method <name2> with argument <name4> .
<name1> <name5> ( <name4> . name <name3> ''   )	evaluate the function <name5> with argument <name4> .name , if exists , <name3> an empty string , if not , <name1> the result .
def <name6> ( <name1> ) :	define the method <name6> with argument <name1> .
<name2> <val1> % ( <name5> . __class__ . __name__ , <name5> <name6> <val3> )	substitute '%s' in string <val1> with <name5> .__class__ .__name__ and <name5> , if exists , <name6> string <val3> if it doesnt , <name2> it .
def <name4> ( <name3> ) :	define the method <name4> with argument <name3> .
<name3> bool ( <name6> . name )	convert <name6> .name into an boolean , <name3> it .
def <name2> ( <name3> ) :	define the method <name2> with argument <name3> .
<name6> <name3> ( <name1> ) . <name2> ( <name1> )	call the <name2> method with argument <name1> , on the <name6> value of the <name3> function with argument <name1> , <name6> the result .
def <name4> ( <name2> ) :	define the method <name4> with argument <name2> .
<name1> <name5> . size	<name1> <name5> .size .
def <name4> ( <name1> ) :	define the method <name4> with argument <name1> .
<name2> hasattr ( <name4> . file , <val5>   ) :	<name2> <name4> .file has an attribute <val5> ,
<name6> <name4> . file . size	<name6> <name4> .file .size .
<name6> hasattr ( <name4> . file , <val5>   ) :	<name6> <name4> .file has an attribute <val5> ,
<name5> :	<name5> ,
<name2> <name3> . path . getsize ( <name6> . file . name )	call the <name3> .path .getsize function with argument <name6> .file .name , <name2> the result .
except ( <name1> , <name6> ) :	if <name1> or <name6> errors occurred .
pass	do nothing .
<name3> hasattr ( <name4> . file , <val2>   ) <name5> hasattr ( <name4> . file , <val1>   ) :	<name3> <name4> .file has an attribute <val2> <name5> an attribute <val1> ,
<name4> = <name1> . <name2> . tell ( )	get the position of the <name1> .file <name2> pointer , substitute it for <name4> .
<name5> . <name2> . seek ( 0 , os . SEEK_END )	position the <name2> <name5> .file pointer at the end .
<name1> = <name3> . <name5> . tell ( )	get the position of the <name5> <name3> .file pointer , substitute it for <name1> .
<name6> . <name2> . seek ( <name5> )	position <name2> <name6> .file pointer at the <name5> position .
<name5> <name1>	<name5> <name1> .
<name5> <name2> ( <val6> )	<name5> an <name2> exception with string <val6> as argument .
def <name4> ( <name3> ) :	define the method <name4> with argument <name3> .
<name4> hasattr ( <name3> , <val2>   ) :	<name4> <name3> has an attribute <val2> .
<name4> <name6> . _size	<name4> <name6> ._size .
<name5> . _size = <name5> . _get_size_from_underlying_file ( )	call the method <name5> ._get_size_from_underlying_file , substitute the result for <name5> ._size .
<name4> <name6> . _size	<name4> <name6> ._size .
def <name3> ( <name1> , <name2> ) :	define the method <name3> with arguments <name1> and <name2> .
<name3> . _size = <name6>	substitute <name6> for <name3> ._size .
<name3> = <name1> ( <name2> , <name6> )	<name3> is a <name1> object with <name2> as getter method and <name6> as setter method .
def <name3> ( <name5> ) :	define the method <name3> with argument <name5> .
<name5> not <name4> . file <name1> <name4> . file . closed	if <name4> .file is false <name1> <name4> .file .closed is true , <name5> boolean true , otherwise <name5> boolean false .
<name2> = <name1> ( <name5> )	<name2> is a <name1> object with <name5> as a getter method .
def <name3> ( <name5> , <name1> = <name6> ) :	define the method <name3> with arguments <name5> and <name1> defaulting to <name6> .
<name6> not <name1> :	<name6> <name1> is false ,
<name5> = <name2> . DEFAULT_CHUNK_SIZE	substitute the <name2> .DEFAULT_CHUNK_SIZE for <name5> .
<name1> :	<name1> ,
<name6> . seek ( 0 )	position the file pointer at the beginning of <name6> file .
except ( <name5> , <name1> ) :	if <name5> or <name1> exception occurred .
pass	do nothing .
while True :	endless loop ,
<name4> = <name6> . read ( <name2> )	call the <name6> .read method with argument <name2> , substitute the result for <name4> .
<name2> not <name5> :	<name2> <name5> is false ,
<name2>	<name2> from the smallest enclosing loop .
<name3> <name6>	<name3> one element of <name6> iterable .
def multiple_chunks ( <name2> , <name6> = <name1> ) :	define the method __multiple_chunks__ with arguments <name2> and <name6> defaulting to <name1> .
<name1> not <name3> :	<name1> <name3> is false ,
<name1> = <name2> . DEFAULT_CHUNK_SIZE	substitute <name2> .DEFAULT_CHUNK_SIZE for <name1> .
<name5> <name3> . size >  <name2>	if <name3> .size is greater than <name2> , <name5> boolean True , otherwise <name5> boolean False .
def <name4> ( <name1> ) :	define the method <name4> with argument <name1> .
<name6> = <name3>	<name6> is <name3> .
<name2> <name1> <name6> <name4> . chunks ( ) :	<name2> every <name1> <name6> return value of the method <name4> .chunks ,
<name3> = <name2> ( <name1> )	evaluate the function <name2> with argument <name1> , substitute it for <name3> .
<name5> <name6> <name3> <name1> :	<name5> every <name6> <name3> <name1> ,
<name6> <name4> :	<name6> <name4> is true ,
<name4> = <name6> + <name4>	increment <name4> by <name6> .
<name5> = <name2>	<name5> is <name2> .
\ <name2> <name6> [ - 1 : ] in ( b '\\n'   , b '\\r'   ) : \	<name2> last element of <name6> is newline or carriage return character ,
<name5> <name1>	<name5> one element of <name1> iterable .
else :	if not ,
<name1> = <name4>	substitute <name4> for <name1> .
<name5> <name1> <name4> <name2> <name3> :	<name5> <name1> <name4> <name2> <name3> ,
<name3> <name2>	<name3> one element from the <name2> iterable .
def <name5> ( <name4> ) :	define the method <name5> with argument <name4> .
<name2> <name4>	<name2> <name4> .
def <name6> ( <name1> , <name2> , <name3> , <name4> ) :	define the method <name6> with <name1> , <name2> , <name3> and <name4> as arguments .
<name1> . <name2> ( )	<name2> the file <name1> .
def <name4> ( <name1> , <name2> = <name3> ) :	define the method <name4> with arguments <name1> and <name2> defaulting to <name3> .
<name4> <name3> <name1> . <name6> :	<name4> file <name1> is <name3> <name6> ,
<name4> . seek ( 0 )	position the file pointer at the beginning of <name4> file .
elif <name5> . name <name1> os . <name3> . <name2> ( <name5> . name ) :	otherwise if <name5> .name <name2> <name1> <name5> .name file <name3> <name2> ,
<name4> . <name2> = <name3> ( <name4> . name , <name1> <name6> <name4> . <name1> )	<name3> the <name2> <name4> .name in <name1> <name6> <name4> .mode <name1> , whichever exists , assign the <name2> handler to <name4> .file .
else :	if not ,
<name3> <name2> ( <val4> )	<name3> an <name2> exception with string <val4> as an argument .
def <name5> ( <name4> ) :	define the method <name5> with argument <name4> .
<name4> . file . close ( )	call the method <name4> .file .close .
@  <name1>	decorator <name1> ,
<name4> <name1> ( <name2> ) :	derive the <name4> <name1> from <name2> base <name4> .
def <name5> ( <name1> , <name4> , <name6> = <name3> ) :	define the method <name5> with arguments <name1> , <name4> and <name6> defaulting to <name3> .
<name1> <name6> . PY3 :	<name1> <name6> .PY3 is boolean True ,
<name4> = <name5> <name6> isinstance ( <name1> , <name2> . text_type ) else <name3>	substitute <name5> for <name4> <name6> <name1> is an instance of <name2> .text_type , otherwise substitute <name3> for <name4> .
else :	if not ,
<name5> = <name6>	substitute <name6> for <name5> .
<name1> = <name3> ( <name1> )	call the function <name3> with argument <name1> , substitute it for <name1> .
super ( <name3> , self ) . <name1> ( <name6> ( <name5> ) , <name2> = <name2> )	call the <name1> method with <name6> ( <name5> ) and <name2> set to <name2> arguments , from the base class of the <name3> class .
<name6> . size = len ( <name3> )	substitute length of <name3> for <name6> .size .
def <name1> ( <name6> ) :	define the method <name1> with argument <name6> .
<name4> <val2>	<name4> a string <val2> .
def <name5> ( <name4> ) :	define the method <name5> with argument <name4> .
<name3> <name1>	<name3> boolean <name1> .
def <name1> ( <name5> ) :	define the method <name1> with argument <name5> .
<name5> <name2> ( <name6> ) . __bool__ ( <name6> )	evaluate the method <name2> ( <name6> ) .__bool__ with argument <name6> , <name5> the result .
def <name6> ( <name2> , <name5> = <name1> ) :	define the method <name6> with arguments <name2> and <name5> set to <name1> .
<name1> . seek ( <val4> )	call the <name1> .seek method with argument integer <val4> .
def <name3> ( <name4> ) :	define the method <name3> with argument <name4> .
pass	do nothing .
<name5> <name3>	<name5> module <name3> .
<name3> <name4> . core . files <name5> <name6>	<name3> <name4> .core .files <name5> <name6> into default name space .
<name1> <name3> ( <name6> ) :	derive <name1> <name3> from the base <name1> <name6> .
def <name5> ( <name4> ) :	define method <name5> with <name4> class instance as the argument .
<name3> <name6> . _get_image_dimensions ( ) [ 0 ]	<name3> the first element of the <name3> value of the call to the <name6> ._det_image_dimensions method .
<name4> = <name5> ( <name6> )	get <name5> attribute <name6> , and substitute it for <name4> .
def <name2> ( <name5> ) :	define method <name2> with <name5> class instance as the argument .
<name5> <name1> . _get_image_dimensions ( ) [ 1 ]	<name5> the second element of the <name5> value of the call to the <name1> ._det_image_dimensions method .
height = <name4> ( <name5> )	get <name4> attribute <name5> , and substitute it for width .
def <name1> ( <name4> ) :	define the method <name1> with <name4> class instance as the argument .
<name3> <name2> hasattr ( <name6> , <val4>   ) :	<name3> <name6> does <name2> have an attribute named <val4> .
<name5> = <name3> . closed	substitute <name3> .closed for <name5> .
<name1> . open ( )	call the method <name1> .open ( )
<name2> . _dimensions_cache = <name3> ( <name2> , <name5> = <name5> )	evaluate the method <name3> with <name2> class instance and <name5> set to <name5> as the arguments , substitute the result for <name2> ._dimensions_cache .
<name2> <name1> . _dimensions_cache	<name2> <name1> ._dimensions_cache .
def get_image_dimensions ( <name2> , <name6> = <name3> ) :	define the function get_image_dimension with <name2> and <name6> set to boolean <name3> as the arguments .
<name4> <name1> <name6> <name3> <name2> <name5>	<name4> <name1> module <name6> <name3> <name2> <name5> .
<name2> = <name6> . Parser ( )	<name2> is image parser object , set by calling the <name6> .Parser method .
<name2> hasattr ( <name5> , <val6>   ) :	<name2> <name5> has an attribute <val6> ,
<name3> = <name1>	substitute <name1> for <name3> .
<name6> = <name1> . tell ( )	get the position in bytes from the start of the <name1> , store it in <name6> .
<name5> . seek ( 0 )	set the <name5> position pointer at the beginning .
else :	if not ,
<name5> = <name4> ( <name3> , 'rb'   )	<name4> <name5> named <name3> for reading , store the <name5> object handle in <name5> .
<name5> = <name3>	<name5> is boolean <name3> .
<name2> :	<name2> ,
<name6> = <val4>	<name6> is an integer <val4> .
<name2> 1 :	endless <name2> loop ,
<name1> = <name6> . <name5> ( <name4> )	<name5> <name4> bytes from <name6> and store it in <name1> .
<name3> not <name6> :	<name3> <name6> is empty .
<name1>	<name1> from the endless loop .
<name6> :	<name6> ,
<name5> . <name3> ( <name4> )	<name3> <name4> to the parser <name5> .
except <name6> . error <name2> <name1> :	if <name6> .error <name2> <name1> exception is raised ,
<name3> <name4> . args [ 0 ] . startswith ( <val2> ) :	<name3> <name4> .args list first element starts with string <val2> ,
pass	do nothig .
else :	if not ,
<name5>	<name5> an exception .
<name2> <name4> . image :	<name2> <name4> .image is not empty ,
<name4> <name5> . <name2> . <name6>	<name4> <name6> of the <name2> that was fed to the parser <name5> .
chunk_size *= 2	double the chunk size .
<name3> <name1>	<name3> <name1> .
finally :	execute regardless of the exception being raised ,
<name2> <name4> :	<name2> <name4> is True ,
<name3> . <name2> ( )	<name2> <name3> <name3> .
else :	if not ,
<name1> . seek ( <name6> )	set the <name1> position pointer at <name6> .
<name1> <name2>	<name1> module <name2> .
<name4> = ( <val3>   , <val2>   , <val5>   , <val6>   , <val1>   )	<name4> is a tuple containing strings : <val3> , <val2> , <val5> , <val6> and <val1> .
def <name5> ( <name3> ) :	define the <name5> function with argument <name3> .
<name6> <name5> . fileno ( ) <name3> hasattr ( <name5> , <val1>   ) else <name5>	<name6> result of the <name5> .fileno method <name3> <name5> has an <val1> attribute , otherwise <name6> <name5> .
<name6> <name1> . name == <val2>   :	<name6> <name1> .name equals to <val2> ,
<name4> <name6>	<name4> <name6> .
<name3> <name1> <name2> ( <name4> , <name6> , <name5> , <name3> , <name1> , <name2> , <name4> , <name6> , <name5> )	<name3> <name1> <name2> <name4> , <name6> , <name5> , <name3> , <name1> , <name2> , <name4> , <name6> and <name5> into default name space .
<name3> <name1> . wintypes <name6> <name5> , <name4> , <name2>	<name3> <name1> .wintypes <name6> <name5> , <name4> and <name2> into default name space .
<name4> = <val6>	<name4> is a integer <val6> .
<name2> = 0x1	<name2> is a hexadecimal 1 .
<name2> = 0x2	<name2> is a hexadecimal 2 .
<name4> sizeof ( <name6> ) != sizeof ( <name3> ) :	<name4> size of <name6> does not equals to size of <name3> ,
<name3> = <name6>	substitute <name6> for <name3> .
else :	if not ,
<name1> = <name5>	substitute <name5> for <name1> .
<name3> = <name5>	substitute <name5> for <name3> .
<name2> <name5> ( <name4> ) :	derive the <name2> <name5> from the <name4> base <name2> .
<name1> = [ ( <val6>   , <name3> ) , ( <val2>   , <name3> ) ]	<name1> is a list containing 2 tuples : first tuple contains : string <val6> and <name3> , second contains : string <val2> and <name3> .
<name6> <name3> ( <name1> ) :	derive the <name6> <name3> from the <name1> base <name6> .
<name1> = [ <val3>   ]	<name1> is a list containing one string : <val3> .
<name4> = [ ( <val1>   , <name2> ) , ( <val3>   , <name5> ) ]	<name4> is a list containing 2 tuples : first tuple contains : string <val1> and <name2> , second contains : string <val3> and <name5> .
<name5> <name1> ( <name4> ) :	derive the <name5> <name1> from the <name4> base <name5> .
<name4> = [ <val5>   ]	<name4> is a list containing one string : <val5> .
<name3> = [ ( <val4>   , <name1> ) , ( 'InternalHigh'   , <name1> ) , ( '_offset_union'   , _OFFSET_UNION ) , ( 'hEvent'   , HANDLE ) ]	<name3> is a list containing 4 tuples : first tuple contains : string <val4> and <name1> ,
<name1> = <name3> ( <name5> )	second contains : string 'InternalHigh and ULONG_PTR, third: ' _offset_union ' and _OFFSET_UNION, forth ' hEvent '  and HANDLE . call the function <name3> with argument <name5> , substitute the result for <name1> .
<name2> = <name6> . kernel32 . <name2>	substitute <name6> .kernel32 .LockFileEx for <name2> .
<name1> . restype = <name5>	substitute <name5> for <name1> .restype .
<name2> . argtypes = [ <name3> , <name4> , <name4> , <name4> , <name4> , <name5> ]	<name2> .argtypes is a list containing 6 elements : <name3> , <name4> , <name4> , <name4> , <name4> and <name5> .
<name3> = <name2> . kernel32 . <name3>	substitute <name2> .kernel32 .UnlockFileEx for <name3> .
<name5> . restype = <name3>	substitute <name3> for <name5> .restype .
<name2> . argtypes = [ <name4> , <name3> , <name3> , <name3> , <name6> ]	<name2> .argtypes is a list containing 5 elements : <name4> , <name3> , <name3> , <name3> and <name6> .
def <name6> ( <name4> , <name3> ) :	define the function <name6> with arguments <name4> and <name3> .
<name3> = <name5> . get_osfhandle ( <name2> ( <name4> ) )	call the function <name5> .get_osfhandle with return value of the <name2> ( <name4> ) function as argument , substitute the result for <name3> .
<name2> = <name1> ( )	call the <name1> function , substitute the result for <name2> .
<name2> = <name1> ( <name5> , <name4> , <val3> , <val3> , 0xFFFF0000 , <name6> ( <name2> ) )	call the <name1> function with 6 arguments : <name5> , <name4> , integer <val3> , integer <val3> , hexadecimal value FFFF0000 , return value of the <name6> function called with argument <name2> , substitute the result for <name2> .
<name5> bool ( <name2> )	convert <name2> to a boolean , <name5> it .
def <name3> ( <name2> ) :	define the function <name3> with argument <name2> .
<name2> = <name6> . get_osfhandle ( <name4> ( <name3> ) )	call the function <name6> .get_osfhandle with return value of the <name4> ( <name3> ) function as argument , substitute the result for <name2> .
<name1> = <name5> ( )	call the <name5> function , substitute the result for <name1> .
<name1> = UnlockFileEx ( <name4> , <val6> , <val6> , 0xFFFF0000 , <name2> ( <name3> ) )	call the LockFileEx function with 5 arguments : <name4> , integer <val6> , integer <val6> , hexadecimal value FFFF0000 , return value of the <name2> function called with argument <name3> , substitute the result for <name1> .
<name5> bool ( <name3> )	convert <name3> to a boolean , <name5> it .
else :	if not ,
<name5> :	<name5> ,
<name3> <name6>	<name3> <name6> .
<name6> = <name2> . <name6>	substitute <name2> .LOCK_SH for <name6> .
<name5> = <name1> . <name5>	substitute <name1> .LOCK_NB for <name5> .
<name3> = <name2> . <name3>	substitute <name2> .LOCK_EX for <name3> .
except ( <name6> , <name4> ) :	if <name6> or <name4> exception occurred ,
<name6> = <name4> = <name5> = <val1>	<name6> , <name4> and <name5> are all equal to integer <val1> .
def <name4> ( <name3> , <name1> ) :	define the function <name4> with arguments <name3> and <name1> .
<name4> <name5>	<name4> boolean <name5> .
def <name3> ( <name2> ) :	define the function <name3> with argument <name2> .
<name4> <name2>	<name4> boolean <name2> .
else :	if not ,
def <name4> ( <name2> , <name5> ) :	define the function <name4> with arguments <name2> and <name5> .
<name2> = <name3> . flock ( <name5> ( <name4> ) , <name6> )	call the function <name3> .flock with return value of the <name5> ( <name4> ) function and <name6> as arguments , substitute the result for <name2> .
<name4> ( <name6> == <val1> )	if <name6> equals to integer <val1> , <name4> boolean True , otherwise <name4> boolean False .
def <name3> ( <name2> ) :	define the function <name3> with argument <name2> .
<name4> = <name6> . flock ( <name5> ( <name2> ) , <name6> . LOCK_UN )	all the function <name6> .flock with return value of the <name5> ( <name2> ) function and <name6> .LOCK_UN as arguments , substitute the result for <name4> .
<name4> ( <name3> == <val2> )	if <name3> equals to integer <val2> , <name4> boolean True , otherwise <name4> boolean False .
<name4> <name5>	<name4> module <name5> .
<name5> <name4> . core . files <name6> <name1>	<name5> <name4> .core .files <name6> <name1> into default name space .
<name4> :	<name4> ,
<name5> <name4> <name1> <name3>	<name5> <name4> <name1> <name3> into default name space .
except <name5> :	if <name5> exception occurred ,
<name4> <name5>	<name4> <name5> .
def <name6> ( <name5> , <name2> ) :	define the function <name6> with arguments <name5> and <name2> .
<name6> = <name3> . stat ( <name5> )	call the <name3> .stat function with argument <name5> , substitute the result for <name6> .
<name5> = <name6> . S_IMODE ( <name4> . st_mode )	call the function <name6> .S_IMODE with argument <name4> .st_mode , substitute the result for <name5> .
<name2> hasattr ( <name6> , <val1>   ) :	<name2> <name6> has an attribute <val1> ,
<name1> . utime ( <name4> , ( <name3> . st_atime , <name3> . st_mtime ) )	call the <name1> .utime function with arguments <name4> and tuple containing 2 elements : <name3> .st_atime and <name3> .st_mtime .
<name1> hasattr ( <name2> , <val6>   ) :	<name1> <name2> has an attribute <val6> ,
<name4> . chmod ( <name2> , <name1> )	call the function <name4> .chmod with arguments <name2> and <name1> .
<name3> = [ <val1>   ]	<name3> is a list containing a string <val1> .
def <name6> ( <name3> , <name4> ) :	define the function <name6> with arguments <name3> and <name4> .
<name4> hasattr ( <name3> . path , <val5>   ) :	<name4> <name3> .path has an attribute <val5> ,
<name4> :	<name4> ,
<name1> <name2> . path . samefile ( <name4> , <name5> )	call the <name2> .path .samefile with arguments <name4> and <name5> , <name1> the result .
except <name4> :	if exception <name4> occurred ,
<name6> <name3>	<name6> boolean <name3> .
<name4> ( os . <name3> . normcase ( os . <name3> . abspath ( <name6> ) ) == os . <name3> . normcase ( os . <name3> . abspath ( <name2> ) ) )	if file <name3> of <name6> and <name2> files are the same , <name4> boolean True , otherwise <name4> boolean False .
def <name4> ( <name2> , <name6> , <name3> = <val1> * <val5> , allow_overwrite = False ) :	define the function <name4> with 4 arguments : <name2> , <name6> , <name3> set to multiple of integers <val1> and <val5> ,
<name2> <name4> ( <name3> , <name1> ) :	<name2> call to the function <name4> with <name3> and <name1> evaluates to boolean True ,
<name4>	<name4> nothing .
<name2> :	<name2> ,
<name5> not <name3> <name2> <name6> . access ( <name1> , <name6> . F_OK ) :	<name5> <name3> is boolean False <name2> call to the <name6> .access function with arguments <name1> <name2> <name6> .F_OK evaluates to boolean True ,
<name4> <name5> ( <val2> % <name6> )	<name4> an <name5> exception with string <val2> as argument , where '%s' is replaced by <name6> .
<name6> . rename ( <name5> , <name1> )	call the <name6> .rename function with arguments <name5> and <name1> .
<name4>	<name4> nothing .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
<name5> <name6> ( <name3> , 'rb'   ) <name1> old_file :	<name6> file <name3> in read bytes mode , <name5> file descriptor <name1> f ,
fd = <name2> . open ( new_file_name , ( <name2> . O_WRONLY |  <name2> . O_CREAT |  getattr ( <name2> , <val1>   , 0 ) |   ( <name2> . O_EXCL if not allow_overwrite else 0 ) ) )	evaluate the binary expression with 4 operands : <name2> .O_WRONLY , binary or <name2> .O_CREATE , binary or <val1> attribute of object <name2> ,
<name1> :	binary or os .O_EXCL if allow_overwrite is boolean False , use the previous as the mode to open new_file_name file , assign the file descriptor to fd . <name1> ,
<name5> . lock ( <name3> , <name5> . LOCK_EX )	call the function <name5> .lock with arguments <name3> and <name5> .LOCK_EX .
<name2> = <name6>	<name2> is <name6> .
while <name4> != b ''   :	as long as <name4> is not an empty string ,
<name1> = <name2> . <name4> ( <name5> )	<name4> <name5> bytes from the <name2> file , substitute the result for <name1> .
os . <name6> ( <name2> , <name1> )	<name6> <name1> to file <name2> .
<name6> :	<name6> perform ,
<name2> . unlock ( <name3> )	call the function <name2> .unlock with <name3> as argument .
os . <name6> ( <name3> )	<name6> the file <name3> .
<name3> ( <name1> , <name6> )	call the function <name3> with <name1> and <name6> as arguments .
try :	tr ,
os . <name3> ( <name5> )	<name3> the <name5> file .
except <name3> as <name6> :	if <name3> , renamed to <name6> , is caught ,
<name3> getattr ( <name6> , <val5>   , 0 ) != <val4> <name1> getattr ( <name6> , <val2>   , 0 ) != <val3> :	<name3> attribute <val5> of object <name6> is not equal to integer <val4> <name1> <name3> <val2> attribute is not equal to integer <val3> ,
<name5>	<name5> an exception .
<name3> <name4>	<name3> module <name4> .
<name3> <name6>	<name3> module <name6> .
<name1> <name5>	<name1> module <name5> .
<name2> <name1> <name6> <name1>	<name2> <name1> <name6> <name1> into default name space .
<name4> <name3> . conf <name5> <name1>	<name4> <name3> .conf <name5> <name1> into default name space .
<name5> <name2> . core . exceptions <name6> <name3>	<name5> <name2> .core .exceptions <name6> <name3> into default name space .
<name2> <name1> . core . files <name5> <name3> , <name6>	<name2> <name1> .core .files <name5> <name3> and <name6> into default name space .
<name3> <name5> . core . files . move <name2> <name6>	<name3> <name5> .core .files .move <name2> <name6> into default name space .
<name6> <name1> . utils . encoding <name5> <name2> , <name3>	<name6> <name1> .utils .encoding <name5> <name2> and <name3> into default name space .
<name1> <name2> . utils . functional <name6> <name4>	<name1> <name2> .utils .functional <name6> <name4> into default name space .
<name1> <name5> . utils . module_loading <name3> <name4>	<name1> <name5> .utils .module_loading <name3> <name4> into default name space .
<name3> <name1> . utils . six . moves . urllib . parse <name6> <name5>	<name3> <name1> .utils .six .moves .urllib .parse <name6> <name5> into default name space .
<name6> <name4> . utils . text <name3> <name1>	<name6> <name4> .utils .text <name3> <name1> into default name space .
<name4> <name2> . utils . _os <name5> <name1> , <name3>	<name4> <name2> .utils ._os <name5> <name1> and <name3> into default name space .
<name3> <name6> . utils . deconstruct <name1> <name5>	<name3> <name6> .utils .deconstruct <name1> <name5> into default name space .
<name6> = ( <val2>   , <val1>   , <val4>   , <val5>   )	<name6> is a tuple containing strings : <val2> , <val1> , <val4> and <val5> .
<name3> <name6> ( <name5> ) :	derive the <name3> <name6> from the <name5> base <name3> .
def <name5> ( <name4> , <name1> , <name3> = <val6>   ) :	define the method <name5> with arguments <name4> , <name1> and <name3> defaulting to string <val6> .
<name2> <name3> . _open ( <name6> , <name5> )	call the <name3> ._open method with <name6> and <name5> arguments , <name2> the result .
def <name3> ( <name6> , <name4> , <name2> ) :	define the method <name3> with arguments <name6> , <name4> and <name2> .
<name5> <name1> <name2> <name3> :	<name5> <name1> <name2> <name3> ,
<name5> = <name3> . <name5>	substitute <name3> .name for <name5> .
<name6> not hasattr ( <name1> , <val2>   ) :	<name6> <name1> has an <val2> attribute ,
<name5> = <name4> ( <name5> )	<name5> is a <name4> object instance created with <name5> argument .
<name3> = <name2> . get_available_name ( <name3> )	call the method <name2> .get_available_name with argument <name3> , substitute it for <name3> .
<name3> = <name1> . _save ( <name3> , <name4> )	call the method <name1> ._save with arguments <name3> and <name4> , substitute it for <name3> .
\ <name1> <name5> ( <name4> . <name6> ( '\\\\' , ' / '  ) ) \	\ <name6> all the strings '\\\\' with ' / '  in the string <name4> , use it as an argument for the call to the <name5> function , <name1> the result . \
def get_valid_name ( <name6> , <name2> ) :	define the method det_valid_name with arguments <name6> and <name2> .
<name6> <name4> ( <name5> )	call the <name4> with argument <name5> , <name6> the result .
def <name1> ( <name2> , <name3> ) :	define the method <name1> with arguments <name2> and <name3> .
<name1> , <name3> = <name6> . path . split ( <name2> )	call the <name6> .path .split with argument <name2> , assign the result to the <name1> and <name3> respectively .
<name4> , <name3> = <name2> . path . splitext ( <name6> )	call the <name2> .path .splitext with argument <name6> , assign the result to the <name4> and <name3> respectively .
<name3> = <name6> . <name3> ( <val5> )	call the <name6> .count function with argument integer <val5> , substitute the result for <name3> .
while <name5> . exists ( <name2> ) :	as long as <name5> .exists function with argument <name2> evaluates to boolean True ,
<name2> = os . <name4> . <name1> ( <name5> , <val6> % ( <name3> , <name2> ( <name4> ) , <name1> ) )	substitute '%s' in string <val6> with : <name3> , <name2> ( <name4> ) and <name1> , <name1> the <name5> and previous string into a valid file <name4> , substitute it for <name2> .
<name4> <name1>	<name4> <name1> .
def <name1> ( <name4> , <name3> ) :	define the method <name1> with arguments <name4> and <name3> .
<name5> <name1> ( <val4> )	<name5> an <name1> exception with argument string <val4> .
def <name3> ( <name6> , <name4> ) :	define the method <name3> with arguments <name6> and <name4> .
<name1> <name6> ( <val3>   )	<name1> an <name6> exception with argument string <val3> .
def <name4> ( <name2> , <name1> ) :	define the method <name4> with arguments <name2> and <name1> .
<name4> <name1> ( <val2>   )	<name4> an <name1> exception with argument string <val2> .
def <name1> ( <name3> , <name2> ) :	define the method <name1> with arguments <name3> and <name2> .
<name5> <name4> ( <val3>   )	<name5> an <name4> exception with argument string <val3> .
def <name3> ( <name5> , <name4> ) :	define the method <name3> with arguments <name5> and <name4> .
<name2> <name3> ( <val4>   )	<name2> an <name3> exception with argument string <val4> .
def <name4> ( <name2> , <name3> ) :	define the method <name4> with arguments <name2> and <name3> .
<name6> <name3> ( <val2>   )	<name6> an <name3> exception with argument string <val2> .
def <name3> ( <name6> , <name5> ) :	define the method <name3> with arguments <name6> and <name5> .
<name6> <name5> ( <val2>   )	<name6> an <name5> exception with argument string <val2> .
def <name4> ( <name2> , <name5> ) :	define the method <name4> with arguments <name2> and <name5> .
<name4> <name1> ( <val2>   )	<name4> an <name1> exception with argument string <val2> .
def <name6> ( <name3> , <name5> ) :	define the method <name6> with arguments <name3> and <name5> .
<name5> <name6> ( <val2>   )	<name5> an <name6> exception with argument string <val2> .
@  <name3>	decorator <name3> ,
<name3> <name1> ( <name5> ) :	derive the <name3> <name1> from the <name5> base <name3> .
def <name2> ( <name1> , <name6> = <name5> , <name3> = <name5> , <name4> = <name5> , directory_permissions_mode = <name5> ) :	define the method <name2> with 5 arguments : <name1> , <name6> set to <name5> , <name3> set to <name5> , <name4> set to <name5> ,
<name5> <name4> <name3> <name2> :	and directory_permissions_mode set to <name2> . <name5> <name4> <name3> <name2> ,
<name6> = <name4> . MEDIA_ROOT	substitute the <name4> .MEDIA_ROOT for <name6> .
<name2> . base_location = <name4>	substitute the <name4> for <name2> .base_location .
<name4> . location = <name3> ( <name4> . base_location )	substitute the return value of the function <name3> with <name4> .base_location as argument for <name4> .location .
<name3> <name5> <name2> <name1> :	<name3> <name5> <name2> <name1> ,
<name1> = <name2> . MEDIA_URL	substitute <name2> .MEDIA_URL for <name1> .
elif <name5> <name6> . endswith ( <val3>   ) :	otherwise if <name6> does <name5> ends with <val3> character ,
<name2> += <val6>	append character <val6> to the <name2> .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .base_url .
<name6> . <name5> = ( <name5> <name3> <name5> <name1> <name2> <name4> else settings . FILE_UPLOAD_PERMISSIONS )	<name6> .file_permissions_mode <name1> a tuple containing : <name5> <name3> <name5> <name1> <name2> <name4> ,
<name5> . <name3> = ( <name3> <name4> <name3> <name2> <name6> <name1> else <name5> . FILE_UPLOAD_DIRECTORY_PERMISSIONS )	or <name5> .FILE_UPLOAD_PERMISSIONS <name4> it <name2> . <name5> .directory_permissions_mode <name2> a tuple containing : <name3> <name4> <name3> <name2> <name6> <name1> ,
def <name4> ( <name5> , <name3> , <name1> = <val6>   ) :	or settings .FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is . define the method <name4> with arguments <name5> , <name3> and <name1> defaulting to string <val6> .
<name3> <name5> ( <name6> ( <name1> . path ( <name2> ) , <name4> ) )	call the function <name1> .path with argument <name2> , use it and <name4> as arguments for the call to the function <name6> , use it as an argument for creatinon of a <name5> object instance , <name3> it .
def <name6> ( <name4> , <name5> , <name3> ) :	define the method <name6> with arguments <name4> , <name5> and <name3> .
<name6> = <name1> . path ( <name5> )	substitute result of the <name1> .path function with argument <name5> for <name6> .
<name4> = <name6> . path . dirname ( <name1> )	call the function <name6> .path .dirname with argument <name1> , substitute the result for <name4> .
<name4> not <name3> . path . exists ( <name6> ) :	<name4> call to the function <name3> .path .exists with argument <name6> evaluates to boolean False ,
<name1> :	<name1> ,
<name3> <name2> . directory_permissions_mode <name1> <name5> <name6> :	<name3> <name2> .directory_permissions_mode <name1> <name5> <name6> ,
   <name4> = <name1> . umask ( <val6> )	call the <name1> .umask function with argument integer <val6> , substitute the result for <name4> .
<name4> :	<name4> ,
     <name5> . makedirs ( <name4> , <name2> . directory_permissions_mode )	call the <name5> .makedirs function with <name4> and <name2> .directory_permissions_mode as arguments .
<name6> :	<name6> perform ,
     <name1> . umask ( <name4> )	call the <name1> .umask function with argument <name4> .
else :	if not ,
<name4> . makedirs ( <name6> )	call the function <name4> .makedirs with argument <name6> .
except <name1> as <name3> :	if exception <name1> , renamed to <name3> , occurred ,
<name6> <name3> . <name5> != <name5> . EEXIST :	<name6> <name3> .errno is not equal to <name5> .EEXIST ,
<name3>	<name3> an exception .
<name3> <name2> os . path . isdir ( <name4> ) :	<name3> <name4> is <name2> an <name4> ,
<name5> <name6> ( <val3> % <name2> )	<name5> an <name6> exception with argument string <val3> , where '%s' is replaced by <name2> .
while True :	endless loop ,
<name2> :	<name2> ,
<name4> hasattr ( <name1> , <val5>   ) :	<name4> <name1> has an attribute <val5> ,
<name5> ( <name1> . temporary_file_path ( ) , <name3> )	call the function <name5> with <name1> .temporary_file_path function result and <name3> .
else :	if not ,
   flags = ( <name2> . O_WRONLY |  <name2> . O_CREAT |  <name2> . O_EXCL |   getattr ( <name2> , 'O_BINARY'   , 0 ) )	evaluate binary expression with 4 operands : <name2> .O_WRONLY , binary or <name2> .O_CREAT , binary or <name2> .O_EXCL ,
<name4> = <name2> . open ( <name5> , <name6> , <val1> <name3> )	binary or 'O_BINARY' attribute of the <name2> object , or integer <val1> if it doesnt exists . call the <name2> .open function with <name5> , <name6> and octal number <val1> <name3> as arguments , substitute the result for <name4> .
<name2> = <name6>	<name2> is <name6> .
<name3> :	<name3> ,
     <name4> . lock ( <name1> , <name4> . LOCK_EX )	call the function <name4> .lock with <name1> and <name4> .LOCK_EX as arguments .
<name6> <name2> <name5> <name3> . chunks ( ) :	<name6> every <name2> <name5> <name3> .chunks function return value ,
         <name4> <name2> <name3> <name6> :	<name4> <name2> <name3> <name6> ,
             <name3> = <val2>   if isinstance ( <name4> , <name1> ) else <val6>	<name3> is a string <val2> is <name4> is instance of the type <name1> , otherwise <name3> is a string <val6> .
<name3> = <name5> . fdopen ( <name2> , <name4> )	call the function <name5> .fdopen with arguments <name2> and <name4> , substitute it for <name3> .
<name5> . <name4> ( <name2> )	<name4> the <name2> to the file <name5> .
<name4> :	<name4> perform ,
     <name6> . unlock ( <name4> )	call the function <name6> .unlock with argument <name4> .
<name5> <name1> <name6> <name2> <name4> :	<name5> <name1> <name6> <name2> <name4> ,
         <name6> . <name2> ( )	<name2> the <name6> file .
else :	if not ,
         os . <name5> ( <name1> )	<name5> <name1> file .
except <name3> as <name6> :	if <name3> , renamed to <name6> , is caught ,
<name6> <name3> . <name5> == <name5> . EEXIST :	<name6> <name3> .errno equals to <name5> .EEXIST ,
   <name4> = <name3> . get_available_name ( <name4> )	call the method <name3> .get_available_name with argument <name4> , substitute the result for <name4> .
<name6> = <name3> . path ( <name1> )	call the method <name3> .path with argument <name1> , substitute the result for <name6> .
else :	if not ,
<name6>	<name6> an exception .
else :	if not ,
<name4>	<name4> from the smallest enclosing loop .
<name1> <name3> . file_permissions_mode <name2> <name5> <name6> :	<name1> <name3> .file_permissions_mode <name2> <name5> <name6> ,
<name1> . chmod ( <name4> , <name2> . file_permissions_mode )	call the function <name1> .chmod with arguments <name4> and <name2> .file_permissions_mode .
<name5> <name1>	<name5> <name1> .
def <name2> ( <name1> , <name3> ) :	define the method <name2> with arguments <name1> and <name3> .
<name4> <name2> , <val5>	if <name2> is boolean False raise an <name4> error with message string <val5> .
<name1> = <name5> . path ( <name1> )	call the <name5> .path with argument <name1> , substitute it for <name1> .
<name3> <name6> . path . exists ( <name2> ) :	<name3> <name6> .path .exists function with argument <name2> , evaluates to boolean True ,
<name3> :	<name3> ,
<name3> . remove ( <name4> )	call the <name3> .remove function with argument <name4> .
except <name3> as <name1> :	if <name3> , renamed to <name1> , is caught ,
<name3> <name4> . <name1> != <name1> . ENOENT :	<name3> <name4> .errno equals to <name1> .EEXIST ,
<name4>	<name4> an exception .
def <name4> ( <name5> , <name1> ) :	define the method <name4> with arguments <name5> and <name1> .
<name4> <name5> . path . exists ( <name6> . path ( <name3> ) )	call the <name6> .path function with argument <name3> , use the result as the argument for the call to the <name5> .path .exists function , <name4> the result .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with arguments <name1> and <name6> .
<name6> = <name3> . <name6> ( <name6> )	call the <name3> .path function with argument <name6> , substitute it for <name6> .
<name3> , <name5> = [ ] , [ ]	<name3> , <name5> are empty lists .
<name2> <name6> <name3> <name1> . listdir ( <name4> ) :	<name2> every <name6> <name3> <name1> .listdir function return value called with the argument <name4> ,
<name6> os . <name1> . isdir ( os . <name1> . <name5> ( <name1> , <name4> ) ) :	<name5> <name1> and <name4> into a file <name1> , <name6> it exists ,
<name6> . <name1> ( <name5> )	<name1> <name5> to the <name6> list .
else :	if not ,
<name5> . <name3> ( <name1> )	<name3> <name1> to <name5> list .
<name1> <name5> , <name2>	<name1> <name5> and <name2> .
def <name4> ( <name6> , <name1> ) :	define the method <name4> with arguments <name6> and <name1> .
<name5> :	<name5> ,
<name4> = <name1> ( <name2> . location , <name3> )	call the <name1> function with arguments <name2> .location and <name3> , substitute it for <name4> .
except <name1> :	if <name1> exception is caught ,
<name1> <name2> ( <val5> % <name4> )	<name1> an <name2> exception with string <val5> as argument , replace '%s' with <name4> .
<name3> <name5> . <name1> . normpath ( <name1> )	call the <name5> .path .normpath with argument <name1> , <name3> the result .
def <name6> ( <name3> , <name5> ) :	define the method <name6> with arguments <name3> and <name5> .
<name6> <name4> . path . getsize ( <name1> . path ( <name5> ) )	call the <name1> .path with argument <name5> , use the result as an argument for the call to the <name4> .path .getsize function , <name6> the result .
def <name3> ( <name2> , <name4> ) :	define the method <name3> with arguments <name2> and <name4> .
<name4> <name6> . base_url <name3> <name5> :	<name4> <name6> .base_url <name3> <name5> ,
<name6> <name4> ( <val2> )	<name6> an <name4> with string <val2> as argument .
<name5> <name4> ( <name2> . base_url , <name1> ( <name6> ) )	call the <name4> function with arguments : <name2> .base_url and result of the call to the function <name1> with argument <name6> , <name5> the result .
def <name2> ( <name5> , <name3> ) :	define the method <name2> with arguments <name5> and <name3> .
return datetime . fromtimestamp ( <name4> . path . getatime ( <name5> . path ( <name6> ) ) )	call the function <name5> .path with argument <name6> , use the result as an argument for the call to the function <name4> .path .getatime ,
def <name6> ( <name5> , <name2> ) :	use the result as an argument for the call to the function datetime .fromtimestamp , return the result . define the method <name6> with arguments <name5> and <name2> .
return datetime . fromtimestamp ( <name2> . path . getctime ( <name5> . path ( <name6> ) ) )	call the function <name5> .path with argument <name6> , use the result as an argument for the call to the function <name2> .path .getctime ,
def <name2> ( <name4> , <name5> ) :	use the result as an argument for the call to the function datetime .fromtimestamp , return the result . define the method <name2> with arguments <name4> and <name5> .
return datetime . fromtimestamp ( <name5> . path . getmtime ( <name4> . path ( <name3> ) ) )	call the function <name4> .path with argument <name3> , use the result as an argument for the call to the function <name5> .path .getmtime ,
def <name3> ( <name6> = <name4> ) :	use the result as an argument for the call to the function datetime .fromtimestamp , return the result . define the function <name3> with argument <name6> = <name4> defaulting to <name4> .
<name5> <name3> ( <name1> <name6> <name4> . DEFAULT_FILE_STORAGE )	call the <name3> with argument : <name1> if exists <name6> <name4> .DEFAULT_FILE_STORAGE , if not , <name5> the result .
<name5> <name4> ( <name1> ) :	derive the <name5> <name4> from the <name1> base <name5> .
def <name5> ( <name2> ) :	define the <name5> method with argument <name2> .
<name5> . _wrapped = <name6> ( ) ( )	call the function that is the return value of <name6> method , substitute the result for <name5> ._wrapped .
<name2> = <name1> ( )	call the <name1> method , substitute the result for <name2> .
<name4> <name2>	<name4> module <name2> .
<name2> <name5>	<name2> module <name5> .
<name2> <name6> . core . files . utils <name5> <name1>	<name2> <name6> .core .files .utils <name5> <name1> into default name space .
<name6> = ( <val4>   , <val1>   , )	<name6> is a tuple , containing strings <val4> and <val1> .
<name6> <name2> . <name4> == <val5>   :	<name6> module <name2> field <name4> equals to string <val5> ,
<name5> <name4> ( <name2> ) :	derive <name5> <name4> from the base <name5> <name2> .
def <name2> ( <name4> , <name3> = <val6>   , <name5> = - 1 , <name1> = ''   , <name2> = ''   , dir = None ) :	define method <name2> with <name4> class instance , <name3> string <val6> , <name5> set to integer -1 , <name1> and <name2> set to empty strig ,
<name5> , <name2> = tempfile . mkstemp ( <name6> = <name6> , <name1> = <name1> , <name4> = <name4> )	<name4> set to None as the arguments . call the method tmpfile .mkstemp with <name6> set to <name6> , <name1> set to <name1> and <name4> set to <name4> , store the result in the <name5> and <name2> , respective .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .name .
<name3> . <name6> = <name1> . fdopen ( <name2> , <name4> , <name5> )	call the <name1> .fdopen function with <name2> , <name4> and <name5> as the arguments , assign the <name6> handle object to <name3> .file .
<name3> . close_called = <name2>	substitute <name2> for <name3> .close_called .
<name4> = <name2> . <name4>	substitute <name2> .unlink for <name4> .
def <name6> ( <name3> ) :	define the method <name6> with <name3> class instance as the argument .
<name1> not <name5> . close_called :	<name1> <name5> .close_called is False ,
<name5> . close_called = <name4>	substitute <name4> for <name5> .close_called .
<name6> :	<name6> ,
self . <name5> . <name2> ( )	<name2> the <name5> object .
except ( <name1> , <name2> ) :	if <name1> or <name2> exceptions were raised ,
pass	do nothing .
<name4> :	<name4> ,
<name1> . <name3> ( <name1> . name )	call the method <name3> on <name1> with <name1> .name as the argument .
except ( <name6> ) :	if <name6> exception was raised ,
pass	do nothing .
@  <name5>	<name5> decorator , to be called by <name5> built - in function .
def <name2> ( <name6> ) :	define the method <name2> with <name6> as the argument .
<name6> <name1> . file . closed	<name6> <name1> .file .closed .
def <name6> ( <name3> ) :	define <name6> method with <name3> as the argument .
<name1> . <name3> ( )	call the method <name3> on <name1> .
def <name5> ( <name6> ) :	define <name5> method with <name6> as the argument .
<name3> . <name4> . __enter__ ( )	call the <name4> .__enter__ method on <name3> .
<name1> <name3>	<name1> <name3> .
def <name6> ( <name3> , <name4> , <name1> , <name2> ) :	define method <name6> with <name3> , <name4> , <name1> and <name2> as the arguments .
<name3> . <name4> . __exit__ ( <name2> , <name5> , <name1> )	call the <name4> .__exit__ method on <name3> with <name2> , <name5> and <name1> as the arguments .
<name6> = <name5>	substitute <name5> for <name6> .
else :	if not ,
<name5> = <name6> . <name5>	substitute <name6> .NamedTemporaryFile for <name5> .
<name6> = <name4> . <name6>	substitute <name4> .gettempdir for <name6> .
<name4> <name1>	<name4> module <name1> .
<name1> <name2>	<name1> module <name2> .
<name4> <name1> <name6> <name3>	<name4> <name1> <name6> <name3> into default name space .
<name6> <name2> . conf <name4> <name5>	<name6> <name2> .conf <name4> <name5> into default name space .
<name5> <name4> . core . files . base <name6> <name2>	<name5> <name4> .core .files .base <name6> <name2> into default name space .
<name1> <name6> . core . files <name4> <name5> <name3> <name2>	<name1> <name6> .core .files <name4> <name5> <name3> <name2> into default name space .
<name1> <name2> . utils . encoding <name5> <name3>	<name1> <name2> .utils .encoding <name5> <name3> into default name space .
<name2> = ( <val5>   , <val3>   , <val6>   , <val4>   )	<name2> is a tuple containing strings : <val5> , <val3> , <val6> and <val4> .
<name5> <name2> ( <name3> ) :	derive the <name2> <name5> from the <name3> base <name5> .
<name3> = <val5> * <val1> ** <val4>	bring integer <val1> to the power of <val4> , multiply it by integer <val5> , substitute the result for <name3> .
def <name5> ( <name3> , <name4> = <name1> , <name2> = <name1> , <name6> = <name1> , <name5> = <name1> , <name3> = <name1> , <name4> = <name1> ) :	define the method <name5> with 7 arguments : <name3> , <name4> set to <name1> , <name2> set to <name1> , <name6> set to <name1> , <name5> set to <name1> , <name3> set to <name1> and <name4> set to <name1> .
super ( <name4> , self ) . <name2> ( <name6> , <name3> )	call the <name2> method with arguments <name6> and <name3> , from the base class of the <name4> class .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .size .
<name4> . <name2> = <name2>	substitute <name2> for <name4> .content_type .
<name5> . <name4> = <name4>	substitute <name4> for <name5> .charset .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .content_type_extra .
def <name3> ( <name6> ) :	define the method <name3> with argument <name6> .
<name2> <name3> ( <val1> % ( <name4> . __class__ . __name__ , <name4> . name , <name4> . content_type ) )	substitute '%s' from string <val1> with <name4> .__class__ .__name__ , <name4> .name and <name4> .content_type , respectively , use it as an argument for the call to the function <name3> , <name2> the result .
def <name2> ( <name3> ) :	define the method <name2> with argument <name3> .
<name6> <name2> . _name	<name6> <name2> ._name .
def <name4> ( <name6> , <name2> ) :	define the method <name4> with arguments <name6> and <name2> .
<name2> <name5> <name1> <name6> <name4> :	<name2> <name5> <name1> <name6> <name4> ,
<name5> = <name2> . path . basename ( <name5> )	call the function <name2> .path .basename with argument <name5> , substitute the result for <name5> .
<name1> len ( <name2> ) >  <val4> :	<name1> length of <name2> is greater than integer <val4> ,
<name3> , <name6> = <name1> . path . splitext ( <name3> )	call the <name1> .path .splitex with argument <name3> , assign the result to <name3> and <name6> , respectively .
<name1> = <name1> [ : <val2> ]	substitute the first <val2> elements of <name1> for <name1> .
<name1> = <name1> [ : <val2> - len ( <name4> ) ] + <name4>	subtract length of the <name4> from the integer <val2> , take first elements of the <name1> list up to the previous result index ,
<name3> . _name = <name4>	append ext to the end of it , substitute the resulting list for <name4> . substitute <name4> for <name3> ._name .
<name3> = <name6> ( <name5> , <name4> )	<name3> is a <name6> object with <name5> as a getter method and <name4> as a setter method .
<name6> <name2> ( <name3> ) :	derive the <name2> <name6> from the <name3> base <name6> .
def <name5> ( <name3> , <name1> , <name6> , <name4> , <name2> , <name5> = <name3> ) :	define the <name5> method with 6 arguments : <name3> , <name1> , <name6> , <name4> , <name2> and <name5> set to <name3> .
<name6> <name2> . FILE_UPLOAD_TEMP_DIR :	<name6> <name2> .FILE_UPLOAD_TEMP_DIR is true ,
file = <name2> . NamedTemporaryFile ( <name4> = <val6>   , <name1> = <name5> . FILE_UPLOAD_TEMP_DIR )	call the method <name2> .NamedTemporaryFile with arguments : <name4> set to string <val6> and <name1> set to <name5> .FILE_UPLOAD_TEMP_DIR .
else :	if not ,
file = <name1> . NamedTemporaryFile ( <name6> = <val2>   )	call the method <name1> .NamedTemporaryFile with argument <name6> set to string <val2> .
super ( <name4> , self ) . <name2> ( <name1> , <name3> , <name6> , <name5> , <name4> , <name2> )	call the method <name2> from the base class of the <name4> class with arguments : <name1> , <name3> , <name6> , <name5> , <name4> and <name2> .
def <name2> ( <name1> ) :	define the method <name2> with argument <name1> .
<name4> <name2> . file . name	<name4> <name2> .file .name .
def <name1> ( <name3> ) :	define the method <name1> with argument <name3> .
<name5> :	<name5> ,
<name3> <name6> . file . close ( )	call the <name6> .file .close method , <name3> the result .
except <name4> as <name1> :	if <name4> , renamed to <name1> , exception is caught ,
<name3> <name5> . <name1> != <name1> . ENOENT :	<name3> <name5> .errno is not equal to <name1> .ENOENT ,
<name3>	<name3> an exception .
<name6> <name5> ( <name1> ) :	derive the <name5> <name6> from the <name1> base <name6> .
def <name2> ( <name5> , <name6> , <name4> , <name3> , <name1> , <name2> , <name5> , <name6> = <name4> ) :	define the method <name2> with 8 arguments : <name5> , <name6> , <name4> , <name3> , <name1> , <name2> , <name5> and <name6> set to <name4> .
super ( <name4> , self ) . <name2> ( <name5> , <name6> , <name3> , size , charset , content_type_extra )	call the method <name2> from the base class of the <name4> base class , with 6 arguments : <name5> , <name6> , <name3> ,
<name2> . <name3> = <name3>	size , charset , content_type_extra . substitute <name3> for <name2> .field_name .
def <name3> ( <name5> , <name6> = <name4> ) :	define the method <name3> with arguments <name5> and <name6> set to <name4> .
<name6> . <name1> . seek ( 0 )	set the <name1> pointer at the beginning of the <name6> .file <name1> .
def <name3> ( <name1> , <name5> = <name6> ) :	define the method <name3> with arguments <name1> ad <name5> set to <name6> .
<name6> . <name3> . seek ( 0 )	set the <name3> pointer at the beginning of the <name6> .file <name3> .
<name5> <name4> . <name1> ( )	<name1> the whole <name4> file and <name5> it as a generator return value .
def <name3> ( <name1> , chunk_size = <name2> ) :	define the method <name3> with arguments <name1> and hunk_size set to <name2> .
<name3> <name4>	<name3> boolean <name4> .
<name2> <name4> ( <name3> ) :	derive the <name4> <name2> from the <name3> base <name2> .
def <name6> ( <name3> , <name5> , <name1> , <name2> = <val4>   ) :	define the method <name6> with 4 arguments : <name3> , <name5> , <name1> and <name2> defaulting to a string <val4> .
<name5> = <name5> or b ''	if <name5> is empty , substitute it for an empty string .
super ( <name2> , self ) . <name6> ( <name1> ( <name5> ) , <name4> , <name3> , content_type , len ( <name5> ) , <name4> , <name4> )	call the <name6> method from the base class of the <name2> class with 7 arguments : <name1> ( <name5> ) , <name4> , <name3> ,
@  <name5>	content_type , length of content , None and None . decorator <name5> .
def <name2> ( <name6> , <name1> ) :	define the method <name2> with argument <name6> and <name1> .
return <name2> ( <name6> [ <val4>   ] , <name6> [ <val1>   ] , <name6> . get ( 'content-type'   , 'text/plain'   ) )	call the method <name2> with 3 arguments : value under the <val4> key of <name6> , value under the <val1> key of <name6> ,
<name1> <name5> <name2> <name3>	<name1> <name5> <name2> <name3> into default name space .
<name6> <name3> <name1> <name5>	<name6> <name3> <name1> <name5> into default name space .
<name5> <name4> . conf <name2> <name3>	<name5> <name4> .conf <name2> <name3> into default name space .
<name5> <name3> . core . files . uploadedfile <name4> <name1> , <name2>	<name5> <name3> .core .files .uploadedfile <name4> <name1> and <name2> into default name space .
<name6> <name3> . utils . encoding <name1> <name5>	<name6> <name3> .utils .encoding <name1> <name5> into default name space .
<name3> <name6> . utils . module_loading <name5> <name4>	<name3> <name6> .utils .module_loading <name5> <name4> into default name space .
<name2> = [ <val3>   , <val5>   , <val6>   , <val4>   , 'TemporaryFileUploadHandler'   , 'MemoryFileUploadHandler'   , 'load_handler'   , 'StopFutureHandlers'    ]	<name2> is a string containing strings : <val3> , <val5> , <val6> , <val4> ,
<name1> <name3> ( <name5> ) :	'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' and 'StopFutureHandlers' . derive the <name1> <name3> from the <name5> base <name1> .
pass	do nothing .
@  <name5>	decorator <name5> ,
<name3> <name4> ( <name2> ) :	derive the <name3> <name4> from the <name2> base <name3> .
def <name5> ( <name3> , <name6> = <name1> ) :	define the method <name5> with arguments <name3> and <name6> defaulting to boolean <name1> .
<name1> . <name3> = <name3>	substitute <name3> for <name1> .connection_reset .
def <name4> ( <name6> ) :	define the method <name4> with argument <name6> .
<name5> <name6> . connection_reset :	<name5> <name6> .connection_reset is true ,
<name5> <val6>	<name5> string <val6> .
else :	if not ,
<name4> <val2>	<name4> string <val2> .
<name5> <name2> ( <name4> ) :	derive the <name5> <name2> from the <name4> base <name5> .
pass	do nothing .
<name4> <name3> ( <name5> ) :	derive the <name4> <name3> from the <name5> base <name4> .
pass	do nothing .
<name1> <name5> ( <name3> ) :	derive the <name1> <name5> from the <name3> base <name1> .
<name5> = <val1> * <val3> ** <val6>	bring integer <val3> to the power of <val6> , multiply it by integer <val1> , substitute the result for <name5> .
def <name3> ( <name6> , <name1> = <name5> ) :	define the method <name3> with arguments <name6> and <name1> defaulting to <name5> .
<name4> . file_name = <name2>	<name4> .file_name is <name2> .
<name4> . content_type = <name5>	<name4> .content_type is <name5> .
<name6> . content_length = <name3>	<name6> .content_length is <name3> .
<name3> . charset = <name4>	<name3> .charset is <name4> .
<name5> . content_type_extra = <name6>	<name5> .content_type_extra is <name6> .
<name2> . request = request	<name2> .request is None .
def <name3> ( <name1> , <name5> , <name2> , <name4> , <name6> , <name3> = <name1> ) :	define the method <name3> with arguments : <name1> , <name5> , <name2> , <name4> , <name6> and <name3> set to <name1> .
pass	do nothing .
def <name3> ( <name1> , <name6> , <name5> , <name2> , <name4> , <name3> = <name1> , content_type_extra = <name1> ) :	define the method <name3> with arguments : <name1> , <name6> , <name5> , <name2> , <name4> , <name3> set to <name1> ,
<name3> . <name6> = <name6>	substitute <name6> for <name3> .field_name .
<name1> . <name2> = <name2>	substitute <name2> for <name1> .file_name .
<name1> . <name2> = <name2>	substitute <name2> for <name1> .content_type .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .content_length .
<name5> . <name4> = <name4>	substitute <name4> for <name5> .charset .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .content_type_extra .
def <name3> ( <name4> , <name6> , <name1> ) :	define the method <name3> with arguments : <name4> , <name6> and <name1> .
<name1> <name4> ( <val3>   )	<name1> an <name4> with argument string <val3> .
def <name6> ( <name4> , <name3> ) :	define the method <name6> with arguments : <name4> and <name3> .
<name3> <name6> ( <val5>   )	<name3> an <name6> with argument string <val5> .
def <name1> ( <name2> ) :	define the method <name1> with argument <name2> .
pass	do nothing .
<name6> <name5> ( <name2> ) :	derive the <name6> <name5> from the <name2> base <name6> .
def <name3> ( <name2> , * <name6> , ** <name5> ) :	define the method <name3> with arguments <name2> , argument list <name6> and dictionary of arguments <name5> .
super ( <name5> , self ) . <name1> ( * <name4> , ** kwargs )	call the <name1> method from the base class of the <name5> class with arguments : unpacked list <name4> ,
def <name5> ( <name6> , <name2> , * <name4> , ** <name1> ) :	and unpacked dictionary <name1> . define the method <name5> with arguments : <name6> , <name2> , unpacked list <name4> and unpacked dictionary <name1> .
super ( <name3> , self ) . <name2> ( <name6> , * <name1> , ** <name4> )	call the method <name2> from the base class of the <name3> class with arguments : <name6> , unpacked list <name1> and unpacked dictionary <name4> .
<name6> . file = <name5> ( <name6> . file_name , <name6> . content_type , <val3> , <name6> . charset , <name6> . content_type_extra )	<name6> .file is a instance of a class <name5> initialized with arguments : <name6> .file_name , <name6> .content_type , integer <val3> ,
def <name1> ( <name2> , <name5> , <name4> ) :	<name2> .charset and <name2> .content_type_extra . define the method <name1> with arguments : <name2> , <name5> and <name4> .
<name4> . file . write ( <name5> )	call the method <name4> .file .write with argument <name5> .
def <name4> ( <name1> , <name2> ) :	define the method <name4> with arguments <name1> and <name2> .
<name4> . <name6> . seek ( 0 )	position the <name6> pointer at the start of the <name4> .file <name6> .
<name3> . file . size = <name4>	substitute <name4> for <name3> .file .size .
<name4> <name6> . file	<name4> <name6> .file .
<name6> <name5> ( <name3> ) :	derive the <name6> <name5> from the <name3> base <name6> .
def <name5> ( <name1> , <name3> , <name4> , <name6> , <name2> , <name5> = <name1> ) :	define the method <name5> with arguments : <name1> , <name3> , <name4> , <name6> , <name2> and <name5> set to <name1> .
<name6> <name4> >  <name3> . FILE_UPLOAD_MAX_MEMORY_SIZE :	<name6> <name4> is greater than <name3> .FILE_UPLOAD_MAX_MEMORY_SIZE ,
<name1> . activated = <name4>	<name1> .activated is boolean <name4> .
else :	if not ,
<name3> . activated = <name2>	<name3> .activated is boolean <name2> .
def <name2> ( <name6> , * <name1> , ** <name5> ) :	define the method <name2> with arguments : <name6> , unpacked list <name1> and unpacked dictionary <name5> .
super ( <name5> , self ) . <name3> ( * <name2> , ** <name4> )	call the <name3> method form the base class from the <name5> class with arguments : unpacked list <name2> and unpacked list <name4> .
<name3> <name1> . activated :	<name3> <name1> .activated is boolean True ,
<name3> . file = <name5> ( )	call the function <name5> , substitute the result for <name3> .file .
<name1> <name3> ( )	<name1> an exception <name3> .
def <name2> ( <name3> , <name5> , <name1> ) :	define the function <name2> with arguments <name3> , <name5> and <name1> .
<name6> <name2> . activated :	<name6> <name2> .activated is boolean True ,
<name1> . <name4> . <name3> ( <name2> )	<name3> <name2> to <name1> .file <name4> .
else :	if not ,
<name4> <name1>	<name4> <name1> .
def <name3> ( <name5> , <name1> ) :	define the function <name3> with arguments <name5> and <name1> .
<name3> not <name2> . activated :	<name3> <name2> .activated is boolean False ,
<name5>	<name5> nothing .
<name6> . <name4> . seek ( 0 )	set <name4> pointer at the beginning of the <name6> .file <name4> .
return <name6> ( <name4> = <name3> . <name4> , <name2> = <name3> . <name2> , name = <name3> . file_name , content_type = <name3> . content_type , size = file_size , charset = <name3> . charset , content_type_extra = <name3> . content_type_extra )	initialize the object of a <name6> class with arguments : <name4> set to <name3> .file , <name2> set to <name3> .field_name ,
def <name4> ( <name2> , * <name5> , ** <name6> ) :	name set to self .file_name , content_type set to self .content_type , size set to file_size , charset set to self .charset , and content_type_extra set to self .content_type_extra , return it . define the function <name4> with arguments : <name2> , unpacked list <name5> and unpacked dictionary <name6> .
<name1> <name6> ( <name4> ) ( * <name5> , ** <name3> )	call the <name6> with arguments <name4> , call the <name1> function with arguments : unpacked list <name5> and unpacked dictionary <name3> , <name1> the result .
<name3> <name5> ( <name2> ) :	derive <name3> <name5> from the base <name3> <name2> , making it a new - style <name3> .
<name4> = <name1> ( <name2> <name6> : <name6> . file . <name4> )	define <name2> function that returns <name6> .file .encoding field , use it as an argument for <name1> function , put the result in <name4> .
<name4> = <name6> ( <name5> <name3> : <name3> . file . <name4> )	define <name5> function that returns <name3> .file .fileno field , use it as an argument for <name6> function , put the result in <name4> .
<name6> = <name5> ( <name3> <name1> : <name1> . file . <name6> )	define <name3> function that returns <name1> .file .flush field , use it as an argument for <name5> function , put the result in <name6> .
<name4> = <name3> ( <name2> <name6> : <name6> . file . <name4> )	define <name2> function that returns <name6> .file .isatty field , use it as an argument for <name3> function , put the result in <name4> .
<name2> = <name4> ( <name5> <name1> : <name1> . file . <name2> )	define <name5> function that returns <name1> .file .newlines field , use it as an argument for <name4> function , put the result in <name2> .
<name3> = <name4> ( <name6> <name2> : <name2> . file . <name3> )	define <name6> function that returns <name2> .file .read field , use it as an argument for <name4> function , put the result in <name3> .
<name6> = <name5> ( <name1> <name2> : <name2> . file . <name6> )	define <name1> function that returns <name2> .file .readinto field , use it as an argument for <name5> function , put the result in <name6> .
<name6> = <name5> ( <name1> <name2> : <name2> . file . <name6> )	define <name1> function that returns <name2> .file .readline field , use it as an argument for <name5> function , put the result in <name6> .
<name2> = <name6> ( <name4> <name1> : <name1> . file . <name2> )	define <name4> function that returns <name1> .file .readlines field , use it as an argument for <name6> function , put the result in <name2> .
<name4> = <name5> ( <name1> <name3> : <name3> . file . <name4> )	define <name1> function that returns <name3> .file .seek field , use it as an argument for <name5> function , put the result in <name4> .
<name3> = <name6> ( <name2> <name5> : <name5> . file . <name3> )	define <name2> function that returns <name5> .file .softspace field , use it as an argument for <name6> function , put the result in <name3> .
<name6> = <name1> ( <name4> <name2> : <name2> . file . <name6> )	define <name4> function that returns <name2> .file .tell field , use it as an argument for <name1> function , put the result in <name6> .
<name6> = <name1> ( <name3> <name4> : <name4> . file . <name6> )	define <name3> function that returns <name4> .file .truncate field , use it as an argument for <name1> function , put the result in <name6> .
<name6> = <name2> ( <name3> <name1> : <name1> . file . <name6> )	define <name3> function that returns <name1> .file .write field , use it as an argument for <name2> function , put the result in <name6> .
<name2> = <name6> ( <name4> <name1> : <name1> . file . <name2> )	define <name4> function that returns <name1> .file .writelines field , use it as an argument for <name6> function , put the result in <name2> .
<name3> = <name1> ( <name5> <name4> : <name4> . file . <name3> )	define <name5> function that returns <name4> .file .xreadlines field , use it as an argument for <name1> function , put the result in <name3> .
def <name2> ( <name3> ) :	define iterator method <name2> with <name3> as the argument .
<name4> iter ( <name6> . file )	<name4> iterator object based on the <name6> .file collection object .
<name5> <name3> <name6> <name4>	<name5> <name3> <name6> <name4> into default name space .
<name4> <name3>	<name4> module <name3> .
<name4> <name6>	<name4> module <name6> .
<name6> <name5>	<name6> module <name5> .
<name3> <name5> <name2> <name6>	<name3> <name5> <name2> <name6> into default name space .
<name6> <name2> . conf <name3> <name1>	<name6> <name2> .conf <name3> <name1> into default name space .
<name4> <name6> . core <name2> <name1>	<name4> <name6> .core <name2> <name1> into default name space .
<name2> <name3> . core <name6> <name5>	<name2> <name3> .core <name6> <name5> into default name space .
<name1> <name4> . core . exceptions <name6> <name2> , <name5> , <name3>	<name1> <name4> .core .exceptions <name6> <name2> , <name5> and <name3> into default name space .
<name4> <name5> . db <name1> <name2> , <name6>	<name4> <name5> .db <name1> <name2> and <name6> into default name space .
<name4> <name1> . utils . encoding <name3> <name5>	<name4> <name1> .utils .encoding <name3> <name5> into default name space .
<name3> <name4> . utils . module_loading <name5> <name6>	<name3> <name4> .utils .module_loading <name5> <name6> into default name space .
<name1> <name5> . utils <name6> <name2>	<name1> <name5> .utils <name6> <name2> into default name space .
<name1> <name3> . views <name2> <name5>	<name1> <name3> .views <name2> <name5> into default name space .
<name6> = <name4> . getLogger ( <val3>   )	call the function <name4> .getLogger with string <val3> as the argument , assign the return object handle to <name6> .
<name1> <name2> ( <name5> ) :	derive <name1> <name2> , derive from the base <name1> <name5> , making this a new style <name1> .
<name3> = [ <name4> . fix_location_header , <name4> . conditional_content_removal , ]	<name3> is a list with <name4> .fix_location_header and <name4> .conditional_content_removal as elements .
def <name5> ( <name2> ) :	define initialization method <name5> , with <name2> class instance as the argument .
self . <name1> = self . <name6> = self . <name5> = self . <name2> = self . <name3> = <name4>	set class fields <name1> , <name6> , <name5> , <name2> and <name3> to <name4> .
def <name5> ( <name3> ) :	define method <name5> with class instance <name3> as the argument .
<name5> . _view_middleware = [ ]	<name5> ._view_middleware is an empty list .
<name1> . _template_response_middleware = [ ]	<name1> ._template_response_middleware is an empty list .
self . <name1> = [ ]	<name1> is an empty list .
self . _exception_middleware = [ ]	exception_middleware is an empty list .
<name1> = [ ]	<name1> is an empty list .
<name1> <name6> <name2> <name5> . MIDDLEWARE_CLASSES :	<name1> every <name6> <name2> <name5> .MIDDLEWARE_CLASSES :
mw_class = <name4> ( <name3> )	evaluate the function <name4> with <name3> as argument , substitute the result for my_class .
<name6> :	<name6> ,
<name4> = <name3> ( )	call the <name3> function , store the result in the <name4> .
except <name5> :	if <name5> exception is raised ,
continue	skip this iteration of he smallest enclosing loop .
<name6> hasattr ( <name3> , <val2>   ) :	<name6> <name3> has an attribute named <val2> .
<name5> . <name1> ( <name4> . process_request )	<name1> <name4> .process_request at the end of <name5> .
<name2> hasattr ( <name3> , <val6>   ) :	<name2> <name3> has an attribute named <val6> .
<name6> . _view_middleware . <name5> ( <name2> . process_view )	<name5> <name2> .process_view at the end of <name6> ._view_middleware .
<name6> hasattr ( <name4> , <val2>   ) :	<name6> <name4> has an attribute named <val2> .
<name3> . _template_response_middleware . <name4> ( 0 , <name6> . process_template_response )	<name4> <name6> .process_template_response at the beginning of <name3> ._template_response_middleware .
<name5> hasattr ( <name4> , <val3>   ) :	<name5> <name4> has an attribute named <val3> .
<name6> . _response_middleware . <name5> ( 0 , <name1> . process_response )	<name5> <name1> .process_response at the beginning of <name6> ._response_middleware .
<name5> hasattr ( <name4> , <val6>   ) :	<name5> <name4> has an attribute named <val6> .
<name6> . _exception_middleware . <name2> ( 0 , <name1> . process_exception )	<name2> <name1> .process_exception at the beginning of <name6> ._exception_middleware .
<name3> . _request_middleware = <name4>	substitute <name3> ._request_middleware for <name4> .
def <name5> ( <name3> , <name4> ) :	define the method <name5> , with <name3> class instance and <name4> as the arguments .
<name1> = getattr ( <name4> , <val5>   , <name6> ( ) )	get attribute <val5> from the <name4> object , if the attribute doesnt exist return the empty <name6> , substitute the result for <name1> .
<name2> <name1> <name5> <name3> . all ( ) :	call the method <name3> .all ( ) , perform the following <name2> every <name1> <name5> the result ,
<name1> ( <name4> . settings_dict [ 'ATOMIC_REQUESTS'   ] <name3> <name4> . alias <name2> <name5> <name6> ) :	<name1> value under the key ' ATOMIC_REQUESTS of <name4> .settings_dic dictionary is True <name3> <name4> .alias is <name2> present <name5> the <name6> ,
view = <name4> . atomic ( <name6> = <name1> . alias ) ( view )	call the function <name4> .atomic , with <name6> set to <name1> .alias as the argument , return value is a function which is called ,
<name6> <name5>	with the argument <name5> , store the result in the <name5> . <name6> <name5>
def <name4> ( <name1> , <name5> , <name3> , <name2> ) :	define method <name4> , with <name1> class instance , <name5> , <name3> and <name2> as the arguments .
<name5> :	<name5> ,
<name1> , <name6> = <name4> . resolve_error_handler ( <name3> )	call the function <name4> .resolve_error_handler with <name3> as an argument , assign the result to the <name1> and <name6> , respectively .
<name5> = <name2> ( <name6> , ** <name3> )	call the <name2> function with <name6> and dictionary argument <name3> as the arguments , substitute it for <name5> .
except :	if an exception occurred ,
<name1> . got_request_exception . send ( <name3> = self . __class__ , <name6> = <name6> )	call the method <name1> .got_request_exception .send with the <name3> set to the type of this class , and <name6> set to <name6> as the arguments .
response = <name4> . handle_uncaught_exception ( <name3> , <name2> , <name1> . exc_info ( ) )	call the method <name4> .handle_uncaught_exception with <name3> , <name2> and return value of the function <name1> .exec_info as the arguments .
<name5> <name1>	<name5> <name1>
def <name4> ( <name2> , <name3> ) :	define the method <name4> , with <name2> class instance and <name3> as the arguments .
<name6> = <name3> . ROOT_URLCONF	substitute <name3> .ROOT_URLCONF for <name6> .
<name6> . set_urlconf ( <name3> )	call the method <name6> .set_urlconf with <name3> as the argument .
<name3> = <name4> . RegexURLResolver ( r <val5>   , <name6> )	call the method <name4> .RegexURLResolver with raw literal string <val5> and <name6> as the arguments , substitute the result for <name3> .
<name3> :	<name3> ,
<name1> = <name4>	set <name1> to <name4> .
<name1> <name2> <name4> <name5> . _request_middleware :	<name1> every <name2> <name4> <name5> ._request_middleware ,
<name4> = <name3> ( <name1> )	call the <name3> with the <name1> as an argument , substitute the result for <name4> .
<name2> <name1> :	<name2> <name1> is True ,
break	breaks from the smallest enclosing loop execution .
<name2> <name5> <name4> <name1> :	<name2> <name5> <name4> <name1> ,
<name5> hasattr ( <name2> , <val4>   ) :	<name5> <name2> has an attribute named <val4> ,
   <name2> = <name6> . <name2>	substitute <name6> .urlconf for <name2> .
<name6> . set_urlconf ( <name4> )	call the function <name6> .set_urlconf with <name4> as the argument .
<name4> = <name3> . RegexURLResolver ( r <val2>   , <name1> )	call the method <name3> .RegexURLResolver with raw literal string <val2> and <name1> as the arguments , substitute the result for <name4> .
resolver_match = <name6> . resolve ( <name4> . path_info )	call to the <name6> .resolve method with <name4> .path_info as an argument .
<name6> , <name2> , <name3> = <name5>	assign the values to the <name6> , <name2> , <name3> , respectively , from the <name5> tuple .
<name5> . <name3> = <name3>	substitute <name3> for <name5> .resolver_match .
<name4> <name6> <name2> <name1> . _view_middleware :	<name4> every <name6> <name2> <name1> ._view_middleware ,
<name5> = <name6> ( <name3> , <name1> , <name4> , <name2> )	call the <name6> with <name3> , <name1> , <name4> and <name2> as the arguments , substitute the result for <name5> .
<name5> <name6> :	<name5> <name6> is True ,
     <name4>	<name4> from the smallest enclosing loop execution .
<name5> <name1> <name3> <name6> :	<name5> <name1> <name3> <name6> ,
<name5> = <name2> . make_view_atomic ( <name4> )	call the method <name2> .make_view_atomic with <name4> as the argument , substitute the result for the <name5> .
<name3> :	<name3> ,
response = <name2> ( <name1> , * <name5> , ** <name6> )	call the function <name2> with <name1> , list or arguments <name5> and dictionary arguments <name6> ,
except <name4> <name2> <name1> :	<name2> the arguments , substitute the result for response . if <name4> , renamed to <name1> , exception is caught ,
     <name5> <name6> <name4> <name2> . _exception_middleware :	<name5> every <name6> <name4> <name2> ._exception_middleware ,
     <name2> = <name6> ( <name5> , <name1> )	call the <name6> with <name5> and <name1> as the arguments , substitute the result for <name2> .
<name2> <name1> :	<name2> <name1> is True ,
         <name6>	<name6> from the smallest enclosing loop execution .
<name3> <name6> <name2> <name1> :	<name3> <name6> <name2> <name1> ,
     <name1>	<name1> the exception .
<name2> <name4> <name5> <name3> :	<name2> <name4> <name5> <name3> ,
<name4> isinstance ( <name2> , <name1> . FunctionType ) :	<name4> <name2> is of instance <name1> .FunctionType ,
<name5> = <name1> . __name__	get the name of the <name1> , substitute it for <name5> .
else :	if not ,
<name6> = <name3> . __class__ . __name__ + <val5>	get the name of the type of the <name3> , append the string <val5> to it , substitute it for <name6> .
raise ValueError ( <val2> % ( callback . __module__ , view_name ) )	substitute the '%s' in the string <val2> ,
<name1> hasattr ( <name5> , <val6>   ) <name2> <name4> ( <name5> . render ) :	with the name of the module callback is in <name2> the view_name , respectively , use it as the argument for the ValueError exception raise . <name1> <name5> has an attribute named <val6> <name2> <name5> .render is a <name4> function ,
<name4> <name1> <name6> <name5> . _template_response_middleware :	<name4> every <name1> <name6> <name5> ._template_response_middleware ,
<name2> = <name1> ( <name6> , <name2> )	call the function <name1> with the <name6> and <name2> as the arguments , assign the result to <name2> .
<name5> <name1> <name2> <name3> :	<name5> <name1> <name2> <name3> ,
"     raise ValueError ( ""%s.process_template_response didn't return an "" ""HttpResponse object. It returned None instead."" % ( middleware_method . __self__ . __class__ . __name__ ) )"	"replace '%s' in the string ""%s.process_template_response didn't return an HttpResponse object. It returned None instead."" ,"
<name4> = <name4> . render ( )	with name of the class type of the middleware_method instance , use it as the argument for call to the ValueError exception raise . call the <name4> .render ( ) method and assign the return to the <name4> .
except <name2> . Http404 <name4> <name3> :	if exception <name2> .Http404 <name4> <name3> is caught ,
logger . warning ( <val4>   , <name2> . path , <name5> = {   <val1>   : <val6> , 'request'   : <name2> }  )	substitute '%s' in <val4> with <name2> .path , <name5> is an dictionary with two pairs of elements <val1> with value <val6> ,
<name1> <name4> . DEBUG :	and ' request with value request , respectively use the previous as the arguments for the call to the logger .warning function . <name1> <name4> .DEBUG is True ,
<name2> = <name5> . technical_404_response ( <name6> , <name3> )	call the function <name5> .technical_404_response with <name6> and <name3> as arguments , assign the result to <name2> .
else :	if not ,
<name1> = <name5> . get_exception_response ( <name3> , <name6> , <val2> )	call the method <name5> .get_exception_response with <name3> , <name6> and integer <val2> as the arguments , assign the result to <name1> .
except <name4> :	if exception <name4> is caught ,
logger . warning ( <val2>   , <name5> . path , <name3> = {   'status_code'   : 403 , 'request'   : <name5> }  )	substitute '%s' in <val2> with <name5> .path , <name3> is an dictionary with two pairs of elements ,
<name6> = <name2> . get_exception_response ( <name3> , <name5> , <val1> )	'status_code' with value <val1> , and ' <name3> with value <name3> , respectively use the previous as the arguments for the call to the logger .warning function . call the method <name2> .get_exception_response with <name3> , <name5> and integer <val1> as the arguments , assign the result to <name6> .
except <name6> <name1> <name2> :	if exception <name6> <name1> <name2> is caught ,
security_logger = logging . getLogger ( <val4>   % <name3> . __class__ . __name__ )	substitute '%s' in <val4> with the name of the type of the class object <name3> , use it as the argument for the call to the ,
<name2> . error ( <name3> ( <name6> ) , <name4> = {   'status_code'   : 400 , 'request'   : request }  )	function logging .getLogger , assign the result to the <name2> . evaluate the function <name3> with <name6> as an argument , <name4> is an dictionary with two pair of elements ,
<name2> <name6> . DEBUG :	'status code' with integer value of 400 and 'request' with value request , respectively use the previous to call the function security_logger .error . <name2> <name6> .DEBUG is True ,
return <name2> . technical_500_response ( <name6> , * <name4> . exc_info ( ) , status_code = 400 )	evaluate the function <name2> .technical_500_response with <name6> , evaluated value of function <name4> .exc_info as a list ,
<name6> = <name2> . get_exception_response ( <name5> , <name4> , <val3> )	status code set to integer <val3> , return the result . call the method <name2> .get_exception_response with the <name5> , <name4> and integer <val3> as the arguments , substitute the result for <name6> .
except <name3> :	if <name3> exception is caught ,
<name5>	<name5> an exception .
except :	otherwise if any other exception is caught ,
<name6> . got_request_exception . send ( <name1> = <name2> . __class__ , <name3> = <name3> )	call the method <name6> .got_request_exception .send with <name1> set to type of the <name2> class instance and <name3> set to <name3> .
response = <name6> . handle_uncaught_exception ( <name2> , <name1> , <name3> . exc_info ( ) )	call to the <name6> .handle_uncaught_exception method with <name2> , <name1> and value of the evaluated function <name3> .exec_info ,
<name5> :	as the arguments , substitute the result for response . <name5> ,
<name1> <name3> <name5> <name2> . _response_middleware :	<name1> every <name3> <name5> <name2> ._response_middleware ,
<name1> = <name5> ( <name2> , <name1> )	call the function <name5> with <name2> and <name1> as the arguments , substitute the result for <name1> .
<name6> <name4> <name1> <name2> :	<name6> <name4> <name1> <name2> ,
"raise ValueError ( ""%s.process_response didn't return an "" ""HttpResponse object. It returned None instead."" % ( middleware_method . __self__ . __class__ . __name__ ) )"	"substitute '%s' is ""%s.process_response didn't return an HttpResponse object. It returned None instead."" ,"
<name2> = <name1> . apply_response_fixes ( <name6> , <name2> )	with the name of the type of the <name1> class instance of the middleware_method , raise the ValueError with the previous as the argument . call the method <name1> .apply_response_fixes with the <name6> and <name2> as the arguments , substitute the result for <name2> .
except :	if any exception is caught ,
<name4> . got_request_exception . send ( <name6> = <name3> . __class__ , <name2> = <name2> )	call the <name4> .got_request_exception .send method with <name6> set to type of the <name3> class instance and <name2> set to <name2> .
response = <name1> . handle_uncaught_exception ( <name3> , <name6> , <name2> . exc_info ( ) )	call to the <name1> .handle_uncaught_exception method with <name3> , <name6> and value of the evaluated function <name2> .exec_info ,
<name5> . _closable_objects . <name6> ( <name2> )	as the arguments , substitute the result for <name5> . <name6> the <name2> to the end of the protected class member <name5> ._closable_objects .
<name6> <name4>	<name6> <name4> .
def <name1> ( <name2> , <name4> , <name6> , exc_info ) :	define the method <name1> with <name2> class instance , <name4> , <name6> and exec_info as arguments .
<name1> <name2> . DEBUG_PROPAGATE_EXCEPTIONS :	<name1> <name2> .DEBUG_PROPAGATE_EXCEPTIONS is True ,
<name5>	<name5> an exception .
logger . error ( <val4>   , <name1> . path , <name3> = <name3> , extra = {   'status_code'   : 500 , 'request'   : <name1> }   )	substitute '%s' in <val4> with <name1> .path , <name3> set to <name3> ,
<name3> <name1> . DEBUG :	extra is an dictionary with two pairs of elements 'status_code' with value 500 , and ' request with value request , respectively use the previous as the arguments for the call to the logger .error function . <name3> <name1> .DEBUG is True ,
<name4> <name6> . technical_500_response ( <name2> , * exc_info )	evaluate <name6> .technical_500_response with <name2> and list of arguments exec_info , <name4> the result .
<name3> <name2> . urlconf_module <name4> <name6> :	<name3> <name2> .urlconf_module <name4> <name6> :
<name2> . <name3> ( * exc_info )	call the function <name3> from the module <name2> , with list of arguments exec_info .
<name5> , param_dict = <name6> . resolve_error_handler ( <val1> )	call the <name6> .resolve_error_handler with integer <val1> as the argument , assign the resulting tuple elements to the <name5> ,
<name3> <name6> ( <name2> , ** <name5> )	and <name5> , respectively . evaluate the function <name6> with <name2> and dictionary of parameters <name5> as the arguments , <name3> the result .
def <name4> ( <name6> , <name1> , <name5> ) :	define the method <name4> with <name6> class instance , <name1> and <name5> as the arguments .
<name2> <name6> <name1> <name3> . response_fixes :	<name2> every <name6> <name1> <name3> .response_fixes ,
<name6> = <name1> ( <name3> , <name6> )	call the function <name1> with <name3> and <name6> as arguments , assign the result to <name6> .
<name5> <name3>	<name5> <name3> .
<name2> <name1> <name5> <name4>	<name2> <name1> <name5> <name4> into default name space .
<name4> <name1>	<name4> module <name1> .
<name6> <name3>	<name6> module <name3> .
<name2> <name4>	<name2> module <name4> .
<name6> <name2>	<name6> module <name2> .
<name6> <name4> <name3> <name2>	<name6> <name4> <name3> <name2> into default name space .
<name6> <name4> <name5> <name1>	<name6> <name4> <name5> <name1> into default name space .
<name6> <name5>	<name6> module <name5> .
<name2> <name3> <name5> <name6>	<name2> <name3> <name5> <name6> into default name space .
<name5> <name4> . conf <name1> <name3>	<name5> <name4> .conf <name1> <name3> into default name space .
<name6> <name5> . core <name4> <name2>	<name6> <name5> .core <name4> <name2> into default name space .
<name2> <name5> . core . handlers <name6> <name4>	<name2> <name5> .core .handlers <name6> <name4> into default name space .
<name3> <name1> . core . urlresolvers <name6> <name4>	<name3> <name1> .core .urlresolvers <name6> <name4> into default name space .
<name3> <name1> . utils <name2> <name6>	<name3> <name1> .utils <name2> <name6> into default name space .
<name1> <name4> . utils . deprecation <name6> <name2>	<name1> <name4> .utils .deprecation <name6> <name2> into default name space .
<name5> <name3> . utils . encoding <name2> <name1> , <name4>	<name5> <name3> .utils .encoding <name2> <name1> and <name4> into default name space .
<name4> <name5> . utils . functional <name6> <name3>	<name4> <name5> .utils .functional <name6> <name3> into default name space .
<name2> <name6> . utils <name1> <name4>	<name2> <name6> .utils <name1> <name4> into default name space .
<name6> <name1> . http . response <name2> <name4> <name3> <name5>	<name6> <name1> .http .response <name2> <name4> <name3> <name5> #  NOQA into default name space .
<name2> = <name4> . getLogger ( <val6>   )	call <name4> .getLogger method with string <val6> as argument , store the result in <name2> .
<name6> , <name4> = str ( <val1>   ) , str ( <val5>   )	<name6> is a string <val1> , <name4> is a string <val5> .
<name5> <name3> ( <name4> ) :	derive <name5> <name3> from the <name4> base <name5> , making it a new - style <name5> .
<name5> <name6> ( <name1> , <name3> , <name2> , <name4> = <val5> * <val6> * <val6> ) :	<name5> initialization method <name6> with <name1> class instance , <name3> , <name2> and <name4> set to integer value of the product <val5> * <val6> * <val6> .
<name2> . <name3> = <name3>	substitute <name3> for <name2> .stream .
<name4> . remaining = <name1>	substitute <name1> for <name4> .remaining .
<name3> . buffer = b ''	substitute empty bytes string for <name3> .buffer .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .buf_size .
def <name3> ( <name2> , <name4> = <name6> ) :	define the method <name3> with <name2> class instance and <name4> set to <name6> as arguments .
<name3> <name1> <name4> <name5> <name6> <name1> >  <name2> . remaining :	<name3> <name1> <name4> <name5> <name6> <name1> <name4> greater than <name2> .remaining ,
<name3> = <name5> . remaining	substitute <name5> .remaining for <name3> .
<name2> <name6> == 0 :	<name2> <name6> equals to integer zero .
<name5> b ''	<name5> empty bytes string .
<name6> = <name5> . <name3> . <name4> ( <name1> )	<name4> <name1> number of bytes from <name5> .stream <name3> , store the <name6> in the <name6> .
<name5> . remaining -= len ( <name2> )	decrement <name5> .remaining by length of <name2> .
<name5> <name6>	<name5> <name6> .
def <name2> ( <name4> , <name1> = <name5> ) :	define the method <name2> with <name4> class instance and <name1> set to <name5> as arguments .
<name4> <name1> <name3> <name5> :	<name4> <name1> <name3> <name5> ,
<name2> = <name1> . buffer + <name1> . _read_limited ( )	add <name1> .buffer and <name1> ._read_limited method return value together , store it in <name2> .
<name6> . buffer = b ''	substitute empty bytes string for <name6> .buffer .
elif <name4> <  len ( <name2> . buffer ) :	otherwise if <name4> is less than length of <name2> .buffer ,
<name3> = <name5> . buffer [ : <name4> ]	substitute first <name4> elements of <name5> .buffer for <name3> .
<name1> . buffer = <name1> . buffer [ <name2> : ]	truncate first <name2> number of elements of <name1> .buffer .
else :	if not ,
<name1> = <name4> . buffer + <name4> . _read_limited ( <name6> - len ( <name4> . buffer ) )	call the method <name4> .read_limited with length of <name4> .buffer subtracted from <name6> as argument , add <name1> to <name4> .buffer , store it in <name1> .
<name6> . buffer = b ''	substitute empty bytes string for <name6> .buffer .
<name3> <name1>	<name3> <name1> .
def <name1> ( <name3> , <name6> = <name2> ) :	define method <name1> with <name3> class instance and <name6> set to <name2> .
\ <name2> b '\\n'   <name5> <name6> <name3> . buffer <name1> ( <name4> <name2> <name5> <name6> len ( <name3> . buffer ) <  <name4> ) : \	<name2> newline character <name2> <name5> contained <name6> <name3> .buffer <name1> , <name4> <name2> <name5> <name6> length of <name3> .buffer <name2> less than <name4> ,
<name2> <name5> :	<name2> <name5> is not zero ,
<name2> = <name3> . _read_limited ( <name5> - len ( <name3> . buffer ) )	call the <name3> ._read_limiter with length of <name3> .buffer subtracted from <name5> as argument , store the result into <name2> .
else :	if not ,
<name2> = <name3> . _read_limited ( )	call the method <name3> ._read_limited , store the return value into <name2> .
<name3> not <name6> :	<name3> <name6> is empty ,
<name2>	<name2> the execution of the smallest enclosing loop .
<name6> . buffer += <name3>	increment <name6> .buffer by <name3> .
<name5> = <name3> ( <name6> . buffer )	call the function <name3> with <name6> .buffer as argument , store the result is <name5> .
<name6> <name3> :	<name6> <name3> is not empty ,
<name4> = <name1> . readline ( <name2> )	call the <name1> .readline method with <name2> as an argument , substitute the result for <name4> .
else :	if not ,
<name4> = <name2> . readline ( )	call the <name2> .readline method , substitute the result for <name4> .
<name5> . buffer = <name3> . read ( )	call the <name3> .read method , substitute the result for <name5> .buffer .
<name4> <name3>	<name4> <name3> .
<name1> <name2> ( <name6> . HttpRequest ) :	derive the <name1> <name2> from base <name1> <name6> .HttpRequest .
def <name1> ( <name3> , <name6> ) :	define the initialization method <name1> with <name3> class instance and <name6> as arguments .
<name5> = <name3> ( <name1> )	call the <name3> function with <name1> as argument , substitute the result for <name5> .
<name2> = <name1> ( <name5> )	call the <name1> function with <name5> as argument , substitute the result for <name2> .
<name3> not <name4> :	<name3> <name4> is empty ,
<name2> = <val6>	<name2> is a character <val6> .
<name5> . <name6> = <name6>	substitute <name6> for <name5> .environ .
<name3> . <name4> = <name4>	substitute <name4> for <name3> .path_info .
<name3> . path = '%s/%s'   % ( <name5> . rstrip ( <val4>   ) , <name1> . replace ( <val4>   , ''   , 1 ) )	strip trailing <val4> from the <name5> string , remove first occurrence of <val4> in <name1> string , append second result to the first , separated with <val4> , assign the result to <name3> .path .
<name4> . META = <name3>	substitute <name3> for <name4> .META .
<name1> . META [ <val3>   ] = <name6>	assign <name6> to the value under the <val3> key of the <name1> .META dictionary .
<name1> . META [ 'SCRIPT_NAME'   ] = <name2>	assign <name2> to the value under the 'SCRIP_NAME' key of the <name1> .META dictionary .
<name6> . method = <name1> [ <val3>   ] . upper ( )	convert value under the <val3> key of the <name1> dictionary to uppercase , substitute it for <name6> .method .
_ , content_params = cgi . parse_header ( <name1> . <name5> ( <val6>   , ''   ) )	<name5> the value under the <val6> key of <name1> dictionary , if the key doesnt exist <name5> the empty string ,
<name5> <val4>   <name2> <name6> :	use it to call the cgi .parse_header method , assign the result to the _ and <name6> respectively . <name5> string <val4> is contained <name2> <name6> ,
<name3> :	<name3> ,
codecs . lookup ( <name2> [ <val5>   ] )	get the value under the <val5> key of <name2> dictionary , use it to call the codec .lookup method .
except <name1> :	if exception <name1> is caught ,
pass	do nothing .
else :	if not ,
<name1> . encoding = <name6> [ <val3>   ]	get the value under the <val3> key of <name6> dictionary , substitute it for <name1> .encoding .
<name4> . _post_parse_error = <name1>	<name4> ._post_parse_error is boolean <name1> .
<name2> :	<name2> ,
<name2> = int ( <name1> . get ( <val6>   ) )	convert value under the <val6> key of the <name1> dictionary to an integer , substitute it for <name2> .
except ( <name1> , <name3> ) :	if exception <name1> or <name3> is caught ,
<name4> = <val1>	<name4> is integer <val1> .
<name5> . _stream = <name6> ( <name5> . environ [ <val4>   ] , content_length )	<name5> ._stream is a class instance of a <name6> class , initialized with <name5> .environ dictionary value under the <val4> key ,
<name2> . _read_started = <name6>	and content_length . <name2> ._read_started is boolean <name6> .
<name6> . resolver_match = <name1>	<name6> .resolver_match is <name1> .
def <name5> ( <name6> ) :	define the method <name5> with <name6> class instance as argument .
<name6> <name3> . environ . get ( <val1>   )	<name6> value under the <val1> key of <name3> .environ dictionary .
def <name1> ( <name5> ) :	define the method <name1> with <name5> class instance as argument .
<name1> . warn ( '`request.REQUEST` is deprecated, use `request.GET` or '    '`request.POST` instead.'   , RemovedInDjango19Warning , 2 )	call the <name1> .warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.' ,
<name1> <name4> hasattr ( <name5> , <val6>   ) :	RemovedInDjango19Warning and integer 2 as arguments . <name1> <name5> does <name4> have an <val6> attribute ,
<name3> . _request = <name6> . MergeDict ( <name3> . POST , <name3> . GET )	call the <name6> .MergeDict with <name3> .POST and <name3> .GET as arguments , assign the result to <name3> ._request .
<name1> <name2> . _request	<name1> <name2> ._request .
@  <name4>	decorator <name4> .
def <name1> ( <name6> ) :	define method <name1> with <name6> class instance as an argument .
<name5> = <name1> ( <name2> . environ , <val6>   , ''   )	call the <name1> function with <name2> .environ , string <val6> and empty string as arguments , substitute the return value for <name5> .
<name1> <name4> . QueryDict ( <name6> , <name2> = <name5> . _encoding )	evaluate the <name4> .QueryDict method with <name6> and <name2> set to <name5> ._encoding as arguments , <name1> the result .
<name5> <name4> ( <name3> ) :	<name5> <name4> method with <name3> class instance as the argument .
<name6> <name5> hasattr ( <name1> , <val3>   ) :	<name6> <name1> does <name5> has an <val3> attribute .
<name1> . _load_post_and_files ( )	call the <name1> ._load_post_and_files method .
<name6> <name5> . _post	<name6> <name5> ._post .
def <name4> ( <name3> , <name6> ) :	define the <name4> method with <name3> class instance and <name6> as the arguments .
<name5> . _post = <name1>	substitute <name1> for <name5> ._post .
@  <name3>	decorator <name3> .
def <name1> ( <name2> ) :	define <name1> method with <name2> as the argument .
<name1> = <name6> ( <name5> . environ , <val4>   , ''   )	call <name6> function with <name5> .environ , string <val4> and empty string as arguments , substitute it for <name1> .
<name6> <name4> . parse_cookie ( <name1> )	evaluate the function <name4> .parse_cookie with <name1> as an argument , <name6> the result .
def <name5> ( <name1> ) :	define <name5> method with <name1> class instance as the argument .
<name2> <name4> hasattr ( <name5> , <val3>   ) :	<name2> <name5> does <name4> have <val3> attribute ,
<name2> . _load_post_and_files ( )	call the method <name2> ._load_post_and_files .
<name6> <name5> . _files	<name6> <name5> ._files .
<name2> = property ( <name6> , <name5> )	<name6> is a getter function and <name5> is a setter function for <name2> attribute of this class .
<name1> = property ( <name2> )	<name2> is getter function for <name1> attribute of this class .
<name5> = property ( <name1> )	<name1> is getter function for <name5> attribute of this class .
<name1> <name3> ( <name6> . BaseHandler ) :	derive the <name3> <name1> from the <name6> <name1> <name6> .BaseHandler .
<name4> = <name3> ( )	evaluate function <name3> ( ) assign the result to <name4> .
<name3> = <name6>	substitute <name6> for <name3> .
def <name4> ( <name3> , <name6> , <name1> ) :	define private method <name4> with <name3> class instance , <name6> and <name1> as the arguments .
<name4> <name2> . _request_middleware <name6> <name1> :	<name4> <name2> ._request_middleware <name6> <name1> ,
<name3> <name4> . initLock :	<name3> <name4> .initLock ,
<name4> :	<name4> ,
   <name4> <name5> . _request_middleware <name6> <name2> :	<name4> <name5> ._request_middleware <name6> <name2> ,
     <name1> . load_middleware ( )	call the <name1> .load_middleware method .
except :	if exception is caught ,
   <name1> . _request_middleware = <name4>	<name1> ._request_middleware is <name4> .
<name2>	re <name2> an exception .
<name1> ( <name5> ( <name3> ) )	call the <name5> function with <name3> as argument , use the result as an argument for call to the <name1> function .
<name5> . request_started . send ( <name1> = <name3> . __class__ )	call the <name5> .request_started .send method with <name1> set to <name3> .__class__ as argument .
<name4> :	<name4> ,
<name1> = <name4> . request_class ( <name3> )	call the <name4> .request_class method with <name3> as an argument , substitute the result for <name1> .
except <name5> :	if <name5> exception is caught ,
<name6> . warning ( <val1>   , exc_info = <name4> . exc_info ( ) , <name2> = {   'status_code'   : 400 , }   )	call the <name6> .warning method with string <val1> , exec_info set to <name4> .exec_info ( ) and dictionary <name2>
<name6> = <name5> . HttpResponseBadRequest ( )	with one entry 'status_code' is integer 400 , as arguments . call the <name5> .HttpResponseBadRequest function , assign the result to the <name6> .
else :	if not ,
<name3> = <name6> . get_response ( <name2> )	call the <name6> .get_response with <name2> as the argument , substitute the result for <name3> .
<name2> . _handler_class = <name3> . __class__	substitute <name3> .__class__ for <name2> ._handler_class .
<name5> = <val2>   % ( <name3> . status_code , <name3> . reason_phrase )	replace '%s' in the string <val2> with <name3> .status_code and <name3> .reason_phrase , respectively , substitute it for <name5> .
<name4> = [ ( str ( <name3> ) , str ( <name2> ) ) <name6> <name3> , <name2> <name5> <name1> . items ( ) ]	convert to <name3> and <name2> to strings <name6> every <name3> and <name2> <name5> return value of the <name1> .item method , <name4> is a list containing all the above iteration elements .
<name6> <name2> <name3> <name4> . cookies . values ( ) :	<name6> every <name2> <name3> return value of the method <name4> .cookies .values ,
response_headers . append ( ( str ( <val2>   ) , str ( <name6> . output ( <name5> = <val3>   ) ) ) )	convert <val2> to a string and convert the return value of method <name6> .output ( <name5> = <val3> ) call to a string ,
<name1> ( <name4> ( <name5> ) , <name2> )	format the previous in a tuple , append the tuple to the <name2> . call the <name1> function with <name4> ( <name5> ) method return value and <name2> as arguments .
<name6> <name4>	<name6> <name4> .
def <name5> ( <name2> ) :	define the <name5> function with <name2> as the argument .
<name5> = <name6> ( <name4> , <val2>   , <val1>   )	call the function <name6> with <name4> , string <val2> and character <val1> as arguments , substitute the result for <name5> .
<name1> <name4> . decode ( <name3> )	<name1> <name4> .decode method <name1> value called with <name3> as the argument .
def <name4> ( <name6> ) :	define <name4> function with <name6> as an argument .
<name6> <name4> . FORCE_SCRIPT_NAME <name1> <name3> <name2> :	<name6> <name4> .FORCE_SCRIPT_NAME <name1> <name3> <name2> ,
<name2> <name3> ( <name6> . FORCE_SCRIPT_NAME )	evaluate the <name3> function with <name6> .FORCE_SCRIPT_NAME as argument , <name2> the result .
<name3> = <name1> ( <name2> , <val4>   , ''   )	call the <name1> function with <name2> , string <val4> and empty strings as arguments , substitute the result for <name3> .
<name1> not <name4> :	<name1> <name4> is false ,
<name6> = <name3> ( <name4> , <val2>   , ''   )	call the <name3> function with <name4> , string <val2> and empty strings as arguments , substitute the result for <name6> .
<name6> <name2> :	<name6> <name2> is true ,
<name2> = <name5> ( <name6> , <val3>   , ''   )	call the <name5> function with <name6> , string <val3> and empty strings as arguments , substitute the result for <name2> .
<name6> = <name2> [ : - len ( <name5> ) ]	take all but the length of <name5> last elements of <name2> , substitute it for <name6> .
else :	if not ,
<name4> = <name6> ( <name1> , <val3>   , ''   )	call the <name6> function with <name1> , string <val3> and empty strings as arguments , substitute the result for <name4> .
<name1> script_name . decode ( <name3> )	<name1> scrip_name .decode method result called with <name3> as argument .
def <name5> ( <name2> , <name4> , <name6> ) :	define the function <name5> with <name2> , <name4> and <name6> as arguments .
<name1> = <name5> . <name4> ( str ( <name2> ) , str ( <name6> ) )	convert <name2> and <name6> to strings , <name4> the <name1> under the <name2> string <name2> of the <name5> dictionary , if it does not exists use the ,
<name3> <name5> <name1> <name2> . PY2 else <name5> . encode ( <name6> )	default string <name5> , substitute it for <name5> . <name3> <name5> <name1> <name2> .PY2 is true , <name1> not <name3> <name5> .encode ( <name6> ) .
def <name3> ( <name4> , <name2> , <name5> ) :	define the <name3> function with <name4> , <name2> and <name5> as arguments .
<name6> = <name2> . <name1> ( str ( <name4> ) , str ( <name3> ) )	convert <name4> and <name3> to strings , <name1> the <name6> under the <name4> string <name4> of the <name2> dictionary , if it does not exists use the ,
<name4> <name3> <name1> <name6> . PY2 else <name3> . encode ( <name5> ) . decode ( <name2> )	default string <name3> , substitute it for <name3> . <name4> <name3> <name1> <name6> .PY2 is true , <name1> not <name4> <name3> .encode ( <name5> ) .decode ( <name2> ) .
<name1> <name2> <name6> <name3>	<name1> <name2> <name6> <name3> into default name space .
<name4> <name3> . conf <name6> <name2>	<name4> <name3> .conf <name6> <name2> into default name space .
<name6> <name4> . utils . module_loading <name5> <name2>	<name6> <name4> .utils .module_loading <name5> <name2> into default name space .
<name2> <name6> . core . mail . utils <name1> <name5> , <name3>	<name2> <name6> .core .mail .utils <name1> <name5> and <name3> into default name space .
<name4> <name6> . core . mail . message <name1> ( <name5> , <name2> , <name3> , <name4> , DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError , forbid_multi_line_headers )	<name4> <name6> .core .mail .message <name1> <name5> , <name2> , <name3> , <name4> ,
<name4> = [ <val3>   , <val6>   , <val2>   , <val5>   , <val1>   , 'SafeMIMEMultipart'   , 'DEFAULT_ATTACHMENT_MIME_TYPE'   , 'make_msgid'   , 'BadHeaderError'   , 'forbid_multi_line_headers'   , 'get_connection'   , 'send_mail'   , 'send_mass_mail'   , 'mail_admins'   , 'mail_managers'   , ]	DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError and forbid_multi_line_headers into default name space . <name4> is a list of strings , <val3> , <val6> , <val2> , <val5> , <val1> ,
def <name4> ( <name6> = <name3> , <name5> = <name1> , ** <name2> ) :	'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' , 'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' , 'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' and 'mail_managers' . define function <name4> with <name6> set to <name3> , <name5> set to boolean <name1> and dictionary <name2> as arguments .
<name6> = <name5> ( <name2> <name3> <name1> . EMAIL_BACKEND )	call the function <name5> with <name2> if exists <name3> <name1> .EMAIL_BACKEND if not , store the result into <name6> .
<name4> <name2> ( <name3> = <name3> , ** <name1> )	call the <name2> method with <name3> set to <name3> and dictionary arguments <name1> as arguments , <name4> the result .
def <name3> ( <name5> , <name6> , <name2> , <name4> , <name1> = <name3> , auth_user = None , auth_password = None , connection = None , html_message = None ) :	define <name3> funtion with <name5> , <name6> , <name2> , <name4> , <name1> set to boolean <name3> ,
<name2> = <name2> or <name6> ( <name1> = <name5> , <name4> = <name3> , <name2> = <name2> )	if <name2> exists dont modify it , if not call <name6> function with <name1> set to <name5> , <name4> set to <name3> , <name2> set to <name2> as arguments , assign it to <name2> .
<name6> = <name1> ( <name2> , <name3> , <name5> , <name4> , <name6> = <name6> )	call the <name1> function with , <name2> , <name3> , <name5> , <name4> and <name6> set to <name6> , as arguments , assign the result to <name6> .
<name2> <name6> :	<name2> <name6> is True ,
<name1> . attach_alternative ( <name5> , <val4>   )	call the <name1> .attach_alternative method with <name5> and string <val4> as arguments .
<name4> <name3> . send ( )	<name4> the evaluated result of the <name3> .send method .
def <name5> ( <name6> , <name1> = <name4> , <name3> = <name2> , <name5> = <name2> , connection = <name2> ) :	define the function <name5> with , <name6> , <name1> set to <name4> , <name3> set to <name2> , <name5> set to <name2> ,
<name2> = <name2> or <name3> ( <name6> = <name1> , password = auth_password , fail_silently = fail_silently )	if <name2> exists dont change it , if not call the <name3> function with <name6> set to <name1> ,
messages = [ <name5> ( <name4> , <name3> , <name1> , <name6> , <name2> = <name2> ) for <name4> , <name3> , <name1> , <name6> in datatuple ]	password set to auth_password , fail_silently set to fail_silently as arguments , assign the result to <name2> . call the <name5> function wit <name4> , <name3> , <name1> , <name6> and <name2> set to <name2> ,
<name4> <name2> . send_messages ( <name6> )	for every subject , message , sender and recipient in datatuple , store the results in the <name6> list . <name4> evaluated result of the method <name2> .send_messages with <name6> as argument .
def <name5> ( <name2> , <name6> , fail_silently = <name1> , <name4> = <name3> , html_message = <name3> ) :	define the function <name5> with <name2> , <name6> , fails_silently set to boolean <name1> , <name4> set to <name3> ,
<name5> not <name4> . ADMINS :	<name5> <name4> .ADMINS is false ,
<name4>	<name4> nothing .
mail = <name1> ( '%s%s'   % ( <name6> . EMAIL_SUBJECT_PREFIX , <name3> ) , message , <name6> . SERVER_EMAIL , [ a [ 1 ] for a in <name6> . ADMINS ] , connection = connection )	call the function <name1> with <name6> .EMAIL_SUBJECT_PREFIX and <name3> converted to strings and concatenated ,
<name4> <name5> :	message , settings .SERVER_EMAIL , list of second elements of a for every a in settings .Managers and connection set to connection , as arguments , assign the result to mail . <name4> <name5> is true ,
<name4> . attach_alternative ( <name1> , 'text/html'   )	call method <name4> .attach_alternative as <name1> and string 'text/hmtl' as arguments .
<name3> . send ( <name1> = <name1> )	call the <name3> .send method with <name1> = <name1> as argument .
def <name4> ( <name5> , <name2> , fail_silently = <name3> , <name6> = <name1> , html_message = <name1> ) :	define the function <name4> with <name5> , <name2> , fails_silently set to boolean <name3> , <name6> set to <name1> ,
<name5> <name2> <name3> . MANAGERS :	<name5> <name3> .MANAGERS does <name2> exist ,
<name5>	<name5> nothing .
mail = <name4> ( '%s%s'   % ( <name6> . EMAIL_SUBJECT_PREFIX , <name3> ) , message , <name6> . SERVER_EMAIL , [ a [ 1 ] for a in <name6> . MANAGERS ] , connection = connection )	call the function <name4> with <name6> .EMAIL_SUBJECT_PREFIX and <name3> converted to strings and concatenated ,
<name2> <name6> :	message , settings .SERVER_EMAIL , list of second elements of a for every a in settings .Managers and connection set to connection , as arguments , assign the result to mail . <name2> <name6> is true ,
<name4> . attach_alternative ( <name5> , <val3>   )	call the <name4> .attach_alternative method with <name5> and string <val3> as arguments .
<name6> . send ( <name5> = <name5> )	call the <name6> .send method with <name5> set to <name5> as argument .
<name6> <name4> ( <name2> ) :	derive the <name6> <name4> from the <name2> base <name6> .
def <name2> ( <name3> , <name6> = <name5> , ** <name1> ) :	define the method <name2> with arguments : <name3> , <name6> set to boolean <name5> and unpacked dictionary <name1> .
<name1> . <name2> = <name2>	substitute <name2> for <name1> .fail_silently .
def <name2> ( <name5> ) :	define the method <name2> with argument <name5> .
pass	do nothing .
def <name4> ( <name6> ) :	define the method <name4> with argument <name6> .
pass	do nothing
def <name4> ( <name6> ) :	define the method <name4> with argument <name6> .
<name3> . open ( )	call the method <name3> .open .
<name2> <name4>	<name2> <name4> .
def <name2> ( <name5> , <name1> , <name4> , <name6> ) :	define the method <name2> with arguments : <name5> , <name1> , <name4> and <name6> .
<name5> . close ( )	call the method <name5> .close .
def <name2> ( <name3> , <name1> ) :	define the method <name2> with arguments <name3> and <name1> .
<name3> <name6> ( <val5>   )	<name3> an <name6> exception with argument string <val5> .
<name5> <name6>	<name5> module <name6> .
<name1> <name2>	<name1> module <name2> .
<name2> <name6> . core . mail . backends . base <name5> <name4>	<name2> <name6> .core .mail .backends .base <name5> <name4> into default name space .
<name6> <name4> . utils <name3> <name5>	<name6> <name4> .utils <name3> <name5> into default name space .
<name5> <name1> ( <name6> ) :	derive the <name5> <name1> from the <name6> base <name5> .
def <name5> ( <name6> , * <name1> , ** <name4> ) :	define the <name5> method with arguments : <name6> , unpacked list <name1> and unpacked dictionary <name4> .
<name4> . stream = <name5> . <name3> ( <val2>   , <name6> . stdout )	<name3> the value under the <val2> key of the <name5> dictionary , if it exists replace it for <name4> .stream , if not replace <name6> .stdout for <name4> .stream .
<name2> . _lock = <name5> . RLock ( )	call the method <name5> .RLock , substitute the result for <name2> ._lock .
super ( <name5> , self ) . <name4> ( * <name6> , ** <name2> )	call the <name4> method from the base class of the <name5> class , with arguments : unpacked list <name6> and unpacked dictionary <name2> .
def <name6> ( <name1> , <name5> ) :	define the method <name6> with arguments <name1> and <name5> .
<name1> = <name3> . <name3> ( )	call the method <name3> .message , substitute the result for <name1> .
<name4> = <name1> . as_bytes ( )	call the method <name1> .as_bytes , substitute the result for <name4> .
<name1> <name3> . PY3 :	<name1> <name3> .PY3 is boolean True ,
<name4> = <name5> . get_charset ( ) . <name6> ( ) <name3> <name5> . get_charset ( ) else <val2>	<name3> method <name5> .get_charset evaluates to true , call the <name6> method on the return value of the <name5> .get_charset method , substitute the result for <name4> , otherwise <name3> it is false , substitute the string <val2> for <name4> .
<name3> = <name3> . decode ( <name1> )	call the method <name3> .decode with argument <name1> , substitute the result for <name3> .
\ <name5> . stream . write ( <val1>   % <name3> ) \	\ call the method <name5> .stream .write with argument string <val1> , with '%s' replaced with <name3> . \
<name6> . <name1> . <name4> ( <val3>   * <val5> )	<name4> <val5> <val3> characters into <name6> .stream file <name1> .
\ <name3> . <name2> . <name5> ( '\\n'   ) \	<name5> a newline into a <name3> .stream file <name2> .
def <name4> ( <name2> , <name3> ) :	define the method <name4> with arguments <name2> and <name3> .
<name2> not <name5> :	<name2> <name5> is false ,
<name6>	<name6> .
<name6> = <val2>	<name6> is an integer <val2> .
<name4> <name1> . _lock :	call the method <name1> ._lock , <name4> the result ,
<name1> :	<name1> ,
<name2> = <name5> . open ( )	call the method <name5> .open , substitute the result for <name2> .
<name1> <name4> <name3> <name2> :	<name1> every <name4> <name3> <name2> ,
<name6> . write_message ( <name5> )	call the method <name6> .write_message with argument <name5> .
<name6> . stream . flush ( )	call the method <name6> .stream .flush .
<name3> += 1	increment <name3> by one .
<name6> <name2> :	<name6> <name2> is true ,
<name5> . close ( )	call the method <name5> .close .
except <name1> :	if <name1> exception is caught ,
<name4> not <name1> . fail_silently :	<name4> <name1> .fail_silently is boolean False ,
<name2>	<name2> an exception .
<name3> <name1>	<name3> <name1> .
<name5> <name6> . core . mail . backends . base <name4> <name1>	<name5> <name6> .core .mail .backends .base <name4> <name1> into default name space .
<name5> <name2> ( <name6> ) :	derive the <name5> <name2> from the <name6> base <name5> .
def <name6> ( <name4> , <name1> ) :	define the method <name6> with arguments <name4> and <name1> .
<name1> len ( <name6> ( <name3> ) )	create <name6> out of <name3> , <name1> the length of the <name6> .
<name1> <name5>	<name1> module <name5> .
<name1> <name3>	<name1> module <name3> .
<name3> <name5> . conf <name4> <name6>	<name3> <name5> .conf <name4> <name6> into default name space .
<name3> <name4> . core . exceptions <name6> <name1>	<name3> <name4> .core .exceptions <name6> <name1> into default name space .
<name1> <name3> . core . mail . backends . console <name2> <name6> <name4> <name5>	<name1> <name3> .core .mail .backends .console <name2> <name6> <name4> <name5> into default name space .
<name6> <name2> . utils <name4> <name1>	<name6> <name2> .utils <name4> <name1> into default name space .
<name5> <name4> ( <name6> ) :	derive the <name5> <name4> from the <name6> base <name5> .
def <name1> ( <name3> , * <name2> , ** <name5> ) :	define the <name1> method with arguments : <name3> , unpacked list <name2> and unpacked dictionary <name5> .
<name2> . _fname = <name4>	<name2> ._fname is <name4> .
<name1> <val4>   <name6> <name2> :	<name1> <val4> is contained <name6> <name2> ,
<name1> . file_path = <name3> . <name4> ( <val6>   )	<name4> the value under the <val6> key of <name3> dictionary , substitute it for <name1> .file_path .
else :	if not ,
<name2> . file_path = getattr ( <name6> , <val3>   , <name5> )	get <val3> from the <name6> , if it exists , substitute it for <name2> .file_path , if not substitute <name5> for <name2> .file_path .
<name4> <name6> isinstance ( <name3> . file_path , <name5> . string_types ) :	<name4> <name3> .file_path is <name6> an instance of <name5> .string_types ,
<name4> <name1> ( <val3>   % <name5> . file_path )	<name4> an <name1> exception with argument string <val3> , replace '%r' with <name5> .file_path .
<name1> . file_path = <name6> . path . abspath ( <name1> . file_path )	call the <name6> .path .abspath with argument <name1> .file_path , substitute the result for <name1> .file_path .
<name5> os . <name6> . <name3> ( <name1> . file_path ) <name2> <name4> os . <name6> . isdir ( <name1> . file_path ) :	<name5> <name1> .file_path file <name6> <name3> <name2> it is <name4> a directory ,
<name6> <name4> ( <val2>   % <name1> . file_path )	<name6> an <name4> exception with argument string <val2> , replace '%s' with <name1> .file_path .
elif not os . <name4> . <name5> ( <name6> . file_path ) :	otherwise if <name6> .file_path file <name4> doesnt <name5> ,
<name2> :	<name2> ,
<name3> . makedirs ( <name6> . file_path )	call the <name3> .makedirs with argument <name6> .file_path .
except <name3> as <name4> :	if <name3> , renamed to <name4> , is caught ,
<name5> <name6> ( <val2>   % ( self . file_path , err ) )	<name5> an <name6> exception with argument string <val2> ,
<name6> <name3> os . access ( <name1> . file_path , os . W_OK ) :	replace '%s' with <name1> .file_path and err , respectively . <name6> <name1> .file_path file is <name3> writable ,
<name2> <name3> ( <val6>   % <name4> . file_path )	<name2> an <name3> exception with argument string <val6> , replace '%s' with <name4> .file_path .
<name3> [ <val6>   ] = <name4>	set value under the <val6> key of <name3> dictionary to <name4> .
super ( <name6> , self ) . <name3> ( * <name1> , ** <name5> )	call the <name3> method of the base class of the <name6> class with arguments : unpacked list <name1> and unpacked dictionary <name5> .
def <name5> ( <name3> , <name4> ) :	define the method <name5> with arguments <name3> and <name4> .
\ <name1> . stream . write ( <name3> . <name3> ( ) . <name6> ( ) + b <val4>   ) \	\ call the <name6> method on the return value of the <name3> .message method append to it <val4> character , use it as the argument for the call to the <name1> .stream .write method . \
<name3> . <name1> . <name5> ( b <val6>   * <val2> )	<name5> <val2> <val6> characters into <name3> .stream file <name1> .
\ <name4> . <name5> . <name3> ( b '\\n'   ) \	<name3> a newline character into <name4> .stream file <name5> .
def <name1> ( <name6> ) :	define the method <name1> with argument <name6> .
<name4> <name6> . _fname <name1> <name5> :	<name4> <name6> ._fname <name1> <name5> :
<name1> = <name5> . <name5> . now ( ) . <name6> ( <val2> )	call the <name6> function with argument string <val2> on the return value of the function <name5> .datetime .now , substitute the result for <name1> .
<name5> = <val2> % ( <name3> , abs ( <name6> ( <name4> ) ) )	<name5> is a string <val2> , with '%s' replaced by <name3> and absolute value of the return value of the function <name6> with argument <name4> , respectively .
<name2> . _fname = os . <name6> . <name3> ( <name2> . file_path , <name4> )	<name3> <name2> .file_path and <name4> into a valid file <name6> , substitute it for <name2> ._fname .
<name5> <name4> . _fname	<name5> <name4> ._fname .
def <name2> ( <name5> ) :	define the method <name2> with argument <name5> .
<name3> <name1> . stream <name2> <name4> :	<name3> <name1> .stream <name2> <name4> :
<name6> . stream = <name3> ( <name6> . _get_filename ( ) , <val5>   )	<name3> the file in mode <val5> and with file name obtained by calling the <name6> ._get_filename method .
<name4> <name3>	<name4> boolean <name3> .
<name1> False	<name1> boolean True .
def <name3> ( <name4> ) :	define the method <name3> with argument <name4> .
<name5> :	<name5> ,
<name3> <name2> . stream <name5> <name1> <name6> :	<name3> <name2> .stream <name5> <name1> <name6> ,
<name3> . stream . close ( )	call the <name3> .stream .close function .
<name3> :	<name3> perform ,
<name5> . stream = <name1>	<name5> .stream is <name1> .
<name4> <name5> . core <name1> <name2>	<name4> <name5> .core <name1> <name2> into default name space .
<name6> <name3> . core . mail . backends . base <name1> <name4>	<name6> <name3> .core .mail .backends .base <name1> <name4> into default name space .
<name1> <name5> ( <name4> ) :	derive the <name1> <name5> from the <name4> base <name1> .
def <name2> ( <name4> , * <name5> , ** <name3> ) :	define the method <name2> with arguments : <name4> , unpacked list <name5> and unpacked dictionary <name3> .
super ( <name2> , self ) . <name3> ( * <name6> , ** <name1> )	call the method <name3> from the base class of <name2> class , with arguments : unpacked list <name6> and unpacked dictionary <name1> .
<name4> not hasattr ( <name1> , <val6>   ) :	<name4> <name1> doesnt have an <val6> attribute ,
<name6> . outbox = [ ]	<name6> .outbox is an empty list .
def <name4> ( <name3> , <name6> ) :	define the method <name4> with arguments <name3> and <name6> .
<name2> = <val5>	<name2> is integer <val5> .
<name1> <name4> <name2> <name6> :	<name1> every <name4> <name2> <name6> ,
<name2> . <name2> ( )	call the method <name2> .message .
msg_count += 1	increment mes_count by one .
<name1> . outbox . extend ( <name3> )	call the method <name1> .outbox .extend with <name3> .
<name2> <name1>	<name2> <name1> .
<name4> <name3>	<name4> module <name3> .
<name4> <name5>	<name4> module <name5> .
<name5> <name6>	<name5> module <name6> .
<name6> <name2> . conf <name5> <name1>	<name6> <name2> .conf <name5> <name1> into default name space .
<name2> <name3> . core . mail . backends . base <name5> <name4>	<name2> <name3> .core .mail .backends .base <name5> <name4> into default name space .
<name6> <name1> . core . mail . utils <name5> <name4>	<name6> <name1> .core .mail .utils <name5> <name4> into default name space .
<name6> <name3> . core . mail . message <name1> <name5>	<name6> <name3> .core .mail .message <name1> <name5> into default name space .
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> from the <name4> base <name3> .
def <name4> ( <name6> , <name5> = <name3> , <name2> = <name3> , <name1> = <name3> , <name4> = <name3> , use_tls = <name3> , fail_silently = False , use_ssl = <name3> , timeout = <name3> , ** kwargs ) :	define the method <name4> with arguments : <name6> , <name5> set to <name3> , <name2> set to <name3> , <name1> set to <name3> , <name4> set to <name3> ,
super ( <name3> , self ) . <name4> ( <name5> = <name5> )	use_tls set to None , <name5> set to False , use_ssl set to None , timeout set to None and unpacked dictionary kwargs . call the <name4> method from the base class of the <name3> class with argument <name5> set to <name5> .
<name1> . <name2> = <name2> or <name3> . EMAIL_HOST	if <name2> exists substitute it for <name1> .host , if not substitute <name3> .EMAIL_HOST for <name1> .host .
<name5> . <name4> = <name4> or <name3> . EMAIL_PORT	if <name4> exists substitute it for <name5> .host , if not substitute <name3> .EMAIL_PORT for <name5> .port .
<name5> . <name2> = <name4> . EMAIL_HOST_USER <name1> <name2> <name3> <name6> else <name2>	<name1> <name2> <name3> <name6> substitute <name4> .EMAIL_HOST_USER for <name5> .username , <name1> not substitute <name2> for <name5> .username .
<name1> . <name4> = <name5> . EMAIL_HOST_PASSWORD <name3> <name4> <name2> <name6> else <name4>	<name3> <name4> <name2> <name6> substitute <name5> .EMAIL_HOST_PASSWORD for <name1> .username , <name3> not substitute <name4> for <name1> .password .
<name3> . <name1> = <name2> . EMAIL_USE_TLS <name6> <name1> <name4> <name5> else <name1>	<name6> <name1> <name4> <name5> substitute <name2> .EMAIL_USE_TLS for <name3> .username , <name6> not substitute <name1> for <name3> .use_tls .
<name1> . <name5> = <name3> . EMAIL_USE_SSL <name4> <name5> <name2> <name6> else <name5>	<name4> <name5> <name2> <name6> substitute <name3> .EMAIL_USE_SSL for <name1> .username , <name4> not substitute <name5> for <name1> .use_ssl .
<name5> . <name1> = <name1>	substitute <name1> for <name5> .timeout .
<name3> <name5> . use_ssl <name1> <name5> . use_tls :	<name3> <name5> .use_ssl <name1> <name5> .use_tls are boolean True ,
"<name3> <name4> ( ""EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "" ""one of those settings to True."" )"	"<name3> an <name4> exception with argument string ""EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True."" ."
<name5> . connection = <name1>	<name5> .connection is <name1> .
<name2> . _lock = <name3> . RLock ( )	call the method <name3> .RLock , substitute the result for <name2> ._lock .
def <name1> ( <name2> ) :	define the method <name1> with argument <name2> .
<name2> <name3> . connection :	<name2> <name3> .connection is true ,
<name3> <name5>	<name3> boolean <name5> ,
<name5> = <name3> . SMTP_SSL <name6> <name2> . use_ssl else <name3> . SMTP	substitute <name3> .SMTP_SSL for <name5> <name6> <name2> .use_ssl is true , <name6> not substitute <name3> .SMTP for <name5> .
<name3> = {  <val1>   : <name5> . get_fqdn ( ) }	<name3> is a dictionary with 1 initial entry : return value of the function <name5> .get_fqdn for <val1> .
<name5> <name2> . timeout <name6> <name3> <name4> :	<name5> <name2> .timeout <name6> <name3> <name4> ,
<name2> [ <val5>   ] = <name6> . timeout	set value under the <val5> key of the <name2> to <name6> .timeout .
<name5> :	<name5> ,
<name5> . connection = <name6> ( <name5> . host , <name5> . port , ** connection_params )	<name5> .connection is a instance of a class contained in <name6> , instantiated with arguments : <name5> .host , <name5> .port ,
<name6> not <name3> . use_ssl <name4> <name3> . use_tls :	<name4> unpacked dictionary connection_params . <name6> <name3> .use_ssl <name4> <name3> .use_tls are false ,
<name6> . connection . ehlo ( )	call the method <name6> .connection .ehlo .
<name3> . connection . starttls ( )	call the method <name3> .connection .starttls .
<name5> . connection . ehlo ( )	call the method <name5> .connection .ehlo .
<name6> <name5> . username <name3> <name5> . password :	<name6> <name5> .username <name3> <name5> .password are true ,
<name4> . connection . login ( <name4> . username , <name4> . password )	call the method <name4> .connection .login with arguments <name4> .username and <name4> .password .
<name3> <name1>	<name3> boolean <name1> .
except <name4> . SMTPException :	if <name4> .SMTPException exception is caught ,
<name2> not <name3> . fail_silently :	<name2> <name3> .fail_silently is boolean False ,
<name6>	<name6> an exception .
def <name4> ( <name5> ) :	define the method <name4> with argument <name5> .
<name4> <name3> . connection <name6> <name1> :	<name4> <name3> .connection <name6> <name1> ,
<name2>	<name2> nothing .
<name3> :	<name3> ,
<name6> :	<name6> ,
<name3> . connection . quit ( )	call the method <name3> .connection .quit .
except ( <name6> . SSLError , <name3> . SMTPServerDisconnected ) :	if <name6> .SSLError or <name3> .SMTPServerDisconnected exception occurred ,
<name4> . connection . close ( )	call the method <name4> .connection .close .
except <name4> . SMTPException :	if <name4> .SMTPException exception is caught ,
<name5> <name6> . fail_silently :	<name5> <name6> .fail_silently is boolean True ,
<name3>	<name3> nothing .
<name6>	<name6> an exception .
<name1> :	<name1> perform ,
<name6> . connection = <name4>	<name6> .connection is <name4> .
def <name2> ( <name5> , email_messages ) :	define the method <name2> with arguments <name5> and email_message .
<name3> not <name1> :	<name3> <name1> is false ,
<name1>	<name1> nothing .
<name1> <name2> . _lock :	call the method <name2> ._lock , <name1> the return value ,
<name6> = <name2> . open ( )	call the method <name2> .open , substitute the result for the <name6> .
<name2> not <name3> . connection :	<name2> <name3> .connection is false ,
<name5>	<name5> nothing .
<name5> = <val2>	<name5> is an integer <val2> .
<name6> <name3> <name2> <name4> :	<name6> every <name3> <name2> <name4> :
<name4> = <name1> . _send ( <name3> )	call the method <name1> ._send with argument <name3> , substitute the result for <name4> .
<name5> <name6> :	<name5> <name6> is true ,
<name5> += 1	increment <name5> by one .
<name3> <name6> :	<name3> <name6> is true ,
<name5> . close ( )	call the <name5> .close method .
<name6> <name1>	<name6> <name1> .
def <name6> ( <name1> , <name5> ) :	define the method <name6> with arguments <name1> and <name5> .
<name4> not <name3> . recipients ( ) :	call the <name3> .recipients method , <name4> it evaluates to false ,
<name6> <name5>	<name6> boolean <name5> .
<name6> = <name4> ( <name1> . <name6> , <name1> . encoding )	call the function <name4> with arguments <name1> .from_email and <name1> .encoding , substitute the result for <name6> .
<name1> = [ <name4> ( <name6> , <name2> . encoding ) <name5> <name6> <name3> <name2> . <name1> ( ) ]	call the function <name4> with arguments <name6> and <name2> .encoding , <name5> every <name6> <name3> return value of the function <name2> .recipients , store the results <name3> a <name1> list .
<name4> = <name6> . <name4> ( )	call the function <name6> .message , substitute the result for <name4> .
<name3> :	<name3> ,
<name2> . connection . sendmail ( <name6> , <name1> , <name5> . as_bytes ( ) )	call the method <name2> .connection .sendmail with arguments : <name6> , <name1> and return value of the function <name5> .as_bytes .
except <name4> . SMTPException :	if <name4> .SMTPException exception is caught ,
<name4> not <name1> . fail_silently :	<name4> <name1> .fail_silently is false ,
<name5>	<name5> an exception .
<name2> <name6>	<name2> boolean <name6> .
<name5> <name6>	<name5> boolean <name6> .
<name1> <name6> <name2> <name5>	<name1> <name6> <name2> <name5> into default name space .
<name3> <name2>	<name3> module <name2> .
<name1> <name3>	<name1> module <name3> .
<name3> <name4>	<name3> module <name4> .
<name3> <name6>	<name3> module <name6> .
<name5> <name2>	<name5> module <name2> .
<name3> <name6> <name2> ( <name4> <name5> <name1> , <name3> <name5> <name6> , <name2> , <name4> )	<name3> <name6> <name2> <name4> <name5> <name1> , <name3> <name5> <name6> , <name2> and <name4> .
<name3> <name4> . message <name1> <name2>	<name3> <name4> .message <name1> <name2> into default name space .
<name6> <name1> . mime . text <name3> <name2>	<name6> <name1> .mime .text <name3> <name2> into default name space .
<name3> <name1> . mime . multipart <name2> <name4>	<name3> <name1> .mime .multipart <name2> <name4> into default name space .
<name6> <name2> . mime . base <name1> <name4>	<name6> <name2> .mime .base <name1> <name4> into default name space .
<name3> <name5> . mime . message <name6> <name4>	<name3> <name5> .mime .message <name6> <name4> into default name space .
<name6> <name2> . header <name4> <name5>	<name6> <name2> .header <name4> <name5> into default name space .
<name1> <name5> . utils <name2> <name4> , <name3> , <name6> , <name1>	<name1> <name5> .utils <name2> <name4> , <name3> , <name6> and <name1> into default name space .
<name4> <name6> . conf <name2> <name3>	<name4> <name6> .conf <name2> <name3> into default name space .
<name6> <name5> . core . mail . utils <name1> <name3>	<name6> <name5> .core .mail .utils <name1> <name3> into default name space .
<name4> <name3> . utils . encoding <name6> <name5>	<name4> <name3> .utils .encoding <name6> <name5> into default name space .
<name6> <name2> . utils <name4> <name3>	<name6> <name2> .utils <name4> <name3> into default name space .
<name6> = <name4> . <name4> ( <val2>   )	call the function <name4> .Charset with argument string <val2> , substitute the result for <name6> .
<name5> . body_encoding = <name4>	<name5> .body_encoding is <name4> .
<name1> = <val2>	<name1> is a string <val2> .
<name5> <name4> ( <name6> ) :	derive the <name5> <name4> from the <name6> base <name5> .
pass	do nothing .
def <name3> ( <name6> = <name1> ) :	define the function <name3> with argument <name6> set to <name1> .
<name5> = <name2> . <name2> ( )	call the function <name2> .time , substitute the result for <name5> .
<name2> = <name1> . strftime ( <val4>   , <name1> . gmtime ( <name3> ) )	call the function <name1> .gmtime with argument <name3> , use string <val4> and the previous result as an argument for the call to the <name1> .strftime function , substitute the result for <name2> .
<name1> :	<name1> ,
<name3> = <name2> . getpid ( )	call the function <name2> .getpid , substitute it for <name3> .
except <name4> :	if <name4> exception is caught ,
<name4> = <val2>	<name4> is integer <val2> .
<name4> = <name2> . randrange ( <val5> )	call the function <name2> .randrange with argument integer <val5> , substitute the result for <name4> .
<name3> <name2> <name1> <name5> :	<name3> <name2> <name1> <name5> ,
<name5> = ''	<name5> is an empty string .
else :	if not ,
<name6> = <val5>   + <name6>	append <name6> to the <val5> character , substitute it for <name6> .
<name5> = <name3>	substitute <name3> for <name5> .
<name3> = <val5>   % ( <name2> , <name4> , <name1> , <name6> , <name3> )	<name3> is a string <val5> , replace '%s' with <name2> , <name4> , <name1> , <name6> and <name3> , respectively .
<name2> <name1>	<name2> <name1> .
<name6> = <name4> ( [ <val2>   , <val1>   , <val5>   , <val3>   , <val6>   , <val4>   , <val2>   , <val1>   , 'resent-to'   , 'resent-cc'   , 'resent-bcc'   , ] )	<name6> is a <name4> containing strings : <val2> , <val1> , <val5> , <val3> , <val6> , <val4> , <val2> , <val1> ,
def <name3> ( <name2> , <name5> , <name1> ) :	'resent-to' , 'resent-cc' and 'resent-bcc' . define the function <name3> with arguments : <name2> , <name5> and <name1> .
<name6> = <name6> or <name3> . DEFAULT_CHARSET	if <name6> does not exists substitute it for <name3> .DEFAULT_CHARSET .
<name3> = <name1> ( <name3> )	call the function <name1> with argument <name3> , substitute it for <name3> .
\ <name1> <val5>   <name2> <name3> <name4> <val6>   <name2> <name3> : \	\ <name1> characters <val5> <name4> <val6> are contained <name2> <name3> , \
<name5> <name1> ( <val6> % ( val , name ) )	<name5> an <name1> exception with argument string <val6> ,
<name4> :	where '%r' are replaced by val and name , respectively . <name4> ,
<name3> . encode ( <val6>   )	call the method <name3> .encode with argument string <val6> .
except <name4> :	if <name4> exception is caught ,
<name1> <name3> . <name5> ( ) <name6> <name4> :	convert <name3> to <name5> case , <name1> it is contained <name6> <name4> , s
<name4> = <val1>   . <name6> ( <name2> ( <name3> , <name5> ) <name4> <name3> <name1> getaddresses ( ( <name4> , ) ) )	call the function <name2> with arguments <name3> and <name5> , <name4> every <name3> <name1> return value of the getadresses function with tuple containing <name4> as argument , <name6> all the results into a string separated by <val1> , substitute the result <name4> <name4> .
else :	if not ,
<name3> = <name4> ( <name3> , <name2> ) . <name1> ( )	call the <name1> function on the <name4> class instance , created with arguments <name3> and <name2> , substitute the result for <name3> .
else :	if not ,
<name4> <name5> . <name2> ( ) == <val1>   :	<name4> <name5> converted to <name2> case equals to string <val1> ,
<name6> = <name5> ( <name6> ) . <name1> ( )	call the <name1> function on the <name5> class instance , created with argument <name6> , substitute the result for <name6> .
<name6> str ( <name5> ) , <name1>	<name6> <name5> converted to a string and <name1> .
def <name3> ( <name4> , <name1> ) :	define the function <name3> with arguments <name4> and <name1> .
<name2> isinstance ( <name3> , <name5> . string_types ) :	<name2> <name3> is a instance of <name5> .string_types ,
<name6> = <name1> ( <name3> ( <name6> ) )	call the <name1> function with return value of the <name3> with argument <name6> , as argument , substitute the result for <name6> .
<name6> , <name4> = <name4>	<name6> and <name4> are <name4> .
<name3> :	<name3> ,
<name3> = <name4> ( <name3> , <name5> ) . <name6> ( )	call the <name6> function on the <name4> class instance , created with arguments <name3> and <name5> , substitute the result for <name3> .
except <name2> :	if <name2> exception is caught ,
<name2> = <name3> ( <name2> , <val6>   ) . <name1> ( )	call the <name1> function on the <name3> class instance , created with arguments <name2> and string <val6> , substitute the result for <name2> .
<name3> :	<name3> ,
<name5> . encode ( <val2>   )	call the <name5> .encode method with string <val2> as an argument .
except <name3> :	if <name3> exception is caught ,
<name1> <val2>   <name6> <name4> :	<name1> character <val2> is contained <name6> <name4> ,
<name5> , <name3> = <name2> . split ( <val4>   , <val6> )	call the <name2> .split method with character <val4> and integer <val6> as arguments , substitute the result for <name5> and <name3> , respectively .
<name2> = str ( <name5> ( <name2> , <name1> ) )	instantiate <name5> class with <name2> and <name1> , convert it to a string , substitute the result for <name2> .
<name6> = <name6> . encode ( <val1>   ) . <name5> ( <val2>   )	call the <name5> function with argument string <val2> on the return value of the method <name6> .encode with argument string <val1> substitute the result for <name6> .
<name2> = <val5>   . <name3> ( [ <name6> , <name4> ] )	<name3> <name6> and <name4> in a string separated by <val5> character , substitute it for <name2> .
else :	if not ,
<name4> = <name1> ( <name4> , <name6> ) . <name3> ( )	call the <name3> function on the <name1> class instance , created with arguments <name4> and <name6> , substitute the result for <name4> .
return <name4> ( ( <name5> , <name6> ) )	call the <name4> function with argument tuple containing 2 elements <name5> and <name6> .
<name4> <name6> ( ) :	derive the <name4> <name6> .
def <name2> ( <name5> , <name3> = <name4> ) :	define the method <name2> with arguments <name5> and <name3> set to boolean <name4> .
<name3> = <name2> . StringIO ( )	<name3> is a instance of a class <name2> .StringIO .
<name4> = <name3> . Generator ( <name6> , <name5> = <name2> )	<name4> is an instance of a class <name3> .Generator called with <name6> and <name5> set to <name2> .
<name2> . flatten ( <name6> , <name5> = <name5> )	call the method <name2> .flatten with arguments <name6> and <name5> set to <name5> .
<name5> <name3> . getvalue ( )	call the method <name3> .getvalue , <name5> the result .
<name6> <name1> . PY2 :	<name6> <name1> .PY2 is boolean True ,
<name3> = <name4>	substitute <name4> for <name3> .
else :	if not ,
def <name6> ( <name4> , <name3> = <name5> ) :	define the method <name6> with arguments <name4> and <name3> set to boolean <name5> .
<name3> = <name2> . BytesIO ( )	<name3> is a instance of a class <name2> .BytesIO .
<name6> = <name4> . BytesGenerator ( <name3> , <name2> = <name5> )	<name6> is an instance of a class <name4> .BytesGenerator called with <name3> and <name2> set to <name5> .
<name4> . flatten ( <name2> , <name6> = <name6> )	call the method <name4> .flatten with arguments <name2> and <name6> set to <name6> .
<name1> <name2> . getvalue ( )	call the method <name2> .getvalue , <name1> the result .
<name1> <name6> ( <name5> , <name4> ) :	derive the <name1> <name6> from the <name5> and <name4> base <name1> .
def <name4> ( <name3> , <name5> , <name6> ) :	define the method <name4> with arguments <name3> , <name5> and <name6> .
<name3> , <name2> = <name1> ( <name3> , <name2> , <val6>   )	call the function <name1> with 3 arguments : <name3> , <name2> and string <val6> , substitute the result for <name3> and <name2> , respectively .
<name2> . __setitem__ ( <name1> , <name5> , <name6> )	call the method <name2> .__setitem__ with arguments <name1> , <name5> and <name6> .
<name2> <name6> ( <name1> , <name3> ) :	derive the <name2> <name6> from the <name1> and <name3> base <name2> .
def <name2> ( <name6> , <name1> , <name4> , <name5> ) :	define the <name2> method with arguments : <name6> , <name1> , <name4> and <name5> .
<name2> . encoding = <name4>	substitute <name4> for <name2> .encoding .
<name1> <name4> == <val2>   :	<name1> <name4> equals to string <val2> ,
<name2> . __init__ ( <name1> , <name5> , <name6> , <name3> )	call the method <name2> .__init__ with 4 arguments : <name1> , <name5> , <name6> and <name3> .
del <name3> [ <val2>   ]	delete the value under the <val2> key of <name3> dictionary .
<name4> ( <val5> , <val1> ) <  <name6> . version_info <  ( <val5> , <val5> , <val2> ) :	<name4> integers <val5> and <val1> in a tuple are smaller than the <name6> .version_info and <name6> .version_info is smaller than integers <val5> , <val2> and <val2> in a tuple , respectively ,
<name1> = <name6> . encode ( <name4> . output_charset )	call the method <name6> .encode with argument <name4> .output_charset , substitute the result for <name1> .
<name6> . _payload = <name2> . decode ( <val3>   , <val4>   )	call the method <name2> .decode with 2 arguments : string <val3> and string <val4> , substitute the result for <name6> ._payload .
<name1> . set_charset ( <name5> )	call the method <name1> .set_charset with <name5> as an argument .
else :	if not ,
<name1> . set_payload ( <name6> , <name5> )	call the method payload .decode with 2 arguments : <name6> and <name5> , substitute the result for <name1> ._payload .
<name4> . replace_header ( <val3>   , <val5>   % ( subtype , charset ) )	call the method <name4> .replace_header with argument string <val3> , <val5> , where '%s' symbols are replaced by :
else :	subtype and charset , respectively . if not ,
<name1> . __init__ ( <name5> , <name4> , <name3> , <name2> )	call the method <name1> .__init__ with 4 arguments : <name5> , <name4> , <name3> and <name2> .
def <name4> ( <name2> , <name5> , <name6> ) :	define the method <name4> with arguments <name2> , <name5> and <name6> .
<name6> , <name4> = <name3> ( <name6> , <name4> , <name1> . encoding )	call the function <name3> with 3 arguments : <name6> , <name4> and <name1> .encoding , substitute the result for <name6> and <name4> , respectively .
<name3> . __setitem__ ( <name6> , <name2> , <name5> )	call the method <name3> .__setitem__ with arguments <name6> , <name2> and <name5> .
<name2> <name1> ( <name6> , <name5> ) :	derive the <name2> <name1> from the <name6> and <name5> base <name2> .
def <name1> ( <name6> , <name2> = <val3>   , <name5> = <name4> , <name1> = <name4> , encoding = <name4> , ** _params ) :	define the method <name1> with 6 arguments : <name6> , <name2> set to string <val3> , <name5> set to <name4> , <name1> set to <name4> ,
<name4> . <name2> = <name2>	<name2> set to None and unpacked dictionary _params . substitute <name2> for <name4> .encoding .
<name5> . __init__ ( <name3> , <name6> , <name4> , <name1> , ** <name2> )	call the method <name5> .__init__ with 5 arguments : <name3> , <name6> , <name4> , <name1> and unpacked dictionary <name2> .
def <name2> ( <name1> , <name4> , <name5> ) :	define the method <name2> with arguments <name1> , <name4> and <name5> .
<name3> , <name1> = <name6> ( <name3> , <name1> , <name5> . encoding )	call the function <name6> with 3 arguments : <name3> , <name1> and <name5> .encoding , substitute the result for <name3> and <name1> , respectively .
<name3> . __setitem__ ( <name1> , <name2> , <name5> )	call the method <name3> .__setitem__ with arguments <name1> , <name2> and <name5> .
<name5> <name4> ( <name1> ) :	derive the <name5> <name4> from the <name1> base <name5> .
<name2> = <val4>	<name2> is a string <val4> .
<name4> = <val1>	<name4> is a string <val1> .
<name3> = <name2>	<name3> is <name2> .
def <name5> ( <name2> , <name3> = ''   , <name1> = ''   , from_email = None , <name6> = None , bcc = None , connection = None , attachments = None , headers = None , cc = None ) :	define the method <name5> with 10 arguments : <name2> , <name3> set <name6> an empty string , <name1> set <name6> an empty string ,
<name6> <name3> :	<name6> <name3> is true ,
<name2> . <name3> = <name1> ( <name3> )	put <name3> into a <name1> , assign it <name3> <name2> .to .
else :	if not ,
<name5> . to = [ ]	<name5> .to is an empty list .
<name4> <name6> :	<name4> <name6> is true ,
<name4> . <name1> = <name5> ( <name1> )	put <name1> into a <name5> , assign it to <name4> .cc .
else :	if not ,
<name5> . cc = [ ]	<name5> .cc is an empty list .
<name3> <name2> :	<name3> <name2> is true ,
<name3> . <name1> = <name5> ( <name1> )	put <name1> into a <name5> , assign it to <name3> .bcc .
else :	if not ,
<name4> . bcc = [ ]	<name4> .bcc is an empty list .
<name6> . <name4> = <name4> or <name1> . DEFAULT_FROM_EMAIL	if <name4> exists substitute <name4> for <name6> .from_email , if not substitute <name1> .DEFAULT_FROM_EMAIL for <name6> .from_email .
<name6> . <name1> = <name1>	substitute <name1> for <name6> .subject .
<name6> . <name2> = <name2>	substitute <name2> for <name6> .body .
<name5> . <name4> = <name4> or [ ]	if <name4> exists substitute it for <name5> .attachments , if not <name4> is an empty list .
<name6> . <name4> = <name1> or { }	if <name1> exists substitute it for <name6> .extra_headers , if not <name4> is an empty dictionary .
<name1> . <name6> = <name6>	substitute <name6> for <name1> .connection .
def <name5> ( <name3> , <name1> = <name2> ) :	define the method <name5> with arguments <name3> and <name1> set to boolean <name2> .
<name3> <name2> . core . mail <name5> <name6>	<name3> <name2> .core .mail <name5> <name6> into default name space .
<name2> not <name4> . connection :	<name2> <name4> .connection is false ,
<name3> . connection = <name1> ( <name4> = <name4> )	call the function <name1> with argument <name4> set to <name4> , substitute it for <name3> .connection .
<name5> <name2> . connection	<name5> <name2> .connection .
def <name4> ( <name5> ) :	define the method <name4> with argument <name5> .
<name2> = <name5> . <name2> or <name4> . DEFAULT_CHARSET	if <name5> .encoding exists substitute it for <name2> , if not substitute <name4> .DEFAULT_CHARSET for <name2> .
<name5> = <name4> ( <name2> . body , <name2> . content_subtype , <name1> )	<name5> is a instance of a <name4> class created with arguments : <name2> .body , <name2> .content_subtype and <name1> .
<name1> = <name4> . _create_message ( <name1> )	call the <name4> ._create_message method with argument <name1> , substitute it for <name1> .
<name3> [ <val1>   ] = <name5> . subject	substitute <name5> .subject for value under the <val1> key of <name3> dictionary .
<name3> [ <val2>   ] = <name4> . extra_headers . get ( <val2>   , <name4> . from_email )	call the method <name4> .extra_headers .get with string <val2> and <name4> .from_email as arguments , substitute the result for value under the <val2> key of <name3> dictionary .
msg [ <val5>   ] = <name6> . extra_headers . get ( <val5>   , <val2>   . join ( <name6> . to ) )	call the method <name6> .extra_headers .get with arguments : string <val5> and joined string from <name6> .to elements separated by <val2> ,
<name5> <name2> . cc :	substitute the result for value under the 'To' key of msg dictionary . <name5> <name2> .cc is true ,
<name1> [ <val3>   ] = <val5>   . <name2> ( <name4> . cc )	<name2> elements of <name4> .cc into a string separated by <val5> , substitute the result for value under the <val3> key of <name1> dictionary .
<name1> = [ <name3> . lower ( ) <name4> <name3> <name6> <name5> . extra_headers ]	call the <name3> .lower method <name4> every <name3> <name6> <name5> .extra_headers , join the results into a <name1> .
<name1> <val3>   <name2> <name6> <name5> :	<name1> <val3> is <name2> <name6> <name5> ,
<name2> [ <val1>   ] = <name4> ( )	call the <name4> function , substitute it for value under the <val1> key of <name2> dictionary .
<name1> 'message-id'   <name5> <name3> <name2> :	<name1> message - id '  is <name5> <name3> <name2> ,
<name6> [ <val1>   ] = <name2> ( )	call the <name2> function , substitute it for value under the <val1> key of <name6> dictionary .
<name6> <name4> , <name1> <name2> <name5> . extra_headers . items ( ) :	<name6> every <name4> and <name1> <name2> return <name1> of the method <name5> .extra_headers .items ,
<name6> <name2> . <name5> ( ) in ( <val1>   , 'to'   ) :	convert <name2> to <name5> case <name6> it equals to string <val1> or ' to ,
continue	skip this loop execution ,
<name2> [ <name6> ] = <name3>	substitute <name3> for <name3> under <name6> key of <name2> dictionary .
<name3> <name4>	<name3> <name4> .
def <name6> ( <name2> ) :	define the method <name6> with argument <name2> .
<name2> <name4> . to + <name4> . cc + <name4> . bcc	add together <name4> .to , <name4> .cc and <name4> .bcc , <name2> the result .
def <name3> ( <name5> , <name4> = <name1> ) :	define the method <name3> with arguments <name5> and <name4> set to boolean <name1> .
<name5> not <name1> . recipients ( ) :	call the method <name1> .recipients , <name5> it evaluates to false ,
<name4> <val5>	<name4> an integer <val5> .
<name2> <name4> . get_connection ( <name3> ) . <name5> ( [ <name4> ] )	call the method <name4> .get_connection with argument <name3> , on the result call the method <name5> with one argument : list containing <name4> , <name2> the result .
def <name2> ( <name6> , <name3> = <name1> , <name4> = <name1> , <name5> = <name1> ) :	define the method <name2> with 4 arguments : <name6> , <name3> set to <name1> , <name4> set to <name1> and <name5> set to <name1> .
<name1> isinstance ( <name5> , <name4> ) :	<name1> <name5> is an instance of <name4> ,
assert <name1> <name4> <name5>	if <name1> <name4> not <name5> raise an error .
assert <name3> <name4> <name2>	if <name3> <name4> not <name2> raise an error .
<name5> . attachments . <name1> ( <name2> )	<name1> <name2> to the <name5> .attachments list .
else :	if not ,
assert <name4> <name6> <name2> <name5>	if <name4> <name6> <name2> <name5> raise an error .
<name1> . attachments . <name4> ( ( <name6> , <name2> , <name3> ) )	<name4> a tuple containing 3 elements : <name6> , <name2> , <name3> to <name1> .attachments list .
def <name5> ( <name3> , <name2> , <name4> = <name6> ) :	define the method <name5> with arguments <name3> , <name2> and <name4> set to <name6> .
<name5> = <name1> . <name6> . basename ( <name6> )	call the <name1> .path .basename with <name6> as argument , substitute the result for <name5> .
<name3> <name4> ( <name1> , <val2>   ) <name5> <name6> :	<name4> file named <name1> in <val2> mode , <name3> file descriptor <name5> <name6> ,
<name2> = <name1> . <name5> ( )	<name5> the whole file <name1> , substitute the result for <name2> .
<name2> . attach ( <name5> , <name4> , <name1> )	call the method <name2> .attach with arguments <name5> , <name4> and <name1> .
def <name4> ( <name3> , <name6> ) :	define the method <name4> with arguments <name3> and <name6> .
<name3> <name5> . _create_attachments ( <name4> )	call the method <name5> ._create_attachments with argument <name4> , <name3> the result .
def <name1> ( <name3> , <name2> ) :	define the method <name1> with arguments <name3> and <name2> .
<name4> <name5> . attachments :	<name4> <name5> .attachments is true ,
<name5> = <name3> . <name5> or <name1> . DEFAULT_CHARSET	if <name3> .encoding exists substitute it for <name5> , if not substitute <name1> .DEFAULT_CHARSET for <name5> .
<name5> = <name6>	substitute <name6> for <name5> .
<name2> = <name5> ( <name3> = <name6> . mixed_subtype , <name4> = <name4> )	<name2> is an instance of a class <name5> , created with arguments : <name3> set to <name6> .mixed_subtype and <name4> set to <name4> .
<name6> <name3> . body :	<name6> <name3> .body is true ,
<name2> . attach ( <name4> )	call the method <name2> .attach with an argument <name4> .
<name1> <name2> <name4> <name3> . attachments :	<name1> every <name2> <name4> <name3> .attachments ,
<name3> isinstance ( <name5> , <name1> ) :	<name3> <name5> is an instance of <name1> ,
<name4> . attach ( <name5> )	call the method <name4> .attach with an argument <name5> .
else :	if not ,
<name5> . attach ( <name3> . _create_attachment ( * <name6> ) )	call the method <name3> ._create_attachment with an unpacked list <name6> as an argument , use the result as an argument for the call to the <name5> .attach method .
<name3> <name1>	<name3> <name1> .
def <name1> ( <name2> , <name4> , <name6> ) :	define the method <name1> with arguments <name2> , <name4> and <name6> .
<name4> , <name1> = <name6> . split ( <val5>   , <val2> )	call the method <name6> .split with arguments : character <val5> and integer <val2> , substitute the result for <name4> and <name1> , respectively .
<name5> <name1> == <val6>   :	<name5> <name1> equals a string <val6> ,
<name2> = <name4> . <name2> or <name6> . DEFAULT_CHARSET	if <name4> .encoding exists substitute it for <name2> , if not substitute <name6> .DEFAULT_CHARSET for <name2> .
<name6> = <name3> ( <name4> , <name1> , <name2> )	<name6> is an instance of a class <name3> , created with arguments : <name4> , <name1> and <name2> .
elif <name4> == <val2>   <name3> <name6> == <val5>   :	otherwise if <name4> equals a string <val2> <name3> <name6> equals a string <val5> ,
<name3> isinstance ( <name2> , <name6> ) :	<name3> <name2> is an instance of a <name6> class ,
<name3> = <name3> . message ( )	call the method <name3> .message , substitute the result for <name3> .
elif <name1> isinstance ( <name2> , <name5> ) :	otherwise if <name2> is <name1> an instance of <name5> class ,
<name1> = <name2> ( <name1> )	call the <name2> function with an argument <name1> , substitute the result for <name1> .
<name4> = <name1> ( <name5> , <name3> )	<name4> is an instance of a class <name1> , created with the arguments <name5> and <name3> .
else :	if not ,
<name6> = <name3> ( <name2> , <name5> )	<name6> is an instance of a class <name3> , created with the arguments <name2> and <name5> .
<name3> . set_payload ( <name1> )	call the method <name3> .set_payload with an argument <name1> .
<name2> . encode_base64 ( <name3> )	call the method <name2> .encode_base64 with an argument <name3> .
<name1> <name5>	<name1> <name5> .
def <name5> ( <name3> , <name1> , <name4> , <name6> = <name2> ) :	define the method <name5> with 4 arguments : <name3> , <name1> , <name4> and <name6> set to <name2> .
<name2> <name4> <name3> <name5> :	<name2> <name4> <name3> <name5> ,
<name4> , <name6> = <name2> . guess_type ( <name1> )	call the <name2> .guess_type with an argument <name1> , assign the result to the <name4> and <name6> , respectively .
<name3> <name5> <name4> <name6> :	<name3> <name5> <name4> <name6> ,
<name5> = <name4>	substitute <name4> for <name5> .
<name2> = <name4> . _create_mime_attachment ( <name3> , <name5> )	call the method <name4> ._create_mime_attachment with the arguments <name3> and <name5> , substitute the result for <name2> .
<name4> <name3> :	<name4> <name3> is true ,
<name4> :	<name4> ,
<name4> . encode ( <val1>   )	call the method <name4> .encode with an argument string <val1>
except <name1> :	if <name1> exception is caught ,
<name4> <name6> . PY2 :	<name4> <name6> .PY2 is true ,
<name5> = <name5> . encode ( <val3>   )	call the method <name5> .encode with an argument string <val3> , substitute the result for <name5> .
<name5> = ( <val1>   , ''   , <name5> )	<name5> is a tuple containing 3 initial elements : string <val1> , and empty string and <name5> .
<name6> . add_header ( <val4>   , <val5>   , <name3> = <name3> )	call the method <name6> .add_header with 3 arguments : string <val4> , string <val5> and <name3> set to <name3> .
<name2> <name1>	<name2> <name1> .
<name1> <name5> ( <name3> ) :	derive the <name1> <name5> from the <name3> base <name1> .
<name1> = <val2>	<name1> is a string <val2> .
def <name4> ( <name5> , <name2> = ''   , <name6> = ''   , from_email = None , <name3> = None , bcc = None , connection = None , attachments = None , headers = None , alternatives = None , cc = None ) :	define the method <name4> with 11 arguments : <name5> , <name2> set <name3> an empty string , <name6> set <name3> an empty string ,
super ( <name6> , self ) . <name4> ( <name2> , <name1> , <name3> , <name5> , bcc , connection , attachments , headers , cc )	call the method <name4> from the base class of the <name6> class , with 9 arguments : <name2> , <name1> , <name3> , <name5> ,
<name5> . <name3> = <name3> or [ ]	bcc , connection , attachments , headers and cc . if <name3> exists substitute it for <name5> .alternatives , if not <name5> .alternatives is an empty list .
def <name3> ( <name5> , <name1> , <name6> ) :	define the method <name3> with arguments <name5> , <name1> and <name6> .
assert <name4> <name6> not <name2>	if <name4> <name6> <name2> , raise an error .
assert <name3> <name1> not <name6>	if <name3> <name1> <name6> , raise an error .
<name4> . alternatives . <name1> ( ( <name6> , <name2> ) )	<name1> a tuple containing 2 elements : <name6> and <name2> , to the <name4> .alternatives list .
def <name2> ( <name3> , <name5> ) :	define the method <name2> with arguments <name3> and <name5> .
<name4> <name1> . _create_attachments ( <name1> . _create_alternatives ( <name3> ) )	call the method <name1> ._create_alternatives with an argument <name3> , use it as an argument for the call to the <name1> ._create_attachments method , <name4> the result .
def <name1> ( <name3> , <name6> ) :	define the method <name1> with arguments <name3> and <name6> .
<name3> = <name2> . <name3> or <name5> . DEFAULT_CHARSET	if <name2> .encoding exists substitute it for <name3> , if not substitute <name5> .DEFAULT_CHARSET for <name3> .
<name4> <name5> . alternatives :	<name4> <name5> .alternatives is true ,
<name1> = <name3>	substitute <name3> for <name1> .
<name2> = <name4> ( <name1> = <name5> . alternative_subtype , <name6> = <name6> )	<name2> is an instance of a class <name4> , created with the arguments : <name1> set to <name5> .alternative_subtype and <name6> set to <name6> .
<name6> <name2> . body :	<name6> <name2> .body is true ,
<name5> . attach ( <name2> )	call the <name5> .attach with an argument <name2> .
<name6> <name5> <name4> <name1> . alternatives :	<name6> every <name5> <name4> <name1> .alternatives ,
<name5> . attach ( <name2> . _create_mime_attachment ( * <name6> ) )	call the method <name2> ._create_mime_attachment with unpacked list <name6> as an argument , use the result as an argument for the call to the <name5> .attach method .
<name6> <name3>	<name6> <name3> .
<name5> <name1>	<name5> module <name1> .
<name4> <name3> ( <name5> ) :	derive <name4> <name3> from the <name5> base <name4> .
def <name1> ( <name3> ) :	define the method <name1> with argument <name3> .
<name1> <name4> . get_fqdn ( )	evaluate the <name4> .get_fqdn method , <name1> the result .
def <name6> ( <name3> ) :	define the method <name6> with argument <name3> .
<name1> not hasattr ( <name4> , <val5>   ) :	<name1> <name4> doesnt have an attribute <val5> ,
<name6> . _fqdn = <name3> . getfqdn ( )	call the function <name3> .getfqdn , substitute the result for <name6> ._fqdn .
<name4> <name1> . _fqdn	<name4> <name1> ._fqdn .
<name1> = <name2> ( )	<name1> is a instance of <name2> class .
<name2> <name1> <name4> <name3>	<name2> <name1> <name4> <name3> into default name space .
<name6> <name2>	<name6> module <name2> .
<name6> <name5> <name4> <name2>	<name6> <name5> <name4> <name2> into default name space .
<name1> <name3>	<name1> module <name3> .
<name1> <name4>	<name1> module <name4> .
<name3> <name6>	<name3> module <name6> .
<name5> <name2> . <name1> <name6> <name1>	<name5> <name2> .apps <name6> <name1> into default name space .
<name4> <name6> . conf <name1> <name2>	<name4> <name6> .conf <name1> <name2> into default name space .
<name4> <name3> . core . exceptions <name5> <name2>	<name4> <name3> .core .exceptions <name5> <name2> into default name space .
<name2> <name6> . core . management . base <name3> ( <name5> , <name1> , <name4> , <name2> )	<name2> <name6> .core .management .base <name3> <name5> , <name1> , <name4> and <name2> into default name space .
<name1> <name3> . core . management . color <name4> <name6>	<name1> <name3> .core .management .color <name4> <name6> into default name space .
<name2> <name4> . utils <name6> <name3>	<name2> <name4> .utils <name6> <name3> into default name space .
<name5> <name4> . utils <name6> <name2>	<name5> <name4> .utils <name6> <name2> into default name space .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name3> = os . <name4> . <name6> ( <name1> , <val5>   )	<name6> <name1> and string <val5> into a file <name4> name , substitute it for <name3> .
<name5> :	<name5> ,
<name5> [ <name2> [ : - <val4> ] <name3> <name2> <name1> <name6> . listdir ( <name5> ) <name2> not <name2> . startswith ( <val4>   ) <name3> <name2> . endswith ( <val1>   ) ]	<name3> every <name2> <name1> <name5> value of the <name6> .listdir function called with an argument <name5> , append <name2> without <val4> last elements to a list , only <name2> <name2> doesnt start with character <val4> <name3> doesnt ends with string <val1> , <name5> the resulting list .
except <name2> :	if <name2> exception is caught ,
<name4> [ ]	<name4> an empty list .
def <name1> ( <name5> , <name2> ) :	define the function <name1> with arguments : <name5> and <name2> .
module = import_module ( <val1>   % ( <name2> , <name6> ) )	replace '%s' in string <val1> with <name2> and <name6> , respectively , use it as an result for the call to the
<name4> <name6> . Command ( )	import_module function , substitute the result for <name6> . <name4> an instance of the <name6> .Command class .
@  <name1> . <name1> ( <name2> = <name4> )	decorator <name1> .lru_cache with an argument <name2> set to <name4> .
def <name2> ( ) :	define the function <name2> .
<name1> = {  <name2> : <val5>   <name6> <name2> <name4> <name3> ( <name1> [ 0 ] ) }	<name1> is an dictionary containing elements : string <val5> <name6> every <name2> <name4> the function <name3> return value , called with first element of <name1> as an argument .
<name6> not <name4> . configured :	<name6> <name4> .configured is false ,
<name2> <name5>	<name2> <name5> .
<name4> <name1> <name3> <name5> ( <name6> ( <name2> . get_app_configs ( ) ) ) :	<name4> every <name1> <name3> <name5> <name6> created out of the return value of the function <name2> .get_app_configs ,
<name1> = os . <name1> . <name3> ( <name2> . <name1> , <val6>   )	<name3> <name2> .path and string <val6> into a file <name1> , substitute it for <name1> .
<name1> . update ( {  <name5> : app_config . <name5> <name6> <name5> <name2> <name4> ( <name3> ) }  )	call the method <name1> .update , with an argument dictionary containing entries : app_config_name <name6> <name5> , <name6> every <name5> <name2> return value of the function <name4> , called with an argument <name3> .
<name4> <name3>	<name4> <name3> .
def <name6> ( <name3> , * <name4> , ** <name5> ) :	define the function <name6> with 3 arguments : <name3> , unpacked list <name4> and unpacked dictionary <name5> .
<name6> :	<name6> ,
<name6> = <name4> ( ) [ <name1> ]	call the function <name4> , substitute the value under the <name1> key of the return value , for <name6> .
except <name2> :	if <name2> exception is caught ,
<name5> <name1> ( <val3> % <name6> )	<name5> an <name1> exception with an argument string <val3> , with '%r' replaced by <name6> .
<name3> isinstance ( <name4> , <name5> ) :	<name3> <name4> is an instance of <name5> ,
<name6> = app_name	substitute app_namefor <name6> .
else :	if not ,
<name6> = <name1> ( <name4> , <name5> )	call the function <name1> with arguments : <name4> and <name5> , substitute the result for <name6> .
<name3> = <name2> . create_parser ( ''   , <name6> )	all the method <name2> .create_parser with arguments : empty and <name6> , substitute the result for <name3> .
<name2> <name4> . use_argparse :	<name2> <name4> .use_argparse is true ,
<name4> = <name3> . parse_args ( <name2> = <name2> )	call the method <name3> .parse_args with an argument <name2> set to <name2> , substitute the result for <name4> .
<name1> = dict ( <name1> . _get_kwargs ( ) , ** <name4> )	create dictionary out of the unpacked dictionary <name4> , using <name1> ._get_kwargs as a mapping function , substitute the result for <name1> .
else :	if not ,
<name2> , <name5> = <name3> . parse_args ( <name1> = [ ] )	call the method <name3> .parse_args with an arguments <name1> set to an empty list , assign the result for <name2> and <name5> , respectively .
<name3> = dict ( <name3> . __dict__ , ** <name1> )	create dictionary out of the unpacked dictionary <name1> , using <name3> .__dict__ as a mapping function , substitute the result for <name3> .
<name4> <name1> . execute ( * <name5> , ** <name3> )	call the <name1> .execute method with arguments : unpacked list <name5> and unpacked dictionary <name3> , <name4> the result .
<name6> <name1> ( <name4> ) :	derive the <name6> <name1> from <name4> base <name6> .
def <name5> ( <name3> , <name4> = <name2> ) :	define the method <name5> with arguments : <name3> class instance and <name4> set to <name2> .
<name4> . <name5> = <name5> or <name3> . <name5> [ : ]	if <name5> is true , substitue it for <name4> .argv , if not substitute <name3> .argv for <name4> .argv .
<name1> . prog_name = <name5> . path . basename ( <name1> . argv [ 0 ] )	call the function <name5> .path .basename with first element of <name1> .argv as an argument , substitute the result for <name1> .prog_name .
<name1> . settings_exception = <name4>	<name1> .settings_exception is <name4> .
def <name3> ( <name5> , <name1> = <name4> ) :	define the method <name3> with arguments : <name5> class instance and <name1> set to boolean <name4> .
<name4> <name5> :	<name4> <name5> is true ,
<name2> = <name5> ( <name4> ( ) . <name1> ( ) )	call the function <name4> , call the method <name1> on the result , substitute <name5> result for <name2> .
else :	if not ,
"<name6> = [ """" , <val3> % self . prog_name , """" , ""Available subcommands:"" , ]"	<name6> is a list containing 4 entries : an empty string , string <val3> ,
commands_dict = <name1> . defaultdict ( <name2> : [ ] )	"where '%s' is replaced with self .prog_name , an empty string and string ""Available subcommands:"" . call the method <name1> .defaultdict with a argument : <name2> function without arguments that returns an empty list ,"
<name2> <name3> , <name5> <name1> <name6> . iteritems ( <name4> ( ) ) :	substitute the result <name2> commands_dict . <name2> every <name3> and <name5> <name1> return value of the function <name6> .iteritems calle with return argument of function <name4> as an arugment ,
<name5> <name2> == <val3>   :	<name5> <name2> equals a string <val3> ,
<name2> = <val6>	<name2> is a string <val6>
else :	if not ,
<name4> = <name4> . rpartition ( <val3>   ) [ - 1 ]	call the method <name4> .rpartition with an argument <val3> , substitute last element of the result for <name4> .
<name3> [ <name2> ] . <name6> ( <name5> )	<name6> <name5> to the value of under the <name2> key of the <name3> .
<name1> = <name2> ( )	call the <name2> function , substitute the result for <name1> .
<name1> <name5> <name4> <name3> ( <name2> . keys ( ) ) :	<name1> every <name5> <name4> <name3> return value of the <name2> .keys function ,
"<name3> . <name4> ( """" )"	<name4> an empty string to <name3> .
<name5> . <name2> ( <name4> . NOTICE ( <val6> % <name1> ) )	call the <name4> .NOTICE method with an argument string <val6> , where '%s' is replaced with <name1> , <name2> the result to <name5> .
<name5> <name4> <name1> <name2> ( <name3> [ <name6> ] ) :	<name5> every <name4> <name1> <name2> value under the <name6> key of the <name3> dictionary ,
<name3> . <name5> ( <val2> % <name6> )	<name5> string <val2> , where '%s' is replaced by <name6> to the <name3> .
<name4> <name2> . settings_exception <name1> <name5> <name3> :	<name4> <name2> .settings_exception <name1> <name5> <name3> ,
"<name2> . <name1> ( <name6> . NOTICE ( ""Note that only Django core commands are listed "" ""as settings are not properly configured (error: %s)."" % <name4> . settings_exception ) )"	"call the method <name6> .NOTICE with an argument string ""Note that only Django core commands are listed as settings are not properly configured (error: %s)."" , where '%s' is replaced by <name4> .settings_exception , <name1> the result to <name2> ."
\ <name2> '\\n'   . <name4> ( <name6> ) \	<name4> <name6> elements in a string separated by newline characters , <name2> it .
def <name1> ( <name3> , <name2> ) :	define the method <name1> , with arguments <name3> and <name2> .
<name6> = <name2> ( )	call the function <name2> , substitute it for <name6> .
<name3> :	<name3> ,
<name4> = <name2> [ <name3> ]	substitute value under the <name3> key of the <name2> dictionary for <name4> .
except <name5> :	if <name5> exception is caught ,
<name6> . INSTALLED_APPS	call <name6> .INSTALLED_APPS .
\ <name6> . stderr . write ( <val5> % ( subcommand , self . prog_name ) ) \	\ call the method <name6> .stderr .write with an argument string <val5> , \
<name6> . exit ( <val2> )	where '%r' is replaced with subcommand and '%s' is replaced with self .prog_name . call the function <name6> .exit with an argument integer <val2> .
<name5> isinstance ( <name1> , BaseCommand ) :	<name5> <name1> is an instance of BaseCommands .
<name6> = <name1>	substitute <name1> for <name6> .
else :	if not ,
<name4> = <name6> ( <name1> , <name5> )	call the function <name6> with arguments <name1> and <name5> , substitute the result for <name4> .
<name6> <name5>	<name6> <name5> .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name6> <val2>   <name4> <name5> <name1> . environ :	<name6> string <val2> is <name4> contained <name5> <name1> .environ ,
<name1>	<name1> nothing .
<name3> = <name4> . environ [ <val2>   ] . split ( ) [ 1 : ]	slit by whitespace the value under the <val2> key of the <name4> .environ dictionary , substitute the result without the first element for <name3> .
<name5> = int ( <name2> . environ [ <val4>   ] )	convert to an integer value under the <val4> key of the <name2> .environ dictionary , substitute it for <name5> .
<name1> :	<name1> ,
<name6> = <name4> [ <name1> - <val5> ]	substitute <name4> element at the <name1> decremented by <val5> index for <name6> .
except <name3> :	if <name3> exception is caugh ,
<name1> = ''	<name1> is an empty string .
<name2> = <name5> ( <name4> ( ) ) + [ <val3>   ]	call the function <name4> , convert the result to a <name5> , append string <val3> to it , substitute it for <name2> .
<name1> = [ ( <val5>   , <name6> ) ]	<name1> is a list containing a tuple with 2 entries : string <val5> and <name6> .
<name6> <name4> == <val1> :	<name6> <name4> equlals a integer <val1> ,
print ( ' '   . join ( sorted ( <name3> ( <name1> <name5> : <name5> . startswith ( curr ) , <name2> ) ) ) )	<name3> all the <name2> element through the <name1> function with an argument <name5> , that evaluates the method <name5> .startswith ,
elif <name3> [ 0 ] <name6> <name4> <name1> <name3> [ 0 ] != <val2>   :	with an argument curr , sort the result <name1> join it <name6> a list separated with blank spaces , print it to the standard output . otherwise if first element of <name3> is contanied <name6> <name4> <name1> is not equal to string <val2> ,
<name4> = <name1> . fetch_command ( <name6> [ 0 ] )	call the method <name1> .fetch_command with first element of <name6> as an argument , substitute it for <name4> .
<name4> <name3> [ 0 ] == <val5>   :	<name4> first element of <name3> equals a string <val5> ,
<name6> <name4> . core . servers . fastcgi <name3> <name1>	<name6> <name4> .core .servers .fastcgi <name3> <name1> into default namespace ,
<name4> += [ ( <name1> , <val2> ) <name5> <name1> <name6> <name3> ]	append tuple containing two entries : <name1> and integer <val2> to <name4> , <name5> every <name1> <name6> <name3> .
elif <name5> [ 0 ] <name3> ( <val6>   , <val2>   , <val4>   , <val1>   , <val5>   , 'sqlindexes'   , 'sqlsequencereset'   , 'test'   ) :	otherwise if first element of <name5> is contanied <name3> tuple with 8 entries : <val6> , <val2> , <val4> , <val1> , <val5> ,
<name2> :	<name2> ,
<name3> = <name4> . get_app_configs ( )	call the method <name4> .get_app_configs , substitute the result for <name3> .
<name4> += [ ( <name5> . label , <val2> ) <name6> <name5> <name1> <name3> ]	append tuple containing two entries : <name5> .label and integer <val2> to <name4> , <name6> every <name5> <name1> <name3> .
except <name2> :	if <name2> exception is caught ,
   pass	do nothing .
<name1> = <name5> . create_parser ( ''   , <name4> [ 0 ] )	call the method <name5> .create_parser with 2 argument an empty string an first element of <name4> , substitute it for <name1> .
<name4> <name6> . use_argparse :	<name4> <name6> .use_argparse is true ,
<name3> += [ ( <name2> ( <name5> . option_strings ) [ 0 ] , <name5> . nargs != 0 ) for <name5> in parser . _actions if <name5> . option_strings ]	append to <name3> a tuple containing 2 entries : firs element of <name2> list of the <name5> .option_strings ,
else :	and evaluated boolean expression s_opt .nargs doesnt equal to integer 0 , for every s_opt in parser ._actions , only if s_opt .option_strings is true , if not ,
<name3> += [ ( <name1> . get_opt_string ( ) , <name1> . nargs ) for <name1> in parser . option_list ]	append to <name3> a tuple containing 2 entries : result of the method <name1> .get_opt_string and <name1> .nargs ,
prev_opts = [ <name1> . split ( '='   ) [ 0 ] <name4> <name1> <name3> <name6> [ <val2> : <name5> - <val2> ] ]	<name4> every s_opt <name3> parser .option_list . <name4> every <name1> <name3> slice of <name6> from the second element to the element at the <name5> decremented by <val2> index ,
<name4> = [ <name2> <name3> <name2> <name1> <name4> <name5> <name2> [ 0 ] <name6> <name1> <name4> ]	split x by character '=' and append first element of the result to the <name4> list . <name3> every <name2> <name1> <name4> , <name5> first element of <name2> is <name6> contained <name1> <name4> , append <name2> to the list , substitute it <name3> <name4> .
<name6> = sorted ( ( <name3> , <name2> ) <name1> <name3> , <name2> <name5> <name6> <name4> <name3> . startswith ( <name6> ) )	append tuple containing 2 elements : <name3> and <name2> to a list , <name1> every <name3> and <name2> <name5> <name6> , only <name4> <name3> starts with <name6> ,
<name1> <name2> <name5> <name4> :	sort the result and substitute it <name1> <name4> . <name1> every <name2> <name5> <name4> ,
<name5> = option [ 0 ]	substitute first element of options for <name5> .
<name2> option [ 1 ] :	<name2> second element of options is true ,
<name4> += <val5>	append <val5> to <name4> .
<name3> ( <name4> )	<name3> <name4> to the standard output .
<name1> . exit ( <val5> )	call the function <name1> .exit with an integer <val5> as an argument .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> ,
<name5> :	<name5> ,
<name1> = <name3> . argv [ 1 ]	substitute first element of <name3> .argv for <name1> .
except <name6> :	if <name6> exception is caught ,
<name4> = <val1>	<name4> is a string <val1> .
<name5> = <name4> ( <name3> , <name2> = <val6> , <name1> = <name5> )	<name5> is an instance of <name4> class , created with 3 arguments , <name3> , <name2> as a string <val6> and <name1> set to boolean <name5> .
<name3> . add_argument ( <val6>   )	call the method <name3> .add_argument with an argument string <val6> .
<name2> . add_argument ( <val3>   )	call the method <name2> .add_argument with an argument string <val3> .
<name4> . add_argument ( <val6>   , <name2> = <val1>   )	call the method <name4> .add_argument with arguments : string <val6> and <name2> set to <val1> .
<name5> :	<name5> ,
<name4> , args = <name5> . parse_known_args ( <name3> . argv [ 2 : ] )	call the method <name5> .parse_known_args wiht an argument <name3> .argv , without the first two elements , assign the result for <name4> ,
<name4> ( <name3> )	and args , respectively . call the method <name4> with an argument <name3> .
except <name6> :	if <name6> exception is caught ,
pass	do nothing .
<name6> = [ <val3>   , <val2>   , <val5>   , <val1>   , <val4>   , <val6>   , <val3>   , 'startapp'   , 'startproject'   , ]	<name6> is a list containing entries : <val3> , <val2> , <val5> , <val1> , <val4> , <val6> , <val3> ,
<name4> :	'startapp' and 'startproject' . <name4> ,
<name1> . INSTALLED_APPS	call the <name1> .INSTALLED_APPS .
except <name3> as <name4> :	if <name3> renamed to <name4> , exception is caught ,
<name4> . settings_exception = <name2>	substitute <name2> for <name4> .settings_exception ,
<name2> <name1> <name6> <name3> :	<name2> <name1> is contained <name6> <name3> ,
<name2> . configure ( )	call the method <name2> .configure .
<name4> <name1> . configured :	<name4> <name1> .configured is true ,
<name5> . setup ( )	call the method <name5> .setup .
<name2> . autocomplete ( )	call the method <name2> .autocomplete .
<name2> <name1> == <val4>   :	<name2> <name1> equals to a string <val4> .
<name6> <val5>   <name4> <name2> :	<name6> string <val5> is contained <name4> <name2> ,
\ <name2> . stdout . <name3> ( <name6> . main_help_text ( <name1> = <name4> ) + '\\n'   ) \	call the method <name6> .main_help_text with an argument <name1> set to boolean <name4> , append new line to it , <name3> it to <name2> .stdout .
elif len ( <name6> . args ) <  <val5> :	otherwise , length of <name6> .args is lesser than integer <val5> ,
\ <name2> . stdout . <name5> ( <name3> . main_help_text ( ) + '\\n'   ) \	call the method <name3> .main_help_text append new line to it , <name5> it to <name2> .stdout .
else :	if not ,
<name6> . fetch_command ( <name3> . args [ 0 ] ) . <name5> ( <name6> . prog_name , <name3> . args [ 0 ] )	call the method <name6> .fetch_command with first element of <name3> .args as argument , on the result call the method <name5> ,
elif <name6> == <val2>   <name4> <name3> . argv [ 1 : ] == [ <val1>   ] :	with 2 arguments : <name3> .prog_name and first element of options .args . otherwise if <name6> equals a string <val2> <name4> <name3> .argv , without the first element equals a list containing a string <val1>
\ <name2> . stdout . <name3> ( <name4> . get_version ( ) + '\\n'   ) \	call the method <name4> .get_version append new line to it , <name3> it to <name2> .stdout .
elif <name1> . argv [ 1 : ] <name5> ( [ <val6>   ] , [ '-h'   ] ) :	if <name1> .argv , without the first element is contained <name5> a tuple with 2 entries : a list containing a string <val6> ,
\ <name4> . stdout . <name5> ( <name6> . main_help_text ( ) + '\\n'   ) \	and a list containing a string '-h' , call the method <name6> .main_help_text , append new line to it , <name5> it to <name4> .stdout .
else :	if not ,
<name5> . fetch_command ( subcommand ) . <name1> ( <name5> . argv )	call the method <name5> .fetch_command with an argument command , call the method <name1> on the result with an argument <name5> .argv .
def <name4> ( <name6> = <name1> ) :	define the function <name4> with an argument <name6> set to <name1> .
<name3> = <name6> ( <name5> )	<name3> is a instance of <name6> class , created with an argument <name5> .
<name4> . execute ( )	call the method <name4> .execute .
<name3> <name2> <name5> <name6>	<name3> <name2> <name5> <name6> into default name space .
<name3> <name4>	<name3> module <name4> .
<name3> <name4>	<name3> module <name4> .
<name2> <name5>	<name2> module <name5> .
<name1> <name4> <name2> <name5>	<name1> <name4> <name2> <name5> into default name space .
<name6> <name4> <name5> <name3>	<name6> <name4> <name5> <name3> into default name space .
<name1> <name4>	<name1> module <name4> .
<name1> <name4> . core <name3> <name6>	<name1> <name4> .core <name3> <name6> into default name space .
<name3> <name4> . core . exceptions <name6> <name5>	<name3> <name4> .core .exceptions <name6> <name5> into default name space .
<name2> <name6> . core . management . color <name4> <name5> , <name3>	<name2> <name6> .core .management .color <name4> <name5> and <name3> into default name space .
<name6> <name5> . utils . deprecation <name4> <name2> , <name1>	<name6> <name5> .utils .deprecation <name4> <name2> and <name1> into default name space .
<name3> <name2> . utils . encoding <name5> force_str	<name3> <name2> .utils .encoding <name5> force_st into default name space .
<name4> <name5> ( <name3> ) :	derive the <name4> <name5> from the base <name4> <name3> .
pass	do nothing .
<name6> <name2> ( <name5> ) :	derive the <name2> <name6> from the <name5> base <name6> .
def <name4> ( <name5> , <name1> , ** <name6> ) :	define the method <name4> with arguments : <name5> , <name1> and unpacked dictionary <name6> .
<name6> . <name4> = <name4>	substitute <name4> for <name6> .cmd .
super ( <name2> , self ) . <name4> ( ** <name6> )	call the method <name4> from the base class of the <name2> class , with unpacked dictionary <name6> as argument .
def <name3> ( <name2> , <name4> = <name6> , <name5> = <name6> ) :	define the method <name3> with 3 arguments : <name2> , <name4> set to <name6> and <name5> set to <name6> .
<name2> ( hasattr ( <name1> . cmd , <val5>   ) <name4> <name6> ( <name3> <name2> <name1> ( [ <name6> <name5> . startswith ( <val4>   ) <name6> <name5> <name3> <name3> ] ) ) ) :	<name2> <name1> .cmd has an attribute <val5> <name4> next statement is <name6> true : <name3> is true <name2> <name1> <name5> doesnt start with <val4> <name6> <name5> <name3> <name3> ,
<name4> . error ( <name4> . cmd . missing_args_message )	call the method <name4> .error with an argument <name4> .cmd .missing_args_message .
return super ( <name6> , self ) . <name5> ( <name3> , <name2> )	call the <name5> method with arguments <name3> and <name2> , from the base class of the <name6> class .
def <name3> ( <name6> , <name4> ) :	define the method <name3> with arguments <name6> and <name4> .
<name5> <name1> . cmd . _called_from_command_line :	<name5> <name1> .cmd ._called_from_command_line is true ,
super ( <name4> , self ) . <name3> ( <name2> )	call the method <name3> with an argument <name2> , from the base class of the class <name4> .
else :	if not ,
<name2> <name6> ( <val1> % <name5> )	<name2> an <name6> exception with an argument string <val1> , with '%s' replaced by <name5> .
def <name3> ( <name4> ) :	define the function <name3> with an argument <name4> .
<name3> <name4> . settings :	<name3> <name4> .settings is true ,
<name1> . environ [ <val3>   ] = <name4> . settings	substitute <name4> .settings for value under the <val3> key of the <name1> .environ dictionary .
<name6> <name2> . pythonpath :	<name6> <name2> .pythonpath is true ,
<name4> . path . <name2> ( 0 , <name5> . pythonpath )	<name2> <name5> .pythonpath at the beginning of <name4> .path .
<name5> <name3> ( <name4> ) :	derive the <name3> <name5> from the <name4> base <name5> .
\ def <name1> ( <name2> , <name4> , style_func = <name6> , ending = '\\n'   ) : \	define the method <name1> with 4 arguments : <name2> , <name4> , style , func set to <name6> and endings set to newline character .
<name3> . _out = <name2>	substitute <name2> for <name3> ._out .
<name6> . style_func = <name5>	substitute <name5> for <name6> .style_func .
<name1> hasattr ( <name2> , <val6>   ) <name4> <name2> . isatty ( ) :	<name1> <name2> has an <val6> argument <name4> return value of the function <name2> .isatty is true ,
<name2> . <name6> = <name6>	substitute <name6> for <name2> .style_func .
<name5> . <name6> = <name6>	substitute <name6> for <name5> .ending .
def <name4> ( <name1> , <name3> ) :	define the method <name4> with arguments <name1> and <name3> .
<name3> getattr ( <name1> . _out , <name4> )	get <name4> attribute of the <name1> ._out object , <name3> it .
def <name6> ( <name5> , <name1> , <name3> = <name4> , <name2> = <name4> ) :	define the method <name6> with 4 arguments : <name5> , <name1> , <name3> with <name4> and <name2> set <name4> .
<name5> = <name3> . <name5> <name2> <name5> <name1> <name6> else <name5>	<name2> <name5> <name1> <name6> substitute <name3> .ending for <name5> .
<name1> <name3> <name5> not <name6> . endswith ( <name3> ) :	<name1> <name3> is true <name5> <name6> doesnt end with <name3> ,
<name6> += <name1>	append <name1> to <name6> .
<name6> = [ <name3> <name2> <name3> <name4> ( <name6> , <name1> . <name6> , lambda x : x ) <name5> <name3> <name6> <name3> <name2> ] [ 0 ]	<name5> <name3> <name6> <name3> <name2> append it to a list <name2> every <name3> <name4> tuple containing 3 elements : <name6> , <name1> .style_func ,
self . _out . write ( <name5> ( <name4> ( <name6> ) ) )	and lambda function returning x for x , substitute the firs element of resulting list for <name4> . call the function <name4> with an argument <name6> , use the result as an argument for the call to the function <name5> ,
<name6> <name3> ( <name5> ) :	use the result as an argument for the call to the function self ._out .write . derive the <name3> <name6> from the <name5> base <name6> .
option_list = ( )	options_list is an empty tuple .
<name4> = ''	<name4> is an empty string .
<name1> = ''	<name1> is an empty string .
<name4> = <name1>	<name4> is boolean <name1> .
<name5> = <name4>	<name5> is boolean <name4> .
<name1> = <name2>	<name1> is boolean <name2> .
<name1> = <name3>	<name1> is boolean <name3> .
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name4> . style = <name1> ( )	call the function <name1> , substitute the result for <name4> .style .
<name3> = hasattr ( <name5> , <val1>   )	if <name5> has an <val1> attribute , <name3> is boolean True , otherwise it is boolean False .
<name4> = hasattr ( <name2> , <val1>   )	if <name2> has an <val1> attribute , <name4> is boolean True , otherwise it is boolean False .
<name1> <name5> :	<name1> <name5> is true ,
<name4> <name3> <name5> <name2> :	"'in favor of ""requires_system_checks"".' <name5> RemovedInDjango19Warning . <name4> <name3> <name5> <name2> are both true ,"
<name2> . requires_system_checks = ( <name2> . requires_system_checks <name3> <name5> else <name2> . requires_model_validation <name3> has_old_option else True )	"'and ""requires_system_checks"", which is illegal. Use only ""requires_system_checks"".' , replace '%s' for <name2> .__class__ .__name__ . call the method <name2> .requires_system_checks with an argument : <name2> .requires_system_checks <name3> <name5> is true ,"
@  <name4>	or if it is false , but has_old_option is true use self .requires_model_validation , if they are both false use boolean True as an argument . <name4> decorator ,
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> ,
<name4> not bool ( <name6> . option_list )	convert <name6> .option_list into a boolean , <name4> the inverted value .
def <name3> ( <name4> ) :	define the method <name3> with an arguments <name4> .
<name2> <name1> . get_version ( )	call the function <name1> .get_version , <name2> the result .
def <name4> ( <name6> , <name5> ) :	define the method <name4> with arguments <name6> and <name5> .
<name2> = <val4>   % ( <name5> , <name1> . args )	substitute '%s' in the string <val4> with <name5> and <name1> .args , respectively , substitute it for <name2> .
<name6> <name2> . help :	<name6> <name2> .help is true ,
\ <name4> '%s\\n\\n%s'   % ( <name1> , <name6> . help ) \	join <name1> and <name6> .help into a string , separated by 2 new line characters , <name4> it .
else :	if not ,
<name5> <name3>	<name5> <name3> .
def <name6> ( <name5> , <name1> , <name3> ) :	define the method <name6> with 3 arguments : <name5> , <name1> and <name3> .
<name1> not <name3> . use_argparse :	<name1> <name3> .use_argparse is false ,
"<name1> . warn ( <val5> ""is deprecated, use ArgumentParser instead"" , RemovedInDjango20Warning )"	call the function <name1> .warn with 2 arguments : string <val5>
<name2> = <name4> ( <name1> = <name5> , usage = self . usage ( subcommand ) , version = self . get_version ( ) )	is deprecated , use ArgumentParser instead and RemovedInDjango20Warning . <name2> is an instance of the object <name4> , created with arguments : <name1> set to <name5> ,
<name1> . add_option ( <val3>   , <val6>   , <name4> = <val5>   , dest = 'verbosity'   , default = '1'   , type = 'choice'   , choices = [ '0'   , '1'   , '2'   , '3'   ] , help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'   )	usage set to return value of the method self .usage called with an argument subcommand , version set to return value of the method self .get_version . call the method <name1> .add_option with 8 arguments : string <val3> , string <val6> , <name4> set to string <val5> ,
\ <name6> . add_option ( <val5>   , <name3> = <val2>   ) \	\ dest set to string 'verbosity' , default set to string '1' , type set to string 'choice' , choices is a list containing elements : '0' , '1' , '2' , '3' , and <name3> as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' . call the method <name6> .add_option with 2 arguments : string <val5> and <name3> as a string <val2> . \
<name2> . add_option ( <val4>   , <name5> = <val3>   ) ,	call the method <name2> .add_option with 2 arguments : string <val4> and <name5> set to string <val3> .
<name4> . add_option ( <val3>   , <name2> = <val6>   , help = 'Raise on exception'   )	call the method <name4> .add_option with 3 arguments : string <val3> , <name2> set to a string <val6> ,
"<name6> . add_option ( <val5>   , <name2> = <val1>   , dest = 'no_color'   , default = False , <name3> = ""Don't colorize the command output."" )"	and <name3> = 'Raise on exception' . call the method <name6> .add_option with 5 arguments : string <val5> , <name2> set to a string <val1> ,
<name2> <name5> <name6> <name1> . option_list :	"dest set to string 'no_color' default set to boolean False and help set to a string ""Don't colorize the command output."" . <name2> every <name5> <name6> <name1> .option_list ,"
<name4> . add_option ( <name6> )	call the method <name4> .add_option with an argument <name6> .
else :	if not ,
"<name4> = <name2> ( <name1> , <name6> = ""%s %s"" % ( os . path . basename ( prog_name ) , subcommand ) , description = <name1> . help or None )"	<name4> is an instance of <name2> class , created with 3 arguments : <name1> , <name6> as a string created by joining :
<name4> . add_argument ( <val1>   , <name5> = <val2>   , version = <name3> . get_version ( ) )	os .path .basename ( prog_name ) and subcommand , separated by whitespace and description set to <name3> .help , if exists , or None , otherwise . call the method <name4> .add_option with 3 arguments : string <val1> , <name5> set to string <val2> ,
<name4> . add_argument ( <val5>   , <val3>   , <name6> = <val2>   , dest = 'verbosity'   , default = '1'   , type = int , choices = [ 0 , 1 , 2 , 3 ] , help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'   )	and version set to result of the method self .get_version . call the method <name4> .add_option with 8 arguments : string <val5> , string <val3> , <name6> set to string <val2> ,
"\ <name1> . add_argument ( <val2>   , <name6> = 'The Python path to a settings module, e.g. ""myproject.settings.main"". If this isn\\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'   ) \"	"\ dest set to string 'verbosity' , default set to string '1' , type set to int , choices is a list , containing integers : 0 , 1 , 2 and 3 , call the method <name1> .add_option with 2 arguments : string <val2> and <name6> as a string 'The Python path to a settings module,  e.g. ""myproject.settings.main"". If this isn\\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' \"
"<name1> . add_argument ( <val4>   , <name5> = 'A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".'   )"	"call the method <name1> .add_option with 2 arguments : string <val4> and <name5> set to a string 'A directory to add to the Python  path, e.g. ""/home/djangoprojects/myproject"".'"
<name4> . add_argument ( <val1>   , <name2> = <val6>   , help = 'Raise on exception'   )	call the method <name4> .add_option with 3 arguments : string <val1> , <name2> set to a string <val6> ,
"<name1> . add_argument ( <val6>   , <name5> = <val2>   , <name3> = <val4>   , default = False , <name1> = ""Don't colorize the command output."" )"	and <name1> set to string 'Raise on exception' . call the method <name1> .add_option with 5 arguments : string <val6> , <name5> is string <val2> , <name3> is string <val4> ,
<name1> <name5> . args :	"default is boolean False , and help is a string ""Don't colorize the command output."" . <name1> <name5> .args is true ,"
<name3> . add_argument ( <val2>   , <name4> = <val6>   )	call the method <name3> .add_argument with 2 arguments : string <val2> and <name4> set to <val6> .
<name2> . add_arguments ( <name1> )	call the method <name2> .add_arguments with an argument <name1> .
<name1> <name4>	<name1> <name4>
def <name1> ( <name2> , <name6> ) :	define the method <name1> with an argument <name2> and <name6> .
pass	do nothing
def <name6> ( <name1> , <name5> , <name4> ) :	define the method <name6> with 3 arguments : <name1> , <name5> and <name4> .
parser = <name1> . create_parser ( <name6> , <name2> )	call the method <name1> .create_parser with arguments <name6> and <name2> .
<name4> . print_help ( )	call the method <name4> .print_help .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with arguments <name1> and <name6> .
<name6> . _called_from_command_line = <name4>	<name6> ._called_from_command_line is boolean <name4> .
<name6> = <name3> . create_parser ( <name5> [ 0 ] , <name5> [ 1 ] )	call the method <name3> .create_parser with first and second element of <name5> , substitute the result for <name6> .
<name2> <name5> . use_argparse :	<name2> <name5> .use_argparse is true ,
<name5> = <name2> . parse_args ( <name6> [ <val4> : ] )	call the method <name2> .parse_args with <name6> , without the first <val4> elements , substitute the result for <name5> .
<name4> = <name6> ( <name3> )	call the function <name6> with an argument <name3> , substitute the result for <name4> .
<name3> <val6>   <name2> <name5> :	<name3> <val6> is contained <name2> <name5> ,
<name5> = <name1> . <name5>	substitute <name1> .args for <name5> .
del <name1> [ <val2>   ]	delete value under the <val2> key of the <name1> dictionary .
else :	if not ,
<name6> = ( )	<name6> is an empty tuple .
else :	if not ,
<name6> , <name3> = <name5> . parse_args ( <name4> [ <val2> : ] )	call the method <name5> .parse_args with <name4> , without the first <val2> elements , substitute the result for <name6> and <name3> .
<name5> = <name4> ( <name2> )	call the function <name4> with an argument <name2> , substitute the result for <name5> .
<name1> ( <name6> )	call the function <name1> with an argument <name6> .
<name2> :	<name2> ,
<name6> . execute ( * <name2> , ** <name4> )	call the method <name6> .execute , with 2 arguments : unpacked list <name2> and unpacked dictionary <name4> .
except <name1> as <name2> :	if <name1> , renamed to <name2> , exception is caught ,
<name3> <name1> . traceback <name6> <name2> isinstance ( <name5> , <name4> ) :	<name3> <name1> .traceback is true <name6> <name5> is <name2> <name4> instance ,
<name3>	<name3> an exception .
<name4> = getattr ( <name5> , <val6>   , <name3> ( sys . <name4> , <name5> . style . ERROR ) )	if it exists , get <val6> attribute of <name5> , substitute it for <name4> , if not , <name4> is an instance of <name3> class ,
<name2> . <name6> ( <val3>   % ( <name4> . __class__ . __name__ , <name4> ) )	created with arguments sys .stderr and self .style .ERROR . replace '%s' in string <val3> with <name4> .__class__ .__name__ and <name4> , respectively , <name6> it to the <name2> stream .
<name5> . exit ( <val6> )	call the function <name5> .exit with an argument integer <val6> .
def <name3> ( <name6> , * <name4> , ** <name2> ) :	define the method <name3> with 3 arguments : <name6> , unpacked list <name4> and unpacked dictionary <name2> .
<name2> . stdout = <name1> ( <name4> . get ( <val6>   , sys . stdout ) )	<name2> .stdout is an instance of <name1> class created with an argument : value under the <val6> key of the <name4> dictionary ,
<name2> <name6> . get ( <val1>   ) :	<name2> the key doesnt exists use sys .stdout as an argument . <name2> value under the <val1> key of the <name6> dictionary .
<name5> . style = <name6> ( )	call the function <name6> , substitute the result for <name5> .style .
<name6> . stderr = <name1> ( <name4> . get ( <val3>   , sys . stderr ) )	<name6> .stderr is an <name1> object instance , created with value under the <val3> key of the <name4> dictionary as an argument ,
else :	if the key doesnt exists use sys .stderr as an argument . if not ,
<name5> . stderr = <name3> ( <name2> . get ( <val4>   , <name1> . stderr ) , <name5> . style . ERROR )	<name5> .stderr is an instance of an <name3> object , created with 2 arguments : value under the <val4> key of the <name2> dictionary , if it doesnt exists use the <name1> .stderr instead , and <name5> .style .ERROR .
<name1> <name4> . can_import_settings :	<name1> <name4> .can_import_settings is true ,
<name4> <name3> . conf <name5> <name2>	<name4> <name3> .conf <name5> <name2> into default namespace ,
<name3> = <name5>	<name3> is <name5> .
<name4> not <name1> . leave_locale_alone :	<name4> <name1> .leave_locale_alone is false ,
<name1> not <name3> . can_import_settings :	<name1> <name3> .can_import_settings is false ,
"<name4> <name5> ( <val1> ""(%s) and 'can_import_settings' (%s) command "" ""options."" % ( self . leave_locale_alone , self . can_import_settings ) )"	<name4> an <name5> exception with an argument string , <val1>
<name2> <name6> . utils <name3> <name1>	( % s ) and 'can_import_settings' ( % s ) command options . , replace '%s' with self .leave_locale_alone and self .can_import_settings . <name2> <name6> .utils <name3> <name1> into default namespace .
<name3> = <name1> . get_language ( )	call the method <name1> .get_language , substitute th result for <name3> .
<name3> . activate ( <val6>   )	call the method <name3> .activate with an argument string <val6> .
<name2> :	<name2> ,
<name5> ( <name6> . requires_system_checks <name4> not <name3> . get ( <val1>   ) <name4> not <name3> . get ( <val2>   ) ) :	<name5> <name6> .requires_system_checks is true <name4> values under the <val1> <name4> <val2> keys of the <name3> dictionary are false ,
<name3> . check ( )	call the method <name3> .check ,
<name6> = <name2> . handle ( * <name5> , ** <name3> )	call the method <name2> .handle with 2 arguments unpacked list <name5> and unpacked dictionary <name3> , substitute the result for <name6> .
<name4> <name3> :	<name4> <name3> is true ,
<name2> <name4> . output_transaction :	<name2> <name4> .output_transaction is true ,
   <name4> <name6> . db <name2> <name5> , <name3>	<name4> <name6> .db <name2> <name5> and <name3> into default namespace .
connection = connections [ <name1> . <name6> ( <val2>   , <name3> ) ]	<name6> the value under the <val2> key of the <name1> dictionary , if it doesnt exists use the <name3> to address an element
<name1> <name6> . ops . start_transaction_sql ( ) :	from the connections list , substitute it for <name6> . call the method <name6> .ops .start_transaction_sql , <name1> it evaluates to true ,
     <name3> . stdout . write ( <name3> . style . SQL_KEYWORD ( <name6> . ops . start_transaction_sql ( ) ) )	call the method <name6> .ops .start_transaction_sql , use the result as an argument for the call to the method <name3> .style .SQL_KEYWORD ,
<name6> . stdout . <name1> ( <name3> )	<name1> the result to the <name6> .stdout stream . <name1> <name3> to <name6> .stdout stream .
<name2> <name5> . output_transaction :	<name2> <name5> .output_transaction is true ,
\ <name6> . stdout . write ( '\\n'   + <name6> . style . SQL_KEYWORD ( <name3> . ops . end_transaction_sql ( ) ) ) \	call the method <name3> .ops .end_transaction_sql , use the result as the argument for the call to the method <name6> .style .SQL_KEYWORD ,
<name3> :	\ append the result to the '\\n' string , write it to self .stdout . <name3> perform , \
<name1> <name4> <name3> <name6> <name5> :	<name1> <name4> <name3> <name6> <name5> ,
<name3> . activate ( <name1> )	call the method <name3> .activate with an argument <name1> .
def validate ( <name2> , <name5> = <name4> , <name6> = <name1> ) :	define the method with 3 arguments : <name2> , <name5> set to <name4> and <name6> set to boolean <name1> .
<name1> <name4> <name5> <name3> :	<name1> <name4> <name5> <name3> ,
<name3> = <name6>	<name3> is not <name6> .
else :	if not ,
<name5> = [ <name3> ]	<name5> is a list containing <name3> .
<name6> <name4> . check ( <name1> = <name1> , <name2> = <name2> )	call the method <name4> .check with 2 arguments <name1> set to <name1> , <name2> set to <name2> , <name6> the result .
def <name3> ( <name4> , <name1> = <name6> , <name5> = <name6> , <name2> = <name3> ) :	define the method <name3> with 4 arguments : <name4> , <name1> set to <name6> , <name5> set to <name6> , <name2> set to boolean <name3> .
<name4> = <name2> . run_checks ( <name1> = <name1> , <name3> = <name3> )	call the method <name2> .run_checks with 2 arguments : <name1> set to <name1> , <name3> set t <name3> , substitute the result for <name4> .
"<name6> = """""	<name6> is an empty string .
<name2> = <val6>	<name2> is an integer <val6> .
<name6> <name2> :	<name6> <name2> is true ,
<name3> = [ <name1> <name2> <name1> <name6> <name5> <name4> <name1> . level <  <name3> . INFO <name1> not <name1> . is_silenced ( ) ]	append <name1> to <name3> list <name2> every <name1> <name6> <name5> , <name4> <name1> .level is lesser than <name3> .INFO <name1> result of the method <name1> .is_silenced <name6> false .
<name4> = [ <name5> <name3> <name5> <name6> <name1> <name2> <name4> . INFO <= <name5> . level <  <name4> . WARNING and not <name5> . is_silenced ( ) ]	append <name5> to <name4> list <name3> every <name5> <name6> <name1> , <name2> <name4> .INFO is lesser or equal to <name5> .level ,
<name4> = [ <name6> <name1> <name6> <name2> <name3> <name5> <name4> . WARNING <= <name6> . level <  <name4> . ERROR <name6> not <name6> . is_silenced ( ) ]	<name6> <name6> .level is lesser than <name4> .WARNING <name6> result of the method <name6> .is_silenced <name2> false . append <name6> to <name4> list <name1> every <name6> <name2> <name3> , <name5> <name4> .WARNING is lesser than or equal to <name6> .level ,
<name1> = [ <name3> <name5> <name3> <name4> <name6> <name2> <name1> . ERROR <= <name3> . level <  <name1> . CRITICAL ]	and <name3> .level is lesser than <name1> .WARNING and result of the method <name3> .is_silenced <name4> false . append <name3> to <name1> list <name5> every <name3> <name4> <name6> , <name2> <name1> .ERROR is lesser than or equal to <name3> .level ,
<name1> = [ <name5> <name4> <name5> <name6> <name3> <name2> <name1> . CRITICAL <= <name5> . level ]	and <name5> .level is lesser than <name1> .CRITICAL . append <name5> to <name1> list <name4> every <name5> <name6> <name3> , <name2> <name1> .CRITICAL is lesser than or equal to <name5> .level .
<name6> = [ ( <name3> , <val2>   ) , ( <name1> , <val5>   ) , ( <name4> , <val6>   ) , ( infos , 'INFOS'   ) , ( debugs , 'DEBUGS'   ) , ]	<name6> is a list of tuples with 5 entries : <name3> and <val2> , <name1> and <val5> , <name4> and <val6> ,
<name5> <name2> , <name4> <name6> <name3> :	infos , 'INFOS' <name5> every <name2> and <name4> <name6> <name3> ,
<name3> <name5> :	<name3> <name5> is true ,
<name6> += len ( <name3> )	increment <name6> for length of <name3> .
<name6> = ( <name3> ( ) . <name2> ( <name1> ( <name4> ) ) <name5> <name4> . is_serious ( ) else <name3> ( ) . WARNING ( <name1> ( <name4> ) ) <name6> <name4> <name3> <name2> )	<name5> <name4> .is_serious method evaluates to true , call the function <name3> , on the result call the method <name2> with result of the <name1> called with an argument <name4> , <name5> not call the function <name3> on the result call the method <name2> with result of the <name1> called with an argument <name4> , <name6> every <name4> <name3> <name2> , <name6> is a tuple containing the previous result .
"\ <name3> = ""\\n"" . <name5> ( sorted ( <name3> ) ) \"	sort elements <name3> , <name5> them in the list separated with newline character , substitute the result for <name3> .
\ <name4> += <val6>   % ( <name1> , <name2> ) \	\ substitute '%s' in the string <val6> , with <name1> and <name2> , substitute the result for <name4> . \
<name2> <name1> :	<name2> <name1> is true ,
\ <name6> = <val3> % <name6> \	\ replace '%s' in string <val3> with <name6> , substitute it for <name6> . \
<name4> <name1> :	<name4> <name1> is true ,
<name5> <name2> :	<name5> <name2> is true ,
\ <name2> += '\\n' \	append newline character to <name2> .
"<name5> += <val3> % ( <val2> if visible_issue_count == 0 else ""1 issue"" if visible_issue_count == 1 else ""%s issues"" % visible_issue_count , len ( all_issues ) - visible_issue_count , )"	append string <val3> to <name5> , replace first '%s' for : string <val2> ,
<name4> <name2> ( <name5> . is_serious ( ) <name6> not <name5> . is_silenced ( ) <name3> <name5> <name1> <name4> ) :	"<name4> visible_issue_count equals to integer 0 , or <name3> string ""1 issue"" <name4> visible_issue_count equals integer 1 , or <name3> string ""%s issues"" , with '%s' replaced by visible_issue_count , subtract visible_issue_count from length of <name4> , <name6> substitute it <name3> second '%s' <name1> the stirting string . <name4> <name2> element <name1> the return value of the <name5> .is_serious method is true , <name6> <name4> return value of the method <name5> .is_silenced is false ,"
<name1> <name5> ( <name4> )	for every e in all_issues , <name1> an <name5> with argument <name4> ,
elif <name6> <name3> <name1> :	otherwise if <name6> <name3> <name1> are true ,
<name1> . stderr . <name5> ( <name6> )	<name5> <name6> to <name1> .stderr stream .
elif <name3> :	otherwise if <name3> is true ,
<name1> . stdout . <name4> ( <name3> )	<name4> <name3> to <name1> .stderr stream .
def <name2> ( <name3> , * <name6> , ** <name4> ) :	define the method <name2> with 3 arguments : <name3> , unpacked <name6> and unpacked dictionary <name4> .
<name6> <name4> ( <val3>   )	<name6> an <name4> exception with an argument string <val3> .
<name2> <name6> ( <name5> ) :	derive the <name6> <name2> from the <name5> base <name2> .
<name4> = <val5>	<name4> is an string <val5> .
def <name2> ( <name3> , <name6> ) :	define the method <name2> with <name3> and <name6> as arguments .
<name4> . add_argument ( <val3>   , <name5> = <val6>   , <name1> = <val2>   , help = 'One or more application label.'   )	call the method <name4> .add_argument with 4 arguments : string <val3> , <name5> set to <val6> , <name1> set to <val2> ,
def <name6> ( <name4> , * <name3> , ** <name1> ) :	and help set to string 'One or more application label.' . define the method <name6> with 3 arguments : <name4> , unpacked list <name3> and unpacked dictionary <name1> .
<name5> <name4> . <name3> <name1> <name3>	<name5> <name4> .apps <name1> <name3> into default name space .
<name2> :	<name2> ,
<name6> = [ <name4> . get_app_config ( <name5> ) <name3> <name5> <name1> <name2> ]	call the method <name4> .get_app_config with an argument app_lable , <name3> every <name5> <name1> <name2> , append the results to <name6> list .
except ( <name1> , <name6> ) as <name3> :	if <name1> or <name6> , renamed to <name3> , exceptions are caught ,
<name1> <name5> ( <val4> % <name2> )	<name1> an <name5> with an argument string <val4> , with '%s' replaced by <name2> .
<name5> = [ ]	<name5> is an empty list .
<name3> <name6> <name4> <name1> :	<name3> eery <name6> <name4> <name1> ,
<name3> = <name5> . handle_app_config ( <name4> , ** <name1> )	call the <name5> .handle_app_config method with <name4> and <name1> as arguments , substitute the result for <name3> .
<name2> <name5> :	<name2> <name5> is true ,
<name2> . <name5> ( <name4> )	<name5> <name4> to <name2> .
\ <name3> '\\n'   . <name2> ( <name5> ) \	<name2> elements of <name5> into a string , separated by newline characters , <name3> it .
def <name5> ( <name1> , <name2> , ** <name3> ) :	define the method <name5> with 3 arguments : <name1> , <name2> and unpacked dictionary <name3> .
<name2> :	<name2> ,
<name1> = <name5> . <name1>	substitute <name5> .handle_app for <name1> .
except <name4> :	if <name4> exception is caught ,
"<name1> <name2> ( ""Subclasses of AppCommand must provide"" ""a handle_app_config() method."" )"	"<name1> an <name2> with an argument string ""Subclasses of AppCommand must provide a handle_app_config() method."" ."
else :	if not ,
"<name3> . warn ( ""AppCommand.handle_app() is superseded by "" ""AppCommand.handle_app_config()."" , RemovedInDjango19Warning , stacklevel = 2 )"	"call the function <name3> .warn with 3 argument : string ""AppCommand.handle_app() is superseded by AppCommand.handle_app_config()."" ,"
<name3> <name1> . models_module <name5> <name6> :	RemovedInDjango19Warning and stacklevel set to integer 2 . <name3> <name1> .models_module <name5> <name6> ,
"<name1> <name5> ( ""AppCommand cannot handle app '%s' in legacy mode "" ""because it doesn't have a models module."" % <name4> . label )"	"<name1> an <name5> with an argument string ""AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module."" , where '%s' is replaced by <name4> .label ."
return <name5> ( <name2> . models_module , ** <name3> )	call the function <name5> with 2 arguments : <name2> .models_module and unpacked dictionary <name3> .
<name3> <name1> ( <name6> ) :	derive the <name1> <name3> from the <name6> base <name3> .
<name3> = <val5>	<name3> is a string <val5>
<name1> = <val4> % <name3>	substitute string <val4> , with '%s' replaced by <name3> , for <name1> .
def <name2> ( <name5> , <name3> ) :	define the method <name2> with arguments <name5> and <name3> .
<name3> . add_argument ( <val2>   , <name1> = <name6> . label , <name5> = <val4>   )	call the method <name3> .add_argument with 3 arguments : string <val2> , <name1> set to <name6> .label and <name5> set to <val4> .
def <name4> ( <name5> , * <name2> , ** <name6> ) :	define the method <name4> with 3 arguments : <name5> , unpacked list <name2> and unpacked dictionary <name6> .
<name1> = [ ]	<name1> is an empty list .
<name5> <name2> <name3> <name1> :	<name5> every <name2> <name3> <name1> ,
<name3> = <name2> . handle_label ( <name1> , ** <name4> )	call the method <name2> .handle_label with 2 arguments : <name1> and unpacked dictionary <name4> , substitute the result for <name3> .
<name6> <name2> :	<name6> <name2> is true ,
<name6> . <name2> ( <name3> )	<name2> <name3> to <name6> .
\ <name6> '\\n'   . <name4> ( <name5> ) \	<name4> <name5> into a string , separated by newline characters , <name6> it .
def <name2> ( <name3> , <name6> , ** <name5> ) :	define the method <name2> with 3 arguments : <name3> , <name6> and unpacked dictionary <name5> .
<name1> <name2> ( <val4>   )	<name1> an <name2> exception with an argument string <val4> .
<name5> <name3> ( <name4> ) :	derive the <name3> <name5> from the <name4> base <name5> .
<name4> = ''	<name4> is an empty string .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
"<name2> . warn ( <val5> ""Use BaseCommand instead, which takes no arguments by default."" , RemovedInDjango20Warning )"	call the function <name2> .warn with 2 arguments : string <val5>
super ( <name6> , self ) . <name3> ( )	Use BaseCommand instead , which takes no arguments by default . and RemovedInDjango20Warning . call the <name3> method from the base class of the <name6> class .
def <name3> ( <name5> , * <name2> , ** <name1> ) :	define the method <name3> with 3 arguments : <name5> , unpacked list <name2> and unpacked dictionary <name1> .
<name1> <name4> :	<name1> <name4> is true ,
<name5> <name2> ( <val3> )	<name5> an <name2> exception with an argument string <val3> .
<name5> <name1> . handle_noargs ( ** <name3> )	call the <name1> .handle_noargs method with with unpacked dictionary <name3> as argument , <name5> the result .
def <name3> ( <name5> , ** <name6> ) :	define the method <name3> with 2 arguments : <name5> and unpacked dictionary <name6> .
<name1> <name4> ( <val6>   )	<name1> an <name4> with an argument string <val6> .
<name3> <name1>	<name3> module <name1> .
<name5> <name3>	<name5> module <name3> .
<name4> <name3> . utils <name1> <name5>	<name4> <name3> .utils <name1> <name5> into default name space .
def <name3> ( ) :	define the function <name3> , without arguments .
<name2> = <name6> . platform	substitute <name6> .platform for <name2> .
supported_platform = <name2> != <val3>   <name1> ( <name2> != <val5>   or 'ANSICON'   in os . environ )	evaluate the logic expression , <name2> does not equals to string <val3> , <name1> <name2> does not equals to string <val5>
<name2> = hasattr ( <name3> . stdout , <val5>   ) <name1> <name3> . stdout . isatty ( )	or string 'ANICON' is in os .environ , substitute the evaluated boolean for supported_platform . if <name3> .stdout has an attribute named <val5> <name1> call to the <name3> .stdout .isatty returns boolean True , substitute True for <name2> .
<name2> not <name4> <name5> not <name1> :	<name2> <name4> is False <name5> <name1> is False ,
<name6> <name1>	<name6> boolean <name1> .
<name1> <name3>	<name1> boolean <name3> .
def <name6> ( ) :	define function <name6> , without input arguments .
<name3> not <name2> ( ) :	call the function <name2> , <name3> evaluates to False ,
<name3> = <name4> ( )	substitute return value of function <name4> for <name3> .
else :	if not ,
<name5> = <name2> . environ . <name1> ( <val6>   , ''   )	<name1> the value under the key <val6> of <name2> .environ dictionary , if key doesnt exists return empty string , assign the result to <name5> .
<name1> = <name4> . parse_color_setting ( <name3> )	call the function <name4> .parse_color_setting with <name3> as an argument , assign the result to <name1> .
<name2> color_settings :	<name2> color_setting is True ,
<name2> <name6> :	define <name2> <name6> .
pass	do nothing .
<name6> = <name4> ( )	<name6> is an instance of the <name4> class .
<name5> <name4> <name6> <name2> . PALETTES [ <name2> . NOCOLOR_PALETTE ] :	<name5> every <name4> <name6> <name2> .PALETTES list at the index <name2> .NOCOLOR_PALETTE ,
<name5> = <name6> . get ( <name4> , { }  )	assign the value of the dictionary <name6> under the key <name4> to <name5> , if key doesnt exist assign the empty dictionary .
setattr ( <name1> , <name6> , <name4> . make_style ( ** <name2> ) )	sets the <name6> attribute of the <name1> object to the value of the call to the <name4> .make_style function with dictionary <name2> as an argument .
<name2> . ERROR_OUTPUT = <name2> . ERROR	substitute <name2> .ERROR for <name2> .ERROR_OUTPUT .
else :	if not ,
<name4> = <name5> ( )	substitute return value of function <name5> for <name4> .
<name4> <name3>	<name4> <name3> .
def <name4> ( ) :	define function <name4> , without input arguments .
<name1> <name6> :	define <name1> <name6> .
def <name2> ( <name6> , <name4> ) :	define private method <name2> with <name6> class instance and <name4> as the arguments .
<name4> <name5> <name6> : <name6>	create <name5> identity function which returns <name6> for input parameter <name6> , <name4> the function .
<name1> <name6> ( )	<name1> an instance of a <name6> class .
<name5> <name2> <name1> <name3>	<name5> <name2> <name1> <name3> into default name space .
<name6> <name2> . <name5> <name1> <name5>	<name6> <name2> .apps <name1> <name5> into default name space .
<name5> <name2> . core <name3> <name6>	<name5> <name2> .core <name3> <name6> into default name space .
<name5> <name6> . core . checks . <name3> <name2> <name3>	<name5> <name6> .core .checks .registry <name2> <name3> into default name space .
<name3> <name2> . core . management . base <name5> <name4> , <name1>	<name3> <name2> .core .management .base <name5> <name4> and <name1> into default name space .
<name1> <name6> ( <name3> ) :	derive the <name1> <name6> from the <name3> base <name1> .
<name5> = <val2>	<name5> is a string <val2> .
<name5> = <name6>	<name5> is boolean <name6> .
def <name6> ( <name4> , <name3> ) :	define the method <name6> with arguments <name4> and <name3> .
<name6> . add_argument ( <val1>   , <name3> = <val2>   , <name5> = <val4>   )	call the method <name6> .add_argument with 3 arguments : string <val1> , <name3> set to string <val2> and <name5> set to <val4> .
<name4> . add_argument ( <val2>   , <val6>   , <name1> = <val3>   , dest = 'tags'   , help = 'Run only checks labeled with given tag.'   )	call the method <name4> .add_argument with 5 arguments : string <val2> , string <val6> , <name1> set to string <val3> ,
<name2> . add_argument ( <val1>   , <name6> = <val4>   , <name3> = 'list_tags'   , <name5> = 'List available tags.'   )	<name3> set to string 'tags' and <name5> set to string 'Run only checks labeled with given tag.' . call the method <name2> .add_argument with 4 arguments : string <val1> , <name6> set to string <val4> ,
def <name5> ( <name6> , * <name4> , ** <name2> ) :	dest set to string 'list_tags' and help set to string 'List available tags.' . define method <name5> with arguments <name6> , unapcked list <name4> and unpacked dictionary <name2> .
<name2> <name6> . get ( <val3>   ) :	<name2> value under the <val3> key of <name6> dictionay is true ,
\ <name1> . stdout . <name4> ( '\\n'   . <name2> ( sorted ( <name6> . tags_available ( ) ) ) ) \	call the method <name6> .tags_available , sort the result and <name2> it into a string , separate by newlines , <name4> it to <name1> .stdout .
<name5>	<name5> nothing .
<name5> <name4> :	<name5> <name4> is true ,
app_configs = [ <name5> . get_app_config ( <name4> ) <name2> <name4> <name1> <name6> ]	call the method <name5> .get_app_config with an argument <name4> , <name2> every <name4> <name1> <name6> , append the results to a list ,
else :	substitute the resulting list for app_config . if not ,
<name2> = <name4>	<name2> is <name4> .
<name4> = <name5> . <name3> ( <val2>   , <name6> )	<name3> the value under the <val2> key of the <name5> dictionary , if it exists substitute it for <name4> , if not , <name4> is <name6> .
<name6> <name4> <name2> any ( not <name5> . tag_exists ( <name3> ) for <name3> <name1> <name4> ) :	<name6> <name4> exists <name2> <name6> all elements <name1> the return value of the method <name5> .tag_exists called with an argument <name3> ,
invalid_tag = next ( <name2> <name3> <name2> <name5> <name1> <name6> not <name4> . tag_exists ( <name2> ) )	<name3> every <name2> <name5> <name1> , are false , <name3> every <name2> <name5> <name1> , <name6> return value of the method <name4> .tag_exists called with an argument <name2> , evaluates to false ,
<name3> <name6> ( <val1>   % <name5> )	use tag as an argument to call the iterator method next , substitute the result for <name5> . <name3> an <name6> exception with an argument string <val1> , where '%s' is replaced with <name5> .
<name6> . check ( <name5> = <name5> , <name1> = <name1> , <name2> = <name3> )	call the method <name6> .check with arguments : <name5> set to <name5> , <name1> set to <name1> , <name2> set to boolean <name3> .
<name4> <name2> <name5> <name6>	<name4> <name2> <name5> <name6> into default name space .
<name4> <name5>	<name4> module <name5> .
<name5> <name2>	<name5> module <name2> .
<name1> <name6>	<name1> module <name6> .
<name3> <name6> . core . management . base <name2> <name4> , <name1>	<name3> <name6> .core .management .base <name2> <name4> and <name1> into default name space .
<name2> <name4> . core . management . utils <name1> <name6> , <name3>	<name2> <name4> .core .management .utils <name1> <name6> and <name3> into default name space .
<name2> <name3> . utils . _os <name6> <name4> , <name1>	<name2> <name3> .utils ._os <name6> <name4> and <name1> into default name space .
def <name5> ( <name2> ) :	define the function <name5> with <name2> as argument .
<name1> <name3> ( <name4> , 'rb'   ) <name6> <name2> :	<name3> the file <name4> in read mode , <name1> file descriptor <name6> <name2> ,
<name2> = <name1> . <name6> ( <val5> )	<name6> <val5> bytes from file <name1> and store it in <name2> .
\ return <name2> [ : 3 ] == b '\\xef\\xbb\\xbf'   or <name2> . startswith ( codecs . BOM_UTF16_LE ) or <name2> . startswith ( codecs . BOM_UTF16_BE ) \	\ evaluate the boolean expression , if first three characters of <name2> equals to string of bytes '\\ xef \\ xbb \\ xbf \\' , \
def <name3> ( <name4> ) :	of if sample starts with codecs .BOM_UTF16_LE or sample starts with codecs .BOM_UTF16_BE , return the evaluated boolean expression . define the function <name3> with <name4> as argument ,
<name2> :	<name2> ,
<name6> <name4> ( <name5> , 'a'   ) :	<name6> <name4> file <name5> in append mode ,
<name2> . utime ( <name1> , <name5> )	call the <name2> .utime unction , with <name1> and <name5> as arguments .
except ( <name4> , <name6> ) :	if <name4> or <name6> exceptions occurred ,
<name3> <name2>	<name3> boolean <name2> .
<name1> <name5>	<name1> boolean <name5> .
<name4> <name5> ( <name3> ) :	derive <name4> <name5> from base <name4> <name3> .
<name4> = <val5>	<name4> is string <val5> .
<name5> = <name1>	<name5> is boolean <name1> .
<name4> = <name2>	<name4> is boolean <name2> .
<name6> = <val3>	<name6> is string <val3>
<name4> = [ <val3>   ]	<name4> is list containing string <val3> .
def <name6> ( <name4> , <name3> ) :	define method <name6> with <name4> class instance and <name3> as arguments .
<name6> . add_argument ( <val4>   , <val3>   , <name5> = <val2>   , <name1> = <val6>   , default = [ ] , help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '    'Can be used multiple times.'   )	call the method <name6> .add_argument with string <val4> , string <val3> , <name5> set to string <val2> , <name1> set to string <val6> ,
<name6> . add_argument ( <val5>   , <val2>   , <name4> = <val1>   , <name3> = <val6>   , <name5> = [ ] , <name2> = 'Locales to exclude. Default is none. Can be used multiple times.'   )	<name5> as an empty list and <name2> as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.' . call the method <name6> .add_argument with string <val5> , string <val2> , <name4> set to string <val1> , <name3> set to string <val6> ,
def <name4> ( <name3> , ** <name6> ) :	default as an empty list and help as an string 'Locales to exclude. Default is none. Can be used multiple times.' . define the <name4> method with <name3> class instance and dictionary ** <name6> as arguments .
<name3> = <name1> . <name4> ( <val5>   )	<name4> the value under the key <val5> of the <name1> dictionary , substitute it for <name3> .
<name6> = <name5> . <name3> ( <val2>   )	<name3> the value under the key <val2> of the <name5> dictionary , substitute it for <name6> .
self . verbosity = int ( <name1> . <name3> ( 'verbosity'   ) )	<name3> the value under the key 'exclude' of the <name1> dictionary , convert it to an integer , substitute it for exclude .
<name3> <name4> ( <name5> . program ) is <name2> :	<name3> evaluation of the function <name4> with <name5> .program as argument equals to <name2> ,
"<name3> <name5> ( ""Can't find %s. Make sure you have GNU gettext "" ""tools 0.15 or newer installed."" % <name1> . program )"	"<name3> <name5> exception , with sring ""Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed."" as argument , substitute '%s' with <name1> .program ."
<name2> = [ os . path . join ( 'conf'   , <val1>   ) , <val1>   ]	<name2> is a list containing tuple with strings , 'conf/locale' and <val1> .
<name2> <name5> . environ . get ( <val4>   ) :	<name2> value under the <val4> key of <name5> .environ dictionary exists .
<name5> <name2> . conf <name4> <name1>	<name5> <name2> .conf <name4> <name1> into default name space .
<name2> . <name1> ( [ upath ( <name6> ) <name5> <name6> <name3> <name4> . LOCALE_PATHS ] )	call function update with <name6> as the argument , <name5> every <name6> <name3> <name4> .LOCALE_PATHS , <name1> <name2> list with previous items .
basedirs = <name3> ( map ( <name4> . path . abspath , filter ( <name4> . path . isdir , basedirs ) ) )	create a list out of basedir elements for which function <name4> .path .isdir returns true , apply the <name4> .path .abspath function on every element , and put the results in a list , basedir is <name3> of previous list elements .
<name3> not <name2> :	<name3> <name2> is empty ,
"<name1> <name4> ( ""This script should be run from the Django Git "" ""checkout or your project or app tree, or with "" ""the settings module specified."" )"	"<name1> <name4> exception with string ""This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified."" , as argument ."
<name1> = [ ]	<name1> is an empty string .
<name1> <name3> <name5> <name4> :	<name1> every <name3> <name5> <name4> ,
<name3> = filter ( <name1> . <name2> . isdir , glob . glob ( '%s/*'   % <name6> ) )	<name3> is a list of elements from the list of <name2> names that maths the <name6> <name2> with '/*' wild card characters for which call to the <name1> .path .isdir returned true , assign it to <name3> .
<name3> . <name5> ( map ( <name4> . path . basename , <name1> ) )	<name5> <name3> list with the elements of <name1> list on which <name4> .path .basename function was applied .
<name3> = <name4> <name2> <name5>	take <name4> <name2> <name5> , whichever is not empty , respectively , and substitute it for <name3> .
<name2> = <name5> ( <name2> ) - <name5> ( <name1> )	<name2> is relative complement of <name5> <name1> in <name5> <name2> .
<name1> <name6> <name5> <name4> :	<name1> every <name6> <name5> <name4> ,
<name6> <name2> :	<name6> <name2> in not empty ,
<name5> = [ os . <name6> . <name2> ( <name3> , <name4> , <val1>   ) <name5> <name4> <name6> <name2> ]	<name2> <name3> , <name4> and string <val1> into a <name6> separated by '/' <name5> every <name4> <name6> <name2> , assign the list to <name5> .
else :	if not ,
<name5> = [ <name4> ]	<name5> is a list containing <name4> .
<name4> = [ ]	<name4> is an empty list .
<name6> <name2> <name1> <name3> :	<name6> every <name2> <name1> <name3> ,
<name5> <name6> , <name1> , <name2> <name3> os . walk ( <name4> ) :	<name5> <name6> , <name1> and <name2> , respectively , <name3> directory tree tuple starting from the <name4> ,
<name6> . <name2> ( ( <name1> , <name5> ) <name3> <name5> <name4> <name6> <name2> <name5> . endswith ( <val1>   ) )	<name2> <name6> with tuple containing <name1> and <name5> , <name3> every <name5> <name4> <name6> , only <name2> it ends with string <val1> .
<name1> <name3> :	<name1> <name3> is not empty ,
<name4> . compile_messages ( <name3> )	call the <name4> .compile_messages with <name3> as argument ,
def <name6> ( <name4> , <name1> ) :	define <name6> method with <name4> class instance and <name1> as a arguments .
<name6> <name3> , ( <name2> , <name4> ) <name5> enumerate ( <name1> ) :	<name6> every <name3> and tuple containing <name2> and <name4> , <name5> enumerated list of <name1> ,
<name3> <name2> . verbosity >  <val6> :	<name3> <name2> .verbosity is greater than integer <val6> ,
\ <name1> . stdout . write ( <val4>   % ( <name6> , <name5> ) ) \	\ call the <name1> .stdout .write method with string <val4> as argument , replacing all the occurrences of '%s' with <name6> and <name5> , respectively . \
<name3> = os . <name5> . join ( <name4> , <name1> )	<name3> is a string containing joined directory <name5> from <name4> and <name1> .
if <name6> ( <name2> ) :	evaluate function <name6> with <name2> as argument .
"<name1> <name5> ( ""The %s file has a BOM (Byte Order Mark). "" ""Django only supports .po files encoded in "" ""UTF-8 and without any BOM."" % <name3> )"	"<name1> <name5> exception with string ""The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM."" , with '%s' replaced with <name3> , as argument ."
<name1> = <name4> . path . splitext ( <name3> ) [ 0 ]	call <name4> .path .splitext function with <name3> as argument , substitute the first element of the result for <name1> .
<name2> <name4> == <val1> <name6> not is_writable ( npath ( base_path + '.mo'   ) ) :	<name2> <name4> equals to integer <val1> <name6>
"<name2> . stderr . write ( ""The po files under %s are in a seemingly not writable location. "" ""mo files will not be updated/created."" % <name4> )"	"call the <name2> .stderr .write , with string ""The po files under %s are in a seemingly not writable location. mo files will not be updated/created."" as argument , with '%s' replaced by <name4> ."
<name4>	<name4> nothing .
args = [ <name5> . program ] + <name5> . program_options + [ <val4>   , npath ( base_path + '.mo'   ) , npath ( base_path + '.po'   ) ]	extend <name5> .program list with <name5> .program_options , string <val4> ,
<name1> , <name5> , <name4> = <name2> ( <name6> )	return value of the npath function with string '.mo' appended to the base_path as argument , and return value of the npath function with string '.po' appended to the base_path as argument , substitute it for <name6> . call the <name2> with <name6> as the argument , assign the result to the <name1> , <name5> and <name4> , respectively .
<name2> <name1> :	<name2> <name1> is True ,
<name5> <name4> :	<name5> <name4> is True ,
<name3> = <val5> % ( <name4> . program , <name1> )	<name3> is a string <val5> , with '%s' replaced by <name4> .program and <name1> .
else :	if not ,
<name4> = <val3> % <name5> . program	<name4> is a string <val3> , with '%s' replaced by <name5> .program .
<name1> <name3> ( <name2> )	<name1> <name3> exception with <name2> as argument .
<name5> <name2> . conf <name4> <name1>	<name5> <name2> .conf <name4> <name1> into default name space .
<name5> <name2> . core . cache <name4> <name3>	<name5> <name2> .core .cache <name4> <name3> into default name space .
<name3> <name1> . core . cache . backends . db <name4> <name5>	<name3> <name1> .core .cache .backends .db <name4> <name5> into default name space .
<name6> <name5> . core . management . base <name2> <name1> , <name4>	<name6> <name5> .core .management .base <name2> <name1> and <name4> into default name space .
<name4> <name5> . db <name3> <name2> , <name1> , <name6> , <name4> , <name5>	<name4> <name5> .db <name3> <name2> , <name1> , <name6> , <name4> and <name5> into default name space .
<name3> <name5> . db . utils <name6> <name4>	<name3> <name5> .db .utils <name6> <name4> into default name space .
<name5> <name1> . utils . encoding <name3> <name6>	<name5> <name1> .utils .encoding <name3> <name6> into default name space .
<name5> <name2> ( <name6> ) :	derive the <name5> <name2> from the <name6> base <name5> .
<name5> = <val4>	<name5> is an string <val4> .
<name3> = <name4>	<name3> is boolean <name4> .
def <name1> ( <name5> , <name4> ) :	define the method <name1> with arguments <name5> and <name4> .
<name5> . add_argument ( <val1>   , <name6> = <val2>   , <name3> = <val4>   , help = 'Optional table names. Otherwise, settings.CACHES is used to '    'find cache tables.'   )	call the method <name5> .add_argument with 4 arguments : string <val1> , <name6> set to string <val2> , <name3> set to <val4> character ,
"<name1> . add_argument ( <val6>   , <name5> = <val2>   , <name3> = <val4>   , default = DEFAULT_DB_ALIAS , <name1> = 'Nominates a database onto which the cache tables will be '    'installed. Defaults to the ""default"" database.'   )"	and <name1> set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' . call the method <name1> .add_argument with 5 arguments : string <val6> , <name5> set to string <val2> , <name3> as a string <val4> ,
def <name3> ( <name2> , * <name5> , ** <name1> ) :	"default set to DEFAULT_DB_ALIAS and help set to a string : 'Nominates a database onto which the cache tables will be installed. Defaults to the ""default"" database.' define the method <name3> with arguments <name2> , unpacked list <name5> and unpacked dictionary <name1> ."
<name3> = <name5> . <name1> ( <val2>   )	<name1> value under the <val2> key of the <name5> dictionary , substitute it for <name3> .
<name3> . verbosity = int ( <name1> . <name5> ( <val2>   ) )	<name5> the value under the <val2> key of the <name1> dictionary , convet it to an integer and substitute for <name3> .verbosity .
<name3> len ( <name6> ) :	<name3> length of <name6> is greater than zero ,
<name6> <name3> <name5> <name2> :	<name6> every <name3> <name5> <name2> ,
<name3> . create_table ( <name2> , <name1> )	call the method <name3> .create_table with arguments : <name2> and <name1> .
else :	if not ,
<name2> <name3> <name4> <name6> . CACHES :	<name2> every <name3> <name4> <name6> .CACHES ,
<name6> = <name5> [ <name2> ]	substitute value under the <name2> key of the <name5> dictionary for <name6> .
<name3> isinstance ( <name1> , <name4> ) :	<name3> <name1> is an instance of <name4> ,
<name3> . create_table ( <name2> , <name5> . _table )	all the method <name3> .create_table with arguments : <name2> and <name5> ._table .
def <name2> ( <name3> , <name4> , <name1> ) :	define the method <name2> with arguments <name3> , <name4> and <name1> .
<name6> = <name5> ( <name4> , { }  )	<name6> is an instance of <name5> class , created with arguments : <name4> and an empty dictionary .
<name5> not <name4> . allow_migrate ( <name2> , <name6> . cache_model_class ) :	call the method <name4> .allow_migrate with 2 arguments : <name2> and <name6> .cache_model_class , <name5> it evaluates to false ,
<name2>	<name2> nothing .
<name2> = <name4> [ <name3> ]	substitute value under the <name3> key of the <name4> dictionary for <name2> .
<name1> <name5> <name3> <name4> . introspection . table_names ( ) :	<name1> <name5> is contained <name3> return value of the method <name4> .introspection .table_names ,
<name2> <name5> . verbosity >  <val1> :	<name2> <name5> .verbosity is greater than integer <val1> ,
<name2> . stdout . <name6> ( <val5> % <name1> )	replace '%s' in string <val5> with <name1> , <name6> it to the <name2> .stdout stream .
<name2>	<name2> nothing .
<name3> = ( <name2> . CharField ( name = 'cache_key'   , max_length = 255 , unique = True , primary_key = True ) , <name2> . TextField ( name = 'value'   ) , <name2> . DateTimeField ( name = 'expires'   , db_index = True ) , )	<name3> is an tuple containing 3 entries : return value of the method <name2> .CharField called with 4 arguments :
<name2> = [ ]	name set to a string 'cache_key' , max_length set to integer 255 , unique set to boolean True and primary_key set to boolean True , return value of the method models .TextField called with argument name set to a string 'value' , and return value of the method models .DateTimeField called with 2 arguments : name set to string 'expires' and db_index set to True . <name2> is an empty list .
<name1> = [ ]	<name1> is an empty list .
<name5> = <name6> . ops . quote_name	substitute <name6> .ops .quote_name for <name5> .
<name4> <name2> <name6> <name1> :	<name4> every <name2> <name6> <name1> ,
<name2> = [ <name4> ( <name3> . name ) , <name3> . db_type ( connection = connection ) ]	<name2> is an list containing 2 elements : return value of the function <name4> called with an argument <name3> .name ,
"<name2> . <name5> ( ""%sNULL"" % ( ""NOT "" <name3> not <name6> . null else """" ) )"	"and return value of the function <name6> .db_type called with an argument connection set to connection . <name3> <name6> .null is false , <name5> string <name5> ""NOT NULL"" to <name2> , otherwise <name5> ""NULL"" to <name2> ."
<name4> <name1> . primary_key :	<name4> <name1> .primary_key is true ,
<name6> . <name2> ( <val4> )	<name2> string <val4> to <name6> .
elif <name4> . unique :	otherwise if <name4> .unique is true ,
<name3> . <name2> ( <val1> )	<name2> string <val1> to <name3> .
<name5> <name6> . db_index :	<name5> <name6> .db_index is true ,
"<name5> = <val6> <name1> <name2> . <name5> else """""	<name1> <name2> .unique is true , substitute <val6> for <name5> , otherwise <name5> is an empty string .
index_output . append ( <val2> % ( <name3> , <name5> ( '%s_%s'   % ( tablename , f . name ) ) , <name5> ( tablename ) , <name5> ( f . name ) ) )	replace '%s' in string <val2> with : <name3> , return value of the function <name5> called with an argument :
"<name1> . <name5> ( "" "" . <name3> ( <name4> ) )"	a string '%s_%s' , where '%s' is replaced with tablename and f .name , respectively , return value of the function qn called with an argument tablename and return value of the function qn called with an argument f .name . <name3> <name4> elements into a string , separated by whitespaces , <name5> it to <name1> .
<name1> = [ <val5> % <name2> ( <name4> ) ]	<name1> is a list containing : string <val5> , where % s is replaced by result of the function <name2> called with an argument <name4> .
<name4> <name6> , <name1> <name2> enumerate ( <name5> ) :	<name4> every <name6> and <name1> <name2> enumerated iterable <name5> ,
full_statement . append ( <val1>   % ( <name2> , <val4>   <name3> <name5> <  len ( <name6> ) - 1 else ''   ) )	replace % s in string <val1> with : <name2> and character <val4> <name3> <name5> is lesser than length of <name6> decremented by one ,
<name4> . <name6> ( <val5>   )	or with an empty string if its not , <name6> the resulting string to <name4> . <name6> string <val5> to <name4> .
<name1> <name4> . atomic ( <name5> = <name6> , <name2> = <name3> . features . can_rollback_ddl ) :	evaluate method <name4> .atomic <name1> arguments : <name5> set to <name6> and <name2> set to <name3> .features .can_rollback_ddl ,
<name2> <name5> . cursor ( ) <name3> <name6> :	<name2> the result , evaluate method <name5> .cursor , <name2> return value <name3> <name6> ,
<name6> :	<name6> ,
"\ <name6> . execute ( ""\\n"" . <name4> ( <name2> ) ) \"	<name4> <name2> into a string , separated by newlines , use it as an argument for the call to the method <name6> .execute .
except <name4> as <name1> :	if <name4> , renamed to <name1> , exception is caught ,
\ <name3> <name5> ( <val4> % ( tablename , force_text ( e ) ) ) \	\ <name3> an <name5> with an argument string <val4> , replace '%s' with : \
<name6> <name2> <name4> <name5> :	tablename and return value of the function force_text called with an argument e , respectively . <name6> every <name2> <name4> <name5> ,
<name5> . <name3> ( <name6> )	<name3> <name6> on the database that <name5> points to .
<name2> <name1> . verbosity >  <val3> :	<name2> <name1> .verbosity is greater than integer <val3> ,
<name3> . stdout . <name1> ( <val2> % <name6> )	replace '%s' in string <val2> with <name6> , <name1> it to <name3> .stdout .
<name5> <name1> . core . management . base <name4> <name3> , <name2>	<name5> <name1> .core .management .base <name4> <name3> and <name2> into default name space .
<name4> <name5> . db <name1> <name3> , <name2>	<name4> <name5> .db <name1> <name3> and <name2> into default name space .
<name2> <name5> ( <name3> ) :	derive the <name2> <name5> from the <name3> base <name2> .
"<name1> = ( ""Runs the command-line client for specified database, or the "" ""default database if none is provided."" )"	"<name1> is a tuple containing a string ""Runs the command-line client for specified database, or the default database if none is provided."" ."
<name2> = <name5>	<name2> is boolean <name5> .
def <name6> ( <name2> , <name1> ) :	define the method <name6> with <name2> and <name1> .
"<name2> . add_argument ( <val1>   , <name5> = <val4>   , <name6> = <val3>   , default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '    'open a shell. Defaults to the ""default"" database.'   )"	call the method <name2> .add_argument with arguments : string <val1> , <name5> set to string <val4> , <name6> set to string <val3> ,
def <name3> ( <name4> , ** <name2> ) :	"default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the ""default"" database.' . define the method <name3> with arguments <name4> and unpacked dictionary <name2> ."
<name2> = <name4> [ <name3> . <name1> ( <val5>   ) ]	<name1> the value under the <val5> key of the <name3> dictionary , use it as a key to access the element under the <name4> dictionary , substitute it for <name2> .
<name4> :	<name4> ,
<name1> . client . runshell ( )	call the method <name1> .client .runshell .
except <name2> :	if <name2> exception is caught ,
<name5> <name2> ( <val1>   % connection . client . executable_name )	<name5> an <name2> exception with an argument string <val1> ,
<name3> <name2> . core . management . base <name5> <name6>	<name3> <name2> .core .management .base <name5> <name6> into default name space .
def <name4> ( <name3> , <name2> = <name5> <name1> : <name1> . startswith ( '_'   ) ) :	define the function <name4> with 2 arguments : <name3> and <name2> as a <name5> function with an argument <name1> ,
<name1> dict ( ( <name4> , repr ( <name2> ) ) for <name4> , <name2> in module . __dict__ . items ( ) if not omittable ( <name4> ) )	<name1> dictionary created out of tuple elements <name4> and printable representation of <name2> ,
<name1> <name4> ( <name2> ) :	for every k and v in return value of the method module .__dict__ .items , only if result of the method omittable called with an argument k is false . derive the <name1> <name4> from the <name2> base <name1> .
<name6> = <name4>	<name6> is boolean <name4> .
def <name4> ( <name3> , <name1> ) :	define the method <name4> with 2 arguments <name3> and <name1> .
"<name3> . add_argument ( <val6>   , <name1> = <val2>   , <name5> = <val4>   , default = False , help = 'Display all settings, regardless of their value. '    'Default values are prefixed by ""###"".'   )"	call the method <name3> .add_argument with 5 arguments : string <val6> , <name1> set to string <val2> , <name5> set to string <val4> ,
def <name6> ( <name3> , ** <name5> ) :	"default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by ""###"".' define the method <name6> with arguments <name3> and unpacked dictionary <name5> ."
<name1> <name2> . conf <name4> <name3> , <name6>	<name1> <name2> .conf <name4> <name3> , <name6> into default name space .
<name5> . _setup ( )	call the method <name5> ._setup .
<name4> = <name2> ( <name6> . _wrapped )	call the function <name2> with an argument <name6> ._wrapped , substitute it for <name4> .
<name3> = <name4> ( <name2> )	call the function <name4> with an argument <name2> , substitute it for <name3> .
<name5> = [ ]	<name5> is an empty string .
<name6> <name1> <name4> <name2> ( <name3> ) :	<name6> every <name1> <name4> <name2> list of <name3> ,
<name4> <name3> <name1> <name2> <name5> :	<name4> <name3> is <name1> contained <name2> <name5> ,
<name5> . <name6> ( <val4> % ( <name3> , user_settings [ <name3> ] ) )	replace '%s' in string <val4> with <name3> and value under the <name3> <name3> of the user_setting dictionary , <name6> it to the <name5> .
elif <name3> [ <name1> ] != <name4> [ <name1> ] :	otherwise if value under the <name1> <name1> of the <name3> dictionary is not equal to the value under the <name1> <name1> of the <name4> dictionary ,
<name5> . <name6> ( <val1> % ( <name4> , user_settings [ <name4> ] ) )	replace '%s' in string <val1> with <name4> and value under the <name4> <name4> of the user_setting dictionary , <name6> it to the <name5> .
elif <name3> [ <val2>   ] :	otherwise if value under the key <val2> of the <name3> dictionary is true ,
<name1> . <name4> ( <val6> % ( <name3> , user_settings [ <name3> ] ) )	replace '%s' in string <val6> with <name3> and value under the <name3> <name3> of the user_setting dictionary , <name4> it to the <name1> .
\ <name1> '\\n'   . <name2> ( <name3> ) \	<name2> elements of the <name3> into a string , separated by newlies , <name1> the string .
<name6> <name4>	<name6> module <name4> .
<name2> <name5> <name3> <name1>	<name2> <name5> <name3> <name1> into default name space .
<name2> <name1> . <name4> <name5> <name4>	<name2> <name1> .apps <name5> <name4> into default name space .
<name1> <name5> . core . management . base <name2> <name6> , <name3>	<name1> <name5> .core .management .base <name2> <name6> and <name3> into default name space .
<name5> <name6> . core <name4> <name3>	<name5> <name6> .core <name4> <name3> into default name space .
<name5> <name2> . db <name1> <name6> , <name3>	<name5> <name2> .db <name1> <name6> and <name3> into default name space .
<name4> <name3> . utils . deprecation <name6> <name1>	<name4> <name3> .utils .deprecation <name6> <name1> into default name space .
<name6> <name3> ( <name2> ) :	derive the <name6> <name3> from the <name2> base <name6> .
"<name4> = ( <val3> ""format (using each model's default manager unless --all is "" ""specified)."" )"	<name4> is a tuple containing a string <val3>
def <name1> ( <name4> , <name2> ) :	format ( using each model ' s default manager unless - - all is specified ) . . define the method <name1> with arguments <name4> and <name2> .
<name4> . add_argument ( <val1>   , <name5> = <val3>   , nargs = '*'   , help = 'Restricts dumped data to the specified app_label or app_label.ModelName.'   )	call the method <name4> .add_argument with 4 arguments : string <val1> , <name5> set to string <val3> ,
<name6> . add_argument ( <val3>   , <name1> = <val2>   , dest = 'format'   , <name4> = 'Specifies the output serialization format for fixtures.'   )	nargs set to '*' and <name4> is a string 'Restricts dumped data to the specified app_label or app_label.ModelName.' . call the method <name6> .add_argument with 4 arguments : string <val3> , <name1> set to string <val2> ,
<name3> . add_argument ( <val2>   , <name1> = <name5> , <name6> = <val4>   , type = int , <name3> = 'Specifies the indent level to use when pretty-printing output.'   )	<name6> set to 'format' and <name3> is a string 'Specifies the output serialization format for fixtures.' . call the method <name3> .add_argument with 5 arguments : string <val2> , <name1> set to <name5> , <name6> set to <val4> ,
"<name3> . add_argument ( <val6>   , action = <val1>   , <name2> = <val5>   , <name4> = DEFAULT_DB_ALIAS , <name3> = 'Nominates a specific database to dump fixtures from. '    'Defaults to the ""default"" database.'   )"	type set to int and <name3> is a string 'Specifies the indent level to use when pretty-printing output.' . call the method <name3> .add_argument with 5 arguments : string <val6> , <name4> set to string <val1> , <name2> set to <val5> ,
<name6> . add_argument ( <val2>   , <val3>   , <name1> = <val5>   , <name4> = <val6>   , default = [ ] , <name2> = 'An app_label or app_label.ModelName to exclude '    '(use multiple --exclude to exclude multiple apps/models).'   )	"add set to DEFAULT_DB_ALIAS and <name2> is 'Nominates a specific database to dump fixtures from. Defaults to the ""default"" database.' . call the method <name6> .add_argument with 6 arguments : string <val2> , string <val3> , <name1> set to <val5> , <name4> set to <val6> ,"
<name2> . add_argument ( <val6>   , <val4>   , <name5> = <val1>   , <name3> = <val2>   , <name6> = False , <name4> = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'   )	<name6> is a an empty list and <name4> is a string '(use multiple --exclude to exclude multiple apps/models).' . call the method <name2> .add_argument with 6 arguments : string <val6> , string <val4> , <name5> is string <val1> , <name3> is string <val2> ,
<name6> . add_argument ( <val5>   , <name1> = <val4>   , dest = 'use_natural_foreign_keys'   , <name3> = <name2> , <name6> = 'Use natural foreign keys if they are available.'   )	<name3> is boolean <name2> and <name6> is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' . call the method <name6> .add_argument with 5 arguments : string <val5> , <name1> set to string <val4> ,
<name5> . add_argument ( <val3>   , <name6> = <val1>   , <name2> = 'use_natural_primary_keys'   , <name4> = <name5> , <name3> = 'Use natural primary keys if they are available.'   )	<name2> is string 'use_natural_foreign_keys' , <name4> is boolean <name5> and <name3> is a string 'Use natural foreign keys if they are available.' . call the method <name5> .add_argument with 5 arguments : string <val3> , <name6> set to <val1> ,
"<name6> . add_argument ( <val5>   , <val1>   , <name4> = <val3>   , <name2> = 'use_base_manager'   , <name6> = <name5> , <name1> = ""Use Django's base manager to dump all models stored in the database, "" ""including those that would otherwise be filtered or modified by a custom manager."" )"	<name2> is 'use_natural_primary_keys' , <name6> is boolean <name5> and <name1> is a string 'Use natural primary keys if they are available.' . call the method <name6> .add_argument with 6 arguments : string <val5> , string <val1> , <name4> set to <val3> ,
"<name4> . add_argument ( <val5>   , <name1> = <val2>   , <name3> = ""Only dump objects with given primary keys. "" ""Accepts a comma separated list of keys. "" ""This option will only work when you specify one model."" )"	<name1> is 'use_base_manager' , default is boolean False and <name3> is a string '(use multiple --exclude to exclude multiple apps/models).' . call the method <name4> .add_argument with 3 arguments : string <val5> , <name1> set to string <val2> ,
<name5> . add_argument ( <val4>   , <val6>   , <name3> = <name2> , <name1> = <val5>   , <name4> = 'Specifies file to which the output is written.'   )	"and <name4> is a string ""Only dump objects with given primary keys. Accepts a comma separated list of keys. "" ""This option will only work when you specify one model."" . call the method <name5> .add_argument with 5 arguments : string <val4> , string <val6> , <name3> is <name2> , <name1> set to string <val5> ,"
def <name6> ( <name1> , * <name4> , ** <name5> ) :	and help is a string 'Specifies file to which the output is written.' . define the method <name6> with arguments <name1> , unpacked list <name4> and unpacked dictionary <name5> .
<name5> = <name6> . <name2> ( <val3>   )	<name2> the value under the <val3> key of the <name6> dictionary , substitute the result for <name5> .
<name3> = <name5> . <name1> ( <val4>   )	<name1> the value under the <val4> key of the <name5> dictionary , substitute the result for <name3> .
using = <name2> . <name1> ( <val6>   )	<name1> the value under the <val6> key of the <name2> dictionary , substitute the result for database .
excludes = <name6> . <name4> ( <val5>   )	<name4> the value under the <val5> key of the <name6> dictionary , substitute the result for exclude .
<name3> = <name1> . <name5> ( <val2>   )	<name5> the value under the <val2> key of the <name1> dictionary , substitute the result for <name3> .
show_traceback = <name4> . <name3> ( <val2>   )	<name3> the value under the <val2> key of the <name4> dictionary , substitute the result for traceback .
<name6> = <name3> . <name4> ( <val2>   )	<name4> the value under the <val2> key of the <name3> dictionary , substitute the result for <name6> .
<name4> <name5> :	<name4> <name5> is true ,
<name4> . warn ( <val2> , RemovedInDjango19Warning )	call the function <name4> .warn with an argument string <val2> ,
<name4> = <name6> . <name1> ( 'use_natural_foreign_keys'   ) or use_natural_keys	and RemovedInDjango19Warning . <name1> the value under the ' use_natural_foreign_keys' key of the <name6> dictionary , substitute the result for <name4> .
<name4> = <name1> . <name5> ( <val3>   )	<name5> the value under the <val3> key of the <name1> dictionary , substitute the result for <name4> .
<name4> = <name2> . <name6> ( <val3>   )	<name6> the value under the <val3> key of the <name2> dictionary , substitute the result for <name4> .
<name3> = <name5> . <name1> ( <val2>   )	<name1> the value under the <val2> key of the <name5> dictionary , substitute the result for <name3> .
<name4> <name1> :	<name4> <name1> is true ,
<name2> = <name6> . <name3> ( <val1>   )	<name3> string <name6> by <val1> , substitute the result for <name2> .
else :	if not ,
<name4> = [ ]	<name4> is an empty list .
<name2> = <name1> ( )	<name2> is an empty <name1> .
<name4> = <name6> ( )	<name4> is an empty <name6> .
<name1> <name4> <name2> <name6> :	<name1> every <name4> <name2> <name6> ,
<name4> <val1>   <name2> <name3> :	<name4> <val1> is contained <name2> <name3> ,
<name6> :	<name6> ,
<name2> = <name5> . get_model ( <name1> )	call the method <name5> .get_model with <name1> as an argument , substitute it for <name2> .
except <name4> :	if <name4> exception is caught ,
<name2> <name5> ( <val6>   % <name3> )	<name2> an <name5> exception with an argument string <val6> , where '%s' is replaced with <name3> .
<name1> . <name2> ( <name3> )	<name2> <name3> to <name1> set .
else :	if not ,
<name2> :	<name2> ,
<name6> = <name2> . get_app_config ( <name1> )	call the method <name2> .get_app_config with an argument <name1> , substitute the result for <name6> .
except <name4> :	if <name4> exception is caught ,
<name1> <name5> ( <val3>   % <name2> )	<name1> <name5> with an argument string <val3> , where '%s' is replaced with <name2> .
<name2> . <name5> ( <name6> )	<name5> <name6> to <name2> set .
<name3> len ( <name4> ) == <val6> :	<name3> length of <name4> equals integer <val6> ,
<name3> <name4> :	<name3> <name4> is true ,
<name5> <name4> ( <val3> )	<name5> an <name4> exception with an argument string <val3> .
<name3> = <name2> ( ( <name5> , <name6> ) for <name5> in apps . get_app_configs ( ) if <name5> . models_module <name4> not <name6> <name1> <name5> not in excluded_apps )	<name3> <name4> an instance of <name2> class , created with an argument a tuple containing elements : <name5> <name1> <name6> ,
else :	for every app_config in return value of the method apps .get_app_configs , only if app_config .models_module is not None , and app_config is not contained in excluded_apps . if not ,
<name5> len ( <name6> ) >  <val1> <name4> <name3> :	<name5> length of <name6> is greater than integer <val1> <name4> <name3> is true ,
<name4> <name5> ( <val3> )	<name4> an <name5> exception with an argument string <val3> .
<name6> = <name2> ( )	<name6> is an instance of a class <name2> .
<name4> <name5> <name6> <name3> :	<name4> every <name5> <name6> <name3> ,
<name4> :	<name4> ,
<name4> , <name6> = <name3> . <name1> ( <val5>   )	<name1> <name3> by <val5> , assign the result to <name4> and <name6> , respectively .
<name3> :	<name3> ,
     <name6> = <name2> . get_app_config ( <name3> )	call the method <name2> .get_app_config with an argument <name3> , substitute the result for <name6> .
except <name2> :	if <name2> exception is caught ,
"     <name5> <name2> ( ""Unknown application: %s"" % app_label )"	<name5> <name2> with an argument string 'Unknown app in excludes: %s' , where '%s' is replaced with exclude .
<name5> <name6> . models_module <name4> <name1> <name2> <name6> <name3> <name5> :	<name5> <name6> .models_module <name4> <name1> <name2> <name6> <name4> contained <name3> <name5> ,
     continue	skip this loop iteration .
<name4> :	<name4> ,
     <name4> = <name5> . get_model ( <name6> )	call the method <name5> .get_model with an argument <name6> , substitute the result for <name4> .
except <name1> :	if <name1> exception is caught ,
"     <name4> <name3> ( ""Unknown model: %s.%s"" % ( <name1> , <name6> ) )"	<name4> <name3> with an argument string 'Unknown model: %s' , where '%s' is replaced with <name1> and <name6> , respectively .
<name5> = <name6> . setdefault ( <name1> , [ ] )	call the method <name6> .setdefault with 2 arguments <name1> and an empty list , substitute the result for <name5> .
<name4> <name5> <name3> <name6> <name1> :	<name4> <name5> <name3> <name6> <name1> ,
     <name5> model <name3> <name6> <name4> :	<name5> mode is <name3> contained <name6> <name4> ,
         <name2> . <name4> ( <name6> )	<name4> <name6> to <name2> .
except <name2> :	if <name2> exception is caught ,
<name2> <name6> :	<name2> <name6> is true ,
     <name6> <name4> ( <val3> )	<name6> an <name4> exception with an argument string <val3> .
<name6> = <name4>	substitute <name4> for <name6> .
<name6> :	<name6> ,
     <name3> = <name6> . get_app_config ( <name4> )	call the method <name6> .get_app_config with an argument <name4> , substitute the result for <name3> .
except <name4> :	if <name4> exception is caught ,
     <name4> <name1> ( <val6> % <name5> )	<name4> <name1> with an argument string <val6> , where '%s' is replaced with <name5> .
<name6> <name4> . models_module <name3> <name5> <name1> <name4> <name2> <name6> :	<name6> <name4> .models_module <name3> <name5> <name1> <name4> <name3> contained <name2> <name6>
     continue	skip this loop iteration .
<name4> [ <name1> ] = <name2>	value under the <name1> key of the <name4> is <name2> .
<name4> <name6> <name5> <name2> <name3> . get_public_serializer_formats ( ) :	<name4> <name6> is <name5> contained <name2> return value of the method <name3> .get_public_serializer_formats ,
<name5> :	<name5> ,
<name2> . get_serializer ( <name6> )	call the method <name2> .get_serializer with an argument <name6> .
except <name2> . SerializerDoesNotExist :	if <name2> .SerializerDoesNotExist exception is caught ,
pass	do nothing .
<name4> <name1> ( <val3> % <name6> )	<name4> <name1> with an argument string <val3> , where '%s' is replaced with <name6> .
def <name3> ( ) :	define the function <name3> .
<name3> <name2> <name1> <name6> ( <name4> . items ( ) ) :	call the method <name4> .items , use the result as an argument <name3> the call to the function <name6> , <name3> every <name2> <name1> result ,
<name2> <name4> <name3> <name1> :	<name2> <name4> is contained <name3> <name1> ,
continue	skip this loop iteration .
<name5> not <name1> . _meta . proxy <name4> <name2> . allow_migrate ( <name3> , <name1> ) :	<name5> <name1> ._meta .proxy is false <name4> return value of the function <name2> .allow_migrate called with arguments <name3> <name4> <name1> is true ,
<name1> <name3> :	<name1> <name3> is true ,
     <name1> = <name3> . _base_manager	substitute <name3> ._base_manager for <name1> .
else :	if not ,
     <name2> = <name4> . _default_manager	substitute <name4> ._default_manager for <name2> .
queryset = <name6> . <name1> ( <name1> ) . <name2> ( <name4> . _meta . pk . name )	call the method <name6> .using with an argument <name1> , call the method <name2> on the result with an argument <name4> ._meta .pk .name ,
<name3> <name5> :	substitute the result for queryset . <name3> <name5> is true ,
     <name1> = <name1> . filter ( <name6> = <name4> )	call the method <name1> .filter with an argument <name6> set to <name4> , substitute the result for <name1> .
<name6> <name2> <name5> <name1> . iterator ( ) :	<name6> every <name2> <name5> result of the method <name1> .iterator ,
     <name2> <name6>	<name2> <name6> , as an return value of the generator .
<name5> :	<name5> ,
<name4> . stdout . ending = <name6>	<name4> .stdout .ending is <name6> .
<name3> = <name2> ( <name4> , 'w'   ) <name1> <name4> else <name6>	<name2> the <name4> file in writing mode <name1> <name4> is true , assign the file descriptor to <name3> , otherwise <name3> is <name6> .
<name3> :	<name3> ,
<name4> . serialize ( <name6> , <name2> ( ) , <name5> = <name5> , use_natural_foreign_keys = use_natural_foreign_keys , use_natural_primary_keys = use_natural_primary_keys , stream = stream or self . stdout )	call the method <name4> .serialize with 6 arguments : <name6> , result of the function <name2> , <name5> set to <name5> ,
<name1> :	use_natural_foreign_keys set to use_natural_foreign_keys , use_natural_primary_keys set to use_natural_primary_keys , and stream set to stream , if the stream is true , otherwise stream set to self .stdout . <name1> perform ,
<name4> <name5> :	<name4> <name5> is true ,
<name5> . <name6> ( )	<name6> the file <name5> .
except <name2> as <name4> :	if <name2> , renamed to <name4> , exception is caught ,
<name2> <name5> :	<name2> <name5> is true ,
<name3>	<name3> an exception .
<name1> <name6> ( <val5> % <name2> )	<name1> <name6> with an argument string <val5> , where '%s' is replaced with <name2> .
def <name6> ( <name5> ) :	define the function <name6> with an argument <name5> .
<name6> = [ ]	<name6> is an empty list .
<name6> = <name1> ( )	<name6> is an empty <name1> .
<name3> <name1> , <name4> <name6> <name5> :	<name3> every <name1> and <name4> <name6> <name5> ,
<name2> <name3> <name1> <name6> :	<name2> <name3> <name1> <name6> ,
<name5> = <name1> . get_models ( )	call the method <name1> .get_models , substitute the result fr <name5> .
<name6> <name1> <name2> <name4> :	<name6> every <name1> <name2> <name4> ,
<name2> . <name4> ( <name6> )	<name4> <name6> to <name2> set .
<name1> hasattr ( <name4> , <val2>   ) :	<name1> <name4> has an <val2> attribute ,
<name5> = getattr ( <name1> . natural_key , <val2>   , [ ] )	get <val2> attribute of the <name1> .natural_key , substitute it for <name5> , if the attribute doesnt exist , <name5> in an empty list .
<name4> <name3> :	<name4> <name3> is true ,
<name1> = [ <name6> . get_model ( <name4> ) <name5> <name4> <name3> <name1> ]	<name5> every <name4> <name3> <name1> call the method <name6> .get_model with an argument <name4> , and append the result to the list , substitute it <name5> <name1> .
else :	if not ,
<name6> = [ ]	<name6> is an empty list .
<name5> <name2> <name3> <name6> . _meta . fields :	<name5> every <name2> <name3> <name6> ._meta .fields ,
<name2> hasattr ( <name5> . rel , <val4>   ) :	<name2> <name5> .rel has an <val4> attribute ,
<name6> = <name3> . rel . to	substitute <name3> .rel .to with <name6> .
<name1> hasattr ( <name6> , <val3>   ) <name5> <name6> != <name2> :	<name1> <name6> has an attribute <val3> <name5> <name6> is not equal to <name2> ,
     <name3> . <name4> ( <name6> )	<name4> <name6> to <name3> .
<name6> <name4> <name3> <name5> . _meta . many_to_many :	<name6> every <name4> <name3> <name5> ._meta .many_to_many ,
<name1> <name2> . rel . through . _meta . auto_created :	<name1> <name2> .rel .through ._meta .auto_created is true ,
<name6> = <name5> . rel . to	substitute <name5> .rel .to for <name6> .
<name1> hasattr ( <name2> , <val6>   ) <name4> <name2> != <name5> :	<name1> <name2> has an <val6> attribute <name4> <name2> is not equal to <name5> ,
     <name3> . <name1> ( <name2> )	<name1> <name2> to <name3> .
<name5> . <name1> ( ( <name4> , <name3> ) )	<name1> a tuple containing 2 elements : <name4> and <name3> to <name5> .
<name1> . reverse ( )	call the methof <name1> .reverse .
<name6> = [ ]	<name6> is an empty list .
<name1> <name3> :	<name1> <name3> is true ,
<name2> = [ ]	<name2> is an empty list .
<name5> = <name3>	<name5> is boolean <name3> .
<name5> <name4> :	<name5> <name4> is true ,
<name6> , <name1> = <name2> . pop ( )	remove first element from <name2> , assign it to <name6> and <name1> , respectively .
<name5> = <name4>	<name5> is boolean <name4> .
<name1> candidate <name2> ( ( <name4> <name6> <name2> <name5> or <name4> <name2> <name3> ) <name1> <name4> <name2> <name1> ) :	<name1> every <name4> <name2> <name1> , if <name4> is <name6> contained <name2> <name5> and <name4> is contained <name2> <name3> add boolean True to a tuple ,
<name2> not <name1> :	otherwise add boolean False , for every <name1> in the result perform following , <name2> <name1> is false ,
<name1> = <name3>	<name1> is boolean <name3> .
<name5> <name6> :	<name5> <name6> is true ,
<name1> . <name5> ( <name2> )	<name5> <name2> to <name1> .
<name6> = <name4>	<name6> is boolean <name4> .
else :	if not ,
<name2> . <name3> ( ( <name5> , <name4> ) )	<name3> a tuple containing 2 elemetns : <name5> and <name4> , to <name2> .
<name6> not <name3> :	<name6> <name3> is false ,
<name3> <name1> ( <val5> % ', '   . join ( '%s.%s'   % ( model . _meta . app_label , model . _meta . object_name ) for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) ) )	<name3> an <name1> with argument : string <val5> , where '%s' is replaced with :
<name6> = <name2>	model ._meta .app_label and model ._meta .object_name joined into a string , with separator '.' , result joined into a string , separated by string ', ' for every model and deps in sorted list of elements <name2> sorted by key : return value of the lambda function with an argument obj , and result the __name__ field of the first element of obj . substitute <name2> for <name6> .
<name4> <name2>	<name4> <name2> .
<name4> <name6>	<name4> module <name6> .
<name6> <name4> <name1> <name5>	<name6> <name4> <name1> <name5> into default name space .
<name6> <name2> . <name1> <name4> <name1>	<name6> <name2> .apps <name4> <name1> into default name space .
<name3> <name2> . db <name6> <name1> , <name5> , <name4> , <name3>	<name3> <name2> .db <name6> <name1> , <name5> , <name4> and <name3> into default name space .
<name5> <name4> . core . management <name2> <name6>	<name5> <name4> .core .management <name2> <name6> into default name space .
<name2> <name4> . core . management . base <name1> <name5> , <name3>	<name2> <name4> .core .management .base <name1> <name5> and <name3> into default name space .
<name6> <name1> . core . management . color <name5> <name2>	<name6> <name1> .core .management .color <name5> <name2> into default name space .
<name3> <name4> . core . management . sql <name1> <name2> , <name5>	<name3> <name4> .core .management .sql <name1> <name2> and <name5> into default name space .
<name4> <name2> . utils . six . moves <name6> <name5>	<name4> <name2> .utils .six .moves <name6> <name5> into default name space .
<name2> <name1> . utils <name4> <name6>	<name2> <name1> .utils <name4> <name6> into default name space .
<name5> <name2> ( <name4> ) :	derive the <name5> <name2> from the <name4> base <name5> .
"<name1> = ( <val4>    'migrations. Unmigrated apps will also have their initial_data '    'fixture reloaded. Does not achieve a ""fresh install"" state.'   )"	<name1> is a tuple containing a string : <val4>
def <name1> ( <name4> , <name3> ) :	"'migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a ""fresh install"" state.' define the <name1> with arguments <name4> and <name3> ."
<name1> . add_argument ( <val4>   , <name6> = <val2>   , dest = 'interactive'   , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.'   )	call the method <name1> .add_argument with 5 arguments : string <val4> , <name6> set to string <val2> ,
"<name4> . add_argument ( <val2>   , <name1> = <val3>   , <name6> = <val5>   , <name4> = DEFAULT_DB_ALIAS , <name2> = 'Nominates a database to flush. Defaults to the ""default"" database.'   )"	<name6> set to string 'interactive' , <name4> set to boolean True , <name2> as a string 'Tells Django to NOT prompt the user for input of any kind.' . call the method <name4> .add_argument with 5 arguments : string <val2> , <name1> set to string <val3> , <name6> as a string <val5> ,
<name3> . add_argument ( <val5>   , <name1> = <val6>   , dest = 'load_initial_data'   , <name4> = True , <name2> = 'Tells Django not to load any initial data after database synchronization.'   )	"<name4> set to DEFAULT_DB_ALIAS and <name2> as a string 'Nominates a database to flush. Defaults to the ""default"" database.' . call the method <name3> .add_argument with 5 arguments : string <val5> , <name1> set to string <val6> ,"
def <name5> ( <name1> , ** <name3> ) :	dest set to string 'load_initial_data' , default = True and help as a string 'Tells Django not to load any initial data after database synchronization.' . define the method <name5> with arguments <name1> and unpacked dictionary <name3> .
<name4> = <name2> . get ( <val3>   )	substitute value under the <val3> key of the <name2> dictionary for <name4> .
<name3> = <name4> [ <name1> ]	substitute value under the <name1> key of the <name4> dictionary for <name3> .
<name4> = <name2> . get ( <val3>   )	substitute value under the <val3> key of the <name2> dictionary for <name4> .
<name3> = <name2> . get ( <val1>   )	substitute value under the <val1> key of the <name2> dictionary for <name3> .
<name3> = <name5> . <name1> ( <val6>   , <name4> )	<name1> the value <val6> key of the <name5> dictionary , if it exists substitute it for <name3> , otherwise <name3> is boolean <name4> .
<name5> = <name4> . <name1> ( <val2>   , <name6> )	<name1> the value <val2> key of the <name4> dictionary , if it exists substitute it for <name5> , otherwise <name5> is boolean <name6> .
<name2> = <name1> . <name4> ( <val3>   , <name5> )	<name4> the value <val3> key of the <name1> dictionary , if it exists substitute it for <name2> , otherwise <name2> is boolean <name5> .
<name3> . style = <name4> ( )	call the function <name4> , substitute it for <name3> .style .
<name5> <name3> <name6> <name4> . get_app_configs ( ) :	<name5> every <name3> <name6> return value of the method <name4> .get_app_configs ,
<name6> :	<name6> ,
<name6> ( '.management'   , <name2> . name )	call the function <name6> with 2 arguments : string .management and <name2> .name .
except <name4> :	if <name4> exception is caught ,
pass	do nothing .
sql_list = <name5> ( <name1> . style , <name4> , <name3> = <name2> , reset_sequences = reset_sequences , allow_cascade = allow_cascade )	call the method <name5> with 5 arguments : <name1> .style , <name4> , <name3> set to boolean <name2> ,
<name2> <name6> :	reset_sequences set to reset_sequences , allow_cascade set to allow_cascade , substitute the result for sql_list . <name2> <name6> is true ,
"<name6> = <name5> ( """" ""You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: "" """" % connection . settings_dict [ 'NAME'   ] )"	"request user <name5> from the standard <name5> , assign it o <name6> , with the query string : ""You have requested a flush of the database."""
else :	"This will IRREVERSIBLY DESTROY all data currently in the % r database , and return each table to an empty state . ""Are you sure you want to do this?"" Type 'yes' to continue , or 'no' to cancel : "" , where '%s' is replaced with value under the 'NAME' key of the connection .settings_dict dictionary . if not ,"
<name5> = <val2>	<name5> is a string <val2> .
<name5> <name3> == <val2>   :	<name5> <name3> equals a string <val2> ,
<name5> :	<name5> ,
<name2> <name4> . atomic ( <name1> = <name3> , <name6> = <name5> . features . can_rollback_ddl ) :	call the method <name4> .atomic <name2> 2 arguments : <name1> set to <name3> , <name6> set to <name5> .features .can_rollback_ddl ,
<name4> <name5> . <name1> ( ) <name3> <name1> :	<name4> the result , call the method <name5> .cursor , <name4> the result <name3> <name1> ,
     <name4> <name3> <name1> <name2> :	<name4> every <name3> <name1> <name2> ,
         <name4> . execute ( <name3> )	call the method <name4> .execute with an argument <name3> .
except <name5> as <name4> :	if <name5> , renamed to <name4> , exception is caught ,
"\ <name1> = ( <val4> ""  * The database isn't running or isn't configured correctly.\\n"" ""  * At least one of the expected database tables doesn't exist.\\n"" ""  * The SQL was invalid.\\n"" ""Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\\n"" ""The full error: %s"" ) % ( connection . settings_dict [ 'NAME'   ] , e ) \"	\ <name1> is a tuple containing a string : <val4> \
<name5> . reraise ( <name4> , <name4> ( <name3> ) , sys . exc_info ( ) [ 2 ] )	"\   * The database isn 't running or isn' t configured correctly . \\ n * At least one of the expected database tables doesn 't exist.\\n   ""  * The SQL was invalid.\\nHint: Look at the output of ' django - admin .py sqlflush '. That' s the SQL this command wasn 't able to run.\\n""   ""The full error: %s"", where ' % s ' is replaced by value under the ' NAME '  key of the connection .settings_dict dictionary and e . call the function <name5> .reraise with 3 arguments : <name4> , <name4> created with argument <name3> , \"
<name4> not <name5> :	and third element of the return value of the function sys .exc_info . <name4> <name5> is false ,
<name6> . emit_post_migrate ( <name1> , <name3> , <name2> )	call the method <name6> .emit_post_migrate with arguments <name1> , <name3> and <name2> .
<name3> <name2> . get ( <val5>   ) :	<name3> value under the <val5> key of the <name2> dictionary is true ,
<name6> ( <val5>   , <val3>   , ** <name4> )	call the function <name6> with 3 arguments : string <val5> , string <val3> and unpacked dictionary <name4> .
else :	if not ,
\ <name5> . stdout . <name6> ( <val3> ) \	\ <name6> string <val3> to <name5> .stdout stream . \
@  staticmethod	class static method ,
def <name3> ( <name5> , <name1> , <name6> ) :	define the method <name3> with arguments <name5> , <name1> and <name6> .
<name5> = [ ]	<name5> is an empty list .
<name1> <name3> <name5> <name2> . get_app_configs ( ) :	<name1> every <name3> <name5> return value of the method <name2> .get_app_configs ,
all_models . extend ( <name4> . get_migratable_models ( <name2> , <name5> , <name3> = <name6> ) )	call the method <name4> .get_migratable_models with arguments <name2> , <name5> and <name3> set to boolean <name6> ,
<name3> ( <name5> ( <name1> ) , <name6> , <name2> , <name4> )	extend <name1> list with the result . call the function <name3> with 4 arguments : <name1> converted into a <name5> , <name6> , <name2> and <name4> .
<name6> <name1> <name3> <name4>	<name6> <name1> <name3> <name4> into default name space .
<name3> <name4> <name2> <name6>	<name3> <name4> <name2> <name6> into default name space .
<name3> <name5>	<name3> module <name5> .
<name5> <name1>	<name5> module <name1> .
<name1> <name6> . core . management . base <name5> <name2> , <name3>	<name1> <name6> .core .management .base <name5> <name2> and <name3> into default name space .
<name5> <name2> . db <name1> <name3> , <name4>	<name5> <name2> .db <name1> <name3> and <name4> into default name space .
<name4> <name2> ( <name3> ) :	derive the <name4> <name2> from the <name3> base <name4> .
<name5> = <val6>	<name5> is an string <val6> .
<name2> = <name6>	<name2> is boolean <name6> .
<name2> = <val1>	<name2> is a string <val1> .
def <name6> ( <name3> , <name1> ) :	define the method <name6> with arguments <name3> and <name1> .
"<name2> . add_argument ( <val6>   , <name1> = <val3>   , <name5> = <val4>   , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '    'introspect. Defaults to using the ""default"" database.'   )"	call the method <name2> .add_argument with 5 arguments : string <val6> , <name1> set to string <val3> , <name5> as a string <val4> ,
def <name5> ( <name6> , ** <name1> ) :	"default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect. Defaults to using the ""default"" database.' . define the method <name5> with 2 arguments : <name6> and unpacked dictionary <name1> ."
<name3> :	<name3> ,
<name6> <name4> <name2> <name1> . handle_inspection ( <name5> ) :	<name6> every <name4> <name2> return value of the method <name1> .handle_inspection called with an argument <name5> ,
"\ <name6> . stdout . <name3> ( ""%s\\n"" % <name1> ) \"	append new <name1> to <name1> , <name3> it to <name6> .stdout stream .
except <name4> :	if <name4> exception is caught ,
<name5> <name6> ( <val2> )	<name5> an <name6> exception with an argument <val2> .
def <name2> ( <name5> , <name3> ) :	define the method <name2> with 2 argument : <name5> and <name3> .
connection = <name2> [ <name4> [ <val5>   ] ]	get value under the <val5> key of the <name4> dictionary , use it as a key to get the value from the <name2> dictionary ,
<name2> = <name5> . <name4> ( <val1>   )	substitute the result for connection . <name4> the value under the <val1> key of the <name5> dictionary , substitute it for <name2> .
<name3> = <name1> <name4> : <name6> . sub ( r '[^a-zA-Z0-9]'   , ''   , <name4> . title ( ) )	<name3> is a <name1> function with an argument <name4> , return value is the return value of the <name6> .sub method ,
<name2> <name1> . <name4> ( ) <name3> <name4> :	otherwise returns s . call the method <name1> .cursor , <name2> the result <name3> <name4> ,
<name4> <val6>	<name4> string <val6> as the result .
<name1> <val4>	<name1> string <val4> as the result .
<name5> <val3>	<name5> string <val3> as the result .
<name1> <val4>	<name1> string <val4> as the result .
<name4> <val2>	<name4> string <val2> as the result .
<name1> <val2>	<name1> string <val2> as the result .
<name4> <val3>	<name4> string <val3> as the result .
<name2> <val6>	<name2> string <val6> as the result .
<name1> <val4>	<name1> string <val4> as the result .
<name1> ''	<name1> and empty string as the result .
<name4> <val3>   % <name5> . db_module	"<name4> string <val3> % <name5> .db_module as the result , where ""%s"" is replaced with <name5> .db_module ."
<name1> = [ ]	<name1> is an empty list .
<name4> <name6> <name5> <name3> . introspection . table_names ( <name2> ) :	<name4> every <name6> <name5> return value of the method <name3> .introspection .table_names called with an argument <name2> ,
<name2> <name5> <name6> <name4> <name1> <name3> <name2> ( <name5> ) :	<name2> <name5> <name6> <name4> <name1> <name3> <name5> <name6> <name2> object ,
<name5> not <name6> ( <name2> ) :	call the function <name6> with an argument <name2> , <name5> it evaluates to true ,
     continue	skip this loop iteration ,
<name1> ''	<name1> and empty string as the result .
<name5> ''	<name5> and empty string as the result .
<name5> 'class %s(models.Model):'   % table2model ( table_name )	"<name5> string 'from %s import models' % self .db_module as the result , where ""%s"" is replaced with result of the call to the function ,"
<name2> . <name3> ( <name4> ( <name1> ) )	<name4> with an argument <name1> . call the function <name4> with an argument <name1> , <name3> the result to <name2> .
<name3> :	<name3> ,
<name6> = <name3> . introspection . get_relations ( <name4> , <name1> )	call the method <name3> .introspection .get_relations with 2 arguments <name4> , <name1> and substitute the result for <name6> .
except <name5> :	if <name5> exception is caught ,
<name4> = { }	<name4> is an empty dictionary .
<name5> :	<name5> ,
<name5> = <name4> . introspection . get_indexes ( <name2> , <name1> )	call the method <name4> .introspection .get_relations with 2 arguments <name2> , <name1> and substitute the result for <name5> .
except <name3> :	if <name3> exception is caught ,
<name6> = { }	<name6> is an empty dictionary .
<name5> = [ ]	<name5> is an empty list .
<name1> <name2> , <name6> <name4> enumerate ( <name5> . introspection . get_table_description ( <name3> , <name1> ) ) :	<name1> every <name2> and <name6> <name4> enumerated result of the method <name5> .introspection .get_table_description called with arguments : <name3> and <name1> ,
<name1> = [ ]	<name1> is an empty list .
<name3> = <name2> ( )	<name3> is an instance of the class <name2> .
<name1> = <name6> [ 0 ]	substitute first element of <name6> for <name1> .
<name4> = <name3> <name5> <name2>	if <name3> is contained <name5> <name2> , <name4> is boolean True , otherwise <name4> is boolean False .
<name3> , <name5> , <name6> = <name4> . normalize_col_name ( <name2> , <name1> , <name3> )	call the method <name4> .normalize_col_name with 3 arguments <name2> , <name1> , <name3> , assign the result to <name3> , <name5> and <name6> , respectively .
<name5> . update ( <name3> )	add <name3> to <name5> dictionary .
<name1> . <name4> ( <name5> )	<name4> <name1> list with <name5> .
<name6> . <name1> ( <name3> )	<name1> <name3> to <name6> list .
<name4> <name3> <name6> <name1> :	<name4> <name3> is contained <name6> <name1> ,
     <name3> <name1> [ <name5> ] [ <val2>   ] :	<name3> value under the <val2> key of the dictionary contained under the <name5> key of the dictionary <name1> is true ,
         <name3> [ <val2>   ] = <name4>	value under the <val2> key of the <name3> dictionary is boolean <name4> ,
elif <name3> [ <name2> ] [ <val1>   ] :	otherwise if , if value under the <val1> key of the dictionary contained under the <name2> key of the dictionary <name3> is true ,
         <name2> [ <val4>   ] = <name1>	value under the <val4> key of the <name2> dictionary is boolean <name1> ,
<name5> <name1> :	<name5> <name1> is true ,
     <name3> = <val4> <name2> <name5> [ <name6> ] [ 1 ] == <name1> else table2model ( <name5> [ <name6> ] [ 1 ] )	<name2> second element of the <name6> - th row of <name5> equals <name1> , <name3> is string <val4> ,
<name5> <name4> <name6> <name3> :	otherwise call the method table2model with second element of the i - th row of relations and substitute it for <name4> . <name5> <name4> is contained <name6> <name3> ,
         <name2> = 'ForeignKey(%s'   % <name6>	append <name6> to string ' ForeignKey ( , substitute the result for <name2> .
else :	if not ,
else :	if not ,
       <name4> , <name3> , field_notes = <name6> . get_field_type ( <name1> , <name2> , <name5> )	call the method <name6> .get_field_type with 3 arguments <name1> , <name2> and <name5> , assign the result to <name4> , <name3> ,
<name3> . update ( <name2> )	field_notes , respectively . add <name2> to <name3> dictionary .
<name6> . <name1> ( <name5> )	<name1> <name6> list with <name5> .
<name2> += <val4>	append <val4> to <name2> .
<name2> <name6> == <val4>   <name1> <name3> == {  <val5>   : <name2> }  :	<name2> <name6> equals string <val4> <name1> <name3> equals a dictionary with 1 entry : boolean <name2> for <val5> ,
     <name5> <name2> == <val1>   :	<name5> <name2> equals a string <val1> ,
         continue	skip this loop iteration .
elif <name5> == <val2>   <name1> not <name4> . features . can_introspect_autofield :	otherwise if <name5> equals a string <val2> <name1> <name4> .features .can_introspect_autofield is false ,
         <name5> . <name1> ( <val4>   )	<name1> string <val4> to <name5> .
<name6> <name1> [ 6 ] :	<name6> seventh element of <name1> is true ,
     <name1> <name6> == <val5>   :	<name1> <name6> equals a string <val5> ,
         <name1> = <val3>	<name1> is a string <val3>
else :	if not ,
         <name2> [ <val4>   ] = <name5>	value under the <val4> key of the <name2> dictionary is boolean <name5> .
<name3> <name4> <name2> in ( <val1>   , <val5>   ) :	<name3> <name4> is <name2> equal to string <val1> or string <val5> ,
             <name5> [ <val1>   ] = <name4>	value under the <val1> key of the <name5> dictionary is boolean <name4> .
<name2> = <val1>   % ( <name6> , ''   <name3> <val5>   <name4> <name2> else 'models.'   , <name2> , )	<name2> is a string <val1> , where '%s' is replaced with : <name6> , an empty string <name3> <val5> is contained <name4> <name2> ,
<name5> <name4> :	or with string 'models.' <name5> it is not and field_type . <name5> <name4> is true ,
     <name6> not <name4> . endswith ( <val5>   ) :	<name6> <name4> doesnt end with <val5> ,
         <name1> += <val5>	append string <val5> to <name1> .
field_desc += ', '   . join ( [ <val2>   % ( <name1> , <name6> ( repr ( <name5> ) ) ) for <name1> , <name5> <name4> extra_params . items ( ) ] )	<name4> string <val2> replace '%s' with <name1> and return value of the function <name6> with an argument printable representation of <name5> ,
<name6> += <val1>	for every k and v in return value of the extra_params .items method , join all results into a string separated by a string ', ' , substitute it for <name6> . append string <val1> to <name6> .
<name1> <name3> :	<name1> <name3> is true ,
     <name3> += '  # '   + ' '   . <name5> ( <name2> )	<name5> elements of <name2> into a string , separated by whitespaces , append it to the string ' #' , append the result to <name3> .
<name5> <val6>   % <name1>	<name5> string <val6> , where '%s' is replaced with <name1> .
<name3> <name2> <name1> <name6> . get_meta ( <name5> ) :	<name3> <name2> <name1> return value of the method <name6> .get_meta called with an argument <name5> .
<name1> <name3>	<name1> <name3> as the result .
def <name2> ( <name1> , <name5> , <name4> , <name3> ) :	define the method <name2> with 4 arguments : <name1> , <name5> , <name4> and <name3> .
<name4> = { }	<name4> is an empty dictionary .
<name3> = [ ]	<name3> is an empty list .
<name6> = <name1> . lower ( )	convert <name1> to lowercase , substitute the result for <name6> .
<name6> <name2> != <name5> :	<name6> <name2> is not equal to <name5> ,
<name6> . <name5> ( <val4>   )	<name5> string <val4> to <name6> .
<name4> <name2> :	<name4> <name2> ,
<name4> <name1> . endswith ( <val3>   ) :	<name4> <name1> ends with string <val3> ,
<name5> = <name5> [ : - <val6> ]	substitute <name5> , without the last <val6> elements for <name5> .
else :	if not ,
<name3> [ <val5>   ] = <name1>	substitute <name1> for value under the <val5> key of the <name3> dictionary .
\ <name3> , num_repl = <name1> . subn ( r <val6>   , <val4>   , <name3> ) \	\ cal the method <name1> .subn with 3 arguments : raw string <val6> , string <val4> and <name3> . \
<name5> <name2> >  <val4> :	<name5> <name2> is greater than integer <val4> ,
<name4> . <name5> ( <val2>   )	<name5> string <val2> to <name4> .
<name6> <name1> . find ( <val2>   ) >= <val5> :	call the method <name1> .find , with an argument string <val2> , <name6> it evaluates to greater or equal than integer <val5> ,
<name5> <name3> . find ( <val2>   ) >= <val4> :	<name5> the result of the method <name3> .find , called with an argument string <val2> is greater or equals integer <val4> ,
<name6> = <name6> . <name3> ( <val4>   , <val5>   )	<name3> all the occurrences of <val4> with <val5> in <name6> .
<name2> <name1> . lower ( ) . <name5> ( <val3>   ) >= <val6> :	convert <name1> to lowercase , on the result call the method <name5> with an argument string <val3> , <name2> the result is greater of equal to integer <val6> ,
<name6> . <name1> ( <val5> )	<name1> string <val5> to <name6> .
<name3> <name6> . startswith ( <val2>   ) :	<name3> <name6> starts with a string <val2> ,
<name1> = 'field%s'   % <name1>	convert <name1> to a string and append it to string 'field' , substitute the result for <name1> .
<name2> . <name1> ( <val3> )	<name1> string <val3> to <name2> .
<name4> <name3> . endswith ( <val5>   ) :	<name4> <name3> ends with a string <val5> ,
<name3> = '%sfield'   % <name3>	convert <name3> to a string and append string 'field' to it , substitute the result for <name3> .
<name6> . <name2> ( <val3> )	<name2> string <val3> to <name6> .
<name6> <name2> . iskeyword ( <name4> ) :	call the method <name2> .iskeyword with an argument <name4> , <name6> it evaluates to true ,
<name5> += <val2>	append string <val2> to <name5> .
<name6> . <name2> ( <val5>   )	<name2> string <val5> to <name6> .
<name2> <name4> [ 0 ] . isdigit ( ) :	<name2> first element of <name4> is digit ,
<name6> = 'number_%s'   % <name6>	convert <name6> to a string and append it to string 'number_' , substitute the result for <name6> .
<name4> . <name5> ( <val6> )	<name5> string <val6> to <name4> .
<name4> <name2> <name1> <name3> :	<name4> <name2> is contained <name1> <name3> ,
<name1> = <val2>	<name1> is an integer <val2> .
<name5> <val3>   % ( <name2> , <name6> ) <name4> <name1> :	<name4> string <val3> , replace '%s' with <name2> and '%d' with <name6> , <name5> the result is contained <name4> <name1> ,
<name4> += 1	increment <name4> by one .
<name1> = <val6>   % ( <name1> , <name4> )	in string <val6> , replace '%s' with <name1> and '%d' with <name4> , substitute the result for <name1> .
<name4> . <name5> ( <val2>   )	<name5> string <val2> to <name4> .
<name5> <name3> != <name2> <name1> <name6> :	<name5> <name3> is not equal to <name2> <name1> <name6> is true ,
<name1> [ <val6>   ] = <name3>	substitute <name3> for value under the <val6> key of the <name1> dictionary .
<name2> <name5> , <name6> , <name4>	<name2> <name5> , <name6> and <name4> .
def <name3> ( <name1> , <name5> , <name2> , <name6> ) :	define the method <name3> with 4 arguments : <name1> , <name5> , <name2> and <name6> .
<name3> = <name4> ( )	<name3> is an instance of a class <name4> .
<name1> = [ ]	<name1> is an empty list .
<name6> :	<name6> ,
<name3> = <name6> . introspection . get_field_type ( <name2> [ 1 ] , <name2> )	call the method <name6> .introspection .get_field_type with 2 arguments : second element of <name2> and <name2> , substitute the result for <name3> .
except <name2> :	if <name2> exception is caught ,
<name5> = <val1>	<name5> is a string <val1> .
<name2> . <name4> ( <val5>   )	<name4> a string <val5> to <name2> .
<name5> type ( <name1> ) <name4> <name3> :	<name5> <name1> <name4> a <name3> ,
<name6> , <name4> = <name6>	substitute <name6> for <name6> and <name4> , respectively .
<name2> . update ( <name4> )	call the method <name2> .update with an argument <name4> . 1
<name2> <name5> == 'CharField'   <name4> <name6> [ 3 ] :	<name2> <name5> equals a string CharField '  <name4> fourth element of <name6> is true ,
<name2> [ 'max_length'   ] = int ( <name4> [ 3 ] )	convert fourth element of <name4> to an integer , substitute it for value under the 'max_digits' key of the <name2> .
<name2> <name3> == <val5>   :	<name2> <name3> equals a string <val5> ,
<name2> <name1> [ 4 ] is <name5> or <name1> [ 5 ] is <name5> :	<name2> fifth and sixth elements of <name1> are <name5> ,
<name2> . <name5> ( 'max_digits and decimal_places have been guessed, as this '    'database handles decimal fields as float'   )	<name5> string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to <name2> .
<name1> [ <val4>   ] = <name2> [ 4 ] <name6> <name2> [ 4 ] <name3> <name5> <name1> else 10	<name6> fifth element of <name2> <name3> <name5> <name1> , substitute it for value under the <val4> key of the <name1> ,
<name6> [ <val3>   ] = <name1> [ 5 ] <name2> <name1> [ 5 ] <name5> <name4> <name6> else 5	otherwise , value under the 'max_digits' key of the <name6> <name5> integer 10 . <name2> sixth element of <name1> <name5> <name4> <name6> , substitute it for value under the <val3> key of the <name6> ,
else :	otherwise , value under the 'decimal_places' key of the field_params is integer 5 . if not
<name1> [ <val6>   ] = <name2> [ 4 ]	substitute fifth element of <name2> for value under the <val6> key of the <name1> .
<name3> [ <val6>   ] = <name2> [ 5 ]	substitute sixth element of <name2> for value under the <val6> key of the <name3> .
<name6> <name1> , <name4> , <name3>	<name6> <name1> , <name4> and <name3> .
def <name4> ( <name1> , <name5> ) :	define the method <name4> with arguments <name1> and <name5> .
<name3> <name1> <name4> <name5>	<name3> <name1> <name4> <name5> into default name space .
<name6> <name5>	<name6> module <name5> .
<name5> <name2>	<name5> module <name2> .
<name4> <name3>	<name4> module <name3> .
<name2> <name4>	<name2> module <name4> .
<name4> <name5>	<name4> module <name5> .
<name1> <name5> . <name2> <name6> <name2>	<name1> <name5> .apps <name6> <name2> into default name space .
<name6> <name1> . conf <name2> <name4>	<name6> <name1> .conf <name2> <name4> into default name space .
<name2> <name4> . core <name5> <name1>	<name2> <name4> .core <name5> <name1> into default name space .
<name6> <name4> . core . management . base <name2> <name3> , <name1>	<name6> <name4> .core .management .base <name2> <name3> and <name1> into default name space .
<name5> <name4> . core . management . color <name1> <name6>	<name5> <name4> .core .management .color <name1> <name6> into default name space .
<name6> <name4> . db <name5> ( <name2> , <name1> , <name3> , <name6> , <name4> , <name5> )	<name6> <name4> .db <name5> <name2> , <name1> , <name3> , <name6> , <name4> and <name5> into default name space .
<name3> <name6> . utils <name2> <name4>	<name3> <name6> .utils <name2> <name4> into default name space .
<name2> <name5> . utils . encoding <name6> <name1>	<name2> <name5> .utils .encoding <name6> <name1> into default name space .
<name6> <name4> . utils . functional <name3> <name1>	<name6> <name4> .utils .functional <name3> <name1> into default name space .
<name3> <name4> . utils . _os <name6> <name2>	<name3> <name4> .utils ._os <name6> <name2> into default name space .
<name4> <name2> <name6> <name5>	<name4> <name2> <name6> <name5> into default name space .
<name2> :	<name2> ,
<name2> <name6>	<name2> <name6> .
<name6> = <name1>	<name6> is boolean <name1> .
except <name6> :	if <name6> exception is caught ,
<name4> = <name1>	<name4> is boolean <name1> .
<name3> <name4> ( <name5> ) :	derive the <name3> <name4> from the <name5> base <name3> .
<name2> = <val4>	<name2> is an string <val4> .
"<name6> = ( <val4> ""path of at least one fixture in the command line."" )"	<name6> is a tuple containing a string <val4>
def <name2> ( <name1> , <name6> ) :	path of at least one fixture in the command line . define the method <name2> with 2 arguments : <name1> and <name6> .
<name1> . add_argument ( <val6>   , <name5> = <val2>   , <name4> = <val3>   , help = 'Fixture labels.'   )	call the method <name1> .add_argument with 4 arguments : string <val6> , <name5> set to string <val2> , <name4> set to <val3> ,
"<name3> . add_argument ( <val5>   , <name2> = <val1>   , <name4> = <val6>   , default = DEFAULT_DB_ALIAS , <name3> = 'Nominates a specific database to load '    'fixtures into. Defaults to the ""default"" database.'   )"	and <name3> set to 'Fixture labels.' . call the method <name3> .add_argument with 5 arguments : string <val5> , <name2> set to string <val1> , <name4> as a string <val6> ,
<name4> . add_argument ( <val3>   , <name5> = <val2>   , <name1> = <val6>   , <name4> = None , <name3> = 'Only look for fixtures in the specified app.'   )	"<name4> set to DEFAULT_DB_ALIAS and <name3> as a string 'Nominates a specific database to load fixtures into. Defaults to the ""default"" database.' call the method <name4> .add_argument with 5 arguments : string <val3> , <name5> as a string <val2> , <name1> as a string <val6> ,"
<name1> . add_argument ( <val2>   , <val3>   , <name4> = <val6>   , dest = 'ignore'   , <name5> = False , <name1> = 'Ignores entries in the serialized data for fields that do not '    'currently exist on the model.'   )	<name5> set to None , <name1> is a string 'Only look for fixtures in the specified app.' . call the method <name1> .add_argument with 6 arguments : string <val2> , string <val3> , <name4> as a string <val6> ,
def <name3> ( <name1> , * <name6> , ** <name4> ) :	dest as a string 'ignore' , default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.' . define the method <name3> with 3 arguments : <name1> , unpacked list <name6> and unpacked dictionary <name4> .
<name3> . ignore = <name6> . <name4> ( <val2>   )	<name4> the value under the <val2> key of the <name6> dictionary , substitute it for <name3> .ignore .
<name1> . using = <name4> . <name2> ( <val6>   )	<name2> the value under the <val6> key of the <name4> dictionary , substitute it for <name1> .database .
<name5> . app_label = <name1> . <name6> ( <val3>   )	<name6> the value under the <val3> key of the <name1> dictionary , substitute it for <name5> .app_label .
<name5> . hide_empty = <name1> . <name6> ( <val4>   , False )	<name6> the value under the <val4> key of the <name1> dictionary , if the key exists substitute it for <name5> .hide_empty ,
<name3> . verbosity = <name5> . <name6> ( <val1>   )	if not , <name3> .hide_empty is boolean False . <name6> the value under the <val1> key of the <name5> dictionary , substitute it for <name3> .verbosity .
<name2> <name1> . atomic ( <name4> = <name6> . <name4> ) :	call the method <name1> .atomic <name2> an argument <name4> set to <name6> .using , <name2> the result ,
<name1> . loaddata ( <name4> )	call the method <name1> .loaddata with an argument <name4> .
<name2> <name1> . get_autocommit ( <name6> . using ) :	call the method <name1> .get_autocommit with an argument <name6> .using , <name2> it evaluates to true ,
<name5> [ <name6> . using ] . <name2> ( )	get the value under the <name6> .using key of the <name5> dictionary , call the method <name2> on it .
def <name5> ( <name2> , <name3> ) :	define the method <name5> with 2 arguments <name2> and <name3> .
<name4> = <name2> [ <name3> . using ]	get the value under the <name3> .using key of the <name2> dictionary , substitute it for <name4> .
<name4> . fixture_count = <val3>	<name4> .fixture_count is integer <val3> .
<name6> . loaded_object_count = <val5>	<name6> .loaded_object_count is integer <val5> .
<name3> . fixture_object_count = <val1>	<name3> .fixture_object_count is integer <val1> .
<name3> . models = <name5> ( )	<name3> .models is an empty <name5> .
<name2> . serialization_formats = <name1> . get_public_serializer_formats ( )	call the method <name1> .get_public_serializer_formats , substitute the result for <name2> .serialization_formats .
<name6> . compression_formats = {   <name1> : ( <name3> , <val4>   ) , 'gz'   : ( gzip . GzipFile , <val4>   ) , 'zip'   : ( SingleZipReader , 'r'   ) , }	<name6> .compression_formats is an dictionary with 3 initial entries : tuple containing 2 elements : <name3> and string <val4> for <name1> ,
<name4> <name2> :	tuple with 2 arguments : gzip .GzipFile and string 'rb' for 'gz' , tuple with 2 arguments : SingleZipReader and string 'r' for 'gzip' . <name4> <name2> is true ,
<name4> . compression_formats [ <val6>   ] = ( <name3> . BZ2File , <val1>   )	substitute tuple with 2 elements : <name3> .BZ2File and string <val1> for value under the <val6> key of the <name4> .compression_formats dictionary .
<name3> <name4> . constraint_checks_disabled ( ) :	call the method <name4> .constraint_checks_disabled , <name3> the result perform ,
<name1> <name4> <name3> <name6> :	<name1> every <name4> <name3> <name6> ,
<name1> . load_label ( <name4> )	call the method <name1> .load_label with an argument <name4> .
<name1> = [ <name5> . _meta . db_table <name2> <name5> <name6> <name4> . models ]	<name2> <name5> <name6> <name4> .models append <name5> ._meta .db_table to a list , substitute the resulting list <name2> <name1> .
<name3> :	<name3> ,
<name5> . check_constraints ( <name2> = <name2> )	call the method <name5> .check_constraints with an arguments <name2> set to <name2> .
except <name6> as <name1> :	if <name6> , renamed to <name1> , exception is caught ,
<name3> . args = ( <val2> % <name3> , )	<name3> .args is a tuple , containing 1 element : string <val2> , where '%s' is replaced with <name3> .
<name4>	<name4> an exception .
<name6> <name3> . loaded_object_count >  0 :	<name6> <name3> .loaded_object_count is greater than zero ,
sequence_sql = <name6> . ops . sequence_reset_sql ( <name1> ( ) , <name3> . models )	call the method <name6> .ops .sequence_reset_sql with 2 arguments : return value of the <name1> and <name3> .models ,
<name4> <name2> :	substitute the result for <name2> . <name4> <name2> is true ,
<name2> <name4> . verbosity >= <val1> :	<name2> <name4> .verbosity is grater than , or equal to integer <val1> ,
\ <name1> . stdout . <name6> ( <val2> ) \	\ <name6> a string <val2> to <name1> .stdout stream . \
<name6> <name5> . <name2> ( ) as <name2> :	call the method <name5> .cursor , <name6> the result renamed to <name2> , perform the following ,
<name6> <name4> <name5> <name3> :	<name6> every <name4> <name5> <name3> ,
     <name3> . execute ( <name5> )	call the method <name3> .execute with an argument <name5> .
<name5> <name1> . verbosity >= <val3> :	<name5> <name1> .verbosity is greater of equal to integer <val3> ,
<name5> <name1> . fixture_count == <val6> <name2> <name1> . hide_empty :	<name5> <name1> .fixture_count equals integer <val6> <name2> <name1> .hide_empty is true ,
pass	do nothing .
elif <name3> . fixture_object_count == <name3> . loaded_object_count :	otherwise if <name3> .fixture_object_count equals <name3> .loaded_object_count ,
<name5> . stdout . write ( <val2> % ( <name5> . loaded_object_count , <name5> . fixture_count ) )	call the method <name5> .stdout .write with an argument string <val2> ,
else :	where '%d' is replaced with self .loaded_object_count and self .fixture_count , respectively . if not ,
<name2> . stdout . write ( <val6> % ( <name2> . loaded_object_count , <name2> . fixture_object_count , <name2> . fixture_count ) )	call the method <name2> .stdout .write with an argument string <val6> ,
def <name2> ( <name1> , <name4> ) :	substitute '%d' with <name1> .loaded_object_count , <name1> .fixture_object_count and <name1> .fixture_count . define the method <name2> with <name1> and <name4> as arguments .
<name1> <name5> , <name4> , <name2> <name3> <name6> . find_fixtures ( <name1> ) :	<name1> every <name5> , <name4> and <name2> <name3> return value of the method <name6> .find_fixtures called with an argument <name1> ,
_ , ser_fmt , cmp_fmt = self . parse_name ( <name5> . path . basename ( <name3> ) )	call the function <name5> .path .basename with an argument <name3> , use the result as an argument for the call to the method ,
<name4> , <name6> = <name5> . compression_formats [ <name1> ]	<name5> .parse_name , assign the result to _ , ser_fmt and <name1> , respectively . get the value under the <name1> key of the <name5> .compression_formats dictionary , assign it to <name4> and <name6> .
<name1> = <name3> ( <name2> , <name5> )	call the function <name3> with arguments : <name2> and <name5> , substitute the result for <name1> .
<name3> :	<name3> ,
<name4> . fixture_count += 1	increment <name4> .fixture_count by one .
<name1> = <val6>	<name1> is integer <val6> .
<name3> = <val4>	<name3> is integer <val4> .
<name4> <name1> . verbosity >= <val3> :	<name4> <name1> .verbosity is greater or equal to integer <val3> ,
<name4> . stdout . write ( <val6> % ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )	call the method <name4> .stdout .write with an argument string <val6> ,
objects = <name1> . deserialize ( <name6> , <name2> , <name3> = <name4> . <name3> , ignorenonexistent = <name4> . ignore )	substitute '%s' with <name6> , fixture_name and return value of the function humanize called with an argument fixture_dir . call the method <name1> .deserialize with 4 arguments : <name6> , <name2> , <name3> set to <name4> .using ,
<name2> <name5> <name6> <name4> :	and ignorenonexistent set to self .ignore , substitute the result <name2> <name4> . <name2> every <name5> <name6> <name4> ,
<name3> += 1	increment <name3> by one .
<name3> <name2> . allow_migrate ( <name1> . using , <name6> . object . __class__ ) :	call the method <name2> .allow_migrate with 2 arguments : <name1> .using and <name6> .object .__class__ , <name3> it evaluates to true ,
     <name3> += 1	increment <name3> by one .
<name4> . models . <name1> ( <name3> . object . __class__ )	<name1> <name3> .object .__class__ to <name4> .models set .
<name2> :	<name2> ,
         <name6> . save ( <name4> = <name3> . <name4> )	call the method <name6> .save with an argument <name4> set to <name3> .using .
except ( <name6> , <name5> ) as <name2> :	if <name6> or <name5> , renamed to <name2> , exceptions are caught ,
"         <name1> . args = ( ""Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s"" % {   'app_label'   : obj . object . _meta . <name4> , 'object_name'   : obj . object . _meta . <name2> , 'pk'   : obj . object . <name5> , 'error_msg'   : force_text ( <name1> ) }  , )"	"<name1> .args is a tuple containing string "" Could not load % ( <name4> ) s . % ( <name2> ) s ( <name5> = % ( <name5> ) s ) : % ( error_msg ) s ,"
<name2>	where '%(app_label)s' is replaced for obj .object ._meta .app_label , '%(object_name)s' is replaced with obj .object ._meta .object_name , '%(pk)s' is replaced with obj .object .pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e . <name2> an exceptions
<name2> . loaded_object_count += <name3>	increment <name2> .loaded_object_count by <name3> .
<name4> . fixture_object_count += <name2>	increment <name4> .fixture_object_count by <name2> .
except <name5> as <name1> :	if <name5> , renamed to <name1> , exception is caught ,
<name6> <name4> isinstance ( <name2> , <name1> ) :	<name6> <name2> is <name4> an instance of <name1> class ,
<name6> . args = ( <val5> % ( <name4> , <name6> ) , )	<name6> .args is a tuple containing string <val5> , where '%s' is replaced with <name4> , <name6> .
<name5>	<name5> an exception .
<name4> :	<name4> perform ,
<name6> . close ( )	call the method <name6> .close .
<name2> <name1> == <val4> :	<name2> <name1> equals integer <val4> ,
"<name2> . warn ( ""No fixture data found for '%s'. (File format may be "" ""invalid.)"" % fixture_name , RuntimeWarning )"	"call the method <name2> .warn with 2 arguments : string ""No fixture data found for '%s'. (File format may be invalid.)"" ,"
@  <name6> . <name6> ( <name4> = <name1> )	where '%s' is replaced with fixture_name , and RuntimeWarning . decorator method <name6> .lru_cache with an argument <name4> set to <name1> .
def <name5> ( <name2> , <name6> ) :	define the method <name5> with arguments : <name2> and <name6> .
<name6> , <name5> , <name2> = <name3> . parse_name ( <name1> )	call the method <name3> .parse_name with an argument <name1> , substitute the result for <name6> , <name5> , <name2> , respective .
<name1> = [ <name4> . using , <name6> ]	<name1> is a list containing 2 elements : <name4> .using and <name6> .
<name5> = <name1> ( <name6> . compression_formats . keys ( ) ) <name3> <name2> <name4> <name5> else [ <name2> ]	call the method <name6> .compression_formats .keys , convert it to <name1> , substitute it for <name5> <name3> <name2> <name4> <name5> ,
<name2> = <name4> . get_public_serializer_formats ( ) <name5> <name3> <name1> <name6> else [ <name3> ]	otherwise cmp_fmts <name1> a list containing cmp_fmt . call the method <name4> .get_public_serializer_formats , substitute the result for <name2> <name5> <name3> <name1> <name6> ,
<name1> <name6> . verbosity >= <val2> :	otherwise ser_fmts is a list containing ser_fmt . <name1> <name6> .verbosity is greater or equal to integer <val2> ,
<name6> . stdout . write ( <val5> % <name4> )	call the method <name6> .stdout .write with an argument string <val5> , where '%s' is replaced with <name4> .
<name6> os . <name2> . isabs ( <name4> ) :	<name6> <name4> is an absolute file <name2> ,
<name1> = [ <name2> . path . dirname ( <name5> ) ]	call the method <name2> .path .dirname with an argument <name5> , append it to a list , substitute resulting list for <name1> .
<name1> = <name6> . path . basename ( <name1> )	call the method <name6> .path .basename with an argument <name1> , substitute the result for <name1> .
else :	if not ,
<name6> = <name2> . <name6>	substitute <name2> .fixture_dirs for <name6> .
<name6> <name5> . path . sep <name4> <name1> :	<name6> <name5> .path .sep is contained <name4> <name1> ,
fixture_dirs = [ <name2> . <name3> . <name1> ( <name5> , <name2> . <name3> . dirname ( <name6> ) ) for <name5> in fixture_dirs ]	<name1> <name5> and return value of the function <name2> .path .dirname called with an argument <name6> into a valid file <name3> ,
<name1> = <name6> . path . basename ( <name1> )	append it to a list , perform the previous for every dir_ in fixture_dirs , substitute the resulting list for fixture_dirs . call the method <name6> .path .basename with an argument <name1> , substitute the result for <name1> .
suffixes = ( <val3>   . <name5> ( <name6> <name2> <name6> <name4> <name1> <name3> <name6> ) <name2> <name1> <name4> product ( databases , ser_fmts , cmp_fmts ) )	<name2> every <name6> <name4> <name1> , <name3> <name6> is true , <name5> it to a string , separated by <val3> , put the result <name4> a tuple ,
<name1> = <name6> ( <val5>   . <name2> ( ( <name3> , <name4> ) ) <name1> <name4> <name6> <name5> )	perform the previous <name1> every combo <name6> result of the function product called with 3 arguments : databases , ser_fmts and cmp_fmts , substitute the result <name1> <name5> . <name2> <name3> and <name4> into a string , separated by <val5> <name1> every <name4> <name6> <name5> , put the results <name6> <name6> , substitute it <name1> <name1> .
<name4> = [ ]	<name4> is an empty list .
<name1> <name3> <name6> <name5> :	<name1> every <name3> <name6> <name5> ,
<name6> <name2> . verbosity >= <val1> :	<name6> <name2> .verbosity is greater or equals to integer <val1> .
<name1> . stdout . write ( <val5> % humanize ( fixture_dir ) )	call the method <name1> .stdout .write with an argument string <val5> ,
<name5> = [ ]	where '%s' is replaced with result of the function humanize , called with an argument fixture_dir . <name5> is an empty list .
for candidate in glob . iglob ( os . <name1> . <name5> ( <name4> , <name6> + <val2>   ) ) :	<name5> <name4> , <name6> with appended character <val2> into a valid file <name1> ,
if <name3> . path . basename ( <name1> ) <name2> <name6> :	use it as an argument for the call to the glob .iglob , for every <name1> <name2> result , call the method <name3> .path .basename with an argument <name1> , is result is contained <name2> <name6> ,
   <name5> . <name1> ( ( <name4> , <name3> , <name6> ) )	<name1> tuple containing 3 elements : <name4> , <name3> and <name6> to list <name5> .
<name3> <name6> . verbosity >= <val4> <name5> not <name2> :	<name3> <name6> .verbosity is greater or equals integer <val4> <name5> <name2> is false ,
<name2> . stdout . write ( <val4> % ( <name3> , humanize ( fixture_dir ) ) )	call the method <name2> .stdout .write with an argument string <val4> , where '%s' is replaced with <name3> ,
<name1> len ( <name5> ) >  <val6> :	and result of the function humanize called with an argument fixture_dir . <name1> length of <name5> is greater than <val6> ,
<name4> <name6> ( <val3> % ( fixture_name , humanize ( fixture_dir ) ) )	<name4> an <name6> exception with an argument string <val3> , where '%s' is replaced with :
<name1> . <name3> ( <name2> )	fixture_name and result of the function humanize called with an argument fixture_dir . <name3> <name1> list with <name2> .
<name5> <name3> != <val4>   <name1> <name2> <name6> :	<name5> <name3> is <name2> equal to string <val4> <name1> <name6> is false ,
<name2> . warn ( <val1> % <name4> )	call the method <name2> .warn with an argument string <val1> where '%s' is replaced with <name4> .
<name2> <name1>	<name2> <name1> .
@  <name6>	decorator <name6> ,
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name2> = [ ]	<name2> is an empty dictionary .
<name6> <name4> <name5> <name2> . get_app_configs ( ) :	<name6> ever <name4> <name5> return value of the method <name2> .get_app_configs ,
<name3> <name4> . app_label <name1> <name2> . label != <name4> . app_label :	<name3> <name4> .app_label is true <name1> <name2> .label is not equal to <name4> .app_label ,
continue	skip this loop iteration .
<name1> = os . <name5> . <name2> ( <name6> . <name5> , <val3>   )	<name2> <name6> .path and string <val3> into a valid file <name5> , substitute it for <name1> .
<name5> os . path . isdir ( <name3> ) :	<name5> <name3> is a directory ,
<name3> . <name1> ( <name2> )	<name1> <name2> to <name3> list .
<name2> . <name1> ( <name3> ( <name5> . FIXTURE_DIRS ) )	convert <name5> .FIXTURE_DIRS to a <name3> , <name1> <name2> by it .
<name6> . <name3> ( ''   )	<name3> an empty string to <name6> list .
dirs = [ upath ( <name3> . path . abspath ( <name3> . path . realpath ( <name1> ) ) ) <name6> <name1> in dirs ]	call the function <name3> .path .realpath with an argument <name1> , use the result as an argument <name6> the call to the function <name3> .path .abspath ,
<name1> <name4>	use the result as an argument for the call to the upath function , for every d in <name4> , append the results into a list , substitute the resulting list for <name4> . <name1> <name4> .
def <name4> ( <name2> , <name1> ) :	define the method <name4> with arguments <name2> and <name1> .
<name5> = <name2> . rsplit ( <val1>   , <val4> )	call the method <name2> .rsplit with <val4> arguments : character <val1> and integer <val4> , substitute the result for <name5> .
<name5> len ( <name4> ) >  <val3> <name1> <name4> [ - <val3> ] <name6> <name2> . compression_formats :	<name5> length of <name4> is greater than integer <val3> <name1> last element of <name4> is contained <name6> <name2> .compression_formats ,
<name5> = <name2> [ - 1 ]	substitute the last element of <name2> for <name5> .
<name3> = <name3> [ : - 1 ]	substitute the last element of <name3> for <name3> .
else :	if not ,
<name1> = <name2>	<name1> is <name2> .
<name5> len ( <name6> ) >  <val4> :	<name5> length of <name6> is greater than integer <val4> .
<name6> <name2> [ - 1 ] <name4> <name1> . serialization_formats :	<name6> last element of <name2> is contained <name4> <name1> .serialization_formats ,
<name6> = <name3> [ - 1 ]	substitute the last element of <name3> for <name6> .
<name6> = <name6> [ : - 1 ]	substitute the last element of <name6> for <name6> .
else :	if not ,
"<name2> <name6> ( ""Problem installing fixture '%s': %s is not a known "" ""serialization format."" % ( ''   . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )"	"<name2> an <name6> with an argument string ""Problem installing fixture '%s': %s is not a known serialization format."" ,"
else :	replace '%s' with : elements of last element of parts joined into a string and last element of parts . if not ,
<name4> = <name5>	<name4> is <name5> .
<name1> = <val4>   . <name5> ( <name3> )	<name5> elements of <name3> into a string , separated with <val4> , substitute it for <name1> .
<name1> <name4> , <name2> , <name6>	<name1> <name4> , <name2> and <name6> .
<name6> <name5> ( <name2> . ZipFile ) :	derive <name6> <name5> for <name2> .ZipFile base <name6> .
def <name2> ( <name5> , * <name4> , ** <name1> ) :	define the method <name2> with 3 arguments : <name5> , unpacked list <name4> and unpacked dictionary <name1> .
<name2> . ZipFile . __init__ ( <name6> , * <name3> , ** <name1> )	call the method <name2> .ZipFile .__init___ with the arguments <name6> , unpacked list <name3> and unpacked dictionary <name1> .
<name2> len ( <name6> . namelist ( ) ) != <val4> :	call the method <name6> .namelist , <name2> the length of the result is not integer <val4> ,
<name3> <name4> ( <val5> )	<name3> an <name4> with an string <val5> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
return <name6> . ZipFile . read ( <name2> , <name2> . namelist ( ) [ 0 ] )	call the method <name6> .ZipFile .read with 2 arguments : <name2> and first element of the result of the <name2> .namelist method .
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
<name5> <name6> <name3> <name4>	<name5> <name6> <name3> <name4> into default name space .
<name3> <name2>	<name3> module <name2> .
<name2> <name5>	<name2> module <name5> .
<name4> <name5>	<name4> module <name5> .
<name2> <name5>	<name2> module <name5> .
<name4> <name2>	<name4> module <name2> .
<name3> <name4>	<name3> module <name4> .
<name4> <name3> <name1> <name2>	<name4> <name3> <name1> <name2> into default name space .
<name5> <name3>	<name5> module <name3> .
<name5> <name6> . core . management . base <name2> <name4> , <name1>	<name5> <name6> .core .management .base <name2> <name4> and <name1> into default name space .
<name1> <name5> . core . management . utils <name6> ( <name3> , <name4> , <name2> )	<name1> <name5> .core .management .utils <name6> <name3> , <name4> and <name2> into default name space .
<name4> <name2> . utils . encoding <name1> force_str	<name4> <name2> .utils .encoding <name1> force_st into default name space .
<name2> <name5> . utils . functional <name3> <name1>	<name2> <name5> .utils .functional <name3> <name1> into default name space .
<name4> <name1> . utils <name2> <name6>	<name4> <name1> .utils <name2> <name6> into default name space .
<name3> <name1> . utils . text <name2> <name6>	<name3> <name1> .utils .text <name2> <name6> into default name space .
<name5> <name6> . utils . jslex <name4> <name1>	<name5> <name6> .utils .jslex <name4> <name1> into default name space .
\ plural_forms_re = <name3> . compile ( r <val4>   , <name3> . MULTILINE |  <name3> . DOTALL ) \	\ call the method <name3> .compile with 2 arguments : raw string <val4> , \
<name4> = <val2>	and result of the bitwise OR performed on the re .MULTILINE and re .DOTALL operands , substitute the result for plural_forms_re / <name4> is integer <val2> .
def <name1> ( * <name3> ) :	define the method <name1> with an argument unpacked list <name3> .
<name6> <name2> <name3> <name1> :	<name6> every <name2> <name3> <name1> ,
<name2> <name5> ( <name3> ) is <name6> :	call the function <name5> with an argument <name3> , <name2> it evaluates to <name6> ,
"<name4> <name2> ( ""Can't find %s. Make sure you have GNU "" ""gettext tools 0.15 or newer installed."" % <name1> )"	"<name4> an <name2> exception with an argument ""Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed."" , where '%s' is replaced with <name1> ."
@  <name3>	<name3> decorator ,
<name4> <name1> ( <name2> ) :	derive the <name4> <name1> from the <name2> <name4> .
def <name1> ( <name6> , <name4> , <name3> , <name2> ) :	define the method <name1> with 4 arguments : <name6> , <name4> , <name3> and <name2> .
<name1> . file = <name2>	substitute <name2> for <name1> .file_name .
<name4> . <name5> = <name5>	substitute <name5> for <name4> .dirpath .
<name1> . <name3> = <name3>	substitute <name3> for <name1> .locale_dir .
def __repr__ ( <name6> ) :	define the method __repr__with an argument <name6> .
<name6> <val5> % os . sep . <name1> ( [ <name2> . dirpath , <name2> . file ] )	<name1> <name2> .dirpath and <name2> .file in a string , substitute with it '%s' in string <val5> , <name6> the result .
def <name6> ( <name3> , <name4> ) :	define the method <name6> with <name3> and <name4> arguments :
<name2> <name4> . path == <name3> . path	if <name4> .path equals <name3> .path , <name2> boolean True , if not <name2> boolean False .
def <name4> ( <name3> , <name2> ) :	define the mehod <name4> with <name3> and <name2> .
<name2> <name1> . path <  <name6> . path	if <name1> .path is lesser than <name6> .path , <name2> boolean True , otherwise <name2> boolean False .
@  <name3>	<name3> decorator .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name6> os . <name4> . <name2> ( <name5> . dirpath , <name5> . <name1> )	<name2> <name5> .dirpath and <name5> .file into a <name1> <name4> , <name6> it .
def <name4> ( <name3> , <name1> , <name6> ) :	define the method <name4> with 3 arguments : <name3> , <name1> and <name6> .
<name2> <name4> . conf <name1> <name6>	<name2> <name4> .conf <name1> <name6> into default namespace .
<name5> <name3> . utils . translation <name2> <name4>	<name5> <name3> .utils .translation <name2> <name4> into default namespace .
<name4> <name6> . verbosity >  <val3> :	<name4> <name6> .verbosity is greater than integer <val3> ,
\ <name5> . stdout . <name2> ( <val1>   % ( <name6> . file , <name6> . dirpath ) ) \	\ substitute '%s' is string <val1> with <name6> .file and <name6> .dirpath , <name2> it to <name5> .stdout . \
<name2> , <name4> = <name6> . path . splitext ( <name5> . file )	call the method <name6> .path .splitext with an argument <name5> .file , assign the result to <name2> and <name4> .
<name3> <name2> == <val4>   <name6> <name5> <name1> <name3> . extensions :	<name3> <name2> equals a string <val4> <name6> <name5> is contained <name1> <name3> .extensions ,
<name2> = <name4>	<name2> is boolean <name4> .
<name3> = os . <name1> . <name5> ( <name4> . dirpath , <name4> . <name6> )	<name5> <name4> .dirpath and <name4> .file into a <name6> <name1> , substitute it for <name3> .
<name5> <name6> . open ( <name1> , <name2> = <name4> . FILE_CHARSET ) as <name3> :	call the function <name6> .open <name5> <name1> and <name2> set to <name4> .FILE_CHARSET , <name5> the result renamed to <name3> ,
<name5> = <name3> . read ( )	perform the following : call the method <name3> .read , substitute the result for <name5> .
<name3> = <name6> ( <name3> )	call the function <name6> with an argument <name3> , substitute it for <name3> .
<name5> = '%s.c'   % <name3> . file	convert <name3> .file to a string and append '.c' string to it , substitute the result for <name5> .
<name2> = os . path . <name3> ( <name6> . dirpath , <name4> )	<name3> <name6> .dirpath and <name4> in a string , substitute the result for <name2> .
<name4> <name3> . open ( <name1> , <val5> , <name2> = <val6>   ) <name4> fp :	call the function <name3> .open <name4> 3 arguments : <name1> , string <val5> and <name2> set to string <val6> <name4> arguments ,
<name4> . write ( <name2> )	with the result renamed to <name4> , perform the following : call the method <name4> .write with an arguments <name2> .
args = [ <val1>   , <val6>   , <name3> , <val4>   , '--keyword=gettext_noop'   , '--keyword=gettext_lazy'   , '--keyword=ngettext_lazy:1,2'   , '--keyword=pgettext:1c,2'   , '--keyword=npgettext:1c,2,3'   , '--output=-'    ] + <name2> . xgettext_options	append <name2> .xgettext_options to the list containing 10 elements : string <val1> , string <val6> , <name3> , string <val4> ,
<name6> . <name2> ( <name3> )	string '--keyword=gettext_noop' , string '--keyword=gettext_lazy' , string '--keyword=ngettext_lazy:1,2' , string '--keyword=pgettext:1c,2' , string '--keyword=npgettext:1c,2,3' and string '--output=-' , substitute it for <name6> . <name2> <name3> to <name6> .
elif domain == 'django'   and ( <name6> == '.py'   <name5> <name6> <name3> <name4> . extensions ) :	otherwise if domains equals a string django ' and, file_ext equals ' .py '  <name5> <name6> is contained <name3> <name4> .extensions ,
<name5> = <name6> . file	substitute <name6> .file for <name5> .
<name6> = os . <name2> . <name1> ( <name3> . dirpath , <name3> . <name5> )	<name1> <name3> .dirpath and <name3> .file into a <name5> <name2> , substitute it for <name6> .
<name5> = <name1> <name3> <name2> . extensions	if <name1> is contained <name3> <name2> .extensions , <name5> is boolean True , otherwise it is boolean False .
<name5> <name2> :	<name5> <name2> is true ,
<name4> <name6> . open ( orig_file , 'r'   , <name1> = <name5> . FILE_CHARSET ) <name3> fp :	call the function <name6> .open <name4> 3 arguments : work_file , string 'w' and <name1> set to <name5> .FILE_CHARSET <name3> arguments ,
<name6> = <name2> . read ( )	with the result renamed to <name2> , perform the following : call the method <name2> .read , substitute the result for <name6> .
<name5> = '%s.py'   % <name6> . file	convert <name6> .file to string and append string '.py' to it , substitute the result for <name5> .
<name6> = <name2> ( <name3> , <name1> [ <val5> : ] )	call the function <name2> with <val5> arguments : <name3> and sliced <name1> , without first <val5> elements , substitute the result for <name6> .
<name6> <name4> . open ( os . <name1> . join ( <name2> . dirpath , <name3> ) , <val5> , encoding = 'utf-8'   ) as fp :	call the function <name4> .open <name6> 3 arguments : <name2> .dirpath and <name3> joined into a file <name1> , string <val5> ,
<name4> . write ( <name5> )	and encoding set to string 'utf-8' as arguments , with the result renamed to <name4> , perform the following : call the method <name4> .write with an argument <name5> .
<name6> = os . <name3> . <name4> ( <name1> . dirpath , <name2> )	<name4> <name1> .dirpath , <name2> into a file <name3> , substitute it for <name6> .
args = [ <val5>   , <val2>   , <name1> , <val3>   , '--keyword=gettext_noop'   , '--keyword=gettext_lazy'   , '--keyword=ngettext_lazy:1,2'   , '--keyword=ugettext_noop'   , '--keyword=ugettext_lazy'   , '--keyword=ungettext_lazy:1,2'   , '--keyword=pgettext:1c,2'   , '--keyword=npgettext:1c,2,3'   , '--keyword=pgettext_lazy:1c,2'   , '--keyword=npgettext_lazy:1c,2,3'   , '--output=-'    ] + <name6> . xgettext_options	append <name6> .xgettext_options to list containing 15 elements : string <val5> , string <val2> , <name1> , string <val3> ,
<name5> . <name4> ( <name6> )	string '--keyword=gettext_noop' , string '--keyword=gettext_lazy' , string '--keyword=ngettext_lazy:1,2' , string '--keyword=ugettext_noop' , string '--keyword=ugettext_lazy' , string '--keyword=ungettext_lazy:1,2' , string '--keyword=pgettext:1c,2' , string '--keyword=npgettext:1c,2,3' , string '--keyword=pgettext_lazy:1c,2' , string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-' , substitute the result for <name5> . <name4> <name6> to <name5> .
else :	if not ,
<name6>	<name6> nothing .
<name1> , <name5> , <name3> = <name6> ( <name4> )	call the function <name6> with argument <name4> , assign the result to <name1> , <name5> and <name3> .
<name4> <name3> :	<name4> <name3> is true ,
<name1> <name2> != <name3> :	<name1> <name2> is not equal to <name3> ,
<name1> <name2> :	<name1> <name2> is true ,
<name6> . unlink ( <name2> )	call the function <name6> .unlink with an argument <name2> .
\ <name4> <name5> ( <val3> % ( self . file , errors ) ) \	\ <name4> an <name5> exception with an argument string <val3> , \
elif <name1> . verbosity >  <val3> :	where '%s' are replaced by sel .file and errors , respectively . if <name1> .verbosity is greater than integer <val3> ,
<name5> . stdout . write ( <name6> )	call the method <name5> .stdout .write with an argument <name6> .
<name1> <name5> :	<name1> <name5> is true ,
<name1> <name5> . PY2 :	<name1> <name5> .PY2 is true ,
<name5> = <name5> . decode ( <val4>   )	call the method <name5> .decode with an argument string <val4> , substitute the result for <name5> .
<name2> = os . <name3> . <name6> ( <name5> . locale_dir , '%s.pot'   % str ( <name1> ) )	<name6> into a file <name3> : <name5> .locale_dir and string '.pot' appended to <name1> converted to string , substitute it for <name2> .
<name1> <name5> :	<name1> <name5> is true ,
<name1> <name6> . name == <val5>   :	<name1> <name6> .name equals string <val5> ,
   <name1> = <val3>   + <name5>	append <name5> to string <val3> , substitute it for <name1> .
<name2> = <val4>   + <name1>	append <name1> to string <val4> , substitute it for <name2> .
else :	if not ,
<name4> = <val1>   + <name6> [ 2 : ]	append <name6> to string <val1> , substitute it for <name4> .
<name1> = <val5>   + <name4> [ 2 : ]	append <name4> to string <val5> , substitute it for <name1> .
<name4> = <name4> . <name5> ( <name6> , <name1> )	<name5> every occurrence of <name6> for <name1> in <name4> , substitute the result for <name4> .
<name5> ( <name6> , <name2> )	call the function <name5> with 2 arguments : <name6> and <name2> .
<name3> <name4> :	<name3> <name4> is true ,
<name3> . unlink ( <name1> )	call the function <name3> .unlink with an argument <name1> .
def <name5> ( <name6> , <name4> ) :	define the function <name5> with 2 arguments <name6> and <name4> .
<name5> os . path . <name4> ( <name3> ) :	<name5> <name3> fie <name4> ,
\ <name4> = '\\n'   . <name6> ( <name3> ( <name1> , <name4> . split ( '\\n'   ) ) ) \	call the function <name3> with 2 arguments : function <name1> and <name4> spit into parts at newlines , <name6> the result into a string ,
else :	separated by newline , substitute it for msgs . if not ,
<name4> = <name4> . <name5> ( <val6>   , <val1>   )	<name5> every occurrence of string <val6> for string <val1> in <name4> , substitute the result for <name4> .
<name3> <name1> . open ( <name2> , <val5>   , <name4> = <val6>   ) <name3> fp :	call the function <name1> .open <name3> 3 arguments : <name2> , string <val5> and <name4> set to string <val6> <name3> arguments ,
<name2> . write ( <name3> )	with the result renamed to <name2> , perform the following : call the method <name2> .write with an argument <name3> .
<name6> <name3> ( BaseCommand ) :	derive the <name6> <name3> from the BaseCommands base <name6> .
"\ <name5> = ( <val4> ""pulls out all strings marked for translation. It creates (or updates) a message "" ""file in the conf/locale (in the django tree) or locale (for projects and "" ""applications) directory.\\n\\nYou must run this command with one of either the "" ""--locale, --exclude or --all options."" ) \"	<name5> is a string <val4>
<name3> = <name6>	"\ pulls out all strings marked for translation . It creates ( or updates ) a message ""file in the conf/locale (in the django tree) or locale (for projects and "" ""applications) directory.\\n\\nYou must run this command with one of either the "" ""--locale, --exclude or --all options."" . <name3> is boolean <name6> . \"
<name1> = <name3>	<name1> is boolean <name3>
<name5> = [ <val3>   , <val2>   ]	<name5> is an list with elements : strings <val3> and <val2> .
<name2> = [ <val3>   ]	<name2> is an list with elements : string <val3> .
<name3> = [ <val2>   ]	<name3> is an list with elements : string <val2> .
<name2> = [ <val4>   , <val6>   ]	<name2> is an list with elements : strings <val4> and <val6> .
def <name5> ( <name1> , <name3> ) :	define the method <name5> with 2 arguments : <name1> and <name3> .
<name2> . add_argument ( <val3>   , <val5>   , <name6> = [ ] , dest = 'locale'   , action = 'append'   , help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '    'Can be used multiple times.'   )	call the method <name2> .add_argument with 6 arguments : string <val3> , string <val5> , <name6> as an empty list ,
<name1> . add_argument ( <val6>   , <val2>   , <name5> = [ ] , <name4> = 'exclude'   , <name3> = <val1>   , <name6> = 'Locales to exclude. Default is none. Can be used multiple times.'   )	<name4> as a string 'locale' , <name3> as a string <val1> and <name6> as a string , 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.' . call the method <name1> .add_argument with 5 arguments : string <val6> , string <val2> , <name5> as a empty list ,
"<name3> . add_argument ( <val1>   , <val6>   , <name2> = <val4>   , <name5> = 'domain'   , <name3> = 'The domain of the message files (default: ""django"").'   )"	<name5> as a string 'exclude' , action as a string 'append' and <name3> as a string 'Locales to exclude. Default is none. Can be used multiple times.' . call the method <name3> .add_argument with 5 arguments : string <val1> , string <val6> , <name2> as a string <val4> ,
<name5> . add_argument ( <val4>   , <val3>   , <name1> = <val2>   , <name6> = 'all'   , default = False , <name5> = 'Updates the message files for all existing locales.'   )	"<name6> set to string 'domain' and <name5> as a string 'The domain of the message files (default: ""django"").' . call the method <name5> .add_argument with 6 arguments : string <val4> , string <val3> , <name1> as a string <val2> ,"
"<name5> . add_argument ( <val4>   , <val6>   , <name1> = <val2>   , <name3> = 'The file extension(s) to examine (default: ""html,txt"", or ""js"" '    'if the domain is ""djangojs""). Separate multiple extensions with '    'commas, or use -e multiple times.'   , action = 'append'   )"	<name1> as a string 'all' default as boolean False and <name3> as a string 'Updates the message files for all existing locales.' . call the method <name5> .add_argument with 5 arguments : string <val4> , string <val6> , <name1> set to string <val2> ,
<name2> . add_argument ( <val4>   , <val5>   , <name1> = <val3>   , dest = 'symlinks'   , default = False , <name6> = 'Follows symlinks to directories when examining '    'source code and templates for translation strings.'   )	"<name6> set to a string 'The file extension(s) to examine (default: ""html,txt"", or ""js"" ' 'if the domain is ""djangojs""). Separate multiple extensions with commas, or use -e multiple times.' and <name1> as a string 'append' . call the method <name2> .add_argument with 6 arguments : string <val4> , string <val5> , <name1> as a string <val3> ,"
<name1> . add_argument ( <val2>   , <val4>   , <name6> = <val5>   , <name3> = 'ignore_patterns'   , <name1> = [ ] , metavar = 'PATTERN'   , <name2> = 'Ignore files or directories matching this glob-style pattern. '    'Use multiple times to ignore more.'   )	<name3> as a string 'symlinks' , <name1> as boolean False and <name2> as a string 'Follows symlinks to directories when examining ' 'source code and templates for translation strings.' . call the method <name1> .add_argument with 7 arguments : string <val2> , string <val4> , <name6> as a string <val5> ,
"<name2> . add_argument ( <val5>   , <name4> = <val3>   , <name6> = 'use_default_ignore_patterns'   , <name1> = True , <name2> = ""Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'."" )"	<name6> as a string 'ignore_patterns' , <name1> as an empty list , metavar as a string 'PATTERN' , and <name2> as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.' . call the method <name2> .add_argument with 5 arguments : string <val5> , <name4> as a string <val3> ,
"<name6> . add_argument ( <val1>   , <name5> = <val3>   , <name2> = <val4>   , <name6> = False , <name1> = ""Don't break long message lines into several lines."" )"	"<name2> as a string 'use_default_ignore_patterns' , <name6> set to boolean True , and <name1> as a string ""Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'."" . call the method <name6> .add_argument with 5 arguments : string <val1> , <name5> as a string <val3> , <name2> as a string <val4> ,"
"<name3> . add_argument ( <val6>   , <name4> = <val5>   , dest = 'no_location'   , <name1> = <name2> , <name3> = ""Don't write '#: filename:line' lines."" )"	"<name1> as boolean <name2> and <name3> as a string ""Don't break long message lines into several lines."" . call the method <name3> .add_argument with 5 arguments : string <val6> , <name4> set to string <val5> ,"
"<name6> . add_argument ( <val1>   , <name3> = <val2>   , <name5> = 'no_obsolete'   , <name4> = <name6> , <name1> = ""Remove obsolete message strings."" )"	"<name5> set to string 'no_location' , <name4> as boolean <name6> and <name1> as a string ""Don't write '#: filename:line' lines."" . call the method <name6> .add_argument with 5 arguments : string <val1> , <name3> as a string <val2> ,"
"<name3> . add_argument ( <val2>   , <name4> = <val6>   , <name5> = 'keep_pot'   , <name1> = <name3> , <name2> = ""Keep .pot file after making messages. Useful when debugging."" )"	"<name5> as a string 'no_obsolete' , <name1> as boolean <name3> and <name2> as a string ""Remove obsolete message strings."" . call the method <name3> .add_argument with 5 arguments : string <val2> , <name4> as a string <val6> ,"
def <name5> ( <name1> , * <name6> , ** <name3> ) :	"dest as a string 'keep_pot' , default as boolean False and help as a string ""Keep .pot file after making messages. Useful when debugging."" define the method <name5> with 3 arguments : <name1> , unpacked list <name6> and unpacked dictionary <name3> ."
<name4> = <name6> . <name1> ( <val3>   )	<name1> the value under the <val3> key of the <name6> dictionary , substitute it for <name4> .
<name6> = <name3> . <name5> ( <val4>   )	<name5> the value under the <val4> key of the <name3> dictionary , substitute it for <name6> .
<name1> . domain = <name6> . <name5> ( <val3>   )	<name5> the value under the <val3> key of the <name6> dictionary , substitute it for <name1> .domain .
<name5> . verbosity = <name2> . <name1> ( <val4>   )	<name1> the value under the <val4> key of the <name2> dictionary , substitute it for <name5> .verbosity .
<name3> = <name6> . <name1> ( <val2>   )	<name1> the value under the <val2> key of the <name6> dictionary , substitute it for <name3> .
<name4> = <name2> . <name5> ( <val6>   )	<name5> the value under the <val6> key of the <name2> dictionary , substitute it for <name4> .
<name2> . symlinks = <name4> . <name6> ( <val3>   )	<name6> the value under the <val3> key of the <name4> dictionary , substitute it for <name2> .symlinks .
<name1> = <name3> . <name6> ( <val4>   )	<name6> the value under the <val4> key of the <name3> dictionary , substitute it for <name1> .
<name3> <name2> . <name4> ( <val6>   ) :	<name4> the value under the <val6> key of the <name2> dictionary , <name3> it is true ,
<name4> += [ <val6>   , <val2>   , <val1>   , <val3>   ]	append list containing 4 elements : <val6> , <val2> , <val1> and <val3> , to <name4> .
<name2> . <name6> = list ( <name3> ( <name6> ) )	put elements of <name6> into a <name3> , substitute the length of it for <name2> .ignore_patterns .
<name6> <name2> . <name1> ( <val5>   ) :	<name1> the value under the <val5> key of the <name2> dictionary , <name6> it is true ,
<name4> . msgmerge_options = <name4> . msgmerge_options [ : ] + [ <val3>   ]	append list containing string <val3> to <name4> .msgmerge_options
<name1> . msguniq_options = <name1> . msguniq_options [ : ] + [ <val4>   ]	append list containing string <val4> to <name1> .msguniq_options .
<name6> . msgattrib_options = <name6> . msgattrib_options [ : ] + [ <val3>   ]	append list containing string <val3> to <name6> .msgattrib_options .
<name3> . xgettext_options = <name3> . xgettext_options [ : ] + [ <val5>   ]	append list containing string <val5> to <name3> .xgettext_options .
<name5> <name4> . <name6> ( <val1>   ) :	<name6> the value under the <val1> key of the <name4> dictionary , <name5> it is true ,
<name3> . msgmerge_options = <name3> . msgmerge_options [ : ] + [ <val1>   ]	append list containing string <val1> to <name3> .msgmerge_options .
<name2> . msguniq_options = <name2> . msguniq_options [ : ] + [ <val1>   ]	append list containing string <val1> to <name2> .msguniq_options .
<name2> . msgattrib_options = <name2> . msgattrib_options [ : ] + [ <val6>   ]	append list containing string <val6> to <name2> .msgattrib_options .
<name6> . xgettext_options = <name6> . xgettext_options [ : ] + [ <val3>   ]	append list containing string <val3> to <name6> .xgettext_options .
<name4> . no_obsolete = <name3> . <name5> ( <val6>   )	<name5> the value under the <val6> key of the <name3> dictionary , substitute it for <name4> .no_obsolete .
<name4> . keep_pot = <name6> . <name2> ( <val1>   )	<name2> the value under the <val1> key of the <name6> dictionary , substitute it for <name4> .keep_pot .
<name1> <name4> . domain <name6> in ( <val3>   , <val2>   ) :	<name1> <name4> .domain is <name6> equal to string <val3> or string <val2> ,
<name1> <name5> . domain == <val6>   :	<name1> <name5> .domain equals to string <val6> ,
<name2> = <name6> <name4> <name6> else [ <val1>   ]	<name4> <name6> is false , substitute it for <name2> , otherwise <name2> is a list containing string <val1> .
else :	if not ,
<name4> = <name6> <name3> <name6> else [ <val2>   , <val5>   ]	<name3> <name6> is false , substitute it for <name4> , otherwise <name4> is a list containing 2 elements : string <val2> and string <val5> .
<name4> . extensions = <name1> ( <name6> )	call the function <name1> <name6> , substitute <name4> .extensions .
if ( <name3> <name5> <name6> <name1> not <name2> <name1> not <name4> ) or self . domain <name5> <name6> :	evaluate the boolean expression : <name3> <name5> <name6> <name1> <name2> <name5> false <name1> <name4> <name5> false ,
<name5> <name1> ( <val4> % ( os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )	if the result is true or self .domain is not None , <name5> an <name1> exception with an argument string <val4> , where '%s' are replaced by :
<name5> <name2> . conf <name4> <name6>	return value of the function os .path .basename called with first element of sys .argv as an argument , and second element of sys .argv . <name5> <name2> .conf <name4> <name6> into default namespace .
<name5> <name4> . configured :	<name5> <name4> .configured ,
<name1> . USE_I18N = <name4>	<name1> .USE_I18N is boolean <name4> .
else :	if not ,
<name5> . configure ( <name3> = <name6> )	call the method <name5> .configure with an argument <name3> set to boolean <name6> .
<name2> <name4> . verbosity >  <val3> :	<name2> <name4> .verbosity is integer <val3> ,
\ <name1> . stdout . write ( <val2>    % get_text_list ( list ( <name1> . extensions ) , 'and'   ) ) \	\ call the method <name1> .stdout .write with an argument string <val2> , \
<name1> . invoked_for_django = <name5>	substitute '%s' with return value of the function get_text_list called with 2 arguments : <name1> .extensions converted into a list and string 'and' . <name1> .invoked_for_django is boolean <name5> .
<name5> . locale_paths = [ ]	<name5> .locale_paths is an empty list .
<name2> . default_locale_path = <name5>	<name2> .default_locale_path is <name5> .
<name2> os . <name1> . isdir ( os . <name1> . <name4> ( <val6>   , <val5>   ) ) :	<name4> <val6> and <val5> into a file <name1> , <name2> it is a directory ,
self . locale_paths = [ <name6> . <name5> . abspath ( <name6> . <name5> . <name4> ( <val2>   , <val3>   ) ) ]	<name4> <val2> and <val3> into a file <name5> , use it as an argument for the call the method <name6> .path .abspath ,
<name4> . default_locale_path = <name4> . locale_paths [ 0 ]	put the results into a list , substitute <name4> .locale_paths for it . substitute first element of <name4> .locale_paths for <name4> .default_locale_path .
<name5> . invoked_for_django = <name3>	<name5> .invoked_for_django is boolean <name3> .
else :	if not ,
<name6> . locale_paths . <name1> ( <name3> ( <name4> . LOCALE_PATHS ) )	convert <name4> .LOCALE_PATHS into a <name3> and <name1> <name3> <name6> .locale_paths with it .
<name6> os . path . isdir ( <val4>   ) :	<name6> <val4> is a directory ,
<name2> . locale_paths . <name6> ( <name3> . path . abspath ( <val4>   ) )	call the function <name3> .path .abspath with an argument <val4> , <name6> the result to <name2> .locale_paths .
<name1> <name3> . locale_paths :	<name1> <name3> .locale_paths is true ,
<name1> . default_locale_path = <name1> . locale_paths [ 0 ]	substitute first element of <name1> .locale_paths for <name1> .default_locale_path .
<name3> not os . path . <name1> ( <name5> . default_locale_path ) :	<name3> <name5> .default_locale_path directory doesnt <name1> ,
os . makedirs ( <name3> . default_locale_path )	create a directory <name3> .default_locale_path .
locale_dirs = filter ( os . path . isdir , <name2> . <name2> ( '%s/*'   % <name4> . default_locale_path ) )	call the function <name2> .glob with an argument : string '/*' appended to <name4> .default_locale_path converted into a string ,
<name5> = <name1> ( <name3> . path . basename , <name6> )	filter out the results for which function <name3> .path .isdir returns false , substitute the result for <name6> . <name1> the <name6> elements with mapping function <name3> .path .basename , substitute the result for <name5> .
<name5> <name2> :	<name5> <name2> is true ,
<name1> = <name5>	substitute <name5> for <name1> .
else :	if not ,
<name4> = <name5> <name6> <name2>	if <name5> is not false <name6> None , substitute it for <name4> , otherwise substitute <name2> for <name4> .
<name4> = set ( <name4> ) - set ( <name5> )	<name4> is a difference between the <name4> and <name5> sets .
<name5> <name6> :	<name5> <name6> is true ,
<name5> ( <val2>   , <val1>   , <val6>   )	call the function <name5> with 3 arguments : strings <val2> , <val1> and <val6> .
<name3> ( <val1>   )	call the function <name3> with an argument string <val1> .
<name2> :	<name2> ,
<name6> = <name5> . build_potfiles ( )	call the method <name5> .build_potfiles , substitute the result for <name6> .
<name4> <name1> <name2> <name6> :	<name4> every <name1> <name2> <name6> ,
<name6> <name4> . verbosity >  <val1> :	<name6> <name4> .verbosity is greater than integer <val1> ,
\ <name4> . stdout . <name1> ( <val3> % <name2> ) \	\ replace '%s' in string <val3> with <name2> , <name1> it to <name4> .stdout . \
<name2> <name3> <name6> <name4> :	<name2> every <name3> <name6> <name4> ,
<name5> . write_po_file ( <name3> , <name2> )	call the method <name5> .write_po_file with 2 arguments : <name3> and <name2> .
<name2> :	<name2> perform ,
<name2> not <name3> . keep_pot :	<name2> <name3> .keep_pot is false ,
<name3> . remove_potfiles ( )	call the method <name3> .remove_potfiles .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name2> = <name4> . find_files ( <val1> )	call the method <name4> .find_files with an argument string <val1> , substitute the result for <name2> .
<name2> . remove_potfiles ( )	call the method <name2> .remove_potfiles .
<name5> <name2> <name3> <name1> :	<name5> <name2> <name3> <name1> ,
<name1> :	<name1> ,
<name2> . process ( <name3> , <name3> . domain )	call the function <name2> .process with 2 arguments : <name3> and <name3> .domain .
<name4> <name2> :	if <name4> <name2> exception is caught ,
<name3> . stdout . <name1> ( <val6> % ( <name5> . file , <name5> . dirpath ) )	substitute '%s' in string <val6> with <name5> .file and <name5> .dirpath , <name1> it to <name3> .stdout .
<name2> = [ ]	<name2> is an empty list .
<name5> <name2> <name6> <name1> . locale_paths :	<name5> every <name2> <name6> <name1> .locale_paths ,
potfile = os . <name1> . <name4> ( <name1> , <val6>   % str ( <name5> . domain ) )	<name4> into a <name1> : <name1> and string <val6> , where '%s' is replaced with <name5> .domain converted into a string .
<name6> not os . <name1> . exists ( <name5> ) :	<name6> <name5> file <name1> doesnt exist ,
continue	skip this loop iteration .
<name2> = [ <val4>   ] + <name6> . msguniq_options + [ <name1> ]	append <name6> .msguniq_options to a list containing a string <val4> , append list containing <name1> to the result , substitute it for <name2> .
<name2> , <name5> , <name6> = <name3> ( <name1> )	call the function <name3> with an argument <name1> , assign the result to <name2> , <name5> and <name6> , respectively .
<name4> <name6> . PY2 :	<name4> <name6> .PY2 is true ,
<name6> = <name6> . decode ( <val5>   )	call the method <name6> .decode with an argument string <val5> , substitute it for <name6> .
<name5> <name6> :	<name5> <name6> is true ,
<name2> <name6> != <name5> :	<name2> <name6> is not equal to <name5> ,
\ <name6> <name3> ( <val5> % <name1> ) \	\ <name6> an <name3> exception with an argument string <val5> , where '%s' is replaced with <name1> . \
elif <name4> . verbosity >  <val6> :	otherwise if <name4> .verbosity is greater than integer <val6> ,
<name5> . stdout . <name4> ( <name2> )	<name4> <name2> to <name5> .stdout .
<name3> <name4> . open ( <name2> , <val6>   , <name1> = <val5>   ) <name3> fp :	call the function <name4> .open <name3> 3 arguments : <name2> , string <val6> and <name1> set to string <val5> <name3> arguments ,
<name3> . <name2> ( <name1> )	with the result renamed to <name3> , perform the following : <name2> <name1> to <name3> .
<name2> . <name3> ( <name4> )	<name3> <name4> to <name2> .
<name2> <name6>	<name2> <name6> .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name6> <name4> <name1> <name2> . locale_paths :	<name6> every <name4> <name1> <name2> .locale_paths ,
<name1> = os . <name4> . <name6> ( <name4> , <val3>   % str ( <name2> . domain ) )	<name6> into a file <name4> : <name4> and string <val3> , where '%s' is replaced with <name2> .domain converted into a string , substitute the result for <name1> .
<name4> os . <name2> . <name5> ( <name6> ) :	<name4> <name6> file <name2> <name5> ,
<name4> . unlink ( <name2> )	call the method <name4> .unlink with an argument <name2> .
def find_files ( <name1> , <name4> ) :	define the method find_potfiles with an arguments <name1> and <name4> .
def <name6> ( <name2> , <name1> ) :	define the function <name6> with arguments <name2> and <name1> .
<name5> = <name3> . <name1> . basename ( <name1> )	call the function <name3> .path .basename with an arguments <name1> , substitute the result for <name5> .
<name6> = <name1> <name2> : <name4> . fnmatchcase ( filename , <name2> )	<name6> is a <name1> function with <name2> as an argument , return value is the return value of the function <name4> .fnmatchcase ,
return any ( <name6> ( <name5> ) <name1> <name5> <name3> <name4> )	called with arguments : filename and <name5> . call the function <name6> with an argument <name5> , <name1> every <name5> <name3> <name4> ,
<name6> = '%s*'   % <name1> . sep	if any resulting element is true , return boolean True , otherwise return boolean False . convert <name1> .sep into a string and append '*' to it , substitute the result for <name6> .
norm_patterns = [ <name1> [ : - len ( <name2> ) ] <name6> <name1> . endswith ( <name2> ) else <name1> <name3> <name1> <name4> <name5> . ignore_patterns ]	<name3> <name1> <name4> <name5> .ignore_patterns <name6> <name1> ends with <name2> take sliced list <name1> from the start ,
<name1> = [ ]	to the negative length of the dir_suffix as the end index and append it to a list , if p doesnt end with dir_suffix , append p to a list , substitute resulting list for norm_patterns . <name1> is an empty list .
for dirpath , dirnames , filenames in <name5> . walk ( <name3> , <name6> = <name1> , <name2> = <name4> . symlinks ) :	call the function <name5> .walk with 3 arguments : <name3> , <name6> set to boolean <name1> , <name2> set to <name4> .symlinks ,
<name4> <name2> <name1> <name6> [ : ] :	<name4> every dirpath , <name6> and filenames <name1> the result , <name4> every <name2> <name1> list <name6> ,
if is_ignored ( <name3> . <name6> . normpath ( <name3> . <name6> . <name2> ( <name1> , <name5> ) ) , norm_patterns ) :	<name2> <name1> and <name5> into a file <name6> , use is as an argument for the call to the function <name3> .path .join ,
<name4> . <name5> ( <name2> )	use the result as an argument for the call to the os .path .join function , use the result and the norm_patterns as arguments for the call to the is_ignored function , if it evaluates to true , <name5> <name2> from the <name4> .
<name4> <name3> . verbosity >  <val1> :	<name4> <name3> .verbosity is greater than integer <val1> ,
\     <name5> . stdout . <name1> ( <val3>   % <name6> ) \	\ replace '%s' in string <val3> with <name6> , <name1> it to <name5> .stdout stream . \
elif <name4> == <val2>   :	otherwise if <name4> equals string <val2> ,
<name4> . <name2> ( <name3> )	<name2> <name3> from the <name4> .
<name3> . locale_paths . insert ( 0 , <name2> . <name5> . <name1> ( <name2> . <name5> . abspath ( <name4> ) , <name6> ) )	call the method <name2> .path .abspath with an argument <name4> , <name1> the result and <name6> into a file <name5> , inset it at the beggining of <name3> .locale_paths .
<name5> <name4> <name2> <name1> :	<name5> every <name4> <name2> <name1> ,
<name3> = <name6> . <name4> . normpath ( <name6> . <name4> . <name5> ( <name1> , <name2> ) )	<name5> <name1> and <name2> into <name4> , use it as an argument for the call to the function <name6> .path .normpath , substitute it for <name3> .
<name2> <name3> ( <name1> , <name4> . ignore_patterns ) :	call the function <name3> , with arguments : <name1> and <name4> .ignore_patterns , <name2> it evaluates to true ,
<name3> <name1> . verbosity >  <val2> :	<name3> <name1> .verbosity is greater than integer <val2> ,
\     <name1> . stdout . <name6> ( <val5>   % ( <name2> , <name3> ) ) \	\ replace '%s' in string <val5> with <name2> and <name3> , <name6> it to <name1> .stdout . \
else :	if not ,
<name4> = <name1>	<name4> is <name1> .
<name5> <name1> <name2> <name6> . locale_paths :	<name5> every <name1> <name2> <name6> .locale_paths ,
     <name3> <name2> . path . abspath ( <name6> ) . startswith ( <name2> . path . dirname ( path ) ) :	call the function <name2> .path .abspath with an argument <name6> , <name3> it starts with return value of the method <name2> .path .dirname ,
         <name1> = <name5>	called with an argument <name5> , substitute <name5> for <name1> .
<name4>	<name4> the loop execution .
<name4> not <name6> :	<name4> <name6> is false ,
     <name6> = <name5> . default_locale_path	substitute <name5> .default_locale_path for <name6> .
<name3> not <name4> :	<name3> <name4> is false ,
     <name2> <name3> ( <val6> % file_path )	<name2> an <name3> with an argument string <val6> ,
<name1> . <name3> ( <name2> ( <name4> , <name6> , <name5> ) )	where '%s' is replaced with file_path . create an object <name2> with arguments : <name4> , <name6> and <name5> , <name3> it to <name1> .
<name5> sorted ( <name6> )	sort <name6> and <name5> it .
def <name3> ( <name1> , <name5> , <name4> ) :	define the method <name3> with arguments <name1> , <name5> and <name4> .
basedir = <name1> . <name4> . <name6> ( <name1> . <name4> . dirname ( <name3> ) , <name2> , <val5>   )	call the method <name1> .path .dirname with an argument <name3> , <name6> the result , <name2> and string <val5> into a file <name4> ,
<name2> <name1> os . path . isdir ( <name3> ) :	substitute it for <name3> . <name2> <name3> is <name1> a directory ,
os . makedirs ( <name3> )	make <name3> directory ,
<name3> = os . <name4> . <name1> ( <name6> , '%s.po'   % str ( <name5> . domain ) )	convert <name5> .domain into a string and append string '.po' to it , <name1> <name6> and result in file <name4> , substitute it for <name3> .
<name4> os . <name5> . <name3> ( <name1> ) :	<name4> <name1> <name5> <name3> ,
<name1> = [ <val3>   ] + <name4> . msgmerge_options + [ <name6> , <name5> ]	append <name4> .msgmerge_options to a list containing string <val3> , append to it a list containing <name6> and <name5> , substitute the result for <name1> .
<name1> , <name5> , <name6> = <name4> ( <name3> )	call the function <name4> with an argument <name3> , assign the result to <name1> , <name5> and <name6> .
<name3> <name1> . PY2 :	<name3> <name1> .PY2 is true ,
<name3> = <name3> . decode ( <val1>   )	call the method <name3> .decode with an argument string <val1> , substitute the result for <name3> .
<name6> <name4> :	<name6> <name4> is true ,
<name3> status != <name4> :	<name3> statue is not equal to <name4> .
\ <name6> <name4> ( <val2> % <name3> ) \	\ <name6> an <name4> with an argument string <val2> , where '%s' is replaced with <name3> . \
elif <name2> . verbosity >  <val6> :	otherwise if <name2> .verbosity is greater than integer <val6> ,
<name1> . stdout . <name5> ( <name6> )	<name5> <name6> to <name1> .stdout .
else :	if not ,
<name5> <name3> . open ( <name4> , <val2>   , <name1> = <val6>   ) <name5> fp :	call the function <name3> .open <name5> 3 arguments : <name4> , string <val2> and <name1> set to string <val6> <name5> arguments ,
<name3> = <name6> . <name4> ( )	with the result renamed to <name6> , perform the following : <name4> file <name6> and substitute the result for <name3> .
<name3> not <name5> . invoked_for_django :	<name3> <name5> .invoked_for_django is false ,
<name6> = <name5> . copy_plural_forms ( <name6> , <name4> )	call the method <name5> .copy_plural_forms with arguments : <name6> and <name4> , substitute it for <name6> .
"\ msgs = msgs . replace ( <val5> % <name3> . domain , """" ) \"	\ substitute '%s' in string <val5> with <name3> .domain , \
<name4> <name2> . open ( <name3> , <val5>   , <name6> = <val1>   ) <name4> fp :	replace all the occurrences of previous string in msgs for an empty string , substitute the result for msgs . call the function <name2> .open <name4> 3 arguments : <name3> , string <val5> and <name6> set to string <val1> <name4> arguments ,
<name2> . <name5> ( <name3> )	with the result renamed to <name2> , perform the following : <name5> <name3> to <name2> .
<name6> <name2> . no_obsolete :	<name6> <name2> .no_obsolete is true ,
args = [ <val5>   ] + <name4> . msgattrib_options + [ <val6>   , <name2> , <name2> ]	append <name4> .msgattrib_options to a list containing string <val5> , append to it a list containing string <val6> , <name2> and <name2> ,
<name5> , <name1> , <name6> = <name2> ( <name3> )	substitute the result for <name3> . call the function <name2> with an argument <name3> , assign the result to <name5> , <name1> and <name6> , respectively .
<name3> <name4> :	<name3> <name4> is true ,
<name1> <name5> != <name4> :	<name1> <name5> is not equal to <name4> ,
\ <name6> <name2> ( <val5> % <name3> ) \	\ <name6> an <name2> with an argument string <val5> , where '%s' is replaced with <name3> . \
elif <name1> . verbosity >  <val3> :	otherwise if <name1> .verbosity is greater than integer <val3> ,
<name6> . stdout . <name5> ( <name4> )	<name5> <name4> to <name6> .stdout .
def <name3> ( <name6> , <name1> , <name2> ) :	define the method <name3> with arguments <name6> , <name1> and <name2> .
django_dir = <name6> . <name1> . normpath ( <name6> . <name1> . <name2> ( <name6> . <name1> . dirname ( <name3> . __file__ ) ) )	call the function <name6> .path .dirname with an argument <name3> .__file__ , <name2> the result into a <name1> ,
<name2> <name1> . domain == <val5>   :	use it as an argument for the call to the function os .path .normpath , substitute the result for django_dir . <name2> <name1> .domain equals a string <val5> ,
<name1> = ( <val3>   , <val2>   )	<name1> is a tuple with 2 elements : strings <val3> and <val2> .
else :	if not ,
<name4> = ( <val6>   , )	<name4> is a tuple with element string <val6> .
<name5> <name2> <name3> <name4> :	<name5> every <name2> <name3> <name4> ,
<name2> = os . <name3> . <name4> ( <name1> , <val6>   , <val5>   , <name2> , <val3>   , '%s.po'   % <name4> )	<name4> into a file <name3> : <name1> , <val6> , <val5> , <name2> , <val3> and string '.po' appended to <name4> , substitute the result for <name2> .
<name2> os . <name5> . <name3> ( <name1> ) :	<name2> <name1> file <name5> <name3> ,
<name3> <name2> . open ( <name4> , <val1>   , <name5> = <val6>   ) <name3> fp :	call the function <name2> .open <name3> 3 arguments : <name4> , string <val1> and <name5> set to string <val6> <name3> arguments ,
<name2> = <name6> . search ( <name5> . <name1> ( ) )	with the result renamed to <name5> , perform the following : <name1> data from file <name5> , use the result as an argument for the call to the function <name6> .search , substitute it for <name2> .
<name3> <name6> :	<name3> <name6> is true ,
plural_form_line = <name4> ( <name1> . group ( <val3>   ) )	call the method <name1> .group with an argument string <val3> , use the result as an argument for the call to the <name4> ,
<name6> <name2> . verbosity >  <val3> :	substitute the result for plural_form_line . <name6> <name2> .verbosity is greater than integer <val3> ,
\     <name2> . stdout . <name1> ( <val3> % <name5> ) \	\ replace '%s' in string <val3> with <name5> , <name1> it to <name2> .stdout . \
<name5> = [ ]	<name5> is an empty list .
<name4> = <name5>	<name4> is boolean <name5> .
\ <name5> <name2> <name1> <name6> . <name4> ( '\\n'   ) : \	<name4> <name6> by newline characters , <name5> every <name2> <name1> result ,
     <name4> not <name6> <name3> ( not <name2> <name5> <name1> . search ( <name2> ) ) :	<name4> <name6> is false <name3> , <name2> is false <name5> return value of the function <name1> .search called with an argument <name2> is false ,
\         <name2> = '%s\\n'   % <name5> \	append newline to <name5> , substitute the result for <name2> .
<name4> = <name2>	<name4> is boolean <name2> .
<name2> . <name1> ( <name6> )	<name1> <name6> to <name2> .
\ <name2> = '\\n'   . <name5> ( <name3> ) \	<name5> elements of <name3> into a string , separated by newline characters , substitute it for <name2> .
<name3>	<name3> the loop execution .
<name5> <name2>	<name5> <name2> .
<name3> <name4>	<name3> module <name4> .
<name6> <name3>	<name6> module <name3> .
<name3> <name6>	<name3> module <name6> .
<name2> <name1> . <name3> <name6> <name3>	<name2> <name1> .apps <name6> <name3> into default name space .
<name2> <name1> . core . management . base <name6> <name4> , <name3>	<name2> <name1> .core .management .base <name6> <name4> and <name3> into default name space .
<name5> <name1> . db . migrations <name4> <name2>	<name5> <name1> .db .migrations <name4> <name2> into default name space .
<name5> <name3> . db . migrations . loader <name1> <name6>	<name5> <name3> .db .migrations .loader <name1> <name6> into default name space .
<name3> <name1> . db . migrations . autodetector <name2> <name4>	<name3> <name1> .db .migrations .autodetector <name2> <name4> into default name space .
<name5> <name4> . db . migrations . questioner <name6> <name3> , <name2>	<name5> <name4> .db .migrations .questioner <name6> <name3> and <name2> into default name space .
<name4> <name3> . db . migrations . state <name6> <name1>	<name4> <name3> .db .migrations .state <name6> <name1> into default name space .
<name3> <name5> . db . migrations . writer <name6> <name2>	<name3> <name5> .db .migrations .writer <name6> <name2> into default name space .
<name6> <name5> . utils . six . moves <name2> <name4>	<name6> <name5> .utils .six .moves <name2> <name4> into default name space .
<name6> <name1> ( <name3> ) :	derive the <name6> <name1> from the <name3> <name6> .
<name4> = <val2>	<name4> is a string <val2> .
def <name1> ( <name6> , <name4> ) :	define the method <name1> with 2 arguments <name6> and <name4> .
<name1> . add_argument ( <val2>   , <name3> = <val5>   , <name4> = <val6>   , help = 'Specify the app label(s) to create migrations for.'   )	call the method <name1> .add_argument with 4 arguments : string <val2> , <name3> set to string <val5> , <name4> set to character <val6> ,
"<name1> . add_argument ( <val3>   , <name6> = <val5>   , <name4> = <val2>   , default = False , <name1> = ""Just show what migrations would be made; don't actually write them."" )"	and <name1> as a string 'Specify the app label(s) to create migrations for.' . call the method <name1> .add_argument with 5 arguments : string <val3> , <name6> as a string <val5> , <name4> as string <val2> ,
"<name2> . add_argument ( <val6>   , <name4> = <val5>   , <name1> = <val3>   , <name2> = <name6> , <name4> = ""Enable fixing of migration conflicts."" )"	"<name2> set to boolean <name6> , <name4> as a string ""Just show what migrations would be made; don't actually write them."" . call the method <name2> .add_argument with 5 arguments : string <val6> , <name4> as a string <val5> , <name1> as a string <val3> ,"
"<name3> . add_argument ( <val2>   , <name4> = <val1>   , <name5> = <val6>   , <name3> = <name2> , <name4> = ""Create an empty migration."" )"	"<name3> set to boolean <name2> and <name4> set to a string ""Enable fixing of migration conflicts."" . call the method <name3> .add_argument with 5 arguments : string <val2> , <name4> as a string <val1> , <name5> as a string <val6> ,"
<name4> . add_argument ( <val6>   , <name3> = <val1>   , dest = 'interactive'   , <name5> = True , <name2> = 'Tells Django to NOT prompt the user for input of any kind.'   )	"<name5> set to boolean False and <name2> as a string ""Create an empty migration."" . call the method <name4> .add_argument with 5 arguments : string <val6> , <name3> as a string <val1> ,"
def <name1> ( <name3> , * <name4> , ** <name5> ) :	dest as a string 'interactive' , default set to boolean True , and help as a string 'Tells Django to NOT prompt the user for input of any kind.' . define the method <name1> with 3 arguments : <name3> , unpacked list <name4> and unpacked dictionary <name5> .
<name4> . verbosity = <name3> . <name2> ( <val6>   )	<name2> the value under the <val6> key of the <name3> dictionary , substitute it for <name4> .verbosity .
<name3> . interactive = <name6> . <name2> ( <val4>   )	<name2> the value under the <val4> key of the <name6> dictionary , substitute it for <name3> .interactive .
<name6> . dry_run = <name5> . <name1> ( <val4>   , False )	<name1> the value under the <val4> key of the <name5> dictionary , if the key exists substitute it for <name6> .dry_run ,
<name6> . merge = <name5> . <name3> ( <val2>   , <name1> )	if not , <name6> .dry_run is boolean <name1> . <name3> the value under the <val2> key of the <name5> dictionary , if the key exists substitute it for <name6> .merge ,
<name5> . empty = <name6> . <name1> ( <val3>   , <name4> )	if not , <name5> .merge is boolean <name4> . <name1> the value under the <val3> key of the <name6> dictionary , if the key exists substitute it for <name5> .empty ,
<name4> = <name2> ( <name4> )	if not , self .empty is boolean False . crate a <name2> containing of <name4> elements , substitute it for <name4> .
<name2> = <name3> ( )	<name2> is an empty <name3> .
<name1> <name3> <name5> <name6> :	<name1> every <name3> <name5> <name6> ,
<name6> :	<name6> ,
<name2> . get_app_config ( <name5> )	call the method <name2> .get_app_config with an argument <name5> .
except <name3> :	if <name3> exception is caught ,
<name1> . add ( <name5> )	call the method <name1> with an argument <name5> ,
<name4> <name1> :	<name4> <name1> is true ,
<name2> <name4> <name1> <name3> :	<name2> every <name4> <name1> <name3> ,
self . stderr . <name1> ( <val5> % <name4> )	<name1> string <val5> with '%s' where '%s' is replaced with <name4> ,
sys . <name5> ( <val2> )	write it for self .stderr . <name5> the program with the integer <val2> as <name5> code .
<name6> = <name3> ( <name1> , <name2> = <name5> )	<name6> is an instance of <name3> class , created with 2 arguments : <name1> and <name2> set to boolean <name5> .
<name2> = <name4> . detect_conflicts ( )	call the method <name4> .detect_conflicts , substitute the result for <name2> .
<name6> <name2> <name4> not <name3> . merge :	<name6> <name2> is true <name4> <name3> .merge is false ,
"name_str = ""; "" . <name5> ( ""%s in %s"" % ( <val3> . <name5> ( <name2> ) , <name6> ) <name4> <name6> , <name2> <name1> <name5> . items ( ) )"	<name4> every <name6> and <name2> <name1> result of the method <name5> .items , <name5> <name2> into a string , separated by <val3> ,
<name1> <name3> . merge <name4> not <name5> :	with name_str , use it as an argument to throw an CommandError exception . <name1> <name3> .merge is true <name4> <name5> is false ,
<name4> . stdout . <name2> ( <val5> )	<name2> string <val5> to <name4> .stdout stream .
<name1>	<name1> nothing .
<name5> <name2> . merge <name4> <name3> :	<name5> <name2> .merge <name4> <name3> are both true ,
<name4> <name3> . handle_merge ( <name2> , <name6> )	call the method <name3> .handle_merge with 2 arguments : <name2> and <name6> , <name4> the result .
<name2> = <name6> ( <name4> . project_state ( ) , ProjectState . from_apps ( apps ) , InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) , )	<name2> is an instance of the <name6> class , created with 3 arguments : result of the method <name4> .project_state ,
<name2> <name3> . empty :	result of the method ProjectState .from_apps with an argument apps and result of the method InteractiveMigrationQuestioner , called with 2 arguments specified_apps set to app_labels and dry_run set to <name3> .dry_run . <name2> <name3> .empty is true ,
<name4> not <name6> :	<name4> <name6> is false ,
<name3> <name5> ( <val1> )	<name3> an <name5> with an argument string <val1> .
changes = dict ( ( <name4> , [ <name1> ( <val3> , <name4> ) ] ) for <name4> in app_labels )	crate a dictionary with <name4> mapping and from the class <name1> , created with arguments : string <val3> and <name4> ,
<name5> = <name3> . arrange_for_graph ( <name5> , <name6> . graph )	for every app in app_labels . call the method <name3> .arrange_for_graph with 2 arguments : <name5> , <name6> .graph , substitute the result for <name5> .
<name4> . write_migration_files ( <name1> )	call the method <name4> .write_migration_files with an argument <name1> .
<name5>	<name5> nothing .
changes = <name5> . changes ( <name2> = <name6> . <name2> , <name1> = <name4> or None , convert_apps = <name4> or None , )	call the method <name5> .changes with 3 arguments : <name2> set to <name6> .graph , <name1> set to <name4> ,
<name2> <name3> <name5> <name4> <name1> . verbosity >= <val6> :	<name2> it exists or None <name2> <name3> <name4> convert_apps set to app_labels , <name2> it exists or None <name2> <name3> , substitute the result for <name5> . <name2> <name5> is false <name4> <name1> .verbosity is greater than , or equal to iteger <val6> ,
<name5> len ( <name2> ) == <val6> :	<name5> length of <name2> is equal to integer <val6> ,
elif len ( <name1> ) >  <val2> :	otherwise if length of <name1> is greater than integer <val2> ,
else :	write it to self .stdout . if not ,
<name6> . stdout . <name4> ( <val3> )	<name4> string <val3> to <name6> .stdout stream .
<name6>	<name6> nothing .
<name5> . write_migration_files ( <name4> )	call the method <name5> .write_migration_files with an argument <name4> .
def <name4> ( <name6> , <name3> ) :	define the method <name4> with arguments <name6> and <name3> .
<name5> = { }	<name5> is an empty dictionary .
<name2> <name6> , <name1> <name4> <name5> . items ( ) :	<name2> every <name6> and <name1> <name4> result of the method <name5> .items ,
<name2> <name5> . verbosity >= <val4> :	<name2> <name5> .verbosity is greater or equal to integer <val4> ,
"\ self . stdout . write ( self . style . MIGRATE_HEADING ( <val4> % <name3> ) + ""\\n"" ) \"	substitute '%s' in a string <val4> with <name3> , append newline to it ,
<name6> <name4> <name3> <name1> :	use it as an argument <name6> the call to the method self .style .MIGRATE_HEADING , write the result to self .stdout . <name6> every <name4> <name3> <name1> ,
<name4> = <name6> ( <name1> )	<name4> is an instance of <name6> class , created with an argument <name1> .
<name1> <name2> . verbosity >= <val6> :	<name1> <name2> .verbosity is greater or equal to integer <val6> ,
\ <name2> . stdout . write ( <val4> % ( <name2> . style . MIGRATE_LABEL ( <name6> . filename ) , ) ) \	\ substitute '%s' in a string <val4> with return value of the <name2> .style .MIGRATE_LABEL method called with argument <name6> .filename , \
<name1> <name6> <name4> <name2> . operations :	write the result to self .stdout . <name1> every <name6> <name4> <name2> .operations ,
\     <name5> . stdout . <name3> ( <val4> % <name6> . describe ( ) ) \	\ substitute '%s' in a string <val4> with return value of the <name6> .describe method , <name3> the result to <name5> .stdout . \
<name4> not <name5> . dry_run :	<name4> <name5> .dry_run is false ,
   <name1> = <name4> . path . dirname ( <name5> . path )	call the function <name4> .path .dirname with an argument <name5> .path , substitute the result for <name1> .
<name6> not <name5> . <name1> ( <name2> , False ) :	<name1> the value under the <name2> key of the <name5> dictionary , <name6> exists and it is false ,
     <name3> <name5> os . path . isdir ( <name1> ) :	<name3> <name1> is <name5> a directory ,
         os . mkdir ( <name4> )	make a directory <name4> .
<name6> = os . <name2> . <name4> ( <name1> , <val5> )	<name4> <name1> and string <val5> into a file <name2> , substitute it for <name6> .
<name2> <name5> os . path . isfile ( <name3> ) :	<name2> <name3> is <name5> a file ,
"         open ( <name6> , ""w"" ) . close ( )"	crate a file named <name6> .
<name3> [ app_label ] = <name6>	value under the all_label key of the <name3> dictionary is boolean <name6> .
<name2> = <name6> . as_string ( )	call the method <name6> .as_string , substitute the result for <name2> .
"<name2> <name1> ( <name6> . path , ""wb"" ) <name5> <name4> :"	<name1> <name6> .path file in write mode , <name2> the file descriptor <name5> <name4> , perform ,
     <name3> . <name5> ( <name2> )	<name5> <name2> to file <name3> .
elif <name3> . verbosity == <val5> :	otherwise if <name3> .verbosity equals integer <val5> ,
"\     self . stdout . write ( self . style . MIGRATE_HEADING ( <val3> % <name5> . filename ) + ""\\n"" ) \"	substitute '%s' in a string <val3> with <name5> .filename , append newline to it ,
"\ <name6> . stdout . <name3> ( ""%s\\n"" % <name5> . as_string ( ) ) \"	use it as an argument for the call to the method <name6> .style .MIGRATE_HEADING , <name3> the result to <name6> .stdout . call the method <name5> .as_string , append newline to the result , <name3> it to <name6> .stdout .
def <name1> ( <name5> , <name6> , <name2> ) :	define the method <name1> with arguments <name5> , <name6> and <name2> .
<name2> <name6> . interactive :	<name2> <name6> .interactive is true ,
<name3> = <name6> ( )	<name3> is an instance of a <name6> class .
else :	if not ,
<name4> = MigrationQuestioner ( <name1> = {  'ask_merge'   : True }  )	<name4> is an instance of a InteractiveMigrationQuestioner class , created with an argument : <name1> set to dictionary with entry :
<name4> <name6> , <name2> <name3> <name5> . items ( ) :	boolean True <name4> 'ask_merge' . <name4> every <name6> and <name2> <name3> result of the method <name5> .items ,
<name6> = [ ]	<name6> is an empty list .
<name1> <name4> <name3> <name6> :	<name1> every <name4> <name3> <name6> ,
<name1> = <name5> . get_migration ( <name4> , <name6> )	call the method <name5> .get_migration with arguments <name4> and <name6> , substitute the result for <name1> .
migration . ancestry = <name1> . graph . forwards_plan ( ( <name5> , <name6> ) )	call the method <name1> .graph .forwards_plan with argument a tuple , with 2 elements : <name5> and <name6> ,
<name3> . <name1> ( <name5> )	substitute the result for <name5> .ancestry . <name1> <name5> to <name3> .
<name6> = <name3>	<name6> is <name3> .
<name5> <name6> <name4> <name3> ( * [ <name1> . ancestry <name5> <name1> <name4> <name2> ] ) :	<name5> <name1> <name4> <name2> append <name1> .ancestry to a list , <name3> the resulting list into tuples of pairs , <name5> every <name6> <name4> result ,
<name1> reduce ( <name2> . eq , <name3> ) :	apply <name2> .eq function to elements of <name3> iterable , until <name3> is reduced to a single value , <name1> the result is true ,
<name3> = <name5> [ 0 ]	substitute first element of <name5> for <name3> .
else :	if not ,
<name6>	<name6> the loop execution ,
<name4> <name5> <name6> <name3> :	<name4> <name5> <name6> <name3> ,
<name2> <name4> ( <val6> % <name3> )	<name2> an <name4> with an argument string <val6> , where '%s' is replaced with <name3> .
<name2> <name3> <name6> <name1> :	<name2> every <name3> <name6> <name1> ,
<name1> . branch = <name1> . ancestry [ ( <name1> . ancestry . index ( <name6> ) + 1 ) : ]	call the method <name1> .ancestry .index with an argument <name6> , increment the result by one ,
<name4> . merged_operations = [ ]	slice <name4> .ancestry list from the last result as an starting index to the end , substitute the slice for <name4> .branch . <name4> .merged_operations is an empty list .
<name3> <name1> , <name5> <name2> <name4> . branch :	<name3> every <name1> and <name5> <name2> <name4> .branch ,
<name4> . merged_operations . <name3> ( <name2> . get_migration ( <name1> , <name5> ) . <name6> )	call the method <name2> .get_migration with arguments <name1> and <name5> , <name3> the <name4> .merged_operations with the <name6> field of the result .
<name1> <name2> . verbosity >  0 :	<name1> <name2> .verbosity is greater than integer 1 ,
self . stdout . write ( self . style . MIGRATE_HEADING ( <val3> % <name6> ) )	substitute '%s' in a string <val3> with <name6> ,
<name4> <name3> <name6> <name5> :	use it as an argument <name4> the call to the method self .style .MIGRATE_HEADING , write the result to self .stdout . <name4> every <name3> <name6> <name5> ,
self . stdout . write ( self . style . MIGRATE_LABEL ( <val5> % <name2> . name ) )	substitute '%s' in a string <val5> with <name2> .name ,
<name3> <name2> <name6> <name4> . merged_operations :	use it as an argument <name3> the call to the method self .style .MIGRATE_HEADING , write the result to self .stdout . <name3> every <name2> <name6> <name4> .merged_operations ,
\     <name4> . stdout . <name2> ( <val6> % <name5> . describe ( ) ) \	\ substitute '%s' in a string <val6> with return value of the <name5> .describe method , <name2> the result to <name4> .stdout . \
<name2> <name4> . ask_merge ( <name3> ) :	call the method <name4> .ask_merge with an argument <name3> , <name2> it evaluates to true ,
<name3> = [ <name6> . parse_number ( <name5> . name ) for <name5> in merge_migrations ]	<name3> is a list containing return value of the <name6> .parse_number method called with an argument <name5> .name ,
<name5> :	for every migration in merge_migrations . <name5> ,
<name5> = max ( [ x for x in <name6> if x <name2> not None ] )	<name5> <name2> maximum <name6> element .
except <name5> :	if <name5> exception is caught ,
<name2> = <val4>	<name2> is integer <val4> .
"<name1> = type ( ""Migration"" , ( <name3> , ) , {   ""dependencies"" : [ ( app_label , migration . name ) for migration in merge_migrations ] , }  )"	<name1> is a instance of a class named <name3> , derived from the base class <name3> , with 1 field :
new_migration = subclass ( <val1> % ( <name5> + 1 ) , <name6> )	dependencies set to a list of tuples with 2 elements : <name6> and migration .name for every migration in merge_migrations . call the method subsclass with 2 arguments : string <val1> , replace '%04i' with <name5> incremented by one ,
<name5> = <name6> ( <name3> )	that occupies minimum 4 places within a string , and app_label , substitute the result for <name3> . <name5> is instance of <name6> class , created with <name3> argument .
"<name2> <name6> ( <name3> . path , ""wb"" ) <name1> <name5> :"	<name6> <name3> .path file in write mode , <name2> the file descriptor <name1> <name5> , perform the following ,
<name5> . <name6> ( <name4> . as_string ( ) )	call the method <name4> .as_string , <name6> the result to <name5> file .
<name5> <name3> . verbosity >  <val6> :	<name5> <name3> .verbosity is greater than integer <val6> ,
\ <name2> . stdout . <name3> ( <val5> % <name1> . <name6> ) \	\ substitute '%s' in a string <val5> with <name1> <name6> , <name3> it to <name2> .stdout . \
<name1> <name5> <name3> <name4>	<name1> <name5> <name3> <name4> into default name space .
<name6> <name3> <name1> <name4>	<name6> <name3> <name1> <name4> into default name space .
<name5> <name4> <name6> <name3>	<name5> <name4> <name6> <name3> into default name space .
<name1> <name5>	<name1> module <name5> .
<name5> <name2>	<name5> module <name2> .
<name4> <name3> . <name6> <name1> <name6>	<name4> <name3> .apps <name1> <name6> into default name space .
<name2> <name3> . core . management <name5> <name4>	<name2> <name3> .core .management <name5> <name4> into default name space .
<name4> <name3> . core . management . base <name2> <name6> , <name5>	<name4> <name3> .core .management .base <name2> <name6> and <name5> into default name space .
<name5> <name1> . core . management . color <name3> <name6>	<name5> <name1> .core .management .color <name3> <name6> into default name space .
<name2> <name5> . core . management . sql <name6> <name1> , <name4> , <name3>	<name2> <name5> .core .management .sql <name6> <name1> , <name4> and <name3> into default name space .
<name1> <name2> . db <name5> <name4> , <name3> , <name6> , <name1>	<name1> <name2> .db <name5> <name4> , <name3> , <name6> and <name1> into default name space .
<name4> <name5> . db . migrations . executor <name2> <name3>	<name4> <name5> .db .migrations .executor <name2> <name3> into default name space .
<name3> <name6> . db . migrations . loader <name2> <name1> , <name4>	<name3> <name6> .db .migrations .loader <name2> <name1> and <name4> into default name space .
<name1> <name5> . db . migrations . state <name3> <name6>	<name1> <name5> .db .migrations .state <name3> <name6> into default name space .
<name4> <name2> . db . migrations . autodetector <name5> <name6>	<name4> <name2> .db .migrations .autodetector <name5> <name6> into default name space .
<name5> <name3> . utils . module_loading <name1> <name4>	<name5> <name3> .utils .module_loading <name1> <name4> into default name space .
<name6> <name5> ( <name2> ) :	derive the <name6> <name5> from the base <name6> <name2> .
<name1> = <val6>	<name1> is a string <val6> .
def <name3> ( <name1> , parser ) :	define the method <name3> with <name1> class instance and parse as the arguments .
<name4> . add_argument ( <val3>   , <name1> = <val2>   , <name6> = 'App label of an application to synchronize the state.'   )	call the method <name4> .add_argument with string <val3> , <name1> set to charcter <val2> , <name6> containing string ,
<name6> . add_argument ( <val4>   , <name1> = <val5>   , <name2> = 'Database state will be brought to the state after that migration.'   )	'App label of an application to synchronize the state.' as arguments . call the method <name6> .add_argument with string <val4> , <name1> set to charcter <val5> , <name2> containing string ,
<name5> . add_argument ( <val3>   , <name2> = <val1>   , <name6> = <val4>   , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.'   )	'Database state will be brought to the state after that migration.' as arguments . call the method <name5> .add_argument with string <val3> , <name2> containing string <val1> , <name6> set to string <val4> ,
<name2> . add_argument ( <val6>   , <name1> = <val5>   , dest = 'load_initial_data'   , <name4> = <name3> , <name2> = 'Tells Django not to load any initial data after database synchronization.'   )	<name4> set to <name3> , <name2> containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments . call the method <name2> .add_argument with string <val6> , <name1> containing string <val5> ,
"<name4> . add_argument ( <val5>   , <name6> = <val2>   , <name3> = <val1>   , <name4> = DEFAULT_DB_ALIAS , <name5> = 'Nominates a database to synchronize. '    'Defaults to the ""default"" database.'   )"	<name3> set to string 'load_initial_data' , <name4> set to True , <name5> containing string 'Tells Django not to load any initial data after database synchronization.' as arguments . call the method <name4> .add_argument with string <val5> , <name6> containing string <val2> , <name3> set to string <val1> ,
<name5> . add_argument ( <val1>   , <name6> = <val3>   , <name2> = <val4>   , <name5> = False , <name1> = 'Mark migrations as run without actually running them'   )	"<name5> set to DEFAULT_DB_ALIAS , <name1> containing string 'Nominates a database to synchronize. Defaults to the ""default"" database.' as arguments . call the method <name5> .add_argument with string <val1> , <name6> containing string <val3> , <name2> set to string <val4> ,"
<name3> . add_argument ( <val5>   , <val6>   , <name4> = <val1>   , <name2> = <val3>   , <name5> = <name6> , <name4> = 'Show a list of all known migrations and which are applied'   )	<name5> set to <name6> , <name4> containing string 'Mark migrations as run without actually running them' as arguments . call the method <name3> .add_argument with string <val5> , string <val6> , <name4> contains string <val1> , <name2> set to string <val3> ,
def <name1> ( <name4> , * <name6> , ** <name3> ) :	default set to False , help containing string 'Show a list of all known migrations and which are applied' as arguments . define the method <name1> with <name4> instance of a class , list <name6> , dictionary <name3> as arguments .
<name6> . verbosity = <name3> . <name1> ( <val2>   )	<name1> the value from the <name3> dictionary under the key <val2> , substitute it for <name6> .verbosity .
<name1> . interactive = <name2> . <name6> ( <val5>   )	<name6> the value from the <name2> dictionary under the key <val5> , substitute it for <name1> .interactive .
<name4> . show_traceback = <name6> . <name3> ( <val2>   )	<name3> the value from the <name6> dictionary under the key <val2> , substitute it for <name4> .show_traceback .
<name3> . load_initial_data = <name1> . <name4> ( <val2>   )	<name4> the value from the <name1> dictionary under the key <val2> , substitute it for <name3> .load_initial_data .
<name6> . test_database = <name5> . <name3> ( <val1>   , <name4> )	<name3> the value from the <name5> dictionary under the key <val1> , or <name4> if the key dont exists , substitute it for <name6> .test_database .
<name5> <name6> <name1> <name2> . get_app_configs ( ) :	<name5> every <name6> <name1> return value of the call to the function <name2> .get_app_configs ,
<name4> <name2> ( <name6> . module , <val5> ) :	<name4> call to the function <name2> with <name6> .module and <val5> evaluates to True .
import_module ( <val3>   , <name4> . name )	import module <val3> from the package <name4> .name .
<name4> = <name5> . <name1> ( <val6>   )	<name1> the value under the key <val6> of the <name5> dictionary , substitute it for <name4> .
connection = <name5> [ <name1> ]	substitute <name5> element at the index of the value <name1> for <name5> .
<name4> <name2> . <name3> ( <val6> , <name5> ) :	<name3> the value under the <val6> key of <name2> dictionary , <name4> key doesnt exist return <name5> , <name4> the return value is True ,
return <name5> . show_migration_list ( <name1> , [ <name6> [ <val4>   ] ] if <name6> [ <val4>   ] else None )	call the method <name5> .show_migration_list with <name1> as first argument , as second argument use value under the <val4> key of <name6> dictionary ,
<name3> = <name5> ( <name6> , <name1> . migration_progress_callback )	if exists , if not use None as the second argument , return the result . call the function <name5> with <name6> and <name1> .migration_progress_callback as arguments , substitute the result fro <name3> .
<name6> = <name4> . loader . detect_conflicts ( )	call the <name4> .loader .detect_conflicts , substitute the result fr <name6> .
<name6> <name3> :	<name6> <name3> is true ,
"name_str = ""; "" . <name4> ( ""%s in %s"" % ( "", "" . <name4> ( <name5> ) , <name2> ) <name3> <name2> , <name5> <name6> <name1> . items ( ) )"	<name3> every <name2> and <name5> <name6> key , value tuple pairs of <name1> dictionary <name4> <name5> into a string separated by commas ,
<name4> = <name6>	with '%s' substituted for name_str , as argument . <name4> is boolean <name6> .
<name5> = <name6>	<name5> is boolean <name6> .
<name1> <name4> [ <val2>   ] <name3> <name4> [ <val6>   ] :	<name1> values under the <val2> <name3> <val6> keys of the <name4> dictionary are True ,
<name4> , <name5> = <name1> [ <val2>   ] , <name1> [ <val6>   ]	assign values under the <val2> and <val6> keys of the <name1> dictionary to the <name4> and <name5> , respectively .
<name4> <name6> <name1> <name2> <name3> . loader . migrated_apps :	<name4> <name6> is <name1> contained <name2> <name3> .loader .migrated_apps ,
<name1> <name3> ( <val2> % app_label )	<name1> <name3> exception with <val2> ,
<name4> <name5> == <val1> :	with '%s' substituted for app_label , as arguments . <name4> <name5> equals to string <val1> ,
<name3> = [ ( <name4> , <name6> ) ]	<name3> is a list containing tuple with two elements , <name4> and <name6> .
else :	if not ,
<name4> :	<name4> ,
<name4> = <name2> . loader . get_migration_by_prefix ( <name1> , <name6> )	call the <name2> .loader .get_migration_by_prefix with <name1> and <name6> , substitute the result for <name4> .
except <name2> :	if <name2> exception is caught ,
<name6> <name2> ( <val5> % ( migration_name , app_label ) )	<name6> <name2> exception with <val5> ,
except <name1> :	with '%s' substituted for migration_name and app_label , respectively , as arguments . if <name1> exception is caught ,
<name2> <name3> ( <val4> % ( migration_name , app_label ) )	<name2> <name3> exception with <val4> ,
<name5> = [ ( <name2> , <name6> . name ) ]	with '%s' substituted for migration_name and <name2> , respectively , as arguments . <name5> is a list containing tuple with two elements , <name2> and <name6> .name .
<name2> = <name1>	<name2> is boolean <name1> .
elif <name5> [ <val2>   ] :	otherwise if value under the <val2> key of <name5> dictionary is true ,
<name2> = <name4> [ <val5>   ]	substitute the value under the <val5> key of <name4> dictionary for <name2> .
<name4> <name6> <name1> <name3> <name2> . loader . migrated_apps :	<name4> <name6> is <name1> contained <name3> <name2> .loader .migrated_apps ,
<name3> <name1> ( <val6> % app_label )	<name3> <name1> exception with <val6> ,
targets = [ <name3> <name5> <name3> <name1> <name6> . loader . graph . leaf_nodes ( ) <name2> <name3> [ 0 ] == <name4> ]	with '%s' substituted <name5> <name4> , as arguments . <name5> every <name3> <name1> return vale of the method <name6> .loader .graph .leaf_nodes , check <name2> the first element of <name3> equals to <name4> ,
else :	if it does append it to targets list . if not ,
<name3> = <name5> . loader . graph . leaf_nodes ( )	call the method <name5> .loader .graph .leaf_nodes and substitute its result for <name3> .
<name4> = <name3>	<name4> is boolean <name3> .
<name5> = <name2> . migration_plan ( <name3> )	call the <name2> .migration_plan method with <name3> as the argument , substitute the result for <name5> .
<name5> <name2> . verbosity >= <val3> :	<name5> <name2> .verbosity is greater or equal to integer <val3> .
<name2> . stdout . write ( <name2> . style . MIGRATE_HEADING ( <val1> ) )	call the <name2> .style .MIGRATE_HEADING method , with string <val1> as an argument ,
<name6> <name3> <name1> <name4> . loader . unmigrated_apps :	use the result as an argument for the call to the self .stdout .write method . <name6> <name3> <name1> <name4> .loader .unmigrated_apps exist ,
self . stdout . write ( self . style . MIGRATE_LABEL ( <val6> ) + ( <val3> . <name4> ( <name5> . loader . unmigrated_apps ) ) )	<name4> the <name5> .loader .unmigrated_apps into a string separated by string <val3> append it to the end of a string <val6> ,
<name5> <name2> :	use it as an argument for the call to the self .style .MIGRATE_LABEL method , use the result of the previous method as an argument for the call to the self .stdout .write method . <name5> <name2> is true ,
"self . stdout . write ( self . style . MIGRATE_LABEL ( ""  Apply all migrations: "" ) + ( <val2> . <name5> ( <name6> ( <name4> <name3> <name4> , <name1> <name2> <name5> ) ) or ""(none)"" ) )"	<name3> every <name4> and <name1> <name2> <name5> , put <name4> into <name4> <name6> , <name5> all the <name6> elements into <name4> string separated by string <val2> ,
else :	"if set is empty return string '(none)' instead , append the previous to the string "" Apply all migrations: "" , use the previous string as the argument for the call to the method self .style .MIGRATE_LABEL , use the result as an argument for the call to the method self .stdout .write . if not ,"
<name1> <name6> [ 0 ] [ 1 ] <name2> <name5> :	<name1> element of <name6> in first row and second column <name2> <name5> ,
"self . stdout . write ( self . style . MIGRATE_LABEL ( <val1> ) + ""%s"" % ( <name3> [ 0 ] [ 0 ] , ) )"	convert the first element of the first row of <name3> to string , append it to the string <val1> ,
else :	use the it as an argument for the call to the self .style .MIGRATE_LABEL method , use the result to cal the self .stdout .write method . if not ,
"self . stdout . write ( self . style . MIGRATE_LABEL ( ""  Target specific migration: "" ) + <val4> % ( <name2> [ 0 ] [ 1 ] , <name2> [ 0 ] [ 0 ] ) )"	replace '%s' in string <val4> with second and first element of the first <name2> row , respectively ,
<name5> <name2> <name3> <name4> . loader . unmigrated_apps :	"append it to the string ""  Target specific migration: "" , use it as the argument for the call to the self .style .MIGRATE_LABEL method , call the self .stdout .write method with previous return value as an argument . <name5> <name2> <name3> <name4> .loader .unmigrated_apps is true ,"
<name2> <name4> . verbosity >= <val6> :	<name2> <name4> .verbosity is greater or equal to integer <val6> .
<name2> . stdout . write ( <name2> . style . MIGRATE_HEADING ( <val1> ) )	call the <name2> .style .MIGRATE_HEADING with string <val1> as an argument ,
<name4> = <name6> . sync_apps ( <name1> , <name3> . loader . unmigrated_apps )	use the result as an argument for the call to the <name6> .stdout .write . call the <name6> .sync_apps method with <name1> and <name3> .loader .unmigrated_apps as arguments , substitute it for <name4> .
else :	if not ,
created_models = [ ]	create_models is an empty list .
<name2> <name3> . get ( <val4> , False ) :	<name2> the value under the <val4> key of the <name3> dictionary exists ,
<name5> ( <val6>   , <name2> = max ( <name1> . <name2> - <val4> , <val3> ) , interactive = False , database = db , reset_sequences = False , inhibit_post_migrate = True , )	call the function <name5> with string <val6> , <name2> set to greater element , <name1> .verbosity decremented by <val4> or integer <val3> ,
<name5> <name6> . verbosity >= <val2> :	interactive set to boolean False , database set to db , reset_sequences set to boolean False , inhibit_post_migrate set to boolean True . <name5> <name6> .verbosity is greater or equal to integer <val2> ,
<name4> . stdout . write ( <name4> . style . MIGRATE_HEADING ( <val2> ) )	call the <name4> .style .MIGRATE_HEADING method with string <val2> as an argument , use the result as an argument for the call to the <name4> .stdout .write method .
<name1> <name5> <name4> :	<name1> <name4> is <name5> true ,
<name1> <name2> . verbosity >= <val3> :	<name1> <name2> .verbosity is greater or equal to integer <val3> ,
<name4> . stdout . write ( <val2> )	call the method <name4> .stdout .write with string <val2> as an argument .
autodetector = <name6> ( <name5> . loader . project_state ( ) , ProjectState . from_apps ( apps ) , )	call the <name6> function with arguments , return value of the call to the method <name5> .loader .project_state ,
<name6> = <name1> . <name6> ( <name2> = <name5> . loader . <name2> )	and return value of the call to the method ProjectState .from_apps with apps as an argument , assign it to the <name1> . call the method <name1> .changes with the <name2> set to <name5> .loader .graph as an argument , substitute it for the <name6> .
<name6> <name5> :	<name6> <name5> is true ,
<name2> . stdout . write ( <name2> . style . NOTICE ( <val5> ) )	call the method <name2> .style .NOTICE with string <val5> as an argument , use the result as an argument for the call to the <name2> .stdout .write method .
<name3> . stdout . write ( <name3> . style . NOTICE ( <val6> ) )	call the method <name3> .style .NOTICE with string <val6> as an argument , use the result as an argument for the call to the <name3> .stdout .write method .
else :	if not ,
<name3> . migrate ( <name1> , <name2> , <name4> = <name5> . get ( <val6> , False ) )	call the <name3> .migrate method with , <name1> , <name2> and <name4> set to the value under the <val6> key of <name5> dictionary ,
<name4> ( <name5> , <name3> . verbosity , <name3> . interactive , <name6> . alias )	if the 'fake' key doesnt exists set fake to boolean False , as arguments . call the method <name4> with <name5> , <name3> .verbosity , <name3> .interactive and <name6> .alias as arguments .
def <name5> ( <name4> , <name3> , <name1> , <name2> = <name6> ) :	define the method <name5> with <name4> class instance , <name3> , <name1> and <name2> set to boolean <name6> as arguments .
<name4> <name6> . verbosity >= <val5> :	<name4> <name6> .verbosity is greater or equal to integer <val5> ,
<name5> <name6> == <val1> :	<name5> <name6> equals to string <val1> ,
<name3> . stdout . write ( <val1> % <name6> , <name5> = <val2> )	call the <name3> .stdout .write method , with string <val1> with '%s' replaced with <name6> and <name5> set to <val2> , as arguments .
<name2> . stdout . <name5> ( )	<name5> the output buffer of the <name2> .stdout object .
elif <name2> == <val6> :	otherwise if <name2> equals to string <val6> ,
<name5> <name1> :	<name5> <name1> is true ,
<name4> . stdout . write ( <name4> . style . MIGRATE_SUCCESS ( <val6> ) )	wrte to the standard output result of the call to the method <name4> .style .MIGRATE_SUCCESS with string <val6> as a argument .
else :	if not ,
<name4> . stdout . write ( <name4> . style . MIGRATE_SUCCESS ( <val6> ) )	wrte to the standard output result of the call to the method <name4> .style .MIGRATE_SUCCESS with string <val6> as a argument .
elif <name3> == <val5> :	otherwise if <name3> equals to string <val5> .
<name5> . stdout . write ( <val4> % <name3> , <name1> = <val2> )	call the <name5> .stdout .write method , with string <val4> with '%s' replaced with <name3> and <name1> set to <val2> , as arguments .
<name5> . stdout . <name3> ( )	<name3> the output buffer of the <name5> .stdout object .
elif <name3> == <val4> :	otherwise if <name3> equals to string <val4> .
<name4> <name2> :	<name4> <name2> is true ,
<name5> . stdout . write ( <name5> . style . MIGRATE_SUCCESS ( <val6> ) )	wrte to the standard output result of the call to the method <name5> .style .MIGRATE_SUCCESS with string <val6> as a argument .
else :	if not ,
<name2> . stdout . write ( <name2> . style . MIGRATE_SUCCESS ( <val4> ) )	wrte to the standard output result of the call to the method <name2> .style .MIGRATE_SUCCESS with string <val4> as a argument .
def <name1> ( <name6> , <name2> , <name5> ) :	define the method <name1> with <name6> class instance , <name2> and <name5> as arguments .
<name6> = <name5> . <name6> ( )	call the <name5> .cursor method , substitute the result for <name6> .
<name2> :	<name2> ,
<name4> = <name3> . introspection . table_names ( <name1> )	call the <name3> .introspection .table_names with <name1> as argument , store the result in <name4> .
<name3> = <name5> . introspection . installed_models ( <name6> )	call the <name5> .introspection .table_names with <name6> as argument , store the result in <name3> .
<name4> = <name1> ( )	<name4> is a <name1> .
<name5> = { }	<name5> is a empty dictionary .
all_models = [ ( <name5> . label , router . get_migratable_models ( <name5> , connection . alias , include_auto_created = True ) ) <name4> <name5> <name6> <name1> . get_app_configs ( ) <name2> <name5> . models_module <name3> <name5> <name4> and <name5> . label <name6> app_labels ]	<name4> every <name5> <name6> return value of the method <name1> .get_app_configs <name2> <name5> .models_module <name3> <name5> <name4> ,
def <name6> ( <name2> ) :	and app_config .label is contained in app_labels , create a tuple containing app_config .label and return value of the method router .get_migratable_models called with app_config , connection .alias and include_auto_created set to True , append the tuple to the list all_models . define the method <name6> with <name2> as an argument .
<name3> = <name6> . _meta	substitute <name6> ._meta for <name3> .
<name4> = <name2> . introspection . table_name_converter	substitute <name2> .introspection .table_name_converter for <name4> .
return not ( ( <name2> ( <name5> . db_table ) <name1> <name3> ) or ( <name5> . auto_created and <name2> ( <name5> . auto_created . _meta . db_table ) <name1> <name3> ) )	evaluate next boolean expression , value of <name2> function with <name5> .db_table as argument is contained <name1> <name3> ,
<name1> = OrderedDict ( ( <name6> , <name3> ( filter ( <name5> , <name2> ) ) ) <name4> <name6> , <name2> <name1> all_models )	or opts .auto_created is True and return value of converter function with opts .auto_created ._meta .db_table is contained <name1> tables , invert the evaluated expression and return it . <name1> is OrderDict class instance , created with tuple of two elements , <name6> and <name3> of elements of <name2> <name4> which <name5> function returned true , <name4> every <name6> and <name2> <name1> all_modules .
<name1> = <name6> ( <name3> . chain ( * <name5> . values ( ) ) )	unpack the <name5> .values function return value and feed it to the <name3> .chain function , <name1> is a <name6> containing chanied list .
<name3> ( <name6> , <name1> . verbosity , <name1> . interactive , <name2> . alias )	call the <name3> with <name6> , <name1> .verbosity , <name1> .interactive . <name2> .alias as arguments .
<name6> <name2> . verbosity >= <val1> :	<name6> <name2> .verbosity is greater or equal than integer <val1> ,
\ self . stdout . <name3> ( <val2> ) \	\ <name3> the string <val2> to the standard output . \
<name2> <name1> . atomic ( <name5> = <name3> . alias , <name4> = <name3> . features . can_rollback_ddl ) :	<name2> the call to the <name1> .atomic method <name2> <name5> set to <name3> .alias , <name4> set to <name3> .features .can_rollback_ddl as arguments ,
<name5> <name6> , <name1> <name2> <name3> . items ( ) :	<name5> every <name6> and <name1> <name2> return value of <name3> .items function ,
<name4> <name2> <name5> <name3> :	<name4> every <name2> <name5> <name3> ,
       <name1> <name5> . verbosity >= <val4> :	<name1> <name5> .verbosity is greater or equal to <val4> ,
\         <name3> . stdout . write ( <val4> % ( app_name , model . _meta . object_name ) ) \	\ call the <name3> .stdout .write method with string <val4> as argument , with all occurrences of '%s' replaced with , \
sql , references = <name4> . creation . sql_create_model ( <name6> , <name3> ( ) , <name2> )	app_name and <name6> ._meta .object_name , respectively . evaluate <name4> .creation .sql_create_model method with <name6> , <name3> ( ) and <name2> as arguments ,
<name6> . <name2> ( <name3> )	assign the result to the sql and references , respectively . <name2> <name3> to <name6> set .
<name4> . <name6> ( <name3> )	<name6> <name3> to <name4> set .
<name4> <name1> , <name2> <name6> <name3> . items ( ) :	<name4> every <name1> and <name2> <name6> return value of <name3> .items method .
         <name4> . setdefault ( <name1> , [ ] ) . <name5> ( <name2> )	call the method <name5> with <name2> as argument , on the result call the <name4> .setdefault method with <name1> and empty list as arguments .
<name3> <name1> <name6> <name2> :	<name3> <name1> is contained <name6> <name2> ,
             sql . extend ( <name5> . creation . sql_for_pending_references ( <name2> , <name3> ( ) , <name6> ) )	call the <name5> .creation .sql_for_pending_references method with <name2> , <name3> ( ) and <name6> as arguments ,
<name4> . extend ( <name2> . creation . sql_for_pending_references ( model , <name1> ( ) , <name5> ) )	use the result as the argument for the call to the <name4> .extend method . call the <name2> .creation .sql_for_pending_references method with refto , <name1> ( ) and <name5> as arguments ,
<name1> <name6> . verbosity >= <val2> <name4> <name5> :	use the result as the argument for the call to the <name5> .extend method . <name1> <name6> .verbosity is greater or equal than integer <val2> <name4> <name5> is true ,
\         <name5> . stdout . write ( <val4> % <name6> . _meta . db_table ) \	\ call the <name5> .stdout .write method with string <val4> as argument , with all occurrences of '%s' replaced with <name6> ._meta .db_table . \
<name6> statement in <name1> :	<name6> statements is <name1> ,
         <name3> . execute ( <name6> )	call the <name3> .execute method with <name6> as argument .
<name1> . <name2> ( <name3> . introspection . table_name_converter ( <name4> . _meta . db_table ) )	evaluate the method <name3> .introspection .table_name_converter with <name4> ._meta .db_table as argument , <name2> it to <name1> .
<name5> :	<name5> , perform ,
<name5> . close ( )	call the <name5> .close method .
<name4> = <name3> . <name4> ( )	call the <name3> .cursor method , substitute it for <name4> .
<name2> :	<name2> ,
<name2> <name5> . verbosity >= <val6> :	<name2> <name5> .verbosity is greater or equal than integer <val6> ,
\ self . stdout . <name4> ( <val3> ) \	\ <name4> the string <val3> to the standard output . \
<name3> <name2> , model_list <name1> <name4> . items ( ) :	<name3> every <name2> and mode_list <name1> return value of <name4> .items method ,
<name3> <name1> <name2> <name5> :	<name3> <name1> <name2> <name5> ,
<name3> <name1> <name4> <name2> :	<name3> <name1> is contained <name4> <name2> ,
     <name2> = <name5> ( <name6> , <name4> ( ) , <name1> )	call the method <name5> with <name6> , <name4> ( ) and <name1> as arguments , substitute the result for <name2> .
<name5> <name4> :	<name5> <name4> is empty ,
         <name6> <name4> . verbosity >= <val1> :	<name6> <name4> .verbosity is greater or equal to integer <val1> ,
\             <name4> . stdout . write ( <val5> % ( app_name , model . _meta . object_name ) ) \	\ call the <name4> .stdout .write method with string <val5> as argument , \
<name6> :	with all occurrences of '%s' replaced with app_name and model ._meta .object_name , respectively . <name6> ,
             <name4> <name6> . atomic ( <name1> = <name2> . alias ) :	<name4> call to the function <name6> .atomic <name4> <name1> set to <name2> .alias as argument ,
                 <name3> <name6> <name5> <name1> :	<name3> every <name6> <name5> <name1> ,
                     <name3> . execute ( <name4> )	call the <name3> .execute method with <name4> as argument .
except <name1> <name5> <name4> :	if exception of class <name1> , <name5> <name4> , is caught ,
\             <name4> . stderr . write ( <val5> % ( app_name , model . _meta . object_name , e ) ) \	\ call the <name4> .stderr .write method with string <val5> as argument , \
<name2> <name1> . show_traceback :	with all occurrences of '%s' replaced with app_name and model ._meta .object_name and e , respectively . <name2> <name1> .show_traceback is true ,
                 <name5> . print_exc ( )	call the <name5> .print_exc method .
else :	if not ,
         <name1> <name6> . verbosity >= <val3> :	<name1> <name6> .verbosity is greater or equal to integer <val3> ,
\             <name6> . stdout . write ( <val2> % ( app_name , model . _meta . object_name ) ) \	\ call the <name6> .stderr .write method with string <val2> as argument , \
<name2> <name4> . verbosity >= <val6> :	with all occurrences of '%s' replaced with app_name and model ._meta .object_name , respectively . <name2> <name4> .verbosity is greater or equal to integer <val6> ,
\ self . stdout . <name1> ( <val6> ) \	\ <name1> string <val6> to the standard output . \
<name2> <name5> , <name4> <name6> <name1> . items ( ) :	<name2> every <name5> and <name4> <name6> return value of <name1> .items method ,
<name6> <name3> <name5> <name1> :	<name6> every <name3> <name5> <name1> ,
<name3> <name6> <name5> <name1> :	<name3> <name6> is contained <name5> <name1> ,
     index_sql = <name2> . creation . sql_indexes_for_model ( <name6> , <name3> ( ) )	call the <name2> .creation .sql_indexes_for_model with <name6> and <name3> ( ) as arguments , substitute the result for index_squl .
<name5> <name2> :	<name5> <name2> is not empty ,
         <name6> <name4> . verbosity >= <val5> :	<name6> <name4> .verbosity is greater or equal to integer <val5> ,
\             <name2> . stdout . write ( <val5> % ( app_name , model . _meta . object_name ) ) \	\ call the <name2> .stderr .write method with string <val5> as argument , \
<name1> :	with all occurrences of '%s' replaced with app_name and model ._meta .object_name , respectively . <name1> ,
             <name4> <name3> . atomic ( <name6> = <name1> . alias , <name5> = <name1> . features . can_rollback_ddl ) :	<name4> call to the function <name3> .atomic <name4> <name6> set to <name1> .alias and <name5> set to <name1> .features .can_rollback_ddl , as arguments .
                 <name3> <name5> <name6> <name2> :	<name3> every <name5> <name6> <name2> ,
                     <name6> . execute ( <name1> )	call the method <name6> .execute with <name1> as argument .
except <name4> <name3> <name6> :	if exception of the class <name4> , <name3> <name6> , is caught ,
\             <name5> . stderr . write ( <val4> % ( app_name , model . _meta . object_name , e ) ) \	\ call the <name5> .stderr .write method with string <val4> as argument , \
<name2> :	with all occurrences of '%s' replaced with app_name and model ._meta .object_name and e , respectively . <name2> perform ,
<name4> . close ( )	call the <name4> .close method .
<name6> <name5> . load_initial_data :	<name6> <name5> .load_initial_data is not empty ,
<name4> <name6> <name2> <name5> :	<name4> every <name6> <name2> <name5> ,
<name1> ( <val4>   , <val3>   , <name2> = <name5> . <name2> , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )	call the method <name1> with string <val4> , string <val3> , <name2> set to <name5> .verbosity ,
<name4> <name3>	database set to connection .alias , skip_validation set to boolean True , app_label set to app_label and hide_empty set to boolean True . <name4> <name3>
def <name5> ( <name3> , <name2> , <name4> = <name6> ) :	define <name5> with <name3> class instance , <name2> and <name4> set to <name6> , as arguments .
<name5> = <name4> ( <name3> )	<name5> is instance of <name4> initialized with <name3> as an argument .
<name5> = <name6> . <name5>	substitute <name6> .graph for <name5> .
<name6> <name1> :	<name6> <name1> is not empty ,
<name4> = [ ]	<name4> is an empty list .
<name1> <name3> in <name6> :	<name1> every <name3> is <name6> ,
<name1> <name5> <name3> <name2> <name4> . migrated_apps :	<name1> <name5> is <name3> contained <name2> <name4> .migrated_apps ,
<name4> . <name5> ( <name3> )	<name5> <name3> to the <name4> .
<name4> <name1> :	<name4> <name1> in not empty ,
"<name5> <name1> ( <val4> % ( "", "" . join ( invalid_apps ) ) )"	<name5> a <name1> exception , with string <val4> as argument , substitute '%s' in previous string with ,
else :	string joined from invalided_apps list and separated with string ', ' . if not ,
<name3> = sorted ( <name6> . migrated_apps )	sort <name6> .migrated_apps , substitute it for <name3> .
<name3> <name5> <name1> <name6> :	<name3> every <name5> <name1> <name6> .
<name3> . stdout . write ( <name6> , <name3> . style . MIGRATE_LABEL )	call <name3> .stdout .write method with <name6> and <name3> .style .MIGRATE_LABEL as arguments .
<name3> = <name1> ( )	<name3> is an empty <name1> .
<name3> <name5> <name1> <name4> . leaf_nodes ( <name2> ) :	<name3> every <name5> <name1> return value of the <name4> .leaf_nodes method called with the <name2> argument ,
<name3> <name5> <name6> <name4> . forwards_plan ( <name2> ) :	<name3> every <name5> <name6> return value of the <name4> .forwards_plan method called with <name2> as argument .
<name4> <name6> <name5> <name1> <name3> <name2> <name6> [ 0 ] == <name4> :	<name4> <name6> is <name5> contained <name1> <name3> <name2> first element of <name6> equals to <name4> ,
       <name6> = <name5> [ 1 ]	substitute second element of <name5> for <name6> .
<name3> <name1> . nodes [ <name4> ] . <name6> :	<name3> <name6> filed of <name1> .nodes element at the <name4> index is true ,
         <name5> += <val2> % len ( <name1> . nodes [ <name6> ] . <name4> )	substitute '%s' in the string <val2> with length of <name4> filed of <name1> .nodes element at the <name6> index , append the string to the <name5> .
<name3> <name2> <name4> <name6> . applied_migrations :	<name3> <name2> is contained <name4> <name6> .applied_migrations ,
         self . stdout . <name4> ( <val3> % <name6> )	substitute '%s' with <name6> in the string <val3> , <name4> it to the standard output .
else :	if not ,
         self . stdout . <name1> ( <val4> % <name6> )	substitute '%s' with <name6> in the string <val4> , <name1> it to the standard output .
<name1> . <name5> ( <name3> )	<name5> <name3> to the <name1> set .
<name4> not <name5> :	<name4> <name5> is an empty set ,
<name6> . stdout . write ( <val1> , <name6> . style . MIGRATE_FAILURE )	call the <name6> .stdout .write method with string <val1> and <name6> .style .MIGRATE_FAILURE as arguments .
<name1> <name5>	<name1> module <name5> .
<name6> <name4>	<name6> module <name4> .
<name3> <name5> . core . management . base <name2> <name6>	<name3> <name5> .core .management .base <name2> <name6> into default name space .
<name1> <name3> . utils . deprecation <name4> <name5>	<name1> <name3> .utils .deprecation <name4> <name5> into default name space .
<name2> <name1> ( <name3> ) :	derive the <name2> <name1> from the <name3> <name2> .
<name2> = <val3>	<name2> is a string <val3> .
def <name1> ( <name6> , <name4> ) :	define the method <name1> with 2 arguments <name6> and <name4> .
<name5> . add_argument ( <val6>   , <name1> = <name3> . REMAINDER , <name4> = <val2>   )	call the method <name5> .add_argument with 3 arguments : string <val6> , <name1> set to <name3> .REMAINDER and <name4> as a string <val2>
def <name6> ( <name1> , * <name4> , ** <name5> ) :	define the method <name6> with 3 arguments : <name1> , unpacked list <name4> and unpacked dictionary <name5> .
<name6> . warn ( <val1> , RemovedInDjango19Warning )	call the method <name6> .warn with 2 arguments : string <val1> ,
<name4> <name5> . conf <name1> <name6>	and RemovedInDjango19Warning . <name4> <name5> .conf <name1> <name6> into default namespace .
<name1> <name6> . utils <name4> <name2>	<name1> <name6> .utils <name4> <name2> into default namespace .
<name1> :	<name1> ,
<name1> . activate ( <name2> . LANGUAGE_CODE )	call the method <name1> .activate with an argument <name2> .LANGUAGE_CODE .
except <name2> :	if <name2> exception is caught ,
pass	do nothing .
<name6> <name2> . core . servers . fastcgi <name4> <name5>	<name6> <name2> .core .servers .fastcgi <name4> <name5> into default namespace .
<name6> ( <name2> )	call the function <name6> with an argument <name2> .
def <name5> ( <name2> , <name4> ) :	define the method <name5> with 2 argument : <name2> and <name4> .
<name3> <name4> . core . servers . fastcgi <name6> <name1>	<name3> <name4> .core .servers .fastcgi <name6> <name1> into default namespace .
<name4> <name1>	<name4> <name1> .
<name6> <name4> <name2> <name3>	<name6> <name4> <name2> <name3> into default name space .
<name3> <name4> <name2> <name4>	<name3> <name4> <name2> <name4> into default name space .
<name3> <name4>	<name3> module <name4> .
<name1> <name2>	<name1> module <name2> .
<name2> <name4>	<name2> module <name4> .
<name6> <name2>	<name6> module <name2> .
<name6> <name4>	<name6> module <name4> .
<name3> <name5> . core . management . base <name4> <name6> , <name1>	<name3> <name5> .core .management .base <name4> <name6> and <name1> into default name space .
<name2> <name4> . core . servers . basehttp <name6> <name5> , <name3>	<name2> <name4> .core .servers .basehttp <name6> <name5> and <name3> into default name space .
<name4> <name1> . db <name2> <name3> , <name6>	<name4> <name1> .db <name2> <name3> and <name6> into default name space .
<name4> <name2> . db . migrations . executor <name3> <name6>	<name4> <name2> .db .migrations .executor <name3> <name6> into default name space .
<name4> <name3> . utils <name5> <name1>	<name4> <name3> .utils <name5> <name1> into default name space .
<name3> <name2> . utils <name1> <name4>	<name3> <name2> .utils <name1> <name4> into default name space .
<name3> <name1> . core . exceptions <name2> <name6>	<name3> <name1> .core .exceptions <name2> <name6> into default name space .
"\ naiveip_re = <name1> . compile ( r <val2> ""^(?: (?P<addr>     (?P<ipv4>\\d{1,3}(?:\\.\\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\\[[a-fA-F0-9:]+\\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\\d+)$"" <val2> , <name1> . X ) \"	"\ call the method <name1> .compile with 2 arguments : raw string <val2> ""^(?: (?P<addr> (?P<ipv4>\\d{1,3}(?:\\.\\d{1,3}){3}) |"" <val2> \"
<name4> = <val1>	"\ ""(?P<ipv6>\\[[a-fA-F0-9:]+\\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\\d+)$"" , re .X <name4> is a string <val1> . \"
<name5> <name2> ( <name3> ) :	derive the <name5> <name2> from the <name3> <name5> .
<name5> = <val6>	<name5> is a string <val6> .
<name3> = <name6>	<name3> is boolean <name6> .
def <name6> ( <name1> , <name4> ) :	define the method <name6> with 2 arguments <name1> and <name4> .
<name5> . add_argument ( <val2>   , <name6> = <val3>   , <name4> = <val1>   )	call the method <name5> .add_argument with 3 arguments : string <val2> , <name6> = <val3> and <name4> as a string <val1> .
<name4> . add_argument ( <val1>   , <val5>   , <name6> = <val2>   , dest = 'use_ipv6'   , default = False , help = 'Tells Django to use an IPv6 address.'   )	call the method <name4> .add_argument with 6 arguments : string <val1> , string <val5> , <name6> set to string <val2> ,
<name3> . add_argument ( <val5>   , <name2> = <val6>   , <name1> = 'use_threading'   , <name4> = True , <name3> = 'Tells Django to NOT use threading.'   )	<name1> set to string 'use_ipv6' , <name4> set to boolean False and <name3> set to string 'Tells Django to use an IPv6 address.' . call the method <name3> .add_argument with 5 arguments : string <val5> , <name2> set to string <val6> ,
<name4> . add_argument ( <val6>   , <name3> = <val5>   , <name2> = 'use_reloader'   , <name1> = <name4> , <name6> = 'Tells Django to NOT use the auto-reloader.'   )	<name2> set to string 'use_threading' , <name1> set to boolean <name4> and <name6> set to 'Tells Django to NOT use threading.' . call the method <name4> .add_argument with 5 arguments : string <val6> , <name3> set to string <val5> ,
<name2> <name1> ( <name4> , * <name3> , ** <name6> ) :	dest set to string 'use_reloader' , default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.' . <name2> <name1> with 3 arguments : <name4> , unpacked list <name3> and unpacked dictionary <name6> .
<name4> <name1> ( )	call the function <name1> , <name4> the result .
def <name6> ( <name3> , * <name2> , ** <name5> ) :	define the method <name6> with 3 arguments : <name3> , unpacked list <name2> and unpacked dictionary <name5> .
<name3> <name5> . conf <name6> <name4>	<name3> <name5> .conf <name6> <name4> into default namespace .
<name6> <name4> <name3> . DEBUG <name1> <name4> <name3> . ALLOWED_HOSTS :	<name6> <name4> <name3> .DEBUG is true <name1> <name3> .ALLOWED_HOSTS is false ,
<name5> <name1> ( <val3>   )	<name5> an <name1> exception with an argument string <val3> .
<name6> . use_ipv6 = <name5> . get ( <val1>   )	substitute value under the <val1> key of the <name5> dictionary for <name6> .use_ipv6 .
<name1> <name4> . use_ipv6 <name5> not <name2> . has_ipv6 :	<name1> <name4> .use_ipv6 is true <name5> <name2> .has_ipv6 is false ,
<name6> <name2> ( <val3>   )	<name6> an <name2> exception with an argument string <val3> .
<name4> . _raw_ipv6 = <name3>	<name4> ._raw_ipv6 is boolean <name3> .
<name2> not <name4> . <name3> ( <val6>   ) :	<name3> the value under the <val6> key of the <name4> dictionary , <name2> it is false ,
<name1> . addr = ''	<name1> .addr is an empty string .
<name6> . port = <name5>	substitute <name5> for <name6> .port .
else :	if not ,
<name5> = <name6> . match ( <name3> , <name1> [ <val2>   ] )	call the method <name6> .match with 2 arguments : <name3> and value under the <val2> key of the <name1> dictionary , substitute the result for <name5> .
<name1> <name6> <name5> <name4> :	<name1> <name6> <name5> <name4> ,
<name5> . addr , <name3> , <name4> , <name2> , <name5> . port = <name6> . groups ( )	where '%s' is replaced with value under the 'addrport' key of the options dictionary . call the method <name6> .groups , assign the result to <name5> .addr , <name3> , <name4> , <name2> and <name5> .port , respectively .
<name3> not <name6> . port . isdigit ( ) :	call the method <name6> .port .isdigit , <name3> it evaluates to false ,
<name3> <name5> ( <val4> % <name1> . port )	<name3> an <name5> exception with an argument string <val4> , where '%r' is repaced with <name1> .port .
<name3> <name6> . addr :	<name3> <name6> .addr is true ,
<name5> <name4> :	<name5> <name4> is true ,
<name5> . addr = <name5> . addr [ 1 : - 1 ]	substitute <name5> .addr without the first and last element for <name5> .addr .
<name6> . use_ipv6 = <name3>	<name6> .use_ipv6 is boolean <name3> .
<name1> . _raw_ipv6 = <name6>	<name1> ._raw_ipv6 is boolean <name6> .
elif <name6> . use_ipv6 <name3> not <name2> :	otherwise if <name6> .use_ipv6 is true <name3> <name2> is false ,
<name3> not <name1> . addr :	<name3> <name1> .addr is false ,
<name1> . addr = <val5>   <name2> <name1> . use_ipv6 else <val6>	<name2> <name1> .use_ipv6 substitute string <val5> for <name1> .addr , <name2> not substitute <val6> for <name1> .addr .
<name1> . _raw_ipv6 = bool ( <name1> . use_ipv6 )	convert <name1> .use_ipv6 to boolean , substitute it for <name1> ._raw_ipv6 .
<name5> . run ( ** <name4> )	call the <name5> .run method with unpacked dictionary <name4> as an argument .
def <name6> ( <name2> , ** <name1> ) :	define the method <name6> with 3 arguments : <name2> and unpacked dictionary <name1> .
<name3> = <name4> . get ( <val2>   )	substitute value under the <val2> key of the <name4> dictionary for <name3> .
<name4> <name5> :	<name4> <name5> is true ,
<name6> . main ( <name2> . inner_run , <name4> , <name5> )	call the method <name6> .main with 3 arguments : <name2> .inner_run , <name4> and <name5> .
else :	if not ,
<name1> . inner_run ( <name6> , ** <name3> )	call the method <name1> .inner_run with 2 arguments : <name6> and unpacked dictionary <name3> .
def <name6> ( <name1> , * <name4> , ** <name2> ) :	define the method <name6> with 3 arguments : <name1> , unpacked list <name4> and unpacked dictionary <name2> .
<name1> <name5> . conf <name4> <name6>	<name1> <name5> .conf <name4> <name6> into default namespace .
from <name1> . utils <name2> <name4>	<name1> .utils <name2> <name4> into default namespace .
<name2> = <name4> . get ( <val3>   )	substitute value under the <val3> key of the <name4> dictionary for <name2> .
<name3> = <name6> . <name4> ( <val2>   , ''   )	<name4> the value under the <val2> key of the <name6> dictionary , if it exists substitute it for <name3> ,
<name1> = 'CTRL-BREAK'   <name5> <name2> . platform == 'win32'   else 'CONTROL-C'	<name5> not , shutdown_message is an empty string . <name5> <name2> .platform equals string win32 ', substitute string ' CTRL - BREAK ' for quit_command, if not substitute string ' CONTROL - C '  for <name1> .
\ <name1> . stdout . <name5> ( <val3> ) \	\ <name5> string <val3> to <name1> .stdout stream . \
<name5> . validate ( <name2> = <name4> )	call the method <name5> .validate with an argument <name2> set to boolean <name4> .
<name3> :	<name3> ,
<name1> . check_migrations ( )	call the method <name1> .check_migrations .
except <name2> :	if <name2> exception is caught ,
pass	do nothing .
<name6> = <name3> . <name6> ( ) . <name4> ( <val1>   )	call the function <name3> .now , on the result call the method <name4> with an argument string <val1> , substitute the result for <name6> .
<name2> <name4> . PY2 :	<name2> <name4> .PY2 is true ,
<name1> = <name1> . decode ( <val4>   )	call the method <name1> .decode with an argument string <val4> , substitute the result for <name1> .
"\ <name3> . stdout . write ( ( ""%(started_at)s\\n"" ""Django version %(version)s, using settings %(settings)r\\n"" ""Starting development server at http://%(addr)s:%(port)s/\\n"" ""Quit the server with %(quit_command)s.\\n"" ) % {   ""started_at"" : now , ""version"" : <name3> . get_version ( ) , ""settings"" : settings . SETTINGS_MODULE , ""addr"" : '[%s]'   % <name3> . addr if <name3> . _raw_ipv6 else <name3> . addr , ""port"" : <name3> . port , ""quit_command"" : quit_command , }  ) \"	"\ call the method <name3> .stdout .write with an argument : string ""%(started_at)s\\nDjango version %(version)s, using settings %(settings)r\\n"" \"
<name4> :	<name4> ,
<name5> = <name4> . get_handler ( * <name3> , ** <name2> )	call the method <name4> .get_handler with 2 arguments unpacked list <name3> and unpacked dictionary <name2> , substitute the result for <name5> .
<name6> ( <name4> . addr , int ( <name4> . port ) , <name3> , <name5> = <name4> . use_ipv6 , <name1> = <name1> )	call the function <name6> with 5 arguments : <name4> .addr , <name4> .port converted to an integer , <name3> , <name5> set to <name4> .use_ipv6 , and <name1> set to <name1> .
except <name2> . error as <name6> :	if <name2> .error , renamed to <name6> , exception is caught ,
"<name4> = {   <name1> . EACCES : <val2> , <name1> . EADDRINUSE : ""That port is already in use."" , <name1> . EADDRNOTAVAIL : ""That IP address can't be assigned-to."" , }"	<name4> is a dictionary with 3 initial entries : string <val2> for <name1> .EACCES ,
<name3> :	"That port is already in use . for errno .EADDRINUSE and ""That IP address can't be assigned-to."" for errno .EADDRNOTAVAIL . <name3> ,"
<name1> = <name3> [ <name2> . errno ]	get the value under the <name2> .errno key of the <name3> dictionary , substitute it for <name1> .
except <name5> :	if <name5> exception is caught .
<name1> = str ( <name5> )	convert <name5> to a string , substitute it for <name1> .
<name4> . stderr . <name6> ( <val2> % <name1> )	replace '%s' in a string <val2> with <name1> , <name6> it to <name4> .stderr .
os . _exit ( <val3> )	exit the program with the code integer <val3> .
except <name6> :	if <name6> exception is caught ,
<name3> <name2> :	<name3> <name2> is true ,
<name4> . stdout . <name5> ( <name3> )	<name5> <name3> to <name4> .stdout file stream .
sys . <name3> ( <val4> )	<name3> program with code integer <val4> .
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name2> = <name6> ( <name3> [ <name4> ] )	<name2> is an instance of the class <name6> created with an argument : value under the <name4> key of the <name3> dictionary .
<name4> = <name1> . migration_plan ( <name1> . loader . graph . leaf_nodes ( ) )	call the method <name1> .migration_plan wiht return value of te method <name1> .loader .graph .leaf_nodes as argument , substitute it for <name4> .
<name5> <name2> :	<name5> <name2> is true ,
"\ <name1> . stdout . write ( <name1> . style . NOTICE ( ""\\nYou have unapplied migrations; your app may not work properly until they are applied."" ) ) \"	call the method <name1> .style .NOTICE with an argument :
\ <name4> . stdout . <name6> ( <name4> . style . NOTICE ( <val3> ) ) \	"\ string : ""\\nYou have unapplied migrations; your app may not work properly until they are applied."" , <name6> it to <name4> .stdout . call the method <name4> .style .NOTICE with an argument string <val3> , \"
<name4> = <name5>	write it to self .stdout . substitute <name5> for <name4> .
<name4> <name2>	<name4> module <name2> .
<name3> <name6> . core . management . base <name4> <name1>	<name3> <name6> .core .management .base <name4> <name1> into default name space .
<name4> <name5> ( <name1> ) :	derive the <name4> <name5> from the <name1> <name4> .
<name3> = <val2>	<name3> is a string <val2> .
<name6> = <name1>	<name6> is boolean <name1> .
<name1> = [ <val5>   , <val2>   ]	<name1> is a list containing 2 elements : string <val5> and string <val2> .
def <name1> ( <name4> , <name3> ) :	define the method <name1> with 2 arguments <name4> and <name3> .
<name3> . add_argument ( <val6>   , <name1> = <val2>   , <name5> = <val4>   , help = 'Tells Django to use plain Python, not IPython or bpython.'   )	call the method <name3> .add_argument with 4 arguments : string <val6> , <name1> set to string <val2> , <name5> as a string <val4> ,
<name3> . add_argument ( <val4>   , <name1> = <val5>   , dest = 'no_startup'   , <name6> = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'   )	and <name6> is a string 'Tells Django to use plain Python, not IPython or bpython.' . call the method <name3> .add_argument with 4 arguments : string <val4> , <name1> as a string <val5> ,
"<name5> . add_argument ( <val6>   , <val4>   , <name2> = <name1> . shells , <name3> = 'interface'   , <name5> = 'Specify an interactive interpreter interface. Available options: ""ipython"" and ""bpython""'   )"	<name3> as a string 'no_startup' and <name5> as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' . call the method <name5> .add_argument with 5 arguments : string <val6> , string <val4> , <name2> set to string <name1> .shells ,
def <name6> ( <name5> ) :	"dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: ""ipython"" and ""bpython""' . define the method <name6> with an argument <name5> ."
<name1> <name2> . Shell <name5> <name3>	<name1> <name2> .Shell <name5> <name3> into default namespace .
<name1> = <name6> ( <name2> = [ ] )	<name1> is an instance of <name6> class , created with an argument <name2> as an empty list .
<name5> . mainloop ( )	call the method <name5> .mainloop .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name6> <name4> . frontend . terminal . ipapp <name3> <name5>	<name6> <name4> .frontend .terminal .ipapp <name3> <name5> into default namespace .
<name2> = <name6> . <name1> ( )	call the method <name1> of <name6> class , substitute the result for <name2> .
<name3> . initialize ( <name5> = [ ] )	call the method <name3> .initialize with an argument <name5> as an empty list .
<name6> . start ( )	call the method <name6> .start .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name5> <name1> <name4> <name6>	<name5> <name1> <name4> <name6> into default namespace .
<name1> ( <name2> = [ ] )	call the method <name1> with an argument <name2> as an empty list .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name4> <name5> <name6> ( <name3> . _ipython , <name3> . _ipython_pre_100 , <name3> . _ipython_pre_011 ) :	<name4> every <name5> <name6> tuple containing 3 elements : <name3> ._ipython , <name3> ._ipython_pre_100 and <name3> ._ipython_pre_011 ,
<name6> :	<name6> ,
<name2> ( )	call the function <name2> .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
else :	if not ,
<name3>	<name3> nothing .
<name2> <name3> ( <val1> )	<name2> an <name3> exception with an argument string <val1> .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name1> <name4>	<name1> <name4> .
<name1> . embed ( )	call the method <name1> .embed .
def <name2> ( <name5> , <name1> = <name3> ) :	define the method <name2> with an arguments <name5> and <name1> set to <name3> .
<name1> = [ <name4> ] <name6> <name4> else <name3> . shells	<name6> <name4> is true substitute list with element <name4> for <name1> , <name6> not substitute <name3> .shells for <name1> .
<name3> <name4> <name1> <name5> :	<name3> every <name4> <name1> <name5> ,
<name3> :	<name3> ,
<name1> getattr ( <name6> , <name4> ) ( )	get <name4> attribute of the <name6> object , call it and <name1> the result .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
<name5> <name6>	<name5> an <name6> exception .
def <name6> ( <name2> , ** <name4> ) :	define the method <name6> with 3 arguments : <name2> and unpacked dictionary <name4> .
<name5> :	<name5> ,
<name6> <name2> [ <val4>   ] :	<name6> value under <val4> key of the <name2> dictionary is true ,
<name6> <name5>	<name6> an <name5> exception .
<name5> . run_shell ( <name3> = <name1> [ <val6>   ] )	call the method <name5> .run_shell with an argument <name3> set to value under the <val6> key of the <name1> dictionary .
except <name4> :	if <name4> exception is caught ,
<name6> <name1>	<name6> <name1> .
<name6> = { }	<name6> is an empty dictionary .
<name1> :	<name1> ,
<name2> <name3>	<name2> <name3> .
except <name6> :	if <name6> exception is caught ,
pass	do nothing .
else :	if not ,
<name6> <name5>	<name6> <name5> .
<name3> . set_completer ( <name4> . Completer ( <name2> ) . <name5> )	call the method <name4> .Completer with an argument <name2> , use the <name5> field of the result as an argument for the call to the method <name3> .set_completer .
<name6> . parse_and_bind ( <val1> )	call the method <name6> .parse_and_bind with an argument string <val1> .
<name4> not <name1> [ <val2>   ] :	get the value under the <val2> key of the <name1> dictionary , <name4> it evaluates to false ,
<name3> <name1> <name2> ( <name6> . environ . get ( <val5> ) , '~/.pythonrc.py'   ) :	<name3> every <name1> <name2> tuple containing 2 elements : return value of the function <name6> .environ .get called with a string <val5> ,
<name3> not <name1> :	and string '~/.pythonrc.py' as tuples second element . <name3> <name1> is true ,
     continue	skip this loop iteration .
<name6> = <name4> . path . expanduser ( <name6> )	call the function <name4> .path .expanduser with an argument <name6> , substitute the result for <name6> .
<name3> <name5> os . path . isfile ( <name2> ) :	<name3> <name2> is <name5> a file ,
     continue	skip this loop iteration .
<name6> :	<name6> ,
     <name1> <name6> ( <name4> ) as <name5> :	<name6> <name4> , <name1> the file <name5> renamed to <name5> perform the following ,
         exec ( <name3> ( <name4> . <name6> ( ) , <name5> , <val1>   ) , <name2> )	<name3> the <name4> .read in mode <val1> source is <name6> from file <name5> , execute the compiled script with <name2> variables .
except <name1> :	if <name1> exception is caught ,
     pass	do nothing .
<name4> . interact ( <name2> = <name1> )	call the method <name4> .interact with an argument <name2> set to <name1> .
<name1> <name3> <name2> <name5>	<name1> <name3> <name2> <name5> into default name space .
<name1> <name3> . core . management . base <name5> <name4>	<name1> <name3> .core .management .base <name5> <name4> into default name space .
<name5> <name2> . core . management . sql <name6> <name1>	<name5> <name2> .core .management .sql <name6> <name1> into default name space .
<name4> <name6> . db <name1> <name2> , <name5>	<name4> <name6> .db <name1> <name2> and <name5> into default name space .
<name2> <name4> ( <name6> ) :	derive the <name2> <name4> from the <name6> base <name2> .
<name1> = <val4>	<name1> is a string <val4> .
<name6> = <name2>	<name6> is boolean <name2> .
def <name1> ( <name5> , <name4> ) :	define the method <name1> with 2 arguments <name5> and <name4> .
super ( <name3> , self ) . <name5> ( <name2> )	call the method <name5> from the base class of the class <name3> , with an argument <name2> .
def <name6> ( <name5> , <name3> , ** <name2> ) :	"and help set to a string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.' . define the method <name6> with 3 arguments : <name5> , <name3> and unpacked dictionary <name2> ."
<name2> <name1> . models_module <name4> <name5> :	<name2> <name1> .models_module <name4> <name5> ,
<name3>	<name3> nothing .
<name6> = <name4> [ <name5> [ <val1>   ] ]	get the value under the <val1> key of the <name5> dictionary , use it as the key to get the value from the <name4> dictionary , substitute the result for <name6> .
<name5> = <name3> ( <name1> , <name6> . style , <name4> )	call the function <name3> with 3 arguments : <name1> , <name6> .style and <name4> , substitute the result for <name5> .
\ <name6> '\\n'   . <name1> ( <name3> ) \	<name1> <name3> into a string , separated by newlines , <name6> it .
<name4> <name2> <name1> <name6>	<name4> <name2> <name1> <name6> into default name space .
<name6> <name1> . core . management . base <name2> <name4>	<name6> <name1> .core .management .base <name2> <name4> into default name space .
<name1> <name2> . core . management . sql <name3> <name4>	<name1> <name2> .core .management .sql <name3> <name4> into default name space .
<name3> <name6> . db <name1> <name5> , <name2>	<name3> <name6> .db <name1> <name5> and <name2> into default name space .
<name2> <name6> ( <name4> ) :	derive the <name2> <name6> from the <name4> base <name2> .
<name5> = <val4>	<name5> is a string <val4> .
<name5> = <name4>	<name5> is boolean <name4> .
def <name3> ( <name5> , <name1> ) :	define the method <name3> with 2 arguments <name5> and <name1> .
super ( <name3> , self ) . <name5> ( <name6> )	call the method <name5> from the base class of the class <name3> , with an argument <name6> .
def <name6> ( <name2> , <name3> , ** <name1> ) :	"and help set to a string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.' . define the method <name6> with 3 arguments : <name2> , <name3> and unpacked dictionary <name1> ."
<name4> <name6> . models_module <name2> <name5> :	<name4> <name6> .models_module <name2> <name5> ,
<name6>	<name6> nothing .
<name4> = <name1> [ <name6> [ <val2>   ] ]	get the value under the <val2> key of the <name6> dictionary , use it as the key to get the value from the <name1> dictionary , substitute the result for <name4> .
<name2> = <name5> ( <name4> , <name1> . style , <name6> )	call the function <name5> with 3 arguments : <name4> , <name1> .style and <name6> , substitute the result for <name2> .
\ <name2> '\\n'   . <name6> ( <name4> ) \	<name6> <name4> into a string , separated by newlines , <name2> it .
<name5> <name1> <name3> <name6>	<name5> <name1> <name3> <name6> into default name space .
<name1> <name4> . core . management . base <name5> <name3>	<name1> <name4> .core .management .base <name5> <name3> into default name space .
<name3> <name6> . core . management . sql <name1> <name2>	<name3> <name6> .core .management .sql <name1> <name2> into default name space .
<name4> <name1> . db <name6> <name3> , <name5>	<name4> <name1> .db <name6> <name3> and <name5> into default name space .
<name2> <name4> ( <name6> ) :	derive the <name2> <name4> from the <name6> base <name2> .
<name2> = <val1>	<name2> is a string <val1> .
<name3> = <name2>	<name3> is boolean <name2> .
def <name1> ( <name3> , <name6> ) :	define the method <name1> with 2 arguments <name3> and <name6> .
super ( <name3> , self ) . <name5> ( <name6> )	call the method <name5> from the base class of the class <name3> , with an argument <name6> .
def <name5> ( <name1> , <name2> , ** <name4> ) :	"and help set to a string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.' . define the method <name5> with 3 arguments : <name1> , <name2> and unpacked dictionary <name4> ."
<name6> <name1> . models_module <name4> <name2> :	<name6> <name1> .models_module <name4> <name2> ,
<name4>	<name4> nothing .
<name3> = <name5> [ <name6> [ <val1>   ] ]	get the value under the <val1> key of the <name6> dictionary , use it as the key to get the value from the <name5> dictionary , substitute the result for <name3> .
<name6> = sql_delete ( <name2> , <name5> . style , <name1> )	call the function sql_destroy_indexes with 3 arguments : <name2> , <name5> .style and <name1> , substitute the result for <name6> .
\ <name5> '\\n'   . <name3> ( <name4> ) \	<name3> <name4> into a string , separated by newlines , <name5> it .
<name5> <name3> <name6> <name1>	<name5> <name3> <name6> <name1> into default name space .
<name1> <name6> . core . management . base <name4> <name5>	<name1> <name6> .core .management .base <name4> <name5> into default name space .
<name2> <name4> . core . management . sql <name3> <name1>	<name2> <name4> .core .management .sql <name3> <name1> into default name space .
<name1> <name3> . db <name6> <name4> , <name5>	<name1> <name3> .db <name6> <name4> and <name5> into default name space .
<name5> <name2> ( <name6> ) :	derive <name5> <name2> from the base <name5> <name6> .
<name3> = <val5>	<name3> is a string , <val5> .
<name5> = <name6>	substitute <name6> for <name5> .
def <name5> ( <name1> , <name4> ) :	define method <name5> with class instance <name1> and <name4> as the input arguments .
super ( <name5> , self ) . <name3> ( <name4> )	call the function <name3> with <name4> as an argument , from the base class of the <name5> class .
def <name2> ( <name5> , <name6> , ** <name3> ) :	"'Nominates a database to print the SQL for. Defaults to the ""default"" database.' as the arguments . define method <name2> with <name5> class instance , <name6> and dictionary <name3> as arguments ."
<name2> <name4> . models_module <name6> <name3> :	<name2> <name4> .models_module <name6> <name3> ,
<name1>	<name1> nothing .
<name4> = <name2> [ <name1> [ <val6>   ] ]	extract the value under the key <val6> from the <name1> dictionary , use the value for indexing <name2> list , substitute the result for <name4> .
<name2> = <name1> ( <name5> , <name4> . style , <name3> )	call the function <name1> with <name5> , <name4> .style and <name3> as the arguments , substitute the result for <name2> .
\ <name4> '\\n'   . <name3> ( <name6> ) \	<name3> the list of <name6> into a string separated by new lines , <name4> it .
<name3> <name2> <name5> <name1>	<name3> <name2> <name5> <name1> into default name space .
<name6> <name3> . core . management . base <name1> <name2>	<name6> <name3> .core .management .base <name1> <name2> into default name space .
<name6> <name4> . core . management . sql <name3> <name5>	<name6> <name4> .core .management .sql <name3> <name5> into default name space .
<name3> <name4> . db <name1> <name6> , <name2>	<name3> <name4> .db <name1> <name6> and <name2> into default name space .
<name2> <name3> ( <name6> ) :	derive the <name2> <name3> from the <name6> base <name2> .
<name6> = <val3>	<name6> is an string <val3> .
<name3> = <name4>	<name3> is boolean <name4> .
def <name4> ( <name3> , <name5> ) :	define the method <name4> with 2 arguments : <name3> and <name5> .
super ( <name3> , self ) . <name1> ( <name6> )	call the <name1> method from the base class of the class <name3> with <name6> as an argument .
def <name2> ( <name6> , <name1> , ** <name4> ) :	"and help set to string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.' . define the <name2> with 3 arguments <name6> , <name1> and unpacked dictionary <name4> ."
<name5> <name2> . models_module <name3> <name1> :	<name5> <name2> .models_module <name3> <name1> .
<name2>	<name2> nothing .
<name3> = <name4> [ <name1> [ <val2>   ] ]	get the value under the <val2> key of the <name1> dictionary , use it as the key to get the value from the <name4> dictionary , substitute the result for <name3> .
<name6> = <name2> ( <name4> , <name5> . style , <name3> )	call the function <name2> with 3 arguments : <name4> , <name5> .style and <name3> , substitute the result for <name6> .
\ <name4> '\\n'   . <name2> ( <name3> ) \	<name2> <name3> into a string , separated by newlines , <name4> it .
<name4> <name3> <name1> <name2>	<name4> <name3> <name1> <name2> into default name space .
<name1> <name5> . core . management . base <name3> <name6>	<name1> <name5> .core .management .base <name3> <name6> into default name space .
<name5> <name4> . core . management . sql <name1> <name2>	<name5> <name4> .core .management .sql <name1> <name2> into default name space .
<name4> <name2> . db <name3> <name5> , <name6>	<name4> <name2> .db <name3> <name5> and <name6> into default name space .
<name6> <name1> ( <name5> ) :	derive the <name6> <name1> from the base <name6> <name5> .
<name5> = <val2>	<name5> is a string , containing <val2> .
<name2> = <name4>	<name2> is boolean <name4> .
def <name2> ( <name1> , <name5> ) :	define method <name2> with <name1> class instance and <name5> as the arguments .
super ( <name3> , self ) . <name5> ( <name2> )	call the parent class of <name3> class <name5> method and <name2> as the arguments .
def <name5> ( <name1> , ** <name4> ) :	"'Nominates a database to print the SQL for. Defaults to the ""default"" database.' as the arguments . define the method <name5> with <name1> class instance and dictionary <name4> as the arguments ."
\ return '\\n'   . join ( <name4> ( <name3> . style , <name5> [ <name2> [ <val1>   ] ] , only_django = True ) ) \	call the <name4> function with <name3> .style , <name5> under the key with the value of <name2> dictionary under the <val1> key ,
<name6> <name3> <name4> <name5>	<name6> <name3> <name4> <name5> into default name space .
<name1> <name6> . core . management . base <name4> <name2>	<name1> <name6> .core .management .base <name4> <name2> into default name space .
<name3> <name2> . core . management . sql <name5> <name4>	<name3> <name2> .core .management .sql <name5> <name4> into default name space .
<name3> <name2> . db <name5> <name6> , <name1>	<name3> <name2> .db <name5> <name6> and <name1> into default name space .
<name1> <name4> ( <name3> ) :	derive the <name1> <name4> from the base <name1> <name3> .
<name6> = <val3>	<name6> is a string <val3> .
<name1> = <name5>	<name1> is boolean <name5> .
def <name2> ( <name4> , <name6> ) :	define the method <name2> with <name4> class instance and <name6> as the arguments .
super ( <name4> , self ) . <name6> ( <name3> )	call the <name6> method with <name3> as argument form the base class of the class <name4> .
def <name3> ( <name2> , <name1> , ** <name6> ) :	"and help as a string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.' , as arguments . define the method <name3> with <name2> class instance , <name1> and dictionary <name6> as arguments ."
<name2> <name3> . models_module <name6> <name5> :	<name2> <name3> .models_module <name6> <name5> ,
<name3>	<name3> nothing .
<name4> = <name6> [ <name1> [ <val3>   ] ]	get the value under the <val3> key of <name1> dictionary , use it as a index to get <name6> list element , store it in <name4> .
<name5> = <name2> ( <name4> , <name6> . style , <name3> )	call the function <name2> with <name4> , <name6> .style and <name3> as arguments , store the result in <name5> .
\ <name5> '\\n'   . <name3> ( <name6> ) \	<name3> <name6> in a string separated by newline , <name5> the result .
<name4> <name3> <name2> <name6>	<name4> <name3> <name2> <name6> into default name space .
<name6> <name4> . core . management . base <name3> <name1> , <name5>	<name6> <name4> .core .management .base <name3> <name1> and <name5> into default name space .
<name5> <name3> . db <name6> <name1> , <name2>	<name5> <name3> .db <name6> <name1> and <name2> into default name space .
<name3> <name1> . db . migrations . executor <name5> <name2>	<name3> <name1> .db .migrations .executor <name5> <name2> into default name space .
<name3> <name1> . db . migrations . loader <name4> <name5>	<name3> <name1> .db .migrations .loader <name4> <name5> into default name space .
<name1> <name5> ( <name4> ) :	derive <name1> <name5> from the base <name1> <name4> .
<name6> = <val5>	<name6> is a string <val5>
<name5> <name1> ( <name3> , <name6> ) :	<name5> method <name1> with <name3> class instance and <name6> as the arguments .
<name1> . <name6> ( <val2>   , <name4> = <val3>   )	call the <name6> method on the <name1> object , with string <val2> , and <name4> set to string <val3> as arguments .
<name2> . <name1> ( <val3>   , <name6> = <val5>   )	call the <name1> method on the <name2> object , with string <val3> , and <name6> set to string <val5> as arguments .
<name3> . <name1> ( <val2>   , action = <val6>   , <name4> = <val5>   , default = False , help = 'Creates SQL to unapply the migration, rather than to apply it'   )	call the <name1> method on the <name3> object with string <val2> , asction set to <val6> , <name4> set to <val5> ,
def <name1> ( <name2> , * <name6> , ** <name3> ) :	default set to False and help set to string 'Creates SQL to unapply the migration, rather than to apply it' as arguments . define the method <name1> with <name2> class instance , list of arguments <name6> and <name3> dictionary as the arguments .
<name1> = <name4> [ <name6> [ <val2>   ] ]	get the value under the key <val2> of the <name6> dictionary , use it as a index to get an element from <name4> , substitute it for <name1> .
<name1> = <name2> ( <name5> )	call the <name2> with the <name5> as the argument , substitute it for <name1> .
<name5> , <name4> = <name2> [ <val1>   ] , <name2> [ <val3>   ]	get the values under the keys <val1> and <val3> of the <name2> dictionary , substitute the results for <name5> and <name4> , respectively .
<name2> <name3> <name4> <name5> <name1> . loader . migrated_apps :	<name2> <name3> is <name4> contained <name5> <name1> .loader .migrated_apps ,
<name1> <name2> ( <val4> % <name3> )	<name1> a exception of <name2> class , with string <val4> with '%s' replaced with <name3> as the argument .
<name4> :	<name4> ,
<name1> = <name3> . loader . get_migration_by_prefix ( <name6> , <name5> )	call the <name3> .loader .get_migration_by_prefix with <name6> and <name5> with arguments , substitute the result fr <name1> .
except <name6> :	if <name6> exception is raised ,
<name1> CommandError ( <val4> % ( migration_name , app_label ) )	<name1> a exception of ComandError class with string <val4> ,
except <name1> :	with all '%s' strings replaced with migration_name and app_label , respectively , as an argument . if <name1> exception is raised ,
<name2> <name6> ( <val1> % ( migration_name , app_label ) )	<name2> a exception of <name6> class , with string <val1> ,
targets = [ ( <name4> , <name1> . name ) ]	replace all the '%s' occurrences with migration_name and <name4> , respectively . target is a list containing tuple with two elements <name4> and <name1> .name .
<name1> = [ ( <name4> . loader . graph . nodes [ <name2> [ 0 ] ] , <name6> [ <val3>   ] ) ]	get <name4> .loader .graph .nodes list item at the index of the first element of <name2> list , get the value under the <val3> key of <name6> dictionary , put previous two elements is a tuple , tuple is contained in a <name1> list .
<name3> = <name2> . collect_sql ( <name6> )	call method <name2> .collect_sql with <name6> as the argument , substitute the result for <name3> .
<name2> statement <name4> <name1> :	<name2> every statements <name4> <name1> :
<name2> . stdout . write ( <name1> )	call method <name2> .stdout .write with <name1> as an argument .
<name1> <name6> <name2> <name4>	<name1> <name6> <name2> <name4> into default name space .
<name1> <name6> . core . management . base <name2> <name5>	<name1> <name6> .core .management .base <name2> <name5> into default name space .
<name1> <name2> . core . management . sql <name6> <name3>	<name1> <name2> .core .management .sql <name6> <name3> into default name space .
<name4> <name2> . db <name5> <name6> , <name1>	<name4> <name2> .db <name5> <name6> and <name1> into default name space .
<name5> <name6> ( <name3> ) :	derive the <name5> <name6> from the <name3> base <name5> .
<name1> = <val2>	<name1> is a string <val2> .
<name2> = <name6>	<name2> is boolean <name6> .
def <name3> ( <name1> , <name5> ) :	define the method <name3> , with 2 arguments <name1> and <name5> .
super ( <name1> , self ) . <name4> ( <name3> )	call the method <name4> from the base class of the <name1> class , with an argument <name3> .
def <name3> ( <name2> , <name5> , ** <name1> ) :	"and help set to string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.' . define the method <name3> with 3 arguments : <name2> , <name5> and unpacked dictionary <name1> ."
<name4> <name3> . models_module <name5> <name1> :	<name4> <name3> .models_module <name5> <name1> ,
<name2>	<name2> nothing .
connection = connections [ <name2> . <name1> ( <val3>   ) ]	<name1> the value under the <val3> key of the <name2> dictionary ,
<name1> ( <name4> , <name3> )	use the result as a key to get the value from the connections dictionary , substitute the result for <name3> . call the function <name1> with 2 arguments : <name4> and <name3> .
<name6> = <name4> . get_models ( <name1> = <name3> )	call the method <name4> .get_models with <name1> set to boolean <name3> , substitute the result for <name6> .
<name3> = <name4> . ops . sequence_reset_sql ( <name1> . style , <name6> )	call the method <name4> .ops .sequence_reset_sql with 2 arguments <name1> .style and <name6> , substitute the result for <name3> .
\ <name5> '\\n'   . <name2> ( <name6> ) \	<name2> <name6> into a string , separated by newline characters , <name5> it .
<name5> <name6> . core . management . base <name3> <name2> , <name4>	<name5> <name6> .core .management .base <name3> <name2> and <name4> into default name space .
<name6> <name1> . utils <name2> <name5>	<name6> <name1> .utils <name2> <name5> into default name space .
<name6> <name1> . db <name4> <name3> , <name2> , <name5>	<name6> <name1> .db <name4> <name3> , <name2> and <name5> into default name space .
<name6> <name2> . db . migrations . loader <name1> <name5>	<name6> <name2> .db .migrations .loader <name1> <name5> into default name space .
<name2> <name5> . db . migrations . executor <name1> <name3>	<name2> <name5> .db .migrations .executor <name1> <name3> into default name space .
<name6> <name1> . db . migrations . writer <name2> <name5>	<name6> <name1> .db .migrations .writer <name2> <name5> into default name space .
<name4> <name3> . db . migrations . optimizer <name6> <name5>	<name4> <name3> .db .migrations .optimizer <name6> <name5> into default name space .
<name5> <name1> ( <name2> ) :	derive the <name5> <name1> from the <name2> <name5> .
<name6> = <val1>	<name6> is a string <val1> .
def <name3> ( <name5> , <name4> ) :	define the method <name3> with 2 arguments <name5> and <name4> .
<name4> . add_argument ( <val2>   , help = 'App label of the application to squash migrations for.'   )	call the method <name4> .add_argument with 2 arguments : string <val2> ,
<name5> . add_argument ( <val1>   , <name4> = 'Migrations will be squashed until and including this migration.'   )	and <name4> is a string 'App label of the application to squash migrations for.' . call the method <name5> .add_argument with 2 arguments : string <val1> ,
<name4> . add_argument ( <val1>   , <name5> = <val3>   , dest = 'no_optimize'   , default = False , <name2> = 'Do not try to optimize the squashed operations.'   )	and <name2> is a string 'Migrations will be squashed until and including this migration.' . call the method <name4> .add_argument with 5 arguments : string <val1> , <name5> as a string <val3> ,
<name1> . add_argument ( <val5>   , <name3> = <val4>   , <name6> = 'interactive'   , <name2> = True , <name1> = 'Tells Django to NOT prompt the user for input of any kind.'   )	<name6> as a string 'no_optimize' , <name2> set to boolean False and <name1> as a string 'Do not try to optimize the squashed operations.' . call the method <name1> .add_argument with 5 arguments : string <val5> , <name3> set to string <val4> ,
def <name3> ( <name6> , ** <name4> ) :	dest as a string 'interactive' , default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.' . define the method <name3> with 3 arguments : <name6> and unpacked dictionary <name4> .
<name4> . verbosity = <name5> . <name1> ( <val6>   )	<name1> the value under the <val6> key of the <name5> dictionary , substitute it for <name4> .verbosity .
<name3> . interactive = <name5> . <name1> ( <val4>   )	<name1> the value under the <val4> key of the <name5> dictionary , substitute it for <name3> .interactive .
app_label , migration_name = <name4> [ <val3>   ] , <name4> [ <val2>   ]	get the values under the <val3> and <val2> keys of the <name4> dictionary ,
<name6> = <name1> ( <name2> [ <name4> ] )	substitute them for app_label and migration_name , respectively . <name6> is an instance of <name1> , created with value under the <name4> key of the <name2> dictionary .
<name3> <name5> <name1> <name2> <name6> . loader . migrated_apps :	<name3> <name5> is <name1> contained <name2> <name6> .loader .migrated_apps ,
<name2> <name5> ( <val6> % app_label )	<name2> an <name5> with an argument string <val6> ,
<name4> :	where '%s' is replaced with app_label . <name4> ,
<name4> = <name6> . loader . get_migration_by_prefix ( <name3> , <name1> )	call the method <name6> .loader .get_migration_by_prefix with arguments <name3> , <name1> , substitute the result for <name4> .
except <name2> :	if <name2> exception is caught ,
<name4> <name1> ( <val2> % ( migration_name , app_label ) )	<name4> an <name1> with an argument string <val2> ,
except <name2> :	where '%s' is replaced with migration_name and app_label . if <name2> exception is caught ,
<name2> <name5> ( <val6> % ( migration_name , app_label ) )	<name2> an <name5> with an argument string <val6> ,
<name5> = [ <name1> . loader . get_migration ( al , mn ) for al , mn in <name1> . loader . graph . forwards_plan ( ( migration . <name3> , migration . name ) ) if al == migration . <name3> ]	where '%s' is replaced with migration_name and <name3> . <name5> is a list created dynamically with elements : return value of the method <name1> .loader .get_migration called ,
<name2> <name3> . verbosity >  <val1> <name5> <name3> . interactive :	with arguments al and mn , for every al , mn in executor .loader .graph .forwards_plan method return value called with 2 arguments : migration .app_label , migration .name , only <name2> al equals migration .app_label . <name2> <name3> .verbosity is greater than integer <val1> <name5> <name3> .interactive is true ,
<name1> . stdout . write ( <name1> . style . MIGRATE_HEADING ( <val5> ) )	call the method <name1> .style .MIGRATE_HEADING with an argument string <val5> ,
<name2> <name5> <name4> <name1> :	write it to self .stdout . <name2> every <name5> <name4> <name1> ,
"<name3> . stdout . <name2> ( "" - %s"" % <name6> . name )"	append <name6> .name to string ' - ' , <name2> it to <name3> .stdout stream .
<name2> <name6> . interactive :	<name2> <name6> .interactive is true ,
<name3> = <name6>	<name3> is <name6> .
<name6> <name1> <name4> <name2> <name4> <name1> <name3> <val5> :	<name6> <name4> is false <name2> <name4> is <name1> contained <name3> string <val5> , perform the following ,
<name3> = <name5> . moves . input ( <val2> )	call the method <name5> .moves .input with an argument string <val2> , substitute the result for <name3> .
<name6> not <name4> :	<name6> <name4> is false ,
     <name3> = <val4>	substitute <val4> for <name3> .
<name6>	<name6> from the loop execution ,
else :	if not ,
     <name3> = <name3> [ 0 ] . lower ( )	convert first element of <name3> to lowercase and substitute it for <name3> .
<name5> <name1> != <val6> :	<name5> <name1> equals a string <val6> ,
<name1>	<name1> nothing .
<name4> = [ ]	<name4> is an empty list .
<name3> <name2> <name4> <name5> :	<name3> every <name2> <name4> <name5> ,
<name6> . extend ( <name5> . <name6> )	call the method <name6> .extend with an argument <name5> .operations .
<name4> <name2> . verbosity >  <val5> :	<name4> <name2> .verbosity is greater than integer <val5> ,
<name1> . stdout . <name3> ( <name1> . style . MIGRATE_HEADING ( <val5> ) )	call the method <name1> .style .MIGRATE_HEADING with an argument string <val5> , <name3> it to <name1> .stdout .
<name6> = <name2> ( )	<name6> is an instance of <name2> class .
<name6> = <name3> . optimize ( <name2> , <name4> . app_label )	call the method <name3> .optimize with 2 arguments <name2> and <name4> .app_label , substitute the result for <name6> .
<name4> <name5> . verbosity >  <val6> :	<name4> <name5> .verbosity is greater than integer <val6> ,
<name4> len ( <name6> ) == len ( <name5> ) :	<name4> lengths of <name6> and <name5> are the same ,
<name1> . stdout . <name4> ( <val3> )	<name4> string <val3> to <name1> .stdout stream .
else :	if not ,
self . stdout . write ( <val5> % ( len ( <name3> ) , len ( new_operations ) ) )	replace '%s' in string <val5> with lengths of <name3> and ew_operations , respectively ,
<name5> = [ ]	write it to self .stdout stream . <name5> is an empty list .
<name6> <name1> <name3> <name4> :	<name6> every <name1> <name3> <name4> ,
<name6> <name3> . replaces :	<name6> <name3> .replaces is true ,
<name6> . <name4> ( <name1> . <name6> )	<name4> <name6> list with <name1> .replaces ,
else :	if not ,
<name4> . <name6> ( ( <name1> . app_label , <name1> . name ) )	<name6> tuple with 2 elements : <name1> .app_label and <name1> .name to <name4> .
"<name4> = type ( ""Migration"" , ( <name2> . <name3> , ) , {   ""dependencies"" : [ ] , ""operations"" : new_operations , ""replaces"" : replaces , }  )"	<name4> is a class named <name3> , sub classed from <name2> .Migration base class , with fields dependencies set to an empty list ,
new_migration = <name2> ( <val3> % <name5> . name , <name4> )	dependencies set to new_operations and replaces set to replaces . call the function <name2> with 2 arguments string <val3> , where '%s' is replaced with <name5> .name and <name4> ,
<name2> = <name5> ( <name4> )	substitute the result for <name4> . <name2> is an instance of a class <name5> , created with an argument <name4> .
"<name4> <name5> ( <name6> . path , ""wb"" ) <name2> <name3> :"	<name5> <name6> .path file in write mode , <name4> file descriptor <name2> <name3> , perform the following ,
<name3> . <name6> ( <name5> . as_string ( ) )	call the method <name5> .as_string , <name6> the result to file <name3> .
<name6> <name1> . verbosity >  <val3> :	<name6> <name1> .verbosity is greater than integer <val3> ,
self . stdout . write ( self . style . MIGRATE_HEADING ( <val2> % <name6> . path ) )	replace '%s' in a string <val2> with <name6> .path , use it as an argument for the call to the method ,
<name3> . stdout . <name5> ( <val6> )	<name3> .style .MIGRATE_HEADING , <name5> the result to <name3> .stdout . <name5> string <val6> to <name3> .stdout .
<name2> . stdout . <name3> ( <val5> )	<name3> string <val5> to <name2> .stdout .
<name6> . stdout . <name2> ( <val1> )	<name2> string <val1> to <name6> .stdout .
<name6> . stdout . <name5> ( <val4> )	<name5> string <val4> to <name6> .stdout .
<name2> <name4> <name3> <name6>	<name2> <name4> <name3> <name6> into default name space .
<name3> <name2> . core . management . base <name1> <name6>	<name3> <name2> .core .management .base <name1> <name6> into default name space .
<name3> <name6> . core . management . templates <name1> <name5>	<name3> <name6> .core .management .templates <name1> <name5> into default name space .
<name3> <name5> ( <name2> ) :	derive the <name3> <name5> from the <name2> base <name3> .
"<name2> = ( ""Creates a Django app directory structure for the given app "" ""name in the current directory or optionally in the given "" ""directory."" )"	"<name2> is a tuple containing a string ""Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory."" ."
<name2> = <val6>	<name2> is a string <val6> .
def <name2> ( <name6> , ** <name4> ) :	define the method <name2> with 2 arguments : <name6> and unpacked dictionary <name4> .
<name5> , <name3> = <name2> . pop ( <val4>   ) , <name2> . pop ( <val6>   )	remove values under the keys <val4> and <val6> of the <name2> dictionary and substitute it for <name5> and <name3> , respectively .
<name2> . validate_name ( <name6> , <val3> )	call the method <name2> .validate_name with 2 arguments : <name6> and string <val3> .
<name3> :	<name3> ,
<name1> ( <name5> )	call the function <name1> with an argument <name5> .
except <name3> :	if <name3> exception is caught ,
pass	do nothing .
else :	in not ,
"<name5> <name1> ( ""%r conflicts with the name of an existing "" ""Python module and cannot be used as an app "" ""name. Please try another name."" % app_name )"	"<name5> an <name1> exception with an argument string ""%r conflicts with the name of an existing Python module and cannot be used """
super ( <name1> , self ) . <name3> ( <val2>   , <name5> , <name6> , ** <name4> )	as an app name . Please try another name . , where '%r' is replaced with <name5> . call the method <name3> from the base class of <name1> class , with 4 arguments : string <val2> , <name5> , <name6> and unpacked dictionary <name4> .
<name3> <name4> <name6> <name1>	<name3> <name4> <name6> <name1> into default name space .
<name4> <name2> . core . management . base <name3> <name1>	<name4> <name2> .core .management .base <name3> <name1> into default name space .
<name1> <name4> . core . management . templates <name6> <name5>	<name1> <name4> .core .management .templates <name6> <name5> into default name space .
<name2> <name3> . utils . crypto <name4> <name6>	<name2> <name3> .utils .crypto <name4> <name6> into default name space .
<name2> <name1> ( <name3> ) :	derive <name2> <name1> from the <name3> base <name2> .
"<name3> = ( <val6> ""project name in the current directory or optionally in the "" ""given directory."" )"	<name3> is a tuple containing string <val6>
<name5> = <val1>	project name in the current directory or optionally in the given directory . . <name5> is a string <val1> .
def <name5> ( <name4> , ** <name6> ) :	define the method <name5> with arguments <name4> and unpacked dictionary <name6> .
<name4> , <name2> = <name3> . pop ( <val5>   ) , <name3> . pop ( 'directory'   )	remove the elements from the <val5> and 'dictionary' keys of the <name3> dictionary , substitute them for <name4> and <name2> , respectively .
<name5> . validate_name ( <name1> , <val3> )	call the method <name5> .validate_name with arguments <name1> and string <val3> .
<name4> :	<name4> ,
<name4> ( <name3> )	call the function <name4> with an argument <name3> .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
else :	if not ,
"<name6> <name1> ( ""%r conflicts with the name of an existing "" ""Python module and cannot be used as a "" ""project name. Please try another name."" % <name5> )"	"<name6> an exception <name1> , with argument string ""%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name."" , where '%r' is replaced with <name5> ."
<name5> = <val1>	<name5> is a string <val1> .
<name2> [ <val1>   ] = <name3> ( <val5> , <name6> )	call the function <name3> with 2 arguments : integer <val5> and <name6> , substitute it for value under the <val1> of the <name2> dictionary .
super ( <name4> , self ) . <name1> ( <val3>   , <name6> , <name5> , ** options )	call the <name1> method of the base class of the <name4> class , with 4 arguments : string <val3> , <name6> , <name5> ,
<name3> <name5>	<name3> module <name5> .
<name5> <name2> . <name6> <name3> <name6>	<name5> <name2> .apps <name3> <name6> into default name space .
<name2> <name4> . contrib . auth <name3> <name1>	<name2> <name4> .contrib .auth <name3> <name1> into default name space .
<name2> <name5> . db <name6> <name3>	<name2> <name5> .db <name6> <name3> into default name space .
<name6> <name4> . core . management <name2> <name1>	<name6> <name4> .core .management <name2> <name1> into default name space .
<name1> <name2> . core . management . base <name6> <name3>	<name1> <name2> .core .management .base <name6> <name3> into default name space .
<name6> <name1> . utils . deprecation <name5> <name3>	<name6> <name1> .utils .deprecation <name5> <name3> into default name space .
<name1> <name2> . utils . six . moves <name3> <name5>	<name1> <name2> .utils .six .moves <name3> <name5> into default name space .
<name4> <name1> ( <name6> ) :	derive <name4> <name1> from the <name6> base <name4> .
<name5> = <val4>	<name5> is a string <val4> .
def <name2> ( <name1> , <name6> ) :	define the method <name2> with <name1> and <name6> as arguments .
<name6> . add_argument ( <val3>   , <name4> = <val5>   , dest = 'interactive'   , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.'   )	call the method <name6> .add_argument with 5 arguments : string <val3> , <name4> set to string <val5> ,
<name2> . add_argument ( <val6>   , <name1> = <val3>   , <name5> = 'load_initial_data'   , <name4> = <name2> , <name6> = 'Tells Django not to load any initial data after database synchronization.'   )	<name5> set to string 'interactive' , <name4> set to boolean <name2> and <name6> as 'Tells Django to NOT prompt the user for input of any kind.' call the method <name2> .add_argument with 5 arguments : string <val6> , <name1> set to string <val3> ,
"<name3> . add_argument ( <val1>   , <name2> = <name6> , <name4> = 'Nominates a database to synchronize. Defaults to the ""default"" database.'   )"	dest set to string 'load_initial_data' , <name2> set to boolean True , and <name4> as a string 'Tells Django not to load any initial data after database synchronization.' call the method <name3> .add_argument with 3 arguments : string <val1> , <name2> set to <name6> ,
def <name5> ( <name6> , ** <name4> ) :	"and help set to string 'Nominates a database to synchronize. Defaults to the ""default"" database.' . define the method <name5> with 2 arguments : <name6> and unpacked dictionary <name4> ."
<name3> . warn ( <val4> , <name5> )	call the method <name3> .warn with 2 arguments : string <val4> and <name5> .
"<name6> ( ""migrate"" , ** <name3> )"	call the function <name6> with 2 arguments : string migrate and unpacked dictionary <name3> .
<name3> :	<name3> ,
<name3> . get_model ( <val5>   , <val2>   )	call the method <name3> .get_model with 2 arguments : string <val5> and string <val2> .
except <name3> :	if <name3> exception is caught .
<name4>	<name4> nothing .
<name4> = <name3> ( )	call the function <name3> , substitute the result for <name4> .
<name5> not <name6> . _default_manager . exists ( ) <name3> <name2> . get ( <val4>   ) :	<name5> return value of the method <name6> ._default_manager .exists is false <name3> value under the <val4> key of the <name2> dictionary is true ,
"\ <name6> = ( ""\\nYou have installed Django's auth system, and "" ""don't have any superusers defined.\\nWould you like to create one "" ""now? (yes/no): "" ) \"	"\ <name6> is a tuple containing string ""\\nYou have installed Django's auth system, and don't have any superusers defined.\\nWould you like to create one now? (yes/no): "" . \"
<name3> = <name2> ( <name5> )	call the method <name2> with an argument <name5> and store the result in <name3> .
while 1 :	endless loop ,
<name1> <name6> <name3> in ( <val5>   , <val2>   ) :	<name1> <name6> is <name3> equal to string <val5> or string <val2> ,
<name3> = input ( <val6>   )	query a string <val6> and store the result in <name3> .
continue	skip this loop iteration .
<name4> <name3> == <val5>   :	<name4> <name3> equals string <val5> ,
<name4> ( <val2> , <name6> = <name5> , database = options [ 'database'   ] )	call the function <name4> with 3 arguments : string <val2> , <name6> is boolean <name5> ,
<name3>	and database set to value under the 'database' key of the options dictionary . <name3> the loop execution .
<name1> <name2>	<name1> module <name2> .
<name2> <name1>	<name2> module <name1> .
<name2> <name1>	<name2> module <name1> .
<name6> <name2> . conf <name3> <name5>	<name6> <name2> .conf <name3> <name5> into default name space .
<name2> <name4> . core . management . base <name3> <name5>	<name2> <name4> .core .management .base <name3> <name5> into default name space .
<name3> <name2> . test . utils <name4> <name5>	<name3> <name2> .test .utils <name4> <name5> into default name space .
<name3> <name2> ( <name5> ) :	derive <name3> <name2> from the <name5> base <name3> .
<name6> = <val5>	<name6> is a string <val5> .
<name3> = <name4>	<name3> is boolean <name4> .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name4> . test_runner = <name6>	<name4> .test_runner is <name6> .
super ( <name3> , self ) . <name5> ( )	call the method <name5> form the base class of the <name3> class .
def <name6> ( <name3> , <name4> ) :	define the method <name6> with arguments <name3> and <name4> .
<name5> = <val3>	<name5> is a string <val3> .
<name5> <name2> <name3> <name6> [ 2 : ] :	<name5> <name2> <name3> <name6> list without the first two elements ,
<name5> <name4> . startswith ( option ) :	<name5> <name4> starts with options ,
<name3> . test_runner = <name4> [ len ( option ) : ]	get the length of the options , use it as a starting index for the slicing <name4> list , substitute it for <name3> .test_runner .
<name3>	<name3> the loop execution .
super ( <name6> , self ) . <name3> ( <name2> )	call the <name3> function from the base class of the <name6> class with <name2> as a argument , .
def <name2> ( <name4> , <name1> ) :	define the method <name2> with arguments <name4> and <name1> .
<name2> . add_argument ( <val1>   , <name5> = <val6>   , <name3> = <val4>   , help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'   )	call the method <name2> .add_argument with 4 arguments : string <val1> , <name5> set to string <val6> , <name3> set to string <val4> ,
<name1> . add_argument ( <val6>   , <name4> = <val3>   , <name2> = <val5>   , default = True , <name1> = 'Tells Django to NOT prompt the user for input of any kind.'   ) ,	and <name1> is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' . call the method <name1> .add_argument with 5 arguments : string <val6> , <name4> set to <val3> , <name2> set to <val5> ,
<name5> . add_argument ( <val6>   , <name1> = <val2>   , <name3> = <val4>   , <name5> = False , <name6> = 'Tells Django to stop running the test suite after first '    'failed test.'   ) ,	<name5> set to boolean True , <name6> set to string 'Tells Django to NOT prompt the user for input of any kind.' . call the method <name5> .add_argument with 5 arguments : string <val6> , <name1> set to string <val2> , <name3> set to <val4> ,
<name5> . add_argument ( <val3>   , <name1> = <val4>   , <name6> = <val2>   , <name5> = 'Tells Django to use specified test runner class instead of '    'the one specified by the TEST_RUNNER setting.'   ) ,	default set to boolean False and <name5> set to string 'Tells Django to stop running the test suite after first failed test.' . call the method <name5> .add_argument with 4 arguments : string <val3> , <name1> set to string <val4> , <name6> set to <val2> ,
<name3> . add_argument ( <val5>   , <name4> = <val1>   , <name2> = <val6>   , default = None , <name3> = 'Overrides the default address where the live server (used '    'with LiveServerTestCase) is expected to run from. The '    'default value is localhost:8081.'   ) ,	and <name3> set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.' . call the method <name3> .add_argument with 5 arguments : string <val5> , <name4> set to string <val1> , <name2> set to <val6> ,
<name4> = <name5> ( <name2> , <name1> . test_runner )	default set to None and help set to string 'Overrides the default address where the live server (used ' 'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.' call the function <name5> with arguments <name2> and <name1> .test_runner , substitute the result for <name4> .
<name5> hasattr ( <name6> , <val1>   ) :	<name5> <name6> has an <val1> attribute ,
"<name6> <name5> ( <val2> ""test management command has changed in Django 1.8. Please "" ""create an add_arguments class method to achieve this."" )"	<name6> an <name5> exception with an argument string <val2>
<name1> hasattr ( <name3> , <val2>   ) :	test management command has changed in Django 1.8 . Please create an add_arguments class method to achieve this . <name1> <name3> has an attribute <val2> ,
<name4> . add_arguments ( <name3> )	call the method <name4> .add_arguments with an argument <name3> .
def <name4> ( <name2> , * <name3> , ** <name1> ) :	define the method <name4> with 3 arguments <name2> , unpacked list <name3> and unpacked dictionary <name1> .
<name4> <name5> [ <val6>   ] >  0 :	<name4> value under the <val6> key of the <name5> dictionary is greater than zero ,
<name3> = <name1> . getLogger ( <val2>   )	call the method <name1> .getLogger with an argument string <val2> , substitute the result for <name3> .
<name5> = <name2> . StreamHandler ( )	call the method <name2> .StreamHandler , substitute the result for <name5> .
<name2> . addHandler ( <name6> )	call the method <name2> .addHandler with an argument <name6> .
super ( <name4> , self ) . <name2> ( * <name3> , ** <name1> )	call the method <name2> form the base class of the class <name4> , with 2 arguments : unpacked list <name3> and unpacked dictionary <name1> .
<name5> <name3> [ <val6>   ] >  0 :	<name5> value under the <val6> key of the <name3> dictionary is greater than zero ,
<name1> . removeHandler ( <name3> )	call the method <name1> .removeHandler with an argument <name3> .
def <name4> ( <name5> , * <name3> , ** <name2> ) :	define the method <name4> with 3 arguments : <name5> , unpacked list <name3> and unpacked dictionary <name2> .
<name1> <name6> . conf <name3> <name2>	<name1> <name6> .conf <name3> <name2> into default namespace .
<name5> <name6> . test . utils <name2> <name4>	<name5> <name6> .test .utils <name2> <name4> into default namespace .
<name3> = <name6> ( <name4> , <name1> . get ( <val2>   ) )	call the method <name6> with 2 arguments : <name4> and value under the <val2> key of the <name1> dictionary , substitute it for the <name3> .
<name5> <name1> . get ( <val2>   ) <name6> <name4> <name3> :	<name5> value under the <val2> key of the <name1> dictionary <name6> <name4> <name3> ,
<name6> . environ [ <val2>   ] = <name4> [ <val5>   ]	substitute value under the <val5> key of the <name4> dictionary for value under the <val2> key of the <name6> .environ dictionary .
del <name2> [ <val6>   ]	delete the value under the <val6> key of the <name2> dictionary .
<name1> = <name4> ( ** <name3> )	<name1> is an instance of <name4> class , called with an argument unpacked dictionary <name3> .
<name3> = <name5> . run_tests ( <name2> )	call the method <name5> .run_tests with an argument <name2> , substitute it for <name3> .
<name5> <name1> :	<name5> <name1> is true ,
sys . <name5> ( bool ( <name4> ) )	<name5> the program with <name4> converted to boolean as a message .
<name5> <name3> . core . management <name6> <name2>	<name5> <name3> .core .management <name6> <name2> into default name space .
<name2> <name4> . core . management . base <name3> <name5>	<name2> <name4> .core .management .base <name3> <name5> into default name space .
<name6> <name3> . db <name1> <name4>	<name6> <name3> .db <name1> <name4> into default name space .
<name3> <name5> ( <name1> ) :	derive <name3> <name5> from the <name1> base <name3> .
<name2> = <val3>	<name2> is a string <val3> .
<name5> = <val3>	<name5> is a string <val3> .
<name4> = <name1>	<name4> is boolean <name1> .
def add_arguments ( <name2> , <name3> ) :	define the method with <name2> class instance and <name3> as arguments .
<name3> . add_argument ( <val6>   , <name5> = <val4>   , <name2> = <val1>   , <name3> = <val6>   )	call <name3> .add_argument method with <val6> , <name5> set to string <val4> , <name2> set to string <val1> and <name3> set to string <val6> .
<name2> . add_argument ( <val6>   , <name1> = <val4>   , <name5> = <val3>   , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.'   )	call <name2> .add_argument method with <val6> , <name1> set to string <val4> , <name5> set to string <val3> ,
<name5> . add_argument ( <val1>   , <name6> = ''   , <name2> = <val4>   )	<name6> set to boolean True and <name2> set to string 'Tells Django to NOT prompt the user for input of any kind.' . call the <name5> .add_argument with string <val1> , <name6> set to an empty string and <name2> as string <val4> .
<name2> . add_argument ( <val4>   , <val5>   , <name3> = <val6>   , <name1> = <val2>   , default = False , help = 'Tells Django to use an IPv6 address.'   )	call <name2> .add_argument method with <val4> , string <val5> , <name3> set to string <val6> , <name1> set to string <val2> ,
def <name4> ( <name1> , * <name2> , ** <name3> ) :	default set to boolean False and help set to string 'Tells Django to use an IPv6 address.' . define the method <name4> with <name1> class instance , list of arguments <name2> and dictionary <name3> as arguments .
<name1> = <name5> . <name4> ( <val6>   )	<name4> the value under the key <val6> of <name5> dictionary , substitute it for <name1> .
<name4> = <name5> . <name1> ( <val6>   )	<name1> the value under the key <val6> of <name5> dictionary , substitute it for <name4> .
db_name = <name1> . creation . create_test_db ( <name3> = <name3> , <name5> = not <name6> , serialize = False )	call the method <name1> .creation .create_test_db with <name3> set to <name3> , <name5> set to inverse value of <name6> ,
<name6> ( <val2>   , * <name1> , ** {  <val4>   : <name5> }  )	serialize set to boolean False , substitute the return value for db_name . call the method <name6> with 3 arguments , string <val2> , unpacked list <name1> and unpacked dictionary containing 1 element : <name5> for <val4> .
\ <name2> = <val1>   % <name3> \	\ replace '%r' from string <val1> , with <name3> , substitute it for <name2> . \
<name4> = <name6> . features . test_db_allows_multiple_connections	substitute <name6> .features .test_db_allows_multiple_connections for <name4> .
<name4> ( <val5>   , <name3> = <name6> [ <val1>   ] , shutdown_message = shutdown_message , use_reloader = False , use_ipv6 = <name6> [ 'use_ipv6'   ] , use_threading = use_threading )	call the function <name4> with 6 arguments , string <val5> , <name3> as the value under the <val1> key of <name6> dictionary ,
<name3> <name5> <name2> <name1>	<name3> <name5> <name2> <name1> into default name space .
<name6> <name4>	<name6> module <name4> .
<name4> <name3> . core . management . commands . check <name5> <name6> <name1> <name2>	<name4> <name3> .core .management .commands .check <name5> <name6> <name1> <name2> into default name space .
<name6> <name3> . utils . deprecation <name1> <name4>	<name6> <name3> .utils .deprecation <name1> <name4> into default name space .
<name5> <name1> ( <name6> ) :	derive <name5> <name1> from <name6> base <name5> .
<name5> = <val1>   + <name2> . <name5>	concatenate <name2> .help to string <val1> , substitute it for <name5> .
def <name4> ( <name1> , ** <name2> ) :	define the method <name4> with <name1> class instance and dictionary pair of elements <name2> as arguments .
super ( <name1> , self ) . <name3> ( ** <name6> )	call the <name3> function with dictionary pair of elements <name6> from the base class of the class <name1> .
<name2> <name4> <name3> <name5>	<name2> <name4> <name3> <name5> into default name space .
<name2> <name5>	<name2> module <name5> .
<name5> <name4>	<name5> module <name4> .
<name5> <name4>	<name5> module <name4> .
<name1> <name5>	<name1> module <name5> .
<name4> <name3> . <name5> <name1> <name5>	<name4> <name3> .apps <name1> <name5> into default name space .
<name5> <name3> . conf <name2> <name6>	<name5> <name3> .conf <name2> <name6> into default name space .
<name1> <name5> . core . management . base <name2> <name3>	<name1> <name5> .core .management .base <name2> <name3> into default name space .
<name3> <name6> . db <name1> <name4> , <name2>	<name3> <name6> .db <name1> <name4> and <name2> into default name space .
<name1> <name2> . utils . deprecation <name4> <name6>	<name1> <name2> .utils .deprecation <name4> <name6> into default name space .
def <name3> ( <name5> , <name4> ) :	define the function <name3> with 2 arguments : <name5> and <name4> .
<name6> <name5> . db . migrations . loader <name4> <name1>	<name6> <name5> .db .migrations .loader <name4> <name1> into default name space .
<name2> = <name5> ( <name1> )	<name2> is an instance of <name5> class , created with an argument <name1> .
<name5> <name6> . label <name1> <name2> . migrated_apps :	<name5> <name6> .label is contained <name1> <name2> .migrated_apps ,
<name1> <name5> ( <val3> % <name6> . label )	<name1> an <name5> exception , with an arguent : string <val3> , where '%s' is replaced for <name6> .label .
def <name2> ( <name4> , <name5> , <name6> ) :	define the function <name2> with 3 arguments : <name4> , <name5> and <name6> .
<name3> ( <name1> , <name6> )	call the function <name3> with an arguments <name1> , <name6> .
<name3> <name2> . settings_dict [ <val5>   ] == <val1>   :	<name3> value under the <val5> key of the <name2> .settings_dict dictionary equals a string <val1> ,
"\ <name3> <name4> ( <val6> + ""because you haven't properly specified the ENGINE setting for the database.\\n"" + ""see: https://docs.djangoproject.com/en/dev/ref/settings/#databases"" ) \"	\ <name3> an <name4> exception with an argument string <val6> \
<name3> = <name5> . get_models ( <name6> = <name4> )	\ because you haven ' t properly specified the ENGINE setting for the database . \\ n see : https : // docs .djangoproject .com / en / dev / ref / settings / # databases . call the method <name5> .get_models with an argument <name6> set to boolean <name4> , substitute it for <name3> . \
<name3> = [ ]	<name3> is an empty list .
<name5> = <name1> . introspection . table_names ( )	call the method <name1> .introspection .table_names , substitute the result for <name5> .
known_models = set ( <name6> <name1> <name6> <name2> <name3> . introspection . installed_models ( tables ) <name5> <name6> <name4> <name2> <name6> )	<name5> <name6> is <name4> contained <name2> <name6> <name1> every <name6> <name2> return value of the <name3> .introspection .installed_models function return value ,
<name2> = { }	add model to a set , substitute the result for known_models . <name2> is an empty dictionary .
<name4> <name2> <name6> <name3> . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :	<name4> every <name2> <name6> return value of the function <name3> .get_migratable_models , called with arguments :
<name4> , <name5> = <name3> . creation . sql_create_model ( <name6> , <name2> , <name1> )	app_config , <name3> .alias and include_auto_created set to boolean True . call the method <name3> .creation .sql_create_model with arguments <name6> , <name2> and <name1> , substitute the result for <name4> and <name5> .
<name3> . extend ( <name1> )	call the method <name3> .extend with an argument <name1> .
<name5> <name3> , <name6> <name4> <name1> . items ( ) :	<name5> every <name3> and <name6> <name4> return value of the method <name1> .items ,
<name6> . setdefault ( <name2> , [ ] ) . <name3> ( <name1> )	call the method <name6> .setdefault with 2 arguments : <name2> and an empty list , <name3> the result with <name1> .
<name1> <name4> <name6> <name3> :	<name1> <name4> is contained <name6> <name3> ,
final_output . extend ( <name3> . creation . sql_for_pending_references ( refto , <name1> , <name6> ) )	call the method <name3> .creation .sql_for_pending_references with 3 arguments : refo , <name1> and <name6> ,
<name4> . extend ( <name5> . creation . sql_for_pending_references ( model , <name2> , <name3> ) )	use the result as an argument for the call to the method <name4> .extend . call the method <name5> .creation .sql_for_pending_references with 3 arguments : refo , <name2> and <name3> ,
<name3> . <name4> ( <name5> )	use the result as an argument for the call to the method final_output .extend . <name4> <name5> to <name3> set .
<name2> = <name6> ( <name4> . keys ( ) )	call the method <name4> .keys , put the result into a <name6> and substitute it for <name2> .
<name2> <name6> :	<name2> <name6> is true ,
<name2> = [ ]	<name2> is an empty list .
<name1> <name4> <name6> <name2> :	<name1> every <name4> <name6> <name2> ,
alter_sql . extend ( [ '-- '   + <name6> <name5> <name6> <name4> <name3> . creation . sql_for_pending_references ( <name2> , <name1> , pending_references ) ] )	<name5> every <name6> <name4> return value of the function <name3> .creation .sql_for_pending_references called with arguments : <name2> , <name1> ,
<name6> <name3> :	and pending_references append sql to the string '-- ' , put the results in a list , extend <name3> with the result . <name6> <name3> ,
<name1> . <name5> ( <val6>   )	<name5> string <val6> to the <name1> .
<name1> . <name6> ( <name5> )	<name6> <name1> with <name5> .
<name4> <name3>	<name4> <name3> .
def <name3> ( <name5> , <name2> , <name6> , <name4> = <name1> ) :	define the function <name3> with 4 arguments : <name5> , <name2> , <name6> and <name4> set to boolean <name1> .
<name3> ( <name2> , <name4> )	call the function <name3> with arguments <name2> and <name4> .
<name1> :	<name1> ,
<name5> = <name1> . <name5> ( )	call the method <name1> .cursor , substitute the result for <name5> .
except <name4> :	if <name4> exception is caught ,
<name5> = <name4>	<name5> is <name4> .
<name5> :	<name5> ,
<name2> <name4> :	<name2> <name4> is true ,
<name4> = <name5> . introspection . <name4> ( <name3> )	call the method <name5> .introspection .table_names with an argument <name3> , substitute the result for <name4> .
else :	if not ,
<name4> = [ ]	<name4> is an empty list .
<name5> = [ ]	<name5> is an empty list .
<name3> = <name5> ( )	<name3> is an empty <name5> .
<name2> = { }	<name2> is an empty dictionary .
<name6> = <name3> . get_migratable_models ( <name5> , <name1> . alias , <name4> = <name2> )	call the method <name3> .get_migratable_models with argument : <name5> , <name1> .alias and <name4> set to <name2> , substitute the result for <name6> .
<name6> <name4> <name1> <name2> :	<name6> every <name4> <name1> <name2> ,
<name3> <name5> <name6> <name4> . introspection . table_name_converter ( <name2> . _meta . db_table ) <name1> <name3> :	<name3> <name5> is true <name6> return value of the function <name4> .introspection .table_name_converter called with an arugment : <name2> ._meta .db_table is contained <name1> <name3> ,
<name1> = <name6> . _meta	substitute <name6> ._meta for <name1> .
<name3> <name4> <name6> <name5> . local_fields :	<name3> every <name4> <name6> <name5> .local_fields ,
<name4> <name2> . rel <name1> <name2> . rel . to <name6> <name5> <name3> :	<name4> <name2> .rel <name1> <name2> .rel .to are <name6> contained <name5> <name3> ,
     <name1> . setdefault ( <name4> . rel . <name2> , [ ] ) . <name6> ( ( <name5> , <name4> ) )	call the method <name1> .setdefault with arguments : r .rel .to and an empty list , <name6> <name2> the result tuple with 2 entries : <name5> and <name4> .
<name5> . add ( <name6> )	call the method <name5> .add with an argument <name6> .
<name6> <name5> <name1> <name2> :	<name6> every <name5> <name1> <name2> ,
<name4> <name3> . introspection . table_name_converter ( <name2> . _meta . db_table ) <name6> <name1> :	<name4> return value of the function <name3> .introspection .table_name_converter called with an arugment : <name2> ._meta .db_table is contained <name6> <name1>
<name1> . <name4> ( <name2> . creation . sql_destroy_model ( <name6> , <name3> , <name5> ) )	call the method <name2> .creation .sql_destroy_model with arguments : <name6> , <name3> and <name5> , <name4> with the result the list <name1> .
<name4> :	<name4> perform ,
<name1> <name2> <name3> <name6> :	<name1> both <name2> <name3> <name6> are true ,
<name6> . close ( )	call the method <name6> .close ,
<name3> . close ( )	call the method <name3> .close ,
<name3> <name1> [ : : - 1 ]	<name3> reversed list <name1> .
def <name5> ( <name4> , <name6> , <name3> = <name1> , reset_sequences = True , allow_cascade = <name1> ) :	define the function <name5> with 4 arguments : <name4> , <name6> , <name3> set to boolean <name1> ,
<name6> <name4> :	<name6> <name4> ,
<name5> = <name2> . introspection . django_table_names ( only_existing = True )	call the method <name2> .introspection .django_table_names with an argument boolean true , substitute the result for <name5> .
else :	if not ,
<name2> = <name3> . introspection . table_names ( )	call the method <name3> .introspection .table_names , substitute the result for <name2> .
<name5> = <name3> . introspection . sequence_list ( ) <name6> <name4> else ( )	call the method <name3> .introspection .sequence_list <name6> <name4> is true , substitute the result for <name5> , <name6> not , <name5> is an empty tuple .
<name1> = <name5> . ops . sql_flush ( <name4> , <name3> , <name2> , <name6> )	call the method <name5> .ops .sql_flush with arguments : <name4> , <name3> , <name2> and <name6> , substitute the result for <name1> .
<name4> <name1>	<name4> <name1> .
def <name2> ( <name4> , <name3> , <name1> ) :	define the function <name2> with 3 arguments : <name4> , <name3> and <name1> .
<name4> ( <name3> , <name5> )	call the method <name4> with arguments : <name3> and <name5> .
<name3> = [ ]	<name3> is an empty list .
app_models = <name1> . get_migratable_models ( <name5> , <name3> . alias )	call the method <name1> .get_migratable_models with arguments <name5> and <name3> .alias .
<name2> <name5> <name6> <name4> :	<name2> every <name5> <name6> <name4> ,
<name3> . <name4> ( <name2> ( <name1> , <name6> , <name5> ) )	call the function <name2> with 3 arguments : <name1> , <name6> and <name5> , <name4> the <name3> with the result .
<name1> <name2>	<name1> <name2> .
def <name1> ( <name6> , <name5> , <name4> ) :	define the function <name1> with 3 arguments : <name6> , <name5> and <name4> .
<name5> ( <name6> , <name4> )	call the function <name5> with an arguments <name6> and <name4> .
output = [ ]	outut is an empty list .
<name4> <name6> <name1> <name3> . get_migratable_models ( <name2> , <name5> . alias , include_auto_created = True ) :	<name4> <name6> <name1> <name3> .get_migratable_models method return value , called with 3 arguments : <name2> , <name5> .alias ,
<name3> . <name5> ( <name2> . creation . sql_indexes_for_model ( <name4> , <name6> ) )	and include_auto_created set to boolean True , call the method <name2> .creation .sql_indexes_for_model with arguments <name4> and <name6> , <name5> <name3> with the result .
<name3> <name6>	<name3> <name6> .
def <name4> ( <name3> , <name5> , <name1> ) :	define the function <name4> with 3 arguments : <name3> , <name5> and <name1> .
<name1> ( <name5> , <name6> )	call the function <name1> with arguments <name5> and <name6> .
<name2> = [ ]	<name2> is an empty list .
<name2> <name6> <name1> <name5> . get_migratable_models ( <name4> , <name3> . alias , include_auto_created = True ) :	<name2> <name6> <name1> return value of the method <name5> .get_migratable_models with arguments <name4> , <name3> .alias ,
<name2> . <name6> ( <name3> . creation . sql_destroy_indexes_for_model ( <name5> , <name1> ) )	and include_auto_created set to boolean True , call the method <name3> .creation .sql_destroy_indexes_for_model with arguments <name5> and <name1> , <name6> the <name2> with the result .
<name5> <name1>	<name5> <name1> .
def <name2> ( <name5> , <name6> , <name3> ) :	define the function <name2> with 3 arguments : <name5> , <name6> and <name3> .
<name1> ( <name6> , <name4> )	call the function <name1> with arguments <name6> and <name4> .
<name6> <name3> ( <name4> , <name5> , <name1> ) + <name2> ( <name4> , <name5> , <name1> ) + <name6> ( <name4> , <name5> , <name1> )	use the <name4> , <name5> and <name1> as arguments for the call to the <name3> , <name2> and <name6> functions , append the results respectively , <name6> the result .
def <name5> ( <name2> ) :	define the function <name5> with an argument <name2> .
<name4> = <name5> . compile ( r <val1> )	call the function <name5> .compile with an argument raw string <val1> , substitute the result for <name4> .
<name5> = [ ]	<name5> is an empty list .
<name3> = [ ]	<name3> is an empty list .
"\ <name5> <name4> <name3> <name2> . <name6> ( ""\\n"" ) : \"	<name6> <name2> by newline character , <name5> every <name4> <name3> result ,
\ cleaned_line = <name4> . sub ( r <val3> , <name6> ) . <name1> ( ) \	\ call the method <name4> .sub with an arguments : raw string <val3> and <name6> , <name1> the whitespaces surrounding the result , return it . \
<name4> not <name3> :	<name4> <name3> is false ,
continue	skip this loop iteration ,
<name1> . <name6> ( cleaned_line )	<name6> cleaned_lien to <name1> .
<name4> <name6> . endswith ( <val5> ) :	<name4> <name6> ends with <val5> character ,
"<name3> . <name6> ( "" "" . <name4> ( statement ) )"	<name4> <name3> into a string , separated by white spaces , <name6> it to <name3> .
<name6> = [ ]	<name6> is an empty list .
<name6> <name4>	<name6> <name4> .
def <name5> ( model , <name3> , <name1> ) :	define the function <name5> with 3 arguments : app_config , <name3> and <name1> .
<name6> = <name5> . _meta	substitute <name5> ._meta for <name6> .
<name5> = [ ]	<name5> is an empty list .
<name6> = <name2> . get_app_config ( <name3> . _meta . app_label ) . <name5>	call the method <name2> .get_app_config with an argument <name3> ._met .app_label , substitute <name5> field of the result for <name6> .
app_dirs . append ( <name5> . <name4> . normpath ( <name5> . <name4> . <name2> ( <name6> , <val1>   ) ) )	<name2> <name6> and string <val1> into a file <name4> , use the result as an argument for the call to the function <name5> .path .normpath ,
old_app_dir = <name3> . <name6> . normpath ( <name3> . <name6> . <name2> ( <name4> , <val1>   ) )	append the result to app_dirs . <name2> <name4> and string <val1> into a file <name6> , use the result as an argument for the call to the function <name3> .path .normpath ,
<name5> os . <name6> . <name1> ( <name4> ) :	append the result to old_app_dirs . <name5> file <name6> <name4> <name1> ,
"<name6> . warn ( ""Custom SQL location '<app_label>/models/sql' is "" ""deprecated, use '<app_label>/sql' instead."" , <name4> )"	"call the function <name6> .warn with 2 arguments : string ""Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead."" and <name4> ."
<name4> . <name5> ( <name1> )	<name5> <name1> to <name4> .
<name6> = [ ]	<name6> is an empty list .
<name4> <name1> . managed :	<name4> <name1> .managed is true ,
<name4> = [ <name3> <name2> <name3> <name6> <name1> . local_fields if hasattr ( <name3> , <val5>   ) ]	<name2> every <name3> <name6> <name1> .local_fields that has an <val5> attribute , append <name3> to a list , substitute the resulting list <name2> <name4> .
<name4> <name1> <name3> <name6> :	<name4> every <name1> <name3> <name6> ,
<name2> . <name4> ( <name3> . post_create_sql ( <name6> , <name5> . _meta . db_table ) )	call the method <name3> .post_create_sql with arguments : <name6> and <name5> ._meta .db_table , <name4> the <name2> with the result .
<name4> = <name5> . settings_dict [ <val1>   ] . <name3> ( <val6>   ) [ - 1 ]	once <name3> at the <val6> value under the <val1> key of the <name5> .settings_dict dictionary , substitute last element of the result for <name4> .
<name3> = [ ]	<name3> is an empty list .
<name6> <name2> <name4> <name1> :	<name6> every <name2> <name4> <name1> ,
"sql_files . append ( os . <name3> . <name2> ( <name1> , ""%s.%s.sql"" % ( <name5> . model_name , <name4> ) ) )"	<name2> into a file <name3> : <name1> and string % s . % s .sql , where '%s' is replaced by <name5> .model_name and <name4> , respectively ,
"<name1> . <name2> ( os . <name5> . <name4> ( <name3> , ""%s.sql"" % <name6> . model_name ) )"	<name2> the result to <name1> . <name4> into a file <name5> : <name3> and string % s . % s .sql , where '%s' is replaced by <name6> .model_name , <name2> the result to <name1> .
<name4> <name1> <name6> <name5> :	<name4> every <name1> <name6> <name5> ,
<name2> os . <name6> . <name5> ( <name3> ) :	<name2> file <name6> <name3> <name5> ,
<name1> <name2> . open ( <name5> , <val4>   , <name3> = <name6> . FILE_CHARSET ) as <name1> :	call the function <name2> .open <name1> 3 arguments : <name5> , string <val4> and <name3> set to <name6> .FILE_CHARSET , <name1> the result renamed to <name1> ,
output . extend ( <name6> . ops . prepare_sql_script ( <name3> . read ( ) , _allow_fallback = True ) )	call the method <name6> .ops .prepare_sql_script with 2 arguments : return value of the function <name3> .read ,
<name2> <name3>	and _allow_fallback set to boolean True , extend the <name3> with the result . <name2> <name3> .
def <name2> ( <name3> , <name6> , <name1> , <name4> ) :	define the function <name2> with 4 arguments : <name3> , <name6> , <name1> and <name4> .
<name2> <name6> <name1> <name3> . get_app_configs ( ) :	<name2> <name6> <name1> return value of the method <name3> .get_app_configs ,
<name2> <name1> . models_module <name6> <name5> :	<name2> <name1> .models_module <name6> <name5> ,
continue	skip this loop iteration ,
<name2> <name3> >= <val6> :	<name2> <name3> is greater or equal to integer <val6> ,
<name3> ( <val5> % <name4> . label )	replace '%s' in string <val5> with <name4> .label , <name3> it to the standard output .
<name2> . signals . pre_migrate . send ( <name5> = <name1> , <name1> = <name1> , verbosity = verbosity , interactive = interactive , using = db )	call the method <name2> .signals .pre_migrate .send with 5 arguments : <name5> set to <name1> , <name1> set to <name1> ,
<name5> . signals . pre_syncdb . send ( <name6> = <name2> . models_module , app = <name2> . models_module , create_models = create_models , <name3> = <name3> , <name1> = <name1> , <name4> = <name4> )	<name3> set to <name3> , <name1> set to <name1> and using set to <name4> . call the method <name5> .signals .pre_syncdb .send with 6 arguments : <name6> set to <name2> .models_module ,
def <name1> ( <name6> , <name3> , <name4> , <name5> ) :	app set to app_config .models_module , create_models set to create_models , <name3> set to <name3> , <name4> set to <name4> , and <name5> set to <name5> . define the function <name1> with 4 arguments : <name6> , <name3> , <name4> and <name5> .
<name1> <name5> <name6> <name3> . get_app_configs ( ) :	<name1> <name5> <name6> return value of the method <name3> .get_app_configs ,
<name3> <name5> . models_module <name6> <name1> :	<name3> <name5> .models_module <name6> <name1> ,
continue	skip this loop iteration ,
<name5> <name3> >= <val2> :	<name5> <name3> is greater or equal to integer <val2> ,
<name5> ( <val6> % <name2> . label )	replace '%s' in string <val6> with <name2> .label , <name5> it to the standard output .
<name6> . signals . post_migrate . send ( <name5> = <name3> , <name3> = <name3> , verbosity = verbosity , interactive = interactive , using = db )	call the method <name6> .signals .post_migrate .send with 5 arguments : <name5> set to <name3> , <name3> set to <name3> ,
<name1> . signals . post_syncdb . send ( <name5> = <name2> . models_module , app = <name2> . models_module , created_models = created_models , <name4> = <name4> , <name6> = <name6> , <name3> = <name3> )	<name4> set to <name4> , <name6> set to <name6> and using set to <name3> . call the method <name1> .signals .post_syncdb .send with 6 arguments : <name5> set to <name2> .models_module ,
<name2> <name3>	<name2> module <name3> .
<name3> <name5>	<name3> module <name5> .
<name2> <name5>	<name2> module <name5> .
<name4> <name2>	<name4> module <name2> .
<name2> <name4>	<name2> module <name4> .
<name3> <name4>	<name3> module <name4> .
<name6> <name4>	<name6> module <name4> .
<name4> <name5>	<name4> module <name5> .
<name2> <name5>	<name2> module <name5> .
<name4> <name2>	<name4> module <name2> .
<name1> <name5> <name4> <name3>	<name1> <name5> <name4> <name3> into default name space .
<name5> <name3>	<name5> module <name3> .
<name4> <name1> . template <name6> <name5> , <name2>	<name4> <name1> .template <name6> <name5> and <name2> into default name space .
<name4> <name2> . utils <name5> <name3>	<name4> <name2> .utils <name5> <name3> into default name space .
<name5> <name6> . utils . six . moves . urllib . request <name4> <name1>	<name5> <name6> .utils .six .moves .urllib .request <name4> <name1> into default name space .
<name1> <name5> . utils . _os <name3> rmtree_errorhandler	<name1> <name5> .utils ._os <name3> rmtree_errorhandle into default name space .
<name1> <name3> . core . management . base <name4> <name5> , <name2>	<name1> <name3> .core .management .base <name4> <name5> and <name2> into default name space .
<name5> <name1> . core . management . utils <name2> <name4>	<name5> <name1> .core .management .utils <name2> <name4> into default name space .
<name5> = <name6> . compile ( <val2>   , <name6> . I )	call the function <name6> .compile with 2 arguments : string <val2> and <name6> .I , substitute the result for <name5> .
<name5> = <name3> . compile ( <val4>   , <name3> . I )	call the function <name3> .compile with 2 arguments : string <val4> and <name3> .I , substitute the result for <name5> .
<name1> <name4> ( <name5> ) :	derive the <name1> <name4> from the <name5> base <name1> .
<name3> = <name1>	<name3> is boolean <name1> .
<name6> = <name1>	<name6> is boolean <name1> .
<name4> = [ <val5>   , <val6>   , <val1>   ]	<name4> is list of strings <val5> , <val6> and <val1> .
<name5> = <name2>	<name5> is boolean <name2> .
def add_arguments ( <name1> , <name6> ) :	define the method add_aguments with arguments <name1> and <name6> .
<name2> . add_argument ( <val6>   , <name4> = <val5>   )	call the method <name2> .add_argument with 2 arguments : string <val6> and <name4> set to string <val5> .
<name4> . add_argument ( <val2>   , <name3> = <val1>   , <name5> = 'Optional destination directory'   )	call the method <name4> .add_argument with 3 arguments : string <val2> , <name3> set to <val1> and <name5> set to string 'Name of the application or project.' .
<name5> . add_argument ( <val2>   , <name4> = <val1>   )	call the method <name5> .add_argument with 2 arguments : string <val2> and <name4> set to string <val1> .
"<name3> . add_argument ( <val6>   , <val4>   , <name5> = <val1>   , action = 'append'   , default = [ 'py'   ] , help = 'The file extension(s) to render (default: ""py""). '    'Separate multiple extensions with commas, or use '    '-e multiple times.'   )"	call the method <name3> .add_argument with 6 arguments : string <val6> , string <val4> , <name5> set to string <val1> ,
<name4> . add_argument ( <val1>   , <val3>   , <name2> = <val6>   , <name5> = <val4>   , <name1> = [ ] , <name3> = 'The file name(s) to render. '    'Separate multiple extensions with commas, or use '    '-n multiple times.'   )	"<name5> set to <val4> , <name1> is a list containing string 'py' and <name3> set to string : 'The file extension(s) to render (default: ""py""). Separate multiple extensions with commas, or use -e multiple times.' . call the method <name4> .add_argument with 6 arguments : string <val1> , string <val3> , <name2> set to string <val6> ,"
def <name2> ( <name3> , <name5> , <name1> , <name4> = <name6> , ** <name2> ) :	action set to string 'append' , default as an empty list and help set to a string : 'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.' . define the method <name2> with 5 arguments : <name3> , <name5> , <name1> , <name4> set to <name6> and unpacked dictionary <name2> .
<name5> . <name3> = <name3>	substitute <name3> for <name5> .app_or_project .
<name6> . paths_to_remove = [ ]	<name6> .paths_to_remove is an empty list .
<name6> . verbosity = <name5> [ <val1>   ]	substitute value under the <val1> key of the <name5> dictionary for <name6> .verbosity .
<name2> . validate_name ( <name1> , <name6> )	call the method <name2> .validate_name with 2 arguments <name1> and <name6> .
<name6> <name4> <name2> <name1> :	<name6> <name4> <name2> <name1> ,
<name4> = <name3> . <name6> ( os . getcwd ( ) , <name5> )	<name6> the current working directory and <name5> into a file <name3> , substitute it for <name4> .
<name4> :	<name4> ,
os . makedirs ( <name2> )	make a directory <name2> .
except <name4> as <name6> :	if <name4> renamed to <name6> , exception is caught ,
<name5> <name4> . <name3> == <name3> . EEXIST :	<name5> <name4> .errno equals <name3> .EEXIST ,
<name2> = <val1> % <name6>	replace '%s' in string <val1> with <name6> , substitute it for <name2> .
else :	if not ,
<name2> = <name3>	substitute <name3> for <name2> .
<name2> <name1> ( <name5> )	<name2> an <name1> exception with an argument <name5> .
else :	if not ,
<name3> = os . <name2> . abspath ( <name2> . expanduser ( <name1> ) )	ge the absolute <name2> of the return value of the function <name2> .expanduser with the argument <name1> , substitute it for <name3> .
<name4> not os . <name5> . <name3> ( <name6> ) :	<name4> file <name5> <name6> doesnt <name3> ,
"<name1> <name2> ( ""Destination directory '%s' does not "" ""exist, please create it first."" % top_dir )"	"<name1> an <name2> exception with an argument string ""Destination directory '%s' does not exist, please create it first."" ,"
extensions = tuple ( <name1> ( <name4> [ <val2>   ] , ignored = ( ) ) )	where '%s' is replaced with top_dir . call the function <name1> with 2 arguments : value under the <val2> key of the <name4> dictionary ,
<name4> = [ ]	and ignored as an empty tuple , convert the result into a tuple and substitute it for extensions . <name4> is an empty list .
<name6> <name2> <name4> <name5> [ <val3>   ] :	<name6> every <name2> <name4> value under the <val3> key of the <name5> dictionary .
extra_files . extend ( map ( <name2> <name1> : <name1> . strip ( ) , <name5> . <name4> ( <val6>   ) ) )	<name4> <name5> by <val6> character , apply on its every element a <name2> function which takes an argument <name1> ,
<name6> <name1> . verbosity >= <val2> :	and returns x striped of the surrounding whitespaces , extend the extra_files with the mapped list . <name6> <name1> .verbosity is greater or equal to integer <val2> ,
"\ <name1> . stdout . write ( ""Rendering %s template files with "" ""extensions: %s\\n"" % ( app_or_project , ', '   . join ( extensions ) ) ) \"	"\ call the method <name1> .stdout .write , with an argument string ""Rendering %s template files with extensions: %s\\n"" , \"
"\ <name5> . stdout . write ( ""Rendering %s template files with "" ""filenames: %s\\n"" % ( <name1> , <val4>   . join ( extra_files ) ) ) \"	"\ where '%s' is replaced with <name1> and extensions joined into a string , separated by a string <val4> . call the method <name5> .stdout .write , with an argument string ""Rendering %s template files with filenames: %s\\n"" , \"
<name2> = '%s_name'   % <name3>	where '%s' is replaced with <name3> and extra_files joined into a string , separated by a string ', ' . append string '_name' to <name3> , substitute it for <name2> .
<name3> = '%s_template'   % <name2>	append string '_template' to <name2> , substitute it for <name3> .
<name2> = '%s_directory'   % <name4>	append string '_directory' to <name4> , substitute it for <name2> .
<name3> <name4> . VERSION [ - 2 ] != <val1>   :	<name3> second last element of <name4> .VERSION is not equal to a string <val1> ,
<name1> = <val2>	<name1> is a string <val2> .
else :	if not ,
<name5> = '%d.%d'   % <name2> . VERSION [ : <val3> ]	convert first <val3> elements of <name2> .VERSION into a strings , join them together , separated by a '.' , substitute the result for <name5> .
<name5> = <name6> ( dict ( <name3> , ** {   base_name : name , base_directory : top_dir , 'docs_version'   : docs_version , }  ) , autoescape = False )	<name5> is an instance of a class <name6> , created with 2 arguments : dictionary created by apllying <name3> to unpacked dictionary containing 3 entries :
<name5> <name3> . conf <name1> <name2>	name for base_name , top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False . <name5> <name3> .conf <name1> <name2> into a default name space ,
<name1> not <name5> . configured :	<name1> <name5> .configured is false ,
<name4> . configure ( )	call the method <name4> .configure .
template_dir = <name1> . handle_template ( <name2> [ <val5>   ] , <name3> )	call the method <name1> .handle_template with 2 arguments : value under the <val5> key of the <name2> dictionary and <name3> .
<name3> = len ( <name1> ) + 1	increment length of <name1> by one and substitute it for <name3> .
<name3> <name6> , <name5> , <name4> <name2> os . walk ( <name1> ) :	<name3> every <name6> , <name5> and <name4> <name2> subdirectory tree starting from the base dir <name1> ,
<name4> = <name5> [ <name3> : ]	slice <name5> starting from the <name3> index to the end , substitute it for <name4> .
<name4> = <name3> . replace ( <name5> , <name1> )	call the method <name3> .replace with arguments <name5> and <name1> , substitute the result for <name4> .
<name5> <name1> :	<name5> <name1> is true ,
<name3> = <name1> . <name4> ( <name2> , <name5> )	<name4> <name2> and <name5> into a file <name1> , substitute it for <name3> .
<name3> not <name1> . <name4> ( <name6> ) :	<name3> <name6> <name1> doesnt <name4> ,
os . mkdir ( <name5> )	make <name5> directory ,
<name6> <name4> <name3> <name5> [ : ] :	<name6> <name4> <name3> <name5> ,
<name1> <name6> . startswith ( <val5>   ) <name2> <name6> == <val3>   :	<name1> <name6> starts with character <val5> <name2> <name6> equals a string <val3> ,
<name5> . <name6> ( <name3> )	<name6> <name3> key from <name5> .
<name2> <name4> <name1> <name6> :	<name2> every <name4> <name1> <name6> ,
<name5> <name2> . endswith ( ( <val3>   , <val6>   , <val1>   ) ) :	<name5> <name2> ends with <val3> , <val6> or <val1> ,
   continue	skip this loop iteration ,
<name5> = <name2> . <name3> ( <name6> , <name1> )	<name3> <name6> and <name1> into a file <name2> , substitute it for <name5> .
new_path = path . <name6> ( <name3> , <name5> , <name2> . replace ( <name4> , <name1> ) )	<name6> <name3> , <name5> and return value of the function <name2> .replace called with 2 arguments : <name4> and <name1> ,
<name3> <name2> . <name1> ( <name5> ) :	into a file <name2> , substitute it for <name5> . <name3> <name5> file <name2> <name1> ,
"<name2> <name1> ( ""%s already exists, overlaying a "" ""project or app into an existing "" ""directory won't replace conflicting "" ""files"" % new_path )"	<name2> a <name1> exception with an argument :
<name2> open ( old_path , 'rb'   ) as <name4> :	"string ""%s already exists, overlaying a project or app into an existing directory won't replace conflicting files"" , where '%s"" is replaced with new_path.   open old_path file in ' rb '  mode , <name2> file descriptor renamed to <name4> ,"
<name6> = <name4> . read ( )	call the method <name4> .read , substitute it for <name6> .
<name4> <name1> . endswith ( <name6> ) <name2> <name1> <name3> <name5> :	<name4> <name1> ends with <name6> <name2> <name1> is contained <name3> <name5> ,
<name5> = <name5> . decode ( <val6>   )	call the method <name5> .decode with an argument string <val6> , substitute it for <name5> .
<name1> = <name4> ( <name2> )	<name1> is an instance of <name4> class , created with an argument <name2> .
<name5> = <name3> . render ( <name4> )	call the method <name3> .render with an argument <name4> , substitute it for <name5> .
<name5> = <name5> . encode ( <val6>   )	call the method <name5> .encode with an argument string <val6> , substitute it for <name5> .
<name4> <name5> ( <name2> , <val3>   ) as <name6> :	<name5> <name2> file in <val3> mode , <name4> file descriptor renamed to <name6> ,
<name2> . <name5> ( <name3> )	<name5> <name3> to <name2> file .
<name5> <name3> . verbosity >= <val6> :	<name5> <name3> .verbosity is greater or equal to integer <val6> ,
\ <name3> . stdout . <name6> ( <val2> % <name4> ) \	\ replace '%s' in string <val2> with <name4> , <name6> it to the <name3> .stdout stream . \
<name1> :	<name1> ,
<name3> . copymode ( <name1> , <name2> )	call the function <name3> .copymode with arguments <name1> and <name2> .
<name5> . make_writeable ( <name2> )	call the method <name5> .make_writeable with an argument <name2> .
except <name4> :	if <name4> exception is caught ,
"self . stderr . write ( ""Notice: Couldn't set permission bits on %s. You're "" ""probably using an uncommon filesystem setup. No "" ""problem."" % new_path , self . style . NOTICE )"	"replace '%s' in string ""Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem."" ,"
<name1> <name2> . paths_to_remove :	with new_path and <name2> .style .NOTICE , respectively , write it to <name2> .stderr stream . <name1> <name2> .paths_to_remove is true ,
<name1> <name5> . verbosity >= <val3> :	<name1> <name5> .verbosity is greater or equal to integer <val3> ,
\ <name3> . stdout . <name1> ( <val2> ) \	\ <name1> string <val2> to <name3> .stdout stream . \
<name2> <name1> <name3> <name5> . paths_to_remove :	<name2> every <name1> <name3> <name5> .paths_to_remove ,
<name1> path . isfile ( <name2> ) :	<name1> <name2> is file ,
os . <name5> ( <name4> )	<name5> file <name4> ,
else :	if not ,
<name3> . rmtree ( <name6> , <name1> = <name5> )	call the function <name3> .rmtree with 2 arguments : <name6> and <name1> set to <name5> .
def <name1> ( <name3> , <name6> , <name2> ) :	define the method <name1> with 3 arguments : <name3> , <name6> and <name2> .
<name6> <name4> <name3> <name1> :	<name6> <name4> <name3> <name1> ,
<name6> <name5> . <name2> ( <name3> . __path__ [ 0 ] , <val4>   , <name1> )	<name2> first element of <name3> .__path__ , string <val4> and <name1> into a valid file <name5> , <name6> it .
else :	if not ,
<name3> <name6> . startswith ( <val4>   ) :	<name3> <name6> starts with a string <val4> ,
<name4> = <name4> [ <val3> : ]	remove first <val3> elements form <name4> .
<name1> = <name3> . expanduser ( <name5> )	call the method <name3> .expanduser with an argument <name5> , substitute it for <name1> .
<name1> = <name3> . normpath ( <name1> )	call the method <name3> .normpath with an argument <name1> , substitute it for <name1> .
<name5> path . isdir ( <name1> ) :	<name5> <name1> is a directory ,
<name2> <name3>	<name2> <name3> .
<name2> <name4> . is_url ( <name3> ) :	call the method <name4> .is_url with an argument <name3> , <name2> it evaluates to true ,
<name6> = <name5> . download ( <name2> )	call the method <name5> .download with an argument <name2> , substitute the result for <name6> .
else :	if not ,
<name1> = <name6> . abspath ( <name4> )	get the absolute file <name6> of the <name4> , substitute it for <name1> .
<name3> <name2> . <name1> ( <name6> ) :	<name3> file <name2> <name6> <name1> ,
<name1> <name2> . extract ( <name6> )	call the method <name2> .extract with an argument <name6> , <name1> the result .
<name2> <name3> ( <val5> % ( <name1> . app_or_project , <name6> ) )	<name2> an <name3> exception with an argument string <val5> , replace '%s' with <name1> .app_or_project and <name6> .
def <name2> ( <name6> , <name3> , <name5> ) :	define <name2> with 3 arguments : <name6> , <name3> and <name5> .
<name1> <name2> <name4> <name5> :	<name1> <name2> <name4> <name5> ,
"<name4> <name6> ( <val3> % ( <val2> if app_or_project == ""app"" else ""a"" , app_or_project ) )"	<name4> an <name6> exception with an argument string <val3> , where '%s' is replaced with string <val2> ,
\ <name5> <name1> <name4> . search ( r <val3>   , <name2> ) : \	\ and app_or_project <name5> app_or_project equals to string 'app' , <name5> <name1> , it is replaced with 'a' and app_or_project . call the method <name4> .search with 2 arguments : raw string <val3> and <name2> , <name5> it evaluates to false , \
<name6> not <name1> . search ( r <val3>   , <name5> ) :	call the method <name1> .search with 2 arguments : raw string <val3> and <name5> , <name6> it evaluates to false ,
<name2> = <val3>	<name2> is a string <val3> .
else :	if not ,
<name3> = <val5>	<name3> is a string <val5> .
<name6> <name4> ( <val2> % ( <name1> , app_or_project , message ) )	<name6> an <name4> with an argument string <val2> , were '%r' is replaced with <name1> ,
def <name6> ( <name3> , <name5> ) :	and '%s' is replaced with app_or_project and message , respectively . define the method <name6> with arguments <name3> and <name5> .
def <name2> ( <name3> ) :	define the function <name2> with an argument <name3> .
<name1> = <name2> . rstrip ( <val4>   )	strip <name2> of surrounding <val4> characters , substitute it for <name1> .
<name5> = <name1> . <name3> ( <val4>   ) [ - 1 ]	<name3> <name1> at <val4> character , substitute the last element of the result for <name5> .
<name3> <name1> . endswith ( <val4>   ) :	<name3> <name1> ends with <val4> character ,
<name6> = <name5> + <val3>	append <val3> to <name5> , substitute it for <name6> .
else :	if not ,
<name6> = <name3>	substitute <name3> for <name6> .
<name4> <name6> , <name3>	<name4> <name6> and <name3> .
prefix = <val3>   % <name6> . app_or_project	replace '%s' in string <val3> with <name6> .app_or_project .
tempdir = <name4> . mkdtemp ( <name6> = <name6> , <name5> = <val3>   )	call the function <name4> .mkdtemp with arguments : <name6> set to <name6> and <name5> set to string <val3> .
<name6> . paths_to_remove . <name1> ( <name5> )	<name1> the <name5> to <name6> .paths_to_remove .
<name2> , <name5> = <name1> ( <name4> )	call the function <name1> with an argument <name4> , assign the result to <name2> and <name5> , respectively .
<name5> <name4> . verbosity >= <val1> :	<name5> <name4> .verbosity is greater or equal to integer <val1> ,
\ <name3> . stdout . <name4> ( <val2> % <name1> ) \	\ replace '%s' in string <val2> , with <name1> , <name4> it to <name3> .stdout stream . \
<name2> :	<name2> ,
<name5> , <name3> = <name4> ( <name2> , <name1> . join ( <name6> , <name5> ) )	call the function <name4> with arguments <name2> and <name6> and <name5> joined into a file <name1> , assign the result to <name5> , and <name3> , respectively .
except IOError as <name6> :	if IOErro , renamed to <name6> , exception is caught ,
<name5> <name3> ( <val2> % ( <name4> , filename , e ) )	<name5> an <name3> exception with an argument string <val2> , where '%s' is replaced with <name4> ,
<name4> = <name5> . <name1> ( <val2>   ) [ - 1 ]	filename and e . <name1> <name5> at the <val2> character , substitute last element of the result for <name4> .
<name6> = <name4> . <name2> ( <val1>   )	<name2> the value under the <val1> key of the <name4> dictionary , substitute it for <name6> .
<name2> <name1> :	<name2> <name1> is true ,
<name3> , <name2> = <name5> . parse_header ( <name6> )	call the method <name5> .parse_header with an argument <name6> , assign the result to <name3> and <name2> , respectively .
<name6> = <name2> . <name1> ( <val4>   ) or used_name	<name1> the value under the <val4> key of the <name2> dictionary , if the key exists substitute it for <name6> ,
else :	if not , substitute used_name for guessed_filename . if not ,
<name1> = <name6>	substitute <name6> for <name1> .
<name5> = <name4> . splitext ( <name3> ) [ 1 ]	call the method <name4> .splitext with an argument <name3> , substitute the second element of the result for <name5> .
<name6> = <name5> . <name2> ( <val3>   )	<name2> the value under the <val3> key of the <name5> dictionary , substitute it for <name6> .
<name4> not <name6> <name1> <name2> :	<name4> <name6> is false <name1> <name2> is true ,
<name5> = <name3> . guess_extension ( <name6> )	call the method <name3> .guess_extension with an argument <name6> , substitute result for <name5> .
<name4> <name5> :	<name4> <name5> is true ,
<name2> += <name1>	append <name1> to <name2> .
<name2> <name5> != <name4> :	<name2> <name5> is not equal to <name4> ,
<name2> = <name1> . <name5> ( <name4> , <name6> )	<name5> <name4> and <name6> into a file <name1> , substitute it for <name2> .
<name2> . move ( <name6> , <name1> )	call the function <name2> .move with arguments <name6> and <name1> .
<name1> <name6>	<name1> <name6> .
<name6> <name3>	<name6> <name3> .
def <name5> ( <name3> , <name2> ) :	define the method <name5> with arguments <name3> and <name2> .
base , ext = <name3> . splitext ( <name1> )	call the method <name3> .splitext with an argument <name1> .
<name2> <name6> . lower ( ) . endswith ( <val4>   ) :	convert <name6> to lowercase , <name2> it ends with string <val4> ,
<name3> = <name6> [ - 4 : ] + <name3>	take last four elements of <name6> and append <name3> to it , substitute result for <name3> .
<name3> = <name3> [ : - 4 ]	substitute last four elements of <name3> for <name3> .
<name5> <name6> , <name2>	<name5> <name6> and <name2> .
def extract ( <name5> , <name1> ) :	define the function with arguments <name5> and <name1> .
<name1> = <val6>   % <name4> . app_or_project	replace '%s' in string <val6> with <name4> .app_or_project , substitute it for <name1> .
<name4> = <name6> . mkdtemp ( <name2> = <name2> , <name1> = <val5>   )	call the method <name6> .mkdtemp with 2 arguments : <name2> set to <name2> , <name1> set to string <val5> , substitute the result for <name4> .
<name3> . paths_to_remove . <name6> ( <name2> )	<name6> <name2> to <name3> .self .paths_to_remove .
<name3> <name2> . verbosity >= <val5> :	<name3> <name2> .verbosity is greater or equal to integer <val5> .
\ <name3> . stdout . <name5> ( <val4> % <name2> ) \	\ substitute '%s' in string <val4> with <name2> , <name5> it to <name3> .stdout stream . \
<name6> :	<name6> ,
<name3> . extract ( <name1> , <name4> )	call the method <name3> .extract with arguments : <name1> and <name4> .
<name5> <name6>	<name5> <name6> .
except ( <name2> . ArchiveException , <name1> ) as <name6> :	if <name2> .ArchiveException or <name1> , renamed to <name6> , exception are caught ,
<name4> <name6> ( <val3> % ( <name2> , <name5> , <name1> ) )	<name4> an <name6> with an argument string <val3> , where '%s' is replaced with <name2> , <name5> and <name1> .
def <name5> ( <name6> , <name2> ) :	define the method <name5> with arguments <name6> and <name2> .
<name2> <val1>   <name3> <name5> <name6> :	<name2> character <val1> is <name3> contained <name5> <name6> ,
<name5> <name2>	<name5> boolean <name2> .
<name4> = <name3> . <name1> ( <val5>   , 1 ) [ 0 ] . lower ( )	<name1> <name3> once at the first character <val5> , convert the first element to lowercase and substitute it for <name4> .
<name4> <name1> <name2> <name3> . url_schemes	if <name1> is countaine <name2> <name3> .url_schemes <name4> boolean True , otherwise <name4> False .
def <name6> ( <name1> , <name2> ) :	define the method <name6> with arguments <name1> and <name2> .
<name3> <name5> . platform . startswith ( <val4>   ) :	<name3> <name5> .platform starts with string <val4> ,
<name2>	<name2> nothing .
<name6> not <name1> . access ( <name5> , <name1> . W_OK ) :	<name6> call to the method <name1> .access with arguments : <name5> and <name1> .W_OK , evaluates to false ,
<name4> = <name5> . stat ( <name1> )	call the function <name5> .stat with an argument <name1> , substitute the result for <name4> .
new_permissions = <name4> . S_IMODE ( <name2> . st_mode ) |  <name4> . S_IWUSR	call the method <name4> .S_IMODE with an argument <name2> .st_mode , calculate binary OR with the result and <name4> .S_IWUSR , as operands ,
<name1> . chmod ( <name3> , <name5> )	substitute the result for new_permission . call the function <name1> .chmod wiht arguments <name3> and <name5> .
<name6> <name1> <name2> <name4>	<name6> <name1> <name2> <name4> into default name space .
<name5> <name2>	<name5> module <name2> .
<name6> <name2> <name5> <name1> , <name3>	<name6> <name2> <name5> <name1> and <name3> into default name space .
<name4> <name5>	<name4> module <name5> .
<name3> <name6> . utils . encoding <name5> <name2> , <name1>	<name3> <name6> .utils .encoding <name5> <name2> and <name1> into default name space .
<name5> <name1> . utils <name6> <name3>	<name5> <name1> .utils <name6> <name3> into default name space .
<name5> . base <name1> <name6>	<name5> .base <name1> <name6> into default name space .
def <name6> ( <name1> , <name3> = <name2> ) :	define the function <name6> with 2 arguments : <name1> and <name3> set to <name2> .
<name2> :	<name2> ,
<name2> = <name1> ( <name3> , <name5> = <name6> , <name4> = <name2> , stderr = <name2> , close_fds = os . name != 'nt'   , universal_newlines = True )	<name2> is a instance of <name1> class , created with 6 arguments : <name3> , <name5> set to boolean <name6> , <name4> set to <name2> ,
except <name5> as <name6> :	stderr set to PIPE , close_fds set to boolean True is os .name is not equal to 'nt' , universal_newlines set to boolean True . if <name5> , renamed to <name6> , exception is caught ,
strerror = <name3> ( <name6> . strerror , <name2> , <name4> = <name5> )	call the <name3> function with 3 arguments : <name6> .strerror , <name2> and <name4> set to boolean <name5> .
<name2> . reraise ( <name6> , <name6> ( 'Error executing %s: %s'   % ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )	call the method <name2> .reraise 3 with arguments : <name6> , return value of the function <name6> ,
<name1> , <name5> = <name6> . communicate ( )	called with string as an argument 'Error executing %s: %s' , where '%s' is replaced by : first element of args and strerror , respective , and third element of the result of the function sys .exc_info . call the method <name6> .communicate , assign the result to <name1> and <name5> , respectively .
<name2> ( <name6> , <name1> ( <name4> , DEFAULT_LOCALE_ENCODING , strings_only = True ) , p . returncode )	<name2> a tuple containing 3 entries : <name6> , result of the function <name1> , called with 3 arguments : <name4> ,
def <name5> ( <name4> = ( <val3>   , ) , <name6> = ( <val1>   , ) ) :	DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p .returncode . define the function <name5> with 2 arguments : <name4> set to tuple containing string <val3> and <name6> set to tuple containing string <val1> .
<name5> = [ ]	<name5> is an empty list ,
<name3> <name1> <name6> <name4> :	<name3> every <name1> <name6> <name4> ,
<name1> . <name6> ( <name2> . replace ( ' '   , ''   ) . <name5> ( <val4>   ) )	delete all the whitespaces from <name2> , <name5> it by <val4> character , <name6> <name1> with the result .
<name5> <name2> , <name1> <name6> enumerate ( <name3> ) :	<name5> every <name2> and <name1> <name6> enumerated iterable <name3> ,
<name5> not <name3> . startswith ( <val4>   ) :	<name5> <name3> doesnt start with <val4> character ,
<name4> [ <name3> ] = '.%s'   % <name4> [ <name3> ]	prepend '.' to the <name3> - th element of the <name4> .
<name4> <name1> ( <name2> <name3> <name2> <name5> <name6> <name4> <name2> . strip ( <val1>   ) <name2> <name5> <name3> )	<name4> striped <name2> by <val1> character is <name2> contained <name5> <name3> , <name3> every <name2> <name5> <name6> put <name2> into a <name1> , <name4> the resulting <name1> .
def <name5> ( <name3> , <name2> = <name4> , <name1> = <name4> ) :	define the function <name5> with 3 arguments : <name3> , <name2> set to <name4> and <name1> set to <name4> .
<name5> <name6> <name2> <name3> :	<name5> <name6> <name2> <name3> ,
<name5> = <name6> . environ . get ( <val3>   , ''   ) . <name2> ( <name6> . pathsep )	call the function <name6> .environ .get with 2 arguments : string <val3> and an empty string , <name2> the result at the <name6> .pathsep , substitute the result for <name5> .
<name3> isinstance ( <name1> , <name5> . string_types ) :	<name3> <name1> is an instance of <name5> .string_types ,
<name5> = [ <name5> ]	<name5> is an list containing <name5> .
<name1> <name3> <name4> <name2> :	<name1> <name3> <name4> <name2> ,
<name6> = <name3> . environ . get ( <val5>   , <val2>   ) . <name1> ( <name3> . pathsep )	call the method <name3> .environ .get with 2 arguments : strings <val5> and <val2> , <name1> the result at <name3> .pathsep , substitute it for <name6> .
<name5> <name6> <name4> <name2> :	<name5> <name6> <name4> <name2> ,
<name5> <name3> . endswith ( <name6> ) :	<name5> <name3> ends with <name6> ,
<name1> = [ ''   ]	<name1> is an list containing an empty string .
<name5>	<name5> the loop execution .
<name3> <name1> <name5> <name2> :	<name3> every <name1> <name5> <name2> ,
<name6> = os . <name3> . <name5> ( <name4> , <name2> )	<name5> <name4> and <name2> into a file <name3> , substitute it for <name6> .
<name1> os . path . isfile ( <name4> ) :	<name1> <name4> is a file ,
<name3> <name2>	<name3> <name2> .
<name6> <name3> <name1> <name5> :	<name6> every <name3> <name1> <name5> ,
<name2> = <name5> + <name4>	add <name4> to <name5> , substitute the result for <name2> .
<name1> os . path . isfile ( <name2> ) :	<name1> <name2> is a file ,
<name5> <name6>	<name5> <name6> .
<name5> <name4>	<name5> <name4> .
<name6> <name5>	<name6> module <name5> .
<name6> <name5> <name3> <name2>	<name6> <name5> <name3> <name2> into default name space .
<name3> <name2> . utils <name1> <name4>	<name3> <name2> .utils <name1> <name4> into default name space .
<name4> <name6> ( <name2> ) :	derive the <name4> <name6> from the <name2> base <name4> .
pass	do nothing .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from the <name4> base <name1> .
pass	do nothing .
<name2> <name3> ( <name6> ) :	derive the <name2> <name3> from the <name6> base <name2> .
pass	do nothing .
<name6> <name4> ( <name3> ) :	derive the <name6> <name4> from the <name3> base <name6> .
<name6> <name4> ( <name1> , <name5> , <name3> , <name2> = <val6> , <name4> = <name1> ) :	<name6> the method <name4> with 5 arguments : <name1> , <name5> , <name3> , <name2> set to integer <val6> and <name4> set to boolean <name1> .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .object_list .
<name1> . <name6> = int ( <name6> )	convert <name6> into an integer and substitute it for <name1> .per_page .
<name1> . <name6> = int ( <name6> )	convert <name6> into an integer and substitute it for <name1> .orphans .
<name6> . <name1> = <name1>	substitute <name1> for <name6> .allow_empty_first_page .
<name2> . _num_pages = <name2> . _count = <name1>	<name2> ._num_pages and <name2> ._count are <name1> .
def <name4> ( <name3> , <name5> ) :	define the method <name4> with <name3> class instance and <name5> as arguments .
<name1> :	<name1> ,
<name3> = int ( <name3> )	convert <name3> into an integer and substitute it for <name3>
except ( <name3> , <name5> ) :	if <name3> or <name5> exceptions are caught ,
<name2> <name3> ( <val5>   )	<name2> an exception <name3> with string <val5> as an argument .
<name6> <name5> <  <val3> :	<name6> <name5> is lesser than integer <val3> ,
<name6> <name5> ( <val1>   )	<name6> an <name5> exception with string <val1> as an argument .
<name5> <name6> >  <name1> . num_pages :	<name5> <name6> is greater than <name1> .num_pages ,
<name2> <name5> == <val4> <name1> <name3> . allow_empty_first_page :	<name2> <name5> equals a integer <val4> <name1> <name3> .allow_empty_first_page is true ,
pass	do nothing .
else :	if not ,
<name2> <name3> ( <val5>   )	<name2> an <name3> exception with string <val5> as an argument .
<name6> <name5>	<name6> <name5> .
def <name2> ( <name1> , <name4> ) :	define the method <name2> with <name1> class instance and <name4> as arguments .
<name1> = <name4> . validate_number ( <name1> )	call the method <name4> .validate_number with an argument <name1> , substitute it for <name1> .
<name4> = ( <name1> - 1 ) * <name5> . per_page	decrement <name1> by one , multiply it with <name5> .per_page , substitute the result for <name4> .
<name5> = <name3> + <name1> . per_page	sum <name3> and <name1> .per_page , substitute the result for <name5> .
<name1> <name2> + <name5> . orphans >= <name5> . count :	<name1> sum of the <name2> and <name5> .orphans is greater or equal to <name5> .count ,
<name3> = <name4> . count	substitute <name4> .count for <name3> .
<name1> <name4> . _get_page ( <name4> . object_list [ <name6> : <name2> ] , <name3> , <name4> )	call the <name4> ._get_pages method with 3 arguments : <name4> .object_list from the <name6> to the <name2> index , <name3> and <name4> , <name1> the result .
def <name3> ( <name5> , * <name2> , ** <name1> ) :	define the method <name3> with <name5> class instance , unpacked list <name2> and unpacked dictionary <name1> as arguments .
<name1> <name4> ( * <name5> , ** <name2> )	<name1> a instance of the class <name4> , created with 2 arguments : unpacked list <name5> and unpacked dictionary <name2> .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name2> <name4> . _count <name1> <name3> :	<name2> <name4> ._count <name1> <name3> ,
<name2> :	<name2> ,
<name1> . _count = <name1> . object_list . count ( )	substitute the return value of the method <name1> .object_list .count for <name1> ._count .
except ( <name3> , <name5> ) :	if <name5> or <name3> exceptions are caught ,
<name4> . _count = len ( <name4> . object_list )	substitute length of <name4> .object_list for <name4> ._count .
<name3> <name4> . _count	<name3> <name4> ._count .
<name6> = <name5> ( <name4> )	<name6> is a <name5> object with <name4> as a getter method .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name6> <name4> . _num_pages <name2> <name1> :	<name6> <name4> ._num_pages <name2> <name1> ,
<name2> <name3> . count == <val6> <name4> not <name3> . allow_empty_first_page :	<name2> <name3> .count equals a integer <val6> <name4> <name3> .allow_empty_first_page is false ,
<name5> . _num_pages = <val4>	<name5> ._num_pages is a integer <val4> .
else :	if not ,
<name6> = max ( <val3> , <name2> . count - <name2> . orphans )	get greater value between integer <val3> and result of subtraction of <name2> .orphans from <name2> .count , substitute it for <name6> .
<name6> . _num_pages = int ( ceil ( <name3> / float ( <name6> . per_page ) ) )	divide <name3> by a floating point number <name6> .per_page , convert its ceiling value to an integer and substitute it for <name6> ._num_pages .
<name1> <name5> . _num_pages	<name1> <name5> ._num_pages .
<name2> = <name3> ( <name1> )	<name2> is a <name3> object with <name1> as a getter method .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name1> range ( <val4> , <name3> . num_pages + <val4> )	<name1> all the integers from the integer <val4> to the <name3> .num_pages .
<name1> = <name6> ( <name5> )	<name1> is a <name6> object with <name5> as a getter method .
<name6> = <name5>	substitute <name5> for <name6> .
<name5> <name4> ( <name1> . Sequence ) :	derive the <name5> <name4> from the <name1> .Sequence base <name5> .
def <name3> ( <name4> , <name6> , <name1> , <name5> ) :	define the method <name3> with 4 arguments : <name4> , <name6> , <name1> , and <name5> .
<name5> . <name1> = <name1>	substitute <name1> for <name5> .object_list .
<name5> . <name3> = <name3>	substitute <name3> for <name5> .number .
<name6> . <name5> = <name5>	substitute <name5> for <name6> .paginator .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name5> <val1>   % ( <name4> . number , <name4> . paginator . num_pages )	<name5> the string <val1> , with occurrences of '%s' replaced by <name4> .number and <name4> .paginator .num_pages , respectively .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name1> len ( <name6> . object_list )	<name1> the length of <name6> .object_list .
def <name6> ( <name2> , <name1> ) :	define the method <name6> with arguments <name2> and <name1> .
<name6> <name4> isinstance ( <name2> , ( slice , ) + <name3> . integer_types ) :	<name6> <name2> is <name4> an instance of <name3> .integer_types or tuple type ,
<name5> <name2>	<name5> a <name2> exception ,
<name1> <name2> isinstance ( <name6> . object_list , <name4> ) :	<name1> <name6> .object is <name2> an instance of <name4> type ,
<name3> . object_list = <name4> ( <name3> . object_list )	convert <name3> .object_list to a <name4> .
<name5> <name4> . object_list [ <name1> ]	<name5> <name4> .object_list element at <name1> .
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name5> <name2> . number <  <name2> . paginator . num_pages	if <name2> .number is lesser than <name2> .paginator .num_pages , <name5> boolean True , otherwise <name5> boolean False .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name3> <name2> . number >  <val1>	if <name2> .number is greater than integer <val1> , <name3> boolean True , otherwise <name3> boolean False .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name3> <name1> . has_previous ( ) or <name1> . has_next ( )	call the method <name1> .has_previous , if it evaluate to false , call the <name1> .has_next method , <name3> the result .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name5> <name4> . paginator . validate_number ( <name4> . number + <val2> )	call the method <name4> .paginator .validate_number with <name4> .number incremented by <val2> as argument , <name5> the result .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name6> <name1> . paginator . validate_number ( <name1> . number - <val5> )	call the method <name1> .paginator .validate_number with <name1> .number decremented by <val5> as argument , <name6> the result .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name1> <name2> . paginator . count == <val4> :	<name1> <name2> .paginator .count equals a integer <val4> ,
<name1> <val5>	<name1> integer <val5> .
<name1> ( <name2> . paginator . per_page * ( <name2> . number - 1 ) ) + 1	decrement <name2> .number by one , multiply it by <name2> .paginator .per_page , increment the result by one , <name1> it .
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
<name4> <name6> . number == <name6> . paginator . num_pages :	<name4> <name6> .number equals to <name6> .paginator .num_pages ,
<name1> <name2> . paginator . count	<name1> <name2> .paginator .count .
<name5> <name4> . number * <name4> . paginator . per_page	multiply <name4> .number and <name4> .paginator .per_page , <name5> the result .
<name4> <name2>	<name4> module <name2> .
<name3> <name2> . conf <name6> <name1>	<name3> <name2> .conf <name6> <name1> into default name space .
<name4> <name6> . utils <name5> <name3>	<name4> <name6> .utils <name5> <name3> into default name space .
<name3> <name1> . core . serializers . base <name2> <name4>	<name3> <name1> .core .serializers .base <name2> <name4> into default name space .
"<name2> = {   <val6> : <val5> , ""python"" : ""django.core.serializers.python"" , ""json"" : ""django.core.serializers.json"" , ""yaml"" : ""django.core.serializers.pyyaml"" , }"	<name2> is a dictionary containing 4 inital entries : <val5> for <val6> ,
<name5> = { }	"django .core .serializers .python for ""python"" , ""django.core.serializers.json"" for ""json"" , and ""django.core.serializers.pyyaml"" for ""yaml"" . <name5> is an empty dictionary ."
<name3> <name1> ( <name5> ) :	derive the <name3> <name1> from the <name5> base <name3> .
<name2> = <name1>	<name2> is boolean <name1> .
def __init__ ( <name3> , <name2> ) :	define the __init__method with arguments <name3> and <name2> .
<name4> . <name2> = <name2>	substitute <name2> for <name4> .exception .
def __call__ ( <name6> , * <name5> , ** <name2> ) :	define the __call__method with arguments <name6> , unpacked list <name5> and unpacked dictionary <name2> .
<name1> <name3> . <name2>	<name1> an <name3> .exception <name2> .
def <name5> ( <name1> , <name4> , <name6> = <name2> ) :	define the function <name5> with 3 arguments : <name1> , <name4> and <name6> set to <name2> .
<name2> <name3> <name4> <name1> <name6> not <name5> :	<name2> <name3> <name4> <name1> <name6> <name5> <name4> false ,
<name4> ( )	call the function <name4> .
<name4> :	<name4> ,
<name1> = <name2> . import_module ( <name5> )	call the function <name2> .import_module with an argument <name5> , substitute it for <name1> .
except <name2> as <name5> :	if <name2> , renamed to <name5> , exception is caught ,
bad_serializer = <name1> ( <name3> )	ba_serializer is a instance of <name1> class , created with an argument <name3> .
module = type ( 'BadSerializerModule'   , ( <name3> , ) , {   'Deserializer'   : <name1> , 'Serializer'   : <name1> , }  )	create a instance of a class BadSerializerModule from the <name3> base class , with elements Deserializer set to <name1> and Serializer set to <name1> .
<name2> <name4> <name6> <name5> :	<name2> <name4> <name6> <name5> ,
<name1> [ <name6> ] = <name4>	substitute <name4> for the value under the <name6> key of the <name1> dictionary .
else :	if not ,
<name4> [ <name2> ] = <name5>	substitute <name5> for the value under the <name2> key of the <name4> dictionary .
def <name1> ( <name2> ) :	define the function <name1> with an argument <name2> .
<name3> not <name2> :	<name3> <name2> is false ,
<name2> ( )	call the function <name2> .
<name2> <name6> <name1> <name3> <name5> :	<name2> <name6> is <name1> contained <name3> <name5> ,
<name6> <name3> ( <name5> )	<name6> a <name3> exception with an argument <name5> .
del <name2> [ <name5> ]	delete the <name2> dictionary entry at the <name5> key .
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
<name1> not <name3> :	<name1> <name3> is false ,
<name3> ( )	call the function <name3> .
<name2> <name3> <name6> <name1> <name4> :	<name2> <name3> is <name6> contained <name1> <name4> ,
<name2> <name6> ( <name4> )	<name2> a <name6> exception with an argument <name4> .
<name1> <name6> [ <name2> ] . <name5>	get the value under the <name2> key of the <name6> dictionary , <name1> the <name5> filed of the result .
def <name6> ( ) :	define the function <name6> .
<name3> not <name1> :	<name3> <name1> is false ,
<name6> ( )	call the function <name6> .
<name3> <name4> ( <name5> )	convert <name5> into a <name4> , <name3> it .
def <name1> ( ) :	define the function <name1> .
if not <name1> :	f <name1> is false ,
<name2> ( )	call the function <name2> .
<name3> [ <name6> <name1> <name6> , <name4> <name5> <name2> . iteritems ( <name3> ) if not <name4> . Serializer . internal_use_only ]	append <name6> into a list <name1> every <name6> and <name4> <name5> <name3> value of the <name2> .iteritems function with an argument <name3> ,
def <name4> ( <name2> ) :	only if v .Serializer .internal_use_only is false , return the resulting list . define the function <name4> with an argument <name2> .
if not <name2> :	f <name2> is false ,
<name3> ( )	call the function <name3> .
<name3> <name6> <name4> <name2> <name5> :	<name3> <name6> is <name4> contained <name2> <name5> ,
<name1> <name3> ( <name5> )	<name1> a <name3> exception with an argument <name5> .
<name2> <name1> [ <name6> ] . <name4>	get the value under the <name6> key of the <name1> dictionary , <name2> the <name4> filed of the result .
def serialize ( <name3> , <name1> , ** <name2> ) :	define the function serializer with 3 arguments : <name3> , <name1> and unpacked dictionary <name2> .
<name4> = <name5> ( <name1> ) ( )	call the <name5> function with an argument <name1> , call the return value object and substitute it for <name4> .
<name4> . serialize ( <name5> , ** <name6> )	call the <name4> .serialize method with arguments <name5> and unpacked dictionary <name6> .
<name4> <name5> . getvalue ( )	evaluate the method <name5> .getvalue , <name4> the result .
def <name1> ( <name2> , <name4> , ** <name5> ) :	define the function <name1> with 3 arguments : <name2> , <name4> and unpacked dictionary <name5> .
<name5> = <name6> ( <name2> )	call the <name6> function with an argument <name2> , substitute the result for <name5> .
<name4> <name2> ( <name5> , ** <name3> )	call the object <name2> with arguments <name5> and unpacked dictionary <name3> , <name4> the result .
def <name4> ( ) :	define the function <name4> .
<name1> <name5>	use the <name1> variable <name5> .
<name1> = { }	<name1> is an empty dictionary .
<name1> <name6> <name3> <name4> :	<name1> every <name6> <name3> <name4> ,
<name6> ( <name3> , <name5> [ <name3> ] , <name1> )	call the function <name6> with 3 arguments : <name3> , value under the <name3> key of the <name5> dictionary and <name1> .
<name1> hasattr ( settings , <val4> ) :	<name1> setting has an <val4> attribute ,
<name2> <name1> <name5> <name6> . SERIALIZATION_MODULES :	<name2> every <name1> <name5> <name6> .SERIALIZATION_MODULES ,
<name6> ( <name4> , <name5> . SERIALIZATION_MODULES [ <name4> ] , <name3> )	call the function <name6> with 3 arguments : <name4> , value under the <name4> key of the <name5> .SERIALIZATION_MODULES dictionary and <name3> .
<name2> = <name6>	substitute <name6> for <name2> .
<name2> <name6>	<name2> module <name6> .
<name1> <name4> . db <name5> <name6>	<name1> <name4> .db <name5> <name6> into default name space .
<name4> <name2> . utils <name6> <name3>	<name4> <name2> .utils <name6> <name3> into default name space .
<name5> <name2> . utils . deprecation <name6> <name4>	<name5> <name2> .utils .deprecation <name6> <name4> into default name space .
<name5> <name4> ( <name1> ) :	derive the <name5> <name4> from the <name1> base <name5> .
pass	do nothing .
<name1> <name6> ( <name5> ) :	derive the <name1> <name6> from the <name5> base <name1> .
pass	do nothing .
<name5> <name2> ( <name1> ) :	derive the <name5> <name2> from the <name1> base <name5> .
pass	do nothing .
<name1> <name2> ( <name3> ) :	derive the <name1> <name2> from the <name3> base <name1> .
<name4> = <name3>	<name4> is a boolean <name3> .
def <name2> ( <name6> , <name3> , ** <name4> ) :	define the method <name2> with 3 arguments : <name6> , <name3> and unpacked dictionary <name4> .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .options .
<name5> . stream = <name4> . pop ( <val2> , six . StringIO ( ) )	remove the <val2> key from the <name4> dictionary and substitute it for <name5> .stream ,
<name1> . selected_fields = <name2> . pop ( <val6> , None )	if the key doesnt exists call the six .String function and substitute the result for <name1> .stream . remove the <val6> key from the <name2> dictionary and substitute it for <name1> .selected_fields ,
<name4> . use_natural_keys = <name5> . pop ( <val3> , False )	if the key doesnt exists substitute None for <name4> .selected_fields . remove the <val3> key from the <name5> dictionary and substitute it for <name4> .use_natural_keys ,
<name5> <name4> . use_natural_keys :	<name5> the key doesnt exists substitute boolean False for <name4> .use_natural_keys . <name5> <name4> .use_natural_keys is true ,
<name6> . warn ( <val3> , <name2> )	call the function <name6> .warn with 2 arguments : string <val3> and <name2> .
<name6> . use_natural_foreign_keys = <name4> . pop ( 'use_natural_foreign_keys'   , False ) or <name6> . use_natural_keys	remove the 'use_natural_primary_keys' key from the <name4> dictionary and substitute it for <name6> .use_natural_foreign_keys ,
<name1> . use_natural_primary_keys = <name2> . pop ( <val6>   , False )	if the key doesnt exists substitute <name1> .use_natural_keys for <name1> .use_natural_foreign_keys . remove the <val6> key from the <name2> dictionary and substitute it for <name1> .use_natural_primary_keys ,
<name6> . start_serialization ( )	if the key doesnt exists substitute boolean False for <name6> .use_natural_primary_keys . call the method <name6> .start_serialization
<name1> . first = <name4>	<name1> .first is boolean <name4> .
<name5> <name6> <name4> <name2> :	<name5> every <name6> <name4> <name2> ,
<name6> . start_object ( <name4> )	call the <name6> .start_object with an argument <name4> .
<name3> = <name5> . _meta . <name3>	substitute <name5> ._meta .concrete_model for <name3> .
<name4> <name2> <name6> <name3> . _meta . local_fields :	<name4> every <name2> <name6> <name3> ._meta .local_fields ,
<name6> <name3> . serialize :	<name6> <name3> .serialize is true ,
<name6> <name4> . rel <name1> <name3> :	<name6> <name4> .rel <name1> <name3> ,
     <name3> <name1> . selected_fields <name6> <name5> <name2> <name4> . attname <name3> <name1> . selected_fields :	<name3> <name1> .selected_fields <name6> <name5> <name2> <name4> .attname <name6> contained <name3> <name1> .selected_fields
         <name3> . handle_field ( <name6> , field )	call the method <name3> .handle_field with arguments <name6> and filed .
else :	if not ,
     <name3> <name5> . selected_fields <name6> <name4> <name1> <name2> . attname [ : - 3 ] <name3> <name5> . selected_fields :	<name3> <name5> .selected_fields <name6> <name4> <name1> last three elements of <name2> .attname are contained <name3> <name5> .selected_fields :
         <name6> . handle_fk_field ( <name2> , <name3> )	call the method <name6> .handle_fk_field with arguments <name2> and <name3> .
<name3> <name1> <name4> <name2> . _meta . many_to_many :	<name3> every <name1> <name4> <name2> ._meta .many_to_many ,
<name3> <name2> . serialize :	<name3> <name2> .serialize is true ,
<name3> <name1> . selected_fields <name2> <name5> <name4> <name6> . attname <name3> <name1> . selected_fields :	<name3> <name1> .selected_fields <name2> <name5> <name4> <name6> .attname <name2> contained <name3> <name1> .selected_fields ,
     <name5> . handle_m2m_field ( <name4> , field )	call the method <name5> .handle_m2m_field with arguments <name4> and filed .
<name5> . end_object ( <name2> )	call the method <name5> .end_object with an argument <name2> .
<name1> <name6> . first :	<name1> <name6> .first is true ,
<name4> . first = <name6>	<name4> .first is boolean <name6> .
<name6> . end_serialization ( )	call the method <name6> .end_serialization .
<name5> <name2> . getvalue ( )	call the method <name2> .getvalue , <name5> the result .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name4> <name3> ( <val6>   )	<name4> a <name3> with an argument string <val6> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
pass	do nothing .
def <name5> ( <name1> , <name4> ) :	define the method <name5> with argument <name1> and <name4> .
<name1> <name5> ( <val2>   )	<name1> a <name5> with an argument string <val2> .
def <name4> ( <name2> , <name5> ) :	define the method <name4> with argument <name2> and <name5> .
pass	do nothing .
def <name6> ( <name3> , <name4> , <name1> ) :	define the method <name6> with argument <name3> , <name4> and <name1> .
<name2> <name5> ( 'subclasses of Serializer must provide an handle_field() method'   )	<name2> a <name5> with an argument string
def <name2> ( <name1> , <name3> , <name5> ) :	define the method <name2> with argument <name1> , <name3> and <name5> .
<name6> <name2> ( 'subclasses of Serializer must provide an handle_fk_field() method'   )	<name6> a <name2> with an argument string
def <name1> ( <name4> , <name5> , <name3> ) :	define the method <name1> with argument <name4> , <name5> and <name3> .
<name5> <name1> ( <val4>   )	<name5> a <name1> with an argument string <val4> .
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name6> <name1> ( getattr ( <name5> . stream , <val3>   , None ) ) :	get <val3> attribute of the <name5> .stream object , <name6> it exists and is <name1> ,
<name3> <name6> . stream . getvalue ( )	evaluate <name6> .stream .getvalue method , <name3> the result .
<name1> <name2> ( <name5> . Iterator ) :	derive the <name1> <name2> from the <name5> .Iterator base <name1> .
def <name1> ( <name2> , <name5> , ** <name6> ) :	define the method <name1> , with 3 arguments : <name2> , <name5> and unpacked dictionary <name6> .
<name6> . <name5> = <name5>	substitute <name5> for <name6> .options .
<name5> isinstance ( <name6> , <name1> . string_types ) :	<name5> <name6> is an instance of <name1> .string_types type .
<name4> . stream = <name1> . StringIO ( <name5> )	call the function <name1> .StringIO with an argument <name5> , substitute the result for <name4> .stream .
else :	if not ,
<name2> . stream = <name3>	substitute <name3> for <name2> .stream .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name6> <name2>	<name6> <name2> .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name2> <name1> ( <val4>   )	<name2> a <name1> with an argument string <val4> .
<name2> <name3> ( <name4> ) :	derive the <name2> <name3> from the <name4> base <name2> .
def <name2> ( <name4> , obj , m2m_data = <name3> ) :	define the method <name2> , with 3 arguments : <name4> , m2m and data set <name3> .
<name4> . object = <name5>	substitute <name5> for <name4> .object .
<name1> . <name3> = <name3>	substitute <name3> for <name1> .m2m_data .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name3> <val6> % ( <name2> . object . _meta . app_label , <name2> . object . _meta . object_name , <name2> . object . pk )	<name3> a string <val6> , where '%s' are replaced with <name2> .object ._meta .app_label ,
def <name1> ( <name3> , <name5> = <name6> , <name2> = None ) :	<name3> .object ._meta .object_name and <name3> .object .pk , respectively . define the method <name1> , with 3 arguments : <name3> , <name5> set to boolean <name6> and <name2> set to boolean <name6> .
<name6> . Model . save_base ( <name5> . object , <name1> = <name1> , <name4> = <name2> )	call the <name6> .Model .save_base method with arguments <name5> .object , <name1> as <name1> and <name4> set to boolean <name2> .
<name4> <name6> . m2m_data <name2> <name3> :	<name4> <name6> .m2m .data <name2> <name3> are true ,
<name5> <name6> , <name4> in <name2> . m2m_data . items ( ) :	<name5> every <name6> and <name4> is return value of the method <name2> .m2m_data .items .
setattr ( <name5> . object , <name6> , <name2> )	set <name6> of the <name5> .object to <name2> .
<name1> . m2m_data = <name3>	<name1> .m2m_data is <name3> .
def <name4> ( <name6> , <name5> , <name1> ) :	define the function <name4> with 3 arguments : <name6> , <name5> and <name1> .
<name5> = <name4> ( ** <name1> )	<name5> is an instance of <name4> class , created with an unpacked dictionary <name1> as argument .
<name1> ( <name2> . pk <name4> <name3> <name5> hasattr ( <name6> , <val1>   ) <name5> hasattr ( <name6> . _default_manager , <val2>   ) ) :	<name1> <name2> .pk <name4> <name3> , <name5> <name6> has an <val1> attribute , <name5> <name6> ._default_manager has <name5> <val2> ,
<name6> = <name5> . <name6> ( )	call the method <name5> .natural_key , substitute the result for <name6> .
<name6> :	<name6> ,
obj . pk = <name3> . _default_manager . db_manager ( <name1> ) . <name5> ( * natural_key ) . pk	call the method <name3> ._default_manager .db_manager with an argument <name1> , on the result call the <name5> with ,
except <name4> . DoesNotExist :	an unpacked list natural_key as argument , substitute the pk filed of the resulting object for obj .pk . if <name4> .DoesNotExist exception is caught ,
pass	do nothing .
<name2> <name5>	<name2> <name5> .
<name4> <name5> <name3> <name2>	<name4> <name5> <name3> <name2> into default name space .
<name1> <name2> <name3> <name5>	<name1> <name2> <name3> <name5> into default name space .
<name5> <name4>	<name5> module <name4> .
<name1> <name5>	<name1> module <name5> .
<name6> <name4>	<name6> module <name4> .
<name4> <name3>	<name4> module <name3> .
<name5> <name2> . core . serializers . base <name1> <name6>	<name5> <name2> .core .serializers .base <name1> <name6> into default name space .
<name2> <name1> . core . serializers . python <name5> <name4> <name3> <name6>	<name2> <name1> .core .serializers .python <name5> <name4> <name3> <name6> into default name space .
<name1> <name3> . core . serializers . python <name5> <name2> <name6> <name4>	<name1> <name3> .core .serializers .python <name5> <name2> <name6> <name4> into default name space .
<name3> <name1> . utils <name6> <name4>	<name3> <name1> .utils <name6> <name4> into default name space .
<name1> <name2> . utils . timezone <name4> <name5>	<name1> <name2> .utils .timezone <name4> <name5> into default name space .
<name1> <name3> ( <name5> ) :	define the <name1> <name3> from the <name5> base <name1> .
<name1> = <name2>	<name1> is boolean <name2> .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name6> <name2> . __version__ . split ( <val1>   ) >= [ <val3>   , <val4>   , <val5>   ] :	call the method <name2> .__version__ .split with an argument <val1> , <name6> the result is respectively greater than list containing strings <val3> , <val4> and <val5> ,
<name1> . options . update ( {  <val6>   : <name3> }  )	call the method <name1> .options .update with dictionary as an argument , containing 1 element : boolean <name3> for <val6> .
<name2> . _current = <name1>	<name2> ._current is <name1> .
<name6> . json_kwargs = <name6> . options . copy ( )	call the method <name6> .options .copy , substitute the result for <name6> .json_kwargs .
<name2> . json_kwargs . pop ( <val5>   , None )	remove the entry under the <val5> key of the <name2> .json_kwargs dictionary .
<name4> . json_kwargs . pop ( <val3>   , None )	remove the entry under the <val3> key of the <name4> .json_kwargs dictionary .
<name4> <name2> . options . <name3> ( <val5>   ) :	<name3> the value under the <val5> key of <name2> .options dictionary , <name4> it is true ,
<name2> . json_kwargs [ <val3>   ] = ( <val1>   , <val4>   )	substitute a tuple with 2 elements : characters <val1> and <val4> for value under the <val3> key of the <name2> .json_kwargs dictionary .
<name4> . <name5> . <name2> ( <val3> )	<name2> a <val3> to the <name4> .stream file <name5> .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name5> <name2> . options . get ( <val6> ) :	<name5> value under the <val6> key of the <name2> .options dictionary is true ,
"\ <name1> . <name5> . <name6> ( ""\\n"" ) \"	<name6> a new line to the <name1> .stream file <name5> .
<name2> . <name6> . <name3> ( <val1> )	<name3> <val1> to the <name2> .stream file <name6> .
<name4> <name1> . options . get ( <val6> ) :	<name4> value under the <val6> key of the <name1> .options dictionary is true ,
"\ <name5> . <name2> . <name1> ( ""\\n"" ) \"	<name1> a new line to the <name5> .stream file <name2> .
def <name4> ( <name5> , <name1> ) :	define the method <name4> with arguments <name5> and <name1> .
<name5> = <name6> . options . <name4> ( <val1> )	<name4> the value under the <val1> key of the <name6> .options dictionary , substitute it for <name5> .
<name5> not <name3> . first :	<name5> <name3> .first is false ,
<name1> . <name4> . <name6> ( <val3> )	<name6> <val3> to the <name1> .stream file <name4> .
<name1> not <name4> :	<name1> <name4> is false ,
"<name2> . <name1> . <name5> ( "" "" )"	<name5> a white space to the <name2> .stream file <name1> .
<name6> <name5> :	<name6> <name5> is true ,
"\ <name1> . <name5> . <name2> ( ""\\n"" ) \"	<name2> new line to the <name1> .stream file <name5> .
<name1> . dump ( <name3> . get_dump_object ( <name6> ) , <name3> . stream , <name5> = <name2> , ** <name3> . json_kwargs )	call the <name1> .dump function with 4 arguments : return value of the method <name3> .get_dump_object called with an argument <name6> , <name3> .stream , <name5> set to <name2> and unpacked dictionary <name3> .json_kwargs .
<name6> . _current = <name1>	<name6> ._current is <name1> .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name2> super ( <name1> , self ) . <name5> ( )	call the <name5> method from the base class of the class <name1> , <name2> the result .
def <name5> ( <name1> , ** <name6> ) :	define the function <name5> with arguments <name1> and unpacked dictionary <name6> .
<name4> <name2> isinstance ( <name5> , ( <name3> , <name1> . string_types ) ) :	<name4> <name5> is <name2> an instance of <name3> or <name1> .string_types ,
<name1> = <name1> . read ( )	call the <name1> .read function , substitute the result for <name1> .
<name1> isinstance ( <name2> , <name6> ) :	<name1> <name2> is instance of <name6> type ,
<name4> = <name4> . decode ( <val5>   )	call the method <name4> .decode with an argument string <val5> , substitute the result for <name4> .
<name3> :	<name3> ,
<name6> = <name5> . loads ( <name3> )	call the function <name5> .loads with an argument <name3> , substitute the result for <name6> .
<name4> <name2> <name3> <name1> ( <name5> , ** <name6> ) :	<name4> every <name2> <name3> <name1> called with arguments <name5> and unpacked dictionary <name6> ,
<name6> <name5>	<name6> <name5> as generator return value ,
except <name4> :	if <name4> exception is caught ,
<name5>	<name5> an exception ,
except <name1> as <name3> :	if <name1> , renamed to <name3> , exception is caught ,
<name2> . reraise ( <name6> , <name6> ( <name4> ) , sys . exc_info ( ) [ 2 ] )	call the <name2> .reraise function with 3 arguments : <name6> , <name6> called with an argument <name4> ,
<name4> <name3> ( <name6> . JSONEncoder ) :	third element of the return value of the function sys .exc_info . define the <name4> <name3> from the <name6> .JSONEncoder base <name4> .
def default ( <name4> , <name3> ) :	define the method defalt with arguments <name4> and <name3> .
<name6> isinstance ( <name1> , <name2> . <name2> ) :	<name6> <name1> is an instance of <name2> .datetime object .
<name1> = <name6> . isoformat ( )	call the method <name6> .isoformat substitute the result for <name1> .
<name3> <name1> . microsecond :	<name3> <name1> .microsecond is true ,
<name6> = <name6> [ : <val2> ] + <name6> [ 26 : ]	remove 3 elements from <name6> starting at the index <val2> .
<name4> <name1> . endswith ( <val5>   ) :	<name4> <name1> ends with string <val5> ,
<name1> = <name1> [ : - <val6> ] + <val4>	cut the last <val6> elemetns from <name1> , append character <val4> to it , substitute the result for <name1> .
<name6> <name4>	<name6> <name4> .
elif isinstance ( <name1> , <name4> . date ) :	otherwise if <name1> is an instance of <name4> .date object ,
<name2> <name1> . isoformat ( )	call the method <name1> .isoformat , <name2> the result .
elif isinstance ( <name5> , <name3> . time ) :	otherwise if <name5> is an instance of <name3> .time object ,
<name4> <name6> ( <name3> ) :	call the function <name6> with an argument <name3> , <name4> it evaluates to true ,
<name1> <name3> ( <val6> )	<name1> a <name3> exception with an argument string <val6> .
<name2> = <name3> . isoformat ( )	call the method <name3> .isoformat substitute the result for <name2> .
<name2> <name6> . microsecond :	<name2> <name6> .microsecond is true ,
<name2> = <name2> [ : <val5> ]	substitute first <val5> elements of <name2> for <name2> .
<name5> <name1>	<name5> <name1> .
elif isinstance ( <name2> , <name3> . Decimal ) :	otherwise if <name2> is an instance of <name3> .Decimal object ,
<name5> str ( <name3> )	convert <name3> to an string , <name5> it .
else :	if not ,
<name2> super ( <name5> , self ) . <name3> ( <name1> )	call the method <name3> with an argument <name1> from the base class of the class <name5> , <name2> the result .
<name4> = <name3>	substitute <name3> for <name4> .
<name6> <name2> <name5> <name3>	<name6> <name2> <name5> <name3> into default name space .
<name3> <name2> . <name1> <name5> <name1>	<name3> <name2> .apps <name5> <name1> into default name space .
<name6> <name3> . conf <name1> <name2>	<name6> <name3> .conf <name1> <name2> into default name space .
<name6> <name2> . core . serializers <name3> <name4>	<name6> <name2> .core .serializers <name3> <name4> into default name space .
<name1> <name4> . db <name3> <name6> , <name5>	<name1> <name4> .db <name3> <name6> and <name5> into default name space .
<name4> <name2> . utils . encoding <name3> <name1> , <name5>	<name4> <name2> .utils .encoding <name3> <name1> and <name5> into default name space .
<name5> <name4> . utils <name1> <name3>	<name5> <name4> .utils <name1> <name3> into default name space .
<name6> <name3> ( <name1> . <name3> ) :	derive <name3> from the <name1> .Serializer <name1> <name6> .
<name5> = <name4>	<name5> is boolean <name4> .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name6> . _current = <name2>	<name6> ._current is <name2> .
<name3> . objects = [ ]	<name3> .objects is an empty list .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
pass	do nothing .
def <name5> ( <name2> , <name6> ) :	define the method <name5> with arguments <name2> and <name6> .
<name1> . _current = { }	<name1> .current is an empty dictionary .
def <name4> ( <name5> , <name2> ) :	define the method <name4> with arguments <name5> and <name2> .
<name4> . objects . append ( <name4> . get_dump_object ( <name3> ) )	call the <name4> .get_dum_object method with an argument <name3> , use the result as an argument for the <name4> .objects .append method .
<name4> . _current = <name5>	<name4> ._current is <name5> .
def <name2> ( <name6> , <name1> ) :	define the method <name2> with arguments <name6> and <name1> .
"<name3> = {   <val1> : <name4> ( <name6> . _meta ) , ""fields"" : self . _current , }"	<name3> is an dictionary with 2 initial entries : return value of the <name4> function with the argument <name6> ._meta for <val1> ,
<name1> not <name2> . use_natural_primary_keys <name5> not hasattr ( <name4> , <val3>   ) :	and <name2> ._current for 'fields' . <name1> <name2> .use_natural_primary_keys is false <name5> <name4> doesnt have a <val3> attribute .
"data [ ""pk"" ] = <name4> ( <name1> . _get_pk_val ( ) , strings_only = <name3> )"	call the <name4> function with 2 arguments : return value of the <name1> ._get_pk_val function and string_only set to boolean <name3> ,
<name1> <name5>	substitute it for value under the 'pk' key of <name5> dictionary . <name1> <name5> .
def <name5> ( <name2> , <name1> , <name4> ) :	define <name5> method with <name2> , <name1> and <name4> arguments .
<name5> = <name1> . _get_val_from_obj ( <name6> )	call the method <name1> ._get_val_from_obj with <name6> argument , substitute the result for <name5> .
<name4> <name2> ( <name5> ) :	call the function <name2> with an argument <name5> , <name4> it evaluates to true ,
<name3> . _current [ <name6> . name ] = <name5>	substitute <name5> for <name6> .name key of <name3> ._current dictionary .
else :	if not ,
<name3> . _current [ <name4> . name ] = <name4> . value_to_string ( <name6> )	call the function <name4> .value_to_string with an argument <name6> , substitute the result for value under the <name4> .name key of <name3> ._current dictionary .
def <name6> ( <name3> , <name5> , <name2> ) :	define the method <name6> with <name3> , <name5> and <name2> arguments .
<name1> <name5> . use_natural_foreign_keys <name6> hasattr ( <name2> . rel . to , <val4>   ) :	<name1> <name5> .use_natural_foreign_keys is true <name6> <name2> .rel .to has an <val4> attribute .
<name1> = getattr ( <name3> , <name2> . name )	get <name2> .name from the <name3> , substitute it for <name1> .
<name2> <name6> :	<name2> <name6> is true ,
<name4> = <name5> . natural_key ( )	call the method <name5> .natural_key , substitute the result for <name4> .
else :	if not ,
<name1> = <name4>	<name1> is <name4> .
else :	if not ,
<name6> = getattr ( <name2> , <name5> . get_attname ( ) )	get return <name6> of the <name5> .get_attname function attribute of the <name2> object , substitute it for <name6> .
<name3> . _current [ <name4> . name ] = <name2>	substitute <name2> for <name2> under the <name4> .name key of the <name3> ._current dictionary .
def <name5> ( <name4> , <name3> , <name2> ) :	define the method <name5> with <name4> , <name3> and <name2> arguments .
<name4> <name1> . rel . through . _meta . auto_created :	<name4> <name1> .rel .through ._meta .auto_created is true ,
<name2> <name1> . use_natural_foreign_keys <name6> hasattr ( <name4> . rel . to , <val3>   ) :	<name2> <name1> .use_natural_foreign_keys is true <name6> <name4> .rel .to has an <val3> attribute ,
<name2> = <name3> <name5> : <name5> . natural_key ( )	<name2> is an <name3> function with <name5> as an argument , return <name5> is the result of the method <name5> .natural_key .
else :	if not ,
<name6> = <name3> <name1> : <name5> ( <name1> . _get_pk_val ( ) , strings_only = True )	<name6> is a <name3> function with an argument <name1> , return <name1> is the result of the function <name5> called with arguments :
self . _current [ <name4> . name ] = [ <name3> ( <name2> ) <name1> <name2> <name6> getattr ( obj , <name4> . name ) . iterator ( ) ]	return value of the value ._get_pk_val method and strings_only set to boolean True . call the function <name3> with the argument <name2> , <name1> every <name2> <name6> itterator object generated from the attribute <name4> .name ,
def <name4> ( <name2> ) :	of the obj object , append the results in a list , substitute it for value under the field .name key of the <name2> ._current dictionary . define the method <name4> with an argument <name2> .
<name6> <name5> . objects	<name6> <name5> .objects .
def <name6> ( <name2> , ** <name4> ) :	define the function <name6> with arguments <name2> and unpacked dictionary <name4> .
<name1> = <name6> . pop ( <val4>   , DEFAULT_DB_ALIAS )	remove the value under the <val4> key from the <name6> dictionary , assign it to the <name1> , if the entry doesnt exists ,
<name3> = <name1> . pop ( <val5>   , False )	substitute DEFAULT_DB_ALIAS for db . remove the value under the <val5> key from the <name1> dictionary , assign it to the <name3> , if the entry doesnt exists ,
<name3> <name2> <name1> <name5> :	substitute boolean False <name3> ignore . <name3> every <name2> <name1> <name5> ,
<name1> :	<name1> ,
<name1> = <name3> ( <name4> [ <val5> ] )	call the function <name3> with an argument value under the <val5> key of the <name4> dictionary , substitute the result for <name1> .
except <name2> . DeserializationError :	if <name2> .DeserializationError exception is caught ,
<name3> <name5> :	<name3> <name5> is true ,
continue	skip this loop iteration ,
else :	if not ,
<name2>	<name2> an exception .
<name6> = { }	<name6> is an empty dictionary ,
<name4> <val1>   <name6> <name5> :	<name4> <val1> is contained <name6> <name5> ,
data [ <name3> . _meta . pk . attname ] = <name3> . _meta . pk . to_python ( <name6> . get ( <val5> , <name4> ) )	call the method <name3> ._meta .pk .to_python with one argument : value under the <val5> key of dictionary <name6> , or <name4> if previous doesnt exists ,
<name6> = { }	substitute the result for the value under the Model ._meta .pk .attname key of data dictionary . <name6> is an empty dictionary .
<name2> = <name3> . _meta . get_all_field_names ( )	call the method <name3> ._meta .get_all_field_names , substitute the result for <name2> .
<name4> ( <name3> , <name6> ) <name2> <name1> . iteritems ( <name5> [ <val4> ] ) :	<name4> every <name3> and <name6> <name2> return value of the function <name1> .iteritems called with value under the <val4> key of dictionary <name5> ,
<name5> <name2> <name6> <name3> <name4> <name1> <name5> :	<name5> <name2> is true <name6> <name3> is <name4> contained <name1> <name5> ,
continue	skip this loop iteration ,
<name4> isinstance ( <name2> , <name1> ) :	<name4> <name2> is an instance of the <name1> type ,
<name1> = <name5> ( <name1> , <name3> . get ( <val6> , settings . DEFAULT_CHARSET ) , strings_only = True )	call the <name5> function with 3 arguments : <name1> , value under the <val6> key of the <name3> dictionary or ,
<name1> = <name6> . _meta . get_field ( <name3> )	settings .DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True . call the <name6> ._meta .get_field method with an argument <name3> , substitute the result for <name1> .
<name1> <name4> . rel <name6> isinstance ( <name4> . rel , <name2> . ManyToManyRel ) :	<name1> <name4> .rel is true , <name6> <name4> .rel is an instance of <name2> .ManyToManyRel ,
<name1> hasattr ( <name4> . rel . to . _default_manager , <val5>   ) :	<name1> <name4> .rel .to ._default_manager has an attribute <val5> ,
def <name4> ( <name2> ) :	define the function <name4> with an argument <name2> .
     <name2> hasattr ( <name3> , <val1>   ) <name5> <name4> isinstance ( <name3> , <name6> . text_type ) :	<name2> <name3> has an attribute <val1> <name5> <name3> is <name4> an instance of <name6> .text_type ,
         <name3> <name6> . rel . to . _default_manager . db_manager ( <name4> ) . <name1> ( * <name5> ) . pk	call the method <name6> .rel .to ._default_manager .db_manager with an argument <name4> on the <name3> <name5> call the method <name1> ,
else :	with unpacked list value as an argument , return the pk field of the result . if not ,
         return smart_text ( <name6> . rel . <name2> . _meta . pk . to_python ( <name4> ) )	call the method <name6> .rel .to ._meta .pk .to_python with an argument <name4> , use the result as an argument for the call <name2> the ,
else :	smart_text function , return the result . if not ,
<name2> = <name3> <name6> : <name5> ( field . rel . to . _meta . pk . to_python ( <name6> ) )	<name2> is a <name3> function with an argument <name6> , return value is the result of the function <name5> called with an argument :
<name4> [ <name1> . name ] = [ <name2> ( <name5> ) <name6> <name5> <name3> <name4> ]	return value of the method <name1> .rel .to ._meta .pk .to_python called with an argument v . call the <name2> function with <name5> as argument , <name6> every <name5> <name3> <name4> , substitute the value under the <name1> .name key of the <name4> dictionary .
elif <name4> . rel <name3> isinstance ( <name4> . rel , <name6> . ManyToOneRel ) :	otherwise if <name4> .rel is true <name3> <name4> .rel is an instance of the <name6> .ManyToOneRel object ,
<name3> <name1> <name5> <name6> <name2> :	<name3> <name1> <name5> <name6> <name2> ,
<name6> hasattr ( <name4> . rel . to . _default_manager , <val5>   ) :	<name6> <name4> .rel .to ._default_manager has an <val5> attribute ,
     <name5> hasattr ( <name6> , <val1>   ) <name2> <name3> isinstance ( <name6> , <name4> . text_type ) :	<name5> <name6> has an attribute <val1> <name2> is <name3> an instance of <name4> .text_type object ,
         obj = <name1> . rel . to . _default_manager . db_manager ( <name3> ) . <name6> ( * field_value )	call the method <name1> .rel .to ._default_manager .db_manager with <name3> as argument , call the <name6> method on the result with ,
<name1> = getattr ( <name4> , <name2> . rel . field_name )	unpacked list field_value as an argument , substitute the result for <name4> . get <name2> .rel .field_name attribute of the object <name4> , substitute it for <name1> .
<name2> <name6> . rel . to . _meta . pk . rel :	<name2> <name6> .rel .to ._meta .pk .rel is true ,
             <name6> = <name6> . pk	substitute <name6> .pk for <name6> .
else :	if not ,
         value = <name5> . rel . to . _meta . get_field ( <name5> . rel . field_name ) . <name6> ( field_value )	all the method <name5> .rel .to ._meta .get_field with <name5> .rel .field_name as argument , call the <name6> method on the result with ,
<name6> [ <name4> . attname ] = <name1>	unpacked list field_value as an argument , substitute the result for <name1> . substitute <name1> for <name1> under the <name4> .attname key of the <name6> dictionary .
else :	if not ,
     data [ <name6> . attname ] = <name6> . rel . to . _meta . get_field ( <name6> . rel . field_name ) . <name2> ( field_value )	all the method <name6> .rel .to ._meta .get_field with <name6> .rel .field_name as argument , call the <name2> method on the result with ,
else :	unpacked list field_value as an argument , substitute the result for value of under the field .attname key of the data dictionary . if not ,
<name6> [ <name3> . attname ] = <name5>	value under the <name3> .attname key of the <name6> dictionary is <name5> .
else :	if not ,
<name4> [ <name5> . name ] = <name5> . to_python ( <name1> )	call the <name5> .to_python method with <name1> , substitute the result for <name5> .name key of the <name4> dictionary .
<name2> = <name6> . build_instance ( <name3> , <name4> , <name1> )	call the method <name6> .build_instance with arguments <name3> , <name4> and <name1> , substitute the result for <name2> .
<name4> <name2> . DeserializedObject ( <name5> , <name6> )	call the function <name2> .DeserializedObject with <name5> and <name6> as arguments , <name4> the result as the generator return value .
def <name4> ( <name2> ) :	define the function <name4> with an argument <name2> .
<name1> :	<name1> ,
return <name6> . get_model ( <name3> )	call the method <name6> .get_model with an argument <name3> .
except ( <name6> , <name5> ) :	if <name6> or <name5> exceptions are caught ,
<name1> <name6>	<name1> module <name6> .
<name5> <name6>	<name5> module <name6> .
<name4> <name2>	<name4> module <name2> .
<name2> <name3> <name5> <name6>	<name2> <name3> <name5> <name6> into default name space .
<name1> <name2> . db <name5> <name4>	<name1> <name2> .db <name5> <name4> into default name space .
<name1> <name5> . core . serializers . base <name4> <name3>	<name1> <name5> .core .serializers .base <name4> <name3> into default name space .
<name5> <name2> . core . serializers . python <name6> <name3> <name4> <name1>	<name5> <name2> .core .serializers .python <name6> <name3> <name4> <name1> into default name space .
<name6> <name1> . core . serializers . python <name3> <name5> <name2> <name4>	<name6> <name1> .core .serializers .python <name3> <name5> <name2> <name4> into default name space .
<name2> <name6> . utils <name3> <name1>	<name2> <name6> .utils <name3> <name1> into default name space .
<name6> :	<name6> ,
<name4> <name5> <name2> <name1> <name6> <name3>	<name4> <name5> <name2> <name1> <name6> <name3> into default name space .
from <name3> <name1> <name5> <name4> <name6>	<name3> <name1> <name5> <name4> <name6> into default name space .
except <name4> :	if <name4> exception is caught ,
<name3> <name6> <name1> <name5> , <name4>	<name3> <name6> <name1> <name5> , <name4> into default name space .
<name3> <name5> ( <name4> ) :	derive the <name3> <name5> from the <name4> base <name3> .
def <name4> ( <name5> , <name3> ) :	define the method <name4> with arguments <name5> and <name3> .
<name1> <name4> . represent_scalar ( <val6>   , str ( <name5> ) )	call the method <name4> .represent_scalar with 2 arguments : string <val6> and <name5> converted into a string , <name1> the result .
<name4> . add_representer ( <name1> . Decimal , <name4> . represent_decimal )	call the method <name4> .add_representer with arguments <name1> .Decimal and <name4> .represent_decimal .
<name1> <name5> ( <name4> ) :	derive the <name1> <name5> from the <name4> base <name1> .
<name4> = <name5>	<name4> is a boolean <name5> .
def <name4> ( <name1> , <name6> , <name2> ) :	define the method <name4> with arguments <name1> , <name6> and <name2> .
<name1> isinstance ( <name6> , <name5> . TimeField ) <name2> getattr ( <name4> , <name6> . name ) <name3> <name1> <name6> :	<name1> <name6> <name3> an instance of <name5> .TimeField <name2> filed .name attribute of <name4> <name3> <name1> <name6> ,
<name5> . _current [ <name3> . name ] = str ( getattr ( <name4> , <name3> . name ) )	get <name3> .name attribute of <name4> , convert it to a string , substitute it for the value under the filed .name key of <name5> ._current dictionary .
else :	if not ,
super ( <name4> , self ) . handle_field ( <name2> , <name1> )	call the handle_filed method of the base class of the <name4> class , with arguments <name2> and <name1> .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name1> . dump ( <name6> . objects , <name6> . stream , <name2> = <name4> , ** <name6> . options )	call the function <name1> .dump with 4 arguments : <name6> .objects , <name6> .stream , <name2> = <name4> and unpacked dictionary <name6> .options .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name6> super ( <name2> , self ) . <name1> ( )	call the <name1> method of the base class of the <name2> class , <name6> the result .
def <name5> ( <name1> , ** <name3> ) :	define the function <name5> with 2 arguments : <name1> and unpacked dictionary <name3> .
<name2> isinstance ( <name3> , <name4> ) :	<name2> <name3> is an instance of <name4> ,
<name5> = <name5> . decode ( <val2>   )	call the method <name5> .decode with string <val2> as argument , substitute the result for <name5> .
<name1> isinstance ( <name5> , <name6> . string_types ) :	<name1> <name5> is an instance of the <name6> .string_types ,
<name1> = <name2> ( <name3> )	call the function <name2> with an argument <name3> , substitute the result for <name1> .
else :	if not ,
<name1> = <name3>	substitute <name3> for <name1> .
<name1> :	<name1> ,
<name3> <name4> <name6> <name1> ( <name2> . load ( stream , Loader = SafeLoader ) , ** options ) :	<name3> every <name4> <name6> return value of the <name1> created with 2 arguments : return value of the function <name2> .load ,
<name2> <name3>	with 2 arguments : stream and Loader set to SafeLoader , and unpacked dictionary options , <name2> one element of the itterable <name3> .
except <name4> :	if exception <name4> is caught ,
<name4>	<name4> an exception .
except <name1> as <name6> :	if <name1> , renamed to <name6> , exception is caught ,
<name1> . reraise ( <name2> , <name2> ( <name5> ) , sys . exc_info ( ) [ 2 ] )	call the function <name1> .reraise with 3 arguments : <name2> , return value of the <name2> called with an argument <name5> ,
<name6> <name4> <name1> <name5>	<name6> <name4> <name1> <name5> into default name space .
<name5> <name1> . <name3> <name4> <name3>	<name5> <name1> .apps <name4> <name3> into default name space .
<name4> <name2> . conf <name6> <name1>	<name4> <name2> .conf <name6> <name1> into default name space .
<name5> <name2> . core . serializers <name1> <name3>	<name5> <name2> .core .serializers <name1> <name3> into default name space .
<name5> <name6> . db <name1> <name3> , <name4>	<name5> <name6> .db <name1> <name3> and <name4> into default name space .
<name3> <name2> . utils . xmlutils <name6> <name5>	<name3> <name2> .utils .xmlutils <name6> <name5> into default name space .
<name4> <name1> . utils . encoding <name6> <name5>	<name4> <name1> .utils .encoding <name6> <name5> into default name space .
<name4> <name3> . dom <name5> <name6>	<name4> <name3> .dom <name5> <name6> into default name space .
<name4> <name5> . sax <name2> <name6>	<name4> <name5> .sax <name2> <name6> into default name space .
<name6> <name3> . sax . expatreader <name4> <name5> <name1> <name2>	<name6> <name3> .sax .expatreader <name4> <name5> <name1> <name2> into default name space .
<name5> <name4> ( <name3> . <name4> ) :	derive the <name5> <name4> from the <name3> .Serializer <name3> <name5> .
def <name2> ( <name3> , <name4> ) :	define the method <name2> with argument <name3> and <name4> .
<name6> self . <name2> . get ( 'indent'   , <name4> ) <name5> <name1> <name4> :	<name6> value under the 'indend' key of the <name2> dictionary exists and <name5> <name1> <name4> ,
\ <name4> . xml . ignorableWhitespace ( '\\n'   + ' '   * <name4> . <name6> . <name5> ( <val1>   , None ) * <name2> ) \	<name5> the value under the <val1> key of the <name6> dictionary , multiply it with <name2> , create a string containing number of whitespaces equal to the previous result , append it to the string containing newline character , use the result as the argument for the call to the <name4> .xml .ignorableWhitespace method .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name3> . xml = <name1> ( <name3> . stream , <name3> . options . get ( <val4> , settings . DEFAULT_CHARSET ) )	<name3> .xml is a instance of <name1> class created with 2 arguments : <name3> .stream and value under the <val4> key of the
<name2> . xml . startDocument ( )	options dictionary , if the key doesnt exists use settings .DEFAULT_CHARSET instead . call the <name2> .xml .startDocument method .
<name1> . xml . startElement ( <val2> , {  <val4> : <val5> }  )	call the method <name1> .xml .startElement with 2 arguments , string <val2> and a dictionary containing 1 element : <val5> for <val4> .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name5> . indent ( <val6> )	call the <name5> .indent method with integer <val6> as an argument .
<name5> . xml . endElement ( <val6> )	call the method <name5> .xml .endElement with an argument string <val6> .
<name2> . xml . endDocument ( )	call the <name2> .xml .endDocument method .
def <name4> ( <name3> , <name2> ) :	define the method <name4> with arguments <name3> and <name2> .
<name3> <name2> hasattr ( <name6> , <val4> ) :	<name3> <val4> is <name2> an attribute of <name6> ,
<name3> <name2> . SerializationError ( <val6> % type ( obj ) )	<name3> an <name2> .SerializationError exception with argument string <val6> ,
<name2> . indent ( <val5> )	replace '%s' with type of the obj object . call the method <name2> .indent with argument integer <val5> .
<name3> = {  <val1> : <name5> ( <name2> . _meta ) }	<name3> is a dictionary containing 1 entry : return value of the <name5> function with argument <name2> ._meta for <val1> .
<name5> not <name4> . use_natural_primary_keys or not hasattr ( <name6> , <val2>   ) :	<name5> <name4> .use_natural_primary_keys is false and <name6> doesnt have <val2> argument .
<name5> = <name2> . _get_pk_val ( )	substitute return value of the method <name2> ._get_pk_val for <name5> .
<name2> <name4> <name5> <name3> <name1> :	<name2> <name4> <name5> <name3> <name1> ,
<name6> [ <val1>   ] = <name5> ( <name4> )	substitute the return value of the <name5> function with an argument <name4> for the value under the <val1> key of the <name6> dictionary .
<name2> . xml . startElement ( <val3> , <name1> )	call the method <name2> .xml .startElement with arguments string <val3> and <name1> .
def <name1> ( <name6> , <name4> ) :	define the method <name1> with arguments <name6> and <name4> .
<name5> . indent ( <val3> )	call the method <name5> .indent with argument integer <val3> .
<name3> . xml . endElement ( <val6> )	call the method <name3> .xml .endElement with an argument string <val6> .
def <name6> ( <name3> , <name1> , <name5> ) :	define the method <name6> with arguments <name3> , <name1> and <name5> .
<name4> . indent ( <val6> )	call the method <name4> .indent with argument integer <val6> .
"<name5> . xml . startElement ( <val1> , {   <val4> : <name3> . name , ""type"" : <name3> . get_internal_type ( ) }  )"	call the method <name5> .xml .startElement with 2 arguments : string <val1> and a dictionary containing 2 entries : <name3> .name for <val4> ,
<name6> getattr ( <name2> , <name5> . name ) <name3> <name4> <name1> :	and return value of the <name5> .get_internal_type method for 'type' . <name6> <name5> .name attribute of <name2> <name3> <name4> <name1> ,
<name4> . xml . characters ( <name5> . value_to_string ( <name3> ) )	call the method <name5> .value_to_string with an argument <name3> , use the result as an argument for the call the method <name4> .xml .characters .
else :	if not ,
<name5> . xml . addQuickElement ( <val2> )	call the method <name5> .xml .addQuickElement with an argument string <val2> .
<name5> . xml . endElement ( <val3> )	call the method <name5> .xml .endElement with an argument string <val3>
def <name6> ( <name2> , <name1> , <name4> ) :	define the method <name6> with arguments <name2> , <name1> and <name4> .
<name6> . _start_relational_field ( <name4> )	call the method <name6> ._start_relational_field with an argument <name4> .
<name3> = getattr ( <name5> , <name1> . get_attname ( ) )	evaluate the <name1> .get_attname , use the result as the name of the <name5> attribute to get , substitute it for <name3> .
<name1> <name4> <name5> <name6> <name3> :	<name1> <name4> <name5> <name6> <name3> ,
<name5> <name4> . use_natural_foreign_keys <name1> hasattr ( <name2> . rel . to , <val6>   ) :	<name5> <name4> .use_natural_foreign_keys is true <name1> <name2> .rel .to has an attribute <val6> ,
<name4> = getattr ( <name3> , <name2> . name )	get <name2> .name attribute of the <name3> , substitute it for <name4> .
<name3> = <name3> . natural_key ( )	call the method <name3> .natural_key , substitute the result for <name3> .
<name5> <name6> <name4> <name1> :	<name5> every <name6> <name4> <name1> ,
<name3> . xml . startElement ( <val6> , { }  )	call the method <name3> .xml .startElement with arguments string <val6> and an empty dictionary .
<name4> . xml . characters ( <name2> ( <name5> ) )	call the function <name2> with argument <name5> , use the result as an argument for the call to the <name4> .xml .characters method .
<name4> . xml . endElement ( <val3> )	call the method <name4> .xml .endElement with an argument string <val3>
else :	if not ,
<name3> . xml . characters ( <name2> ( <name4> ) )	call the function <name2> with argument <name4> , use the result as an argument for the call to the <name3> .xml .characters method .
else :	if not ,
<name1> . xml . addQuickElement ( <val6> )	call the method <name1> .xml .addQuickElement with an argument string <val6> .
<name2> . xml . endElement ( <val6> )	call the method <name2> .xml .endElement with an argument string <val6> .
def <name3> ( <name6> , <name1> , <name4> ) :	define the method <name3> with arguments <name6> , <name1> and <name4> .
<name4> <name2> . rel . through . _meta . auto_created :	<name4> <name2> .rel .through ._meta .auto_created is true ,
<name5> . _start_relational_field ( <name1> )	call the method <name5> ._start_relational_field with the argument <name1> .
<name2> <name6> . use_natural_foreign_keys <name3> hasattr ( <name5> . rel . to , <val1>   ) :	<name2> <name6> .use_natural_foreign_keys is true <name3> <name5> .rel .to has an attribute <val1> ,
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> ,
<name6> = <name4> . natural_key ( )	call the <name4> .natural_key method , substitute the result for <name6> .
<name3> . xml . startElement ( <val5> , { }  )	call the method <name3> .xml .startElement with argument string <val5> and an empty dictionary .
<name5> <name6> <name1> <name3> :	<name5> every <name6> <name1> <name3> ,
     <name1> . xml . startElement ( <val4> , { }  )	call the method <name1> .xml .startElement with argument string <val4> and an empty dictionary .
<name1> . xml . characters ( <name3> ( <name4> ) )	call the function <name3> with argument <name4> , use the result as an argument for the call to the <name1> .xml .characters method .
<name2> . xml . endElement ( <val4> )	call the method <name2> .xml .startElement with an argument string <val4> .
<name2> . xml . endElement ( <val4> )	call the method <name2> .xml .startElement with an argument string <val4> .
else :	if not ,
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> ,
<name1> . xml . addQuickElement ( <val2> , attrs = {   'pk'   : smart_text ( value . _get_pk_val ( ) ) }  )	call the <name1> .xml .addQuickElement method with 2 arguments : string <val2> and attr dictionary containing 1 entry :
<name6> <name3> <name2> getattr ( <name1> , <name5> . name ) . <name4> ( ) :	return value of the function smart_text with return value of the method value ._get_pk_val as an argument <name6> 'pk' . <name6> every <name3> <name2> <name4> generated from the <name5> .name attribute of the <name1> object .
<name4> ( <name5> )	call the function <name4> with an argument <name5> .
<name3> . xml . endElement ( <val4> )	call the method <name3> .xml .endElement with an argument string <val4> .
def <name1> ( <name3> , <name6> ) :	define the method <name1> with arguments <name3> and <name6> .
<name6> . indent ( <val1> )	call the method <name6> .indent with argument integer <val1> .
"<name5> . xml . startElement ( <val6> , {   <val2> : <name1> . name , ""rel"" : <name1> . rel . __class__ . __name__ , ""to"" : smart_text ( <name1> . rel . to . _meta ) , }  )"	call the method <name5> .xml .startElement with 2 arguments : string <val6> and dictionary containing 3 entries : <name1> .name for <val2> ,
<name4> <name3> ( <name6> . <name3> ) :	field .rel .__class__ .__name__ for 'rel' and return value of the function smart_text with an argument field .rel .to ._meta for 'to' . derive the <name4> <name3> from the <name6> .Deserializer <name6> <name4> .
def <name5> ( <name3> , <name2> , ** <name4> ) :	define the method <name5> with 3 arguments : <name3> , <name2> and unpacked dictionary <name4> .
super ( <name5> , self ) . <name2> ( <name6> , ** <name1> )	call the method <name2> from the base class of the <name5> class with arguments <name6> and unpacked dictionary <name1> .
<name6> . event_stream = <name2> . parse ( <name6> . stream , <name6> . _make_parser ( ) )	call the method <name2> .parse with arguments : <name6> .stream and return value of the method <name6> ._make_parser ,
<name1> . db = <name3> . pop ( <val6>   , DEFAULT_DB_ALIAS )	substitute the result for <name1> .event_stream . remove the <val6> key from the <name3> dictionary , substitute the return value for <name1> .db , if the key doesnt exists substitute
<name2> . ignore = <name3> . pop ( <val1>   , False )	DEFAULT_DB_ALIAS for <name2> .db . remove the <val1> key from the <name3> dictionary , substitute the return value for <name2> .db ,
def <name1> ( <name3> ) :	if the key doesnt exists substitute boolean False for <name3> .ignore . define the method <name1> with an argument <name3> .
<name2> <name6> ( )	<name2> the instance of <name6> class .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name4> <name5> , <name2> <name3> <name6> . event_stream :	<name4> every <name5> and <name2> <name3> <name6> .event_stream ,
<name3> <name1> == <val5> <name6> <name2> . nodeName == <val4> :	<name3> <name1> equals a string <val5> <name6> <name2> .nodeName equals a string <val4> ,
<name1> . event_stream . expandNode ( <name2> )	call the method <name1> .event_stream .expandNode with an argument <name2> .
<name1> <name5> . _handle_object ( <name3> )	call the method <name5> ._handle_object with an argument <name3> , <name1> the result .
<name2> <name3>	<name2> an <name3> exception .
def <name4> ( <name6> , <name3> ) :	define the method <name4> with arguments <name6> and <name3> .
Model = <name3> . _get_model_from_node ( <name1> , <val2> )	call the method <name3> ._get_model_from_node with arguments <name1> and string <val2> .
<name2> = { }	<name2> is an empty dictionary .
<name2> <name4> . hasAttribute ( <val1>   ) :	call the method <name4> .hasAttribute with string <val1> as an argument , <name2> it evaluates to true ,
<name6> [ <name2> . _meta . pk . attname ] = <name2> . _meta . pk . to_python ( <name1> . getAttribute ( <val5>   ) )	call the method <name1> .getAttribute with an argument string <val5> , use the result as the argument for the call to the method , <name2> ._meta .pk .to_python with , substitute the result for value under the <name2> ._meta .pk .attname key of the <name6> dictionary .
<name3> = { }	<name3> is an empty dictionary .
<name3> = <name1> . _meta . get_all_field_names ( )	call the method <name1> ._meta .get_all_field_names , substitute the result for <name3> .
<name3> <name6> <name5> <name4> . getElementsByTagName ( <val1> ) :	<name3> every <name6> <name5> return value of the method <name4> .getElementsByTagName with an argument string <val1> .
<name3> = <name6> . getAttribute ( <val1> )	call the method <name6> .getAttribute with an argument string <val1> , substitute the result for <name3> .
<name1> not <name2> :	<name1> <name2> is false ,
<name4> <name3> . DeserializationError ( <val2> )	<name4> an <name3> .DeserializationError exception with string <val2> as argument .
<name1> <name5> . ignore <name4> <name2> <name3> <name6> <name1> :	<name1> <name5> .ignore is true <name4> <name2> is <name3> contained <name6> <name1> ,
continue	skip this loop iteration .
<name5> = <name6> . _meta . get_field ( <name3> )	call the method <name6> ._meta .get_field with an argument <name3> , substitute it for <name5> .
<name6> <name4> . rel <name5> isinstance ( <name4> . rel , <name1> . ManyToManyRel ) :	<name6> <name4> .rel is true <name5> <name4> .rel is an instance of <name1> .ManyToManyRel ,
<name2> [ <name4> . name ] = <name6> . _handle_m2m_field_node ( <name3> , <name4> )	call the method <name6> ._handle_m2m_field_node with an argument <name3> and <name4> , substitute the result for value under the <name4> .name key of <name2> dictionary .
elif <name1> . rel <name5> isinstance ( <name1> . rel , <name2> . ManyToOneRel ) :	otherwise , if <name1> .rel is true <name5> <name1> .rel is an instance of <name2> .ManyToOneRel ,
data [ <name3> . attname ] = <name5> . _handle_fk_field_node ( <name2> , <name3> )	call the method <name5> ._handle_fk_field_node with <name2> and <name3> as arguments , substitute the result for the value under the
else :	field .attname of the data dictionary . if not ,
<name1> <name5> . getElementsByTagName ( <val6>   ) :	call the method <name5> .getElementsByTagName with an argument string <val6> , <name1> it evaluates to true ,
<name1> = <name6>	<name1> is <name6> .
else :	if not ,
value = field . to_python ( <name4> ( <name6> ) . <name3> ( ) )	call the function <name4> with argument <name6> , on the result call the method <name3> , use the result as an argument for the
<name5> [ <name3> . name ] = <name2>	call to the <name3> .to_python method , substitute the result for <name2> . substitute <name2> for <name2> under the <name3> .name key of the <name5> dictionary .
<name1> = <name4> . build_instance ( <name5> , <name2> , <name3> . db )	call the method <name4> .build_instance with arguments <name5> , <name2> and <name3> .db , substitute the result for <name1> .
<name3> <name6> . DeserializedObject ( <name1> , <name2> )	call the method <name6> .DeserializedObject with arguments <name1> and <name2> , <name3> the result .
def <name3> ( <name4> , <name5> , <name6> ) :	define the method <name3> with arguments <name4> , <name5> and <name6> .
<name1> <name6> . getElementsByTagName ( <val4>   ) :	call the method <name6> .getElementsByTagName with an argument string <val4> , <name1> it evaluates to true ,
<name6> <name5>	<name6> <name5> .
else :	if not ,
<name4> hasattr ( <name6> . rel . to . _default_manager , <val1>   ) :	<name4> <name6> .rel .to ._default_manager has an atttribute <val1> ,
<name5> = <name4> . getElementsByTagName ( <val2>   )	call the method <name4> .getElementsByTagName with the argument string <val2> , substitute the result for <name5> .
<name2> <name6> :	<name2> <name6> is true ,
   <name2> = [ <name1> ( <name3> ) . <name5> ( ) <name6> <name3> <name4> <name2> ]	call the function <name1> with argument <name3> , on the result call the method <name5> , <name6> every <name3> <name4> <name2> , append the results to <name2> list .
obj = <name2> . rel . to . _default_manager . db_manager ( <name4> . db ) . <name5> ( * field_value )	call the method <name2> .rel .to ._default_manager .db_manager with an argument <name4> .db , on the result call the method <name5> ,
<name1> = getattr ( <name6> , <name5> . rel . field_name )	with unpacked list field_value as an argument , substitute the result for <name6> . get the <name5> .rel .field_name from the <name6> , substitute it for <name1> .
<name1> <name5> . rel . to . _meta . pk . rel :	<name1> <name5> .rel .to ._meta .pk .rel is true ,
     <name6> = <name6> . pk	substitute <name6> .pk for <name6> .
else :	if not ,
   <name2> = <name5> ( <name4> ) . <name3> ( )	call the function <name5> with an argument <name4> , call the <name3> method on the result , substitute the result for <name2> .
obj_pk = <name5> . rel . to . _meta . get_field ( <name5> . rel . field_name ) . <name1> ( field_value )	call the <name5> .rel .to ._meta .get_field method with an <name5> .rel .field_name argument , on the result call the method <name1> ,
<name6> <name3>	with field_value as an argument , substitute the result for <name3> . <name6> <name3> .
else :	if not ,
<name4> = <name6> ( <name1> ) . <name5> ( )	call the function <name6> with an argument <name1> , call the <name5> method on the result , substitute the result for <name4> .
return <name3> . rel . to . _meta . get_field ( <name3> . rel . field_name ) . <name1> ( field_value )	call the <name3> .rel .to ._meta .get_field method with an <name3> .rel .field_name argument , on the result call the method <name1> ,
def <name1> ( <name2> , <name3> , <name6> ) :	with field_value as an argument , return the result . define the method <name1> with arguments <name2> , <name3> and <name6> .
<name1> hasattr ( <name2> . rel . to . _default_manager , <val3>   ) :	<name1> <name2> .rel .to ._default_manager has an attribute <val3> ,
def <name6> ( <name2> ) :	define the function <name6> with an argument <name2> ,
<name4> = <name1> . getElementsByTagName ( <val5>   )	call the method <name1> .getElementsByTagName with string <val5> as argument , substitute result for <name4> .
<name1> <name6> :	<name1> <name6> is true ,
   <name5> = [ <name3> ( <name1> ) . <name6> ( ) <name4> <name1> <name2> <name5> ]	call the function <name3> with argument <name1> , on the result call the method <name6> , <name4> every <name1> <name2> <name5> , append the results to <name5> list .
obj_pk = <name1> . rel . to . _default_manager . db_manager ( <name3> . db ) . <name5> ( * field_value ) . pk	call the method <name1> .rel .to ._default_manager .db_manager with an argument <name3> .db , on the result call the method <name5> ,
else :	with unpacked list field_value as an argument , substitute the field pk of the result for obj_pk . if not ,
   <name2> = <name4> . rel . <name3> . _meta . pk . to_python ( <name1> . getAttribute ( <val5>   ) )	call the method <name1> .getAttribute with string <val5> as argument , use the result as an argument for the call <name3> the <name4> .rel .to ._meta .pk .to_python method , substitute the result for <name2> .
<name2> <name5>	<name2> <name5> .
else :	if not ,
<name2> = <name6> <name3> : <name1> . rel . to . _meta . pk . to_python ( <name3> . getAttribute ( 'pk'   ) )	<name2> is an <name6> function with an argument <name3> , return value is the return value of the method <name1> .rel .to ._meta .pk .to_python ,
"<name1> [ <name5> ( <name2> ) <name6> <name2> <name3> <name4> . getElementsByTagName ( ""object"" ) ]"	called with n .getAttribute ( 'pk' ) method . call the <name5> function with an argument <name2> , <name6> every <name2> <name3> <name1> value of the method <name4> .getElementsByTagName ,
def <name3> ( <name6> , <name5> , <name4> ) :	with an argument string 'object' , return the result . define the method <name3> with arguments <name6> , <name5> and <name4> .
<name3> = <name6> . getAttribute ( <name2> )	call the method <name6> .getAttribute with an argument <name2> , substitute the result for <name3> .
<name1> not <name3> :	<name1> <name3> is false ,
<name5> <name3> . DeserializationError ( <val1> % ( node . nodeName , attr ) )	<name5> an <name3> .DeserializationError exception with an argument string <val1> ,
<name5> :	where '%s' is replaced with node .nodeName and attr . <name5> ,
<name2> <name3> . get_model ( <name6> )	call the method <name3> .get_model with an argument <name6> , <name2> the result .
except ( <name3> , <name5> ) :	if <name3> or <name5> exceptions are caught ,
def <name5> ( <name4> ) :	where '%s' is replaced with <name4> .nodeName and attr . define the function <name5> with an argument <name4> .
<name5> = [ ]	<name5> is an empty list .
<name3> <name1> <name4> <name5> . childNodes :	<name3> every <name1> <name4> <name5> .childNodes ,
<name3> <name2> . nodeType == <name2> . TEXT_NODE <name6> <name2> . nodeType == <name2> . CDATA_SECTION_NODE :	<name3> <name2> .nodeType equals to <name2> .TEXT_NODE <name6> <name2> .nodeType equals to <name2> .CDATA_SECTION_NODE ,
<name2> . <name1> ( <name4> . data )	<name1> <name4> .data to the <name2> list .
elif <name2> . nodeType == <name2> . ELEMENT_NODE :	otherwise if <name2> .nodeType equals to <name2> .ELEMENT_NODE ,
<name4> . extend ( <name5> ( <name6> ) )	call the function <name5> with an argument <name6> , use the result as an argument for the call to the method <name4> .extend .
else :	if not ,
pass	do nothing .
"return """" . <name1> ( <name4> )"	<name1> <name4> elements into a string .
<name3> <name5> ( <name1> ) :	derive the <name3> <name5> from the <name1> base <name3> .
def <name4> ( <name6> , * <name2> , ** <name5> ) :	define the method <name4> with arguments <name6> , unpacked list <name2> and unpacked dictionary <name5> .
<name5> . __init__ ( <name6> , * <name4> , ** <name1> )	call the method <name5> .__init__ with arguments <name6> , unpacked list <name4> and unpacked dictionary <name1> .
<name5> . setFeature ( <name6> . feature_external_ges , <name1> )	call the method <name5> .setFeature with 2 arguments : <name6> .feature_external_ges and boolean <name1> .
<name3> . setFeature ( <name5> . feature_external_pes , <name2> )	call the method <name3> .setFeature with 2 arguments : <name5> .feature_external_pes and boolean <name2> .
def <name6> ( <name5> , <name1> , <name3> , <name2> , <name4> ) :	define the method <name6> with an arguments <name5> , <name1> , <name3> , <name2> and <name4> .
<name1> <name3> ( <name4> , <name5> , <name6> )	<name1> an <name3> exception with arguments <name4> , <name5> and <name6> .
def <name3> ( <name4> , <name6> , <name5> , <name1> , <name2> , <name3> , <name4> , <name6> ) :	define the method <name3> with arguments <name4> , <name6> , <name5> , <name1> , <name2> , <name3> , <name4> and <name6> .
<name1> <name4> ( <name5> , <name3> , <name2> , <name6> , <name1> , <name4> )	<name1> an <name4> exception with arguments <name5> , <name3> , <name2> , <name6> , <name1> and <name4> .
def <name3> ( <name5> , <name2> , <name6> , <name4> , <name1> , <name3> ) :	define the method <name3> with arguments <name5> , <name2> , <name6> , <name4> , <name1> and <name3> .
<name5> <name6> ( <name4> , <name2> , <name1> , <name3> , <name5> , <name6> )	<name5> an <name6> exception with arguments <name4> , <name2> , <name1> , <name3> , <name5> and <name6> .
def <name6> ( <name2> , <name5> , <name1> , <name3> , <name4> ) :	define the method <name6> with arguments <name2> , <name5> , <name1> , <name3> and <name4> .
<name3> <name6> ( <name5> , <name2> , <name4> , <name1> )	<name3> an <name6> exception with arguments <name5> , <name2> , <name4> and <name1> .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name6> . reset ( self )	call the method <name6> .reset with an argumen sefl .
<name5> = <name3> . _parser	substitute <name3> ._parser for <name5> .
<name2> . StartDoctypeDeclHandler = <name1> . start_doctype_decl	substitute <name1> .start_doctype_decl for <name2> .StartDoctypeDeclHandler .
<name6> . EntityDeclHandler = <name5> . entity_decl	substitute <name5> .entity_decl for <name6> .EntityDeclHandler .
<name2> . UnparsedEntityDeclHandler = <name1> . unparsed_entity_decl	substitute <name1> .unparsed_entity_decl for <name2> .UnparsedEntityDeclHandler .
<name4> . ExternalEntityRefHandler = <name1> . external_entity_ref_handler	substitute <name1> .external_entity_ref_handler for <name4> .ExternalEntityRefHandler .
<name4> <name5> ( <name3> ) :	derive the <name4> <name5> from the <name3> base <name4> .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name3> str ( <name6> )	convert <name6> into a string and <name3> it .
<name2> <name1> ( <name6> ) :	derive the <name2> <name1> from the <name6> base <name2> .
def <name4> ( <name3> , <name5> , <name2> , <name6> ) :	define the method <name4> with arguments <name3> , <name5> , <name2> and <name6> .
super ( <name2> , self ) . <name6> ( )	call the method <name6> from the base class of the <name2> class .
<name6> . <name5> = <name5>	substitute <name5> for <name6> .name .
<name4> . <name5> = <name5>	substitute <name5> for <name4> .sysid .
<name6> . <name1> = <name1>	substitute <name1> for <name6> .pubid .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name5> = <val3>	<name5> is an string <val3> .
return <name6> . format ( <name4> . name , <name4> . sysid , <name4> . pubid )	call the method <name6> .format with an arguments <name4> .name , <name4> .sysid and <name4> .pubid .
<name1> <name4> ( <name3> ) :	derive the <name1> <name4> from the <name3> base <name1> .
def <name2> ( <name5> , <name6> , <name4> , <name3> , <name1> , <name2> , <name5> ) :	define the method <name2> with arguments <name5> , <name6> , <name4> , <name3> , <name1> , <name2> and <name5> .
super ( <name3> , self ) . <name5> ( )	call the method <name5> from the base class of the <name3> class .
<name5> . <name6> = <name6>	substitute <name6> for <name5> .name .
<name5> . <name4> = <name4>	substitute <name4> for <name5> .value .
<name2> . <name3> = <name3>	substitute <name3> for <name2> .base .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .sysid .
<name1> . <name6> = <name6>	substitute <name6> for <name1> .pubid .
<name2> . <name3> = <name3>	substitute <name3> for <name2> .notation_name .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name1> = <val5>	<name1> is an string <val5> .
return <name6> . format ( <name4> . name , <name4> . sysid , <name4> . pubid )	call the method <name6> .format with an arguments <name4> .name , <name4> .sysid and <name4> .pubid .
<name4> <name5> ( <name2> ) :	derive the <name4> <name5> from the <name2> base <name4> .
def <name3> ( <name2> , <name1> , <name4> , <name5> , <name6> ) :	define the method <name3> with arguments <name2> , <name1> , <name4> , <name5> and <name6> .
super ( <name2> , self ) . <name3> ( )	call the method <name3> from the base class of the <name2> class .
<name5> . <name3> = <name3>	substitute <name3> for <name5> .context .
<name2> . <name6> = <name6>	substitute <name6> for <name2> .base .
<name2> . <name6> = <name6>	substitute <name6> for <name2> .sysid .
<name6> . <name5> = <name5>	substitute <name5> for <name6> .pubid .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name3> = <val6>	<name3> is an string <val6> .
return <name5> . format ( <name4> . sysid , <name4> . pubid )	call the method <name5> .format with an arguments <name4> .sysid and <name4> .pubid .
<name3> <name5> <name6> <name4>	<name3> <name5> <name6> <name4> into default name space .
<name1> <name3>	<name1> module <name3> .
<name5> <name4>	<name5> module <name4> .
<name1> <name2> <name5> <name6>	<name1> <name2> <name5> <name6> into default name space .
<name6> <name4> . util <name2> <name3>	<name6> <name4> .util <name2> <name3>
<name5> <name4> . core . exceptions <name3> <name2>	<name5> <name4> .core .exceptions <name3> <name2> into default name space .
<name1> <name3> . core . management . color <name6> <name5>	<name1> <name3> .core .management .color <name6> <name5> into default name space .
<name6> <name1> . core . wsgi <name3> <name4>	<name6> <name1> .core .wsgi <name3> <name4> into default name space .
<name3> <name2> . utils <name4> <name6>	<name3> <name2> .utils <name4> <name6> into default name space .
<name3> <name1> . utils . module_loading <name2> <name4>	<name3> <name1> .utils .module_loading <name2> <name4> into default name space .
<name2> <name4> . utils . six . moves <name5> <name1>	<name2> <name4> .utils .six .moves <name5> <name1> into default name space .
<name3> = ( <val4>   , <val5>   )	<name3> is a tuple containing 2 initial elements : strigs <val4> and <val5> .
def <name5> ( ) :	define the funtion <name5> .
<name4> <name6> . conf <name2> <name5>	<name4> <name6> .conf <name2> <name5> into default name space .
<name4> = getattr ( <name1> , <val5>   )	get <val5> attribute from the <name1> , substitute it for <name4> .
<name1> <name4> <name6> <name5> :	<name1> <name4> <name6> <name5> ,
<name5> <name4> ( )	call the function <name4> , <name5> the result .
<name3> :	<name3> ,
<name1> <name4> ( <name3> )	call the <name4> with <name3> as an argument , <name1> the result .
except <name1> as <name2> :	if <name1> , rename it to <name2> , exception is caught ,
<name6> . reraise ( <name4> , <name4> ( <name3> ) , <name2> . exc_info ( ) [ 2 ] )	call the function <name6> .reraise with 3 arguments : <name4> , <name4> ( <name3> ) and third element of return value of the function <name2> .exc_info .
<name4> <name6> ( <name5> . <name6> , <name1> ) :	derive the <name4> <name6> from <name5> .WSGIServer and <name1> base classes .
<name5> = <val6>	<name5> is integer <val6> .
def <name2> ( <name3> , * <name6> , ** <name1> ) :	define the <name2> method with 3 arguments : <name3> , unpacked list <name6> and unpacked dictionary ** <name1> .
<name1> <name4> . <name3> ( <val2>   , False ) :	<name3> value under the <val2> key of the <name4> dictionary , <name1> it is true ,
<name3> . address_family = <name6> . AF_INET6	substitute <name6> .AF_INET6 for <name3> .address_family .
super ( <name2> , self ) . <name3> ( * <name6> , ** <name1> )	call the <name3> method from the base class of the <name2> class , with 2 arguments : unpacked list <name6> and unpacked dictionary <name1> .
def <name5> ( <name2> ) :	define the function <name5> with an argument <name2> .
super ( <name5> , self ) . <name6> ( )	call the <name6> method from the base class of the <name5> class .
<name6> . setup_environ ( )	call the <name6> .setup_environ method .
<name2> <name1> ( <name6> . <name1> , <name3> ) :	derive the <name2> <name1> from <name6> .WSGIRequestHandler and <name3> base classes .
def <name4> ( <name3> , * <name6> , ** <name2> ) :	define the <name4> method with 3 arguments : <name3> , unpacked list <name6> and unpacked dictionary ** <name2> .
<name1> . style = <name6> ( )	call the <name6> method , substitute the result for <name1> .style .
super ( <name1> , self ) . <name2> ( * <name3> , ** <name4> )	call the <name2> method from the base class of the <name1> class , with 2 arguments : unpacked list <name3> and unpacked dictionary <name4> .
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
<name6> <name3> . client_address [ 0 ]	<name6> the first element of <name3> .client_address .
def log_message ( <name1> , format , * args ) :	define the function server_bind with an argument <name1> .
\ <name6> = <val1> % ( <name3> . log_date_time_string ( ) , format % <name4> ) \	\ <name6> is a string <val1> , where '%s' are replaced with return value of the method <name3> .log_date_time_string and formated <name4> . \
<name2> <name6> [ 1 ] [ 0 ] == <val1>   :	<name2> first element of the second row of <name6> equals a string <val1> ,
<name6> = <name5> . style . HTTP_SUCCESS ( <name6> )	call the <name5> .style .HTTP_SUCCESS with an argument <name6> , substitute it for <name6> .
elif <name1> [ 1 ] [ 0 ] == <val6>   :	otherwise if first element of second row of <name1> equals a string <val6> ,
<name2> = <name1> . style . HTTP_INFO ( <name2> )	call the <name1> .style .HTTP_INFO with an argument <name2> , substitute it for <name2> .
elif <name4> [ 1 ] == <val6>   :	otherwise if second element of <name4> equals a string <val6> ,
<name4> = <name5> . style . HTTP_NOT_MODIFIED ( <name4> )	call the <name5> .style .HTTP_NOT_MODIFIED with an argument <name4> , substitute it for <name4> .
elif <name5> [ 1 ] [ 0 ] == <val6>   :	otherwise if first element of second row of <name5> equals a string <val6> ,
<name6> = <name2> . style . HTTP_REDIRECT ( <name6> )	call the <name2> .style .HTTP_REDIRECT with an argument <name6> , substitute it for <name6> .
elif <name6> [ 1 ] == <val4>   :	otherwise if second element of <name6> equals a string <val4> ,
<name2> = <name6> . style . HTTP_NOT_FOUND ( <name2> )	call the <name6> .style .HTTP_NOT_FOUND with an argument <name2> , substitute it for <name2> .
elif <name6> [ 1 ] [ 0 ] == <val2>   :	otherwise if first element of second row of <name6> equals a string <val2> ,
<name4> = <name6> . style . HTTP_BAD_REQUEST ( <name4> )	call the <name6> .style .HTTP_BAD_REQUEST with an argument <name4> , substitute it for <name4> .
else :	if not ,
<name2> = <name3> . style . HTTP_SERVER_ERROR ( <name2> )	call the <name3> .style .HTTP_SERVER_ERROR with an argument <name2> , substitute it for <name2> .
<name5> . stderr . write ( <name6> )	call the <name5> .stderr .write function with an argument <name6> .
def <name6> ( <name3> , <name5> , <name4> , <name2> = <name1> , <name6> = <name1> ) :	define the function <name6> with 5 arguments : <name3> , <name5> , <name4> , <name2> set to boolean <name1> and <name6> set to boolean <name1> .
<name4> = ( <name1> , <name3> )	<name4> is a tuple containing 2 initial elements : <name1> and <name3> .
<name1> <name3> :	<name1> <name3> is true ,
httpd_cls = <name6> ( str ( <val3>   ) , ( <name4> . ThreadingMixIn , <name1> ) , { }  )	call the function <name6> with 3 arguments : string <val3> , tuple containing 2 elements : <name4> .ThreadingMixIn and <name1> ,
else :	and an empty dictionary , substitute the result for httpd_cls . if not ,
<name1> = <name2>	substitute <name2> for <name1> .
<name6> = <name4> ( <name5> , <name1> , <name3> = <name3> )	call the <name4> function with 4 arguments : <name5> , <name1> and <name3> set to <name3> , substitute the result for <name6> .
<name1> <name6> :	<name1> <name6> is true ,
<name1> . daemon_threads = <name4>	<name1> .daemon_threads is boolean <name4> .
<name5> . set_app ( <name4> )	call the method <name5> .set_app with an argument <name4> .
<name5> . serve_forever ( )	call the method <name5> .serve_forever .
<name3> <name5>	<name3> module <name5> .
<name4> <name2>	<name4> module <name2> .
<name1> <name5>	<name1> module <name5> .
<name2> = <val5>	<name2> is a string <val5> .
<name4> = [ <val2> ]	<name4> is a list containing a string <val2> .
<name6> = {   <val5>   : <val1>   , <val4>   : <name2> , <val3>   : <name2> , 'socket'   : <name2> , 'method'   : 'fork'   , 'daemonize'   : <name2> , 'workdir'   : '/'   , 'pidfile'   : <name2> , 'maxspare'   : 5 , 'minspare'   : 2 , 'maxchildren'   : 50 , 'maxrequests'   : 0 , 'debug'   : <name2> , 'outlog'   : <name2> , 'errlog'   : <name2> , 'umask'   : <name2> , }	<name6> is a dictionary containing 16 initial entries : <val1> for <val5> , <name2> for <val4> , <name2> for <val3> ,
def <name3> ( <name4> = <name6> ) :	define the method <name3> with an argument <name4> set to <name6> .
<name3> ( <name4> )	<name3> <name4> to the standard output .
<name1> <name4> :	<name1> <name4> is true ,
<name2> ( <name3> )	<name2> <name3> to the standard output .
<name1> <name4>	<name1> boolean <name4> .
def <name3> ( <name5> = [ ] , ** <name1> ) :	define the function <name3> with 2 arguments : <name5> set to an empty list and unpacked dictionary <name1> .
<name6> = <name4> . copy ( )	call the method <name4> .copy , substitute the result for <name6> .
<name5> . update ( <name3> )	call the <name5> .update method with an argument <name3> .
<name2> <name6> <name1> <name4> :	<name2> every <name6> <name1> <name4> ,
<name5> <val4> <name3> <name1> :	<name5> character <val4> is contained <name3> <name1> ,
<name6> , <name5> = <name2> . split ( <val3>   , <val4> )	call the <name2> .split method with arguments : character <val3> and integer <val4> , store the result in <name6> and <name5> , respectively .
else :	if not ,
<name5> , <name6> = <name4> , <name1>	substitute <name4> for <name5> and boolean <name1> for <name6> .
<name4> [ <name6> . <name2> ( ) ] = <name5>	substitute <name5> for value under the <name6> converted to <name2> case key of <name4> dictionary .
<name5> <val1> <name4> <name6> :	<name5> string <val1> is contained <name4> <name6> ,
<name1> <name2> ( )	call the <name2> function , <name1> the result .
<name3> :	<name3> ,
<name1> <name4>	<name1> <name4>
except <name6> as <name4> :	if <name6> , renamed to <name4> , exception is caught ,
\ <name4> . stderr . write ( <val1> % <name6> ) \	\ call the method <name4> .stderr .write with an argument string <val1> , where '%s' is replaced by <name6> . \
\ <name5> . stderr . write ( <val1> ) \	\ call the method <name5> .stderr .write with an argument string <val1> . \
\ <name5> . stderr . write ( <val6> ) \	\ call the method <name5> .stderr .write with an argument string <val6> . \
\ <name2> . stderr . write ( <val5> ) \	\ call the method <name2> .stderr .write with an argument string <val5> . \
\ <name2> . stderr . write ( <val3> ) \	\ call the method <name2> .stderr .write with an argument string <val3> . \
<name1> <name3>	<name1> boolean <name3> .
<name2> = <val4>   + <name1> [ <val3>   ]	append value under the <val3> key of the <name1> dictionary to the string <val4> , substitute it for <name2> .
<name6> <name4> [ <val3>   ] in ( 'prefork'   , <val2>   ) :	<name6> value under the <val3> key of the <name4> dictionary equals to string 'perfork' or <val2> ,
"<name3> = {   'maxSpare'   : int ( <name4> [ <val5> ] ) , 'minSpare'   : int ( <name4> [ ""minspare"" ] ) , 'maxChildren'   : int ( <name4> [ ""maxchildren"" ] ) , 'maxRequests'   : int ( <name4> [ ""maxrequests"" ] ) , }"	<name3> is a dictionary with 4 initial entries : value under the key <val5> of <name4> dictionary converted to an integer ,
<name1> += <val3>	for 'maxSpare' , value under the key 'minspare' of options dictionary converted to an integer for 'minSpare' , value under the key 'maxchildren' of options dictionary converted to an integer , for 'maxChildren' , and value under the key 'maxrequests' of options dictionary converted to an integer , for 'maxRequests' . append string <val3> to <name1> .
elif options [ <val6>   ] in ( <val1>   , <val4>   ) :	otherwise if value under the <val6> key of optins dictionary equals to string <val1> or <val4> ,
"<name1> = {   'maxSpare'   : int ( <name6> [ <val2> ] ) , 'minSpare'   : int ( <name6> [ ""minspare"" ] ) , 'maxThreads'   : int ( <name6> [ ""maxchildren"" ] ) , }"	<name1> is a dictionary with 4 initial entries : value under the key <val2> of <name6> dictionary converted to an integer ,
else :	for 'maxSpare' , value under the key 'minspare' of options dictionary converted to an integer for 'minSpare' , and value under the key 'maxchildren' of options dictionary converted to an integer , for 'maxThreads' . if not ,
"<name4> <name1> ( ""ERROR: Implementation must be one of prefork or "" ""thread."" )"	"call the function <name1> with an argument string ""ERROR: Implementation must be one of prefork or thread."" , <name4> the result ."
<name6> [ <val4>   ] = <name1> [ <val4>   ] <name5> <name2> <name3>	if value under the <val4> key of <name1> dictionary <name5> <name2> <name3> , substitute it for value under the <val4> key of <name6> dictionary .
<name1> :	<name1> ,
<name6> = <name1> . import_module ( '.%s'   % <name2> , <val4>   )	call the function <name1> .import_module with 2 arguments : <name2> converted to string and appended to '.' character , and string <val4> , substitute the result for <name6> .
<name2> = <name5> . <name2>	substitute <name5> .WSGIServer for <name2> .
except <name1> :	if <name1> exception is caught ,
<name5> ( <val2> + <name3> )	append <name3> to string <val2> , <name5> it to the standard output .
<name3> <name2>	<name3> boolean <name2> .
<name1> <name3> . core . servers . basehttp <name6> <name5>	<name1> <name3> .core .servers .basehttp <name6> <name5> into default name space .
<name5> <name6> [ <val3> ] <name4> <name6> [ <val2> ] <name4> not <name6> [ <val1> ] :	<name5> value under the <val1> key of the <name6> dictionary is false <name4> values under the <val3> <name4> <val2> keys of the <name6> dictionary are true ,
"<name3> [ <val4>   ] = ( options [ <val2> ] , int ( options [ ""port"" ] ) )"	set the value under the <val4> key of the <name3> dictionary to a tuple containing 2 elements : value under the <val2> key ,
elif <name3> [ <val4> ] <name6> not <name3> [ <val2> ] <name6> not <name3> [ <val1> ] :	of the <name3> dictionary <name6> value under the <val1> key of the <name3> dictionary converted into an integer . if value under the <val4> key of the <name3> dictionary is true <name6> values under the <val2> <name6> <val1> keys of the <name3> dictionary are false ,
<name5> [ <val6>   ] = <name3> [ <val2> ]	substitute the value under the <val2> key of <name3> dictionary for value under the <val6> key of <name5> dictionary .
elif not <name6> [ <val4> ] <name2> not <name6> [ <val3> ] <name2> not <name6> [ <val1> ] :	if values under the <val4> , <val3> <name2> <val1> keys of the <name6> dictionary are false ,
<name3> [ <val6>   ] = <name1>	set value under the <val6> key of <name3> to <name1> .
else :	if not ,
<name6> <name4> ( <val2> )	call the <name4> function with an argument string <val2> , <name6> it .
<name4> <name6> [ <val3> ] <name2> <name1> :	<name4> value under the <val3> of <name6> dictionary <name2> <name1> ,
<name4> = ( <name5> [ <val2>   ] <name1> <name6> <name3> )	if the value under the <val2> key of the <name5> dictionary <name1> <name6> <name3> , set <name4> to boolean True , if <name6> , set it to boolean False .
else :	if not ,
<name4> <name6> [ <val3> ] . lower ( ) in ( <val2>   , <val1>   , <val5>   ) :	convert the value under the <val3> key of <name6> dictionary to lowercase , <name4> it equals to string <val2> , <val1> or <val5> ,
<name4> = <name5>	<name4> is boolean <name5> .
elif <name4> [ <val2> ] . lower ( ) in ( <val3>   , <val5>   , <val6>   ) :	convert the value under the <val2> key of <name4> dictionary to lowercase , if it equals to string <val3> , <val5> or <val6> ,
<name6> = <name2>	<name6> is boolean <name2> .
else :	if not ,
"<name4> <name3> ( ""ERROR: Invalid option for daemonize "" ""parameter."" )"	"call the <name3> function with an argument string ""ERROR: Invalid option for daemonize parameter."" , <name4> it ."
<name3> = { }	<name3> is an empty dictionary .
<name6> <name5> [ <val2>   ] :	<name6> value under the <val2> key of <name5> dictionary is true ,
<name3> [ <val1>   ] = <name5> [ <val2>   ]	substitute the value under the <val2> key of <name5> dictionary for value under the <val1> key of <name3> dictionary .
<name1> <name3> [ <val6>   ] :	<name1> value under the <val6> key of <name3> dictionary is true ,
<name2> [ <val4>   ] = <name5> [ <val1>   ]	substitute the value under the <val1> key of <name5> dictionary for value under the <val4> key of <name2> dictionary .
<name2> <name6> [ <val5>   ] :	<name2> value under the <val5> key of <name6> dictionary is true ,
<name6> [ <val5>   ] = int ( <name1> [ <val5>   ] , <val2> )	convert the value under the <val5> key of <name1> dictionary into an integer of base <val2> , substitute it for value under the <val5> key of <name6> dictionary .
<name1> <name2> :	<name1> <name2> is true ,
<name6> <name1> . utils . daemonize <name2> <name4>	<name6> <name1> .utils .daemonize <name2> <name4> into default name space .
<name4> ( <name6> = <name1> [ <val2> ] , ** daemon_kwargs )	call the function <name4> with 2 arguments : <name6> set to the value under the <val2> key of <name1> dictionary and ,
<name6> <name5> [ <val1> ] :	unpacked dictionary daemon_kwargs . <name6> value under the <val1> of <name5> dictionary exists ,
<name5> <name3> ( <name1> [ <val6> ] , <val4> ) <name2> <name5> :	<name3> the file whose name is stored in the value under the <val6> key of <name1> dictionary and mode <val4> , <name5> the file descriptor <name2> <name5> ,
"\ <name1> . write ( ""%d\\n"" % <name5> . getpid ( ) ) \"	"\ call the method <name1> .write with an argument string '%d\\n"", with ' % d '  replaced by <name5> .getpid function return value . \"
<name4> ( <name5> ( ) , ** <name1> ) . <name3> ( )	create the object <name4> with 2 arguments : <name5> return value and unpacked dictionary <name1> , call the method <name3> on it .
<name2> <name5> == <val3>   :	<name2> <name5> equals a string <val3> .
<name1> ( <name3> . argv [ 1 : ] )	call the function <name1> with an argument all the elements , except the first from the <name3> .argv list .
<name2> <name1> . dispatch <name3> <name4>	<name2> <name1> .dispatch <name3> <name4> into default name space .
<name2> = <name5> ( )	<name2> is a instance of a <name5> class .
<name3> = <name6> ( )	<name3> is a instance of a <name6> class .
<name4> = <name1> ( <name3> = [ <val5> ] )	<name4> is a instance of a <name1> class , created with an argument <name3> as the list containing string <val5> .
<name1> <name4> <name6> <name3>	<name1> <name4> <name6> <name3> into default name space .
<name6> <name5>	<name6> module <name5> .
<name4> <name6>	<name4> module <name6> .
<name3> <name6>	<name3> module <name6> .
<name3> <name6>	<name3> module <name6> .
<name2> <name1> . conf <name4> <name3>	<name2> <name1> .conf <name4> <name3> into default name space .
<name6> <name2> . utils <name5> <name1>	<name6> <name2> .utils <name5> <name1> into default name space .
<name1> <name4> . utils . crypto <name5> <name6> , <name2>	<name1> <name4> .utils .crypto <name5> <name6> and <name2> into default name space .
<name2> <name3> . utils . encoding <name4> <name5> , <name1> , <name6>	<name2> <name3> .utils .encoding <name4> <name5> , <name1> and <name6> into default name space .
<name5> <name6> . utils . module_loading <name2> <name1>	<name5> <name6> .utils .module_loading <name2> <name1> into default name space .
<name4> <name1> ( <name3> ) :	derive the <name4> <name1> from the <name3> base <name4> .
pass	do nothing .
<name3> <name1> ( <name4> ) :	derive the <name3> <name1> from the <name4> base <name3> .
pass	do nothing .
def <name6> ( <name2> ) :	define the function <name6> with an argument <name2> .
<name3> <name6> . urlsafe_b64encode ( <name5> ) . <name2> ( b <val4>   )	call the method <name6> .urlsafe_b64encode with an argument <name5> , on the result call the <name2> function with <val4> as the argument , <name3> the result .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name1> = b <val4>   * ( - len ( <name5> ) % <val2> )	calculate negative length of <name5> , by modulus integer <val2> , use the result as the number of <val4> characters to be stored in <name1> .
return <name6> . urlsafe_b64decode ( <name2> + <name5> )	call the method <name6> .urlsafe_b64decode with sum of <name2> and <name5> as argument .
def base64_hmac ( <name5> , <name6> , <name2> ) :	define the function b64_hmac with arguments <name5> , <name6> and <name2> .
return b64_encode ( <name2> ( <name1> , <name6> , <name5> ) . <name3> ( ) )	call the <name2> with 3 arguments : <name1> , <name6> and <name5> , call the <name3> method on the result ,
def <name2> ( <name5> = <val4>   ) :	use the result as an argument for the call to the b64_encode function , return the result . define the function <name2> with an argument <name5> set to string <val4> .
<name4> = <name5> ( <name2> . SIGNING_BACKEND )	call the <name5> function with an argument <name2> .SIGNING_BACKEND , substitute the result for <name4> .
<name6> = <name5> ( <name1> . SECRET_KEY )	call the <name5> function with an argument <name1> .SECRET_KEY , substitute the result for <name6> .
<name5> Signer ( b <val2>   + <name3> , <name1> = <name1> )	create the Singer class with 2 arguments : <name3> appended to string <val2> and <name1> set to <name1> , <name5> it .
<name4> <name2> ( <name5> ) :	derive the <name4> <name2> from the <name5> base <name4> .
def <name2> ( <name4> , <name3> ) :	define the method <name2> with arguments <name4> and <name3> .
return <name5> . dumps ( <name2> , <name6> = ( <val3>   , <val4>   ) ) . encode ( 'latin-1'   )	call the <name5> .dumps function with 2 arguments : <name2> and <name6> set to tuple containing <val3> and <val4> characters ,
def <name2> ( <name1> , <name5> ) :	call the encode method on the result with string 'latin-1' as an argument , return the result . define the method <name2> with arguments <name1> and <name5> .
<name5> <name2> . loads ( <name1> . decode ( <val3>   ) )	call the <name1> .decode method with a string <val3> as an argument , use the result as an argument for the call to the <name2> .load function , <name5> the result .
def <name1> ( <name6> , <name2> = <name4> , <name3> = <val5>   , serializer = JSONSerializer , compress = False ) :	define the function <name1> with 5 arguments : <name6> , <name2> set to <name4> , <name3> set to string <val5> ,
<name6> = <name3> ( ) . <name2> ( <name1> )	call the <name3> function , call the <name2> method on the result with an argument <name1> , substitute result for <name6> .
<name4> = <name5>	<name4> is boolean <name5> .
<name6> <name5> :	<name6> <name5> is true ,
<name1> = <name4> . compress ( <name2> )	call the function <name4> .compress with an argument <name2> , substitute the result for <name1> .
<name4> len ( <name6> ) <  ( len ( <name5> ) - <val3> ) :	<name4> length of <name6> is lesser than length of <name5> decremented by <val3> ,
<name4> = <name1>	substitute <name1> for <name4> .
<name6> = <name2>	<name6> is boolean <name2> .
<name4> = <name6> ( <name1> )	call the <name6> function with an argument <name1> , substitute the result for <name4> .
<name6> <name2> :	<name6> <name2> is true ,
<name4> = b <val1>   + <name4>	prefix the <name4> with a <val1> character .
<name3> <name2> ( <name4> , <name1> = <name1> ) . <name5> ( base64d )	instantiate the <name2> object with arguments <name4> and <name1> set to <name1> , call its method <name5> with an argument base64 , <name3> it .
def <name5> ( <name6> , <name1> = <name3> , <name2> = <val4>   , serializer = JSONSerializer , max_age = <name3> ) :	define the function <name5> with 5 arguments : <name6> , <name1> set to <name3> , <name2> set to string <val4> ,
base64d = force_bytes ( <name5> ( <name3> , <name1> = <name1> ) . <name2> ( s , max_age = max_age ) )	instantiate <name5> object with arguments <name3> and <name1> set to <name1> , call its method <name2> with arguments :
<name2> = <name6>	s and max_age set to max_age , use it as an argument for the force_bytes function , substitute the result for base64d . <name2> is boolean <name6> .
<name2> <name1> [ : 1 ] == b <val3>   :	<name2> first element of <name1> equals to a <val3> character ,
<name2> = <name2> [ 1 : ]	substitute first element of <name2> for <name2> .
<name1> = <name2>	<name1> is boolean <name2> .
<name1> = <name5> ( base64d )	call the method <name5> with an argument base64 , substitute the result for <name1> .
<name2> <name1> :	<name2> <name1> is true ,
<name4> = <name6> . decompress ( <name4> )	call the function <name6> .decompress with an argument <name4> , substitute the result for <name4> .
<name1> <name4> ( ) . <name6> ( <name2> )	call the <name4> function , call the <name6> method on the <name1> value with an argument <name2> , <name1> the result .
<name4> <name1> ( <name2> ) :	derive the <name4> <name1> from the <name2> base <name4> .
def <name6> ( <name1> , <name3> = <name2> , <name5> = <val4>   , <name6> = <name2> ) :	define the method <name6> with 4 arguments : <name1> , <name3> set to <name2> , <name5> set to <val4> and <name6> set to <name2> .
<name4> . <name1> = <name6> ( <name1> )	call the function <name6> with an argument <name1> , substitute the result for <name4> .sep .
<name4> . <name1> = <name1> or <name5> . SECRET_KEY	if <name1> exists , substitute it for <name4> .key , if not substitute <name5> .SECRET_KEY for <name1> .
self . <name3> = <name5> ( <name3> or <val2>   % ( self . __class__ . __module__ , self . __class__ . __name__ ) )	call the <name5> function with an argument : <name3> , if it exists , if not with a string <val2> , with '%s' replaced by ,
def <name3> ( <name2> , <name4> ) :	<name2> .__class__ .__module__ and <name2> .__class__ .__name__ , respectively , substitute the result for <name2> .salt . define the method <name3> with arguments <name2> and <name4> .
<name3> = <name4> ( <name5> . salt + <val1>   , <name6> , <name5> . key )	call the function <name4> with 3 arguments : string <val1> appended to <name5> .salt , <name6> and <name5> .key , substitute the result for <name3> .
<name3> <name2> ( <name6> )	call the function <name2> with an argument <name6> , <name3> the result .
def <name1> ( <name3> , <name4> ) :	define the method <name1> with arguments <name3> and <name4> .
<name3> = <name1> ( <name3> )	call the function <name1> with an argument <name3> , substitute the result for <name3> .
<name3> str ( '%s%s%s'   ) % ( <name6> , <name4> . sep , <name4> . signature ( <name6> ) )	convert <name6> , <name4> .sep and <name3> <name6> of a method <name4> .signature called with an argument <name6> , concatenate them together , <name3> the result .
def <name3> ( <name6> , <name1> ) :	define the method <name3> with arguments <name6> and <name1> .
<name4> = force_str ( <name4> )	call the function <name4> with an argument value , substitute the result for <name4> .
<name2> <name6> . sep <name3> <name1> <name4> :	<name2> <name6> .sep is <name3> contained <name1> <name4> ,
<name5> <name1> ( <val2>   % <name3> . sep )	<name5> an <name1> exception with an argument string <val2> , where '%s' is replaced by <name3> .sep .
<name4> , <name5> = <name6> . rsplit ( <name2> . sep , <val3> )	call the <name6> .rsplit method with arguments <name2> .sep and integer <val3> , substitute the result for <name4> and <name5> , respectively .
<name1> <name4> ( <name3> , <name6> . signature ( <name5> ) ) :	call the function <name4> with 2 arguments : <name3> and return <name5> of the <name6> .signature method with an argument <name5> , <name1> it evaluates to true ,
<name3> <name5> ( <name2> )	call the <name5> function with an argument <name2> , <name3> the result .
<name3> <name2> ( <val5>   % <name4> )	<name3> an <name2> exception with an argument string <val5> , where '%s' is replaced by <name4> .
<name5> <name1> ( <name3> ) :	derive the <name5> <name1> from the <name3> base <name5> .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name1> <name6> . base62 . encode ( int ( <name4> . <name4> ( ) ) )	call the method <name6> .base62 .encode with result of the <name4> .time function converted to an integer , as an argument , <name1> the result .
def <name5> ( <name3> , <name4> ) :	define the method <name5> with arguments <name3> and <name4> .
<name4> = <name5> ( <name4> )	call the <name5> function with an argument <name4> , substitute the result for <name4> .
<name4> = str ( '%s%s%s'   ) % ( <name4> , <name2> . sep , <name2> . <name6> ( ) )	convert <name4> , <name2> .sep and return <name4> of the function <name6> , concatenate them , substitute the result for <name4> .
<name3> super ( <name1> , self ) . <name2> ( <name6> )	call the <name2> method from the base class of the <name1> class with an argument <name6> , <name3> the result
def <name4> ( <name3> , <name6> , <name2> = <name1> ) :	define the method <name4> with arguments <name3> , <name6> and <name2> set to <name1> .
<name6> = super ( <name5> , self ) . <name1> ( <name2> )	call the <name1> method from the base class of the <name5> class with an argument <name2> , substitute the <name6> for <name6> .
<name3> , <name4> = <name6> . rsplit ( <name5> . sep , <val1> )	call the <name6> .rsplit method with arguments <name5> .sep and integer <val1> , substitute the <name6> for <name3> and <name4> , respectively .
<name2> = <name6> . base62 . decode ( <name2> )	call the <name6> .base62 .decode method with an argument <name2> , substitute the result for <name2> .
<name2> <name5> <name3> <name1> <name6> :	<name2> <name5> <name3> <name1> <name6> ,
<name2> = <name3> . <name3> ( ) - <name1>	subtract <name1> from the return value of the function <name3> .time , substitute the result for <name2> .
<name1> <name3> >  <name2> :	<name1> <name3> is greater than <name2> ,
<name2> <name1> ( <val3>   % ( <name6> , <name5> ) )	<name2> an <name1> exception with an argument string <val3> , where '%s' is replaced by <name6> and <name5> , respectively .
<name4> <name1>	<name4> <name1> .
<name6> <name5> <name2> <name1>	<name6> <name5> <name2> <name1> into default name space .
<name6> <name2>	<name6> module <name2> .
<name6> <name4> <name2> <name1>	<name6> <name4> <name2> <name1> into default name space .
<name5> <name1>	<name5> module <name1> .
<name1> <name2> <name6> <name3>	<name1> <name2> <name6> <name3> into default name space .
<name6> <name5>	<name6> module <name5> .
<name1> <name4> . http <name5> <name3>	<name1> <name4> .http <name5> <name3> into default name space .
<name1> <name2> . core . exceptions <name4> <name5> , <name6>	<name1> <name2> .core .exceptions <name4> <name5> and <name6> into default name space .
<name6> <name2> . utils . datastructures <name1> <name3>	<name6> <name2> .utils .datastructures <name1> <name3> into default name space .
<name2> <name1> . utils . deprecation <name3> <name5>	<name2> <name1> .utils .deprecation <name3> <name5> into default name space .
<name2> <name6> . utils . encoding <name5> <name3> , <name1> , <name4>	<name2> <name6> .utils .encoding <name5> <name3> , <name1> and <name4> into default name space .
<name5> <name2> . utils . functional <name4> <name6>	<name5> <name2> .utils .functional <name4> <name6> into default name space .
<name1> <name3> . utils . http <name6> <name5>	<name1> <name3> .utils .http <name6> <name5> into default name space .
<name3> <name2> . utils . module_loading <name6> <name1>	<name3> <name2> .utils .module_loading <name6> <name1> into default name space .
<name6> <name1> . utils . regex_helper <name2> <name5>	<name6> <name1> .utils .regex_helper <name2> <name5> into default name space .
<name2> <name5> . utils <name1> <name3> , <name6>	<name2> <name5> .utils <name1> <name3> and <name6> into default name space .
<name1> <name2> . utils . translation <name5> <name6>	<name1> <name2> .utils .translation <name5> <name6> into default name space .
<name4> = <name2> ( )	call the function <name2> , substitute the result for <name4> .
_urlconfs = <name5> ( )	call the function <name5> , substitute the result _urlconf .
<name6> <name5> ( <name1> ) :	derive the <name6> <name5> with <name1> as base <name6> .
def <name6> ( <name3> , <name4> , <name1> , <name2> , <name5> = <name6> , <name3> = <name6> , <name4> = <name6> ) :	define the <name6> method with 7 arguments : <name3> , <name4> , <name1> , <name2> , <name5> set to <name6> , <name3> set to <name6> and <name4> set to <name6> .
<name2> . <name6> = <name6>	substitute <name6> for <name2> .func .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .args .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .kwargs .
<name3> . <name1> = <name1>	substitute <name1> for <name3> .url_name .
<name1> . <name4> = <name4>	substitute <name4> for <name1> .app_name .
<name3> <name5> :	<name3> <name5> is true ,
<name5> . <name3> = [ <name1> <name4> <name1> <name2> <name3> <name6> <name1> ]	append <name1> to <name5> .namespaces list <name4> every <name1> <name2> <name3> , only <name6> <name1> is true .
else :	if not ,
<name4> . namespaces = [ ]	<name4> .namespaces is an empty list .
<name2> . namespace = <val4>   . <name6> ( <name2> . namespaces )	<name6> <name2> .namespaces into a string separated with character <val4> , substitute it for <name2> .namespace .
<name6> not hasattr ( <name1> , <val5>   ) :	<name6> <name1> doesnt have a attribute <val5> ,
<name5> . _func_path = <val1>   . <name4> ( [ <name3> . __class__ . __module__ , <name3> . __class__ . __name__ ] )	<name4> <name3> .__class__ .__module__ and <name3> .__class__ .__name__ into a string , separated by character <val1> , substitute it for <name5> ._func_path .
else :	if not ,
<name1> . _func_path = <val5>   . <name3> ( [ <name2> . __module__ , <name2> . __name__ ] )	<name3> <name2> .__module__ and <name2> .__name__ into a string , separated by character <val5> , substitute it for <name1> ._func_path .
<name6> = <name3> or self . _func_path	if <name3> exists substitute it for <name6> , if not substitute .self ._func_path for <name6> .
<name1> . view_name = <val3>   . <name4> ( <name1> . namespaces + [ <name6> ] )	append list containing <name6> to <name1> .namespaces list , <name4> all the elements into a string separated by character <val3> ,
def <name3> ( <name2> , <name4> ) :	substitute it for <name2> .view_name . define the method <name3> with arguments <name2> and <name4> .
<name3> ( <name6> . func , <name6> . args , <name6> . kwargs ) [ <name4> ]	<name3> the element at the <name4> <name4> of the tuple containing 3 elements : <name6> .func , <name6> .args and <name6> .kwargs .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
return <val2> % ( self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )	in the string <val2> , replace all the occurrences of :
<name4> <name3> ( <name6> ) :	string '%s' with self ._func_path , self .args , self .kwargs , self .url_name , self .app_name and self .namespaces , respectively . derive the <name4> <name3> with <name6> as base <name4> .
pass	do nothing .
<name3> <name6> ( <name5> ) :	derive the <name3> <name6> with <name5> as base <name3> .
pass	do nothing .
@  <name5> . <name5> ( <name6> = <name3> )	method <name5> .lru_cache with an argument <name6> set to <name3> , as a decorator ,
def <name6> ( <name3> , <name1> = <name4> ) :	define the function <name6> with arguments <name3> and <name1> set to boolean <name4> .
<name6> <name4> ( <name3> ) :	<name6> <name3> is a <name4> object ,
<name2> <name3>	<name2> <name3> .
<name4> , <name6> = <name3> ( <name1> )	call the function <name3> with an argument <name1> , store the result in <name4> and <name6> , respectively .
<name3> not <name2> :	<name3> <name2> is false ,
<name4> <name5> :	<name4> <name5> is true ,
<name2> <name5>	<name2> <name5> .
else :	if not ,
<name3> <name4> ( <val6> % lookup_view )	<name3> an <name4> exception with an argument string <val6> ,
<name2> :	where '%s' is replaced by lookup_view . <name2> ,
mod = <name3> ( <name5> )	call the function <name3> with an argument <name5> .
except <name4> :	if <name4> exception is caught .
<name3> <name2> :	<name3> <name2> is true ,
<name4> <name1>	<name4> <name1>
else :	if not ,
<name1> , <name2> = <name5> ( <name4> )	call the function <name5> with an argument <name4> , store the result in <name1> and <name2> , respectively .
<name3> <name5> <name2> not <name1> ( import_module ( parentmod ) , <name5> ) :	<name3> <name5> is true <name2> return value of the function <name1> called with 2 arguments : result of the function :
<name3> <name1> ( <val2> % ( lookup_view , mod_name ) )	import_module called with an argument parentmod and submod , evaluates to false . <name3> an <name1> exception with an argument string <val2> ,
else :	where string '%s' is replaced by lookup_view and mod_name , respectively . if not ,
<name1>	<name1> an exception .
else :	if not ,
<name5> :	<name5> ,
<name1> = getattr ( <name3> , <name2> )	get <name2> attribute from the <name3> object , substitute it for <name1> .
except <name2> :	if <name2> exception is caught .
<name6> can_fail :	<name6> can fail is true ,
<name5> <name1>	<name5> <name1>
else :	if not ,
<name1> <name2> ( <val5> % ( lookup_view , mod_name ) )	<name1> an <name2> exception with an argument string <val5> ,
else :	where string '%s' is replaced by lookup_view and mod_name , respectively . if not ,
<name6> <name1> <name2> ( view_func ) :	<name6> view_function is <name1> a <name2> function ,
<name3> <name6> ( <val1> % ( mod_name , func_name ) )	<name3> an <name6> exception with an argument string <val1> ,
<name1> <name2>	where string '%s' is replaced by mod_name and func_name , respectively . <name1> <name2> .
@  <name4> . <name4> ( <name3> = <name2> )	method <name4> .lru_cache with an argument <name3> set to <name2> , as a decorator ,
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
<name3> <name5> <name4> <name6> :	<name3> <name5> <name4> <name6> ,
<name5> <name4> . conf <name1> <name3>	<name5> <name4> .conf <name1> <name3> into default name space .
<name5> = <name1> . ROOT_URLCONF	substitute <name1> .ROOT_URLCONF for <name5> .
<name2> <name3> ( r <val1>   , <name5> )	<name2> an instance of a class <name3> created with arguments : raw string <val1> and <name5> .
@  <name6> . <name6> ( <name1> = <name5> )	method <name6> .lru_cache with an argument <name1> set to <name5> , as a decorator ,
def <name6> ( <name4> , <name1> ) :	define the function <name6> with arguments <name4> and <name1> .
<name2> = <name3> ( <name6> , <name1> . url_patterns )	<name2> is class instance of a class <name3> , created with 2 arguments : <name6> and <name1> .url_patterns .
<name6> <name3> ( r <val5>   , [ <name4> ] )	<name6> an instance of a class <name3> created with arguments : raw string <val5> and a list containing an element <name4> .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name1> :	<name1> ,
<name5> = <name1> . rindex ( <val6>   )	call the method <name1> .rindex with an argument character <val6> , substitute the result for <name5> .
except <name1> :	if <name1> exception is caught ,
<name2> <name3> , ''	<name2> <name3> and a empty string .
<name1> <name3> [ : <name4> ] , <name3> [ <name4> + 1 : ]	<name1> <name3> split into two lists at the <name4> index , without the element at the <name4> index .
<name1> <name2> ( <name6> ) :	derive the <name1> <name2> with <name6> as base <name1> .
def <name1> ( <name4> , <name3> ) :	define the method <name1> with arguments <name4> and <name3> .
<name1> . _regex = <name6>	substitute <name6> for <name1> ._regex .
<name4> . _regex_dict = { }	<name4> ._regex_dict is an empty dictionary .
@  <name1>	<name1> decorator ,
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name4> = <name3> ( )	call the function <name3> , substitute the result for <name4> .
<name1> <name3> <name6> <name5> <name4> . _regex_dict :	<name1> <name3> is <name6> contained <name5> <name4> ._regex_dict ,
<name4> isinstance ( <name6> . _regex , <name2> . string_types ) :	<name4> <name6> .regex is not an instance of <name2> .string_types ,
<name2> = <name1> . _regex	substitute <name1> ._regex for <name2> .
else :	if not ,
<name5> = <name1> ( <name6> . <name2> )	call the function <name1> with arguments <name6> and <name2> , substitute the result for <name5> .
<name5> :	<name5> ,
<name5> = <name1> . compile ( <name3> , <name1> . UNICODE )	call the function <name1> .compile with arguments <name3> and <name1> .UNICODE , substitute the result for <name5> .
except <name1> . error as <name2> :	if <name1> .error , renamed to <name2> , is caught ,
<name6> . _regex_dict [ <name1> ] = <name3>	where '%s' is replace by regex and return value of the function six .text_type with an argument e . substitute the <name3> for value under the <name1> key of the <name6> ._regex_dict dictionary .
<name4> <name1> . _regex_dict [ <name3> ]	<name4> the value under the <name3> key of the <name1> ._regex_dict dictionary .
<name6> <name5> ( <name1> ) :	derive the <name6> <name5> with <name1> as base <name6> .
def <name5> ( <name2> , <name6> , <name1> , <name4> = <name3> , <name5> = <name3> ) :	define the method <name5> with 5 arguments : <name2> , <name6> , <name1> , <name4> set to <name3> and <name5> set to <name3> .
<name4> . __init__ ( <name5> , <name3> )	call the method <name4> .__init__ with arguments <name5> and <name3> .
<name1> <name5> ( <name3> ) :	<name1> <name3> is an <name5> object ,
<name3> . _callback = <name1>	substitute <name1> for <name3> ._callback .
else :	if not ,
<name3> . _callback = <name6>	<name3> ._callback is <name6> .
<name6> . _callback_str = <name5>	substitute <name5> for <name6> ._callback_str .
<name6> . <name5> = <name5> or { }	if <name5> exists substitute it for <name6> .default_args , if not , <name6> .default_args is an empty dictionary .
<name1> . <name2> = <name2>	substitute <name2> for <name1> .name .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
return force_str ( <val6>   % ( <name2> . __class__ . __name__ , <name2> . name , <name2> . regex . pattern ) )	substitute '%s' in string <val6> with <name2> .__class__ .__name__ , <name2> .name and <name2> .regex .pattern , respectively ,
def <name6> ( <name1> , <name4> ) :	use it as an argument for the call to the force_str function , return the result . define the method <name6> with arguments <name1> and <name4> .
<name1> not <name3> or not hasattr ( <name4> , <val5>   ) :	<name1> <name3> is false , and <name4> doesnt have <val5> attribute ,
<name3>	<name3> nothing .
<name5> . _callback_str = <name2> + <val1>   + <name5> . _callback_str	joint <name2> , character <val1> and <name5> ._callback_str together , substitute the result for <name5> ._callback_str .
def <name1> ( <name3> , <name5> ) :	define the method <name1> with arguments <name3> and <name5> .
<name3> = <name4> . regex . search ( <name5> )	call the method <name4> .regex .search with an argument <name5> , substitute the result for <name3> .
<name3> <name1> :	<name3> <name1> is true ,
<name6> = <name5> . groupdict ( )	call the method <name5> .groupdict , substitute the result for <name6> .
<name1> <name2> :	<name1> <name2> is true ,
<name5> = ( )	<name5> is an empty tuple .
else :	if not ,
<name4> = <name5> . groups ( )	call the method <name5> .groups , substitute the result for <name4> .
<name3> . update ( <name1> . default_args )	call the method <name3> .update with an argument <name1> .default_args .
<name4> <name2> ( <name3> . callback , <name6> , <name1> , <name3> . name )	<name4> an instance of a <name2> class , crated with arguments <name3> .callback , <name6> , <name1> and <name3> .name .
@  <name3>	<name3> decorator ,
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name4> <name5> . _callback <name2> <name6> <name3> :	<name4> <name5> ._callback <name2> <name6> <name3> ,
<name1> <name3> . _callback	<name1> <name3> ._callback .
<name6> . _callback = <name5> ( <name6> . _callback_str )	call the function <name5> with an argument <name6> ._callback_str , substitute the result for <name6> ._callback .
<name6> <name3> . _callback	<name6> <name3> ._callback .
<name1> <name5> ( <name4> ) :	derive the <name1> <name5> with <name4> as base <name1> .
def <name1> ( <name3> , <name5> , <name2> , <name4> = <name6> , <name1> = <name6> , <name3> = <name6> ) :	define the method <name1> with 6 arguments : <name3> , <name5> , <name2> , <name4> set to <name6> , <name1> set to <name6> and <name3> set to <name6> .
<name4> . __init__ ( <name2> , <name1> )	call the method <name4> .__init__ with arguments <name2> and <name1> .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .urlconf_name .
<name4> <name3> isinstance ( <name5> , <name1> . string_types ) :	<name4> <name5> is <name3> an instance of <name1> .string_types class ,
<name4> . _urlconf_module = <name4> . urlconf_name	substitute <name4> .urlconf_name for <name4> .urlconf_module .
<name5> . callback = <name3>	<name5> .callback is <name3> .
<name1> . <name3> = <name3> or { }	if <name3> exists , substitute it for <name1> .default_kwargs , otherwise <name1> .default_kwargs is an empty dictionary .
<name6> . <name4> = <name4>	substitute <name4> for <name6> .namespace .
<name6> . <name4> = <name4>	substitute <name4> for <name6> .app_name .
<name5> . _reverse_dict = { }	<name5> ._reverse_dict is an empty dictionary .
<name5> . _namespace_dict = { }	<name5> ._namespace_dict is an empty dictionary .
<name1> . _app_dict = { }	<name1> ._app_dict is an empty dictionary .
<name4> . _callback_strs = <name2> ( )	<name4> ._callback_strs is an empty <name2> .
<name4> . _populated = <name2>	<name4> ._populated is boolean <name2> .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name2> isinstance ( <name1> . urlconf_name , <name6> ) <name4> len ( <name1> . urlconf_name ) :	<name2> <name1> .urlconf_name is an instance of a <name6> type <name4> its length is not zero .
<name6> = <val1>   % <name4> . urlconf_name [ 0 ] . <name3> . __name__	replace '%s' in string <val1> with <name3> .__name__ field of first element of <name4> .urlconf_name , substitute it for <name6> .
else :	if not ,
<name4> = repr ( <name5> . urlconf_name )	create a printable representation of <name5> .urlconf_name object , substitute it for <name4> .
return str ( <val4>   ) % ( <name6> . __class__ . __name__ , <name5> , <name6> . app_name , <name6> . namespace , <name6> . regex . pattern )	replace all '%s' in string <val4> with <name6> .__class__ .__name__ , <name5> , <name6> .app_name ,
def <name4> ( <name6> ) :	<name6> .namespace and <name6> .regex .pattern , respectively . return it . define the method <name4> with an argument <name6> .
<name5> = <name2> ( )	<name5> is an instance of the <name2> class .
<name5> = { }	<name5> is an empty dictionary .
<name3> = { }	<name3> is an empty dictionary .
<name5> = <name4> ( )	call the function <name4> , substitute the result for <name5> .
<name4> <name2> <name5> <name3> ( <name6> . url_patterns ) :	<name4> every <name2> <name5> <name3> list <name6> .url_patterns ,
<name4> hasattr ( <name3> , <val2>   ) :	<name4> <name3> has an attribute <val2> ,
<name2> . _callback_strs . add ( <name3> . _callback_str )	call the method <name2> ._callback_strs .add with an argument <name3> ._callback_str .
elif hasattr ( <name4> , <val1>   ) :	otherwise , if <name4> has an <val1> attribute .
<name1> = <name6> . _callback	substitute <name6> ._callback for <name1> .
<name4> isinstance ( <name1> , <name6> . partial ) :	<name4> <name1> is an instance of <name6> .partial object ,
<name3> = <name3> . func	substitute <name3> .func for <name3> .
<name2> not hasattr ( <name3> , <val4>   ) :	<name2> <name3> doesnt have <val4> attribute ,
<name3> = <name1> . __module__ + <val4> + <name1> . __class__ . __name__	join <name1> .__module__ , character <val4> and <name1> .__class__ .__name__ together , substitute the result for <name3> .
else :	if not ,
<name5> = <name3> . __module__ + <val4> + <name3> . __name__	join together <name3> .__module__ , character <val4> and <name3> .__name__ , substitute the result for <name5> .
<name3> . _callback_strs . add ( <name5> )	call the method <name3> ._callback_strs .add with an argument <name5> .
<name2> = <name1> . regex . <name1>	substitute <name1> .regex .pattern for <name2> .
<name6> <name5> . startswith ( <val2>   ) :	<name6> <name5> starts with a string <val2> ,
<name4> = <name4> [ 1 : ]	remove the first element from <name4> .
<name6> isinstance ( <name1> , <name5> ) :	<name6> <name1> is an instance of <name5> class ,
<name1> <name4> . namespace :	<name1> <name4> .namespace is true ,
<name1> [ <name4> . namespace ] = ( <name3> , <name4> )	substitute the tuple containing 2 elements <name3> and <name4> for value under the <name4> .namespace key of the <name1> dictionary .
<name3> <name6> . app_name :	<name3> <name6> .app_name is true ,
     <name4> . setdefault ( <name6> . app_name , [ ] ) . <name1> ( <name6> . namespace )	call the method <name4> .setdefault with 2 arguments : <name6> and an empty list , <name1> to the resulting object <name6> .namespace .
else :	if not ,
<name1> = <name3> . regex . <name3>	substitute <name3> .regex .pattern for <name1> .
<name3> <name1> <name6> <name2> . reverse_dict :	<name3> every <name1> <name6> <name2> .reverse_dict ,
     <name4> <name3> , <name1> , <name2> <name5> <name6> . reverse_dict . getlist ( <name4> ) :	<name4> every <name3> , <name1> and <name2> <name5> return value of the method <name6> .reverse_dict .getlist called with an argument <name4> ,
         <name3> = <name1> ( <name6> + <name5> )	call the method <name1> with sum of <name6> and <name5> as an argument , substitute the result for <name3> .
<name5> . appendlist ( <name3> , ( <name4> , <name1> + <name2> , dict ( defaults , ** pattern . default_kwargs ) ) )	call the method <name5> .appendlist with 2 arguments : <name3> and a tuple containing 3 elements : <name4> , sum of <name1> and <name2> ,
<name6> <name3> , ( <name1> , <name5> ) <name2> <name4> . namespace_dict . items ( ) :	and dictionary created by applying defaults mapping on the <name4> .default_kwargs dictionary . <name6> every <name3> and tuple containing : <name1> and <name5> , <name2> return value of the method <name4> .namespace_dict .items ,
     namespaces [ <name6> ] = ( <name3> + <name1> , <name4> )	substitute tuple containing 2 elements : sum of <name3> and <name1> , and <name4> for value under the <name6> key of the <name6> dictionary .
<name4> <name2> , <name6> <name5> <name3> . app_dict . items ( ) :	<name4> every <name2> and <name6> <name5> <name3> .app_dict .items method return value ,
     <name3> . setdefault ( <name5> , [ ] ) . <name4> ( namespace_list )	call the method <name3> .setdefault with 2 arguments : <name5> and an empty list , <name4> the resulting list with namespaces_list .
<name3> . _callback_strs . update ( <name5> . _callback_strs )	call the method <name3> ._callback_strs .update with an argument <name5> ._callback_strs .
else :	if not ,
<name3> = <name5> ( <name6> )	call the function <name5> with an argument <name6> , substitute the result for <name3> .
<name5> . appendlist ( <name3> . callback , ( <name1> , <name2> , <name3> . default_args ) )	call the method <name5> .appendlist with 2 arguments : <name3> .callback and a tuple containing 3 elements : <name1> , <name2> ,
<name5> <name1> . name <name6> <name3> <name2> :	and <name1> .default_args . <name5> <name1> .name <name6> <name3> <name2> ,
<name3> . appendlist ( <name4> . name , ( <name2> , <name5> , <name4> . default_args ) )	call the method <name3> .appendlist with 2 arguments : <name4> .name and a tuple containing 3 elements : <name2> , <name5> ,
<name2> . _reverse_dict [ <name4> ] = <name5>	and pattern .default_args . substitute <name5> for the value under <name4> key of the <name2> ._reverse_dict dictionary .
<name2> . _namespace_dict [ <name4> ] = <name5>	substitute <name5> for the value under <name4> key of the <name2> ._namespace_dict dictionary .
<name4> . _app_dict [ <name2> ] = <name6>	substitute <name6> for the value under <name2> key of the <name4> ._app_dict dictionary .
<name1> . _populated = <name5>	<name1> ._populated is boolean <name5> .
@  <name1>	<name1> decorator ,
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name1> = <name2> ( )	call the function <name2> , substitute the result for <name1> .
<name4> <name1> <name5> <name2> <name6> . _reverse_dict :	<name4> <name1> is <name5> contained <name2> <name6> ._reverse_dict
<name2> . _populate ( )	call the method <name2> ._populate .
<name3> <name4> . _reverse_dict [ <name2> ]	<name3> the value under the <name2> key of the <name4> ._reverse_dict dictionary .
@  <name5>	<name5> decorator ,
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name4> = <name1> ( )	call the method <name1> , substitute the result for <name4> .
<name4> <name5> <name2> <name6> <name3> . _namespace_dict :	<name4> <name5> is <name2> contained <name6> <name3> ._namespace_dict ,
<name6> . _populate ( )	call the method <name6> ._populate .
<name5> <name1> . _namespace_dict [ <name3> ]	<name5> the value under the <name3> key of the <name1> ._namespace_dict dictionary .
@  <name4>	<name4> decorator ,
def <name1> ( <name2> ) :	define the method <name1> with an argument <name2> .
<name1> = <name3> ( )	call the method <name3> , substitute the result for <name1> .
<name3> <name2> <name4> <name1> <name6> . _app_dict :	<name3> <name2> is <name4> containsed <name1> <name6> ._app_dict
<name6> . _populate ( )	call the method <name6> ._populate .
<name6> <name3> . _app_dict [ <name2> ]	<name6> the value under the <name2> key of the <name3> ._app_dict dictionary .
def <name3> ( <name6> , path ) :	define the method <name3> with an argument <name6> .
<name1> = <name3> ( <name1> )	call the function <name3> with an argument <name1> , substitute the result for <name1> .
<name1> = [ ]	<name1> is an empty list .
<name2> = <name6> . regex . search ( <name4> )	call the function <name6> .regex .search with an argument <name4> , substitute the result for <name2> .
<name6> <name3> :	<name6> <name3> is true ,
<name6> = <name5> [ <name3> . <name2> ( ) : ]	slice the <name5> list from the result of the <name3> .end method as the start index to the <name2> , substitute it for <name6> .
<name2> <name5> <name1> <name6> . url_patterns :	<name2> every <name5> <name1> <name6> .url_patterns ,
<name3> :	<name3> ,
<name3> = <name2> . resolve ( <name5> )	call the method <name2> .resolve with an argument <name5> , substitute the result for <name3> .
except <name3> as <name1> :	if <name3> , renamed to <name1> , exception is caught ,
<name6> = <name5> . args [ 0 ] . <name3> ( <val2>   )	call the <name3> method with an argument string <val2> on the first element of the <name5> .args , substitute the result for <name6> .
<name4> <name5> <name6> <name2> <name1> :	<name4> <name5> <name6> <name2> <name1> ,
     <name5> . extend ( [ <name1> ] + <name4> <name6> <name4> <name3> <name2> )	call the method <name5> .extend with an argument : <name4> added to a list containing element <name1> , <name6> every <name4> <name3> <name2> .
else :	if not ,
     <name1> . <name6> ( [ <name5> ] )	<name6> list containing <name5> to <name1> .
else :	if not ,
<name5> <name3> :	<name5> <name3> is true ,
     <name1> = dict ( <name4> . groupdict ( ) , ** <name3> . default_kwargs )	<name1> is a dictionary created from <name3> .default_kwargs dictionary using mapping function <name4> .groupdict .
<name6> . update ( <name2> . kwargs )	call the method <name6> .update with an argument <name2> .kwargs .
<name4> <name1> ( <name5> . func , <name5> . args , <name6> , <name5> . url_name , self . app_name or <name5> . app_name , [ self . namespace ] + <name5> . namespaces )	<name4> an instance of a class <name1> created with 6 arguments : <name5> .func , <name5> .args , <name6> ,
<name6> . <name3> ( [ <name2> ] )	sub_match .url_name , self .app_name if it exists or if not sub_match .app_name and sub_match .namespaces list appended to self .name . <name3> <name2> to <name6> list .
<name1> <name2> ( {  <val5>   : <name4> , <val6>   : <name3> }  )	<name1> an <name2> exception with an argument dictionary containing 2 entries : <name3> for <val6> and <name4> for <val5> .
<name6> <name1> ( {  <val2>   : <name4> }  )	<name6> an <name1> exception with an argument dictionary containing 1 entry : <name4> for <val2> .
@  <name1>	<name1> decorator ,
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name5> :	<name5> ,
<name1> <name3> . _urlconf_module	<name1> <name3> ._urlconf_module .
except <name2> :	if <name2> exception is caught .
<name6> . _urlconf_module = <name4> ( <name6> . urlconf_name )	call the function <name4> with argument <name6> .urlconf_name , substitute the result for <name6> ._urlconf_module .
<name3> <name4> . _urlconf_module	<name3> <name4> ._urlconf_module .
@  <name2>	<name2> decorator ,
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name4> = getattr ( <name2> . urlconf_module , <val1> , <name2> . urlconf_module )	get attribute <val1> form the <name2> .urlconf_module , substitute it for <name4> , if the attribute doesnt exist ,
<name1> :	substitute self .urlconf_module for self .urlconf_module . <name1> ,
<name4> ( <name2> )	call the function <name4> with an argument <name2> .
except <name5> :	if <name5> exception is caught ,
"<name2> = ( ""The included urlconf '{name}' does not appear to have any "" ""patterns in it. If you see valid patterns in the file then "" ""the issue is probably caused by a circular import."" )"	"<name2> is a string """" The included urlconf '{name}' does not appear to have any patterns in it ."
<name4> <name6> ( <name5> . format ( <name1> = <name3> . urlconf_name ) )	"If you see valid patterns in the file then the issue is probably caused by a circular import . ""    <name4> an <name6> exception with an argument : return value of the method <name5> .format , called with an argument <name1> set to <name3> .urlconf_name ."
<name1> <name3>	<name1> <name3> .
def <name5> ( <name3> , <name2> ) :	define the method <name5> with arguments <name3> and <name2> .
callback = getattr ( <name2> . urlconf_module , <val3>   % <name4> , None )	replace '%s' in the string <val3> with <name4> , use it as an name of the attribute to get from the <name2> .urlconf_module ,
<name3> <name5> <name2> :	substitute it for <name2> , <name3> the attribute doesnt exists , <name2> is None . <name3> <name5> <name2> ,
<name1> <name5> . conf <name4> <name6>	<name1> <name5> .conf <name4> <name6> into default name space ,
<name1> = getattr ( <name2> , <val6>   % <name3> )	replace '%s' in the string <val6> with <name3> , use it as an name of the attribute to get from the <name2> , substitute it for <name1> .
<name5> <name1> ( <name4> ) , { }	call the function <name1> with an argument <name4> , <name5> the result and an empty dictionary .
def <name6> ( <name1> , <name2> , * <name3> , ** <name5> ) :	define the method <name6> with arguments <name1> , <name2> , unpacked list <name3> and unpacked dictionary <name5> .
return <name3> . _reverse_with_prefix ( <name4> , ''   , * <name2> , ** <name1> )	call the method <name3> ._reverse_with_prefix with 4 arguments : <name4> , an empty string , unpacked list <name2> and unpacked dictionary <name1> .
def <name4> ( <name1> , <name5> , <name6> , * <name3> , ** <name2> ) :	define the method <name4> with arguments <name1> , <name5> , <name6> , unpacked list <name3> and unpacked dictionary <name2> .
<name6> <name4> <name1> <name3> :	<name6> <name4> <name1> <name3> are both true ,
<name4> <name2> ( <val1> )	<name4> an <name2> exception with an argument string <val1> .
<name6> = [ <name4> ( <name1> ) <name2> <name1> <name5> <name3> ]	call the function <name4> with an argument <name1> , <name2> every <name1> <name5> <name3> , put the results <name5> a <name6> list .
<name2> = dict ( ( <name5> , <name1> ( <name3> ) ) <name4> ( <name5> , <name3> ) <name6> <name2> . items ( ) )	<name2> is a dictionary created from the result of the function <name1> with an argument <name3> , mapped through function <name5> , <name4> every <name5> and <name3> <name6> return value of the <name2> .items .
<name6> not <name5> . _populated :	<name6> <name5> ._populated is false ,
<name2> . _populate ( )	call the method <name2> ._populate ,
<name4> = <name5>	substitute <name5> for <name4> ,
<name6> :	<name6> ,
<name5> <name6> <name3> <name1> . _callback_strs :	<name5> <name6> is contained <name3> <name1> ._callback_strs ,
<name4> = <name2> ( <name4> , <name3> )	call the function <name2> with arguments <name4> and boolean <name3> , substitute the result for <name4> .
except ( <name4> , <name3> ) as <name2> :	if <name4> , <name3> , renamed to <name2> , exceptions are caught ,
<name4> <name3> ( <val5> % ( <name1> , <name2> ) )	<name4> an <name3> exception with an argument string <val5> , where '%s' is replaced with <name1> and <name2> , respectively .
else :	if not ,
<name6> <name3> <name5> ( <name4> ) <name2> <name5> ( <name1> ) :	<name6> <name4> <name2> <name1> are <name3> <name5> objects ,
<name4> . warn ( <val6>   % original_lookup , RemovedInDjango20Warning , stacklevel = <val3> )	call the function <name4> .warn with <val3> arguments : string <val6> , with '%s' replaced with
<name6> = <name4> . reverse_dict . getlist ( <name5> )	original_lookup , RemovedInDjango20Warning and stacklevel set to integer 3 . call the method <name4> .reverse_dict .getlist with an argument <name5> , substitute the result for <name6> .
prefix_norm , prefix_args = <name4> ( <name1> ( <name5> ) ) [ 0 ]	call the function <name1> with an argument <name5> , use the result as an argument for the call to the <name4> function ,
<name2> <name1> , <name6> , <name5> <name4> <name3> :	substitute the fitst element of the result <name2> prefix_norm and prefix_args , respectively . <name2> every <name1> , <name6> and <name5> <name4> <name3> ,
<name6> <name3> , <name4> <name1> <name2> :	<name6> every <name3> and <name4> <name1> <name2> ,
<name1> <name2> :	<name1> <name2> is true ,
<name3> len ( <name1> ) != len ( <name6> ) + len ( <name2> ) :	<name3> length of <name1> is not equal to the sum of the lengths of <name6> and <name2> ,
     continue	skip this loop iteration .
candidate_subs = dict ( zip ( <name1> + <name5> , <name6> ) )	create a list of tuples out of 2 lists : appended <name5> list to <name1> and <name6> , covert the result into a dictionary ,
else :	substitute it for candidate_subs . if not ,
<name1> set ( <name5> . <name3> ( ) ) |  set ( <name6> . <name3> ( ) ) != set ( params ) |  set ( <name6> . <name3> ( ) ) |  set ( prefix_args ) :	<name1> the union of the <name5> and <name6> dictionary <name3> converted into sets is not the same as the union of the <name6> and prefix
     continue	dictionary keys converted into sets , skip this loop iteration ,
<name2> = <name3>	<name2> is boolean <name3> ,
<name2> <name3> , <name4> <name1> <name6> . items ( ) :	<name2> every <name3> and <name4> <name1> return value of the function <name6> .items ,
     <name6> <name2> . get ( <name1> , <name4> ) != <name4> :	<name6> the value of the <name2> dictionary under the key <name1> is not equal to <name4> ,
         <name2> = <name1>	<name2> is boolean <name1> .
<name2>	<name2> from this loop execution .
<name6> not <name3> :	<name6> <name3> is false ,
     continue	skip this loop iteration ,
<name6> = <name4>	substitute <name4> for <name6> .
<name4> = prefix_norm . <name2> ( <val3>   , <val1>   ) + <name5>	<name2> all the occurrences of the <val3> string for <val1> , append <name5> to the previous <name5> , substitute it for <name4> .
if <name1> . search ( <val6>   % ( <name4> , <name2> ) , candidate_pat % candidate_subs , <name1> . UNICODE ) :	call the function <name1> .search with 3 arguments : string <val6> , with '%s' replaced for <name4> and <name2> , respectively ,
<name4> = dict ( ( k , <name3> ( <name6> ) ) for ( k , <name6> ) <name5> <name4> . items ( ) )	candidate_pat formated with <name4> and re .UNICODE . <name4> is dictionary created from elements <name5> return value of the function <name3> called with argument <name6> ,
<name6> <name3> % <name4>	mapped with a function k , for every k and v in <name6> value of the method <name4> .items . format <name3> with <name4> , <name6> the result .
<name1> = <name3> ( lookup_view , <val6>   , <name2> )	get the attribute <val6> from the <name3> , if it exists substitute it for <name1> , if not , <name1> is <name2> .
n = <name2> ( lookup_view , <val1>   , <name4> )	get the attribute <val1> from the <name2> , if it exists substitute it for m , if not , m is <name4> .
<name3> <name2> is <name6> <name1> <name5> <name4> is <name6> <name1> :	<name3> <name2> <name5> <name4> are <name6> <name1> ,
"<name3> = ""%s.%s"" % ( <name1> , <name5> )"	join <name1> and <name5> into a string , separated by '.' , substitute the result for <name3> .
else :	if not ,
<name2> = <name5>	substitute <name5> for <name2> .
<name6> = [ <name4> <name1> ( <name3> , <name4> , <name2> ) <name5> <name6> ]	append <name4> into a list <name6> , <name1> every <name3> , <name4> and <name2> <name5> <name6> .
"<name1> <name3> ( <val6> ""arguments '%s' not found. %d pattern(s) tried: %s"" % ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )"	<name1> an <name3> exception with an argument string <val6> ,
<name1> <name6> ( <name3> ) :	arguments '%s' not found . % d pattern ( s ) tried : % s , replace '%s' with lookup_view_s , args , kwargs , length of patterns , patterns , and respectively . derive the <name1> <name6> with <name3> as base <name1> .
def <name5> ( <name2> , <name1> , <name3> = <name4> , <name6> = <name4> , <name5> = <name4> ) :	define the <name5> method with 5 arguments : <name2> , <name1> , <name3> set to <name4> , <name6> set to <name4> and <name5> set to <name4> .
super ( <name4> , self ) . <name5> ( <name2> , <name1> , <name3> , <name6> , <name4> )	call the <name5> method of the base class of the class <name4> , with arguments : <name2> , <name1> , <name3> , <name6> and <name4> .
@  <name1>	<name1> decorator ,
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name4> = <name5> ( )	call the function <name5> , substitute the result for <name4> .
<name6> <name2> <name4> <name1> <name5> . _regex_dict :	<name6> <name2> is <name4> contained <name1> <name5> ._regex_dict ,
<name2> = <name1> . compile ( <val5>   % <name6> , <name1> . UNICODE )	call the function <name1> .compile with 2 arguments , string <val5> , where '%s' is replaced with <name6> and <name1> .UNICODE , substitute the result for <name2> .
<name5> . _regex_dict [ <name3> ] = <name4>	substitute the <name4> for value under the <name3> key of the <name5> ._regex_dict dictionary .
<name2> <name6> . _regex_dict [ <name1> ]	<name2> the value under the <name1> of the <name6> ._regex_dict dictionary .
def <name3> ( <name2> , <name5> = <name4> ) :	define the function <name3> with arguments <name2> and <name5> set to <name4> .
<name3> <name5> <name2> <name4> :	<name3> <name5> <name2> <name4> ,
<name4> = <name2> ( )	call the function <name2> with an argument <name4> .
<name6> <name1> ( <name4> ) . <name2> ( <name5> )	call the function <name1> with an argument <name4> , on the result call the method <name2> with an argument <name5> , <name6> it .
def <name2> ( <name6> , <name1> = <name5> , <name4> = <name5> , <name3> = <name5> , prefix = <name5> , current_app = <name5> ) :	define the function <name2> with 6 arguments : <name6> , <name1> set to <name5> , <name4> set to <name5> , <name3> set to <name5> ,
<name3> <name5> <name4> <name1> :	prefix set to <name1> , current_app set to <name1> . <name3> <name5> <name4> <name1> ,
<name1> = <name2> ( )	call the function <name2> with an argument <name1> .
<name5> = <name2> ( <name1> )	call the function <name2> with an argument <name1> , substitute the result for <name5> .
<name4> = <name4> or [ ]	if <name4> in None of boolean False , substitute it for an empty list .
kwargs = kwargs or { }	if args in None of boolean False , substitute it for an empty dictionary .
<name5> <name1> <name3> <name2> :	<name5> <name1> <name3> <name2> ,
<name6> = <name3> ( )	call the function <name3> , substitute the result for <name6> .
<name6> <name4> isinstance ( <name5> , <name2> . string_types ) :	<name6> <name5> is <name4> an instance of the <name2> .string_types object ,
<name1> = <name2>	substitute <name2> for <name1> .
else :	if not ,
<name2> = <name1> . split ( <val5>   )	call the method <name1> .split , with an argument <val5> , substitute the result for <name2> .
<name6> . reverse ( )	call the method <name6> .reverse .
<name2> = <name6> [ 0 ]	substitute first element of <name6> for <name2> .
<name4> = <name1> [ 1 : ]	substitute <name1> , without the first element , for <name4> .
<name4> = [ ]	<name4> is an empty list .
<name3> = ''	<name3> is an empty string .
<name3> <name4> :	<name3> <name4> is true ,
<name2> = <name5> . <name6> ( )	<name6> the element form the <name5> as substitute the result for <name2> .
<name3> :	<name3> ,
<name2> = <name6> . app_dict [ <name3> ]	get the value under the <name3> key of the <name6> .app_dict dictionary , substitute it for <name2> .
<name3> <name2> <name1> <name2> <name6> <name4> :	<name3> <name2> <name1> is true <name1> <name2> is contained <name6> <name4> ,
   <name5> = <name4>	substitute <name4> for <name5> .
elif <name3> <name1> <name4> <name2> :	otherwise if <name3> is <name1> contained <name4> <name2> ,
     <name4> = <name5> [ 0 ]	substitute first element of <name5> for <name4> .
except <name3> :	if <name3> exception is caught ,
pass	do nothing .
<name4> :	<name4> ,
<name2> , <name5> = <name5> . namespace_dict [ <name1> ]	substitute the value under the <name1> key of the <name5> .namespace_dict dictionary for <name2> and <name5> , respectively .
<name1> . append ( <name6> )	call the method <name1> .append with an argument <name6> .
<name3> = <name3> + <name1>	add <name3> and <name1> , substitute the result for <name3> .
except <name5> as <name1> :	if <name5> , renamed to <name1> , exception is caught ,
<name3> <name5> :	<name3> <name5> is true ,
else :	respectively replace '%s' with key and elements of the resolved_path joined into a string , separated by ':' . if not ,
<name6> <name5> ( <val3> % <name4> )	<name6> an <name5> exception with an argument string <val3> , with '%s' replaced with <name4> .
<name4> <name6> :	<name4> <name6> is true ,
<name3> = <name6> ( <name4> , <name3> )	call the function <name6> with arguments <name4> and <name3> , substitute the result for <name3> .
return iri_to_uri ( <name1> . _reverse_with_prefix ( <name6> , <name4> , * <name2> , ** <name5> ) )	call the method <name1> ._reverse_with_prefix with 4 arguments : <name6> , <name4> , unpacked list <name2> , unpacked dictionary <name5> ,
<name5> = <name3> ( <name6> , <name1> )	use the result as an argument for the call to the function iri_to_uri , return the result . call the function <name3> with arguments <name6> and <name1> , substitute the results for <name5> .
def <name5> ( ) :	define the function <name5> .
<name6> . cache_clear ( )	call the function <name6> .cache_clear .
<name4> . cache_clear ( )	call the function <name4> .cache_clear .
<name2> . cache_clear ( )	call the function <name2> .cache_clear .
def <name6> ( <name5> ) :	define the function <name6> with an argument <name5> .
<name2> not <name1> . endswith ( <val5>   ) :	<name2> <name1> doesnt end with character <val5> ,
<name3> += <val4>	append <val4> to <name3> .
<name3> . value = <name6>	substitute <name6> for <name3> .values .
def <name6> ( ) :	define the function <name6> .
<name6> getattr ( <name4> , <val3> , <val1>   )	get <val3> attribute of the <name4> , if it exists , <name6> it , otherwise <name6> <val1> .
def <name5> ( ) :	define the function <name5> .
<name5> :	<name5> ,
del <name1> . value	delete <name1> .values .
except <name6> :	if <name6> exception is caught ,
pass	do nothing .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name5> <name2> :	<name5> <name2> is true ,
<name4> . value = <name5>	substitute <name5> for <name4> .value .
else :	if not ,
<name2> hasattr ( <name4> , <val1> ) :	<name2> <name4> has an attribute <val1> ,
del <name4> . value	delete <name4> .value .
def <name2> ( <name5> = <name4> ) :	define the function <name2> with an argument <name5> set to <name4> .
<name3> getattr ( <name6> , <val2> , default )	get the <val2> attribute of the <name6> , if it exists <name3> it , otherwise <name3> defaults .
def <name2> ( <name6> , <name4> = <name1> ) :	define the function <name2> with arguments <name6> and <name4> set to <name1> .
<name4> :	<name4> ,
<name3> ( <name5> , <name6> )	call the function <name3> with arguments <name5> and <name6> .
<name5> <name4>	<name5> boolean <name4> .
except <name3> :	if <name3> exception is caught ,
<name2> <name4>	<name2> boolean <name4> .
<name1> <name3> <name2> <name6>	<name1> <name3> <name2> <name6> into default name space .
<name5> <name3>	<name5> module <name3> .
<name6> <name1> . core . exceptions <name2> <name3>	<name6> <name1> .core .exceptions <name2> <name3> into default name space .
<name2> <name5> . utils . deconstruct <name4> <name6>	<name2> <name5> .utils .deconstruct <name4> <name6> into default name space .
<name6> <name4> . utils . translation <name5> <name3> <name1> <name2> , <name6>	<name6> <name4> .utils .translation <name5> <name3> <name1> <name2> and <name6> into default name space .
<name5> <name1> . utils . encoding <name4> <name3>	<name5> <name1> .utils .encoding <name4> <name3> into default name space .
<name4> <name6> . utils . ipv6 <name5> <name1>	<name4> <name6> .utils .ipv6 <name5> <name1> into default name space .
<name1> <name3> . utils <name6> <name4>	<name1> <name3> .utils <name6> <name4> into default name space .
<name2> <name3> . utils . six . moves . urllib . parse <name1> <name5> , <name6>	<name2> <name3> .utils .six .moves .urllib .parse <name1> <name5> and <name6> into default name space .
<name5> = ( <name4> , ''   , [ ] , ( ) , { }  )	<name5> is a tuple containing 5 initial elements : <name4> , empty string , empty list , empty tuple and an empty dictionary .
@  <name4>	decorator <name4> ,
<name4> <name1> ( <name6> ) :	derive the <name4> <name1> form the <name6> base <name4> .
<name2> = ''	<name2> is an empty string .
<name2> = <name6> ( <val5>   )	call a function <name6> with a string <val5> as an argument , substitute the result for <name2> .
<name1> = <val3>	<name1> is a string <val3>
<name4> = <name1>	<name4> is boolean <name1> .
<name6> = <val5>	<name6> is a integer <val5> .
def <name3> ( <name5> , <name4> = <name1> , <name2> = <name1> , <name6> = <name1> , inverse_match = <name1> , flags = <name1> ) :	define the method <name3> with 6 arguments : <name5> , <name4> set to <name1> , <name2> set to <name1> , <name6> set to <name1> ,
<name5> <name3> <name2> <name6> <name1> :	inverse_match set to <name1> and flags set to <name1> . <name5> <name3> <name2> <name6> <name1> ,
<name2> . <name6> = <name6>	substitute <name6> for <name2> .regex .
<name1> <name5> <name6> <name2> <name4> :	<name1> <name5> <name6> <name2> <name4> ,
<name2> . <name5> = <name5>	substitute <name5> for <name2> .message .
<name3> <name4> <name2> <name1> <name6> :	<name3> <name4> <name2> <name1> <name6> ,
<name2> . <name1> = <name1>	substitute <name1> for <name2> .code .
<name4> <name5> <name3> <name6> <name2> :	<name4> <name5> <name3> <name6> <name2> ,
<name4> . <name5> = <name5>	substitute <name5> for <name4> .inverse_match .
<name1> <name5> <name6> <name3> <name2> :	<name1> <name5> <name6> <name3> <name2> ,
<name4> . <name2> = <name2>	substitute <name2> for <name4> .flags .
<name6> <name2> . flags <name1> <name4> isinstance ( <name2> . regex , <name5> . string_types ) :	<name6> <name2> .flags is true <name1> <name2> .regex is <name4> an instance of a <name5> .string_types type ,
<name2> <name1> ( <val6> )	<name2> an <name1> exception with an argument string <val6> .
<name1> isinstance ( <name5> . regex , <name6> . string_types ) :	<name1> <name5> .regex is not an instance of a <name6> .string_types type ,
<name4> . regex = <name2> . compile ( <name4> . regex , <name4> . flags )	call the <name2> .compile function with <name4> .regex and <name4> .flags as arguments , substitute the result for <name4> .regex .
def <name4> ( <name6> , <name2> ) :	define the method <name4> with arguments <name6> and <name2> .
<name3> not ( <name4> . inverse_match is not bool ( <name4> . regex . search ( <name2> ( <name6> ) ) ) ) :	<name3> <name4> .inverse_match equals to return <name6> of the <name4> .regex .search method converted to boolean , called with argument <name2> ( <name6> ) ,
<name2> <name1> ( <name6> . message , <name4> = <name6> . <name4> )	<name2> a <name1> exception with arguments <name6> .message and <name4> set to <name6> .code .
def <name3> ( <name5> , <name2> ) :	define the method <name3> with arguments <name5> and <name2> .
return ( isinstance ( <name6> , <name2> ) <name1> <name5> . regex . pattern == <name6> . regex . pattern <name1> <name5> . regex . flags == <name6> . regex . flags <name1> ( <name5> . message == <name6> . message ) <name1> ( <name5> . code == <name6> . code ) <name1> ( <name5> . inverse_match == <name6> . inverse_match ) )	evaluate the logical expression , if <name6> is an instance of <name2> <name1> <name5> .regex .pattern equals to <name6> .regex .pattern ,
def <name5> ( <name2> , <name1> ) :	and <name2> .regex .flags equals to <name1> .regex .flags and <name2> .message equals to <name1> .message and <name2> .code equals to <name1> .code , and <name2> .inverse_match equals to <name1> .inverse_match , return the result . define the method <name5> with arguments <name2> and <name1> .
<name1> not ( <name3> == <name6> )	if <name3> equals to <name6> <name1> boolean False , otherwise <name1> boolean True .
@  <name1>	decorator <name1> ,
<name6> <name2> ( <name4> ) :	derive the <name6> <name2> form the <name4> base <name6> .
\ regex = <name1> . compile ( r '^(?:[a-z0-9\\.\\-]*)://'    r '(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}(?<!-)\\.?)|'    r 'localhost|'    r '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|'    r '\\[?[A-F0-9]*:[A-F0-9:]+\\]?)'    r '(?::\\d+)?'    r '(?:/?|[/?]\\S+)$'   , <name1> . IGNORECASE ) \	"\ call the <name1> .compile function with 2 arguments : raw string ""^(?:[a-z0-9\\.\\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+"" , \"
<name5> = <name2> ( 'Enter a valid URL.'   )	"\ ( ? : [ A - Z ] { 2 , 6 }\\ . ?| [ A - Z0 -9 - ] { 2 , } ( ?<! - ) \\ . ? ) |\\ d { 1 , 3 }\\ . \\ d { 1 , 3 }\\ . \\ d { 1 , 3 }\\ . \\ d { 1 , 3 }|\\ [ ? [ A - F0 -9 ] * : [ A - F0 -9 : ] + \\ ] ? ) ( ? : : \\ d + ) ? ( ? : : \\ d + ) ? ( ? : / , ""?|[/?]\\S+)$"" and re .IGNORECASE , substitute the result for regex . call a function <name2> with a string 'Enter a valid value.' as an argument , substitute the result for <name5> . \"
<name6> = [ <val3>   , <val5>   , <val2>   , <val1>   ]	<name6> is a list containing 4 initial elements : <val3> , <val5> , <val2> and <val1> .
def <name3> ( <name6> , <name4> = <name5> , ** <name2> ) :	define the method <name3> with 3 arguments : <name6> , <name4> set to <name5> and unpacked dictionary <name2> .
super ( <name2> , self ) . <name4> ( ** <name3> )	call the <name4> method of the base class of the class <name2> , with unpacked dictionary <name3> as argument .
<name1> <name4> <name5> <name6> <name2> :	<name1> <name4> <name5> <name6> <name2> ,
<name3> . <name6> = <name6>	substitute <name6> for <name3> .schemes .
def <name3> ( <name4> , <name1> ) :	define the method <name3> with arguments <name4> and <name1> .
<name1> = <name5> ( <name1> )	call the function <name5> with an argument <name1> , substitute the result for <name1> .
<name5> = <name1> . split ( <val6>   ) [ 0 ] . <name2> ( )	call the <name1> .split method with <val6> as argument , convert first element of the result to <name2> case , substitute the result for <name5> .
<name2> <name4> <name1> <name6> <name3> . schemes :	<name2> <name4> is <name1> contained <name6> <name3> .schemes ,
<name4> <name3> ( <name1> . message , <name5> = <name1> . <name5> )	<name4> a <name3> exception with arguments <name1> .message and <name5> set to <name1> .code .
<name4> :	<name4> ,
super ( <name6> , self ) . <name3> ( <name5> )	call the <name3> method from the base class of the class <name6> , with an argument <name5> .
except <name1> as <name6> :	if <name1> , renamed to <name6> , is caught ,
<name6> <name1> :	<name6> <name1> is true ,
<name3> , <name1> , <name5> , <name2> , <name4> = <name6> ( <name3> )	call the function <name6> with an argument <name3> , assign the result to <name3> , <name1> , <name5> , <name2> and <name4> , respectively .
<name2> :	<name2> ,
<name3> = <name3> . encode ( <val6>   ) . <name4> ( <val2>   )	call the method <name3> .encode with an argument string <val6> , on the return value call the <name4> method with string <val2> as argument , substitute the result for <name3> .
except <name2> :	if <name2> exception is caught ,
<name6> <name2>	<name6> an exception <name2> .
<name1> = <name3> ( ( <name4> , <name2> , <name6> , <name5> , <name1> ) )	call the function <name3> with a tuple containing 5 elements : <name4> , <name2> , <name6> , <name5> and <name1> , as an argument , substitute the result for <name1> .
super ( <name5> , self ) . <name1> ( <name6> )	call the <name1> method from the base class of the <name5> class , with an argument <name6> .
else :	if not ,
<name5>	<name5> an exception .
else :	if not ,
<name4> = <name6>	substitute <name6> for <name4> .
def <name4> ( <name6> ) :	define the function <name4> with an argument <name6> .
<name2> :	<name2> ,
int ( <name2> )	convert <name2> into an integer .
except ( <name3> , <name1> ) :	if <name3> or <name1> exceptions are caught ,
<name5> <name6> ( <name4> ( <val3>   ) , code = 'invalid'   )	<name5> a <name6> exception with 2 arguments : return value of the function <name4> with an string argument <val3> ,
@  <name4>	and code set to string 'invalid' . decorator <name4> ,
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> form the <name4> base <name3> .
<name6> = <name5> ( 'Enter a valid email address.'   )	call a function <name5> with a string 'Enter a valid value.' as an argument , substitute the result for <name6> .
<name4> = <val5>	<name4> is a string <val5> .
"\ user_regex = <name5> . compile ( r <val2> r '|^""([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-\\011\\013\\014\\016-\\177])*""$)'   , <name5> . IGNORECASE ) \"	\ call the <name5> .compile function with 2 arguments : raw string <val2> , \
\ domain_regex = <name6> . compile ( r <val5>   , <name6> . IGNORECASE ) \	"\|^ ( [ \\ 001 - \\ 010 \\ 013 \\ 014 \\ 016 - \\ 037 !# - \\ [ \\ ] - \\ 177 ] |\\\\ [ \\ 001 - \\ 011 \\ 013 \\ 014 \\ 016 - \\ 177 ] ) * ""$)"" and <name6> .IGNORECASE , substitute the result for user_regex . call the <name6> .compile function with 2 arguments : raw string <val5> , \"
\ <name3> = <name1> . compile ( r <val6>   , <name1> . IGNORECASE ) \	\ and <name1> .IGNORECASE , substitute the result for domain_regex . call the <name1> .compile function with 2 arguments : raw string <val6> and <name1> .IGNORECASE , substitute the result for <name3> . \
<name5> = [ <val4>   ]	<name5> is a list containing string <val4> .
def <name3> ( <name2> , <name5> = <name1> , <name6> = <name1> , <name4> = <name1> ) :	define the <name3> method with 4 arguments : <name2> , <name5> set to <name1> , <name6> set to <name1> and <name4> set to <name1> .
<name6> <name3> <name2> <name1> <name5> :	<name6> <name3> <name2> <name1> <name5>
<name4> . <name3> = <name3>	substitute <name3> for <name4> .message .
<name6> <name1> <name3> <name4> <name2> :	<name6> <name1> <name3> <name4> <name2>
<name6> . <name5> = <name5>	substitute <name5> for <name6> .code .
<name4> <name6> <name1> <name3> <name2> :	<name4> <name6> <name1> <name3> <name2>
<name4> . domain_whitelist = <name1>	substitute <name1> for <name4> .domain_whitelist .
def <name6> ( <name1> , <name2> ) :	define the method <name6> with arguments <name1> and <name2> .
<name6> = <name5> ( <name6> )	call the function <name5> with an argument <name6> , substitute the result for <name6> .
<name4> <name5> <name3> <name1> <val2>   <name5> <name6> <name3> :	<name4> <name3> is false <name1> character <val2> is <name5> contained <name6> <name3> ,
<name4> <name5> ( <name1> . message , <name3> = <name1> . <name3> )	<name4> a <name5> exception with arguments <name1> .message and <name3> set to <name1> .code .
<name4> , <name2> = <name3> . rsplit ( <val6>   , <val1> )	call the method <name3> .rsplit with arguments character <val6> and integer <val1> , assign the result to <name4> and <name2> , respectively .
<name4> not <name5> . user_regex . match ( <name1> ) :	call the <name5> .user_regex .match method with an argument <name1> , <name4> it evaluates to false ,
<name5> <name4> ( <name3> . message , <name1> = <name3> . <name1> )	<name5> a <name4> exception with arguments <name3> .message and <name1> set to <name3> .code .
<name2> ( <name1> <name6> <name4> <name5> . domain_whitelist <name3> <name6> <name5> . validate_domain_part ( <name1> ) ) :	<name2> <name1> is <name6> contained <name4> <name5> .domain_whitelist <name3> method <name5> .validate_domain_part with an argument <name1> evaluates to false ,
<name1> :	<name1> ,
<name4> = <name4> . encode ( <val1>   ) . <name6> ( <val3>   )	call the method <name4> .encode with an argument string <val1> , on the return value call the <name6> method with string <val3> as argument , substitute the result for <name4> .
<name3> <name6> . validate_domain_part ( <name4> ) :	<name3> method <name6> .validate_domain_part with an argument <name4> evaluates to true ,
<name1>	<name1> nothing .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
<name5> <name2> ( <name6> . message , <name4> = <name6> . <name4> )	<name5> a <name2> exception with arguments <name6> .message and <name4> set to <name6> .code .
def <name6> ( <name5> , <name1> ) :	define the method <name6> with arguments <name5> and <name1> .
<name4> <name3> . domain_regex . match ( <name1> ) :	call the <name3> .domain_regex .match method with an argument <name1> , <name4> it evaluates to true ,
<name5> <name4>	<name5> boolean <name4> .
<name6> = <name1> . literal_regex . match ( <name3> )	evaluate method <name1> .literal_regex .match with an argument <name3> , substitute the result for <name6> .
<name1> <name5> :	<name1> <name5> is true ,
<name6> = <name5> . group ( <val4> )	call the method <name5> .group with an integer <val4> , substitute the result for <name6> .
<name4> :	<name4> ,
<name6> ( <name4> )	call the function <name6> with an argument <name4> .
<name2> <name1>	<name2> boolean <name1> .
except <name2> :	if <name2> exception is caught ,
pass	do nothing .
<name6> <name4>	<name6> boolean <name4> .
def <name6> ( <name5> , <name3> ) :	define the method <name6> with arguments <name5> and <name3> .
return isinstance ( <name6> , <name4> ) <name3> ( <name2> . domain_whitelist == <name6> . domain_whitelist ) <name3> ( <name2> . message == <name6> . message ) <name3> ( <name2> . code == <name6> . code )	if <name6> is instance of <name4> <name3> , <name2> .domain_whitelist equals to <name6> .domain_whitelist ,
<name5> = <name6> ( )	and self .message equals to other .message , and self .code equals to other .code , return boolean True , otherwise return boolean False . <name5> is an instance of <name6> class .
<name6> = <name1> . compile ( r <val2>   )	call the <name1> .compile function with an argument raw string <val2> , substitute the result for <name6> .
"<name6> = <name4> ( <name5> , _ ( ""Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens."" ) , 'invalid'   )"	<name6> is a instance of a <name4> class , created with 3 arguments : <name5> , return value of the call to the function ,
\ ipv4_re = <name3> . compile ( r <val1>   ) \	"\ _ with an argument string ""Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens."" , and string 'invalid' . call the <name3> .compile function with an argument raw string <val1> , \"
<name2> = <name3> ( <name6> , _ ( 'Enter a valid IPv4 address.'   ) , 'invalid'   )	substitute the result for <name6> . <name2> is a instance of a <name3> class , created with 3 arguments : <name6> ,
def <name5> ( <name1> ) :	return <name1> of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid' . define the function <name5> with an argument <name1> .
<name3> not <name6> ( <name1> ) :	call the function <name6> with an argument <name1> , <name3> it evaluates to false ,
<name3> <name6> ( <name5> ( <val4>   ) , <name1> = <val2>   )	<name3> a <name6> exception with 2 arguments : return value of the function <name5> called with an argument string <val4> , and <name1> set to string <val2> .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name1> :	<name1> ,
<name2> ( <name5> )	call the function <name2> with an argument <name5> .
except <name5> :	if <name5> exception is caught ,
<name2> :	<name2> ,
<name3> ( <name5> )	call the function <name3> with an argument <name5> .
except <name6> :	if <name6> exception is caught ,
<name3> <name5> ( <name2> ( <val1>   ) , <name4> = <val6>   )	<name3> a <name5> exception with 2 arguments : return value of the function <name2> called with an argument string <val1> , and <name4> set to string <val6> .
<name5> = {   <val1>   : ( [ <name4> ] , <name2> ( <val6>   ) ) , 'ipv4'   : ( [ validate_ipv4_address ] , <name2> ( 'Enter a valid IPv4 address.'   ) ) , 'ipv6'   : ( [ validate_ipv6_address ] , <name2> ( 'Enter a valid IPv6 address.'   ) ) , }	<name5> is a dictionary containing 3 initial entries : tuple containing 2 elements : list with an element , <name4> and return value of the function <name2> with an argument string <val6> for <val1> ,
def <name5> ( <name1> , <name6> ) :	tuple containing 2 elements : list with an element validate_ipv4_address and return value of the function _ with an argument string , 'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements : list with an element validate_ipv6_address , and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6' . define the function <name5> with arguments <name1> and <name6> .
<name1> <name4> != <val3>   <name6> <name5> :	<name1> <name4> is not equal to string <val3> <name6> <name5> is true ,
<name3> :	<name3> ,
<name4> <name1> [ <name6> . lower ( ) ]	convert <name6> to lowercase , use it as a key to get a value from the <name1> dictionary , <name4> it .
except <name6> :	if <name6> exception is caught ,
<name3> <name6> ( <val1> % ( <name4> , list ( ip_address_validator_map ) ) )	<name3> a <name6> exception with an argument <val1> , replace '%s' with <name4> ,
\ <name6> = <name4> . compile ( <val3>   ) \	\ and ip_address_validator_map converted to a list , respectively . call the <name4> .compile function with an argument raw string <val3> , substitute the result for <name6> . \
<name4> = <name3> ( <name6> , _ ( 'Enter only digits separated by commas.'   ) , 'invalid'   )	<name4> is a instance of a <name3> class , created with 3 arguments : <name6> ,
@  <name3>	return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid' . decorator <name3> ,
<name2> <name4> ( <name5> ) :	derive the <name2> <name4> form the <name5> base <name2> .
<name1> = <name5> <name4> , <name6> , <name3> : <name6> <name2> <name1> <name3>	<name1> <name2> <name6> <name5> function with arguments <name4> , <name6> and <name3> , return value <name2> boolean True if <name6> <name2> <name1> <name3> , otherwise it <name2> False .
<name4> = <name5> <name6> , <name1> : <name1>	<name4> is a <name5> function with arguments <name6> and <name1> , return value is <name1> .
<name6> = <name5> ( <val3>   )	call the function <name5> with the argument string <val3> , substitute the result for <name6> .
<name2> = <val5>	<name2> is a string <val5>
def <name3> ( <name6> , <name2> ) :	define the method <name3> with <name6> and <name2> as arguments .
<name2> . <name5> = <name5>	substitute the <name5> for <name2> .limit_value .
def <name3> ( <name5> , <name1> ) :	define the method <name3> with arguments <name5> and <name1> .
<name4> = <name3> . clean ( <name5> )	call the method <name3> .clean with <name5> as argument , substitute the result for <name4> .
<name4> = {  <val5>   : <name6> . limit_value , <val2>   : <name3> }	<name4> is a dictionary with 2 initial entries : <name6> .limit_value for <val5> and <name3> for <val2> .
<name1> <name3> . compare ( <name5> , <name3> . limit_value ) :	call the <name3> .compare method with arguments <name5> and <name3> .limit_value , <name1> it evaluates to true ,
<name2> <name5> ( <name4> . message , <name1> = <name4> . <name1> , <name3> = <name3> )	<name2> a <name5> exception with arguments <name4> .message , <name1> set to <name4> .code and <name3> set to <name3> .
def <name5> ( <name2> , <name4> ) :	define the method <name5> with arguments <name2> and <name4> .
return isinstance ( <name5> , <name1> . __class__ ) <name3> ( <name1> . limit_value == <name5> . limit_value ) <name3> ( <name1> . message == <name5> . message ) <name3> ( <name1> . code == <name5> . code )	if <name5> is an instance of <name1> .__class__ <name3> , <name1> .limit_value equals to <name5> .limit_value , <name3> <name1> .message equals to <name5> .message ,
@  <name6>	and self .code equals to other .code , return boolean True , otherwise return boolean False . decorator <name6> ,
<name3> <name1> ( <name2> ) :	derive the <name3> <name1> form the <name2> base <name3> .
<name2> = <name6> <name1> , <name5> , <name3> : <name5> >  <name3>	<name2> is <name5> <name6> function with arguments <name1> , <name5> and <name3> , return value is boolean true if <name5> is greater than <name3> , otherwise is false .
<name2> = <name3> ( <val4>   )	call the function <name3> with an argument string <val4> , substitute the result for <name2> .
<name5> = <val4>	<name5> is a string <val4>
@  <name4>	decorator <name4> ,
<name5> <name6> ( <name4> ) :	derive the <name5> <name6> form the <name4> base <name5> .
<name2> = <name3> <name6> , <name1> , <name5> : <name1> <  <name5>	<name2> is <name1> <name3> function with arguments <name6> , <name1> and <name5> , return value is boolean true if <name1> is lesser than <name5> , otherwise is false .
<name3> = <name6> ( <val5>   )	call the function <name6> with an argument string <val5> , substitute the result for <name3> .
<name1> = <val5>	<name1> is a string <val5>
@  <name6>	decorator <name6> ,
<name1> <name6> ( <name4> ) :	derive the <name1> <name6> form the <name4> base <name1> .
<name2> = <name6> <name5> , <name3> , <name4> : <name3> <  <name4>	<name2> is <name3> <name6> function with arguments <name5> , <name3> and <name4> , return value is boolean true if <name3> is lesser than <name4> , otherwise is false .
<name1> = <name6> <name5> , <name3> : len ( <name3> )	<name1> is a <name6> function with <name5> and <name3> as arguments , return value is length of <name3> .
message = <name2> ( 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).'   , 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).'   , 'limit_value'   )	call the function <name2> with 3 arguments : string ' Ensure this value has at least % ( limit_value ) d character ( it has % ( show_value ) d ) ,
<name5> = <val3>	string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value' , substitute the result for message . <name5> is a string <val3>
@  <name2>	decorator <name2> ,
<name2> <name1> ( <name3> ) :	derive the <name2> <name1> form the <name3> base <name2> .
<name1> = <name6> <name2> , <name3> , <name4> : <name3> >  <name4>	<name1> is <name3> <name6> function with arguments <name2> , <name3> and <name4> , return value is boolean true if <name3> is greater than <name4> , otherwise is false .
<name1> = <name3> <name5> , <name4> : len ( <name4> )	<name1> is a <name3> function with <name5> and <name4> as arguments , return value is length of <name4> .
message = <name6> ( 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).'   , 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).'   , 'limit_value'   )	call the function <name6> with 3 arguments : string ' Ensure this value has at most % ( limit_value ) d character ( it has % ( show_value ) d ) ,
<name4> = <val3>	string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value' , substitute the result for message . <name4> is a string <val3>
<name1> <name2>	<name1> module <name2> .
<name4> <name2> . core . handlers . wsgi <name1> <name5>	<name4> <name2> .core .handlers .wsgi <name1> <name5> into default name space .
def <name5> ( ) :	define the function <name5> .
<name1> . setup ( )	call the <name1> .setup method .
<name3> <name5> ( )	<name3> <name5> object .
<name4> <name5> . core . exceptions <name1> <name6>	<name4> <name5> .core .exceptions <name1> <name6> into default name space .
<name6> <name3> . forms . fields <name2> *	<name6> <name3> .forms .fields <name2> everything into default name space .
<name6> <name2> . forms . forms <name4> *	<name6> <name2> .forms .forms <name4> everything into default name space .
<name2> <name5> . forms . formsets <name1> *	<name2> <name5> .forms .formsets <name1> everything into default name space .
<name2> <name5> . forms . models <name1> *	<name2> <name5> .forms .models <name1> everything into default name space .
<name4> <name3> . forms . widgets <name1> *	<name4> <name3> .forms .widgets <name1> everything into default name space .
<name2> <name6> . forms . extras . widgets <name5> <name4>	<name2> <name6> .forms .extras .widgets <name5> <name4> into default name space .
<name4> = [ <val1>   ]	<name4> is an list containing string <val1> .
<name2> <name1> <name4> <name6>	<name2> <name1> <name4> <name6> into default name space .
<name5> <name2>	<name5> module <name2> .
<name4> <name5>	<name4> module <name5> .
<name5> <name6> . forms . widgets <name3> <name2> , <name1>	<name5> <name6> .forms .widgets <name3> <name2> and <name1> into default name space .
<name5> <name4> . utils <name2> <name1>	<name5> <name4> .utils <name2> <name1> into default name space .
<name6> <name4> . utils . dates <name3> <name1>	<name6> <name4> .utils .dates <name3> <name1> into default name space .
<name5> <name4> . utils . encoding <name6> <name3>	<name5> <name4> .utils .encoding <name6> <name3> into default name space .
<name1> <name3> . utils . safestring <name2> <name4>	<name1> <name3> .utils .safestring <name2> <name4> into default name space .
<name3> <name6> . utils . formats <name2> <name5>	<name3> <name6> .utils .formats <name2> <name5> into default name space .
<name5> <name3> . utils <name2> <name1>	<name5> <name3> .utils <name2> <name1> into default name space .
<name2> <name3> . conf <name4> <name1>	<name2> <name3> .conf <name4> <name1> into default name space .
<name4> = ( <val3>   , )	<name4> is an tuple containing string <val3> .
\ <name5> = re . <name4> ( r <val6>   ) \	\ <name4> regex from the raw string <val6> , substitute it for <name5> . \
def <name4> ( ) :	define the function <name4> .
<name5> = <name2> ( <val1>   )	call the function <name2> with an argument string <val1> , substitute it for <name5> .
<name3> = <name1>	<name3> is boolean <name1> .
<name3> <name1> <name2> <name4> :	<name3> every <name1> <name2> <name4> ,
<name2> <name5> :	<name2> <name5> is true ,
<name5> = <name1>	<name5> is boolean <name1> .
\ elif char == '\\\\'  : \	\ otherwise if cahr equals a string '\\\\' , \
<name4> = <name1>	<name4> is boolean <name1> .
elif <name2> <name4> <val1>   :	otherwis if <name2> is contained <name4> string <val1> ,
<name2> <val3>	<name2> string <val3> as an return value of the generator .
elif <name4> <name2> <val3>   :	otherwise if <name4> is contained <name2> string <val3> ,
<name3> <val4>	<name3> string <val4> as an return value of the generator .
elif <name1> <name3> <val6>   :	otherwise if <name1> is contained <name3> string <val6> ,
<name1> <val5>	<name1> string <val5> as an return value of the generator .
<name6> <name1> ( <name4> ) :	derive the <name6> <name1> for the <name4> base <name6> .
<name2> = ( <val1> , <val4>   )	<name2> is a tuple containing 2 elements : integer <val1> and string <val4> .
<name6> = <val4>	<name6> is a string <val4> .
<name6> = <val3>	<name6> is a string <val3> .
<name3> = <val1>	<name3> is a string <val1> .
def <name1> ( <name6> , <name5> = <name3> , <name2> = <name3> , <name4> = <name3> , <name1> = <name3> ) :	define the method <name1> with 5 arguments : <name6> , <name5> set to <name3> , <name2> set to <name3> , <name4> set to <name3> and <name1> set to <name3> .
<name5> . <name3> = <name3> <name6> { }	if <name3> is not None substitute it for <name5> .attrs , <name6> if not <name5> .attrs is an empty dictionary .
<name5> <name6> :	<name5> <name6> is true ,
<name2> . <name6> = <name6>	substitute <name6> for <name2> .years .
else :	if not ,
<name1> = <name4> . date . today ( ) . <name5>	call the function <name4> .date .today , substitute the <name5> field of the result for <name1> .
<name3> . years = range ( <name5> , <name5> + <val4> )	<name3> .years is list containing <val4> successive integers from <name5> .
<name6> <name4> :	<name6> <name4> is true ,
<name3> . <name6> = <name6>	substitute <name6> for <name3> .months .
else :	if not ,
<name4> . months = <name6>	substitute <name6> for <name4> .months .
<name4> isinstance ( <name3> , ( <name1> , <name5> ) ) :	<name4> <name3> is an instance of <name1> or <name5> type ,
<name3> <name6> len ( <name5> ) == <val1> :	<name3> length of <name5> is <name6> equal to integer <val1> .
<name3> <name2> ( <val5>   )	<name3> an <name2> with an argument string <val5> .
<name6> . year_none_value = ( <val4> , <name1> [ <val4> ] )	<name6> .year_none_value is a tuple containing 2 elements : integer <val4> and first element of <name1> .
<name6> . month_none_value = ( <val2> , <name3> [ 1 ] )	<name6> .month_none_value is a tuple containing 2 elements : integer <val2> and second element of <name3> .
<name5> . day_none_value = ( <val4> , <name2> [ <val3> ] )	<name5> .day_none_value is a tuple containing <val3> elements : integer <val4> and third element of <name2> .
else :	if not ,
<name1> <name6> <name5> <name2> <name4> :	<name1> <name6> <name5> <name2> <name4> ,
<name6> . none_value = ( <val4> , <name2> )	<name6> .none_value is a tuple containing 2 elements : integer <val4> and <name2> .
<name6> . year_none_value = <name6> . none_value	substitute <name6> .none_value for <name6> .year_none_value .
<name3> . month_none_value = <name3> . none_value	substitute <name3> .none_value for <name3> .month_none_value .
<name6> . day_none_value = <name6> . none_value	substitute <name6> .none_value for <name6> .day_none_value .
def <name5> ( <name6> , <name1> , <name4> , <name2> = <name3> ) :	define the method <name5> with 4 arguments : <name6> , <name1> , <name4> and <name2> set to <name3> .
<name6> :	<name6> ,
<name1> , <name2> , <name3> = <name5> . year , <name5> . month , <name5> . day	substitute <name5> .year , <name5> .month and <name5> .day for <name1> , <name2> and <name3> , respectively .
except <name3> :	if <name3> exception is caught ,
<name6> = <name5> = <name2> = <name1>	<name6> and <name5> and <name2> are set to <name1> .
<name2> isinstance ( <name4> , <name6> . string_types ) :	<name2> <name4> is an instance of <name6> .string_types ,
<name4> <name2> . USE_L10N :	<name4> <name2> .USE_L10N is true ,
<name5> :	<name5> ,
     <name3> = <name5> ( <val1>   ) [ 0 ]	call the function <name5> with an argument string <val1> , substitute the first element of the result for <name3> .
v = <name5> . <name5> . strptime ( <name4> ( <name6> ) , input_format )	call the method <name5> .datetime .strptime with 2 arguments : return <name6> of the function <name4> called with an argument <name6> ,
<name1> , <name2> , <name6> = <name4> . year , <name4> . month , <name4> . day	and input_format , substitute the result for <name4> . substitute <name4> .year , <name4> .month and <name4> .day for <name1> , <name2> and <name6> , respectively .
except <name5> :	if <name5> exception is caught ,
     pass	do nothing .
else :	if not ,
<name2> = <name6> . <name2> ( <name5> )	call the method <name6> .match with an argument <name5> , substitute the result for <name2> .
<name1> <name5> :	<name1> <name5> is true ,
     year_val , month_val , day_val = [ int ( <name3> ) <name6> <name3> <name5> <name4> . groups ( ) ]	<name6> <name3> <name5> return value of the function <name4> .groups , convert <name3> into an integer and append i to a list ,
<name4> = { }	assign the result for year_val , month_val and day_val , respectively . <name4> is an empty dictionary .
<name2> = [ ( <name6> , <name6> ) <name1> <name6> <name5> <name3> . years ]	<name1> every <name6> <name5> <name3> .years append tuple containing <name6> and <name6> elements into a list , substitute the resulting string <name1> <name2> .
html [ 'year'   ] = <name1> . create_select ( <name6> , <name1> . year_field , <name2> , <name5> , <name3> , <name1> . year_none_value )	call the method <name1> .create_select with 6 arguments : <name6> , <name1> .year_field , <name2> , <name5> , <name3> and <name1> .year_none_value ,
<name5> = <name6> ( <name1> . iteritems ( <name4> . months ) )	substitute the result for the value under the 'year' key of the html dictionary . call the function <name1> .iteritems with an argument <name4> .months , convert the result to a <name6> and substitute it for <name5> .
html [ 'month'   ] = <name2> . create_select ( <name3> , <name2> . month_field , <name5> , <name1> , <name4> , <name2> . month_none_value )	call the method <name2> .create_select with 6 arguments : <name3> , <name2> .month_field , <name5> , <name1> , <name4> and <name2> .month_none_value ,
choices = [ ( <name5> , <name5> ) <name6> <name5> <name4> range ( <val2> , 32 ) ]	substitute the result <name6> the value under the 'month' key of the html dictionary . <name6> every <name5> <name4> successive list of integers from <val2> to 30 , append tuple containing <name5> and <name5> elements into a list ,
html [ 'day'   ] = <name5> . create_select ( <name3> , <name5> . day_field , <name6> , <name2> , <name1> , <name5> . day_none_value )	substitute the resulting string for <name1> . call the method <name5> .create_select with 6 arguments : <name3> , <name5> .year_field , <name6> , <name2> , <name1> and <name5> .day_none_value ,
<name6> = [ ]	substitute the result for the value under the 'day' key of the html dictionary . <name6> is an empty list .
<name2> <name1> <name6> <name3> ( ) :	<name2> every <name1> <name6> return value of the function <name3> ,
<name5> . <name4> ( <name6> [ <name1> ] )	get the value under the <name1> key of the <name6> dictionary , <name4> it to <name5> .
\ <name2> <name3> ( '\\n'   . <name5> ( <name4> ) ) \	<name5> <name4> into a string , separated by newline characters , use it as an argument for the call to the <name3> , <name2> the result .
def <name6> ( <name2> , id_ ) :	define the method <name6> with arguments <name2> and id .
<name2> <name6> <name5> <name1> ( ) :	<name2> every <name6> <name5> return value of the function <name1> .
<name5> <val1>   % ( <name2> , <name3> )	substitute '%s' in string <val1> with <name2> and <name3> , <name5> it .
else :	if not ,
<name2> '%s_month'   % id_	convert if into a string append to it a string '_month' , <name2> the result .
def value_from_datadict ( <name3> , <name6> , <name1> , <name4> ) :	define the method id_for_label with arguments <name3> , <name6> , <name1> and <name4> .
<name4> = <name6> . get ( <name1> . year_field % <name5> )	format <name1> .year_field string with <name5> , use it as the key for the <name6> dictionary , substitute the result for <name4> .
<name4> = <name2> . get ( <name1> . month_field % <name5> )	format <name1> .month_field string with <name5> , use it as the key for the <name2> dictionary , substitute the result for <name4> .
<name1> = <name5> . get ( <name6> . day_field % <name3> )	format <name6> .day_field string with <name3> , use it as the key for the <name5> dictionary , substitute the result for <name1> .
<name3> <name2> == <name4> == <name5> == <val1> :	<name3> <name2> , <name4> and <name5> are all equal to string <val1> ,
<name6> <name1>	<name6> <name1> .
<name1> <name5> <name2> <name4> <name2> <name3> :	<name1> <name5> <name2> <name4> <name2> <name3> are all true ,
<name6> <name3> . USE_L10N :	<name6> <name3> .USE_L10N is true ,
<name6> = <name3> ( <val4>   ) [ 0 ]	call the function <name3> with an argument string <val4> , substitute the first element of the result for <name6> .
<name3> :	<name3> ,
<name6> = <name5> . date ( int ( <name1> ) , int ( <name4> ) , int ( <name3> ) )	call the function <name5> .date with 3 arguments : <name1> , <name4> and <name3> all converted into a integers , substitute the result for <name6> .
except <name1> :	if <name1> exception is caught ,
<name1> <val3>   % ( <name6> , <name2> , <name4> )	substitute '%s' in string <val3> with <name6> , <name2> and <name4> , <name1> the result .
else :	if not ,
<name2> = <name1> . new_date ( <name2> )	call the method <name1> .new_date with an argument <name2> , substitute the result for <name2> .
<name1> <name6> . strftime ( <name4> )	call the method <name6> .strftime with an argument <name4> , <name1> the result .
else :	if not ,
<name1> <val5>   % ( <name2> , <name3> , <name6> )	substitute '%s' in string <val5> with <name2> , <name3> and <name6> , <name1> the result .
<name1> <name4> . <name5> ( <name6> , <name3> )	<name5> the <name6> key of the <name4> dictionary , if the key exists <name1> it , if not <name1> <name3> .
def create_select ( <name4> , <name2> , <name3> , <name5> , <name6> , <name1> , <name4> ) :	define the method id_for_label with arguments <name4> , <name2> , <name3> , <name5> , <name6> , <name1> and <name4> .
<name1> <val6>   <name3> <name5> . attrs :	<name1> <val6> is contained <name3> <name5> .attrs ,
<name6> = <name1> . <name4> [ <val2>   ]	get the value under the <val2> key of the <name4> dictionary , substitute the return value field of the <name1> object for <name6> .
else :	if not ,
id_ = <val3>   % <name6>	substitute '%s' in string <val3> with <name6> , return it .
<name5> not <name3> . is_required :	<name5> <name3> .is_required is false ,
<name1> . <name6> ( 0 , <name3> )	<name6> <name3> at the beginning of the <name1> list .
<name4> = <name1> . build_attrs ( <name2> = <name3> % <name6> )	call the method <name1> .build_attrs with an argument <name2> set to <name3> modulus <name6> , substitute the result for <name4> .
<name6> = <name5> ( <name3> = <name3> )	<name6> is an instance of the <name5> class , created with <name3> set to <name3> .
<name6> = <name3> . render ( <name5> % <name4> , <name2> , <name1> )	call the method <name3> .render with 3 arguments : <name5> string formated with <name4> , <name2> and <name1> , substitute the result for <name6> .
<name5> <name6>	<name5> <name6> .
<name5> <name4> <name3> <name2>	<name5> <name4> <name3> <name2> into default name space .
<name1> <name6>	<name1> module <name6> .
<name4> <name5>	<name4> module <name5> .
<name1> <name4>	<name1> module <name4> .
<name3> <name2>	<name3> module <name2> .
<name2> <name4>	<name2> module <name4> .
<name1> <name3>	<name1> module <name3> .
<name2> <name4> <name1> <name5> , <name6>	<name2> <name4> <name1> <name5> and <name6> into default name space .
<name6> <name4> <name1> <name5>	<name6> <name4> <name1> <name5> into default name space .
<name1> <name2> . core <name5> <name4>	<name1> <name2> .core <name5> <name4> into default name space .
<name6> <name4> . core . exceptions <name1> <name3>	<name6> <name4> .core .exceptions <name1> <name3> into default name space .
<name3> <name6> . forms . utils <name1> <name5> , <name4>	<name3> <name6> .forms .utils <name1> <name5> and <name4> into default name space .
<name4> <name5> . forms . widgets <name2> ( <name6> , <name3> , <name1> , <name4> , <name5> , <name2> , <name6> , CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION )	<name4> <name5> .forms .widgets <name2> <name6> , <name3> , <name1> , <name4> , <name5> , <name2> , <name6> ,
<name1> <name4> . utils <name5> <name3>	CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION . <name1> <name4> .utils <name5> <name3> into default name space .
<name2> <name4> . utils . encoding <name1> <name3> , <name5> , <name6>	<name2> <name4> .utils .encoding <name1> <name3> , <name5> and <name6> into default name space .
<name1> <name2> . utils . ipv6 <name5> <name6>	<name1> <name2> .utils .ipv6 <name5> <name6> into default name space .
<name4> <name3> . utils . deprecation <name1> <name2>	<name4> <name3> .utils .deprecation <name1> <name2> into default name space .
<name1> <name5> . utils <name6> <name4>	<name1> <name5> .utils <name6> <name4> into default name space .
<name2> <name3> . utils . six . moves . urllib . parse <name4> <name1> , <name5>	<name2> <name3> .utils .six .moves .urllib .parse <name4> <name1> and <name5> into default name space .
<name5> <name6> . utils . translation <name1> <name2> <name4> <name3> , <name5>	<name5> <name6> .utils .translation <name1> <name2> <name4> <name3> and <name5> into default name space .
<name3> <name6> . core . validators <name5> <name1>	<name3> <name6> .core .validators <name5> <name1> into default name space .
<name1> = ( <val6>   , <val2>   , <val5>   , <val4>   , <val3>   , <val1>   , <val6>   , 'EmailField'   , 'FileField'   , 'ImageField'   , 'URLField'   , 'BooleanField'   , 'NullBooleanField'   , 'ChoiceField'   , 'MultipleChoiceField'   , 'ComboField'   , 'MultiValueField'   , 'FloatField'   , 'DecimalField'   , 'SplitDateTimeField'   , 'IPAddressField'   , 'GenericIPAddressField'   , 'FilePathField'   , 'SlugField'   , 'TypedChoiceField'   , 'TypedMultipleChoiceField'    )	<name1> a tuple containing strings : <val6> , <val2> , <val5> , <val4> , <val3> , <val1> , <val6> ,
<name2> <name5> ( <name1> ) :	'EmailField' , 'FileField' , 'ImageField' , 'URLField' , 'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' , 'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' , 'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' , 'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField' . derive the <name2> <name5> from the base <name2> <name1> .
<name1> = <name3>	substitute substitute <name3> for <name1> .
<name2> = <name3>	substitute <name3> for <name2> .
<name5> = [ ]	<name5> is an empty list .
<name2> = {   <val3>   : <name1> ( <val6>   ) , }	<name2> is an dictionary containing entry : return value of the function <name1> called with an string <val6> for <val3> .
<name4> = <name2> ( <name3> . EMPTY_VALUES )	put elements of <name3> .EMPTY_VALUES to a <name2> , substitute the result for <name4> .
<name1> = <val6>	<name1> is an integer <val6> .
def <name5> ( <name2> , <name1> = <name6> , <name3> = <name4> , <name5> = <name4> , initial = <name4> , help_text = ''   , error_messages = <name4> , show_hidden_initial = False , validators = [ ] , localize = False , label_suffix = <name4> ) :	define the function <name5> with 11 arguments : <name2> , <name1> set to boolean <name6> , <name3> set to <name4> , <name5> set to <name4> ,
           <name2> . <name3> , <name2> . <name5> , <name2> . <name6> = <name3> , <name5> , <name6>	<name6> set to None , help_text set to an empty string , error_messages set to None , show_hidden_initial set to boolean False , validators is an empty , localize set to boolean False , label_suffix set to None . substitute <name3> , <name5> and <name6> for <name2> .required , <name2> .label and <name2> .initial .
<name2> . <name3> = <name3>	substitute <name3> for <name2> .show_hidden_initial .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .help_text .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .label_suffix .
<name5> = <name5> or <name4> . <name5>	substitute <name4> .widget if the <name5> is false , otherwise substitute <name5> for <name5> .
<name4> isinstance ( <name1> , <name2> ) :	<name4> <name1> is an instance of <name2> class ,
<name6> = <name6> ( )	call the function <name6> , substitute the result for <name6> .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .localize .
<name1> <name4> . localize :	<name1> <name4> .localize is true ,
<name3> . is_localized = <name1>	<name3> .is_localized is boolean <name1> .
<name4> . is_required = <name3> . required	substitute <name3> .required for <name4> .is_required .
<name4> = <name5> . widget_attrs ( <name3> )	call the method <name5> .widget_attrs with an argument <name3> , substitute the result for <name4> .
<name2> <name6> :	<name2> <name6> is true ,
<name4> . attrs . <name3> ( <name2> )	<name3> <name4> .attrs dictionary with <name2> .
<name2> . <name5> = <name5>	substitute <name5> for <name2> .widget .
<name5> . creation_counter = <name2> . creation_counter	substitute <name2> .creation_counter for <name5> .creation_counter .
<name6> . creation_counter += 1	increment <name6> .creation_counter by one .
<name2> = { }	<name2> is an empty dictionary .
<name1> <name3> <name2> <name5> ( <name6> . __class__ . __mro__ ) :	<name1> every <name3> <name2> <name5> order of <name6> .__class__ .__mro__ ,
messages . update ( getattr ( <name6> , <val2>   , { }  ) )	get <val2> from the <name6> object , if it doesnt exists return an empty dictionary ,
<name2> . <name1> ( <name5> or { }  )	use the result as the argument for the call to the <name2> .update function . <name1> <name2> dictionary with <name5> , if it exists , if not don ' t <name1> it .
<name4> . error_messages = <name3>	substitute <name3> for <name4> .error_messages .
<name5> . <name6> = <name5> . default_validators + <name6>	add <name5> .default_validators and <name6> , substitute the result for <name5> .validators .
super ( <name3> , self ) . <name6> ( )	call the method <name6> from the base class of the <name3> class .
def <name3> ( <name2> , <name1> ) :	define the method <name3> with arguments : <name2> and <name1> .
<name3> <name6>	<name3> <name6> .
def <name4> ( <name3> , <name5> ) :	define the method <name4> with arguments <name3> and <name5> .
<name2> <name3>	<name2> <name3> .
def validate ( <name6> , <name3> ) :	define the method to_python with arguments <name6> and <name3> .
<name1> <name2> <name5> <name6> . empty_values <name4> <name6> . required :	<name1> <name2> is contained <name5> <name6> .empty_values <name4> <name6> .required is true ,
<name2> <name6> ( <name3> . error_messages [ <val5>   ] , <name4> = <val5>   )	<name2> an <name6> with 2 arguments : value under the <val5> key of the <name3> .error_messages dictionary and <name4> set to string <val5> .
def <name5> ( <name4> , <name6> ) :	define the method <name5> with arguments <name4> and <name6> .
<name4> <name3> <name2> <name5> . empty_values :	<name4> <name3> is contained <name2> <name5> .empty_values ,
<name4>	<name4> nothing ,
<name4> = [ ]	<name4> is an empty list .
<name1> <name5> <name4> <name6> . validators :	<name1> every <name5> <name4> <name6> .validators ,
<name2> :	<name2>
<name3> ( <name4> )	call the function <name3> with an argument <name4> .
except <name2> as <name4> :	if <name2> , substituted for <name4> , exception is caught ,
<name2> hasattr ( <name3> , <val5>   ) <name1> <name3> . code <name4> <name6> . error_messages :	<name2> <name3> has an attribute <val5> <name1> <name3> .code is contained <name4> <name6> .error_messages ,
<name6> . message = <name2> . error_messages [ <name6> . code ]	get the value under the <name6> .code key of the <name2> .error_messages dictionary , substitute the result for <name6> .message .
<name4> . <name2> ( <name5> . error_list )	<name2> <name4> list with <name5> .error_list .
<name4> <name6> :	<name4> <name6> is true ,
<name5> <name2> ( <name3> )	<name5> an <name2> exception with an argument <name3> ,
def <name4> ( <name3> , <name5> ) :	define the method <name4> with arguments <name3> and <name5> .
<name2> = <name4> . to_python ( <name2> )	call the method <name4> .to_python with an argument <name2> , substitute it for <name2> .
<name3> . validate ( <name6> )	call the method <name3> .validate with an argument <name6> .
<name3> . run_validators ( <name5> )	call the method <name3> .run_validators with an argument <name5> .
<name1> <name4>	<name1> <name4> .
def <name6> ( <name4> , <name3> , <name5> ) :	define the method <name6> with arguments <name4> , <name3> and <name5> .
<name1> <name6>	<name1> <name6> .
def <name5> ( <name6> , <name1> ) :	define the method <name5> with arguments <name6> and <name1> .
<name2> { }	<name2> is empty dictionary .
def <name3> ( <name4> ) :	define the method <name3> with arguments <name4> .
<name3> <name6> ( <name2> . limit_choices_to ) :	<name3> <name2> .limit_choices_to object is <name6> ,
<name5> <name6> . limit_choices_to ( )	call the method <name6> .limit_choices_to , <name5> the result ,
<name4> <name6> . limit_choices_to	<name4> <name6> .limit_choices_to .
def <name6> ( <name2> , <name1> , <name4> ) :	define the method <name6> with arguments <name2> , <name1> and <name4> .
<name4> = <name3> <name6> <name3> <name1> <name5> <name2> else ''	substitute <name3> for <name4> , <name6> <name3> <name1> <name5> <name2> , <name6> <name5> , <name4> <name1> an empty string .
<name5> :	<name5> ,
<name2> = <name5> . to_python ( <name2> )	call the function <name5> .to_python with an argument <name2> , substitute the result for <name2> .
<name1> hasattr ( <name3> , <val5>   ) :	<name1> <name3> has an attribute <val5> ,
<name5> = <name3> . _coerce ( <name5> )	call the method <name3> ._coerce with an argument <name5> , substitute the result for <name5> .
except <name3> :	if <name3> exception is caught ,
<name2> <name3>	<name2> boolean <name3> .
<name2> = <name1> <name3> <name1> <name5> <name6> <name4> else ''	substitute <name1> for <name2> <name3> <name1> <name5> <name6> <name4> , otherwise <name2> <name5> an empty list .
<name1> <name2> != <name6>	if <name2> is not equal to <name6> , <name1> boolean True , otherwise <name1> boolean False .
def <name3> ( <name2> , <name6> ) :	define the method <name3> with arguments <name2> and <name6> .
<name3> = <name5> . <name5> ( <name6> )	call the method <name5> .copy with an argument <name6> , substitute the <name3> for <name3> .
<name1> [ id ( <name4> ) ] = <name3>	substitute <name3> for the value of the <name1> dictionary , with identity of the <name4> object as an key .
<name3> . widget = <name6> . deepcopy ( <name1> . widget , <name4> )	call the method <name6> .deepcopy with arguments <name1> .widget and <name4> , substitute the <name3> for <name3> .widget .
<name2> . validators = <name4> . validators [ : ]	substitute elements of <name4> .validators list for <name2> .validators .
<name3> <name1>	<name3> <name1> .
<name1> <name3> ( <name2> ) :	derive the <name1> <name3> from the base <name1> <name2> <name1> .
def <name4> ( <name3> , <name1> = <name5> , <name2> = <name5> , * <name6> , ** kwargs ) :	define the method <name4> with 5 arguments : <name3> , <name1> set to <name5> , <name2> set to <name5> , unpacked list <name6> ,
<name5> . <name1> , <name5> . <name2> = <name1> , <name2>	and unpacked dictionary kwargs . substitute <name1> and <name2> for <name5> .max_length for <name5> .min_length .
super ( <name4> , self ) . <name2> ( * <name5> , ** <name6> )	call the method <name2> from the base class of the class <name4> , with arguments unpacked list <name5> and unpacked dictionary <name6> .
<name6> <name3> <name1> <name4> <name5> :	<name6> <name3> <name1> <name4> <name5> ,
<name2> . <name6> . <name3> ( <name6> . MinLengthValidator ( int ( <name4> ) ) )	call the method <name6> .MinLengthValidator with <name4> converted into an integer , <name3> the result to list <name2> .validators .
<name5> <name3> <name2> <name4> <name1> :	<name5> <name3> <name2> <name4> <name1> ,
<name1> . <name4> . <name3> ( <name4> . MaxLengthValidator ( int ( <name6> ) ) )	call the method <name4> .MaxLengthValidator with <name6> converted into an integer , <name3> the result to list <name1> .validators .
def <name3> ( <name4> , <name1> ) :	define the method <name3> with arguments <name4> and <name1> .
<name5> <name3> <name2> <name4> . empty_values :	<name5> <name3> <name2> <name4> .empty_values ,
<name6> ''	<name6> an empty string .
<name2> <name5> ( <name1> )	evaluate the function <name5> with an argument <name1> , <name2> the result .
def <name6> ( <name1> , <name2> ) :	define the method <name6> with arguments <name1> and <name2> .
<name3> = super ( <name6> , self ) . <name5> ( <name4> )	call the method <name5> from the base class of the class <name6> , with an argument <name4> , substitute the result for <name3> .
<name6> <name4> . max_length <name3> <name5> <name1> :	<name6> <name4> .max_length <name3> <name5> <name1> ,
<name6> . <name4> ( {  <val1>   : str ( <name3> . max_length ) }  )	<name4> <name6> dictionary with entry : <name3> .max_length converted into a string for <val1> .
<name2> <name3>	<name2> <name3> .
<name6> <name5> ( <name1> ) :	derive the <name6> <name5> from the base <name6> <name1> <name6> .
<name5> = <name6>	substitute <name6> for <name5> .
<name6> = {   'invalid'   : <name2> ( 'Enter a whole number.'   ) , }	<name6> is an dictionary with an initial entry : result of the function <name2> called with an argument string ,
def <name3> ( <name2> , <name6> = <name5> , <name1> = <name5> , * <name4> , ** <name3> ) :	'Enter a whole number.' for 'invalid' . define the method <name3> with 5 arguments : <name2> , <name6> set to <name5> , <name1> set to <name5> , unpacked list <name4> and unpacked dictionary <name3> .
<name6> . <name5> , <name6> . <name2> = <name5> , <name2>	substitute <name5> and <name2> for <name6> .max_value and <name6> .min_value .
<name1> <name2> . <name4> ( <val6>   ) <name5> <name3> . widget == <name1> :	<name4> the value under the <val6> key of the <name2> dictionary , <name1> it is true <name5> <name3> .widget equals to <name1> ,
<name5> . setdefault ( <val1>   , super ( <name4> , self ) . <name2> )	if <val1> key of the <name5> dictionary doesnt exists assign it <name2> field of the base class of the <name4> class value .
super ( <name5> , self ) . <name1> ( * <name3> , ** <name2> )	call the method <name1> from the base class of the class <name5> , with arguments unpacked list <name3> and unpacked dictionary <name2> .
<name4> <name2> <name5> <name1> <name3> :	<name4> <name2> <name5> <name1> <name3> ,
<name4> . <name3> . <name5> ( <name3> . MaxValueValidator ( <name6> ) )	call the method <name3> .MaxValueValidator with <name6> converted into an integer , <name5> the result to list <name4> .validators .
<name6> <name4> <name1> <name3> <name5> :	<name6> <name4> <name1> <name3> <name5> ,
<name3> . <name5> . <name4> ( <name5> . MinValueValidator ( <name6> ) )	call the method <name5> .MinValueValidator with <name6> converted into an integer , <name4> the result to list <name3> .validators .
def <name2> ( <name4> , <name5> ) :	define the method <name2> with arguments <name4> and <name5> .
<name6> = super ( <name4> , self ) . <name1> ( <name6> )	call the method <name1> with an argument <name6> , from the base class of the <name4> class , substitute the result for <name6> .
<name3> <name4> <name1> <name5> . empty_values :	<name3> <name4> is contained <name1> <name5> .empty_values ,
<name1> <name5>	<name1> <name5> .
<name5> <name4> . localize :	<name5> <name4> .localize is true ,
<name3> = <name4> . sanitize_separators ( <name3> )	call the method <name4> .sanitize_separators with an argument <name3> , substitute the result for <name3> .
<name4> :	<name4> ,
<name4> = int ( str ( <name4> ) )	convert <name4> into an string , convert the result into an integer and substitute it for <name4> .
except ( <name2> , <name6> ) :	if <name2> or <name6> exceptions are caught ,
<name5> <name4> ( <name1> . error_messages [ <val6>   ] , <name3> = <val6>   )	<name5> an <name4> with 2 arguments : value under the <val6> key of the <name1> .error_messages dictionary and <name3> set to <val6> .
<name6> <name5>	<name6> <name5>
def <name4> ( <name2> , <name1> ) :	define the method <name4> with arguments <name2> and <name1> .
<name3> = super ( <name1> , self ) . <name6> ( <name4> )	call the method <name6> with an argument <name4> , from the base class of the class <name1> , substitute it for <name3> .
<name2> isinstance ( <name1> , <name3> ) :	<name2> <name1> is an instance of the <name3> ,
<name4> <name1> . min_value <name6> <name3> <name5> :	<name4> <name1> .min_value <name6> <name3> <name5> ,
<name6> [ <val2>   ] = <name4> . min_value	substitute <name4> .min_value for the value under the <val2> key of the <name6> dictionary .
<name3> <name2> . max_value <name5> <name1> <name6> :	<name3> <name2> .max_value <name5> <name1> <name6> ,
<name1> [ <val6>   ] = <name2> . max_value	substitute <name2> .max_value for the value under the <val6> key of the <name1> dictionary .
<name4> <name6>	<name4> <name6> .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from the base <name1> <name4> <name1> .
<name4> = {   'invalid'   : <name2> ( 'Enter a number.'   ) , }	<name4> is an dictionary with an initial entry : result of the function <name2> called with an argument string ,
def <name6> ( <name5> , <name3> ) :	'Enter a number.' for 'invalid' . define the method <name6> with arguments <name5> and <name3> .
<name1> = super ( <name2> , self ) . <name3> ( <name1> )	call the method <name3> with an argument <name1> , from the base class of the <name2> class , substitute the result for <name1> .
<name3> <name4> <name2> <name5> . empty_values :	<name3> <name4> is contained <name2> <name5> .empty_values ,
<name6> <name2>	<name6> <name2> .
<name5> <name1> . localize :	<name5> <name1> .localize is true ,
<name3> = <name4> . sanitize_separators ( <name3> )	call the method <name4> .sanitize_separators with an argument <name3> , substitute the result for <name3> .
<name5> :	<name5> ,
<name4> = float ( <name4> )	convert <name4> into an floating point number , substitute it for <name4> .
except ( <name6> , <name3> ) :	if <name6> or <name3> exceptions are caught ,
<name1> <name2> ( <name5> . error_messages [ <val4>   ] , <name3> = <val4>   )	<name1> an <name2> with 2 arguments : value under the <val4> key of the <name5> .error_messages dictionary and <name3> set to <val4> .
<name3> <name5>	<name3> <name5> .
def <name1> ( <name3> , <name5> ) :	define the method <name1> with arguments <name3> and <name5> .
super ( <name4> , self ) . <name2> ( <name3> )	call the method <name2> with an argument <name3> , from the base class of the <name4> class .
<name1> <name5> != <name5> <name3> <name5> <name4> ( <name6> ( <val2>   ) , <name6> ( <val1>   ) ) :	<name1> <name5> is Nan , <name3> <name5> is contained <name4> return <name5> of the <name6> called twice with string <val2> and with string <val1> ,
<name6> <name1> ( <name5> . error_messages [ <val3>   ] , <name2> = <val3>   )	<name6> an <name1> with 2 arguments : value under the <val3> key of the <name5> .error_messages dictionary and <name2> set to <val3> .
<name5> <name1>	<name5> <name1> .
def <name4> ( <name2> , <name6> ) :	define the method <name4> with arguments <name2> and <name6> .
<name1> = super ( <name3> , self ) . <name5> ( <name2> )	call the method <name5> with an argument <name2> , from the base class of the <name3> class , substitute the result for <name1> .
<name6> isinstance ( <name3> , <name1> ) <name4> <val2>   <name5> <name6> <name3> . attrs :	<name6> <name3> is an instance of the <name1> class , <name4> string <val2> is <name5> contained <name6> <name3> .attrs ,
<name3> . setdefault ( <val6>   , <val2>   )	if <val6> attribute of <name3> dictionary does not exists , set it to to string <val2> .
<name4> <name3>	<name4> <name3> .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from the base <name1> <name4> <name1> .
<name1> = {   'invalid'   : <name3> ( 'Enter a number.'   ) , 'max_digits'   : ungettext_lazy ( 'Ensure that there are no more than %(max)s digit in total.'   , 'Ensure that there are no more than %(max)s digits in total.'   , 'max'   ) , 'max_decimal_places'   : ungettext_lazy ( 'Ensure that there are no more than %(max)s decimal place.'   , 'Ensure that there are no more than %(max)s decimal places.'   , 'max'   ) , 'max_whole_digits'   : ungettext_lazy ( 'Ensure that there are no more than %(max)s digit before the decimal point.'   , 'Ensure that there are no more than %(max)s digits before the decimal point.'   , 'max'   ) , }	<name1> is a dictionary with 4 initial entries : return value of the function <name3> called with string as an argument ,
def <name4> ( <name6> , <name3> = <name2> , <name1> = <name2> , <name5> = <name2> , decimal_places = <name2> , * args , ** kwargs ) :	'Enter a number.' for 'invalid' , return value of the function ungettext_lazy called with 3 string arguments : 'Ensure that there are no more than %(max)s digit in total.' , 'Ensure that there are no more than %(max)s digits in total.' , and 'max' for 'max_digits' , return value of the function ungettext_lazy called with 3 string arguments : 'Ensure that there are no more than %(max)s decimal place.' , 'Ensure that there are no more than %(max)s decimal places.' and 'max' , for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments : 'Ensure that there are no more than %(max)s digit before the decimal point.' , 'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits' . define the method <name4> with 7 arguments : <name6> , <name3> set to <name2> , <name1> set to <name2> , <name5> set to <name2> ,
<name2> . <name5> , <name2> . <name3> = <name5> , <name3>	<name3> set to None , unpacked list args and unpacked dictionary kwargs . substitute <name5> and <name3> for <name2> .max_digits and <name2> .decimal_places .
super ( <name6> , self ) . <name4> ( <name5> , <name2> , * args , ** kwargs )	call the method <name4> from the base class of the class <name6> , with 4 arguments : <name5> , <name2> ,
def <name4> ( <name1> , <name2> ) :	unpacked list args and unpacked dictionary kwargs . define the method <name4> with arguments <name1> and <name2> .
<name6> <name5> <name3> <name1> . empty_values :	<name6> <name5> is contained <name3> <name1> .empty_values ,
<name4> <name1>	<name4> <name1> .
<name3> <name1> . localize :	<name3> <name1> .localize is true ,
<name5> = <name6> . sanitize_separators ( <name5> )	call the method <name6> .sanitize_separators with an argument <name5> , substitute the result for <name5> .
<name4> = <name5> ( <name4> ) . <name3> ( )	call the function <name5> with an argument <name4> , <name3> the result of whitespaces from both ends and substitute it for <name4> .
<name3> :	<name3> ,
<name1> = <name2> ( <name1> )	<name1> is an instance of a class <name2> created with <name1> as an argument .
except <name3> :	if <name3> exception is caught ,
<name3> <name6> ( <name5> . error_messages [ <val1>   ] , <name2> = <val1>   )	<name3> an <name6> with 2 arguments : value under the <val1> key of the <name5> .error_messages dictionary and <name2> set to <val1> .
<name6> <name1>	<name6> <name1> .
def <name6> ( <name1> , <name5> ) :	define the method <name6> with arguments <name1> and <name5> .
super ( <name1> , self ) . <name2> ( <name4> )	call the method <name2> with an argument <name4> from the base class of the <name1> class .
<name1> <name2> <name4> <name5> . empty_values :	<name1> <name2> is contained <name4> <name5> .empty_values ,
<name6>	<name6> nothing .
"<name4> <name6> != <name6> <name5> <name6> == <name2> ( <val3> ) <name5> <name6> == <name2> ( ""-Inf"" ) :"	<name4> <name6> is not equal to <name6> <name5> <name6> equals return <name6> of the call to <name2> with argument <val3> ,
<name5> <name6> ( <name3> . error_messages [ <val2>   ] , <name4> = <val2>   )	or value equals return value of the call to Decimal with argument '-Inf' <name5> an <name6> with 2 arguments : value under the <val2> key of the <name3> .error_messages dictionary and <name4> set to <val2> .
<name6> , <name3> , <name5> = <name1> . as_tuple ( )	call the method <name1> .as_tuple , assign the result to <name6> , <name3> and <name5> , respectively .
<name5> = abs ( <name3> )	substitute absolute value of the <name3> for <name5> .
<name4> = len ( <name5> )	substitute length of <name5> for <name4> .
<name6> <name5> >  <name2> :	<name6> <name5> is greater than <name2> ,
<name1> = <name5>	substitute <name5> for <name1> .
<name5> = <name1> - <name4>	subtract <name4> from <name1> , substitute the result for <name5> .
<name4> <name2> . max_digits <name3> <name1> <name5> <name6> <name4> >  <name2> . max_digits :	<name4> <name2> .max_digits <name3> <name1> <name5> <name6> <name4> <name3> grater than <name2> .max_digits ,
<name5> <name1> ( <name4> . error_messages [ <val3>   ] , code = <val3>   , params = {  'max'   : <name4> . max_digits }  , )	<name5> an <name1> with 3 arguments : value under the <val3> key of the <name4> .error_messages dictionary ,
<name4> <name6> . decimal_places <name3> <name2> <name1> <name5> <name4> >  <name6> . decimal_places :	code set to string 'max_digits' <name5> params set to a dictionary with an entry : <name6> .max_digits for 'max' . <name4> <name6> .decimal_places <name3> <name2> <name1> <name5> <name4> <name3> grater than <name6> .decimal_places :
<name4> <name1> ( <name2> . error_messages [ <val6>   ] , code = <val6>   , params = {  'max'   : <name2> . decimal_places }  , )	<name4> an <name1> with 3 arguments : value under the <val6> key of the <name2> .error_messages dictionary ,
<name1> ( <name2> . max_digits <name3> <name5> <name6> <name4> <name2> . decimal_places <name3> <name5> <name6> <name4> <name1> >  ( <name2> . max_digits - <name2> . decimal_places ) ) :	code set to string 'max_decimal_places' <name4> params set to a dictionary with an entry : <name2> .decimal_places for 'max' . <name1> <name2> .max_digits <name3> <name5> <name6> <name4> <name2> .decimal_places <name3> <name5> <name6> <name4> <name1> <name3> grater than the difference of ,
<name1> <name5> ( <name6> . error_messages [ <val4>   ] , code = <val4>   , params = {  'max'   : ( <name6> . max_digits - <name6> . decimal_places ) }  , )	<name6> .max_digits and <name6> .decimal_places , <name1> an <name5> with 3 arguments : value under the <val4> key of the <name6> .error_messages dictionary ,
<name6> <name3>	code set to string 'max_whole_digits' and params set to a dictionary with an entry : difference of the self .max_digits and self .decimal_places , for 'max' . <name6> <name3> .
def <name1> ( <name4> , <name2> ) :	define the method <name1> with arguments <name4> and <name2> .
<name5> = super ( <name2> , self ) . <name6> ( <name4> )	call the method <name6> with an argument <name4> , from the base class of the <name2> class , substitute the result for <name5> .
<name1> isinstance ( <name2> , <name4> ) <name3> <val5>   <name6> <name1> <name2> . attrs :	<name1> <name2> is an instance of <name4> <name3> string <val5> is <name6> contained <name1> <name2> .attrs .
<name6> <name4> . decimal_places <name1> <name3> <name5> :	<name6> <name4> .decimal_places <name1> <name3> <name5> ,
step = str ( <name5> ( <val4>   ) / <val3> ** <name1> . decimal_places ) . lower ( )	call the object <name5> with string <val4> as an argument , divide it by <val3> , bring the result to the power of <name1> .decimal_places ,
else :	convert the result to a lowercase string , substitute it for step . if not ,
<name5> = <val2>	<name5> is an string <val2> .
<name1> . setdefault ( <val2>   , <name5> )	if <val2> key of the <name1> dictionary doesnt exists assign it <name5> as an value .
<name4> <name2>	<name4> <name2> .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from the base <name1> <name4> <name1> .
def <name1> ( <name5> , <name2> = <name6> , * <name3> , ** <name4> ) :	define the method <name1> with arguments <name5> , <name2> set to <name6> , unpacked list <name3> and unpacked dictionary <name4> .
super ( <name3> , self ) . <name1> ( * <name4> , ** <name6> )	call the method <name1> from the base class of the <name3> class , with arguments : unpacked list <name4> and unpacked dictionary <name6> .
<name4> <name1> <name5> <name6> <name2> :	<name4> <name1> <name5> <name6> <name2> ,
<name6> . <name3> = <name3>	substitute <name3> for <name6> .input_formats .
def <name1> ( <name6> , <name5> ) :	define the method <name1> with arguments <name6> and <name5> .
<name4> = <name5> ( <name6> , <name3> = <name1> )	call the function <name5> with arguments <name6> and <name3> set to boolean <name1> , substitute the result for <name4> .
<name2> isinstance ( <name6> , <name5> . text_type ) :	<name2> <name6> is an instance of <name5> .text_type ,
<name2> = <name5> . <name1> ( )	<name1> whitespaces from both ends of <name5> , substitute the result for <name2> .
<name4> isinstance ( <name5> , <name3> . text_type ) :	<name4> <name5> is an instance of <name3> .text_type class ,
<name6> <name1> <name2> <name4> . input_formats :	<name6> every <name1> <name2> <name4> .input_formats ,
<name3> :	<name3> ,
<name1> <name5> . strptime ( <name3> , <name4> )	call the method <name5> .strptime with arguments <name3> and <name4> , <name1> the result .
except ( <name5> , <name1> ) :	if <name5> or <name1> exceptions are caught ,
continue	skip this loop iteration .
<name1> <name4> ( <name3> . error_messages [ <val5>   ] , <name6> = <val5>   )	<name1> an <name4> with 2 arguments : value under the <val5> key of the <name3> .error_messages dictionary and <name6> set to <val5> .
def <name6> ( <name5> , <name3> , <name2> ) :	define the method <name6> with arguments <name5> , <name3> and <name2> .
<name2> <name5> ( <val3>   )	<name2> an <name5> with an argument string <val3> .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from the base <name1> <name4> <name1> .
<name4> = <name5>	substitute <name5> for <name4> .
<name6> = <name3> . get_format_lazy ( <val1>   )	call the method <name3> .get_format_lazy with an argument string <val1> , substitute the result for <name6> .
<name4> = {   <val5>   : <name2> ( <val1>   ) , }	<name4> is an dictionary with an entry : return value of the function <name2> called with an argument string <val1> for <val5> .
def <name4> ( <name2> , <name6> ) :	define the method <name4> with arguments <name2> and <name6> .
<name5> <name4> <name3> <name1> . empty_values :	<name5> <name4> is contained <name3> <name1> .empty_values ,
<name2> <name4>	<name2> <name4> .
<name4> isinstance ( <name5> , <name2> . <name2> ) :	<name4> <name5> is an instance of <name2> .datetime class ,
<name6> <name5> . date ( )	call the method <name5> .date , <name6> the result .
<name3> isinstance ( <name2> , <name5> . date ) :	<name3> <name2> is an instance of <name5> .date class ,
<name6> <name3>	<name6> <name3> .
<name1> super ( <name6> , self ) . <name3> ( <name2> )	call the method <name3> with an argument <name2> from the base class of the <name6> class , <name1> the result .
def <name1> ( <name6> , <name4> , <name3> ) :	define the method <name1> with arguments <name6> , <name4> and <name3> .
return <name2> . <name2> . strptime ( <name6> ( <name1> ) , format ) . date ( )	call the method <name2> .datetime .strptime with 2 arguments : result of the function <name6> called with an argument <name1> ,
<name5> <name3> ( <name2> ) :	and format , call the method date on the result , return the result . derive the <name5> <name3> from the base <name5> <name2> <name5> .
<name1> = <name3>	substitute <name3> for <name1> .
<name2> = <name5> . get_format_lazy ( <val4>   )	call the method <name5> .get_format_lazy with an argument string <val4> , substitute the result for <name2> .
<name3> = {   <val6>   : <name4> ( <val2>   ) }	<name3> is an dictionary with an entry : return value of the function <name4> called with an argument string <val2> for <val6> .
def <name2> ( <name1> , <name4> ) :	define the method <name2> with arguments <name1> and <name4> .
<name4> <name3> <name5> <name1> . empty_values :	<name4> <name3> is contained <name5> <name1> .empty_values ,
<name5> <name1>	<name5> <name1> .
<name4> isinstance ( <name5> , <name6> . time ) :	<name4> <name5> is an instance of <name6> .time ,
<name3> <name1>	<name3> <name1> ,
<name5> super ( <name6> , self ) . <name3> ( <name1> )	call the method <name3> with an argument <name1> from the base class of the <name6> class , <name5> the result .
def <name1> ( <name4> , <name3> , <name5> ) :	define the method <name1> with arguments <name4> , <name3> and <name5> .
return <name5> . <name5> . strptime ( <name6> ( <name4> ) , format ) . time ( )	call the method <name5> .datetime .strptime with 2 arguments : result of the function <name6> called with an argument <name4> ,
<name3> <name2> ( <name5> ) :	and format , call the method time on the result , return the result . derive the <name3> <name2> from the base <name3> <name5> <name3> .
<name2> = <name4>	substitute <name4> for <name2> .
<name3> = <name2> . get_format_lazy ( <val5>   )	call the method <name2> .get_format_lazy with an argument string <val5> , substitute the result for <name3> .
<name1> = {   <val4>   : <name5> ( <val2>   ) , }	<name1> is an dictionary with an entry : return value of the function <name5> called with an argument string <val2> for <val4> .
def <name1> ( <name3> , <name2> ) :	define the method <name1> with arguments <name3> and <name2> .
<name2> isinstance ( <name5> , <name6> . <name6> ) :	<name2> <name5> is an instance of <name6> .datetime ,
<name6> = <name1> ( <name6> )	call the function <name1> with an argument <name6> , substitute the result for <name6> .
<name1> <name5>	<name1> <name5> .
def <name4> ( <name5> , <name2> ) :	define the method <name4> with arguments <name5> and <name2> .
<name4> <name2> <name1> <name3> . empty_values :	<name4> <name2> is contained <name1> <name3> .empty_values ,
<name2> <name3>	<name2> <name3> .
<name2> isinstance ( <name3> , <name4> . <name4> ) :	<name2> <name3> is an instance of <name4> .datetime ,
<name1> from_current_timezone ( <name3> )	call the function __current_timezone with an argument <name3> , <name1> the result .
<name2> isinstance ( <name1> , <name4> . date ) :	<name2> <name1> is an instance of <name4> .date ,
<name4> = <name6> . <name6> ( <name1> . year , <name1> . month , <name1> . day )	call the function <name6> .datetime with 3 arguments : <name1> .year , <name1> .month and <name1> .day , substitute the <name4> for <name4> .
<name6> <name5> ( <name3> )	call the function <name5> with an argument <name3> , <name6> the <name3> .
<name3> isinstance ( <name2> , <name6> ) :	<name3> <name2> is an instance of <name6> type ,
<name5> . warn ( <val1>    'Use SplitDateTimeField instead.'   , RemovedInDjango19Warning , stacklevel = 2 )	call the function <name5> .warn with 3 arguments : string <val1>
<name1> len ( <name4> ) != <val2> :	'Use SplitDateTimeField instead.' , RemovedInDjango19Warning and stacklevel set to integer <val2> . <name1> length of <name4> is not equal to integer <val2> ,
<name2> <name5> ( <name3> . error_messages [ <val1>   ] , <name6> = <val1>   )	<name2> an <name5> with 2 arguments : value under the <val1> key of the <name3> .error_messages dictionary and <name6> set to <val1> .
<name3> <name4> [ 0 ] <name2> <name6> . empty_values <name5> <name4> [ 1 ] <name2> <name6> . empty_values :	<name3> first <name5> second elements of <name4> are contained <name2> <name6> .empty_values ,
<name4> <name3>	<name4> <name3> .
<name5> = <val6>   % <name2> ( <name5> )	substitute '%s' in string <val6> with the elements of <name5> converted into a <name2> , substitute the result for <name5> .
<name1> = super ( <name6> , self ) . <name4> ( <name5> )	call the method <name4> with an argument <name5> from the base class of the <name6> class , substitute the <name1> for <name1> .
<name2> <name3> ( <name1> )	call the function <name3> with an argument , <name2> the <name1> .
def <name4> ( <name2> , <name3> , <name5> ) :	define the method <name4> with arguments <name2> , <name3> and <name5> .
return <name6> . <name6> . strptime ( <name5> ( <name4> ) , format )	call the method <name6> .datetime .strptime with 2 arguments : result of the function <name5> called with an argument <name4> ,
<name5> <name1> ( <name3> ) :	and format , return the result . derive the <name5> <name1> from the base <name5> <name3> <name5> .
def <name3> ( <name1> , <name6> , <name5> = <name4> , <name2> = <name4> , <name3> = <name4> , * args , ** kwargs ) :	define the method <name3> with 7 arguments : <name1> , <name6> , <name5> set to <name4> , <name2> set to <name4> , <name3> set to <name4> ,
<name3> <name4> <name5> <name6> <name2> :	<name3> <name4> <name5> <name6> <name2> ,
<name5> = <name6> . <name1> ( <val2>   ) or { }	<name1> the value under the <val2> key of the <name6> dictionary , if it exists substitute it for <name5> , if not ,
<name6> [ <val5>   ] = <name4>	<name6> is an empty dictionary . substitute <name4> for value under the <val5> key of the <name6> dictionary .
<name1> [ 'error_messages'   ] = <name4>	substitute <name4> for value under the '' <name4> '  key of the <name1> dictionary .
super ( <name3> , self ) . <name6> ( <name2> , <name4> , * <name1> , ** kwargs )	call the method <name6> from the base class of the class <name3> , with 4 arguments : <name2> , <name4> , unpacked list <name1> ,
<name1> . _set_regex ( <name6> )	unpacked dictionary kwargs . call the method <name1> ._set_regex with an argument <name6> .
def <name2> ( <name6> ) :	define the method <name2> an argument <name6> .
<name5> <name3> . _regex	<name5> <name3> ._regex .
def <name6> ( <name1> , <name5> ) :	define the method <name6> with arguments <name1> and <name5> .
<name1> isinstance ( <name6> , <name4> . string_types ) :	<name1> <name6> is an instance of <name4> .string_types class ,
<name4> = <name3> . compile ( <name4> , <name3> . UNICODE )	call the function <name3> .compile with 2 arguments <name4> , <name3> .UNICODE and substitute the result for <name4> .
<name5> . _regex = <name1>	substitute <name1> for <name5> ._regex .
<name5> hasattr ( <name4> , <val2>   ) <name1> <name4> . _regex_validator <name6> <name4> . validators :	<name5> <name4> has an <val2> attribute <name1> <name4> ._regex_validator is contained <name6> <name4> .validators ,
<name2> . validators . <name4> ( <name2> . _regex_validator )	<name4> <name2> ._regex_validator from <name2> .validators .
<name6> . _regex_validator = <name3> . RegexValidator ( <name2> = <name2> )	call the method <name3> .RegexValidator with an argument <name2> set to <name2> , substitute it for <name6> ._regex_validator .
<name6> . validators . <name1> ( <name6> . _regex_validator )	<name1> <name6> ._regex_validator to <name6> .validators .
<name1> = <name2> ( <name6> , <name4> )	<name1> is an <name2> object of this class , with <name6> getter and <name4> setter function .
<name5> <name4> ( <name1> ) :	derive the <name5> <name4> from the base <name5> <name1> <name5> .
<name6> = <name2>	substitute <name2> for <name6> .
<name4> = [ <name2> . validate_email ]	<name4> is a list with an element <name2> .validate_email .
def <name4> ( <name6> , <name2> ) :	define the method <name4> with 2 arguments <name6> and <name2> .
<name2> = <name3> . to_python ( <name2> ) . <name4> ( )	call the method <name3> .to_python with an argument <name2> , <name4> the whitespaces from the both ends of the result and substitute it for <name2> .
return super ( <name1> , self ) . <name3> ( <name4> )	call the method <name3> with an argument <name4> from the base class of the <name1> class .
<name6> <name4> ( <name5> ) :	derive the <name6> <name4> from the base <name6> <name5> <name6> .
<name5> = <name3>	substitute <name3> for <name5> .
"<name5> = {   'invalid'   : <name2> ( ""No file was submitted. Check the encoding type on the form."" ) , 'missing'   : <name2> ( ""No file was submitted."" ) , 'empty'   : <name2> ( ""The submitted file is empty."" ) , 'max_length'   : ungettext_lazy ( 'Ensure this filename has at most %(max)d character (it has %(length)d).'   , 'Ensure this filename has at most %(max)d characters (it has %(length)d).'   , 'max'   ) , 'contradiction'   : <name2> ( 'Please either submit a file or check the clear checkbox, not both.'   ) }"	<name5> is an dictionary with 5 initial entries : return value of the function <name2> called with an argument string ,
def <name5> ( <name6> , * <name4> , ** <name2> ) :	"No file was submitted . Check the encoding type on the form . for 'invalid' , return value of the function _ called with an argument , string ""No file was submitted."" for 'missing' , return value of the function _ called with an argument ""The submitted file is empty."" , for 'empty' , return value of the function ungettext_lazy called with 3 arguments : string 'Ensure this filename has at most %(max)d character (it has %(length)d).' , string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length' , and return value of the function _ called with an argument string , 'Please either submit a file or check the clear checkbox, not both.' for 'contradiction' . define the method <name5> with 3 arguments : <name6> , unpacked list <name4> and unpacked dictionary <name2> ."
<name5> . max_length = <name2> . pop ( <val4>   , None )	remove the value under <val4> key from the <name2> dictionary and if the key exists substitute it for <name5> .max_length ,
<name2> . allow_empty_file = <name4> . pop ( <val6>   , False )	if not <name2> .max_length is None . remove the value under <val6> key from the <name4> dictionary and if the key exists ,
super ( <name2> , <name4> ) . <name6> ( * <name5> , ** kwargs )	substitute it for <name4> .allow_empty_file , if not <name4> .allow_empty_file is boolean False . call the method <name6> from the base class of the <name2> class , with 2 arguments : unpacked list <name5> and unpacked dictionary .
def <name4> ( <name2> , <name1> ) :	define the method <name4> with arguments <name2> and <name1> .
<name3> <name5> <name1> <name6> . empty_values :	<name3> <name5> <name1> <name6> .empty_values is true ,
<name1> <name5>	<name1> <name5> .
<name3> :	<name3> ,
<name3> = <name1> . name	substitute <name1> .name for <name3> .
file_size = <name3> . size	substitute <name3> .size for file_name .
except <name6> :	if <name6> exception is caught ,
<name3> <name1> ( <name5> . error_messages [ <val2>   ] , <name4> = <val2>   )	<name3> an <name1> with 2 arguments : value under the <val2> key of the <name5> .error_messages dictionary and <name4> set to <val2> .
<name1> <name6> . max_length <name2> <name3> <name4> <name5> len ( <name1> ) >  <name6> . max_length :	<name1> <name6> .max_length <name2> <name3> <name4> <name5> length of <name1> <name2> grater than <name6> .max_length ,
<name5> = {  <val1>   : <name4> . max_length , <val6>   : len ( <name2> ) }	<name5> is a dictionary with 2 initial entries : <name4> .max_length for <val1> and length of <name2> for <val6> .
<name6> <name5> ( <name3> . error_messages [ <val1>   ] , <name2> = <val1>   , params = params )	<name6> an <name5> with 2 arguments : value under the <val1> key of the <name3> .error_messages dictionary and <name2> set to <val1> .
<name5> not <name1> :	<name5> <name1> is false ,
<name5> <name6> ( <name3> . error_messages [ <val4>   ] , <name2> = <val4>   )	<name5> an <name6> with 2 arguments : value under the <val4> key of the <name3> .error_messages dictionary and <name2> set to <val4> .
<name3> not <name5> . allow_empty_file <name2> not <name6> :	<name3> <name5> .allow_empty_file <name2> <name6> are both false ,
<name2> <name6> ( <name3> . error_messages [ <val1>   ] , <name5> = <val1>   )	<name2> an <name6> with 2 arguments : value under the <val1> key of the <name3> .error_messages dictionary and <name5> set to <val1> .
<name3> <name1>	<name3> <name1> .
def <name6> ( <name3> , <name4> , <name2> = <name5> ) :	define the method <name6> with arguments <name3> , <name4> and <name2> set to <name5> .
<name5> <name1> <name2> <name6> :	<name5> <name1> <name2> bound to the same object as <name6> ,
<name5> <name6> ( <name1> . error_messages [ <val4>   ] , <name3> = <val4>   )	<name5> an <name6> with 2 arguments : value under the <val4> key of the <name1> .error_messages dictionary and <name3> set to <val4> .
<name6> <name5> <name4> <name3> :	<name6> <name5> <name4> boolean <name3> ,
<name1> not <name3> . required :	<name1> <name3> .required is false ,
<name1> <name5>	<name1> boolean <name5> .
<name3> = <name1>	<name3> is <name1> .
<name3> not <name2> <name6> <name4> :	<name3> <name2> is false <name6> <name4> is true ,
<name4> <name5>	<name4> <name5> .
<name5> super ( <name3> , self ) . <name4> ( <name6> )	call the method <name4> with an argument <name6> from the base class of the class <name3> , <name5> the result .
def <name4> ( <name3> , <name6> , <name2> ) :	define the method <name4> with arguments <name3> , <name6> and <name2> .
<name2> <name5> in ( <name4> , <name3> ) :	<name2> <name5> is not <name4> or <name3> ,
<name2> <name6>	<name2> <name6> .
<name6> <name3>	<name6> <name3> .
def <name2> ( <name6> , <name4> , <name5> ) :	define the method <name2> with arguments <name6> , <name5> and <name4> .
<name1> <name2> <name6> <name3> :	<name1> <name2> <name6> <name3> ,
<name3> <name6>	<name3> is boolean <name6> .
<name5> <name4>	<name5> is boolean <name4> .
<name2> <name5> ( <name6> ) :	derive the <name2> <name5> from the base <name2> <name6> <name2> .
"<name6> = {   'invalid_image'   : <name3> ( ""Upload a valid image. The file you uploaded was either not an image or a corrupted image."" ) , }"	<name6> is an dictionary with an entry : return value of the function <name3> called with an argument string ,
<name6> = super ( <name2> , self ) . <name3> ( <name5> )	call the method <name3> with an argument <name5> from the base class of the class <name2> , substitute the result for <name6> .
<name6> <name1> <name4> <name3> :	<name6> <name1> <name4> <name3> ,
<name4> <name6>	<name4> <name6> .
<name3> <name5> <name4> <name2>	<name3> <name5> <name4> <name2> into default namespace .
<name1> hasattr ( <name2> , <val5>   ) :	<name1> <name2> has an <val5> attribute ,
<name5> = <name3> . temporary_file_path ( )	substitute the result of the function <name3> .temporary_file_path for <name5> .
else :	if not ,
<name6> hasattr ( <name4> , <val1>   ) :	<name6> <name4> has an attribute <val1> ,
<name6> = <name4> ( <name1> . read ( ) )	<name6> is an instance of <name4> class created with an argument : return value of the method <name1> .read .
else :	if not ,
<name2> = <name3> ( <name6> [ <val5>   ] )	<name2> is an instance of <name3> class created with an argument : value under the <val5> key of the <name6> dictionary .
<name1> :	<name1> ,
<name5> . open ( <name3> ) . <name2> ( )	call the method <name5> .open with an argument <name3> , on the result call the <name2> method
except <name3> :	if <name3> exception is caught ,
<name2> . reraise ( <name3> , <name3> ( self . error_messages [ 'invalid_image'   ] , code = 'invalid_image'   , ) , sys . exc_info ( ) [ <val1> ] )	call the function <name2> .reraise with 3 arguments : <name3> , <name3> created with <val1> arguments :
<name2> hasattr ( <name4> , <val5>   ) <name6> <name1> ( <name4> . seek ) :	value under the 'invalid_image' key of the self .error_messages dictionary <name6> code set to a string 'invalid_image' , <name6> third element of the return value of the function sys .exc_info . <name2> <name4> has an attribute <val5> <name6> <name2> <name4> .seek is an <name1> object ,
<name1> . seek ( <val4> )	call the method <name1> .seek with an argument integer <val4> .
<name5> <name4>	<name5> <name4> .
<name2> <name3> ( <name4> ) :	derive the <name2> <name3> from the base <name2> <name4> <name2> .
<name2> = <name6>	substitute <name6> for <name2> .
<name6> = {   <val4>   : <name2> ( <val3>   ) , }	<name6> is an dictionary with an entry : return value of the function <name2> called with an argument string <val3> for <val4> .
<name3> = [ <name1> . URLValidator ( ) ]	<name3> is a list with an element , return value of the <name1> .URLValidator method .
def <name1> ( <name4> , value ) :	define the method <name1> with arguments <name4> and data .
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
<name6> :	<name6> ,
<name3> <name1> ( <name4> ( <name2> ) )	call the <name4> with an argument <name2> , convert the result into a <name1> and <name3> it .
except <name1> :	if <name1> exception is caught ,
<name6> <name4> ( <name5> . error_messages [ <val3>   ] , <name1> = <val3>   )	<name6> an <name4> with 2 arguments : value under the <val3> key of the <name5> .error_messages dictionary and <name1> set to <val3> .
<name3> = super ( <name5> , self ) . <name6> ( <name3> )	call the method <name6> with an argument data from the base class of the class <name5> , substitute the result for <name3> .
<name4> <name3> :	<name4> <name3> is true ,
<name5> = <name2> ( <name4> )	call the function <name2> with an argument <name4> , substitute the result for <name5> .
<name5> not <name6> [ 0 ] :	<name5> first element of the <name6> is false ,
<name1> [ 0 ] = <val5>	first element of <name1> is string <val5> .
<name1> not <name3> [ 1 ] :	<name1> second element of <name3> is false ,
<name1> [ 1 ] = <name1> [ 2 ]	substitute third element of <name1> for second element of <name1> .
<name1> [ 2 ] = ''	third element of <name1> is an empty string .
<name3> = <name2> ( <name4> ( <name3> ) )	call the function <name4> with an argument <name3> , use the result as an argument for the call to the function <name2> ,
<name4> = <name5> ( <name3> )	substitute the result for <name3> . call the function <name5> with an argument <name3> , substitute the result for <name4> .
<name5> <name1>	<name5> <name1> .
def <name4> ( <name6> , <name3> ) :	define the method <name4> with arguments <name6> and <name3> .
<name3> = <name6> . to_python ( <name3> ) . <name1> ( )	call the method <name6> .to_python with an argument <name3> , <name1> the whitespaces from the result , substitute it for <name3> .
<name1> super ( <name3> , self ) . <name5> ( value )	call the method <name5> with an argument data from the base class of the class <name3> , <name1> the result .
<name4> <name5> ( <name6> ) :	derive the <name4> <name5> from the base <name4> <name6> <name4> .
<name2> = <name1>	substitute <name1> for <name2> .
def <name5> ( <name2> , <name4> ) :	define the method <name5> with arguments <name2> and <name4> .
<name6> isinstance ( <name5> , <name2> . string_types ) <name1> <name5> . lower ( ) in ( <val4>   , <val3>   ) :	<name6> <name5> is an instance of <name2> .string_types <name1> <name5> converted to lowercase is not equal to strings <val4> or <val3> ,
<name4> = <name1>	<name4> is boolean <name1> .
else :	if not ,
<name1> = bool ( <name1> )	convert <name1> into boolean and substitute it for <name1> .
<name6> super ( <name3> , self ) . <name1> ( value )	call the method <name1> with an argument data from the base class of the class <name3> , <name6> the result .
def <name6> ( <name1> , <name5> ) :	define the method <name6> with arguments <name1> and <name5> .
<name4> not <name1> <name3> <name6> . required :	<name4> <name1> is false <name3> <name6> .required is true ,
<name4> <name5> ( <name2> . error_messages [ <val3>   ] , <name6> = <val3>   )	<name4> an <name5> with 2 arguments : value under the <val3> key of the <name2> .error_messages dictionary and <name6> set to <val3> .
def <name4> ( <name5> , <name2> , <name6> ) :	define the method <name4> with arguments <name5> , <name2> and <name6> .
<name3> <name5> == <val6>   :	<name3> <name5> equals a string <val6> ,
<name5> = <name4>	<name5> is boolean <name4> .
<name4> bool ( <name6> ) != bool ( <name1> )	convert <name6> and <name1> into boolean , if they are not equal <name4> boolean True , if they are <name4> boolean False .
<name1> <name4> ( <name3> ) :	derive the <name1> <name4> from the base <name1> <name3> <name1> .
<name5> = <name6>	substitute <name6> for <name5> .
def <name3> ( <name4> , <name6> ) :	define the method <name3> with arguments <name4> and <name6> .
<name3> <name6> in ( <name2> , <val1>   , <val5>   ) :	<name3> <name6> is boolean <name2> , string <val1> or string <val5> ,
<name4> <name2>	<name4> boolean <name2> .
elif <name3> in ( <name6> , <val2>   , <val4>   ) :	otherwise if <name3> is boolean <name6> , string <val2> or string <val4>
<name1> <name5>	<name1> boolean <name5> ,
else :	if not ,
<name4> <name3>	<name4> <name3> .
def <name4> ( <name6> , <name3> ) :	define the method <name4> with arguments <name6> and <name3> .
pass	do nothing .
def <name5> ( <name1> , <name6> , <name4> ) :	define the method <name5> with arguments <name1> , <name6> and <name4> .
<name5> <name6> <name1> <name4> <name3> :	<name5> <name6> <name1> <name4> <name3> ,
<name1> = bool ( <name1> )	convert <name1> into boolean and substitute it for <name1> .
<name5> <name2> <name4> <name6> <name3> :	<name5> <name2> <name4> <name6> <name3> ,
<name4> = bool ( <name4> )	convert <name4> into boolean and substitute it for <name4> .
<name2> <name6> != <name3>	if <name6> is not equal to <name3> , <name2> boolean True , if it is <name2> boolean False .
<name4> <name3> ( <name2> ) :	derive the <name4> <name3> from the base <name4> <name2> <name4> .
<name2> = <name4>	substitute <name4> for <name2> .
<name2> = {   'invalid_choice'   : <name4> ( 'Select a valid choice. %(value)s is not one of the available choices.'   ) , }	<name2> is an dictionary with an entry : return value of the function <name4> called with an argument string ,
def <name4> ( <name6> , <name1> = ( ) , <name5> = <name2> , <name3> = <name4> , label = <name4> , initial = <name4> , help_text = ''   , * args , ** kwargs ) :	'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice' . define the method <name4> with 9 arguments : <name6> , <name1> set to an empty tuple , <name5> set to boolean <name2> , <name3> set to <name4> ,
super ( <name5> , self ) . <name4> ( <name2> = <name2> , widget = widget , <name6> = <name6> , <name1> = <name1> , <name3> = <name3> , * <name5> , ** <name4> )	<name6> set to None , <name1> set to None , <name3> set to an empty string , unpacked list <name5> and unpacked dictionary <name4> . call the <name4> method of the base class of the class <name5> , called with 7 arguments : <name2> set to <name2> ,
<name4> . <name5> = <name5>	widget set to widget , label set to label , initial set to initial , help_text set to help_text , unpacked list args , and unpacked dictionary kwargs . substitute <name5> for <name4> .choices .
def <name6> ( <name3> , <name5> ) :	define the method <name6> with arguments <name3> and <name5> .
<name2> = super ( <name6> , self ) . <name3> ( <name5> )	call the method <name3> with an argument <name5> from the base class of the class <name6> , substitute the <name2> for <name2> .
<name3> . _choices = <name2> . deepcopy ( <name1> . _choices , <name4> )	call the method <name2> .deepcopy with arguments <name1> ._choices and <name4> , substitute the <name3> for <name3> ._choices .
<name3> <name4>	<name3> <name4> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name5> <name2> . _choices	<name5> <name2> ._choices .
def <name6> ( <name1> , <name2> ) :	define the method <name6> with arguments <name1> and <name2> .
<name4> . _choices = <name4> . widget . choices = <name5> ( <name6> )	<name4> ._choices and <name4> .widget .choices are assigned <name6> converted into a <name5> .
<name1> = <name4> ( <name6> , <name5> )	<name1> is an <name4> object of this class where <name6> is a getter and <name5> is a setter function .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with arguments <name1> and <name6> .
<name6> <name5> <name1> <name2> . empty_values :	<name6> <name5> is contained <name1> <name2> .empty_values ,
<name4> ''	<name4> an empty string .
<name6> <name3> ( <name2> )	call the function <name3> with an argument <name2> , <name6> the result .
def <name2> ( <name5> , <name1> ) :	define the method <name2> with arguments <name5> and <name1> .
super ( <name2> , self ) . <name3> ( <name4> )	call the method <name3> with an argument <name4> from the base class of the class <name2> .
<name3> <name1> <name6> not <name5> . valid_value ( <name1> ) :	<name3> <name1> is true <name6> method <name5> .valid_value called with an argument <name1> evaluates to false ,
<name6> <name2> ( <name3> . error_messages [ <val4>   ] , code = <val4>   , params = {  'value'   : <name1> }  , )	<name6> an <name2> with 3 arguments : <name1> under the <val4> key of the <name3> .error_messages dictionary ,
def <name3> ( <name6> , <name4> ) :	code set to an string 'invalid_choice' and dictionary params with an entry : <name4> for 'value' . define the method <name3> with arguments <name6> and <name4> .
<name5> = <name2> ( <name3> )	call the function <name2> with an argument <name3> , substitute the result for <name5> .
<name5> <name3> , <name6> <name1> <name4> . choices :	<name5> every <name3> and <name6> <name1> <name4> .choices ,
<name2> isinstance ( <name4> , ( <name5> , <name3> ) ) :	<name2> <name4> is an instance of <name5> or <name3> type ,
<name4> <name2> , <name1> <name6> <name5> :	<name4> every <name2> and <name1> <name6> <name5> ,
<name4> <name6> == <name1> <name5> <name3> == <name2> ( <name1> ) :	<name4> <name6> equals <name1> <name5> <name3> equals return <name6> of the function <name2> called with argument <name1> ,
     <name5> <name1>	<name5> boolean <name1> .
else :	if not ,
<name1> <name2> == <name4> <name5> <name3> == <name6> ( <name4> ) :	<name1> <name2> equals <name4> <name5> <name3> equals return <name2> of the function <name6> called with argument <name4> ,
<name2> <name4>	<name2> boolean <name4> .
<name6> <name3>	<name6> boolean <name3> .
<name5> <name4> ( <name1> ) :	derive the <name5> <name4> from the base <name5> <name1> <name5> .
def <name4> ( <name6> , * <name2> , ** <name3> ) :	define the method <name4> with 3 arguments : <name6> , unpacked list <name2> and unpacked dictionary <name3> .
<name5> . coerce = <name2> . pop ( <val6>   , lambda val : val )	if <val6> key of the <name2> dictionary exists remove it and substitute its value for <name5> .coerce ,
<name2> . empty_value = <name1> . pop ( <val6>   , ''   )	if not , <name2> .coerce is an identity lambda function with an argument val . if <val6> key of the <name1> dictionary exists remove it and substitute its value for <name2> .empty_value ,
super ( TypedChoiceField , self ) . <name4> ( * <name6> , ** <name5> )	if not , sself .empty_value is an empty string . call the method <name4> with 2 arguments : unpacked list <name6> and unpacked dictionary <name5> ,
def <name4> ( <name5> , <name2> ) :	from the base class of the class TypedChoiceField . define the method <name4> with arguments <name5> and <name2> .
<name4> <name3> == <name6> . empty_value <name5> <name3> <name2> <name6> . empty_values :	<name4> <name3> equals <name6> .empty_value <name5> <name3> is contained <name2> <name6> .empty_values ,
<name6> <name1> . empty_value	<name6> <name1> .empty_value .
<name1> :	<name1> ,
<name5> = <name6> . coerce ( <name5> )	call the function <name6> .coerce with an argument <name5> , substitute it for <name5> .
except ( <name6> , <name3> , <name5> ) :	if <name6> , <name3> or <name5> exception is caught ,
<name5> <name2> ( <name3> . error_messages [ <val1>   ] , code = <val1>   , params = {  'value'   : <name4> }  , )	<name5> an <name2> with 3 arguments : <name4> under the <val1> key of the <name3> .error_messages dictionary ,
<name4> <name6>	code set to an string 'invalid_choice' and dictionary params with an entry : <name6> for 'value' . <name4> <name6> .
def <name5> ( <name4> , <name2> ) :	define the method <name5> with arguments <name4> and <name2> .
<name2> = super ( <name6> , self ) . <name5> ( <name2> )	call the method <name5> with an argument <name2> from the base class of the class <name6> , substitute the result for <name2> .
<name1> <name3> . _coerce ( <name4> )	call the method <name3> ._coerce with an argument <name4> , <name1> the result .
<name2> <name5> ( <name3> ) :	derive the <name2> <name5> from the base <name2> <name3> <name2> .
<name2> = <name4>	substitute <name4> for <name2> .
<name2> = <name4>	substitute <name4> for <name2> .
<name5> = {   'invalid_choice'   : <name3> ( 'Select a valid choice. %(value)s is not one of the available choices.'   ) , 'invalid_list'   : <name3> ( 'Enter a list of values.'   ) , }	<name5> is an dictionary with an entry : return value of the function <name3> called with an argument string ,
def <name4> ( <name1> , <name6> ) :	'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice' , and return <name6> of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list' . define the method <name4> with arguments <name1> and <name6> .
<name3> not <name6> :	<name3> <name6> is false ,
<name5> [ ]	<name5> an empty list .
elif <name3> isinstance ( <name6> , ( <name5> , <name4> ) ) :	otherwise if <name6> is <name3> an instance of <name5> ot <name4> type ,
<name3> <name6> ( <name5> . error_messages [ <val4>   ] , <name1> = <val4>   )	<name3> an <name6> with 2 arguments : value under the <val4> key of the <name5> .error_messages dictionary and <name1> set to <val4> .
<name3> [ <name5> ( <name6> ) <name1> <name6> <name4> <name2> ]	<name1> every <name6> <name4> <name2> call the function <name5> with an argument <name6> , <name3> the results <name4> a lit .
def <name3> ( <name2> , <name1> ) :	define the method <name3> with arguments <name2> and <name1> .
<name4> <name2> . required <name1> not <name3> :	<name4> <name2> .required is true <name1> <name3> is false ,
<name2> <name4> ( <name1> . error_messages [ <val5>   ] , code = <val5>   )	<name2> an <name4> with 3 arguments : value under the <val5> key of the <name1> .error_messages dictionary ,
<name3> <name2> <name6> <name4> :	and code set to an string 'required' . <name3> every <name2> <name6> <name4> ,
<name1> not <name2> . valid_value ( <name5> ) :	call the method <name2> .valid_value with an argument <name5> , <name1> it evaluates to false ,
<name5> <name2> ( <name6> . error_messages [ <val3>   ] , code = <val3>   , params = {  'value'   : val }  , )	<name5> an <name2> with 3 arguments : value under the <val3> key of the <name6> .error_messages dictionary ,
def <name2> ( <name3> , <name6> , <name5> ) :	code set to an string 'invalid_choice' and dictionary params with an entry : val for 'value' . define the method <name2> with arguments <name3> , <name6> and <name5> .
<name2> <name6> <name1> <name3> :	<name2> <name6> <name1> <name3> ,
<name1> = [ ]	<name1> is an empty list .
<name5> <name2> <name6> <name4> :	<name5> <name2> <name6> <name4> ,
<name3> = [ ]	<name3> is an empty list .
<name3> len ( <name5> ) != len ( <name6> ) :	<name3> lengths of <name5> and <name6> are not the same ,
<name3> <name6>	<name3> boolean <name6> .
<name5> = <name4> ( <name1> ( <name3> ) <name2> <name3> <name6> <name5> )	<name2> every <name3> <name6> <name5> call the function <name1> with an argument <name3> , add the results into a <name4> , substitute the resulting <name4> <name2> <name5> .
<name3> = <name4> ( <name6> ( <name2> ) <name5> <name2> <name1> <name3> )	<name5> every <name2> <name1> <name3> call the function <name6> with an argument <name2> , add the results into a <name4> , substitute the resulting <name4> <name5> <name3> .
<name2> <name4> != <name5>	if <name4> is not equal to <name5> , <name2> boolean True , otherwise <name2> boolean False .
<name5> <name4> ( <name2> ) :	derive the <name5> <name4> from the base <name5> <name2> <name5> .
def <name6> ( <name1> , * <name3> , ** <name5> ) :	define the method <name6> with 3 arguments : <name1> unpacked list <name3> and unpacked dictionary <name5> .
<name3> . coerce = <name2> . pop ( <val5>   , lambda val : val )	if <val5> key of the <name2> dictionary exists remove it and substitute its value for <name3> .coerce ,
<name3> . empty_value = <name1> . pop ( <val5>   , [ ] )	if not , <name3> .coerce is an identity lambda function with an argument val . if <val5> key of the <name1> dictionary exists remove it and substitute its value for <name3> .empty_value ,
super ( TypedMultipleChoiceField , <name3> ) . <name4> ( * <name1> , ** <name6> )	if not , <name3> .empty_value is an empty list . call the method <name4> with 2 arguments : unpacked list <name1> and unpacked dictionary <name6> ,
def <name1> ( <name2> , <name4> ) :	from the base class of the class TypedMultipleChoiceField . define the method <name1> with arguments <name2> and <name4> .
<name3> <name2> == <name1> . empty_value <name4> <name2> <name6> <name1> . empty_values :	<name3> <name2> equals <name1> .empty_value <name4> <name2> is contained <name6> <name1> .empty_values ,
<name5> <name3> . empty_value	<name5> <name3> .empty_value .
<name1> = [ ]	<name1> is an empty list .
<name5> <name3> <name6> <name2> :	<name5> every <name3> <name6> <name2> ,
<name1> :	<name1> ,
<name1> . <name3> ( <name4> . coerce ( <name6> ) )	call the method <name4> .coerce with an argument <name6> , <name3> the result to <name1> .
except ( <name4> , <name1> , <name3> ) :	if <name4> , <name1> or <name3> exception is caught ,
<name2> <name4> ( <name1> . error_messages [ <val6>   ] , code = <val6>   , params = {  'value'   : choice }  , )	<name2> an <name4> with 3 arguments : value under the <val6> key of the <name1> .error_messages dictionary ,
<name3> <name6>	code set to an string 'invalid_choice' and dictionary params with an entry : choice for 'value' . <name3> <name6> .
def <name6> ( <name1> , <name2> ) :	define the method <name6> with arguments <name1> and <name2> .
<name4> = super ( <name5> , self ) . <name6> ( <name4> )	call the method <name6> with an argument <name4> from the base class of the class <name5> , substitute the result for <name4> .
<name6> <name1> . _coerce ( <name4> )	call the method <name1> ._coerce with an argument <name4> , <name6> the result .
def <name2> ( <name1> , <name4> ) :	define the method <name2> with arguments <name1> and <name4> .
<name5> <name1> != <name4> . empty_value :	<name5> <name1> is not equal <name4> .empty_value ,
super ( <name6> , self ) . <name1> ( <name2> )	call the method <name1> with an argument <name2> from the base class of the class <name6> .
elif <name4> . required :	otherwise if <name4> .required is true ,
<name4> <name6> ( <name3> . error_messages [ <val5>   ] , <name1> = <val5>   )	<name4> an <name6> with 2 arguments : value under the <val5> key of the <name3> .error_messages dictionary and <name1> set to <val5> .
<name6> <name1> ( <name2> ) :	derive the <name6> <name1> from the base <name6> <name2> <name6> .
def <name2> ( <name1> , <name5> = ( ) , * <name3> , ** <name4> ) :	define the method <name2> with arguments : <name1> , <name5> set to an empty tuple , unpacked list <name3> and unpacked dictionary <name4> .
super ( <name6> , self ) . <name2> ( * <name5> , ** <name3> )	call the method <name2> with 2 arguments : unpacked list <name5> and unpacked dictionary <name3> , from the base class of the class <name6> .
<name5> <name2> <name1> <name6> :	<name5> every <name2> <name1> <name6> ,
<name4> . required = <name5>	<name4> .required is boolean <name5> .
<name1> . <name6> = <name6>	substitute <name6> for <name1> .fields .
def <name5> ( <name3> , <name2> ) :	define the method <name5> with arguments <name3> and <name2> .
super ( <name5> , self ) . <name3> ( <name4> )	call the method <name3> with an argument <name4> from the base class of the class <name5> .
<name6> <name5> <name2> <name1> . fields :	<name6> every <name5> <name2> <name1> .fields ,
<name1> = <name6> . clean ( <name1> )	call the method <name6> .clean with an argument <name1> , substitute the result for <name1> .
<name2> <name3>	<name2> <name3> .
<name1> <name3> ( <name6> ) :	derive the <name1> <name3> from the base <name1> <name6> <name1> .
<name6> = {   'invalid'   : <name3> ( 'Enter a list of values.'   ) , 'incomplete'   : <name3> ( 'Enter a complete value.'   ) , }	<name6> is an dictionary with 2 entries : return value of the function <name3> called with an argument string ,
def <name2> ( <name6> , <name5> = ( ) , * <name3> , ** <name4> ) :	'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string , 'Enter a complete value.' for 'incomplete' . define the method <name2> with arguments <name6> , <name5> set to an empty ilst , unpacked list <name3> and unpacked dictionary <name4> .
<name4> . require_all_fields = <name3> . pop ( <val6>   , True )	if <val6> key of the <name3> dictionary exists remove it and substitute its value for <name4> .require_all_fields ,
super ( <name3> , <name6> ) . <name1> ( * <name5> , ** <name2> )	if not , <name6> .require_all_fields is boolean True . call the method <name1> with 2 arguments : unpacked list <name5> and unpacked dictionary <name2> , from the base class of the class <name3> .
<name6> <name2> <name3> <name4> :	<name6> every <name2> <name3> <name4> ,
<name5> . error_messages . setdefault ( <val1>   , <name2> . error_messages [ <val1>   ] )	if <val1> key of the <name5> .error_messages doesnt exists , assign it the value under the <val1> key of the <name2> .error_messages dictionary .
<name5> <name2> . require_all_fields :	<name5> <name2> .require_all_fields is true ,
<name5> . required = <name4>	<name5> .required is boolean <name4> .
<name5> . <name1> = <name1>	substitute <name1> for <name5> .fields .
def <name2> ( <name6> , <name4> ) :	define the method <name2> with arguments <name6> and <name4> .
<name3> = super ( <name1> , self ) . <name4> ( <name6> )	call the method <name4> with an argument <name6> , from the base class of the class <name1> , substitute the <name3> for <name3> .
<name5> . fields = <name3> ( [ <name6> . __deepcopy__ ( <name2> ) <name1> <name6> <name4> <name5> . fields ] )	<name1> every <name6> <name4> <name5> .fields call the method <name6> .__deepcopy__ with an argument <name2> , put the <name5> into a <name3> , substitute it <name1> <name5> .fields .
<name4> <name2>	<name4> <name2> .
def <name1> ( <name5> , <name4> ) :	define the method <name1> with arguments <name5> and <name4> .
pass	do nothing .
def <name3> ( <name6> , <name4> ) :	define the method <name3> with arguments <name6> and <name4> .
<name6> = [ ]	<name6> is an empty list .
<name6> = [ ]	<name6> is an empty list .
<name3> <name4> <name5> <name1> isinstance ( <name5> , ( <name6> , <name2> ) ) :	<name3> <name5> is false <name1> <name5> is <name4> an instance of <name6> <name1> <name2> types ,
<name2> not <name4> <name6> not [ <name1> <name3> <name1> <name5> <name4> <name2> <name1> not <name5> <name2> . empty_values ] :	<name2> <name4> is false <name6> <name3> every <name1> <name5> <name4> every <name1> is contained <name5> <name2> .empty_values ,
<name1> <name3> . required :	<name1> <name3> .required is true ,
<name3> <name6> ( <name2> . error_messages [ <val1>   ] , <name5> = <val1>   )	<name3> an <name6> with 2 arguments : value under the <val1> key of the <name2> .error_messages dictionary and <name5> set to <val1> .
else :	if not ,
<name3> <name5> . compress ( [ ] )	call the function <name5> .compress with empty list as an argument , <name3> the result .
else :	if not ,
<name3> <name2> ( <name1> . error_messages [ <val5>   ] , <name6> = <val5>   )	<name3> an <name2> with 2 arguments : value under the <val5> key of the <name1> .error_messages dictionary and <name6> set to <val5> .
<name3> <name6> , <name5> <name2> enumerate ( <name4> . fields ) :	<name3> every <name6> and <name5> <name2> enumerated iterable <name4> .fields ,
<name1> :	<name1> ,
<name2> = <name4> [ <name3> ]	substitute <name3> - th element of <name4> for <name2> .
except <name5> :	if <name5> exception is caught ,
<name5> = <name3>	<name5> is <name3> .
<name2> <name4> <name5> <name6> . empty_values :	<name2> <name4> is cotained <name5> <name6> .empty_values ,
<name5> <name4> . require_all_fields :	<name5> <name4> .require_all_fields is boolean true ,
   <name6> <name5> . required :	<name6> <name5> .required is boolean true ,
     <name6> <name2> ( <name3> . error_messages [ <val1>   ] , <name5> = <val1>   )	<name6> an <name2> with 2 arguments : value under the <val1> key of the <name3> .error_messages dictionary and <name5> set to <val1> .
elif <name4> . required :	otherwise if <name4> .required is true ,
     <name6> <name2> . error_messages [ <val1>   ] <name5> <name4> <name3> :	get the value under the <val1> key of the <name2> .error_messages dictionary , <name6> it is <name5> contained <name4> <name3> ,
     <name2> . <name6> ( <name1> . error_messages [ <val4>   ] )	get the value under the <val4> key of the <name1> .error_messages dictionary , <name6> it to <name2> .
continue	skip this loop iteration ,
<name2> :	<name2> ,
<name2> . <name3> ( <name1> . clean ( <name4> ) )	call the method <name1> .clean with an argument <name4> , <name3> the result to <name2> .
except <name6> as <name5> :	if <name6> , renamed to <name5> , is caught ,
<name2> . <name1> ( <name3> <name4> <name3> <name5> <name6> . error_list <name2> <name3> <name1> <name5> <name2> )	<name1> <name2> list with <name3> <name4> every <name3> <name5> <name6> .error_list , only <name2> <name3> is <name1> <name5> <name2> .
<name5> <name2> :	<name5> <name2> is true ,
<name2> <name6> ( <name1> )	<name2> an <name6> with an argument <name1> .
<name2> = <name4> . compress ( <name1> )	call the method <name4> .compress with an argument <name1> , substitute the result for <name2> .
<name2> . validate ( <name1> )	call the method <name2> .validate with an argument <name1> .
<name3> . run_validators ( <name1> )	call the method <name3> .run_validators with an argument <name1> .
<name3> <name4>	<name3> <name4> .
def <name3> ( <name4> , <name1> ) :	define the method <name3> with arguments <name4> and <name1> .
<name3> <name4> ( <val5>   )	<name3> an <name4> with an argument string <val5> .
def _has_changed ( <name3> , <name1> , <name5> ) :	define the method has_changed with arguments <name3> , <name1> and <name5> .
<name5> <name3> <name6> <name4> :	<name5> <name3> <name6> <name4> ,
<name2> = [ ''   <name6> <name5> <name4> range ( <val3> , len ( <name1> ) ) ]	<name6> every <name5> <name4> sequence of integer from integer <val3> to length of <name1> , append an empty string to a list , substitute the resulting list <name6> <name2> .
else :	if not ,
<name3> <name1> isinstance ( <name2> , <name6> ) :	<name3> <name2> is <name1> an instance of the <name6> type ,
<name3> = <name2> . widget . decompress ( <name3> )	call the method <name2> .widget .decompress with an argument <name3> , substitute the result for <name3> .
<name2> <name3> , <name4> , <name1> <name5> zip ( <name6> . fields , <name4> , <name1> ) :	<name2> every <name3> , <name4> and <name1> <name5> list of tuples tuple containing elements of <name6> .fields , <name4> and <name1> , respectively ,
if <name5> . _has_changed ( <name5> . to_python ( <name4> ) , data ) :	call the method <name5> ._has_changed with 2 arguments : return value of the function <name5> .to_python called with an argument <name4> ,
<name3> <name1>	and data , if it evaluates to true , <name3> boolean <name1> .
<name1> <name6>	<name1> boolean <name6> .
<name5> <name6> ( <name4> ) :	derive the <name5> <name6> from the base <name5> <name4> <name5> .
def <name5> ( <name3> , <name6> , <name1> = <name4> , <name2> = <name5> , allow_files = True , allow_folders = <name5> , required = True , widget = <name4> , label = <name4> , initial = <name4> , help_text = ''   , * args , ** kwargs ) :	define the method <name5> with 13 arguments : <name3> , <name6> , <name1> set to <name4> , <name2> set to boolean <name5> ,
<name1> . <name3> , <name1> . <name5> , <name1> . <name6> = <name3> , <name5> , <name6>	allow_files set to boolean True , allow_folders set to boolean False , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , unpacked list args , unpacked dictionary kwargs . substitute <name3> , <name5> and <name6> for <name1> .path , <name1> .match and <name1> .recursive .
<name6> . <name2> , <name6> . <name3> = <name2> , <name3>	substitute <name2> and <name3> for <name6> .allow_files and <name6> .allow_folders .
super ( <name2> , self ) . <name6> ( <name1> = ( ) , required = required , widget = widget , label = label , initial = initial , help_text = help_text , * args , ** kwargs )	call the <name6> method of the base class of the class <name2> , with arguments : <name1> set to an empty tuple , 4
<name2> <name1> . <name6> :	<name6> set to <name6> , widget set to widget , label set to label , initial st to initial , help_text set to help_text , unpacked list args , unpacked dictionary kwargs . <name2> <name1> .required is true ,
<name6> . choices = [ ]	<name6> .choices is an empty list .
else :	if not ,
"<name4> . choices = [ ( """" , <val5> ) ]"	<name4> .choices is an list containing an tuple with 2 elements : an empty string and string <val5> .
<name5> <name6> . match <name3> <name4> <name1> :	<name5> <name6> .match <name3> <name4> <name1> ,
<name1> . match_re = re . <name4> ( <name1> . match )	<name4> <name1> .match regular expression , substitute it for <name1> .match_re .
<name2> <name1> :	<name2> <name1> is true ,
<name1> <name3> , <name4> , <name2> <name6> <name5> ( os . walk ( <name1> . path ) ) :	<name1> <name3> , <name4> and <name2> <name6> <name5> list of the directory tree starting from the directory <name1> .path ,
<name6> <name1> . allow_files :	<name6> <name1> .allow_files is true ,
<name5> <name4> <name6> <name2> :	<name5> every <name4> <name6> <name2> ,
     <name1> <name3> . match <name2> <name6> <name4> <name3> . match_re . search ( <name5> ) :	<name1> <name3> .match <name2> <name6> <name4> call to the method <name3> .match_re .search with an argument <name5> , evaluated to true ,
         <name2> = os . path . <name1> ( <name6> , <name2> )	<name1> <name6> and <name2> into a file , substitute it for <name2> .
"<name4> . choices . <name3> ( ( <name5> , <name5> . replace ( <name2> , """" , 1 ) ) )"	<name3> a tuple with 2 elements : <name5> and <name5> with first occurrence of the <name2> replaced with an empty string , to <name4> .choices .
<name4> <name5> . allow_folders :	<name4> <name5> .allow_folders is true ,
<name1> <name2> <name6> dirs :	<name1> every <name2> <name6> files ,
     <name4> <name6> == <val1>   :	<name4> <name6> equals to string <val1> ,
         continue	skip this loop execution .
<name4> <name3> . match <name6> <name1> <name2> <name3> . match_re . search ( <name5> ) :	<name4> <name3> .match <name6> <name1> <name2> call to the method <name3> .match_re .search with an argument <name5> , evaluated to true ,
         <name4> = os . <name5> . <name1> ( <name6> , <name4> )	<name1> <name6> and <name4> in <name5> , substitute the result for <name4> .
"<name1> . choices . <name4> ( ( <name6> , <name6> . replace ( <name5> , """" , 1 ) ) )"	<name4> a tuple with 2 elements : <name6> and <name6> with first occurrence of the <name5> replaced with an empty string , to <name1> .choices .
else :	if not ,
<name5> :	<name5> ,
<name4> <name1> <name3> <name6> ( os . listdir ( <name2> . path ) ) :	<name4> <name1> <name3> <name6> list of the files <name3> the <name2> .path directory ,
<name5> <name6> == <val4>   :	<name5> <name6> equals to string <val4> ,
     continue	skip this loop execution .
<name1> = os . <name5> . <name2> ( <name4> . <name5> , <name3> )	<name2> <name4> .path and <name3> in <name5> , substitute the result for <name1> .
<name5> ( ( ( <name4> . allow_files <name2> os . path . isfile ( <name3> ) ) <name1> ( <name4> . allow_folders <name2> os . path . isdir ( <name3> ) ) ) <name2> ( <name4> . match <name6> None <name1> <name4> . match_re . search ( f ) ) ) :	<name5> <name4> .allow_files <name6> true <name2> <name3> <name6> a file , <name1> <name5> <name4> .allow_folders <name6> true <name2> <name3> <name6> an directory ,
     <name6> . choices . <name4> ( ( <name2> , <name5> ) )	and only if <name6> .match is None or return value of the method <name6> .match_re .search called with an argument <name5> is true . <name4> a tuple containing 2 elements : <name2> and <name5> to <name6> .choices list .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
<name2> . widget . choices = <name2> . choices	substitute <name2> .choices for <name2> .widgetchoices .
<name1> <name3> ( <name5> ) :	derive the <name1> <name3> from the base <name1> <name5> <name1> .
<name6> = <name3>	substitute <name3> for <name6> .
<name3> = <name6>	substitute <name6> for <name3> .
<name6> = {   'invalid_date'   : <name4> ( <val3>   ) , 'invalid_time'   : <name4> ( 'Enter a valid time.'   ) , }	<name6> is an dictionary with 2 entries : return value of the function <name4> called with an string <val3> ,
def <name3> ( <name4> , <name2> = <name5> , <name1> = <name5> , * args , ** kwargs ) :	for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.' , for ' invalid_time . define the method <name3> with 3 arguments : <name4> , <name2> set to <name5> , <name1> set to <name5> ,
<name2> = <name1> . default_error_messages . copy ( )	and <name2> set to the result of <name1> .default_error_messages .copy .
<name4> <val2>   <name3> <name1> :	<name4> <val2> is contained <name3> <name1> ,
<name4> . <name2> ( <name6> [ <val1>   ] )	get the value under the <val1> key of the <name6> dictionary , <name2> <name4> dictionary with it .
<name3> = <name6> . <name5> ( <val4>   , False )	<name5> the value under the <val4> key of the <name6> dictionary , substitute it for <name3> , if the key doesnt exists , substitute the result for <name3> .
<name3> = ( <name4> ( <name6> = <name2> , error_messages = {  'invalid'   : errors [ 'invalid_date'   ] }  , localize = localize ) , TimeField ( <name6> = input_time_formats , error_messages = {  'invalid'   : errors [ 'invalid_time'   ] }  , localize = localize ) , )	<name3> is an tuple containing instances of the class <name4> , created with 3 arguments : <name6> set to <name2> ,
super ( <name3> , self ) . <name4> ( <name1> , * <name2> , ** <name5> )	error_messages as an dictionary with an entry : value under the 'invalid_date' of errors dictionary for 'invalid' , localize set to localize , and an instance of the class TimeField created with 3 arguments : input_formats set to input_time_formats , error_messages as an dictionary with an entry : value under the 'invalid_time' of errors dictionary for 'invalid' , localize set to localize call the <name4> method with <name1> , unpacked list <name2> and unpacked dictionary <name5> from the base class of the <name3> class .
def <name2> ( <name5> , <name4> ) :	define the method <name2> with arguments <name5> and <name4> .
<name2> <name3> :	<name2> <name3> is true ,
<name6> <name2> [ 0 ] <name5> <name4> . empty_values :	<name6> first element of <name2> is contained <name5> <name4> .empty_values ,
<name5> <name6> ( <name1> . error_messages [ <val2>   ] , <name4> = <val2>   )	<name5> an <name6> with 2 arguments : value under the <val2> key of the <name1> .error_messages dictionary and <name4> set to string <val2> .
<name4> <name5> [ 1 ] <name3> <name1> . empty_values :	<name4> second element of <name5> is contained <name3> <name1> .empty_values ,
<name4> <name1> ( <name6> . error_messages [ <val3>   ] , <name5> = <val3>   )	<name4> an <name1> with 2 arguments : value under the <val3> key of the <name6> .error_messages dictionary and <name5> set to string <val3> .
<name3> = <name6> . <name6> . combine ( * <name2> )	call the method <name6> .datetime .combine with unpacked list <name2> , substitute the <name3> for <name3> .
<name6> <name5> ( <name2> )	call the method <name5> with an argument <name2> , <name6> the <name2> .
<name5> <name6>	<name5> <name6> .
<name1> <name3> ( <name6> ) :	derive the <name1> <name3> from the base <name1> <name6> <name1> .
<name5> = [ <name4> . validate_ipv4_address ]	<name5> is an list containing <name4> .validate_ipv4_address .
def <name5> ( <name4> , * <name1> , ** <name2> ) :	define the method <name5> with 3 arguments : <name4> , unpacked list <name1> and unpacked dictionary <name2> .
<name3> . warn ( <val5> , RemovedInDjango19Warning )	call the function <name3> .warn with 2 arguments string <val5> ,
super ( <name2> , self ) . <name1> ( * <name5> , ** <name3> )	and RemovedInDjango19Warning . call the <name1> method with unpacked list <name5> and unpacked dictionary <name3> from the base class of the <name2> class .
def <name1> ( <name4> , <name3> ) :	define the method <name1> with arguments <name4> and <name3> .
<name4> <name2> <name3> <name5> . empty_values :	<name4> <name2> is contained <name3> <name5> .empty_values ,
<name3> ''	<name3> an empty string .
<name4> <name6> . <name1> ( )	<name1> whitespaces from both sides of the <name6> , <name4> the result .
<name3> <name5> ( <name2> ) :	derive the <name3> <name5> from the base <name3> <name2> <name3> .
def <name5> ( <name1> , <name3> = <val6>   , <name4> = <name2> , * args , ** kwargs ) :	define the method <name5> with 5 arguments : <name1> , <name3> set to string <val6> , <name4> set to boolean <name2> ,
<name3> . <name2> = <name2>	unpacked list args , unpacked dictionary kwargs . substitute <name2> for <name3> .unpack_ipv4 .
<name4> . default_validators = <name2> . ip_address_validators ( <name1> , <name5> ) [ 0 ]	call the method <name2> .ip_address_validators with arguments <name1> , <name5> , substitute first element of the result for <name4> .default_validators .
super ( <name2> , self ) . <name1> ( * <name6> , ** <name4> )	call the <name1> method with unpacked list <name6> and unpacked dictionary <name4> from the base class of the <name2> class .
def <name4> ( <name2> , <name5> ) :	define the method <name4> with arguments <name2> and <name5> .
<name5> <name4> <name2> <name6> . empty_values :	<name5> <name4> is contained <name2> <name6> .empty_values ,
<name1> ''	<name1> an empty string .
<name5> = <name5> . <name4> ( )	<name4> whitespaces from both sides of the <name5> , substitute it for <name5> .
<name4> <name5> <name2> <val1>   <name3> <name5> :	<name4> <name5> is true <name2> character <val1> is contained <name3> <name5> ,
<name2> <name1> ( <name4> , <name5> . unpack_ipv4 )	call the function <name1> with arguments <name4> and <name5> .unpack_ipv4 , <name2> the result .
<name6> <name2>	<name6> <name2> .
<name2> <name3> ( <name1> ) :	derive the <name2> <name3> from the base <name2> <name1> <name2> .
<name1> = [ <name3> . validate_slug ]	<name1> is an list containing <name3> .validate_slug .
def <name5> ( <name3> , <name6> ) :	define the method <name5> with arguments <name3> and <name6> .
<name6> = <name4> . to_python ( <name6> ) . <name1> ( )	call the <name4> .to_python method with an argument <name6> , <name1> the result of the whitespaces from the sides , substitute the result for <name6> .
<name6> super ( <name4> , self ) . <name5> ( <name3> )	call the <name5> method wiht <name3> argument from the base class of the <name4> class , <name6> the result .
<name4> <name6> <name2> <name5>	<name4> <name6> <name2> <name5> into default name space .
<name5> <name3> <name6> <name2>	<name5> <name3> <name6> <name2> into default name space .
<name1> <name4>	<name1> module <name4> .
<name2> <name4>	<name2> module <name4> .
<name3> <name6>	<name3> module <name6> .
<name6> <name1> . core . exceptions <name2> <name3> , <name4>	<name6> <name1> .core .exceptions <name2> <name3> and <name4> into default name space .
<name2> <name1> . forms . fields <name4> <name3> , <name6>	<name2> <name1> .forms .fields <name4> <name3> and <name6> into default name space .
<name5> <name4> . forms . utils <name3> <name6> , <name2> , <name1>	<name5> <name4> .forms .utils <name3> <name6> , <name2> and <name1> into default name space .
<name6> <name3> . forms . widgets <name1> <name2> , <name4> , <name5> , <name6>	<name6> <name3> .forms .widgets <name1> <name2> , <name4> , <name5> and <name6> into default name space .
<name6> <name3> . utils . deprecation <name5> <name4>	<name6> <name3> .utils .deprecation <name5> <name4> into default name space .
<name4> <name6> . utils . encoding <name1> <name5> , <name3> , <name2>	<name4> <name6> .utils .encoding <name1> <name5> , <name3> and <name2> into default name space .
<name1> <name3> . utils . html <name4> <name5> , <name2>	<name1> <name3> .utils .html <name4> <name5> and <name2> into default name space .
<name5> <name6> . utils . safestring <name4> <name1>	<name5> <name6> .utils .safestring <name4> <name1> into default name space .
<name4> <name3> . utils . translation <name2> <name6> <name1> <name5>	<name4> <name3> .utils .translation <name2> <name6> <name1> <name5> into default name space .
<name2> <name4> . utils <name5> <name6>	<name2> <name4> .utils <name5> <name6> into default name space .
__all__ = ( <val6>   , <val3>   )	__all__is an tuple with 2 elements : strings <val6> and <val3> .
def <name4> ( <name1> ) :	define the function <name4> with an argument <name1> .
<name4> not <name3> :	<name4> <name3> is false ,
<name2> ''	<name2> an empty string .
<name1> <name5> . <name4> ( <val3>   , ' '   ) . <name6> ( )	<name4> all the occurrences of character <val3> in <name5> with a whitespace , <name6> the first letter and <name1> the result .
def <name2> ( <name6> , <name5> , <name1> = <name3> ) :	define the function <name2> with 3 arguments : <name6> , <name5> and <name1> set to boolean <name3> .
<name3> . warn ( <val4> , RemovedInDjango19Warning , stacklevel = 2 , )	call the function <name3> .warn with 3 arguments : string <val4> ,
fields = [ ( <name4> , <name2> . pop ( <name4> ) ) <name3> <name4> , <name5> <name1> <name6> ( <name4> . iteritems ( <name2> ) ) if isinstance ( <name5> , Field ) ]	RemovedInDjango19Warning , stacklevel set to integer 2 . <name3> <name4> every <name5> <name1> <name6> created from the elements of the return value of the function <name4> .iteritems with an argument <name2> .
<name3> . <name4> ( <name5> = <name6> <name1> : <name1> [ 1 ] . <name2> )	if obj is an instance of Field , append to a list a tuple with 2 elements : field_name , and poped value under the field_name <name5> of the attrs dictionary , substitute the resulting list for <name3> . <name4> <name3> elements with <name5> being a <name6> function with argument <name1> and return value <name2> filed of first element of <name1> .
<name2> <name5> :	<name2> <name5> is true ,
<name3> <name6> <name4> <name5> [ : : - 1 ] :	<name3> every <name6> <name4> reversed order of <name5> ,
<name6> hasattr ( <name5> , <val3>   ) :	<name6> <name5> has an attribute <val3> .
<name3> = <name2> ( <name4> . iteritems ( <name6> . base_fields ) ) + <name3>	call the method <name4> .iteritems with an argument <name6> .base_fields , convert it to a <name2> and append <name3> to it , substitute the result for <name3> .
else :	if not ,
<name4> <name1> <name3> <name2> [ : : - 1 ] :	<name4> every <name1> <name3> reversed order of <name2> ,
<name6> hasattr ( <name1> , <val2>   ) :	<name6> <name1> has an <val2> attribute ,
<name6> = <name2> ( <name4> . iteritems ( <name1> . declared_fields ) ) + <name6>	call the method <name4> .iteritems with an argument <name1> .declared_fields , convert it to a <name2> and append <name6> to it , substitute the result for <name6> .
<name4> <name1> ( <name2> )	<name4> an instance of <name1> class , created with an argument <name2> .
<name6> <name2> ( <name4> ) :	derive the <name6> <name2> from the base <name6> <name4> .
def <name5> ( <name6> , <name1> , <name3> , <name4> ) :	define the method <name5> with 4 arguments : <name6> , <name1> , <name3> and <name4> .
<name1> = [ ]	<name1> is an empty list .
<name1> <name4> , <name3> <name2> <name6> ( <name5> . items ( ) ) :	<name1> every <name4> and <name3> <name2> <name6> created out of the elements of the result of the call to the method <name5> .items ,
<name6> isinstance ( <name2> , <name5> ) :	<name6> <name2> is an instance of <name5> class ,
<name3> . <name1> ( ( <name5> , <name4> ) )	<name1> a tuple with elements <name5> and <name4> to <name3> .
<name4> . pop ( <name5> )	remove entry at the <name5> <name5> of the <name4> dictionary .
<name1> . <name3> ( <name5> = <name2> <name4> : <name4> [ 1 ] . <name6> )	<name3> <name1> elements with <name5> being a <name2> function with argument <name4> and return value <name6> filed of first element of <name4> .
<name5> [ <val2>   ] = <name1> ( <name6> )	value under the <val2> key of the <name5> dictionary is an instance of <name1> class , created with an argument <name6> .
new_class = ( super ( <name1> , <name6> ) . <name2> ( <name6> , <name5> , <name3> , <name4> ) )	call the method <name2> from the base class of the class <name1> , with 4 arguments : <name6> , <name5> , <name3> and <name4> .
<name6> = <name3> ( )	<name6> is an instance of <name3> class .
<name3> <name5> <name6> <name2> ( <name1> . __mro__ ) :	<name3> every <name5> <name6> <name1> .__mro__ <name6> <name2> order ,
<name5> hasattr ( <name6> , <val3>   ) :	<name5> <name6> has an attribute <val3> ,
<name3> . <name1> ( <name6> . <name3> )	<name1> <name3> dictionary with entry <name6> .declared_fields .
<name1> <name3> , <name4> <name5> <name2> . __dict__ . items ( ) :	call the method <name2> .__dict__ .items , <name1> every <name3> and <name4> <name5> the result ,
<name2> <name4> <name6> <name5> <name1> <name3> <name2> <name4> :	<name2> <name4> <name6> <name5> <name1> <name3> <name6> contained <name2> <name4> ,
<name1> . pop ( <name2> )	remove entry at the <name2> key of the <name1> dictionary .
<name5> . base_fields = <name6>	substitute <name6> for <name5> .base_fields .
<name6> . <name2> = <name2>	substitute <name2> for <name6> .declared_fields .
<name6> <name5>	<name6> <name5> .
@  <name3>	<name3> decorator ,
<name1> <name2> ( <name4> ) :	derive the <name1> <name2> from the base <name1> <name4> .
def <name3> ( <name2> , <name1> = <name4> , <name6> = <name4> , <name5> = <val3>   , <name2> = <name4> , initial = <name4> , error_class = ErrorList , label_suffix = <name4> , empty_permitted = False ) :	define the method <name3> with 4 arguments : <name2> , <name1> set to <name4> , <name6> set to <name4> , <name5> is an string <val3> , <name2> is <name4> ,
<name2> . is_bound = <name5> <name3> <name6> <name1> <name4> <name2> <name3> <name6> <name1>	initial set to <name1> , error_class set to ErrorList , label_suffix set to <name1> , empty_permitted set to boolean False . if <name5> <name3> <name6> <name1> <name4> <name2> <name3> <name6> <name1> , <name2> .is_bound <name3> boolean True , otherwise it <name3> boolean False .
<name2> . <name4> = <name4> or { }	if <name4> is true , substitute it for <name2> .data , if not <name2> .data is an empty dictionary .
<name6> . <name1> = <name1> or { }	if <name1> is true , substitute it for <name6> .files , if not <name6> .files is an empty dictionary .
<name3> . <name1> = <name1>	substitute <name1> for <name3> .auto_id .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .prefix .
<name4> . <name5> = <name5> or { }	if <name5> is true , substitute it for <name4> .initial , if not <name4> .files is an empty dictionary .
<name3> . error_class = error_class	substitute .error_class for <name3> .error_class .
<name5> . <name4> = <name4> <name3> <name4> <name6> <name1> <name2> else _ ( ':'   )	<name3> <name4> <name6> <name1> <name2> substitute <name4> for <name5> .label_suffix ,
<name1> . <name4> = <name4>	otherwise substitute return value of the function _ called with an argument ':' for <name1> .label_suffix . substitute <name4> for <name1> .empty_permitted .
<name2> . _errors = <name6>	<name2> ._errors is <name6> .
<name2> . _changed_data = <name6>	<name2> ._changed_data is <name6> .
<name3> . fields = <name1> . deepcopy ( <name3> . base_fields )	call the function <name1> .deepcopy with an argument <name3> .base_fields , substitute the result for <name3> .fields .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name1> <name5> . as_table ( )	call the method <name5> .as_table , <name1> the result .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name1> <name3> <name2> <name4> . fields :	<name1> every <name3> <name2> <name4> .fields ,
<name6> <name2> [ <name5> ]	get the value under the <name5> key of the <name2> dictionary , <name6> it as the return value of the generator .
def <name5> ( <name2> , <name3> ) :	define the method <name5> with 2 arguments : <name2> and <name3> .
<name2> :	<name2> ,
<name2> = <name4> . fields [ <name1> ]	get the value under the <name1> key of the <name4> .fields dictionary , substitute it for <name2> .
except <name1> :	if <name1> exception is caught ,
<name5> <name2> ( <name4> , <name6> , <name1> )	<name5> an instance of <name2> class , created with arguments <name4> , <name6> and <name1> .
@  <name1>	<name1> decorator ,
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name6> <name1> . _errors <name4> <name5> :	<name6> <name1> ._errors <name4> <name5> ,
<name6> . full_clean ( )	call the method <name6> .full_clean .
<name3> <name2> . _errors	<name3> <name2> ._errors .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name3> <name1> . is_bound <name5> not <name1> . errors	if <name1> .is_bound is true <name5> <name1> .errors is false , <name3> boolean True , otherwise <name3> boolean False .
def <name6> ( <name1> , <name4> ) :	define the method <name6> with 2 arguments : <name1> and <name4> .
<name3> <val4>   % ( <name1> . prefix , <name2> ) <name6> <name1> . prefix else <name2>	substitute '%s' in string <val4> with <name1> .prefix and <name2> and <name3> it , <name6> <name1> .prefix is true , <name6> not <name3> <name2> .
def <name2> ( <name3> , <name1> ) :	define the method <name2> with 2 arguments : <name3> and <name1> .
<name2> <val3>   % <name4> . add_prefix ( <name5> )	<name2> string <val3> where '%s' is replaced with <name2> value of the <name4> .add_prefix method called with an argument <name5> .
def <name1> ( <name3> , <name6> , <name5> , <name2> , <name4> , <name1> ) :	define the method <name1> with 6 arguments : <name3> , <name6> , <name5> , <name2> , <name4> and <name1> .
<name4> = <name2> . non_field_errors ( )	call the method <name2> .non_field_errors , substitute the result for <name4> .
<name2> , <name1> = [ ] , [ ]	<name2> and <name1> are both empty lists .
<name5> <name1> , <name3> <name6> <name4> . fields . items ( ) :	call the method <name4> .fields .items , <name5> every <name1> and <name3> <name6> return value ,
<name5> = ''	<name5> is an empty string .
<name6> = self [ <name3> ]	substitute value under the <name3> key for <name6> .
bf_errors = <name5> . error_class ( [ <name2> ( error ) for error in bf . errors ] )	call the method <name5> .error_class with an argument list containing results of the function <name2> ,
<name3> <name2> . is_hidden :	called with an argument error , for every error in <name2> .errors , substitute the result for bf_errors . <name3> <name2> .is_hidden is true ,
<name2> <name3> :	<name2> <name3> is true ,
top_errors . extend ( [ <name4> ( <val5>   ) % {  'name'   : <name2> , 'error'   : force_text ( e ) }   for e in bf_errors ] )	call the function <name4> with an argument string <val5> , where '%(name)s' is replaced with <name2> ,
<name6> . <name5> ( <name4> . text_type ( <name1> ) )	and '%(error)s' is replaced with return value of the force_text function called with an argument e , extend the top_errors with the result . call the function <name4> .text_type with an argument <name1> , <name5> the result to <name6> .
else :	if not ,
<name5> = <name1> . <name5> ( )	call the method <name1> .css_classes , substitute the result for <name5> .
<name1> <name4> :	<name1> <name4> is true ,
<name6> = <val4>   % <name1>	"replace ""%s"" from the string <val4> with <name1> , substitute it for <name6> ."
<name2> <name3> <name1> <name5> :	<name2> <name3> <name1> <name5> are both true ,
<name4> . <name2> ( <name6> % <name5> ( <name1> ) )	call the function <name5> with an argument <name1> , format the <name6> string with the result , <name2> it to the <name4> .
<name6> <name3> . label :	<name6> <name3> .label is true ,
<name2> = <name4> ( <name6> ( <name1> . <name2> ) )	call the function <name6> with an argument <name1> .label , use the result as an argument for the call to the function <name4> , substitute the result <name2> .
<name3> = <name6> . label_tag ( <name3> ) or ''	call the function <name6> .label_tag with an argument <name3> , if the result is true substitute it for <name3> , otherwise <name3> is an empty string .
else :	if not ,
<name2> = ''	<name2> is an empty string .
<name1> <name3> . help_text :	<name1> <name3> .help_text is true ,
<name6> = <name5> % <name4> ( <name1> . <name6> )	call the function <name4> with an argument <name1> .help_text , format <name5> with it , substitute the result for <name6> .
else :	if not ,
help_text = ''	label is an empty string .
output . append ( <name1> % {   'errors'   : <name6> ( <name5> ) , 'label'   : <name6> ( label ) , 'field'   : six . text_type ( bf ) , 'help_text'   : help_text , 'html_class_attr'   : html_class_attr , 'field_name'   : bf . html_name , }  )	format string <name1> with an dictionary containing 6 entries : return value of the function <name6> with an argument <name5> ,
<name5> <name6> :	for 'errors' , return value of the function force_text with an argument label for 'label' , return value of the function six .text_type , with an argument bf , for 'field' , help_text for help_text , html_class_attr for 'html_class_attr' and bf .html_name for 'field_name' . <name5> <name6> is true ,
<name2> . <name4> ( 0 , <name6> % <name5> ( <name3> ) )	call the function <name5> with an argument <name3> , format <name6> with it , <name4> it at the beginning of <name2> .
<name1> <name6> :	<name1> <name6> is true ,
<name4> = ''   . <name5> ( <name1> )	<name5> <name1> elements into a string , without separation , substitute the result for <name4> .
<name2> <name3> :	<name2> <name3> is true ,
<name5> = <name6> [ - 1 ]	substitute last element of <name6> for <name5> .
<name5> not <name1> . endswith ( <name3> ) :	<name5> <name1> doesnt ends with <name3> ,
     last_row = ( <name3> % {  <val1>   : ''   , <val4>   : ''   , 'field'   : ''   , 'help_text'   : ''   , 'html_class_attr'   : html_class_attr }  )	format string <name3> with an dictionary containing 5 entries : an empty string for <val1> , empty string for <val4> ,
<name6> . <name3> ( <name5> )	empty string for 'field' , empty string for 'help_text' and html_class_attr for html_class_attr . <name3> <name5> to <name6> .
output [ - 1 ] = <name4> [ : - len ( <name1> ) ] + <name3> + <name1>	create list out of <name4> elements from the start to the last length of <name1> element , append <name3> and <name1> to it ,
else :	substitute the result for last element of output . if not ,
<name5> . <name6> ( <name3> )	<name6> <name3> to <name5> .
\ <name2> <name4> ( '\\n'   . <name6> ( <name3> ) ) \	<name6> elements of <name3> into a string with newline as separator , use it as an argument for the call to the function <name4> , <name2> it .
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
"<name4> <name3> . _html_output ( <name6> = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>'   , error_row = '<tr><td colspan=""2"">%s</td></tr>'   , row_ender = '</td></tr>'   , help_text_html = '<br /><span class=""helptext"">%s</span>'   , errors_on_separate_row = False )"	<name4> the result of the method <name3> ._html_output , called with 5 arguments : <name6> to a string ,
def <name3> ( <name1> ) :	"'<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' , error_row set to a a string , '<tr><td colspan=""2"">%s</td></tr>' , row_ender set to a string '</td></tr>' , help_text_html set to a string , '<br /><span class=""helptext"">%s</span>' and errors_on_separate_row set to boolean False . define the method <name3> with an argument <name1> ."
"<name2> <name5> . _html_output ( <name1> = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>'   , error_row = '<li>%s</li>'   , row_ender = '</li>'   , help_text_html = ' <span class=""helptext"">%s</span>'   , errors_on_separate_row = False )"	<name2> the result of the method <name5> ._html_output , called with 5 arguments : <name1> to a string ,
def <name2> ( <name5> ) :	"'<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' , error_row set to a a string '<li>%s</li>' , row_ender set to a string '</li>' , help_text_html set to a string , ' <span class=""helptext"">%s</span>' , and errors_on_separate_row set to boolean False . define the method <name2> with an argument <name5> ."
"<name1> <name5> . _html_output ( <name4> = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>'   , error_row = '%s'   , row_ender = '</p>'   , help_text_html = ' <span class=""helptext"">%s</span>'   , errors_on_separate_row = True )"	<name1> the result of the method <name5> ._html_output , called with 5 arguments : <name4> to a string ,
def <name1> ( <name2> ) :	"'<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' , error_row set to a a string '%s' , row_ender set to a string '</p>' , help_text_html set to a string , < span class = ""helptext"" > % s < / span >'  and errors_on_separate_row set to boolean True . define the method <name1> with an argument <name2> ."
<name1> <name3> . errors . get ( <name5> , <name3> . error_class ( error_class = 'nonfield'   ) )	<name1> the result of the method <name3> .errors .get called with 2 arguments : <name5> and <name1> value of the method ,
def <name5> ( <name6> , <name3> ) :	<name6> .error_class called with an argument error_class set to string 'nonfield' . define the method <name5> with 2 arguments : <name6> and <name3> .
<name5> = <name6> . fields [ <name1> ]	substitute the value under the <name1> key of the <name6> .fields dictionary for <name5> .
<name3> = <name6> . add_prefix ( <name1> )	call the method <name6> .add_prefix with an argument <name1> , substitute it for <name3> .
<name5> <name1> . widget . value_from_datadict ( <name6> . data , <name6> . files , <name3> )	<name5> the result of the method <name1> .widget .value_from_datadict called with 3 arguments : <name6> .data , <name6> .files and <name3> .
def <name1> ( <name2> , <name3> , error ) :	define the method <name1> with 3 arguments : <name2> , <name3> and errors .
<name6> <name4> isinstance ( <name5> , <name2> ) :	<name6> <name5> is <name4> an instance of <name2> ,
<name2> = <name6> ( <name2> )	<name2> is an instance of <name6> created with an argument <name2> .
<name4> hasattr ( <name1> , <val3>   ) :	<name4> <name1> has an attribute <val3> ,
<name3> <name6> <name4> <name1> <name2> :	<name3> <name6> <name4> <name1> <name2> ,
"<name3> <name2> ( ""The argument `field` must be `None` when the `error` "" ""argument contains errors for multiple fields."" )"	"<name3> an <name2> with an argument string ""The argument `field` must be `None` when the `error`argument contains errors for multiple fields."" ."
else :	if not ,
<name2> = <name2> . error_dict	substitute <name2> .error_dict for <name2> .
else :	if not ,
<name3> = {  field <name5> <name6> : <name3> . error_list }	<name3> is an dictionary with an initial entry <name3> .error_list for filed if true , <name5> <name6> if not .
<name4> <name1> , <name2> <name5> <name6> . items ( ) :	call the method <name6> .items , <name4> every <name1> and <name2> <name5> the result ,
<name4> <name1> <name3> <name2> <name6> . errors :	<name4> <name1> is <name3> contained <name2> <name6> .errors ,
<name4> <name6> != <name3> <name5> <name6> <name2> <name1> <name4> . fields :	<name4> <name6> is <name2> equal to <name3> <name5> <name6> is <name2> contained <name1> <name4> .fields ,
<name3> <name2> ( <val5> % ( <name1> . __class__ . __name__ , <name6> ) )	<name3> an <name2> with an argument string <val5> , with '%s' replaced with <name1> .__class__ .__name__ and <name6> , respectively .
<name5> <name1> == <name6> :	<name5> <name1> equals <name6> ,
<name1> . _errors [ field ] = <name1> . <name2> ( <name2> = <val3>   )	call the method <name1> .error_class with an argument <name2> as an string <val3> ,
else :	substitute the result for value under the field key of the self ._errors dictionary . if not ,
<name4> . _errors [ <name6> ] = <name4> . error_class ( )	call the method <name4> .error_class , substitute the result for value under the <name6> key of the <name4> ._errors dictionary .
<name1> . _errors [ <name4> ] . <name3> ( <name2> )	<name3> the value under the <name4> key of the <name1> ._errors dictionary with <name2> .
<name3> <name6> <name4> <name5> . cleaned_data :	<name3> <name6> is contained <name4> <name5> .cleaned_data ,
del <name4> . cleaned_data [ <name1> ]	delete the entry of <name4> .cleaned_data dictionary under the key <name1> .
def <name2> ( <name4> , <name6> , <name5> = <name3> ) :	define the method <name2> with 3 arguments : <name4> , <name6> and <name5> set to <name3> .
<name3> <name4> <name5> <name6> :	<name3> <name4> <name5> <name6> ,
<name1> <name5> <name6> <name3> . errors	if <name5> is contained <name6> <name3> .errors <name1> boolean True , if not , <name1> boolean False .
<name6> <name5> <name4> <name2> . errors :	<name6> <name5> is contained <name4> <name2> .errors ,
<name5> <name1> in <name6> . errors . as_data ( ) [ field ] :	call the method <name6> .errors .as_data , <name5> every <name1> <name5> value under the filed key of the returned dictionary ,
<name6> <name1> . <name4> == <name4> :	<name6> <name1> .code equals <name4> ,
<name6> <name4>	<name6> boolean <name4> .
<name2> <name3>	<name2> boolean <name3> .
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name6> . _errors = <name3> ( )	<name6> ._errors is an instance of <name3> .
<name3> not <name6> . is_bound :	<name3> <name6> .is_bound is false ,
<name1>	<name1> nothing .
<name5> . cleaned_data = { }	<name5> .cleaned_data is an empty dictionary .
<name4> <name6> . empty_permitted <name2> not <name6> . has_changed ( ) :	<name4> <name6> .empty_permitted is true <name2> call to the method <name6> .has_changed evaluates to false ,
<name6>	<name6> nothing .
<name6> . _clean_fields ( )	call the method <name6> ._clean_fields .
<name3> . _clean_form ( )	call the method <name3> ._clean_form .
<name2> . _post_clean ( )	call the method <name2> ._post_clean .
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name6> <name1> , <name5> <name2> <name3> . fields . items ( ) :	call the method <name3> .fields .items , <name6> every <name1> and <name5> <name2> result ,
<name6> = <name3> . widget . value_from_datadict ( <name2> . data , <name2> . files , <name2> . add_prefix ( name ) )	call the method <name3> .widget .value_from_datadict with 3 arguments : <name2> .data , <name2> .files and return <name6> of the method ,
<name3> :	self .add_prefix called with an argument name , substitute the result for value . <name3> ,
<name2> isinstance ( <name5> , <name4> ) :	<name2> <name5> is an instance of <name4> ,
<name4> = <name6> . <name4> . <name1> ( <name3> , field . <name4> )	<name1> the value under the <name3> key of the <name6> .initial dictionary , if it exists substitute it for <name4> ,
<name2> = <name3> . clean ( <name2> , <name5> )	if not substitute <name3> .initial for <name5> . call the method filed .clean with arguments <name2> and <name5> , substitute the result for <name2> .
else :	if not ,
<name5> = <name6> . clean ( <name5> )	call the method <name6> .clean with an argument <name5> , substitute the result for <name5> .
<name4> . cleaned_data [ <name2> ] = <name5>	substitute <name5> for the <name5> under the <name2> key of the <name4> .cleaned_data dictionary .
<name4> hasattr ( <name5> , <val2>   % <name1> ) :	<name4> <name5> has an attribute <val2> , where '%s' is replaced with <name1> ,
value = getattr ( <name5> , <val1>   % <name3> ) ( )	get <val1> , where '%s' is replaced with <name3> '  attribute of the <name5> object , call the result as an function ,
<name1> . cleaned_data [ <name2> ] = <name6>	substitute the result for <name6> . substitute <name6> for the <name6> under the <name2> key of the <name1> .cleaned_data dictionary .
except <name6> as <name3> :	if <name6> renamed to <name3> , exception is caught ,
<name1> . add_error ( <name3> , <name6> )	call the method <name1> .add_error with 2 arguments <name3> and <name6> .
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name5> :	<name5> ,
<name3> = <name2> . clean ( )	call the method <name2> .clean , substitute the result for <name3> .
except <name1> as <name2> :	if <name1> renamed to <name2> , exception is caught ,
<name2> . add_error ( <name5> , <name6> )	call the method <name2> .add_error with 2 arguments <name5> and <name6> .
else :	if not ,
<name4> <name1> <name6> <name5> <name2> :	<name4> <name1> <name6> <name5> <name2> ,
<name4> . <name5> = <name5>	substitute <name5> for <name4> .cleaned_data .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
pass	do nothing .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name4> <name3> . cleaned_data	<name4> <name3> .cleaned_data .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name1> bool ( <name2> . changed_data )	convert <name2> .changed_data into boolean , <name1> it .
@  <name5>	<name5> decorator ,
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name1> <name5> . _changed_data <name6> <name4> :	<name1> <name5> ._changed_data <name6> <name4> ,
<name5> . _changed_data = [ ]	<name5> ._changed_data is an empty list .
<name4> <name1> , <name2> <name5> <name3> . fields . items ( ) :	call the method <name3> .fields .items , <name4> every <name1> and <name2> <name5> the result ,
<name4> = <name2> . add_prefix ( <name5> )	call the method <name2> .add_prefix with an argument <name5> , substitute the result for <name4> .
<name2> = <name4> . widget . value_from_datadict ( <name6> . data , <name6> . files , <name1> )	call the method <name4> .widget .value_from_datadict with 3 arguments : <name6> .data , <name6> .files , <name1> , substitute the result for <name2> .
<name6> not <name4> . show_hidden_initial :	<name6> <name4> .show_hidden_initial is false ,
<name5> = <name4> . initial . <name3> ( <name1> , field . initial )	<name3> the value under the <name1> key of the <name4> .initial dictionary , if it exists substitute it for <name5> ,
<name2> <name3> ( <name4> ) :	<name2> not substitute field .initial for <name4> . <name2> <name4> is an <name3> object ,
     <name3> = <name3> ( )	call the function <name3> , substitute the result for <name3> .
else :	if not ,
<name6> = <name4> . add_initial_prefix ( <name2> )	call the method <name4> .add_initial_prefix with an argument <name2> , substitute the result for <name6> .
hidden_widget = <name2> . hidden_widget ( )	call the method <name2> .hidden_widget , substitute the result for <name2> .hidden_widget .
<name3> :	<name3> ,
     initial_value = field . to_python ( <name5> . value_from_datadict ( <name6> . data , <name6> . files , <name4> ) )	call the method ( <name5> .value_from_datadict with 3 arguments : <name6> .data , <name6> .files and <name4> ,
except <name3> :	use the result as an argument for the call to the field .to_python method , substitute the result for initial_value . if <name3> exception is caught ,
       <name3> . _changed_data . <name5> ( <name6> )	<name5> <name6> to <name3> ._changed_data .
continue	skip this loop iteration .
<name4> <name3> . _has_changed ( <name2> , <name6> ) :	call the method <name3> ._has_changed with 2 arguments : <name2> and <name6> , <name4> it evaluates to true ,
<name4> . _changed_data . <name5> ( <name6> )	<name5> <name6> to <name4> ._changed_data list .
<name6> <name5> . _changed_data	<name6> <name5> ._changed_data .
@  <name1>	<name1> decorator ,
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name5> = <name3> ( )	<name5> is an instance of <name3> class .
<name1> <name4> <name6> <name2> . fields . values ( ) :	call the method <name2> .fields .values , <name1> every <name4> <name6> result ,
<name4> = <name4> + <name1> . widget . <name4>	append <name1> .widget .media to <name4> , substitute the result for <name4> .
<name2> <name3>	<name2> <name3> .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name5> <name2> <name4> <name3> . fields . values ( ) :	call the method <name3> .fields .values , <name5> every <name2> <name4> result ,
<name6> <name1> . widget . needs_multipart_form :	<name6> <name1> .widget .needs_multipart_form is true ,
<name6> <name3>	<name6> boolean <name3> .
<name5> <name2>	<name5> boolean <name2> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name5> [ <name4> <name1> <name4> <name6> <name3> <name2> <name4> . is_hidden ]	<name1> <name4> <name6> <name3> <name2> <name4> .is_hidden is true , append <name4> to a list , <name5> the resulting list .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name2> [ <name4> <name6> <name4> <name1> <name5> <name3> not <name4> . is_hidden ]	<name6> <name4> <name1> <name5> <name3> <name4> .is_hidden is false , append <name4> to a list , <name2> the resulting list .
<name3> <name2> ( six . with_metaclass ( <name6> , <name5> ) ) :	derive the <name3> <name2> from the base classes <name6> and <name5> .
@  <name2>	decorator <name2> ,
<name3> <name1> ( <name4> ) :	derive the <name3> <name1> from the base <name3> <name4> .
def <name1> ( <name6> , <name2> , <name5> , <name4> ) :	define the method <name1> with 4 arguments : <name6> , <name2> , <name5> and <name4> .
<name1> . <name3> = <name3>	substitute <name3> for <name1> .form .
<name5> . <name2> = <name2>	substitute <name2> for <name5> .field .
<name5> . <name3> = <name3>	substitute <name3> for <name5> .name .
<name3> . html_name = <name2> . add_prefix ( name )	call the method <name2> .add_prefix with an argument <name3> , substitute the result for <name3> .html_name .
<name1> . html_initial_name = <name4> . add_initial_prefix ( <name2> )	call the method <name4> .add_initial_prefix with an argument <name2> , substitute the result for <name1> .html_initial_name .
<name1> . html_initial_id = <name6> . add_initial_prefix ( <name1> . auto_id )	call the method <name6> .add_initial_prefix with an argument <name1> .auto_id , substitute the result for <name1> .html_initial_id .
<name4> <name5> . field . label <name2> <name3> :	<name4> <name5> .field .label <name2> <name3> ,
<name6> . label = <name4> ( <name3> )	call the method <name4> with an argument <name3> , substitute the result for <name6> .label .
else :	if not ,
<name4> . label = <name4> . field . label	substitute <name4> .field .label for <name4> .label .
<name5> . help_text = <name2> . help_text or ''	if <name2> .help_text is true , substitute <name2> .help_text for <name5> .help_text , if not <name5> .help_text is an empty string .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name3> <name5> . field . show_hidden_initial :	<name3> <name5> .field .show_hidden_initial is true ,
return <name2> . as_widget ( ) + <name2> . as_hidden ( <name5> = <name1> )	call the method <name2> .as_hidden with an argument <name5> set to boolean <name1> ,
<name3> <name1> . as_widget ( )	append the result to the result of the method , <name1> .as_widget , <name3> the resulting string . call the method <name1> .as_widget , <name3> the result .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name2> = <name4> . field . widget . attrs . <name1> ( <val3>   ) or <name4> . auto_id	<name1> the value under the <val3> key of the <name4> .field .widget .attrs dictionary , if the key exists substitute it for <name2> ,
<name3> = {  <val4>   : <name6> }  <name2> <name6> else { }	<name2> not , substitute self .auto_id for <name6> . <name2> if_is true <name3> is an dictionary with initial entry : <name6> for <val4> , <name2> not , <name3> is an empty dictionary .
for subwidget in <name2> . field . widget . subwidgets ( <name2> . html_name , <name2> . <name6> ( ) , <name5> ) :	call the method <name2> .field .widget .subwidgets with 3 arguments : <name2> .html_name , return <name6> of the method <name2> .value and <name5> ,
<name2> <name6>	for every <name6> in the result , <name2> <name6> , as the result of the generator .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name6> len ( <name2> ( <name4> . __iter__ ( ) ) )	convert result of the method <name4> .__iter__ into a <name2> , <name6> its length .
def <name4> ( <name2> , <name6> ) :	define the method <name4> with 2 arguments : <name2> and <name6> .
<name6> <name1> ( <name5> . __iter__ ( ) ) [ <name4> ]	convert result of the method <name5> .__iter__ into a <name1> , <name6> element at the <name4> index .
@  <name1>	<name1> decorator ,
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name1> <name3> . form . errors . <name5> ( <name3> . name , <name3> . form . error_class ( ) )	<name5> the value under the <name3> .name key of the <name3> .form .errors dictionary , if the key exists , <name1> it ,
def <name5> ( <name3> , <name4> = <name1> , <name6> = <name1> , <name2> = <name5> ) :	if not evaluate the method <name3> .form .error_class and return the result . define the method <name5> with 4 arguments : <name3> , <name4> set to <name1> , <name6> set to <name1> , <name2> set to boolean <name5> .
<name5> not <name2> :	<name5> <name2> is false ,
<name2> = <name3> . field . <name2>	substitute <name3> .field .widget for <name2> .
<name4> <name5> . field . localize :	<name4> <name5> .field .localize is true ,
<name5> . is_localized = <name3>	<name5> .is_localized is boolean <name3> .
<name3> = <name3> or { }	if <name3> is false , make it an empty dictionary .
<name6> = <name5> . <name6>	substitute <name5> .auto_id for <name6> .
<name2> <name5> <name3> <val6>   <name4> <name1> <name2> <name3> <val6>   <name4> <name1> <name5> . <name2> :	<name2> <name5> is true <name3> <val6> is <name4> contained <name1> <name2> <name3> <val6> is <name4> contained <name1> <name5> .attrs ,
<name5> not <name4> :	<name5> <name4> is false ,
<name5> [ <val2>   ] = <name6>	substitute <name6> for value under the <val2> key of the <name5> dictionary .
else :	if not ,
<name1> [ <val3>   ] = <name6> . html_initial_id	substitute <name6> .html_initial_id for value under the <val3> key of the <name1> dictionary .
<name1> not <name3> :	<name1> <name3> is false ,
<name6> = <name1> . html_name	substitute <name1> .html_name for <name6> .
else :	if not ,
<name3> = <name4> . html_initial_name	substitute <name4> .html_initial_name for <name3> .
<name2> force_text ( <name6> . render ( <name5> , <name1> . <name3> ( ) , <name4> = <name4> ) )	call the method <name6> .render with 3 arguments : <name5> , <name2> <name3> of the method <name1> .value , <name4> set to <name4> ,
def <name1> ( <name2> , <name4> = <name3> , ** <name5> ) :	use it as an argument for the call to the function force_text , return the result . define the method <name1> with 3 arguments : <name2> , <name4> set to <name3> and unpacked dictionary <name5> .
<name3> <name5> . as_widget ( <name6> ( ) , <name4> , ** <name2> )	call the method <name5> .as_widget with 3 arguments : instance of a class <name6> , <name4> and unpacked dictionary <name2> , <name3> the result .
def <name2> ( <name4> , <name1> = <name3> , ** <name5> ) :	define the method <name2> with 3 arguments : <name4> , <name1> set to <name3> and unpacked dictionary <name5> .
<name4> <name3> . as_widget ( <name5> ( ) , <name2> , ** <name6> )	call the method <name3> .as_widget with 3 arguments : instance of a class <name5> , <name2> and unpacked dictionary <name6> , <name4> the result .
def <name5> ( <name3> , <name1> = <name4> , ** <name2> ) :	define the method <name5> with 3 arguments : <name3> , <name1> set to <name4> and unpacked dictionary <name2> .
<name2> <name5> . as_widget ( <name5> . field . hidden_widget ( ) , <name6> , ** kwargs )	call the method <name5> .as_widget with 3 arguments : <name2> value of the method <name5> .field .hidden_widget , <name6> ,
@  <name4>	and unpacked dictionary kwargs , return the result . <name4> decorator ,
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
<name3> <name5> . field . widget . value_from_datadict ( <name5> . form . data , <name5> . form . files , <name5> . html_name )	call the method <name5> .field .widget .value_from_datadict with 3 arguments : <name5> .form .data , <name5> .form .files , <name5> .html_name , <name3> the result .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name3> not <name2> . form . is_bound :	<name3> <name2> .form .is_bound is false ,
<name1> = <name5> . form . initial . <name6> ( <name5> . name , <name5> . field . initial )	<name6> the value under the <name5> .name key of the <name5> .form .initial dictionary , if it exists , substitute it for <name1> ,
<name2> <name1> ( <name5> ) :	<name2> not , substitute self .field .initial for <name5> . <name2> <name5> is an <name1> object ,
<name6> = <name6> ( )	call the method <name6> , substitute the result for <name6> .
<name1> ( isinstance ( <name6> , ( <name5> . <name5> , <name5> . time ) ) <name4> not getattr ( <name2> . <name3> . widget , 'supports_microseconds'   , True ) ) :	<name1> <name6> is an instance of <name5> .datetime or <name5> .time classes , <name4> supports_microseconds <name3> of <name2> .field .widget is false ,
<name6> = <name6> . replace ( <name2> = <val5> )	call the method <name6> .replace with an argument <name2> set to integer <val5> , substitute the result for <name6> .
else :	if not ,
data = <name1> . field . bound_data ( <name1> . data , <name1> . form . initial . get ( <name1> . name , <name1> . field . initial ) )	call the method <name1> .field .bound_data with 2 arguments : <name1> .data and value under the <name1> .name key of the dictionary ,
<name5> <name1> . field . prepare_value ( <name4> )	<name1> .form .initial , if it exists , or <name1> .field .initial if not , substitute the result for <name4> . call the method <name1> .field .prepare_value with an argument <name4> , <name5> the result .
def <name1> ( <name5> , <name2> = <name3> , <name6> = <name3> , <name4> = <name3> ) :	define the method <name1> with 4 arguments : <name5> , <name2> set to <name3> , <name6> set to <name3> and <name4> set to <name3> .
<name5> = <name5> or <name2> . label	if <name5> is false , substitute <name2> .label for <name5> .
<name6> <name1> <name5> <name3> :	<name6> <name1> <name5> <name3> ,
<name1> = ( <name2> . field . <name1> <name3> <name2> . field . <name1> <name6> <name4> <name5> else <name2> . form . <name1> )	<name3> <name2> .field .label_suffix <name6> <name4> <name5> , substitute <name2> .field .label_suffix for <name1> ,
<name2> <name6> <name5> <name3> <name5> <name3> [ - 1 ] <name4> <name1> <name2> ( ':?.!'   ) :	otherwise substitute self .form .label_suffix for <name6> . <name2> <name6> <name5> <name3> are both true <name5> last element of <name3> is <name4> contained <name1> the result of the function <name2> ,
<name2> = <name3> ( <val1>   , <name2> , <name5> )	called with an argument string ':?.!' . call the method <name3> with 3 arguments : string <val1> , <name2> and <name5> , substitute the result for <name2> .
<name1> = <name5> . field . <name1>	substitute <name5> .field .widget for <name1> .
<name3> = <name1> . attrs . <name6> ( <val5>   ) or self . auto_id	<name6> the value under the <val5> key of the <name1> .attrs dictionary , if the key exists substitute it for <name3> ,
<name1> <name3> :	<name1> not , substitute self .auto_id for <name3> . <name1> <name3> is true ,
<name1> = <name6> . <name1> ( <name4> )	call the method <name6> .id_for_label with an argument <name4> , substitute the result for <name1> .
<name1> <name3> :	<name1> <name3> is true ,
<name6> = dict ( <name6> or { }  , ** {  <val4>   : <name5> }  )	unpack a dictionary with an entry <name5> for <val4> , map it through <name6> mapping if <name6> is true ,
<name1> <name2> . field . required <name3> hasattr ( <name2> . form , <val5>   ) :	<name3> convert it again to the dictionary , <name1> attrs is false , leave it alone , substitute the result for attrs . <name1> <name2> .field .required is true <name3> <name2> .form has an attribute <val5> ,
<name5> = <name5> or { }	if <name5> is false , make <name5> an empty dictionary .
<name2> <val4>   <name1> <name3> :	<name2> <val4> is contained <name1> <name3> ,
<name1> [ <val3>   ] += ' '   + <name5> . form . required_css_class	append <name5> .form .required_css_class to a whitespace character , append it to the value under the <val3> key of the <name1> dictionary .
else :	if not ,
<name3> [ <val5>   ] = <name2> . form . required_css_class	substitute <name2> .form .required_css_class for the value under the <val5> key of the <name3> dictionary .
<name3> = <name6> ( <name3> ) <name2> <name3> else ''	<name2> <name3> is true , call the function <name6> with an argument <name3> , substitute the result for <name3> , <name2> not <name3> is an empty string .
<name2> = <name4> ( <val5>   , <name6> , <name2> )	call the function <name4> with 3 arguments string <val5> , <name6> and <name2> , substitute the result for <name2> .
else :	if not ,
<name5> = <name2> ( <name5> )	call the function <name2> with an argument <name5> , substitute the result for <name5> .
<name1> <name2> ( <name5> )	call the function <name2> with an argument <name5> , <name1> the result .
def <name6> ( <name5> , <name4> = <name3> ) :	define the method <name6> with 2 arguments : <name5> and <name4> set to <name3> .
<name5> hasattr ( <name3> , <val4>   ) :	<name5> <name3> has an attribute <val4> ,
<name5> = <name5> . <name3> ( )	<name3> <name5> into words , by whitespaces , substitute the result for <name5> .
<name4> = <name5> ( <name4> or [ ] )	if <name4> is not empty put its elements into a <name5> , substitute it for <name4> , if not <name4> is an empty <name5> .
<name2> <name6> . errors <name3> hasattr ( <name6> . form , <val5>   ) :	<name2> <name6> .errors is true <name3> <name6> .form has an attribute <val5> ,
<name3> . <name4> ( <name2> . form . error_css_class )	<name4> <name2> .form .error_css_class to <name3> set .
<name1> <name3> . field . required <name5> hasattr ( <name3> . form , <val6>   ) :	<name1> <name3> .field .required is true <name5> <name3> .form has an attribute <val6> ,
<name5> . <name4> ( <name2> . form . required_css_class )	<name4> <name2> .form .required_css_class to <name5> set .
<name6> ' '   . <name2> ( <name3> )	<name2> elements of <name3> into a string separated by whitespaces , <name6> it .
@  <name1>	<name1> decorator ,
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name4> <name2> . field . widget . is_hidden	<name4> <name2> .field .widget .is_hidden ,
@  <name3>	<name3> decorator ,
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name6> = <name1> . form . <name6>	substitute <name1> .form .auto_id for <name6> .
<name3> <name5> <name2> <val4>   <name1> <name6> ( <name5> ) :	<name3> <name5> is true <name2> <val4> is contained <name1> result of the call to the function <name6> with an argument <name5> ,
<name2> <name3> ( <name4> ) % <name1> . html_name	call the function <name3> with an argument <name4> , format the result with <name1> .html_name , <name2> it .
elif <name6> :	otherwise if <name6> is true ,
<name1> <name2> . html_name	<name1> <name2> .html_name .
<name6> ''	<name6> an empty string .
@  <name6>	<name6> decorator ,
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name3> = <name2> . field . <name3>	substitute <name2> .field .widget for <name3> .
<name2> = <name4> . attrs . <name3> ( <val5>   ) or self . auto_id	<name3> the value under the <val5> key of the <name4> .attrs dictionary , if the key exists substitute it for <name2> ,
<name3> <name1> . id_for_label ( <name2> )	if not , substitute self .auto_id for <name2> . call the method <name1> .id_for_label with an argument <name2> , <name3> the result .
<name4> <name6> <name2> <name3>	<name4> <name6> <name2> <name3> into default name space .
<name5> <name1> . core . exceptions <name4> <name3>	<name5> <name1> .core .exceptions <name4> <name3> into default name space .
<name1> <name2> . forms <name6> <name3>	<name1> <name2> .forms <name6> <name3> into default name space .
<name5> <name1> . forms . fields <name4> <name3> , <name2>	<name5> <name1> .forms .fields <name4> <name3> and <name2> into default name space .
<name3> <name4> . forms . utils <name6> <name5>	<name3> <name4> .forms .utils <name6> <name5> into default name space .
<name2> <name6> . forms . widgets <name5> <name3>	<name2> <name6> .forms .widgets <name5> <name3> into default name space .
<name2> <name4> . utils . encoding <name5> <name6>	<name2> <name4> .utils .encoding <name5> <name6> into default name space .
<name4> <name2> . utils . functional <name6> <name1>	<name4> <name2> .utils .functional <name6> <name1> into default name space .
<name1> <name5> . utils . safestring <name2> <name4>	<name1> <name5> .utils .safestring <name2> <name4> into default name space .
<name6> <name2> . utils <name5> <name3>	<name6> <name2> .utils <name5> <name3> into default name space .
<name6> <name2> . utils . six . moves <name3> <name5>	<name6> <name2> .utils .six .moves <name3> <name5> into default name space .
<name2> <name1> . utils . translation <name4> <name3> , <name5> <name6> <name2>	<name2> <name1> .utils .translation <name4> <name3> and <name5> <name6> <name2> into default name space .
<name2> = ( <val1>   , <val4>   , <val6>   )	<name2> is a tuple containing strings <val1> , <val4> and <val6> .
<name3> = <val6>	<name3> is a string <val6> .
<name3> = <val1>	<name3> is a string <val1> .
<name5> = <val4>	<name5> is a string <val4> .
<name4> = <val6>	<name4> is a string <val6> .
<name3> = <val4>	<name3> is a string <val4> .
<name1> = <val3>	<name1> is a string <val3> .
<name1> = <val3>	<name1> is an integer <val3> .
<name6> = <val5>	<name6> is an integer <val5> .
<name6> <name3> ( <name5> ) :	derive the <name6> <name3> from the <name5> base <name6> .
def <name4> ( <name1> , * <name6> , ** <name3> ) :	define the method <name4> with 3 arguments : <name1> , unpacked list <name6> and unpacked dictionary <name3> .
<name4> . base_fields [ <name2> ] = <name1> ( widget = HiddenInput )	value under the <name2> of the <name4> .base_fields dictionary is an instance of <name1> class ,
<name1> . base_fields [ <name3> ] = <name5> ( <name6> = <name2> )	created with an argument <name6> set to <name2> . value under the <name3> of the <name1> .base_fields dictionary is an instance of <name5> class ,
<name6> . base_fields [ <name4> ] = <name5> ( required = False , <name3> = <name2> )	created with an argument <name3> set to <name2> . value under the <name4> of the <name6> .base_fields dictionary is an instance of <name5> class ,
<name1> . base_fields [ <name3> ] = <name5> ( <name2> = <name6> , <name4> = <name1> )	created with 2 arguments : <name2> as boolean <name6> and <name4> set to <name1> . value under the <name3> of the <name1> .base_fields dictionary is an instance of <name5> class ,
super ( <name2> , self ) . <name4> ( * <name6> , ** kwargs )	created with 2 arguments : required as boolean False and widget set to HiddenInput . call the method <name4> from the base class of the class <name2> , called with 2 arguments : unpacked list <name6> ,
@  <name1>	and unpacked dictionary kwargs . <name1> decorator ,
<name1> <name4> ( <name2> ) :	derive the <name1> <name4> from the <name2> base <name1> .
def <name4> ( <name3> , <name5> = <name2> , <name1> = <name2> , <name6> = <val4>   , prefix = <name2> , initial = <name2> , error_class = ErrorList ) :	define the method <name4> with 7 arguments : <name3> , <name5> set to <name2> , <name1> set to <name2> , <name6> set to an string <val4> ,
<name3> . is_bound = <name2> <name4> <name6> <name1> <name5> <name3> <name4> <name6> <name1>	if <name2> <name4> <name6> <name1> <name5> <name3> <name4> <name6> <name1> , <name3> .is_bound <name4> boolean True , otherwise it <name4> boolean False .
<name4> . <name5> = <name5> or <name4> . get_default_prefix ( )	if <name5> is true , substitute it for <name4> .prefix , otherwise call the method <name4> .get_default_prefix ,
<name4> . <name3> = <name3>	and substitute the result for <name4> .prefix . substitute <name3> for <name4> .auto_id .
<name2> . <name4> = <name4> or { }	if <name4> is true , substitute it for <name2> .data , otherwise <name2> .data is an empty dictionary .
<name5> . files = files or { }	if data is true , substitute it for <name5> .files , otherwise <name5> .files is an empty dictionary .
<name6> . initial = initial	substitute initial_id for <name6> .auto_id .
<name1> . <name3> = <name3>	substitute <name3> for <name1> .error_class .
<name5> . _errors = <name2>	<name5> ._errors is <name2> .
<name4> . _non_form_errors = <name1>	<name4> ._non_form_errors is <name1> .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name1> <name2> . as_table ( )	call the method <name2> .as_table , <name1> the result .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name4> iter ( <name6> . forms )	convert <name6> .forms into an iterable , <name4> it .
def <name1> ( <name6> , index ) :	define the method <name1> with an argument <name6> .
<name1> <name6> . forms [ <name2> ]	<name1> <name6> .forms element at the <name2> <name2> .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name6> len ( <name5> . forms )	<name6> the length of <name5> .forms .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name1> <name3>	<name1> boolean <name3> .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name5> <name6> ( <name1> ) . <name4> ( <name1> )	get the <name6> of <name1> object , call the <name4> method on the result with an argument <name1> , <name5> the result .
@  <name3>	<name3> decorator ,
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name3> <name1> . is_bound :	<name3> <name1> .is_bound is true ,
<name1> = <name6> ( <name3> . data , <name2> = <name3> . <name2> , <name5> = <name3> . <name5> )	<name1> is an instance of <name6> class , created with 3 arguments : <name3> .data , <name2> as <name3> .auto_id and <name5> as <name3> .prefix .
<name2> not <name6> . is_valid ( ) :	call the <name6> .is_valid method , <name2> it evaluates to false ,
<name6> <name1> ( <name2> ( 'ManagementForm data is missing or has been tampered with'   ) , code = 'missing_management_form'   , )	<name6> <name1> with 2 arguments : return value of the function <name2> called with an argument string ,
else :	'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form' . if not ,
<name5> = <name2> ( <name3> = <name4> . <name3> , <name1> = <name4> . <name1> , initial = {   TOTAL_FORM_COUNT : <name4> . total_form_count ( ) , INITIAL_FORM_COUNT : <name4> . initial_form_count ( ) , MIN_NUM_FORM_COUNT : <name4> . min_num , MAX_NUM_FORM_COUNT : <name4> . max_num }  )	<name5> is an instance of <name2> class , created with 3 arguments : <name3> as <name4> .auto_id , <name1> as <name4> .prefix ,
<name3> <name2>	and initial as a dictionary with 4 entries : result of self .total_form_count method for TOTAL_FORM_COUNT , result of self .initial_form_count method for INITIAL_FORM_COUNT , self .min_num for MIN_NUM_FORM_COUNT and self .max_num for MAX_NUM_FORM_COUNT . <name3> <name2> .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name4> <name1> . is_bound :	<name4> <name1> .is_bound is true ,
return min ( <name2> . management_form . cleaned_data [ <name1> ] , <name2> . absolute_max )	get the element with minimal value between the value under the <name1> key of <name2> .management_form .cleaned_data dictionary ,
else :	and self .absolute_max , return the result . if not ,
<name1> = <name4> . initial_form_count ( )	call the method <name4> .initial_form_count , return the result <name1> .
<name5> = max ( <name4> , <name6> . min_num ) + <name6> . extra	get the element with maximal value between <name4> and <name6> .min_num , add <name6> .extra to it , substitute the result for <name5> .
<name1> <name4> >  <name3> . max_num >= <val5> :	<name1> <name4> is grater than <name3> .max_num is grater or equal to integer <val5> ,
<name5> = <name2>	substitute <name2> for <name5> .
elif <name2> >  <name1> . max_num >= <val3> :	otherwise if <name2> is grater than <name1> .max_num is grater or equal to integer <val3> ,
<name3> = <name1> . max_num	substitute <name1> .max_num for <name3> .
<name4> <name1>	<name4> <name1> .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name3> <name6> . is_bound :	<name3> <name6> .is_bound is true ,
<name5> <name3> . management_form . cleaned_data [ <name6> ]	<name5> the value under the <name6> key of the <name3> .management_form .cleaned_data dictionary .
else :	if not ,
<name1> = len ( <name4> . initial ) <name3> <name4> . initial else <val2>	<name3> <name4> .initial is true , substitute the length of <name4> .initial for <name1> , <name3> not , <name1> is integer <val2> .
<name5> <name2>	<name5> <name2> .
@  <name5>	<name5> decorator ,
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
forms = [ <name3> . _construct_form ( <name2> ) <name1> <name2> <name5> xrange ( <name3> . total_form_count ( ) ) ]	<name1> every <name2> <name5> sequence of integers from 0 to result of the method <name3> .total_form_count , call the method <name3> ._construct_form ,
<name6> <name2>	with an argument i , append the result to a list , substitute the resulting list for <name2> . <name6> <name2> .
def <name5> ( <name6> , <name3> , ** <name1> ) :	define the method <name5> with 3 arguments : <name6> , <name3> and unpacked dictionary <name1> .
<name6> = {   <val3>   : <name4> . auto_id , 'prefix'   : <name4> . add_prefix ( i ) , 'error_class'   : <name4> . error_class , }	<name6> is an dictionary with 3 initial entries : <name4> .auto_id for <val3> , result of the call to the method <name4> .add_prefix ,
<name2> <name1> . is_bound :	with an argument i , for 'prefix' and <name1> .error_class for 'error_class' . <name2> <name1> .is_bound is true ,
<name4> [ <val1>   ] = <name6> . data	substitute <name6> .data for value under the <val1> key of the <name4> dictionary .
<name5> [ <val6>   ] = <name2> . files	substitute <name2> .files for value under the <val6> key of the <name5> dictionary .
<name1> <name5> . initial <name2> <val6>   <name4> <name3> <name1> :	<name1> <name5> .initial is true <name2> <val6> key is <name4> contained <name3> <name1> ,
<name2> :	<name2> ,
<name4> [ <val2>   ] = <name6> . initial [ <name3> ]	substitute <name3> - th element of <name6> .initial for value under the <val2> key of the <name4> dictionary .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
<name3> <name6> >= <name2> . initial_form_count ( ) and <name6> >= <name2> . min_num :	<name3> <name6> is greater than , or equal to the result of the call to the method <name2> .initial_form_count ,
<name3> [ <val2>   ] = <name4>	and i is greater than or equal to self .min_num , value under the <val2> key of the <name3> dictionary is boolean <name4> .
<name6> . <name5> ( <name4> )	<name5> <name6> dictionary with <name4> .
<name1> = <name3> . <name1> ( ** <name5> )	call the method <name3> .form with unpacked dictionary <name5> as an argument , substitute it for <name1> .
<name2> . add_fields ( <name5> , <name1> )	call the method <name2> .add_fields with arguments <name5> and <name1> ) .
<name1> <name3>	<name1> <name3> .
@  <name2>	<name2> decorator ,
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name6> <name5> . forms [ : <name5> . initial_form_count ( ) ]	call the <name5> .initial_form_count method , <name6> the sublist of <name5> .forms from the beginning to the previous result as the end index .
@  <name5>	<name5> decorator ,
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name6> <name4> . forms [ <name4> . initial_form_count ( ) : ]	call the <name4> .initial_form_count method , <name6> the sublist of <name4> .forms , using previous result as start index to the end .
@  <name3>	<name3> decorator ,
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
form = <name1> . form ( <name4> = <name1> . <name4> , <name6> = <name1> . add_prefix ( '__prefix__'   ) , empty_permitted = True , )	call the function empty_form with 3 arguments : <name4> as <name1> .auto_id , <name6> set to the return value of the <name1> .add_prefix method ,
<name1> . add_fields ( <name6> , <name2> )	called with string '__prefix__' as an argument and empty_permitted as boolean True , substitute the result for <name6> . call the method <name1> .add_fields with arguments <name6> and <name2> .
<name3> <name1>	<name3> <name1> .
@  <name1>	<name1> decorator ,
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name3> not <name1> . is_valid ( ) :	call the method <name1> .is_valid , <name3> it evaluates to false ,
<name5> [ <name3> . cleaned_data <name6> <name3> <name2> <name4> . forms ]	where '%s' is replaced with <name4> .__class__ .__name__ . <name6> <name3> <name2> <name4> .forms append <name3> .cleaned_data to a list , <name5> the resulting list .
@  <name6>	<name6> decorator ,
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name5> not <name6> . is_valid ( ) <name3> not <name6> . can_delete :	<name5> call to the method <name6> .is_valid , evaluates to false <name3> <name6> .can_delete is boolean false ,
<name6> [ ]	<name6> an empty list .
<name6> not hasattr ( <name1> , <val5>   ) :	<name6> <name1> doesnt have an <val5> attribute ,
<name4> . _deleted_form_indexes = [ ]	<name4> ._deleted_form_indexes is an empty list .
<name2> <name4> <name3> range ( <val1> , <name5> . total_form_count ( ) ) :	call the method <name5> .total_form_count , <name2> every <name4> <name3> sequence of integers , from <val1> to the previous result ,
<name1> = <name2> . forms [ <name4> ]	substitute <name4> - th element of <name2> .forms for <name1> .
<name5> <name2> >= <name6> . initial_form_count ( ) and not form . has_changed ( ) :	<name5> <name2> is greater than or equal to the result of the method <name6> .initial_form_count ,
continue	and call to the method form .has_changed evaluates to false , skip this loop iteration ,
<name4> <name3> . _should_delete_form ( <name1> ) :	call the method <name3> ._should_delete_form with an argument <name1> , <name4> it evaluates to true ,
<name6> . _deleted_form_indexes . append ( <name3> )	call the method <name6> ._deleted_form_indexes .append with an argument <name3> .
<name5> [ <name1> . forms [ <name4> ] <name3> <name4> <name2> <name1> . _deleted_form_indexes ]	<name3> <name4> <name2> <name1> ._deleted_form_indexes append <name4> - th element of <name1> .forms into a list , <name5> the resulting list .
@  <name2>	<name2> decorator ,
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name3> not <name5> . is_valid ( ) <name2> not <name5> . can_order :	<name3> call to the <name5> .is_valid method evaluates to false <name2> <name5> .can_order is false ,
<name2> not hasattr ( <name6> , <val1>   ) :	where '%s' is replaced with <name6> .__class__ .__name__ . <name2> <name6> doesnt have an <val1> attribute ,
<name6> . _ordering = [ ]	<name6> ._ordering is an empty list .
<name6> <name5> <name2> range ( <val1> , <name4> . total_form_count ( ) ) :	<name6> every <name5> <name2> sequence of integers , from <val1> to the result of the method <name4> .total_form_count ,
<name5> = <name2> . forms [ <name6> ]	substitute <name6> - th element of <name2> .forms for <name5> .
<name5> <name3> >= <name1> . initial_form_count ( ) and not form . has_changed ( ) :	<name5> <name3> is greater than or equal to the result of the method <name1> .initial_form_count ,
continue	and call to the method form .has_changed evaluates to false , skip this loop iteration ,
<name6> <name5> . can_delete <name2> <name5> . _should_delete_form ( <name4> ) :	<name6> <name5> .can_delete is true <name2> call to the method <name5> ._should_delete_form with an argument <name4> , evaluates to true ,
continue	skip this loop iteration ,
<name3> . _ordering . <name6> ( ( <name4> , <name1> . cleaned_data [ <name2> ] ) )	<name6> tuple with 2 elements : <name4> and value under the <name2> key of <name1> .cleaned_data dictionary to <name3> ._ordering .
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
<name3> <name2> [ 1 ] <name6> <name5> :	<name3> second element of <name2> <name6> <name5> ,
<name1> ( <val5> , <val3> )	<name1> a tuple with 2 elements : integers <val5> and <val3> .
<name3> ( <val6> , <name2> [ 1 ] )	<name3> a tuple with 2 elements : integer <val6> and second element of <name2> .
<name2> . _ordering . sort ( <name3> = <name5> )	call the method <name2> ._ordering .sort with an argument <name3> as <name5> .
<name2> [ <name5> . forms [ <name3> [ 0 ] ] <name1> <name3> <name6> <name5> . _ordering ]	<name1> <name3> <name6> <name5> ._ordering append to a list value under the first element of <name3> key of the <name5> .forms dictionary , <name2> resulting list .
@  <name4>	<name4> decorator ,
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name2> <val5>	<name2> string <val5> .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name5> <name2> . _non_form_errors <name1> <name3> :	<name5> <name2> ._non_form_errors <name1> <name3> ,
<name2> . full_clean ( )	call the method <name2> .full_clean .
<name1> <name5> . _non_form_errors	<name1> <name5> ._non_form_errors .
@  <name3>	<name3> decorator ,
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name2> <name6> . _errors <name3> <name4> :	<name2> <name6> ._errors <name3> <name4> ,
<name3> . full_clean ( )	call the method <name3> .full_clean .
<name2> <name6> . _errors	<name2> <name6> ._errors .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name6> len ( <name2> . non_form_errors ( ) ) + <name4> ( len ( <name5> ) <name3> <name5> <name1> <name2> . errors )	<name3> every <name5> <name1> <name2> .errors <name4> length of <name6> value of the method <name2> .non_form_errors and length of <name5> , <name6> the result .
def <name3> ( <name4> , form ) :	define the method <name3> with an argument <name4> .
<name2> <name1> . cleaned_data . <name5> ( <name6> , <name3> )	<name5> the value under the <name6> key of the <name1> .cleaned_data dictionary , if it exists <name2> it , if not , <name2> boolean <name3> .
def <name1> ( <name2> ) :	define the method <name1> with an argument <name2> .
<name5> not <name3> . is_bound :	<name5> <name3> .is_bound is false ,
<name5> <name6>	<name5> boolean <name6> .
<name6> = <name2>	<name6> is <name2> .
<name5> . errors	call <name5> .errors .
<name4> <name6> <name3> range ( <val1> , <name5> . total_form_count ( ) ) :	<name4> every <name6> <name3> sequence of integers , from <val1> to the result of the method <name5> .total_form_count ,
<name3> = <name1> . forms [ <name6> ]	substitute <name6> - th element of <name1> .forms for <name3> .
<name1> <name4> . can_delete :	<name1> <name4> .can_delete is true ,
<name2> <name3> . _should_delete_form ( form ) :	call the method <name3> ._should_delete_form with an argument , <name2> it evaluates to true ,
   continue	skip this loop iteration ,
<name5> & = <name2> . is_valid ( )	call the method <name2> .is_valid , perform bitwise and with the result and <name5> as operands , substitute the result for <name5> .
<name1> <name2> <name5> not <name3> . non_form_errors ( )	if <name2> is true <name5> call to the method <name3> .non_form_errors , evaluates to false , <name1> boolean True , otherwise <name1> False .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name6> . _errors = [ ]	<name6> ._errors is an empty list .
<name5> . _non_form_errors = <name5> . error_class ( )	call the method <name5> .error_class , substitute the result for <name5> ._non_form_errors .
<name2> not <name5> . is_bound :	<name2> <name5> .is_bound is false ,
<name3>	<name3> nothing .
<name1> <name2> <name5> range ( <val3> , <name4> . total_form_count ( ) ) :	<name1> every <name2> <name5> sequence of integers , from <val3> to the result of the method <name4> .total_form_count ,
<name2> = <name3> . forms [ <name5> ]	substitute <name5> - th element of <name3> .forms for <name2> .
<name2> . _errors . <name4> ( <name6> . errors )	<name4> <name6> .errors to <name2> ._errors .
<name6> :	<name6> ,
<name5> ( <name4> . validate_max <name6> <name4> . total_form_count ( ) - len ( <name4> . deleted_forms ) >  <name4> . max_num ) or <name4> . management_form . cleaned_data [ TOTAL_FORM_COUNT ] >  <name4> . absolute_max :	<name5> <name4> .validate_max is true , <name6> length of <name4> .deleted_forms subtracted from the return value of the method <name4> .total_form_count ,
"<name6> <name4> ( <name2> ( ""Please submit %d or fewer forms."" , ""Please submit %d or fewer forms."" , <name3> . max_num ) % <name3> . max_num , code = 'too_many_forms'   , )"	is greater than <name3> .max_num , or if value under the TOTAL_FORM_COUNT key of the <name3> .management_form .cleaned_data dictionary , is grater than <name3> .absolute_max , <name6> an <name4> with 2 arguments : return value of the function <name2> with 3 arguments :
<name4> ( <name2> . validate_min <name6> <name2> . total_form_count ( ) - len ( <name2> . deleted_forms ) <  <name2> . min_num ) :	"strings ""Please submit %d or fewer forms."" , ""Please submit %d or fewer forms."" <name6> <name2> .max_num , where '%d' is replaced with <name2> .max_num , <name6> code as a string 'too_many_forms' . <name4> <name2> .validate_min is true , <name6> length of <name2> .deleted_forms subtracted from the return value of the method <name2> .total_form_count ,"
"<name3> <name1> ( <name2> ( ""Please submit %d or more forms."" , ""Please submit %d or more forms."" , <name5> . min_num ) % <name5> . min_num , code = 'too_few_forms'   )"	is smaller than <name5> .min_num , <name3> an <name1> with 2 arguments : return value of the function <name2> with 3 arguments :
<name1> . clean ( )	"strings ""Please submit %d or more forms."" , ""Please submit %d or more forms."" and <name1> .min_num , where '%d' is replaced with <name1> .min_num , and code as a string 'too_few_forms' . call the method <name1> .clean ."
except <name6> as <name2> :	if <name6> , renamed to <name2> , exception is caught ,
<name2> . _non_form_errors = <name2> . error_class ( <name5> . error_list )	call the method <name2> .error_class with an argument <name5> .error_list , substitute the result for <name2> ._non_form_errors .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
pass	do nothing .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name1> <name2> ( <name4> . has_changed ( ) <name6> <name4> <name3> <name5> )	<name6> every <name4> <name3> <name5> call the method <name4> .has_changed if <name2> of the results evaluates to true , <name1> boolean True ,
def <name3> ( <name4> , <name5> , <name6> ) :	if not return boolean False . define the method <name3> with 3 arguments : <name4> , <name5> and <name6> .
<name5> <name2> . can_order :	<name5> <name2> .can_order is true ,
<name1> <name3> <name5> <name2> <name4> <name6> <name3> <  <name1> . initial_form_count ( ) :	<name1> <name3> <name5> <name2> <name4> <name6> <name3> <name5> smaller than return value of the method <name1> .initial_form_count ,
<name5> . fields [ <name6> ] = <name1> ( label = _ ( 'Order'   ) , initial = index + 1 , required = False )	value under the <name6> key of the <name5> .fields is an instance of <name1> class , created with 3 arguments :
else :	label set to return value of the function _ called with an string 'Order' , initial set to index incremented by 1 , and required as boolean False . if not ,
<name4> . fields [ <name3> ] = <name2> ( label = _ ( 'Order'   ) , required = False )	value under the <name3> key of the <name4> .fields is an instance of <name2> class , created with 2 arguments :
<name2> <name3> . can_delete :	label set to return value of the function _ called with an string 'Order' and required as boolean False . <name2> <name3> .can_delete is true ,
<name5> . fields [ <name1> ] = <name3> ( label = _ ( 'Delete'   ) , required = False )	value under the <name1> key of the <name5> .fields is an instance of <name3> class , created with 2 arguments :
def <name4> ( <name2> , index ) :	label set to return value of the function _ called with an string 'Delete' and required as boolean False . define the method <name4> with an argument <name2> .
<name6> <val1>   % ( <name2> . prefix , <name5> )	replace '%s' in sting <val1> with <name2> .prefix and <name5> , <name6> the result .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name4> <name6> . forms :	<name4> <name6> .forms is true ,
<name1> <name3> . forms [ 0 ] . <name6> ( )	call the method <name6> on the first element of <name3> .forms , <name1> it .
else :	if not ,
<name1> <name6> . empty_form . is_multipart ( )	call the method <name6> .empty_form .is_multipart , <name1> the result
@  <name4>	<name4> decorator ,
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name2> <name1> . forms :	<name2> <name1> .forms is true ,
<name4> <name3> . forms [ 0 ] . <name1>	<name4> the <name1> field of the first element of <name3> .forms .
else :	if not ,
<name4> <name3> . empty_form . media	<name4> <name3> .empty_form .media .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
forms = ' '   . <name3> ( <name6> . as_table ( ) <name1> <name6> <name4> <name2> )	<name1> every <name6> <name4> <name2> call the <name6> .as_table method , <name3> the results <name4> a string , separated by an empty string .
\ <name4> mark_safe ( '\\n'   . <name5> ( [ <name6> . text_type ( <name3> . management_form ) , <name1> ] ) ) \	<name5> <name4> value of the function <name6> .text_type called with an argument <name3> .management_form and <name1> into a string ,
def <name3> ( <name6> ) :	separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the method <name3> with an argument <name6> .
forms = ' '   . <name2> ( <name3> . as_p ( ) <name4> <name3> <name1> <name5> )	<name4> every <name3> <name1> <name5> call the <name3> .as_p method , <name2> the results <name1> a string , separated by an empty string .
\ <name6> mark_safe ( '\\n'   . <name5> ( [ <name4> . text_type ( <name1> . management_form ) , <name3> ] ) ) \	<name5> <name6> value of the function <name4> .text_type called with an argument <name1> .management_form and <name3> into a string ,
def <name1> ( <name2> ) :	separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the method <name1> with an argument <name2> .
forms = ' '   . <name5> ( <name4> . as_ul ( ) <name1> <name4> <name2> <name6> )	<name1> every <name4> <name2> <name6> call the <name4> .as_ul method , <name5> the results <name2> a string , separated by an empty string .
\ <name5> mark_safe ( '\\n'   . <name6> ( [ <name4> . text_type ( <name1> . management_form ) , <name3> ] ) ) \	<name6> <name5> value of the function <name4> .text_type called with an argument <name1> .management_form and <name3> into a string ,
def <name4> ( <name3> , <name6> = <name2> , <name5> = <val1> , can_order = False , can_delete = False , max_num = None , validate_max = False , min_num = None , validate_min = False ) :	separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the function <name4> with 9 arguments : <name3> , <name6> set to <name2> , <name5> set to integer <val1> ,
<name6> <name2> <name3> <name5> :	<name6> <name2> <name3> <name5> ,
<name5> = <name6>	substitute <name6> for <name5> ,
<name2> <name5> <name3> <name6> :	<name2> <name5> <name3> <name6> ,
<name5> = <name3>	substitute <name3> for <name5> ,
<name3> = <name5> + <name4>	sum <name5> and <name4> , substitute the result for <name3> .
<name3> = {  <val2>   : <name4> , <val5>   : <name6> , <val1>   : <name3> , 'can_delete'   : can_delete , 'min_num'   : min_num , 'max_num'   : max_num , 'absolute_max'   : absolute_max , 'validate_min'   : validate_min , 'validate_max'   : validate_max }	<name3> is an dictionary with 9 initial entries : <name4> for <val2> , <name6> for <val5> , <name3> for <val1> ,
return type ( <name4> . __name__ + str ( <val6>   ) , ( formset , ) , attrs )	can_delete for 'can_delete' , min_num for 'min_num' , max_num for 'max_num' , absolute_max for 'absolute_max' , validate_min for 'validate_min' for validate_max for 'validate_max' . create a class class which name is generated by converting <val6> into a string and appending it to <name4> .__name__ ,
def <name5> ( <name6> ) :	is derived from the formset base class and with fields contained in attrs , return an instance of the obtained class . define the function <name5> with an argument <name6> .
<name4> = <name1>	<name4> is boolean <name1> .
<name4> <name3> <name5> <name2> :	<name4> every <name3> <name5> <name2> ,
<name1> not <name6> . is_valid ( ) :	call the function <name6> .is_valid , <name1> it evaluates to false ,
<name5> = <name1>	<name5> is boolean <name1> .
<name6> <name2>	<name6> <name2> .
<name5> <name2> <name1> <name6>	<name5> <name2> <name1> <name6> into default name space .
<name4> <name2> <name5> <name1>	<name4> <name2> <name5> <name1> into default name space .
<name6> <name4>	<name6> module <name4> .
from <name2> . core . exceptions <name1> ( <name4> , <name6> , <name5> , <name3> )	<name2> .core .exceptions <name1> <name4> , <name6> , <name5> and <name3> into default namespace .
<name2> <name1> . forms . fields <name3> <name6> , <name5>	<name2> <name1> .forms .fields <name3> <name6> and <name5> into default name space .
<name3> <name2> . forms . forms <name4> <name6> , <name1>	<name3> <name2> .forms .forms <name4> <name6> and <name1> into default name space .
<name5> <name4> . forms . formsets <name3> <name6> , <name2>	<name5> <name4> .forms .formsets <name3> <name6> and <name2> into default name space .
<name1> <name2> . forms . utils <name4> <name3>	<name1> <name2> .forms .utils <name4> <name3> into default name space .
<name1> <name4> . forms . widgets <name5> ( <name6> , <name3> , <name2> )	<name1> <name4> .forms .widgets <name5> <name6> , <name3> , <name2> into default namespace .
<name6> <name1> . utils <name3> <name5>	<name6> <name1> .utils <name3> <name5> into default name space .
<name6> <name1> . utils . deprecation <name2> <name4>	<name6> <name1> .utils .deprecation <name2> <name4> into default name space .
<name5> <name1> . utils . encoding <name6> <name2> , <name3>	<name5> <name1> .utils .encoding <name6> <name2> and <name3> into default name space .
<name6> <name5> . utils . text <name3> <name4> , <name1>	<name6> <name5> .utils .text <name3> <name4> and <name1> into default name space .
<name6> <name4> . utils . translation <name1> <name2> <name5> <name3> , <name6>	<name6> <name4> .utils .translation <name1> <name2> <name5> <name3> and <name6> into default name space .
<name4> = ( <val1>   , <val2>   , <val6>   , <val3>   , <val5>   , 'ModelChoiceField'   , 'ModelMultipleChoiceField'   , 'ALL_FIELDS'   , 'BaseModelFormSet'   , 'modelformset_factory'   , 'BaseInlineFormSet'   , 'inlineformset_factory'   , )	<name4> is a tuple containing strings : <val1> , <val2> , <val6> , <val3> , <val5> ,
<name5> = <val2>	'ModelChoiceField' , 'ModelMultipleChoiceField' , 'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' , 'BaseInlineFormSet' , and 'inlineformset_factory' . <name5> is a string <val2> .
def <name5> ( <name6> , <name1> , <name3> = <name2> , <name4> = <name2> ) :	define the function <name5> with 4 arguments : <name6> , <name1> , <name3> set to <name2> and <name4> set to <name2> .
<name5> <name4> . db <name1> <name3>	<name5> <name4> .db <name1> <name3> into default namespace .
<name1> = <name4> . _meta	substitute <name4> ._meta for <name1> .
<name5> = <name3> . <name5>	substitute <name3> .cleaned_data for <name5> .
<name5> = [ ]	<name5> is an empty list .
<name4> <name5> <name3> <name2> . fields :	<name4> every <name5> <name3> <name2> .fields ,
<name4> <name6> <name3> . editable <name1> isinstance ( <name3> , <name5> . AutoField ) <name1> <name3> . name <name6> <name2> <name4> :	<name4> <name3> .editable is true and <name3> is an instance of <name5> .AutoField , <name1> <name3> .name is <name6> contained <name2> <name4> ,
continue	skip this loop iteration .
<name6> <name3> <name1> <name4> <name2> <name5> <name6> . name <name4> <name3> <name3> :	<name6> <name3> <name1> <name4> <name2> <name5> <name6> .name <name1> <name4> contained <name3> <name3> ,
continue	skip this loop iteration .
<name2> <name3> <name6> <name5> . name <name1> <name3> :	<name2> <name3> is true <name6> <name5> .name is contained <name1> <name3> ,
continue	skip this loop iteration .
<name2> isinstance ( <name3> , <name1> . FileField ) :	<name2> <name3> is an instance of <name1> .FileField ,
<name2> . <name3> ( <name4> )	<name3> <name4> to <name2> .
else :	if not ,
<name3> . save_form_data ( <name1> , <name4> [ <name3> . name ] )	call the method <name3> .save_form_data with 2 arguments : <name1> and value under the <name3> .name key of <name4> dictionary .
<name1> <name2> <name5> <name4> :	<name1> every <name2> <name5> <name4> ,
<name1> . save_form_data ( <name3> , <name4> [ <name1> . name ] )	call the method <name1> .save_form_data with 2 arguments : <name3> and value under the <name1> .name key of <name4> dictionary .
<name1> <name6>	<name1> <name6> .
def <name1> ( <name4> , <name6> , <name3> = <name5> , <name2> = <val1>   , commit = True , exclude = <name5> , construct = True ) :	define the function <name1> with 7 arguments : <name4> , <name6> , <name3> set to <name5> , <name2> as string <val1> ,
<name2> <name5> :	<name2> <name5> is true ,
<name3> = <name4> ( <name6> , <name3> , <name5> , <name2> )	call the function <name4> with 4 arguments <name6> , <name3> , <name5> , <name2> and substitute the result for <name3> .
<name2> = <name5> . _meta	substitute <name5> ._meta for <name2> .
<name6> <name5> . errors :	<name6> <name5> .errors is true ,
"<name3> <name2> ( ""The %s could not be %s because the data didn't"" "" validate."" % ( opts . object_name , fail_message ) )"	"<name3> an <name2> with an argument string ""The %s could not be %s because the data didn't validate."" ,"
def <name5> ( ) :	where '%s' is replaced with opts .object_name and fail_message , respectively . define the function <name5> .
<name3> = <name6> . <name3>	substitute <name6> .cleaned_data for <name3> .
<name3> <name6> <name2> <name1> . many_to_many + <name1> . virtual_fields :	append <name1> .virtual_fields to <name1> .many_to_many , <name3> every <name6> <name2> the result ,
<name4> not hasattr ( <name6> , <val2>   ) :	<name4> <name6> doesnt has an <val2> attribute ,
continue	skip this loop iteration .
<name4> <name5> <name6> <name3> . name <name1> <name2> <name5> :	<name4> <name5> is true <name6> <name3> .name is <name1> contained <name2> <name5> ,
continue	skip this loop iteration .
<name4> <name2> <name3> <name5> . name <name6> <name2> :	<name4> <name2> is true <name3> <name5> .name is contained <name6> <name2> ,
continue	skip this loop iteration .
<name2> <name3> . name <name1> <name6> :	<name2> <name3> .name is contained <name1> <name6> ,
<name3> . save_form_data ( <name6> , <name2> [ <name3> . name ] )	call the method <name3> .save_form_data with 2 arguments : <name6> and value under the <name3> .name key of <name2> dictionary .
<name1> <name6> :	<name1> <name6> is true ,
<name5> . save ( )	call the method <name5> .save .
<name3> ( )	call the function <name3> .
else :	if not ,
<name6> . <name5> = <name5>	substitute <name5> for <name6> .save_m2m .
<name3> <name2>	<name3> <name2> .
def <name6> ( <name1> , <name4> = <name2> , <name5> = <name2> ) :	define the function <name6> with 3 arguments : <name1> , <name4> set to <name2> and <name5> set <name2> .
<name3> <name4> . db . models . fields . related <name1> <name2>	<name3> <name4> .db .models .fields .related <name1> <name2> .
<name4> = <name2> . _meta	substitute <name2> ._meta for <name4> .
<name6> = { }	<name6> is an empty dictionary .
<name3> <name5> <name6> <name4> . concrete_fields + <name4> . virtual_fields + <name4> . many_to_many :	concatenate <name4> .concrete_fields , <name4> .virtual_fields and <name4> .many_to_many , <name3> every <name5> <name6> the result ,
<name2> not getattr ( <name3> , <val6>   , False ) :	get <val6> attribute from object <name3> , <name2> it doesnt exists or its true ,
continue	skip this loop iteration .
<name1> <name5> <name6> <name4> . name <name3> <name2> <name5> :	<name1> <name5> is true <name6> <name4> .name is <name3> contained <name2> <name5> ,
continue	skip this loop iteration .
<name3> <name2> <name5> <name6> . name <name1> <name2> :	<name3> <name2> is true <name5> <name6> .name is contained <name1> <name2> ,
continue	skip this loop iteration .
<name6> isinstance ( <name1> , <name3> ) :	<name6> <name1> is an instance of <name3> ,
<name1> <name6> . pk <name2> <name4> :	<name1> <name6> .pk <name2> <name4> ,
data [ <name5> . name ] = [ ]	value under <name5> .name key of the dta dictionary is an empty list .
else :	if not ,
<name2> = <name3> . value_from_object ( <name6> )	call the method <name3> .value_from_object with an argument <name6> , substitute the result for <name2> .
<name1> <name6> . _result_cache <name2> <name3> <name4> :	<name1> <name6> ._result_cache <name2> <name3> <name4> ,
<name6> [ <name3> . name ] = [ <name1> . pk <name4> <name1> <name5> qs ]	<name4> every <name1> <name5> qu append <name1> .pk to a list , substitute resulting list <name4> value under <name3> .name key of the <name6> dictionary .
else :	if not ,
data [ f . name ] = <name2> ( <name1> . values_list ( <val3>   , <name6> = <name5> ) )	call the method <name1> .values_list with 2 arguments : string <val3> and <name6> set to boolean <name5> , put the results in a <name2> ,
else :	substitute the result for value under the f .name key of data dictionary . if not ,
<name3> [ <name2> . name ] = <name2> . value_from_object ( <name1> )	call the method <name2> .value_from_object with an argument <name1> , substitute the result for value under the <name2> .name key of the <name3> dictionary .
<name5> <name2>	<name5> <name2> .
def <name5> ( <name4> , <name3> = <name1> , <name2> = <name1> , <name6> = <name1> , formfield_callback = <name1> , localized_fields = <name1> , labels = <name1> , help_texts = <name1> , error_messages = <name1> ) :	define the function <name5> with 9 arguments : <name4> , <name3> set to <name1> , <name2> set to <name1> , <name6> set to <name1> ,
<name3> = [ ]	<name3> is an empty list .
<name2> = [ ]	<name2> is an empty list .
<name1> = <name3> . _meta	substitute <name3> ._meta for <name1> .
<name5> <name4> . db . models . fields <name2> <name3> <name6> <name1>	<name5> <name4> .db .models .fields <name2> <name3> <name6> <name1> .
<name3> = [ <name1> <name4> <name1> <name6> <name5> . virtual_fields <name2> isinstance ( <name1> , ModelField ) ]	<name2> <name1> is an instance of ModelFiled , <name4> every <name1> <name6> <name5> .virtual_fields , append <name1> to a list , substitute the resulting list <name4> <name3> .
<name6> <name5> <name1> <name3> ( <name2> . concrete_fields + <name4> + <name2> . many_to_many ) :	concatenate <name2> .concrete_fields , <name4> and <name2> .many_to_many , <name6> every <name5> <name1> <name3> result ,
<name3> not getattr ( <name4> , <val6>   , False ) :	get <val6> attribute from object <name4> , <name3> it doesnt exists or its true ,
continue	skip this loop iteration .
<name5> <name6> <name1> <name2> <name4> <name3> <name5> . name <name2> <name6> <name6> :	<name5> <name6> <name1> <name2> <name4> <name3> <name5> .name <name1> <name2> contained <name6> <name6> ,
continue	skip this loop iteration .
<name5> <name6> <name4> <name1> . name <name3> <name6> :	<name5> <name6> is true <name4> <name1> .name is contained <name3> <name6> ,
continue	skip this loop iteration .
<name5> = { }	<name5> is an empty dictionary ,
<name4> <name6> <name1> <name5> . name <name3> <name6> :	<name4> <name6> is true <name1> <name5> .name is contained <name3> <name6> ,
<name4> [ <val6>   ] = <name3> [ <name5> . name ]	substitute value under the <name5> .name key of the <name3> dictionary for value under the <val6> key of <name4> dictionary .
<name3> <name1> == <name2> <name4> ( <name1> <name6> <name5> . name <name3> <name1> ) :	<name3> <name1> equals <name2> , <name4> <name3> <name1> is true <name6> <name5> .name is contained <name3> <name1> ,
<name5> [ <val3>   ] = <name1>	value under <val3> key of <name5> dictionary is boolean <name1> .
<name1> <name6> <name3> <name5> . name <name2> <name6> :	<name1> <name6> is true <name3> <name5> .name is contained <name2> <name6> ,
<name2> [ <val6>   ] = <name1> [ <name3> . name ]	substitute value under the <name3> .name key of the <name1> dictionary for value under the <val6> key of <name2> dictionary .
<name4> <name1> <name3> <name2> . name <name6> <name1> :	<name4> <name1> is true <name3> <name2> .name is contained <name6> <name1> ,
<name5> [ <val4>   ] = <name3> [ <name6> . name ]	substitute value under the <name6> .name key of the <name3> dictionary for value under the <val4> key of <name5> dictionary .
<name5> <name3> <name6> <name2> . name <name4> <name3> :	<name5> <name3> is true <name6> <name2> .name is contained <name4> <name3> ,
<name1> [ <val6>   ] = <name3> [ <name5> . name ]	substitute value under the <name5> .name key of the <name3> dictionary for value under the <val6> key of <name1> dictionary .
<name6> <name3> <name2> <name5> :	<name6> <name3> <name2> <name5> ,
<name4> = <name5> . <name4> ( ** <name2> )	call the method <name5> .formfield with an argument , unpacked dictionary <name2> , substitute the result for <name4> .
elif <name5> <name4> ( <name1> ) :	otherwise if <name1> is <name5> <name4> object ,
<name6> <name5> ( <val1>   )	<name6> an <name5> with an string <val1> .
else :	if not ,
<name4> = <name3> ( <name6> , ** <name5> )	call the method <name3> with 2 arguments : <name6> and unpacked dictionary <name5> , substitute the result for <name4> .
<name1> <name3> :	<name1> <name3> is true ,
<name2> . <name3> ( ( <name1> . name , <name6> ) )	<name3> a tuple with 2 elements : <name1> .name and <name6> to <name2> .
else :	if not ,
<name1> . <name6> ( <name4> . name )	<name6> <name4> .name to <name1> list .
<name3> = <name1> ( <name4> )	<name3> is an instance of <name1> class , created with an argument <name4> .
<name5> <name2> :	<name5> <name2> is true ,
field_dict = OrderedDict ( [ ( <name2> , field_dict . get ( <name2> ) ) <name6> <name2> <name1> <name3> <name5> ( ( <name4> <name2> ) <name6> ( <name2> <name1> <name2> <name4> <name1> <name2> ) ) <name1> ( <name2> <name4> <name1> <name3> ) ] )	<name6> every <name2> <name1> <name3> , <name5> <name2> is false , <name6> <name5> <name2> is true <name1> <name2> is <name4> contained <name1> <name2> , <name1> only <name5> <name2> is <name4> <name1> <name3> ,
<name3> <name2>	append to list , a tuple with 2 elements : f and value under the f key of <name2> dictionary , use the resulting list as an argument , for the creation of the instance of OrderedDict class , substitute it for <name2> . <name3> <name2> .
<name2> <name5> ( <name4> ) :	derive the <name2> <name5> from <name4> base <name2> .
def <name1> ( <name2> , <name6> = <name3> ) :	define the method <name1> with arguments : <name2> and <name6> set to <name3> .
<name5> . model = getattr ( <name2> , <val1>   , <name6> )	get <val1> attribute from the <name2> object , if it exists substitute it for <name5> .model , if not <name5> .model is <name6> .
<name6> . fields = getattr ( <name1> , <val5>   , <name4> )	get <val5> attribute from the <name1> object , if it exists substitute it for <name6> .fields , if not <name6> .fields is <name4> .
<name3> . exclude = getattr ( <name1> , <val4>   , <name2> )	get <val4> attribute from the <name1> object , if it exists substitute it for <name3> .exclude , if not <name3> .exclude is <name2> .
<name4> . widgets = getattr ( <name2> , <val1>   , <name3> )	get <val1> attribute from the <name2> object , if it exists substitute it for <name4> .widgets , if not <name4> .widgets is <name3> .
<name5> . localized_fields = getattr ( <name1> , <val4>   , None )	get <val4> attribute from the <name1> object , if it exists substitute it for <name5> .localized_fields ,
<name6> . labels = getattr ( <name5> , <val1>   , <name2> )	if not <name6> .localized_fields is <name2> . get <val1> attribute from the <name5> object , if it exists substitute it for <name6> .labels , if not <name6> .labels is <name2> .
<name4> . help_texts = getattr ( <name2> , <val6>   , <name1> )	get <val6> attribute from the <name2> object , if it exists substitute it for <name4> .help_texts , if not <name4> .help_texts is <name1> .
<name4> . error_messages = getattr ( <name3> , <val2>   , None )	get <val2> attribute from the <name3> object , if it exists substitute it for <name4> .error_messages ,
<name6> <name5> ( <name3> ) :	if not self .error_messages is None . derive the <name6> <name5> from the <name3> base <name6> .
def <name2> ( <name6> , <name3> , <name4> , <name5> ) :	define the method <name2> with 4 arguments : <name6> , <name3> , <name4> and <name5> .
<name4> = <name2> . pop ( <val3>   , None )	remove entry under the <val3> key of the <name2> dictionary , if it exists substitute if for <name4> ,
new_class = super ( <name4> , <name6> ) . <name3> ( <name6> , <name5> , <name1> , <name2> )	if not formfield_callback is None . call the method <name3> from the base class of the class <name4> , with 4 arguments : <name6> , <name5> , <name1> and <name2> ,
<name2> <name5> == ( <name4> , ) :	substitute the result for new_class . <name2> <name5> equals a tuple with an element : class <name4> .
<name5> <name6>	<name5> <name6> .
opts = <name4> . _meta = <name3> ( getattr ( <name4> , <val5>   , <name2> ) )	instantiate class <name3> with argument : attribute <val5> of the <name4> object . if it exists or <name2> , if not ,
<name1> <name4> <name2> [ <val5>   , <val3>   , <val6>   ] :	assign the result to opts and new_class ._meta . <name1> every <name4> <name2> list containing 3 elements : strings <val5> , <val3> and <val6> ,
<name4> = getattr ( <name5> , <name6> )	get <name6> attribute of the <name5> object , substitute it for <name4> .
<name2> isinstance ( <name6> , <name4> . string_types ) <name1> <name6> != <name5> :	<name2> <name6> is an instance of <name4> .string_types <name1> <name6> is not equal to <name5> ,
"<name5> = ( ""%(model)s.Meta.%(opt)s cannot be a string. "" ""Did you mean to type: ('%(value)s',)?"" % {   'model'   : new_class . __name__ , 'opt'   : opt , 'value'   : value , }  )"	"<name5> is a string ""%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?"" , where '%(model)s' is replaced ,"
<name2> <name1> ( <name5> )	with new_class .__name__ , '%(opt)s' is replaced with opt and '%(value)s' is replaced with value . <name2> an <name1> exception with an argument <name5> .
<name1> <name6> . model :	<name1> <name6> .model is true ,
<name2> <name6> . fields <name5> <name4> <name1> <name6> . exclude <name5> <name4> :	<name2> <name6> .fields <name5> <name4> <name1> <name6> .exclude <name5> <name4> ,
"<name3> <name4> ( ""Creating a ModelForm without either the 'fields' attribute "" ""or the 'exclude' attribute is prohibited; form %s "" ""needs updating."" % name )"	"<name3> an <name4> exception with an argument string "" Creating a ModelForm without either the 'fields' attribute ,"
<name5> <name1> . fields == <name2> :	or the 'exclude' attribute is prohibited ; form % s needs updating . , where '%s' is replaced with name . <name5> <name1> .fields equals <name2> ,
<name5> . fields = <name4>	<name5> .fields is <name4> .
fields = <name2> ( <name1> . model , <name1> . fields , <name1> . exclude , <name1> . widgets , <name4> , <name1> . localized_fields , <name1> . labels , <name1> . help_texts , <name1> . error_messages )	call the function <name2> with 9 arguments : <name1> .model , <name1> .fields , <name1> .exclude , <name1> .widgets , <name4> ,
none_model_fields = [ <name6> <name5> <name6> , <name1> <name3> <name2> . iteritems ( <name4> ) <name6> not <name1> ]	opts .localized_fields , opts .labels , opts .help_texts and opts .error_messages , substitute the result <name5> <name4> . <name5> every <name6> and <name1> <name3> return value of the function <name2> .iteritems called with an argument <name4> , <name6> n is false , append it to a list ,
<name2> = ( <name3> ( <name6> ) - <name3> ( new_class . declared_fields . keys ( ) ) )	substitute the resulting list for <name6> . <name2> is difference between <name3> containing <name6> and <name3> containing result of the method ,
<name5> <name2> :	new_class .declared_fields .keys . <name5> <name2> is true ,
<name5> = <val2>	<name5> is an string <val2> .
<name2> = <name2> % ( <val3>   . <name1> ( <name4> ) , <name6> . model . __name__ )	<name1> <name4> into a string separated by string <val3> , use it and <name6> .model .__name__ to format <name2> , substitute the result for <name2> .
<name4> <name6> ( <name5> )	<name4> an <name6> exception with an argument <name5> .
<name6> . <name1> ( <name2> . declared_fields )	<name1> <name6> dictionary with <name2> .declared_fields .
else :	if not ,
<name4> = <name3> . declared_fields	substitute <name3> .declared_fields for <name4> .
<name4> . base_fields = <name5>	substitute <name5> for <name4> .base_fields .
<name2> <name4>	<name2> <name4> .
<name5> <name4> ( <name2> ) :	derive the <name5> <name4> from the <name2> base <name5> .
def <name6> ( <name4> , <name1> = <name2> , <name5> = <name2> , <name3> = <val6>   , prefix = <name2> , initial = <name2> , error_class = ErrorList , label_suffix = <name2> , empty_permitted = False , instance = <name2> ) :	define the method <name6> with 10 arguments : <name4> , <name1> set to <name2> , <name5> set to <name2> , <name3> set to string <val6> ,
<name5> = <name3> . _meta	prefix set to None , initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False , instance set to None . substitute <name3> ._meta for <name5> .
<name1> <name4> . model <name6> <name3> :	<name1> <name4> .model <name6> <name3> .
<name3> <name6> ( <val4>   )	<name3> an <name6> with an argument string <val4> .
<name2> <name5> <name1> <name4> :	<name2> <name5> <name1> <name4> ,
<name5> . instance = <name6> . model ( )	call the method <name6> .model , substitute the result for <name5> .instance .
<name4> = { }	<name4> is an empty dictionary .
else :	if not ,
<name5> . <name6> = <name6>	substitute <name6> for <name5> .instance .
<name2> = <name4> ( <name6> , <name3> . fields , <name3> . exclude )	call the method <name4> with 3 arguments : <name6> , <name3> .fields , <name3> .exclude and substitute the result for <name2> .
<name1> <name4> <name5> <name3> <name6> :	<name1> <name4> <name5> <name3> <name6> ,
<name2> . <name6> ( <name5> )	<name6> <name2> dictionary with <name5> .
<name3> . _validate_unique = <name4>	<name3> ._validate_unique is boolean <name4> .
super ( <name3> , self ) . <name2> ( <name1> , <name5> , <name6> , <name4> , <name3> , error_class , label_suffix , empty_permitted )	call the method <name2> from the base class of the class <name3> , with 8 arguments : <name1> , <name5> , <name6> , <name4> , <name3> ,
<name6> <name2> <name4> <name5> . fields :	error_class , label_suffix and empty_permitted . <name6> every <name2> <name4> <name5> .fields ,
<name1> = <name6> . fields [ <name3> ]	substitute value under the <name3> key of the <name6> .fields dictionary for <name1> .
<name6> hasattr ( <name4> , <val2>   ) :	<name6> <name4> has an attribute <val2> ,
<name5> = <name3> . <name5>	substitute <name3> .limit_choices_to for <name5> .
<name1> <name3> <name6> <name4> <name2> :	<name1> <name3> <name6> <name4> <name2> ,
<name3> <name2> ( <name4> ) :	<name3> <name4> is <name2> object ,
     <name1> = <name1> ( )	call the function <name1> , substitute the result for <name1> .
<name3> . queryset = <name3> . queryset . complex_filter ( <name5> )	call the method <name3> .queryset .complex_filter with an argument <name5> , substitute the result for <name3> .queryset .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name4> = [ ]	<name4> is an empty list .
<name2> <name1> <name4> <name5> . instance . _meta . fields :	<name2> every <name1> <name4> <name5> .instance ._meta .fields ,
<name3> = <name6> . name	substitute <name6> .name for <name3> .
<name2> <name1> <name3> <name4> <name6> . fields :	<name2> <name1> is <name3> contained <name4> <name6> .fields ,
<name4> . <name3> ( <name5> . name )	<name3> <name5> .name to <name4> .
elif <name1> . _meta . fields <name2> <name4> <name3> <name5> <name1> . _meta . fields :	otherwise if <name1> ._meta .fields is true <name2> <name4> is <name3> contained <name5> <name1> ._meta .fields ,
<name6> . <name5> ( <name1> . name )	<name5> <name1> .name to <name6> .
elif <name5> . _meta . exclude <name6> <name3> <name2> <name5> . _meta . exclude :	otherwise if <name5> ._meta .exclude is true <name6> <name3> is not contained <name2> <name5> ._meta .exclude ,
<name2> . <name6> ( <name3> . name )	<name6> <name3> .name to <name2> .
elif <name6> <name4> <name1> . _errors . keys ( ) :	otherwise if <name6> is contained <name4> the result of the call to the method <name1> ._errors .keys ,
<name3> . <name1> ( <name6> . name )	<name1> <name6> .name to <name3> .
else :	if not ,
<name2> = <name1> . fields [ <name4> ]	substitute value under the <name4> key of the <name1> .fields dictionary for <name2> .
<name4> = <name5> . cleaned_data . <name3> ( <name1> , None )	<name3> the value under the <name1> key of the <name5> .cleaned_data dictionary , if it exists substitute it for <name4> ,
<name3> <name2> <name4> . blank <name6> <name2> <name5> . required <name6> <name1> <name3> <name5> . empty_values :	<name3> <name2> <name1> is None . <name3> <name4> .blank is false <name6> <name5> .required is false <name6> <name1> is contained <name3> <name5> .empty_values ,
<name1> . <name3> ( <name4> . name )	<name3> <name4> .name to <name1> .
<name6> <name4>	<name6> <name4> .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name1> . _validate_unique = <name3>	<name1> ._validate_unique is boolean <name3> .
<name1> <name4> . cleaned_data	<name1> <name4> .cleaned_data .
def <name1> ( <name2> , <name3> ) :	define the method <name1> with 2 arguments : <name2> and <name3> .
<name3> = <name2> . _meta	substitute <name2> ._meta for <name3> .
<name5> <name1> , <name2> <name4> <name6> . error_dict . items ( ) :	call the function <name6> .error_dict .items , <name5> every <name1> and <name2> <name4> the result ,
<name1> ( <name3> == <name6> <name2> <name4> . error_messages <name2> <name6> <name5> <name4> . error_messages ) :	<name1> <name3> equals <name6> <name2> <name4> .error_messages is true <name2> <name6> is contained <name5> <name4> .error_messages ,
<name5> = <name6> . <name5> [ <name4> ]	substitute value under the <name4> key of <name6> .error_messages dictionary for <name5> .
elif <name5> <name1> <name4> . fields :	otherwise if <name5> is contained <name1> <name4> .fields ,
<name2> = <name1> . fields [ <name4> ] . <name2>	get the value under the <name4> key of <name1> .fields dictionary , substitute <name2> <name4> of the result for <name2> .
else :	if not ,
continue	skip this loop iteration .
<name4> <name3> <name6> <name2> :	<name4> every <name3> <name6> <name2> ,
<name4> ( isinstance ( <name2> , <name1> ) <name3> <name2> . code <name6> <name5> ) :	<name4> <name2> is an instance of <name1> class <name3> <name2> .code is contained <name6> <name5> ,
<name4> . <name4> = <name6> [ <name4> . code ]	substitute <name6> under the <name4> .code key of <name6> dictionary for <name4> .message .
<name3> . add_error ( <name1> , <name6> )	call the method <name3> .add_error with 2 arguments : <name1> and <name6> .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name5> = <name4> . _meta	substitute <name4> ._meta for <name5> .
<name5> = <name3> . _get_validation_exclusions ( )	call the method <name3> ._get_validation_exclusions , substitute the result for <name5> .
<name1> = <name5> ( <name6> )	convert <name6> elements to <name5> , substitute it for <name1> .
<name3> <name6> , <name5> <name1> <name2> . fields . items ( ) :	call the method <name2> .fields .items , <name3> every <name6> and <name5> <name1> result ,
<name1> isinstance ( <name4> , <name2> ) :	<name1> <name4> is an instance of <name2> class ,
<name3> <name2> . cleaned_data . get ( <name1> ) <name5> <name6> <name4> and <name2> . cleaned_data [ <name1> ] . _state . adding :	<name3> value under the <name1> key of <name2> .cleaned_data dictionary <name5> <name6> <name4> ,
<name6> . <name1> ( <name4> )	and field _state .adding of value under the <name4> key of self .cleaned_data dictionary is true , <name1> <name4> to <name6> list .
<name4> . <name5> ( <name2> )	<name5> <name2> to <name4> .
<name6> . instance = <name5> ( <name6> , <name6> . instance , <name3> . fields , <name1> )	call the function <name5> with 4 arguments : <name6> , <name6> .instance , <name3> .fields and <name1> ,
<name1> :	substitute the result for self .instance . <name1> ,
<name3> . instance . full_clean ( <name1> = <name1> , <name4> = <name6> )	call the method <name3> .instance .full_clean with 2 arguments : <name1> set to <name1> and <name4> set to boolean <name6> .
except <name3> as <name6> :	if <name3> , renamed to <name6> , exception is caught ,
<name4> . _update_errors ( <name5> )	call the method <name4> ._update_errors with an argument <name5> .
<name6> <name1> . _validate_unique :	<name6> <name1> ._validate_unique is true ,
<name1> . validate_unique ( )	call the method <name1> .validate_unique .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name6> = <name5> . _get_validation_exclusions ( )	call the method <name5> ._get_validation_exclusions , substitute the result for <name6> .
<name2> :	<name2> ,
<name5> . instance . validate_unique ( <name2> = <name2> )	call the method <name5> .instance .validate_unique with an argument <name2> set to <name2> .
except <name4> as <name3> :	if <name4> , renamed to <name3> , exception is caught ,
<name1> . _update_errors ( <name3> )	call the method <name1> ._update_errors with an argument <name3> .
def <name5> ( <name3> , <name6> = <name1> ) :	define the method <name5> with 2 arguments : <name3> and <name6> set to boolean <name1> .
<name6> <name1> . instance . pk <name3> <name2> :	<name6> <name1> .instance .pk <name3> <name2> ,
<name4> = <val3>	<name4> is a string <val3> .
else :	if not ,
<name6> = 'changed'	<name6> is a string changed ' .
return save_instance ( <name3> , <name3> . instance , <name3> . _meta . fields , <name6> , <name1> , <name3> . _meta . exclude , construct = False )	call the function with 7 arguments : <name3> , <name3> .instance , <name3> ._meta .fields , <name6> , <name1> , <name3> ._meta .exclude ,
<name3> . alters_data = <name5>	and construct as boolean False , return the result . <name3> .alters_data is boolean <name5> .
<name4> <name3> ( <name1> . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :	derive the <name4> <name3> from the base <name4> in the return value of the method <name1> .with_metaclass , called with 2 arguments :
pass	ModelFormMetaclass and BaseModelForm . do nothing .
def <name5> ( <name4> , <name6> = <name1> , <name3> = <name2> , <name5> = <name2> , formfield_callback = <name2> , widgets = <name2> , localized_fields = <name2> , labels = <name2> , help_texts = <name2> , error_messages = <name2> ) :	define the function <name5> with 10 arguments : <name4> , <name6> set to <name1> , <name3> set to <name2> , <name5> set to <name2> ,
<name4> = {  <val2>   : <name6> }	<name4> is a dictionary with <name6> for <val2> .
<name6> <name5> <name3> <name1> <name4> :	<name6> <name5> <name3> <name1> <name4> ,
<name3> [ <val1>   ] = <name2>	substitute <name2> for value under the <val1> key of <name3> dictionary .
<name5> <name4> <name6> <name3> <name1> :	<name5> <name4> <name6> <name3> <name1> ,
<name4> [ <val5>   ] = <name1>	substitute <name1> for value under the <val5> key of <name4> dictionary .
<name5> <name3> <name1> <name6> <name2> :	<name5> <name3> <name1> <name6> <name2> ,
<name5> [ <val2>   ] = <name3>	substitute <name3> for value under the <val2> key of <name5> dictionary .
<name2> <name3> <name5> <name6> <name1> :	<name2> <name3> <name5> <name6> <name1> ,
<name2> [ <val4>   ] = <name1>	substitute <name1> for value under the <val4> key of <name2> dictionary .
<name6> <name4> <name2> <name1> <name5> :	<name6> <name4> <name2> <name1> <name5> ,
<name2> [ <val4>   ] = <name3>	substitute <name3> for value under the <val4> key of <name2> dictionary .
<name5> <name1> <name6> <name2> <name4> :	<name5> <name1> <name6> <name2> <name4> ,
<name1> [ <val5>   ] = <name6>	substitute <name6> for value under the <val5> key of <name1> dictionary .
<name1> <name5> <name3> <name2> <name4> :	<name1> <name5> <name3> <name2> <name4> ,
<name4> [ <val1>   ] = <name2>	substitute <name2> for value under the <val1> key of <name4> dictionary .
<name3> = ( <name6> , )	<name3> is a tuple with 1 element , <name6> .
<name6> hasattr ( <name3> , <val2>   ) :	<name6> <name3> has an attribute <val2> ,
<name3> = ( <name6> . Meta , <name2> )	<name3> is a tuple with 2 arguments : <name6> .Meta and <name2> .
<name1> = type ( str ( <val3>   ) , <name4> , <name6> )	<name1> is an instance of class with name <val3> , <name4> base class and fields <name6> .
<name3> = <name1> . __name__ + str ( <val6>   )	append string <val6> to <name1> .__name__ , substitute the result for <name3> .
<name3> = {   <val5>   : <name1> , <val2>   : <name4> }	<name3> is a dictionary with 2 entries : <name1> for <val5> and <name4> for <val2> .
<name1> ( getattr ( <name4> , <val2>   , <name6> ) <name5> <name6> <name3> getattr ( <name4> , <val1>   , <name6> ) <name5> <name6> ) :	<name1> <val2> attribute of <name4> object <name5> <name6> <name3> <val1> attribute of <name4> object <name5> <name6> ,
"<name1> <name3> ( ""Calling modelform_factory without defining 'fields' or "" ""'exclude' explicitly is prohibited."" )"	"<name1> an <name3> with an argument string ""Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."""
<name6> <name4> ( <name1> ) ( <name3> , ( <name1> , ) , form_class_attrs )	get the <name4> of <name1> object , <name6> an instance of resulting class created with 3 arguments : <name3> , tuple with an element <name1> ,
<name2> <name5> ( <name1> ) :	and form_class_attrs . derive the <name2> <name5> from the <name1> base <name2> .
<name4> = <name5>	<name4> is <name5> .
def <name2> ( <name4> , <name6> = <name5> , <name3> = <name5> , <name1> = <val2>   , prefix = <name5> , queryset = <name5> , ** kwargs ) :	define the method <name2> with 7 arguments : <name4> , <name6> set to <name5> , <name3> set to <name5> , <name1> set to string <val2> ,
<name6> . <name5> = <name5>	prefix set to None , <name5> set to None and unpacked dictionary kwargs . substitute <name5> for <name6> .queryset .
<name2> . initial_extra = <name1> . pop ( <val3>   , None )	remove entry under <val3> key of the <name1> dictionary , substitute it for <name2> .initial_extra if it exists ,
<name4> = {  <val3>   : <name1> , <val2>   : <name6> , <val5>   : <name4> , <val3>   : <name1> }	if not self .initial_extra is None . <name4> is a dictionary with 4 entries : <name1> for <val3> , <name6> for <val2> , <name4> for <val5> and <name1> for <val3> .
<name5> . <name6> ( <name2> )	<name6> <name5> dictionary with <name2> .
super ( <name3> , self ) . <name6> ( ** <name1> )	call the method <name6> from the base class of the class <name3> , with an argument unpacked dictionary <name1> .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name6> not ( <name4> . data or <name4> . files ) :	<name6> <name4> .data and <name4> .files are both False ,
<name1> len ( <name5> . get_queryset ( ) )	call the method <name5> .get_queryset , <name1> the length of the result .
<name6> super ( <name5> , self ) . <name1> ( )	call the method <name1> from the base class of the class <name5> , <name6> the result .
def <name2> ( <name1> , <name5> ) :	define the method <name2> with 2 arguments : <name1> and <name5> .
<name5> not hasattr ( <name3> , <val2>   ) :	<name5> <name3> has an attribute <val2> ,
<name4> . _object_dict = <name2> ( ( <name1> . pk , <name1> ) <name5> <name1> <name6> <name4> . get_queryset ( ) )	call the function <name2> with an argument tuple with 2 elements : <name1> .pk and <name1> , <name5> every <name1> <name6> result of the method <name4> .get_queryset ,
<name1> <name3> . _object_dict . get ( <name4> )	substitute the result for <name3> ._object_dict . <name1> the value under the <name4> key of <name3> ._object_dict dictionary .
def <name3> ( <name6> , <name4> ) :	define the method <name3> with 2 arguments : <name6> and <name4> .
<name2> <name5> . rel <name3> <name1> <name6> :	<name2> <name5> .rel <name3> <name1> <name6> ,
<name6> = <name6> . rel . get_related_field ( )	call the method <name6> .rel .get_related_field , substitute the result for <name6> .
<name5> <name6> . to_python	<name5> <name6> .to_python .
def <name5> ( <name2> , <name3> , ** <name1> ) :	define the method <name5> with 3 arguments : <name2> , <name3> and unpacked dictionary <name1> .
<name3> <name6> . is_bound <name5> <name4> <  <name6> . initial_form_count ( ) :	<name3> <name6> .is_bound is true <name5> <name4> is smaller than <name6> .initial_form_count ,
<name3> = <val6> % ( <name1> . add_prefix ( <name2> ) , <name1> . model . _meta . pk . name )	<name3> is a string <val6> , where '%s' is replaced with : result of the method <name1> .add_prefix called with an argument <name2> ,
<name4> = <name1> . data [ <name3> ]	and <name1> .model ._meta .pk .name . substitute the value under the <name3> key of the <name1> .data dictionary for <name4> .
<name2> = <name4> . model . _meta . pk	substitute <name4> .model ._meta .pk for <name2> .
<name5> = <name3> . _get_to_python ( <name4> )	call the method <name3> ._get_to_python with an argument <name4> , substitute the result for <name5> .
<name5> = <name1> ( <name5> )	call the function <name1> with an argument <name5> , substitute the result for <name5> .
<name3> [ <val6>   ] = <name5> . _existing_object ( <name4> )	call the method <name5> ._existing_object with an argument <name4> , substitute the result for value under the <val6> key of <name3> .
<name1> <name5> <  <name2> . initial_form_count ( ) <name4> <val6>   <name3> <name1> <name5> :	<name1> <name5> is smaller than result of the method <name2> .initial_form_count <name4> key <val6> is <name3> contained <name1> <name5> ,
<name4> [ <val3>   ] = <name2> . get_queryset ( ) [ <name5> ]	call the method <name2> .get_queryset , substitute <name5> - th element of the result for value under the <val3> key of <name4> dictionary .
<name1> <name2> >= <name4> . initial_form_count ( ) <name5> <name4> . initial_extra :	<name1> <name2> is greater or equal to the result of the method <name4> .initial_form_count <name5> <name4> .initial_extra is true ,
<name4> :	<name4> ,
kwargs [ 'initial'   ] = <name1> . initial_extra [ <name5> - <name1> . initial_form_count ( ) ]	subtract result of the method <name1> .initial_form_count from <name5> , use the result as an index to get the element from <name1> .initial_extra ,
except <name6> :	substitute it for value under the 'initial' key of kwargs dictionary . if <name6> exception is caught ,
pass	do nothing .
return super ( <name2> , self ) . <name3> ( <name5> , ** <name4> )	call the method <name3> from the base class of the class <name2> , with 2 arguments : <name5> and unpacked dictionary <name4> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name2> not hasattr ( <name4> , <val1>   ) :	<name2> <name4> doesnt have <val1> attribute ,
<name1> <name5> . queryset <name4> <name3> <name6> :	<name1> <name5> .queryset <name4> <name3> <name6> ,
<name4> = <name3> . queryset	substitute <name3> .queryset for <name4> .
else :	if not ,
<name1> = <name5> . model . _default_manager . get_queryset ( )	call the method <name5> .model ._default_manager .get_queryset with an argument <name1> .
<name5> not <name6> . ordered :	<name5> <name6> .ordered is false ,
<name6> = <name6> . order_by ( <name4> . model . _meta . pk . name )	call the method <name6> .order_by with argument <name4> .model ._meta .pk .name , substitute the result for <name6> .
<name1> . _queryset = <name6>	substitute <name6> for <name1> ._queryset .
<name1> <name6> . _queryset	<name1> <name6> ._queryset .
def <name5> ( <name4> , <name1> , <name2> = <name6> ) :	define the method <name5> with 3 arguments : <name4> , <name1> and <name2> set to boolean <name6> .
<name2> <name5> . save ( <name1> = <name1> )	call the method <name5> .save with an argument <name1> as <name1> , <name2> the result .
def <name5> ( <name1> , <name2> , <name6> , <name4> = <name3> ) :	define the method <name5> with 4 arguments : <name1> , <name2> , <name6> and <name4> set to boolean <name3> .
<name6> <name5> . save ( <name1> = <name1> )	call the method <name5> .save with an argument <name1> as <name1> , <name6> the result .
def <name3> ( <name4> , <name2> = <name6> ) :	define the method <name3> with 2 arguments : <name4> and <name2> set to boolean <name6> .
<name3> not <name6> :	<name3> <name6> is true ,
<name2> . saved_forms = [ ]	<name2> .saved_forms is an empty list .
def <name3> ( ) :	define the function <name3> .
<name6> <name2> <name1> <name3> . saved_forms :	<name6> every <name2> <name1> <name3> .saved_forms ,
<name6> . save_m2m ( )	call the function <name6> .save_m2m .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .save_m2m .
return <name4> . save_existing_objects ( <name2> ) + <name4> . save_new_objects ( <name2> )	sum results of method <name4> .save_existing_objects called with an argument <name2> and of method <name4> .save_new_objects ,
<name1> . alters_data = <name2>	called with an argument commit , return the result . <name1> .alters_data is boolean <name2> .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name6> . validate_unique ( )	call the method <name6> .validate_unique .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name1> = <name4> ( )	<name1> is an empty <name4> .
<name3> = <name4> ( )	<name3> is an empty <name4> .
<name3> = <name1> . deleted_forms	substitute <name1> .deleted_forms for <name3> .
valid_forms = [ <name6> <name3> <name6> <name2> <name4> . forms <name1> <name6> . is_valid ( ) and <name6> not <name2> forms_to_delete ]	<name3> every <name6> <name2> <name4> .forms append <name6> to a list , <name1> function <name6> .is_valid evaluates to true ,
<name5> <name4> <name3> <name2> :	and <name4> is not contained <name3> forms_to_delete , substitute the resulting list <name5> <name2> . <name5> every <name4> <name3> <name2> ,
<name5> = <name6> . _get_validation_exclusions ( )	call the method <name6> ._get_validation_exclusions , substitute the result for <name5> .
<name5> , <name1> = <name6> . instance . _get_unique_checks ( <name4> = <name4> )	call the method <name6> .instance ._get_unique_checks with an argument <name4> as <name4> , substitute the result for <name5> , and <name1> , respectively .
<name2> = <name2> . <name4> ( <name1> ( <name6> ) )	<name2> is <name4> of <name2> <name1> and <name6> <name1> .
<name4> = <name4> . <name5> ( <name1> ( <name2> ) )	<name4> is <name5> of <name4> <name1> and <name2> <name1> .
<name2> = [ ]	<name2> is an empty list .
<name6> <name1> , <name3> <name5> <name4> :	<name6> every <name1> , <name3> <name5> <name4> ,
<name2> = <name1> ( )	<name2> is an empty <name1> .
<name1> <name5> <name3> <name6> :	<name1> every <name5> <name3> <name6> ,
<name1> = ( <name3> . cleaned_data [ <name5> ] for <name5> in unique_check if <name5> in <name3> . cleaned_data )	<name1> is an generator object that returns value under the <name5> key of <name3> .cleaned_data dictionary ,
<name2> = tuple ( <name1> . _get_pk_val ( ) <name4> hasattr ( <name1> , <val5>   ) else <name1> <name6> <name1> <name3> <name2> )	<name6> every field <name3> unique_check , <name4> field is contained <name3> form .cleaned_data . create a generator that <name6> every <name1> <name3> <name2> , <name4> <name1> has an <val5> attribute ,
<name1> <name2> <name5> <name3> <name4> <name6> <name2> :	returns the result of the call the method d ._get_pk_val , <name1> <name4> return d , put all the generator items into a tuple <name2> . <name1> <name2> is true <name5> <name3> is <name4> contained <name6> <name2> ,
   <name5> <name2> <name3> <name4> :	<name5> <name2> is contained <name3> <name4> ,
       <name2> . <name1> ( <name5> . get_unique_error_message ( <name4> ) )	call the method <name5> .get_unique_error_message with an argument <name4> , <name1> the result to <name2> .
form . _errors [ NON_FIELD_ERRORS ] = <name6> . error_class ( [ <name6> . get_form_error ( ) ] )	call the method <name6> .error_class with an argument list with a element : result of the method <name6> .get_form_error ,
<name4> <name5> <name1> <name6> :	substitute the result <name4> value under the NON_FIELD_ERRORS key of the form ._errors dictionary . <name4> every <name5> <name1> <name6> ,
         <name6> <name3> <name4> <name5> . cleaned_data :	<name6> <name3> is contained <name4> <name5> .cleaned_data ,
             del <name3> . cleaned_data [ <name4> ]	delete the <name3> .cleaned_data dictionary entry under the <name4> key .
<name4> . <name3> ( <name5> )	<name3> <name5> to <name4> set .
<name2> <name3> <name5> <name1> :	<name2> every <name3> <name5> <name1> ,
<name5> = <name3> ( )	<name5> is an empty <name3> .
<name6> , <name5> , <name2> , <name4> = <name1>	substitute <name1> elements to <name6> , <name5> , <name2> and <name4> , respectively .
<name5> <name6> <name1> <name3> :	<name5> every <name6> <name1> <name3> ,
<name6> ( <name1> . cleaned_data <name2> <name1> . cleaned_data [ <name3> ] <name5> <name4> <name6> <name2> <name1> . cleaned_data [ unique_for ] <name5> <name4> <name6> ) :	<name6> <name1> .cleaned_data <name5> true <name2> value under the <name3> key of <name1> .cleaned_data dictionary <name5> <name4> <name6> ,
   <name2> <name6> == <val4>   :	and value under the unique_for key of form .cleaned_data dictionary is not None , <name2> <name6> equals a string <val4> ,
     <name1> = <name3> . cleaned_data [ <name6> ]	substitute value under the <name6> key of <name3> .cleaned_data dictionary for <name1> .
<name1> = ( <name4> . year , <name4> . month , <name4> . day )	<name1> is a tuple with 3 elements : <name4> .year , <name4> .month and <name4> .day .
else :	if not ,
     <name2> = ( getattr ( <name3> . cleaned_data [ <name5> ] , <name6> ) , )	<name2> is a tuple with an entry : attribute <name6> from the value under the <name5> key of the <name3> .cleaned_data dictionary .
data = ( <name6> . cleaned_data [ <name1> ] , ) + <name2>	create a tuple out of elements under the key <name1> of the <name6> .cleaned_data dictionary , add elements of <name2> to it ,
<name6> <name3> <name2> <name1> :	substitute it for <name3> . <name6> <name3> is contained <name2> <name1> ,
       <name2> . <name6> ( <name5> . get_date_error_message ( <name3> ) )	call the method <name5> .get_date_error_message with an argument <name3> , <name6> the result to <name2> .
form . _errors [ NON_FIELD_ERRORS ] = <name1> . error_class ( [ <name1> . get_form_error ( ) ] )	call the method <name1> .error_class with an argument list with one element , return value of the method <name1> .get_form_error ,
del <name6> . cleaned_data [ <name5> ]	substitute the result for the value under the NON_FIELD_ERRORS key of <name6> ._errors dictionary . delete entry from <name6> .cleaned_data dictionary under the <name5> key .
<name4> . <name6> ( <name2> )	<name6> <name2> to <name4> set .
<name3> <name2> :	<name3> <name2> is true ,
<name5> <name4> ( <name2> )	<name5> an <name4> exception with an argument <name2> .
def <name6> ( <name1> , <name2> ) :	define the method <name6> with 2 arguments : <name1> and <name2> .
<name5> len ( <name4> ) == <val6> :	<name5> length of <name4> equals integer <val6> ,
"return <name1> ( <val6> ) % {   ""field"" : unique_check [ 0 ] , }"	call the function <name1> with an argument string <val6> ,
else :	where '%(field)s' is replaced with first element of unique_check , return the result . if not ,
"return <name2> ( ""Please correct the duplicate data for %(field)s, "" ""which must be unique."" ) % {   ""field"" : get_text_list ( unique_check , six . text_type ( _ ( ""and"" ) ) ) , }"	"call the function <name2> with an argument string ""Please correct the duplicate data for %(field)s, which must be unique."" ,"
def <name5> ( <name6> , <name4> ) :	where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments : unique_check and return value of the function six .text_type called with return value of the function _ with an argument string 'and' , return the result . define the method <name5> with 2 arguments : <name6> and <name4> .
"return <name1> ( ""Please correct the duplicate data for %(field_name)s "" ""which must be unique for the %(lookup)s in %(date_field)s."" ) % {   'field_name'   : date_check [ 2 ] , 'date_field'   : date_check [ 3 ] , 'lookup'   : six . text_type ( date_check [ 1 ] ) , }"	"call the function <name1> with an argument string "" Please correct the duplicate data for % ( field_name ) s which must be unique for ,"
def <name1> ( <name3> ) :	"the % ( lookup ) s in % ( date_field ) s . "" , where '%(field_name)s' is replaced with third element of data_check , '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function , six .text_type called with second element of date_check as an argument , return the result . define the method <name1> with an argument <name3> ."
<name2> <name4> ( <val5> )	call the function <name4> with an argument string <val5> , <name2> the result .
def <name5> ( <name2> , <name3> = <name4> ) :	define the method <name5> with 2 arguments : <name2> and <name3> set to boolean <name4> .
<name1> . changed_objects = [ ]	<name1> .changed_objects is an empty list .
<name5> . deleted_objects = [ ]	<name5> .deleted_objects is an empty list .
<name4> not <name3> . initial_forms :	<name4> <name3> .initial_forms is false ,
<name2> [ ]	<name2> an empty list .
<name6> = [ ]	<name6> is an empty list .
<name3> = <name6> . deleted_forms	substitute <name6> .deleted_forms for <name3> .
<name2> <name5> <name6> <name4> . initial_forms :	<name2> every <name5> <name6> <name4> .initial_forms ,
<name2> = <name4> . instance	substitute <name4> .instance for <name2> .
<name5> <name1> <name6> <name4> :	<name5> <name1> is contained <name6> <name4> ,
<name1> <name2> . pk <name5> <name3> :	<name1> <name2> .pk <name5> <name3> ,
continue	skip this loop iteration .
<name6> . deleted_objects . <name4> ( <name3> )	<name4> <name3> to <name6> .deleted_objects list .
<name3> <name5> :	<name3> <name5> is true ,
<name2> . delete ( )	call the method <name2> .delete .
elif <name3> . has_changed ( ) :	otherwise if <name3> .has_changed method evaluates to true ,
<name2> . changed_objects . <name3> ( ( <name1> , <name5> . changed_data ) )	<name3> a tuple with 2 elements : <name1> and <name5> .changed_data to <name2> .changed_objects .
<name4> . <name6> ( <name2> . save_existing ( <name5> , <name1> , <name3> = <name3> ) )	call the method <name2> .save_existing with 3 arguments : <name5> , <name1> and <name3> as <name3> , <name6> the result to <name4> .
<name5> not <name2> :	<name5> <name2> is false ,
<name6> . saved_forms . <name5> ( <name1> )	<name5> <name1> to <name6> .saved_forms .
<name1> <name6>	<name1> <name6> .
def <name2> ( <name4> , <name5> = <name1> ) :	define the method <name2> with 2 arguments : <name4> and <name5> set to boolean <name1> .
<name1> . new_objects = [ ]	<name1> .new_objects is an empty list .
<name3> <name1> <name2> <name4> . extra_forms :	<name3> every <name1> <name2> <name4> .extra_forms ,
<name3> not <name4> . has_changed ( ) :	<name3> function <name4> .has_changed evaluates to false ,
continue	skip this loop iteration .
<name2> <name4> . can_delete <name1> <name4> . _should_delete_form ( <name3> ) :	<name2> <name4> .can_delete is true <name1> call to the function <name4> ._should_delete_form with an argument <name3> evaluates to true ,
continue	skip this loop iteration .
<name2> . new_objects . <name3> ( <name2> . save_new ( <name1> , <name4> = <name4> ) )	call the method <name2> .save_new with 2 arguments : <name1> and <name4> as <name4> , <name3> the result to <name2> .new_objects .
<name1> not <name3> :	<name1> <name3> is false ,
<name3> . saved_forms . <name2> ( <name5> )	<name2> <name5> to <name3> .saved_forms .
<name4> <name3> . new_objects	<name4> <name3> .new_objects .
def <name5> ( <name6> , <name4> , <name3> ) :	define the method <name5> with 2 arguments : <name6> , <name4> and <name3> .
<name4> <name3> . db . models <name1> <name2> , <name6> , <name5>	<name4> <name3> .db .models <name1> <name2> , <name6> and <name5> .
<name5> . _pk_field = <name6> = <name5> . model . _meta . <name6>	assign <name5> .model ._meta .pk to <name5> ._pk_field and <name6> .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
return ( ( not <name5> . editable ) <name4> ( <name5> . auto_created <name4> isinstance ( <name5> , <name1> ) ) <name4> ( <name5> . rel and <name5> . rel . parent_link and pk_is_not_editable ( <name5> . rel . to . _meta . <name5> ) ) )	if <name5> .editable is true , <name4> <name5> .auto_created is true <name4> <name5> is an instance of <name1> class , <name4> if <name5> .rel is true ,
<name3> <name4> ( <name1> ) <name2> <name1> . name <name6> <name5> <name3> . fields :	and <name1> .rel .parent_link is true and function <name4> called with an argument <name1> .rel .to ._meta .pk evaluates to true , <name3> function <name4> called with an argument <name1> evaluates to true , <name2> <name1> .name is <name6> contained <name5> <name3> .fields ,
<name6> <name3> . is_bound :	<name6> <name3> .is_bound is true ,
<name6> = <name1> . instance . pk	substitute <name1> .instance .pk for <name6> .
else :	if not ,
<name1> :	<name1> ,
<name5> <name2> <name1> <name3> <name6> :	<name5> <name2> <name1> <name3> <name6> ,
     <name6> = <name3> . get_queryset ( ) [ <name1> ] . <name5>	call the method <name3> .get_queryset , substitute field <name5> under the result at the <name1> <name1> for <name6> .
else :	if not ,
     <name3> = <name6>	<name3> is <name6> .
except <name3> :	if <name3> exception is caught ,
<name4> = <name2>	<name4> is <name2> .
<name1> isinstance ( <name6> , <name5> ) <name4> isinstance ( <name6> , <name3> ) :	<name1> <name6> is an instance of <name5> <name4> <name3> classes ,
<name1> = <name3> . rel . to . _default_manager . get_queryset ( )	call the method <name3> .rel .to ._default_manager .get_queryset , substitute the result for <name1> .
else :	if not ,
<name4> = <name5> . model . _default_manager . get_queryset ( )	call the method <name5> .model ._default_manager .get_queryset with an argument <name4> .
<name3> = <name3> . using ( <name1> . instance . _state . db )	call the method <name3> .using with an argument <name1> .instance ._state .db , substitute the result for <name3> .
<name6> <name5> . _meta . widgets :	<name6> <name5> ._meta .widgets is true ,
<name6> = <name2> . _meta . widgets . <name1> ( <name4> . _pk_field . name , HiddenInput )	<name1> the value under <name4> ._pk_field .name key of <name2> ._meta .widgets dictionary , if it exists substitute it for <name6> , if not ,
else :	widget is an instance of HiddenInput class . if not ,
<name1> = <name6>	<name1> is an instance of <name6> class
<name1> . fields [ <name4> . _pk_field . name ] = <name5> ( qs , initial = pk_value , required = False , widget = widget )	value under the <name4> ._pk_field .name key of <name1> .fields dictionary is an instance of <name5> class ,
super ( <name3> , self ) . <name6> ( <name5> , <name4> )	created with 4 arguments : qs , initial as pk_value , required as boolean False and widget as widget . call the method <name6> from the base class of the class <name3> , with 2 arguments : <name5> and <name4> .
def <name2> ( <name3> , <name5> = <name4> , <name1> = <name6> , formset = BaseModelFormSet , extra = 1 , can_delete = False , can_order = False , max_num = <name6> , fields = <name6> , exclude = <name6> , widgets = <name6> , validate_max = False , localized_fields = <name6> , labels = <name6> , help_texts = <name6> , error_messages = <name6> , min_num = <name6> , validate_min = False ) :	define the function <name2> with 18 arguments : <name3> , <name5> set to <name4> , <name1> set to <name6> ,
<name4> = getattr ( <name2> , <val6>   , <name1> )	get <val6> attribute from <name2> object , if it exists substitute it for <name4> , if not <name4> is <name1> .
<name6> <name3> <name1> <name4> :	<name6> <name3> <name1> <name4> ,
<name3> = type ( str ( <val1>   ) , ( <name2> , ) , { }  )	<name3> is an instance of a class named <val1> , derived from the <name2> base class , without any fields .
<name1> ( getattr ( <name6> , <val2>   , <name3> ) <name4> <name5> <name1> getattr ( <name6> , <val6>   , exclude ) <name4> <name5> ) :	<name1> <val2> attribute of <name6> <name4> <name5> , or <name1> it doesnt exists <name1> <name3> <name4> <name5> <name1> <name1> <val6> attribute of <name6> <name4> <name5> ,
"<name6> <name3> ( ""Calling modelformset_factory without defining 'fields' or "" ""'exclude' explicitly is prohibited."" )"	"or if it doesnt exists if exclude is None . <name6> an <name3> with an argument string "" Calling modelformset_factory without defining 'fields' or 'exclude' ,"
<name6> = <name2> ( <name1> , <name6> = <name6> , <name4> = <name4> , <name5> = <name5> , formfield_callback = formfield_callback , widgets = widgets , localized_fields = localized_fields , labels = labels , help_texts = help_texts , error_messages = error_messages )	"explicitly is prohibited . ""    call the function <name2> with 10 arguments : <name1> , <name6> as <name6> , <name4> as <name4> , <name5> as <name5> ,"
FormSet = <name1> ( <name6> , <name3> , <name4> = <name4> , <name5> = <name5> , <name2> = <name2> , can_order = can_order , can_delete = can_delete , validate_min = validate_min , validate_max = validate_max )	formfield_callback as formfield_callback , widgets as widgets , localized_fields as localized_fields , labels as labels , help_texts as help_texts and error_messages as error_messages , substitute the result for <name6> . call the function <name1> with 10 arguments : <name6> , <name3> , <name4> as <name4> , <name5> as <name5> , <name2> as <name2> ,
<name3> . <name5> = <name5>	can_order as can_order , can_delete as can_delete , validate_min as validate_min , validate_max as validate_max , substitute the result for form . substitute <name5> for <name3> .model .
<name4> <name3>	<name4> <name3> .
<name6> <name5> ( <name3> ) :	derive the <name6> <name5> from the <name3> base <name6> .
def <name3> ( <name2> , <name4> = <name6> , <name5> = <name6> , <name1> = <name6> , save_as_new = False , prefix = <name6> , queryset = <name6> , ** kwargs ) :	define the method <name3> with 8 arguments : <name2> , <name4> set to <name6> , <name5> set to <name6> , <name1> set to <name6> ,
<name4> <name1> <name6> <name5> :	save_as_new set to boolean False , prefix set to <name5> , queryset set to <name5> and unpacked dictionary kwargs . <name4> <name1> <name6> <name5> ,
<name4> . instance = <name4> . fk . rel . to ( )	call the method <name4> .fk .rel .to , substitute the result for <name4> .instance .
else :	if not ,
<name6> . <name4> = <name4>	substitute <name4> for <name6> .instance .
<name1> . <name4> = <name4>	substitute <name4> for <name1> .save_as_new .
<name1> <name4> <name3> <name6> :	<name1> <name4> <name3> <name6> ,
<name4> = <name6> . model . _default_manager	substitute <name6> .model ._default_manager for <name4> .
<name4> <name1> . instance . pk <name5> <name2> <name3> :	<name4> <name1> .instance .pk <name5> <name2> <name3> ,
<name5> = <name4> . filter ( ** {  <name3> . fk . name : <name3> . instance }  )	call the method <name4> .filter with an argument unpacked dictionary containing <name3> .instance for <name3> .fk .name , substitute the result for <name5> .
else :	if not ,
<name3> = <name1> . none ( )	call the method <name1> .none , substitute it for <name3> .
super ( <name4> , self ) . <name3> ( <name6> , <name2> , <name5> = <name5> , queryset = qs , ** kwargs )	call the method <name3> from the base class of the class <name4> , with 5 arguments : <name6> , <name2> , <name5> set to <name5> ,
def <name5> ( <name3> ) :	queryset set to qs and unpacked dictionary kwargs . define the method <name5> with an argument <name3> .
<name6> <name2> . save_as_new :	<name6> <name2> .save_as_new is true ,
<name2> <val4>	<name2> integer <val4> .
<name2> super ( <name6> , self ) . <name1> ( )	call the method <name1> from the base class of the class <name6> , <name2> the result .
def <name5> ( <name3> , <name4> , ** <name2> ) :	define the method <name5> with 3 arguments : <name3> , <name4> and unpacked dictionary <name2> .
form = super ( <name4> , self ) . <name5> ( <name3> , ** kwargs )	call the method <name5> from the base class of the class <name4> , with 2 arguments : <name3> ,
<name2> <name5> . save_as_new :	and unpacked dictionary kwargs , substitute the result for form . <name2> <name5> .save_as_new is true ,
<name5> . data [ <name5> . add_prefix ( <name1> . _pk_field . name ) ] = None	call the method <name5> .add_prefix with an argument <name1> ._pk_field .name ,
<name5> . data [ <name5> . add_prefix ( <name1> . fk . name ) ] = <name2>	use the result as an key to get the value of the <name5> .data dictionary , assign it value <name2> . call the method <name5> .add_prefix with an argument <name1> .fk .name ,
setattr ( <name1> . instance , <name6> . fk . get_attname ( ) , <name6> . instance . pk )	use the result as an key to get the value of the <name1> .data dictionary , assign it value None . use return value of the <name6> .fk .get_attname as the name of the attribute of <name1> .instance object to set , set it to <name6> .instance .pk .
<name1> <name4>	<name1> <name4> .
@  <name1>	<name1> decorator ,
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name3> <name1> . db . models . fields . related <name6> <name2>	<name3> <name1> .db .models .fields .related <name6> <name2> into default namespace .
return <name6> ( <name1> . fk . rel . to , <name1> . model , <name1> . fk ) . get_accessor_name ( ) . replace ( '+'   , ''   )	instantiate <name6> class with 3 arguments : <name1> .fk .rel .to , <name1> .model and <name1> .fk ,
def <name5> ( <name4> , <name3> , <name2> = <name1> ) :	call the method get_accessor_name on the result , substitute all occurrences of '+' in the result with an empty string , return it . define the method <name5> with 3 arguments : <name4> , <name3> and <name2> set to boolean <name1> .
<name3> = <name2> . save ( <name1> = <name6> )	call the method <name2> .save , with an argument <name1> set to boolean <name6> , substitute the result for <name3> .
pk_value = getattr ( <name2> . instance , <name2> . fk . rel . field_name )	get <name2> .instance
setattr ( obj , <name6> . fk . get_attname ( ) , getattr ( <name3> , <val5>   , <name3> ) )	get attribute <val5> of the <name3> object , if it doesnt exists use <name3> , set to it <name6> .fk .get_attname return value attribute ,
<name4> <name1> :	of the obj object . <name4> <name1> is true ,
<name1> . save ( )	call the method <name1> .save .
<name5> <name3> <name2> hasattr ( <name4> , <val1>   ) :	<name5> <name3> is true <name2> <name4> has an attribute <val1> ,
<name2> . save_m2m ( )	call the method <name2> .save_m2m .
<name4> <name5>	<name4> <name5> .
def <name1> ( <name5> , <name3> , <name2> ) :	define the method <name1> with 3 arguments : <name5> , <name3> and <name2> .
super ( <name3> , self ) . <name2> ( <name5> , <name6> )	call the method <name2> from the base class of the class <name3> , with 2 arguments : <name5> and <name6> .
<name3> <name5> . _pk_field == <name5> . fk :	<name3> <name5> ._pk_field equals <name5> .fk ,
<name5> = <name1> . _pk_field . <name5>	substitute <name1> ._pk_field .name for <name5> .
<name4> = {  <val1>   : <name2> }	<name4> is a dictionary with boolean <name2> for <val1> .
else :	if not ,
<name6> = <name2> . fk . <name6>	substitute <name2> .fk .name for <name6> .
<name6> = {   <val1>   : getattr ( <name4> . fields . get ( <name5> ) , <val1>   , capfirst ( self . fk . verbose_name ) ) }	<name6> is a dictionary with an entry : attribute <val1> of the object under the <name5> key of the <name4> .fields dictionary for <val1> ,
<name6> <name5> . fk . rel . field_name != <name5> . fk . rel . <name4> . _meta . pk . name :	<name6> it doesnt exists return value of the function capfirst with an argument <name5> .fk .verbose_name for 'label' . <name6> <name5> .fk .rel .field_name is not equal <name4> <name5> .fk .rel .to ._meta .pk .name ,
<name2> [ <val5>   ] = <name6> . fk . rel . field_name	substitute <name6> .fk .rel .field_name for value under the <val5> key of the <name2> dictionary .
<name6> . fields [ <name4> ] = <name3> ( self . <name2> , ** kwargs )	value under the <name4> key of the <name6> .fields dictionary is an <name2> of <name3> created with 2 arguments :
<name4> <name5> . _meta . fields :	self .instance and unpacked dictionary kwargs . <name4> <name5> ._meta .fields is true ,
<name1> isinstance ( <name3> . _meta . fields , <name5> ) :	<name1> <name3> ._meta .fields is an instance of <name5> type ,
<name2> . _meta . fields = <name4> ( <name2> . _meta . fields )	<name2> ._meta .fields is a <name4> created out of <name2> ._meta .fields elements .
<name3> . _meta . fields . <name1> ( <name6> . fk . name )	<name1> <name6> .fk .name to <name3> ._meta .fields .
def <name2> ( <name5> , <name3> ) :	define the method <name2> with 2 arguments : <name5> and <name3> .
<name1> = [ <name3> <name2> <name3> <name6> <name1> <name5> <name3> != <name4> . fk . name ]	<name1> is a list with elements <name3> , <name2> every <name3> <name6> <name1> <name5> <name3> is not equal to <name4> .fk .name .
<name2> super ( <name5> , self ) . <name6> ( <name1> )	call the method <name6> from the base class of the class <name5> , with an argument <name1> , <name2> the result .
def <name5> ( <name3> , <name1> , <name6> = <name2> , <name4> = <name5> ) :	define the function <name5> with 4 arguments : <name3> , <name1> , <name6> set to <name2> and <name4> set to boolean <name5> .
<name1> <name5> . db . models <name3> <name6>	<name1> <name5> .db .models <name3> <name6> .
<name2> = <name1> . _meta	substitute <name1> ._meta for <name2> .
<name3> <name2> :	<name3> <name2> is true ,
<name3> = [ <name4> <name5> <name4> <name1> <name2> . fields <name6> <name4> . name == <name3> ]	<name3> is a list containing <name4> , <name5> every <name4> <name1> <name2> .fields <name6> <name4> .name equals <name3> .
<name5> len ( <name1> ) == <val3> :	<name5> length of <name1> equals integer <val3> .
<name5> = <name6> [ 0 ]	substitute first element of <name6> for <name5> .
<name3> <name2> isinstance ( <name6> , <name4> ) <name1> ( <name6> . rel . <name5> != <name3> and <name6> . rel . <name5> <name2> in <name3> . _meta . get_parent_list ( ) ) :	<name3> <name6> is <name2> an instance of <name4> class , <name1> <name6> .rel .to is <name2> equal <name5> <name3> ,
<name3> <name6> ( <val5> % ( fk_name , <name2> . _meta . app_label , <name2> . _meta . object_name ) )	and fk .rel .to is not contained in result of the call to the method <name2> ._meta .get_parent_list . <name3> an <name6> with an argument string <val5> , where '%s' is replaced with ,
elif len ( <name1> ) == 0 :	fk_name , parent_model ._meta .app_label and parent_model ._meta .object_name , respectively . otherwise if length of <name1> is zero ,
<name3> <name5> ( <val6> % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )	<name3> an <name5> with an argument string <val6> , where '%s' is replaced with ,
else :	model ._meta .app_label , model ._meta .object_name , fk_name , respectively . if not ,
<name6> = [ <name5> <name4> <name5> <name1> <name3> . fields <name2> isinstance ( <name5> , <name6> ) and ( <name5> . rel . to == parent_model or <name5> . rel . to <name1> parent_model . _meta . get_parent_list ( ) ) ]	<name6> is a list containing <name5> <name4> every <name5> <name1> <name3> .fields , only <name2> <name5> is an instance of <name6> ,
<name6> len ( <name2> ) == <val5> :	and , <name6> f .rel .toequals parent_model or f .rel .to is contained in result of the call to the method parent_model ._meta .get_parent_list . <name6> length of <name2> is integer <val5> ,
<name2> = <name3> [ 0 ]	substitute first element of <name3> for <name2> .
elif len ( <name1> ) == 0 :	otherwise if length of <name1> is zero ,
<name3> <name2> :	<name3> <name2> is true ,
<name1>	<name1> nothing .
<name6> <name5> ( <val1> % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )	<name6> an <name5> with an argument string <val1> , where '%s' is replaced with ,
else :	model ._meta .app_label , model ._meta .object_name , parent_model ._meta .app_label , parent_model ._meta .object_name , respectively . if not ,
<name6> <name1> ( <val2> % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )	<name6> an <name1> with an argument string <val2> , where '%s' is replaced with ,
<name3> <name2>	model ._meta .app_label , model ._meta .object_name , parent_model ._meta .app_label , parent_model ._meta .object_name , respectively . <name3> <name2> .
def <name4> ( <name5> , <name2> , <name3> = <name6> , formset = BaseInlineFormSet , fk_name = None , fields = None , exclude = None , extra = 3 , can_order = False , can_delete = True , max_num = None , formfield_callback = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False ) :	define the function <name4> with 20 arguments : <name5> , <name2> , <name3> set to <name6> ,
<name4> = <name5> ( <name2> , <name6> , <name1> = <name1> )	call the function <name5> with 3 arguments : <name2> , <name6> and <name1> = <name1> , substitute the result for <name4> .
<name4> <name5> . unique :	<name4> <name5> .unique is boolean true ,
<name3> = <val6>	<name3> is integer <val6> .
<name2> = {   <val6>   : <name1> , <val3>   : <name4> , <val5>   : <name2> , 'extra'   : extra , 'can_delete'   : can_delete , 'can_order'   : can_order , 'fields'   : fields , 'exclude'   : exclude , 'min_num'   : min_num , 'max_num'   : max_num , 'widgets'   : widgets , 'validate_min'   : validate_min , 'validate_max'   : validate_max , 'localized_fields'   : localized_fields , 'labels'   : labels , 'help_texts'   : help_texts , 'error_messages'   : error_messages , }	<name2> is a dictionary with 17 entries : <name1> for <val6> , <name4> for <val3> , <name2> for <val5> ,
<name2> = <name1> ( <name5> , ** <name6> )	extra for 'extra' , can_delete for 'can_delete' , can_order for 'can_order' , fields for 'fields' , exclude for 'exclude' , min_num for 'min_num' , max_num for 'max_num' , widgets for 'widgets' , validate_min for 'validate_min' , validate_max for 'validate_max' , localized_fields for 'localized_fields' , labels for 'labels' , help_texts for 'help_texts' , and error_messages for 'error_messages' . call the function <name1> with 2 arguments : <name5> and unpacked dictionary <name6> , substitute the result for <name2> .
<name2> . <name1> = <name1>	substitute <name1> for <name2> .fk .
<name4> <name5>	<name4> <name5> .
<name4> <name2> ( <name3> ) :	derive the <name4> <name2> from the <name3> base <name4> .
<name6> = <name5>	substitute <name5> for <name6> .
<name5> = {   'invalid_choice'   : <name4> ( 'The inline foreign key did not match the parent instance primary key.'   ) , }	<name5> is an dictionary with an entry : return value of the function <name4> called with an argument ,
def <name6> ( <name2> , <name4> , * <name5> , ** <name3> ) :	string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice' . define the method <name6> with 4 arguments : <name2> , <name4> , unpacked list <name5> and unpacked dictionary <name3> .
<name5> . <name1> = <name1>	substitute <name1> for <name5> .parent_instance .
<name5> . pk_field = <name4> . pop ( <val6> , False )	remove element from <name4> dictionary under the key <val6> , substitute it for <name5> .pk_field if it exists ,
<name4> . to_field = <name2> . pop ( <val3> , None )	if not <name4> .pk_field is boolean False . remove element from <name2> dictionary under the key <val3> , substitute it for <name4> .to_field if it exists ,
<name1> <name5> . parent_instance <name4> <name6> <name3> :	<name1> <name6> <name5> .to_field <name4> <name3> . <name1> <name5> .parent_instance <name4> <name6> <name3> ,
<name6> <name3> . to_field :	<name6> <name3> .to_field is true ,
<name2> [ <val4> ] = getattr ( <name6> . parent_instance , <name6> . to_field )	get <name6> .to_field attribute of <name6> .parent_instance object , substitute it for value under the <val4> key of the <name2> dictionary .
else :	if not ,
<name6> [ <val3> ] = <name1> . parent_instance . pk	substitute <name1> .parent_instance .pk for value under the <val3> key of the <name6> dictionary .
<name6> [ <val4> ] = <name3>	value under the <val4> key of the <name6> dictionary is boolean <name3> .
super ( <name6> , self ) . <name2> ( * <name4> , ** kwargs )	call the method <name2> from the base class of the class <name6> , with 2 arguments unpacked list <name4> ,
def <name1> ( <name6> , <name5> ) :	and unpacked dictionary kwargs . define the method <name1> with 2 arguments : <name6> and <name5> .
<name3> <name2> <name5> <name1> . empty_values :	<name3> <name2> is contained <name5> <name1> .empty_values ,
<name4> <name5> . pk_field :	<name4> <name5> .pk_field ,
<name4> <name3>	<name4> <name3> .
<name5> <name3> . parent_instance	<name5> <name3> .parent_instance .
<name3> <name5> . to_field :	<name3> <name5> .to_field is true ,
<name5> = getattr ( <name6> . parent_instance , <name6> . to_field )	get <name6> .to_field attribute of <name6> .parent_instance , substitute it for <name5> .
else :	if not ,
<name5> = <name6> . parent_instance . pk	substitute <name6> .parent_instance .pk for <name5> .
<name2> <name1> ( <name6> ) != <name1> ( <name3> ) :	<name2> return values of the function <name1> called two times with 1 argument , with <name6> , and with <name3> , are equal ,
<name5> <name4> ( <name2> . error_messages [ <val3>   ] , code = <val3>   )	<name5> an <name4> with 2 arguments : <name2> .error_messages dictionary value under the <val3> key ,
<name3> <name6> . parent_instance	and code set to a string 'invalid_choice' . <name3> <name6> .parent_instance .
def <name6> ( <name4> , <name3> , <name2> ) :	define the method <name6> with 3 arguments : <name4> , <name3> and <name2> .
<name1> <name3>	<name1> boolean <name3> .
<name1> <name3> ( <name6> ) :	derive the <name1> <name3> from <name6> base <name1> .
def <name3> ( <name5> , <name4> ) :	define the method <name3> with 2 arguments : <name5> and <name4> .
<name6> . <name1> = <name1>	substitute <name1> for <name6> .field .
<name5> . queryset = <name4> . queryset	substitute <name4> .queryset for <name5> .queryset .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name5> <name4> . field . empty_label <name3> <name1> <name6> :	<name5> <name4> .field .empty_label <name3> <name1> <name6> ,
"<name6> ( """" , <name3> . field . empty_label )"	<name6> a tuple with 2 elements : an empty string and <name3> .field .empty_label .
<name2> <name4> . field . cache_choices :	<name2> <name4> .field .cache_choices is true ,
<name6> <name3> . field . choice_cache <name5> <name1> :	<name6> <name3> .field .choice_cache <name5> <name1> ,
<name1> . field . choice_cache = [ <name1> . choice ( <name4> ) for <name4> in <name1> . queryset . all ( ) ]	<name1> .field .choice_cache is a list containing results of the method <name1> .choice called with an argument <name4> ,
<name1> <name4> <name2> <name5> . field . choice_cache :	<name1> every obj <name2> result of the method <name5> .queryset .all . <name1> every <name4> <name2> <name5> .field .choice_cache ,
<name5> <name6>	<name5> <name6> .
else :	if not ,
<name3> <name1> <name2> <name5> . queryset . all ( ) :	<name3> every <name1> <name2> result of the call to the method <name5> .queryset .all ,
<name3> <name1> . choice ( <name6> )	call the method <name1> .choice with an argument <name6> , <name3> the result .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name6> ( len ( <name3> . queryset ) + ( <val2> <name4> <name3> . field . empty_label <name1> <name5> <name6> else <val3> ) )	sum length of <name3> .quertset and integer <val2> <name4> <name3> .field .empty_label <name1> <name5> <name6> , or integer <val3> <name4> <name5> , <name6> the result .
def <name5> ( <name2> , <name1> ) :	define the method <name5> with 2 arguments : <name2> and <name1> .
<name5> ( <name1> . field . prepare_value ( <name3> ) , <name1> . field . label_from_instance ( <name3> ) )	<name5> a tuple with 2 elements : result of the method <name1> .field .prepare_value called with an argument <name3> ,
<name4> <name2> ( <name1> ) :	and result of the method self .field .label_from_instance , called with an argument obj . derive the <name4> <name2> from the <name1> base <name4> .
<name1> = {   'invalid_choice'   : <name5> ( 'Select a valid choice. That choice is not one of'    ' the available choices.'   ) , }	<name1> is a dictionary with an entry , result of the call to the function <name5> with an argument ,
def <name2> ( <name5> , <name1> , <name3> = <val4> , <name6> = <name2> , required = True , widget = <name2> , label = <name2> , initial = <name2> , help_text = ''   , to_field_name = <name2> , limit_choices_to = <name2> , * args , ** kwargs ) :	string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice' . define the method <name2> with 13 arguments : <name5> , <name1> , <name3> set to a string <val4> , <name6> set to <name2> ,
<name6> <name4> <name3> ( <name1> <name5> <name2> <name6> ) :	<name4> set to boolean True , widget set to <name6> , label set to <name6> , <name1> set to <name6> , help_text set to an empty string , to_field_name set to <name6> , limit_choices_to set to <name6> , unpacked list args <name3> unpacked dictionary kwargs . <name6> <name4> <name5> true <name3> <name1> <name5> <name2> <name6> ,
<name4> . empty_label = <name5>	<name4> .empty_label is <name5> .
else :	if not ,
<name4> . <name5> = <name5>	substitute <name5> for <name4> .empty_label .
<name5> <name6> <name4> <name3> <name1> :	<name5> <name6> <name4> <name3> <name1> ,
"<name5> . warn ( ""cache_choices has been deprecated and will be "" ""removed in Django 1.9."" , RemovedInDjango19Warning , stacklevel = 2 )"	"call the function <name5> .warn with 3 arguments : string ""cache_choices has been deprecated and will be removed in Django 1.9."" ,"
else :	RemovedInDjango19Warning and stacklevel set to integer 2 . if not ,
<name1> = <name4>	substitute boolean <name4> for <name1> .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .cache_choices .
<name6> . __init__ ( <name3> , <name2> , <name5> , <name4> , <name1> , <name6> , * <name3> , ** kwargs )	call the method <name6> .__init__ with 8 arguments : <name3> , <name2> , <name5> , <name4> , <name1> , <name6> , unpacked list <name3> ,
<name4> . <name6> = <name6>	and unpacked dictionary kwargs . substitute <name6> for <name4> .queryset .
<name1> . <name2> = <name2>	substitute <name2> for <name1> .limit_choices_to .
<name5> . choice_cache = <name1>	<name5> .choice_cache is <name1> .
<name3> . <name4> = <name4>	substitute <name4> for <name3> .to_field_name
def <name5> ( <name6> , <name2> ) :	define the method <name5> with 2 arguments : <name6> and <name2> .
<name2> = super ( <name6> , self ) . <name1> ( <name5> )	call the method <name1> from the base class of the class <name6> , with an argument <name5> , substitute the <name2> for <name2> .
<name1> . queryset = <name1> . queryset	substitute <name1> .queryset for <name1> .queryset .
<name1> <name6>	<name1> <name6> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name5> <name3> . _queryset	<name5> <name3> ._queryset .
def <name1> ( <name4> , <name3> ) :	define the method <name1> with 2 arguments : <name4> and <name3> .
<name5> . _queryset = <name3>	substitute <name3> for <name5> ._queryset .
<name5> . widget . choices = <name5> . choices	substitute <name5> .choices for <name5> .widget .choices .
<name6> = <name2> ( <name1> , <name4> )	<name6> is an <name2> object of this class , with <name1> getter and <name4> setter functions .
def <name5> ( <name4> , <name3> ) :	define the method <name5> with 2 arguments : <name4> and <name3> .
<name4> <name3> ( <name6> )	call the function <name3> with an argument <name6> , <name4> the result .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name6> hasattr ( <name1> , <val4>   ) :	<name6> <name1> has an attribute <val4> ,
<name3> <name6> . _choices	<name3> <name6> ._choices .
<name3> <name1> ( <name2> )	<name3> an instance of <name1> class , created with an argument <name2> .
<name6> = <name3> ( <name4> , <name2> . _set_choices )	<name6> is an <name3> <name3> object of this class , with <name4> getter and <name2> ._set_choices setter functions .
def <name1> ( <name2> , <name5> ) :	define the method <name1> with 2 arguments : <name2> and <name5> .
<name4> hasattr ( <name1> , <val2>   ) :	<name4> <name1> has an attribute <val2> ,
<name2> <name4> . to_field_name :	<name2> <name4> .to_field_name is true ,
<name5> <name1> . serializable_value ( <name2> . to_field_name )	call the method <name1> .serializable_value with an argument <name2> .to_field_name , <name5> the result .
else :	if not ,
<name2> <name3> . pk	<name2> <name3> .pk .
<name4> super ( <name2> , self ) . <name5> ( <name3> )	call the method <name5> from the base class of the class <name2> , with an argument <name3> , <name4> the result .
def <name5> ( <name1> , <name6> ) :	define the method <name5> with 2 arguments : <name1> and <name6> .
<name1> <name3> <name6> <name2> . empty_values :	<name1> <name3> is contained <name6> <name2> .empty_values ,
<name1> <name2>	<name1> <name2> .
<name4> :	<name4> ,
<name3> = <name1> . to_field_name or <val5>	substitute <name1> .to_field_name , if exists , for <name3> , if not substitute string <val5> for <name3> .
<name3> = <name4> . queryset . get ( ** {  <name6> : <name3> }  )	call the method <name4> .queryset .get with an argument , unpacked dictionary with an element : <name3> for <name6> , substitute the result for <name3> .
except ( <name1> , <name2> . queryset . model . DoesNotExist ) :	if <name1> or <name2> .queryset .model .DoesNotExist exception is caught ,
<name1> <name6> ( <name2> . error_messages [ <val5>   ] , code = <val5>   )	<name1> an <name6> exception with 2 arguments : value under the <val5> key of the <name2> .error_messages dictionary ,
<name3> <name1>	code set to a string 'invalid_choice' . <name3> <name1> .
def <name6> ( <name1> , <name3> ) :	define the method <name6> with 2 arguments : <name1> and <name3> .
<name3> <name6> . validate ( <name1> , <name5> )	call the method <name6> .validate with 2 arguments : <name1> and <name5> , <name3> the result .
def <name2> ( <name5> , <name4> , <name3> ) :	define the method <name2> with 3 arguments : <name5> , <name4> and <name3> .
<name5> = <name1> <name6> <name1> <name2> <name4> <name3> else ''	<name6> <name1> <name2> <name4> <name3> , substitute <name1> for <name5> , otherwise <name5> <name2> an empty string .
<name3> = <name1> <name2> <name1> <name4> <name6> <name5> else ''	<name2> <name1> <name4> <name6> <name5> , substitute <name1> for initial_value , otherwise <name3> <name4> an empty string .
return <name4> ( <name5> . prepare_value ( <name1> ) ) != <name4> ( data_value )	call the method <name5> .prepare_value with an argument <name1> , use it as the argument for the call to the function <name4> ,
<name4> <name1> ( <name3> ) :	if the result is equal to the result of the call to the function force_text with data_value as an argument , return boolean True , otherwise return boolean False . derive the <name4> <name1> from the <name3> base <name4> .
<name4> = <name5>	substitute <name5> for <name4> .
<name1> = <name3>	substitute <name3> for <name1> .
super ( <name2> , self ) . <name1> ( <name5> , <name3> , cache_choices , required , <name4> , <name6> , <name2> , <name1> , * <name5> , ** <name3> )	<name4> set to <name3> , <name6> set to <name3> , <name2> set to <name3> , <name1> set to an empty strign , unpacked list <name5> and unpacked dictionary <name3> . call the method <name1> from the base class of the class <name2> , with 10 arguments : <name5> , <name3> ,
def <name2> ( <name1> , <name3> ) :	cache_choices , required , widget , label , initial , help_text , unpacked list args and unpacked dictionary kwargs . define the method <name2> with 2 arguments : <name1> and <name3> .
<name1> not <name2> :	<name1> <name2> is false ,
<name5> [ ]	<name5> an empty list .
<name2> = super ( <name6> , self ) . <name3>	instantiate base class of the class <name6> , substitute filed <name3> of the result for <name2> .
<name6> [ <name5> ( <name4> ) <name1> <name4> <name2> <name3> ]	<name6> a list containing <name6> values of the function <name5> called with an argument <name4> , <name1> every <name4> <name2> <name3> .
def <name4> ( <name6> , <name3> ) :	define the method <name4> with 2 arguments : <name6> and <name3> .
<name5> <name4> . required <name1> not <name2> :	<name5> <name4> .required is true <name1> <name2> is false ,
<name2> <name3> ( <name5> . error_messages [ <val6>   ] , code = <val6>   )	<name2> an <name3> with 2 arguments : dictionary <name5> .error_messages value under the key <val6> ,
elif not <name2> . <name3> <name4> not <name5> :	<name4> code set to string ' <name3> . otherwise if <name2> .required is false <name4> <name5> is false ,
<name5> <name2> . queryset . none ( )	call the method <name2> .queryset .none , <name5> the result .
<name4> <name1> isinstance ( <name3> , ( <name6> , <name2> ) ) :	<name4> <name3> is <name1> an instance of <name6> or <name2> types ,
<name1> <name2> ( <name6> . error_messages [ <val3>   ] , code = <val3>   )	<name1> an <name2> with 2 arguments : dictionary <name6> .error_messages value under the key <val3> ,
<name4> = self . to_field_name or 'pk'	and code set to string 'list.   substitute self.to_field_name, if true, for key, or if not, substitute string ' pk '  for <name4> .
<name2> <name5> <name1> <name4> :	<name2> every <name5> <name1> <name4> ,
<name1> :	<name1> ,
<name1> . queryset . filter ( ** {  <name2> : <name3> }  )	call the method <name1> .queryset .filter with an argument , unpacked dictionary with an entry : <name3> for <name2> .
except <name5> :	if <name5> exception is caught ,
<name6> <name1> ( <name5> . error_messages [ <val3>   ] , code = <val3>   , params = {  'pk'   : pk }  , )	<name6> an <name1> with 3 arguments : dictionary <name5> .error_messages value under the key <val3> ,
qs = self . queryset . filter ( ** {  '%s__in'   % <name3> : value }  )	code set to string 'invalid_pk_value and params with an entry: pk for ' pk '.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string ' __in '  appended to <name3> ,
<name1> = <name4> ( <name6> ( getattr ( <name2> , <name5> ) ) <name3> <name2> in <name1> )	substitute the result <name3> <name1> . <name1> is a <name4> containing results of the call to the function <name6> with an argument , <name5> attribute of the <name2> object ,
<name3> <name1> <name6> <name2> :	<name3> every o <name6> opts . <name3> every <name1> <name6> <name2> ,
<name2> <name6> ( <name4> ) <name1> <name3> <name5> :	call the function <name6> with an argument <name4> , <name2> the result is <name1> contained <name3> <name5> ,
<name2> <name4> ( <name1> . error_messages [ <val3>   ] , code = <val3>   , params = {  'value'   : val }  , )	<name2> an <name4> with 3 arguments : dictionary <name1> .error_messages value under the key <val3> ,
<name1> . run_validators ( <name4> )	code set to string 'invalid_choice' and params as a dictionary with an entry , val for 'value' . call the method <name1> .run_validators with an argument <name4> .
<name6> <name3>	<name6> <name3> .
def <name2> ( <name6> , <name3> ) :	define the method <name2> with 2 arguments : <name6> and <name3> .
<name2> ( hasattr ( <name3> , <val4>   ) <name5> <name1> isinstance ( <name3> , <name6> . text_type ) <name5> <name1> hasattr ( <name3> , <val2>   ) ) :	<name2> <name3> has an attribute <val4> <name5> <name3> is <name1> an instance of <name6> .text_type <name5> <name3> doesnt have an attribute <val2> ,
return [ super ( <name1> , self ) . <name3> ( <name5> ) for <name5> in value ]	call the method <name3> from the base class of the class <name1> , with an argument <name5> ,
<name4> super ( <name5> , self ) . <name6> ( <name3> )	for every v in <name3> , <name4> the list of results . call the method <name6> the base class of the class <name5> , with an argument <name3> , <name4> the result .
def <name6> ( <name3> , <name4> , <name1> ) :	define the method <name6> with 3 arguments : <name3> , <name4> and <name1> .
<name5> <name6> <name4> <name3> :	<name5> <name6> <name4> <name3> ,
<name1> = [ ]	<name1> is an empty list .
<name1> <name6> <name2> <name5> :	<name1> <name6> <name2> <name5> ,
<name1> = [ ]	<name1> is an empty list .
<name4> len ( <name3> ) != len ( <name6> ) :	<name4> lengths of <name3> and <name6> are equal ,
<name3> <name6>	<name3> boolean <name6> .
<name4> = <name6> ( <name1> ( <name3> ) for <name3> in self . prepare_value ( initial ) )	<name4> is <name6> created out of return values of the function <name1> called with an argument <name3> ,
<name4> = <name2> ( <name6> ( <name3> ) <name1> <name3> <name5> data )	<name1> every <name3> <name5> result of the method self .prepare_value called with an argument initial . <name4> is <name2> created out of return values of the function <name6> called with an argument <name3> ,
<name1> <name5> != <name4>	for every value in data . if <name5> is not equal to <name4> <name1> boolean True , otherwise <name1> boolean False .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
return ( <name2> <name3> <name1> <name6> <name4> ( hasattr ( <name2> , <val5>   ) <name4> ( <name2> . _meta . fields <name3> <name1> <name6> or <name2> . _meta . exclude <name3> <name1> <name6> ) ) )	only if <name2> <name3> <name1> <name6> , <name4> if <name2> has an attribute <val5> <name4> <name2> ._meta .fields <name3> <name1> <name6> ,
<name2> <name3>	<name2> module <name3> .
<name2> <name3> . utils . deprecation <name6> <name1>	<name2> <name3> .utils .deprecation <name6> <name1> into default name space .
"<name3> . warn ( <val4> ""Use django.forms.utils instead."" , RemovedInDjango19Warning , stacklevel = 2 )"	call the function <name3> .warn with 3 arguments : string <val4>
<name6> <name1> . forms . utils <name2> *	Use <name1> .forms .utils instead . , RemovedInDjango19Warning and stacklevel set to an integer 2 . <name6> <name1> .forms .utils <name2> everything into default name space .
<name2> <name5> <name6> <name1>	<name2> <name5> <name6> <name1> into default name space .
<name2> <name6>	<name2> module <name6> .
<name5> <name1>	<name5> module <name1> .
<name2> :	<name2> ,
<name1> <name3> <name2> <name6>	<name1> <name3> <name2> <name6> into default namespace .
except <name1> :	if <name1> exception is caught .
<name4> <name1> <name5> <name1>	<name4> <name1> <name5> <name1> into default namespace .
<name6> <name3> . conf <name1> <name4>	<name6> <name3> .conf <name1> <name4> into default name space .
<name3> <name4> . utils . encoding <name5> <name1> , <name6>	<name3> <name4> .utils .encoding <name5> <name1> and <name6> into default name space .
<name4> <name5> . utils . html <name2> <name3> , <name6> , <name1>	<name4> <name5> .utils .html <name2> <name3> , <name6> and <name1> into default name space .
<name4> <name2> . utils <name1> <name6>	<name4> <name2> .utils <name1> <name6> into default name space .
<name4> <name6> . utils . translation <name5> <name3> <name1> <name2>	<name4> <name6> .utils .translation <name5> <name3> <name1> <name2> into default name space .
<name6> <name2> . utils <name4> <name5>	<name6> <name2> .utils <name4> <name5> into default name space .
<name5> <name6> . core . exceptions <name2> <name3>	<name5> <name6> .core .exceptions <name2> <name3> into default name space .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name5> = [ ]	<name5> is an empty list .
<name1> <name5> , <name2> <name6> <name3> ( <name4> . <name1> ( ) ) :	convert <name1> of <name4> dictionary to <name3> of tuples , <name1> every <name5> and <name2> <name6> it ,
<name3> <name1> <name4> <name6> :	<name3> <name1> <name4> boolean <name6> ,
<name3> . <name1> ( ( <name5> , ) )	<name1> tuple containing element <name5> to <name3> .
del <name6> [ <name3> ]	delete entry under the <name3> key of the <name6> dictionary .
elif <name4> <name2> <name1> :	otherwise if <name4> <name2> boolean <name1> ,
del <name5> [ <name3> ]	delete entry under the <name3> key of the <name5> dictionary .
return ( <name2> ( ''   , <val3>   , sorted ( attrs . items ( ) ) ) + <name2> ( ''   , ' {0}'   , sorted ( boolean_attrs ) ) )	call the function <name2> twice , first time with 3 elements : an empty string , string <val3>
@  <name1>	and sorted return value of the items of the attrs dictionary , and second time with 3 arguments : an empty string , string ' {0}' , and sorted list of boolean_attrs elements , concatenate the results and return the resulting list . <name1> decorator ,
<name5> <name2> ( <name3> ) :	derive the <name5> <name2> from the <name3> base <name5> .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name5> {  <name4> : <name1> . as_data ( ) <name6> <name4> , <name1> in self . items ( ) }	<name5> a dictionary generated with an expression , <name5> value of the method <name1> .as_data <name6> <name4> ,
def <name2> ( <name4> , <name3> = <name5> ) :	for every f and e in list of tuples of <name4> dictionary key , pair entries . define the method <name2> with 2 argumens <name4> and <name3> set to boolean <name5> .
<name6> <name3> . dumps ( {  f : <name4> . get_json_data ( escape_html ) for f , <name4> in self . items ( ) }  )	call the method <name3> .dumps with a dictionary generate with an expression as an argument , <name6> value of the function <name4> .get_json_data ,
def <name3> ( <name1> ) :	with an argument escape_html for f , for every f and e in list of tuples of <name1> dictionary key , pair entries , return the result . define the method <name3> with an argument <name1> .
<name4> not <name5> :	<name4> <name5> is false ,
<name2> ''	<name2> an empty string .
<name4> <name3> ( <val6>   , format_html_join ( ''   , '<li>{0}{1}</li>'   , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) ) )	call the function <name3> with 2 arguments : string <val6> , and <name4> value of the function ,
def <name6> ( <name1> ) :	format_html_join , called with 3 arguments : empty string , string '<li>{0}{1}</li>' , tuple containing tuples with 2 elements : k and result of the function force_text with an argument v , for every k and v in items of the dictionary <name1> , return the result . define the method <name6> with an argument <name1> .
<name1> = [ ]	<name1> is an empty list .
<name1> <name2> , <name6> <name4> <name5> . items ( ) :	call the method <name5> .items , <name1> every <name2> and <name6> <name4> the result .
<name6> . <name3> ( '* %s'   % <name2> )	convert <name2> into a string and concatenate it to a string '* ' , <name3> the result to <name6> .
\ output . <name4> ( '\\n'   . join ( '  * %s'   % <name2> <name5> <name2> <name3> <name1> ) ) \	<name5> every <name2> <name3> <name1> convert <name2> into a string and <name4> it to a string '  * ' ,
\ <name4> '\\n'   . <name5> ( <name3> ) \	<name5> all the results into a string separated by newlines , append the result to <name3> . <name5> elements of <name3> into a string , separated by newline characters , <name4> the result .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name2> <name3> . as_ul ( )	call the method <name3> .as_ul , <name2> the result .
@  <name3>	<name3> decorator ,
<name4> <name1> ( <name3> , <name2> ) :	derive the <name4> <name1> from the <name3> and <name2> base classes .
def <name1> ( <name4> , <name3> = <name5> , <name6> = <name5> ) :	define the method <name1> with 3 arguments : <name4> , <name3> set to <name5> and <name6> set to <name5> .
super ( <name6> , self ) . <name2> ( <name3> )	call the method <name2> with an argument <name3> from the base class of the class <name6> .
<name4> <name3> <name5> <name1> :	<name4> <name3> <name5> <name1> ,
<name2> . error_class = <val3>	<name2> .error_class is a string <val3> .
else :	if not ,
<name2> . <name4> = 'errorlist {}'   . format ( <name4> )	append <name4> converted into a string to string 'errorlist ' , substitute the result for <name2> .error_class .
def as_data ( <name6> ) :	define the method as_text with an argument <name6> .
<name5> <name4> ( <name6> . data ) . <name2>	instantiate <name4> class with an argument <name6> .data , <name5> its field <name2> .
def <name4> ( <name6> , <name3> = <name5> ) :	define the method <name4> with 2 arguments <name6> and <name3> set to boolean <name5> .
<name6> = [ ]	<name6> is an empty list .
<name6> <name1> <name5> <name2> . as_data ( ) :	call the method <name2> .as_data , <name6> every <name1> <name5> the result .
<name2> = <name3> ( <name6> ) [ 0 ]	convert elements of <name6> into a <name3> , substitute the first element for <name2> .
<name5> . <name3> ( {   'message'   : <name1> ( message ) <name2> <name6> else message , 'code'   : error . code or ''   , }  )	<name3> to <name5> list a dictionary created with 2 etries , <name2> <name6> is true , return value of the function <name1>
<name4> <name3>	with an argument message for 'message' , or if not message for 'message' and error .code for 'code' in error .code is true , if not , an empty string for 'code' . <name4> <name3> .
def <name1> ( <name2> , <name4> = <name5> ) :	define the method <name1> with 2 arguments <name2> and <name4> set to boolean <name5> .
return json . dumps ( <name6> . get_json_data ( <name2> ) )	call the method <name6> .get_json_data with an argument <name2> ,
def as_ul ( <name5> ) :	use the result as an argument for the call to the json .dumps function , return the result . define the method as_text with an argument <name5> .
<name4> not <name1> . data :	<name4> <name1> .data is false ,
<name3> ''	<name3> an empty string .
<name6> <name1> ( <val3>   , <name2> . error_class , format_html_join ( ''   , '<li>{0}</li>'   , ( ( force_text ( e ) , ) for e in <name2> ) ) )	call the function <name1> with 3 arguments : string <val3> , <name2> .error_class and <name6> value of the function ,
def <name6> ( <name4> ) :	format_html_join , called with 3 arguments : empty string , string '<li>{0}</li>' , tuple containing results of the function , force_text with an argument e , for every e in <name4> , return the result . define the method <name6> with an argument <name4> .
\ return '\\n'   . join ( '* %s'   % <name1> <name3> <name1> <name2> <name4> ) \	<name3> every <name1> <name2> <name4> , append convert <name1> to an string and append it to string '* ' ,
def <name5> ( <name4> ) :	join all of the results into a string separated by newline character , return the result . define the method <name5> with an argument <name4> .
<name5> <name4> . as_ul ( )	call the method <name4> .as_ul , <name5> the result .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name1> repr ( <name5> ( <name3> ) )	convert elements of <name3> into a <name5> , <name1> the its printable representation .
def <name5> ( <name2> , item ) :	define the method <name5> with an argument <name2> .
<name1> <name5> <name3> <name2> ( <name6> )	if <name5> is contained <name3> the <name2> of the elements of <name6> , <name1> boolean True , otherwise <name1> boolean False .
def <name3> ( <name6> , other ) :	define the method <name3> with an argument <name6> .
<name2> <name1> ( <name6> ) == <name3>	if <name3> equals <name1> containing elements of <name6> , <name2> boolean True , otherwise <name2> boolean False .
def <name4> ( <name5> , other ) :	define the method <name4> with an argument <name5> .
<name5> <name4> ( <name3> ) != <name6>	if <name6> is not equal to <name4> containing elements of <name3> , <name5> boolean True , otherwise <name5> boolean False .
def <name1> ( <name5> , i ) :	define the method <name1> with an argument <name5> .
<name5> = <name4> . data [ <name3> ]	substitute <name3> - th element of <name4> .data for <name5> .
<name6> isinstance ( <name5> , <name2> ) :	<name6> <name5> is an instance of <name2> ,
<name4> <name5> ( <name1> ) [ 0 ]	<name4> first element of the <name5> containing elements of <name1> .
<name2> <name4> ( <name1> )	call the function <name4> with an argument <name1> , <name2> the result .
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
<name3> <name4> . USE_TZ <name1> <name5> <name6> <name2> <name3> <name1> <name4> . is_naive ( <name5> ) :	<name3> <name4> .USE_TZ <name6> true <name1> <name5> <name6> <name2> <name3> <name1> call to the function <name4> .is_naive with an argument <name5> , evaluates to true ,
<name1> = <name3> . get_current_timezone ( )	call the method <name3> .get_current_timezone , substitute the result for <name1> .
<name1> :	<name1> ,
<name1> <name4> . make_aware ( <name3> , <name5> )	call the function <name4> .make_aware with arguments <name3> and <name5> , <name1> the result .
except <name5> :	if <name5> exception is caught ,
\ message = <name4> ( '%(datetime)s couldn\\'t be interpreted '    'in time zone %(current_timezone)s; it '    'may be ambiguous or it may not exist.'    ) \	\ call the function <name4> with an argument string '%(datetime)s couldn\\'t be interpreted in time zone %(current_timezone)s; it ' \
<name5> = {  <val6>   : <name4> , <val2>   : <name1> }	'may be ambiguous or it may not exist.' , substitute the result for message . <name5> is an dictionary containing 2 initial entries : <name4> for <val6> and <name1> for <val2> .
<name5> . reraise ( <name2> , <name2> ( message , code = 'ambiguous_timezone'   , params = params , ) , sys . exc_info ( ) [ 2 ] )	call the function <name5> .reraise with 3 arguments : class <name2> , class <name2> , created with 3 arguments :
<name6> <name1>	message , code as a string 'ambiguous_timezone' and params as params , and third element of the <name6> <name1> of the function sys .exc_info . <name6> <name1> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name5> <name2> . USE_TZ <name4> <name3> <name6> <name1> <name5> <name4> <name2> . is_aware ( <name3> ) :	<name5> <name2> .USE_TZ <name6> true <name4> <name3> <name6> <name1> <name5> <name4> call to the function <name2> .is_aware with an argument <name3> , evaluates to true ,
<name3> = <name5> . get_current_timezone ( )	call the function <name5> .get_current_timezone , substitute the result for <name3> .
<name3> <name2> . make_naive ( <name5> , <name4> )	call the function <name2> .make_naive with 2 arguments <name5> , <name4> , <name3> the result .
<name4> <name5>	<name4> <name5> .
<name2> <name3> <name4> <name6>	<name2> <name3> <name4> <name6> into default name space .
<name6> <name3>	<name6> module <name3> .
<name6> <name5> <name4> <name1>	<name6> <name5> <name4> <name1> into default name space .
<name6> <name2> . conf <name5> <name1>	<name6> <name2> .conf <name5> <name1> into default name space .
<name4> <name2> . forms . utils <name3> <name1> , <name6>	<name4> <name2> .forms .utils <name3> <name1> and <name6> into default name space .
<name2> <name4> . utils . datastructures <name1> <name5> , <name3>	<name2> <name4> .utils .datastructures <name1> <name5> and <name3> into default name space .
<name5> <name2> . utils . encoding <name6> <name1> , <name3>	<name5> <name2> .utils .encoding <name6> <name1> and <name3> into default name space .
<name5> <name6> . utils . html <name1> <name3> , <name2>	<name5> <name6> .utils .html <name1> <name3> and <name2> into default name space .
<name5> <name6> . utils . translation <name2> <name4>	<name5> <name6> .utils .translation <name2> <name4> into default name space .
<name6> <name4> . utils . safestring <name1> <name2>	<name6> <name4> .utils .safestring <name1> <name2> into default name space .
<name5> <name2> . utils <name4> <name1> , <name6>	<name5> <name2> .utils <name4> <name1> and <name6> into default name space .
<name1> <name3> . utils . six . moves . urllib . parse <name5> <name4>	<name1> <name3> .utils .six .moves .urllib .parse <name5> <name4> into default name space .
<name6> = ( <val3>   , <val4>   , <val5>   , <val1>   , <val2>   , <val6>   , <val3>   , 'PasswordInput'   , 'HiddenInput'   , 'MultipleHiddenInput'   , 'ClearableFileInput'   , 'FileInput'   , 'DateInput'   , 'DateTimeInput'   , 'TimeInput'   , 'Textarea'   , 'CheckboxInput'   , 'Select'   , 'NullBooleanSelect'   , 'SelectMultiple'   , 'RadioSelect'   , 'CheckboxSelectMultiple'   , 'MultiWidget'   , 'SplitDateTimeWidget'   , 'SplitHiddenDateTimeWidget'   , )	<name6> is a tuple of strings : <val3> , <val4> , <val5> , <val1> , <val2> , <val6> , <val3> ,
<name3> = ( <val1>   , <val5>   )	'PasswordInput' , 'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' , 'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' , 'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' , 'CheckboxSelectMultiple' , 'MultiWidget' , 'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget' . <name3> is a tuple with 2 strings : <val1> and <val5> .
@  <name4>	<name4> decorator ,
<name5> <name6> ( <name4> ) :	derive the <name5> <name6> from the <name4> base <name5> .
def <name2> ( <name1> , <name5> = <name3> , ** <name6> ) :	define the method <name2> with 3 arguments : <name1> , <name5> set to <name3> and unpacked dictionary <name6> .
<name6> <name2> :	<name6> <name2> is true ,
<name3> = <name5> . __dict__	substitute <name5> .__dict__ for <name3> .
else :	if not ,
<name4> = <name2>	substitute <name2> for <name4> .
<name4> . _css = { }	<name4> ._css is an empty dictionary .
<name1> . _js = [ ]	<name1> ._js is an empty list .
<name4> <name3> <name2> <name6> :	<name4> every <name3> <name2> <name6> ,
getattr ( <name3> , <val1>   + <name6> ) ( media_attrs . <name5> ( <name6> , None ) )	append <name6> to string <val1> use it as the <name6> of the attribute to <name5> from object <name3> , call the result as an function ,
def <name1> ( <name5> ) :	with an argument : value under the name key of the media_attrs dictionary , if it exists , if not use None as an argument . define the method <name1> with an argument <name5> .
<name4> <name5> . render ( )	call the method <name5> .render , <name4> the result .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
\ return mark_safe ( '\\n'   . join ( <name6> ( * [ getattr ( self , <val5>   + <name4> ) ( ) for <name4> in MEDIA_TYPES ] ) ) ) \	call the function <name6> with an argument unpacked list , append <name4> to string <val5> ,
def <name6> ( <name1> ) :	and use it as the name of the attribute to get from the <name1> object , call the result and append it to a list for every name in MEDIA_TYPES , join all the results into a string with newline separator , use the result as an argument for the call to the function mark_safe , return the result . define the method <name6> with an argument <name1> .
"<name2> [ <name3> ( '<script type=""text/javascript"" src=""{0}""></script>'   , self . absolute_path ( path ) ) for path in self . _js ]"	<name2> a list containing results of the function <name3> called with 2 arguments :
def <name2> ( <name4> ) :	"string '<script type=""text/javascript"" src=""{0}""></script>' and absolute file path of the path , for every path is <name4> ._js . define the method <name2> with an argument <name4> ."
<name5> = sorted ( <name3> . _css . keys ( ) )	call the method <name3> ._css .keys , sort the result and substitute it for <name5> .
"<name4> <name1> ( * [ [ format_html ( '<link href=""{0}"" type=""text/css"" media=""{1}"" rel=""stylesheet"" />'   , self . absolute_path ( path ) , medium ) for path in self . _css [ medium ] ] for medium in media ] )"	<name4> the result of the call to the function <name1> , with an argument unpacked list , containing the result of the function ,
def <name1> ( <name5> , <name3> , <name4> = <name2> ) :	"format_html called with 3 arguments : string '<link href=""{0}"" type=""text/css"" media=""{1}"" rel=""stylesheet"" />' , return value of the function <name5> .absolute_path called with an argument <name3> and medium , for every medium in media and for every <name3> in value under the medium key of the <name5> ._css dictionary . define the method <name1> with 3 arguments <name5> , <name3> and <name4> set to <name2> ."
<name1> <name6> . startswith ( ( <val4>   , <val2>   , <val3>   ) ) :	<name1> <name6> starts with string <val4> or string <val2> or with string <val3> ,
<name2> <name4>	<name2> <name4> ,
<name2> <name6> <name3> <name5> :	<name2> <name6> <name3> <name5> ,
<name4> <name3> . STATIC_URL <name6> <name1> :	<name4> <name3> .STATIC_URL <name6> <name1> ,
<name2> = <name5> . MEDIA_URL	substitute <name5> .MEDIA_URL for <name2> .
else :	if not ,
<name4> = <name5> . STATIC_URL	substitute <name5> .STATIC_URL for <name4> .
<name4> urljoin ( <name3> , <name1> )	join <name3> and <name1> into an url , <name4> it .
def <name4> ( <name2> , <name3> ) :	define the method <name4> with arguments <name2> and <name3> .
<name2> <name6> <name1> <name3> :	<name2> <name6> is contained <name1> <name3> ,
<name1> <name4> ( ** {  str ( <name2> ) : getattr ( self , <val5>   + <name2> ) }  )	<name1> an instance of the class <name4> , called with an unpacked dictionary with an entry : <name2> appended to string <val5> ,
<name3> <name5> ( <val2>   % <name6> )	attribute of the self object for <name6> converted into a string . <name3> an <name5> with an argument string <val2> , where '%s' is replaced with <name6> .
def add_js ( <name5> , data ) :	define the method __getitem__ with arguments <name5> and name .
<name2> <name5> :	<name2> <name5> is true ,
<name6> <name3> <name1> <name4> :	<name6> every <name3> <name1> <name4> ,
<name4> <name3> <name2> <name1> <name6> . _js :	<name4> <name3> is <name2> contained <name1> <name6> ._js ,
<name3> . _js . <name6> ( <name5> )	<name6> <name5> to <name3> ._js .
def <name5> ( <name3> , <name4> ) :	define the method <name5> with arguments <name3> and <name4> .
<name1> <name2> :	<name1> <name2> is true ,
<name1> <name5> , <name2> <name4> <name3> . items ( ) :	call the method <name3> .items , <name1> every <name5> and <name2> <name4> the result .
<name2> <name3> <name4> <name1> :	<name2> every <name3> <name4> <name1> ,
<name1> not <name6> . _css . get ( <name2> ) or path not in <name6> . _css [ <name2> ] :	<name1> call to the method <name6> ._css .get with an argument <name2> evaluates to false ,
     <name5> . _css . setdefault ( <name6> , [ ] ) . <name1> ( <name3> )	or <name3> is not contained in the value under the <name6> key of <name5> ._css dictionary . call the method <name5> ._css .setdefault with 2 arguments <name6> and an empty string , <name1> <name3> to the result .
def <name2> ( <name1> , <name6> ) :	define the method <name2> with arguments <name1> and <name6> .
<name6> = <name1> ( )	<name6> is an instance of <name1> class .
<name4> <name6> <name2> <name3> :	<name4> every <name6> <name2> <name3> ,
getattr ( <name1> , <val3>   + <name6> ) ( getattr ( self , '_'   + <name6> , None ) )	append <name6> to <val3> use it as the <name6> of the attribute to get from <name1> object , call the result with an argument :
getattr ( <name2> , <val5>   + <name6> ) ( getattr ( other , <val4>   + <name6> , <name1> ) )	<name6> appended to string <val4> , as the <name6> of the attribute to get from self object , or if the previous doesnt exist , <name1> . append <name6> to <val5> use it as the <name6> of the attribute to get from <name2> object , call the result with an argument :
<name2> <name4>	name appended to string '_' , as the name of the attribute to get from other object , or if the previous doesnt exist , None . <name2> <name4> .
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name2> = super ( <name5> , self )	<name2> is base class of the class <name5> .
<name2> :	<name2> ,
<name3> = <name1> . media	substitute <name1> .media for <name3> .
except <name2> :	if <name2> exception is caught ,
<name1> = <name4> ( )	<name1> is an instance of <name4> class .
<name6> = getattr ( <name3> , <val5>   , <name4> )	get the attribute <val5> of the <name3> object , if it exists substitute it for <name6> , if not <name6> is <name4> .
<name2> <name6> :	<name2> <name6> is true ,
<name3> = getattr ( definition , <val4>   , <name2> )	get the attribute <val4> of the cls object , if it exists substitute it for <name3> , if not <name3> is boolean <name2> .
<name1> <name3> :	<name1> <name3> is true ,
<name1> <name4> <name3> <name2> :	<name1> <name4> <name3> boolean <name2> ,
<name4> = <name5>	substitute <name5> for <name4> .
else :	if not ,
<name3> = <name5> ( )	<name3> is an instance of <name5> class .
<name5> <name6> <name1> <name3> :	<name5> every <name6> <name1> <name3> ,
     <name4> = <name4> + <name2> [ <name5> ]	sum <name4> and value under the <name5> key of the <name2> dictionary , substitute it for <name4> .
<name6> <name3> + <name5> ( <name4> )	sum <name3> and class <name5> created with <name4> , <name6> the result .
else :	if not ,
<name5> <name2> ( <name3> )	<name5> an instance of <name2> class , created with <name3> as an argument .
else :	if not ,
<name6> <name3>	<name6> <name3> .
<name3> <name2> ( <name6> )	<name3> <name2> object with <name6> as getter function .
<name2> <name1> ( <name5> ) :	derive the <name2> <name1> from the <name5> base <name2> .
def <name2> ( <name6> , <name4> , <name3> , <name5> ) :	define the method <name2> with 4 arguments <name6> , <name4> , <name3> and <name5> .
new_class = ( super ( <name4> , <name5> ) . <name1> ( <name5> , <name2> , <name6> , <name3> ) )	call the method <name1> from the base class of the class <name4> , called with 4 arguments : <name5> , <name2> , <name6> and <name3> .
<name2> <val1>   <name5> <name6> <name4> :	<name2> <val1> is <name5> contained <name6> <name4> ,
<name4> . media = <name1> ( <name4> )	call the method <name1> with an argument <name4> , substitute the result for <name4> .media .
<name5> <name2>	<name5> <name2> .
@  <name1>	<name1> decorator
<name1> <name6> ( <name5> ) :	derive the <name1> <name6> from the <name5> base <name1> .
def <name4> ( <name2> , <name3> , <name6> , <name1> , <name5> , <name4> ) :	define the method <name4> with 6 arguments <name2> , <name3> , <name6> , <name1> , <name5> and <name4> .
<name4> . <name5> = <name5>	substitute <name5> for <name4> .parent_widget .
<name1> . <name5> , <name1> . <name2> = <name5> , <name2>	substitute <name5> and <name2> for <name1> .name and <name1> .value .
<name1> . <name6> , <name1> . <name4> = <name6> , <name4>	substitute <name6> and <name4> for <name1> .attrs and <name1> .choices
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name1> = [ <name3> . name , <name3> . value , <name3> . attrs ]	<name1> is an list with 3 initial elements <name3> .name , <name3> .value and <name3> .attrs .
<name5> <name6> . choices :	<name5> <name6> .choices is true ,
<name1> . <name6> ( <name2> . choices )	<name6> <name2> .choices to <name1> .
<name6> <name5> . parent_widget . render ( * <name3> )	call the method <name5> .parent_widget .render with unpacked list <name3> as an argument , <name6> the result .
<name5> <name2> ( <name3> . with_metaclass ( <name1> ) ) :	derive the <name5> <name2> from the base <name5> in the return value of the <name3> .with_metaclass called with an argument <name1> .
<name2> = <name5>	<name2> is boolean <name5> .
<name4> = <name6>	<name4> is boolean <name6> .
<name5> = <name3>	<name5> is boolean <name3> .
def <name3> ( <name2> , <name1> = <name4> ) :	define the method <name3> with arguments <name2> and <name1> set to <name4> .
<name5> <name3> <name1> <name2> <name6> :	<name5> <name3> <name1> <name2> <name6> ,
<name5> . <name6> = <name6> . copy ( )	call the method <name6> .copy , substitute the result for <name5> .attrs .
else :	if not ,
<name4> . attrs = { }	<name4> .attrs is an empty dictionary .
def <name2> ( <name4> , <name6> ) :	define the method <name2> with arguments <name4> and <name6> .
<name3> = <name4> . <name4> ( self )	call the method <name4> .copy , substitute the result for <name3> .
<name6> . attrs = <name5> . attrs . copy ( )	call the method <name5> .attrs .copy , substitute the result for <name6> .attrs .
<name5> [ id ( <name6> ) ] = <name3>	substitute <name3> for the value of the <name5> dictionary at the identity of the <name6> object key .
<name2> <name5>	<name2> <name5> .
@  <name1>	<name1> decorator ,
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name1> <name3> . input_type == <val2>   <name4> hasattr ( <name3> , <val5>   ) else <name6>	<name4> <name3> .input_type equals string <val2> and <name3> has an attribute <val5> , <name1> boolean True , otherwise <name1> boolean <name6> .
def <name1> ( <name2> , <name5> , <name6> , <name4> = <name3> , <name1> = ( ) ) :	define the method <name1> with 5 arguments : <name2> , <name5> , <name6> , <name4> set to <name3> and <name1> set to an empty tuple .
<name4> <name1> ( <name2> , <name3> , <name5> , <name6> , <name4> )	<name4> an instance of <name1> class created with 5 arguments : <name2> , <name3> , <name5> , <name6> and <name4> .
def <name5> ( <name2> , <name1> , <name4> , <name3> = <name6> ) :	define the method <name5> with 4 arguments : <name2> , <name1> , <name4> and <name3> set to <name6> .
<name6> <name1> ( <val4>   )	<name6> an <name1> with an argument string <val4> .
def <name4> ( <name1> , <name5> = <name2> , ** <name6> ) :	define the method <name4> with 3 arguments : <name1> , <name5> set to <name2> and unpacked dictionary <name6> .
<name5> = dict ( <name3> . <name5> , ** <name1> )	unpack dictionary <name1> , map it through <name3> .attrs and convert to dictionary , substitute the result for <name5> .
<name5> <name2> :	<name5> <name2> is true ,
<name3> . <name6> ( <name5> )	<name6> <name3> dictionary with <name5> entry .
<name2> <name6>	<name2> <name6> .
def value_from_datadict ( <name5> , data , files , <name3> ) :	define the method render with 4 arguments : <name5> , <name3> , value and attrs set to None .
<name1> <name2> . <name4> ( <name5> , <name6> )	<name4> the value under the <name5> key of the <name2> dictionary , <name1> it , if the previous doesnt exists , <name1> <name6> .
def <name2> ( <name1> , id_ ) :	define the method <name2> with 2 arguments : <name1> and id .
<name1> <name4>	<name1> <name4> .
<name6> <name4> ( <name5> ) :	derive the <name6> <name4> from the <name5> base <name6> .
<name6> = <name5>	<name6> is <name5> .
def <name2> ( <name3> , <name6> ) :	define the method <name2> with 2 arguments : <name3> and <name6> .
<name6> <name4> . is_localized :	<name6> <name4> .is_localized is true ,
<name3> <name2> . localize_input ( <name1> )	call the method <name2> .localize_input with an argument <name1> , <name3> the result .
<name4> <name2>	<name4> <name2> .
def <name3> ( <name2> , <name6> , <name5> , <name1> = <name4> ) :	define the method <name3> with 4 arguments : <name2> , <name6> , <name5> and <name1> set to <name4> .
<name4> <name6> <name1> <name2> :	<name4> <name6> <name1> <name2> ,
<name5> = ''	<name5> is an empty string .
<name2> = <name6> . build_attrs ( <name5> , <name4> = <name6> . input_type , <name1> = <name1> )	call the method <name6> .build_attrs with 3 arguments : <name5> , <name4> as <name6> .input_type , <name1> as <name1> , substitute the result for <name2> .
<name1> <name3> != ''   :	<name1> <name3> is not equal to an empty string ,
final_attrs [ 'value'   ] = <name2> ( <name3> . _format_value ( <name1> ) )	call the method <name3> ._format_value with an argument <name1> , use the result as an argument for the call to the function <name2> ,
return <name5> ( <val3>   , flatatt ( <name2> ) )	substitute the result for <name2> dictionary value under the 'value' key . call the function <name5> with 2 arguments : string <val3> ,
<name6> <name3> ( <name4> ) :	result of the function flatatt called with an argument final_attrs , return the result . derive the <name6> <name3> from the <name4> base <name6> .
<name2> = <val3>	<name2> is a string <val3> .
def <name3> ( <name4> , <name5> = <name1> ) :	define the method <name3> with 2 arguments : <name4> and <name5> set to <name1> .
<name4> <name2> <name1> <name5> <name3> :	<name4> <name2> <name1> <name5> <name3> ,
<name5> . input_type = <name3> . pop ( <val2>   , <name5> . input_type )	remover the entry under the <val2> key of the <name3> dictionary , substitute it for <name5> .input_type , if the key doesnt exists ,
super ( <name1> , <name5> ) . <name6> ( <name4> )	substitute <name5> .input_type for <name5> .input_type . call the method <name6> from the base class of the class <name1> , called with an argument <name4> .
<name2> <name6> ( <name3> ) :	derive the <name2> <name6> from the <name3> base <name2> .
<name6> = <val2>	<name6> is a string <val2> .
<name5> <name6> ( <name1> ) :	derive the <name5> <name6> from the <name1> base <name5> .
<name5> = <val4>	<name5> is a string <val4> .
<name1> <name5> ( <name2> ) :	derive the <name1> <name5> from the <name2> base <name1> .
<name4> = <val1>	<name4> is a string <val1> .
<name1> <name6> ( <name4> ) :	derive the <name1> <name6> from the <name4> base <name1> .
<name1> = <val5>	<name1> is a string <val5> .
def <name5> ( <name3> , <name1> = <name4> , <name2> = <name6> ) :	define the method <name5> with 3 arguments : <name3> , <name1> set to <name4> and <name2> set to boolean <name6> .
super ( <name5> , self ) . <name2> ( <name1> )	call the method <name2> from the base class of the class <name5> , called with an argument <name1> .
<name3> . <name4> = <name4>	substitute <name4> for <name3> .render_value .
def <name2> ( <name1> , <name6> , <name5> , <name3> = <name4> ) :	define the method <name2> with 4 arguments : <name1> , <name6> , <name5> and <name3> set to <name4> .
<name6> not <name3> . render_value :	<name6> <name3> .render_value is false ,
<name2> = <name5>	<name2> is <name5> .
return super ( <name6> , self ) . <name5> ( <name1> , <name3> , <name4> )	call the method <name5> from the base class of the class <name6> , called with 3 arguments : <name1> , <name3> and <name4> ,
<name6> <name4> ( <name1> ) :	return the result . derive the <name6> <name4> from the <name1> base <name6> .
<name1> = <val5>	<name1> is a string <val5> .
<name1> <name2> ( <name4> ) :	derive the <name1> <name2> from the <name4> base <name1> .
def <name6> ( <name5> , <name4> = <name2> , <name3> = ( ) ) :	define the method <name6> with 3 arguments : <name5> , <name4> set to <name2> and <name3> set to an empty tuple .
super ( <name6> , self ) . <name1> ( <name4> )	call the method <name1> from the base class of the class <name6> , called with an argument <name4> .
<name5> . <name6> = <name6>	substitute <name6> for <name5> .choices .
def <name1> ( <name6> , <name4> , <name3> , <name2> = <name5> , <name1> = ( ) ) :	define the method <name1> with 5 arguments : <name6> , <name4> , <name3> , <name2> set to <name5> and <name1> set to an empty tuple .
<name5> <name2> <name6> <name4> :	<name5> <name2> <name6> <name4> ,
<name4> = [ ]	<name4> is an empty list .
final_attrs = <name2> . build_attrs ( <name4> , <name5> = <name2> . input_type , <name3> = <name3> )	call the method <name2> .build_attrs with 3 arguments : <name4> , <name5> set to <name2> .input_type , <name3> set to <name3> ,
<name2> = <name3> . <name6> ( <val5>   , <name1> )	substitute the result for <name3> . <name6> the value under the <val5> key of <name3> dictionary , substitute if for <name2> if the key doesnt exists , <name2> is <name1> .
<name4> = [ ]	<name4> is an empty list .
<name2> <name4> , <name6> <name5> enumerate ( <name1> ) :	<name2> every <name4> and <name6> <name5> enumerated iterable <name1> ,
input_attrs = dict ( value = <name5> ( <name3> ) , ** <name4> )	unpack dictionary <name4> , map the values through <name5> function with an argument <name3> and convert it to a dictionary , again ,
<name6> <name2> :	substitute the result input_attrs . <name6> <name2> ,
<name4> [ <val6>   ] = <val3>   % ( <name5> , <name2> )	replace '%s' in string <val3> with <name5> and <name2> , substitute the result for <name4> dictionary value under the <val6> key .
inputs . append ( <name3> ( <val1>   , <name2> ( input_attrs ) ) )	call the function <name3> with 2 arguments : string <val1> , return value of the function <name2> , called with an argument ,
\ return <name3> ( '\\n'   . <name6> ( <name4> ) ) \	input_attrs , append the result to <name4> list . <name6> <name4> elements into a string , separated with newline character , use it as an argument for the call to the function <name3> ,
def <name1> ( <name2> , <name6> , <name4> , <name5> ) :	return the result . define the method <name1> with 4 arguments : <name2> , <name6> , <name4> and <name5> .
<name2> isinstance ( <name3> , ( <name5> , <name6> ) ) :	<name2> <name3> is an instance of <name5> or <name6> class ,
<name6> <name3> . getlist ( <name2> )	call the method <name3> .getlist with an argument <name2> , <name6> the result .
<name2> <name1> . get ( <name3> , <name5> )	<name2> value under the <name3> key of the <name1> dictionary , if it doesnt exists , <name2> <name5> .
<name1> <name4> ( <name2> ) :	derive the <name1> <name4> from the <name2> base <name1> .
<name1> = <val6>	<name1> is a string <val6> .
<name4> = <name2>	<name4> is boolean <name2> .
def <name3> ( <name2> , <name5> , <name1> , <name6> = <name4> ) :	define the method <name3> with 4 arguments : <name2> , <name5> , <name1> and <name6> set to <name4> .
return super ( <name3> , self ) . <name5> ( <name2> , <name1> , <name6> = <name6> )	call the method <name5> from the base class of the class <name3> , called with 3 arguments : <name2> , <name1> and <name6> as <name6> .
def <name5> ( <name6> , <name3> , <name1> , <name4> ) :	define the method <name5> with 4 arguments : <name6> , <name3> , <name1> and <name4> .
<name4> <name1> . get ( <name6> , <name5> )	<name4> value under the <name6> key of the <name1> dictionary , if it doesnt exists , <name4> <name5> .
<name3> = <name1> ( )	<name3> is an instance of <name1> class .
<name2> <name5> ( <name1> ) :	derive the <name2> <name5> from the <name1> base <name2> .
<name5> = <name2> ( <val4>   )	call the function <name2> with an argument string <val4> , substitute the result for <name5> .
<name5> = <name6> ( <val4>   )	call the function <name6> with an argument string <val4> , substitute the result for <name5> .
<name3> = <name1> ( <val6>   )	call the function <name1> with an argument string <val6> , substitute the result for <name3> .
<name6> = <val4>	<name6> is a string <val4> .
<name3> = <val1>	<name3> is a string <val1> .
<name2> = <val3>	<name2> is a string <val3> .
def <name1> ( <name5> , <name2> ) :	define the method <name1> with 2 arguments : <name5> and <name2> .
<name4> <name5> + <val2>	concatenate <name5> and string <val2> , <name4> it .
def <name3> ( <name4> , <name5> ) :	define the method <name3> with 2 arguments : <name4> and <name5> .
<name4> <name3> + <val6>	concatenate <name3> and string <val6> , <name4> it .
def <name5> ( <name4> , <name6> , <name1> , <name3> = <name2> ) :	define the method <name5> with 4 arguments : <name4> , <name6> , <name1> and <name3> set to <name2> .
<name1> = {   <val4>   : <name6> . initial_text , <val2>   : <name6> . input_text , 'clear_template'   : ''   , 'clear_checkbox_label'   : <name6> . clear_checkbox_label , }	<name1> is a dictionary with 4 initial entries : <name6> .initial_text for <val4> , <name6> .input_text for <val2> ,
<name5> = <val2>	an empty string for 'clear_template' and self .clear_checkbox_label for 'clear_checkbox_label' . <name5> is a string <val2> .
substitutions [ 'input'   ] = super ( <name5> , self ) . <name4> ( <name1> , <name2> , <name3> )	call the method <name4> from the base class of the class <name5> , called with 3 arguments : <name1> , <name2> and <name3> ,
<name2> <name4> <name6> hasattr ( <name4> , <val1> ) :	substitute the result for <name4> under the 'input' key of the substitutions dictionary . <name2> <name4> is true <name6> <name4> has an attribute <val1> ,
<name6> = <name2> . template_with_initial	substitute <name2> .template_with_initial for <name6> .
substitutions [ 'initial'   ] = <name1> ( <name2> . url_markup_template , <name5> . url , <name6> ( <name5> ) )	call the function <name1> with 3 arguments : <name2> .url_markup_template , <name5> .url and return <name5> of the function <name6> ,
<name1> not <name3> . is_required :	called with an argument value , substitute the result for value under the 'initial' key of the substitutions dictionary . <name1> <name3> .is_required is false ,
<name6> = <name5> . clear_checkbox_name ( <name1> )	call the method <name5> .clear_checkbox_name with an argument <name1> , substitute the result for <name6> .
<name5> = <name3> . clear_checkbox_id ( <name6> )	call the method <name3> .clear_checkbox_id with an argument <name6> , substitute the result for <name5> .
substitutions [ 'clear_checkbox_name'   ] = <name6> ( <name5> )	call the function <name6> with an argument <name5> ,
<name6> [ 'clear_checkbox_id'   ] = <name3> ( <name2> )	substitute the result for value under the 'clear_checkbox_name' key of the <name6> dictionary . call the function <name3> with an argument <name2> ,
<name3> [ 'clear'   ] = <name6> ( ) . <name4> ( <name1> , <name2> , attrs = {  'id'   : checkbox_id }  )	substitute the result for value under the 'clear_checkbox_id' key of the <name3> dictionary . call the method <name4> from the instance of <name6> class , with 3 arguments : <name1> , boolean <name2> ,
<name4> [ <val2>   ] = <name3> . template_with_clear % <name4>	attrs as a dictionary with an entry : checkbox_id for 'id' , substitute the result for value under the 'clear' key of the <name4> dictionary . format <name3> .template_with_clear with <name4> , substitute the result for value under the <val2> key of ,
<name3> <name1> ( <name6> % <name4> )	<name4> dictionary . call the function <name1> with an argument <name6> , formated with <name4> , <name3> the result .
def <name2> ( <name6> , <name5> , <name3> , <name4> ) :	define the method <name2> with 4 arguments : <name6> , <name5> , <name3> and <name4> .
upload = super ( <name6> , self ) . <name4> ( data , files , name )	call the method <name4> from the base class of the class <name6> ,
<name4> not <name6> . is_required <name5> <name3> ( ) . <name1> ( <name2> , <name4> , <name6> . clear_checkbox_name ( <name6> ) ) :	called with 3 arguments : <name2> , <name4> <name5> <name6> , substitute the result for upload . <name4> <name6> .is_required is boolean false <name5> call to the method <name1> from the instance of <name3> class ,
<name4> <name2> :	with 3 arguments : data , files and return value of the function self .clear_checkbox_name called with an argument name , evaluates to true , <name4> <name2> is true ,
<name5> <name6>	<name5> <name6> .
<name5> <name3>	<name5> boolean <name3> .
<name2> <name4>	<name2> boolean <name4> .
<name3> <name1> ( <name4> ) :	derive the <name3> <name1> from the <name4> base <name3> .
def <name1> ( <name4> , <name2> = <name3> ) :	define the method <name1> with 2 arguments : <name4> and <name2> set to <name3> .
<name2> = {  <val6>   : <val5>   , <val1>   : <val4>  }	<name2> is an dictionary with 2 initial entries : string <val5> for <val6> and string <val4> for <val1> .
<name2> <name5> :	<name2> <name5> is true ,
<name3> . <name1> ( <name6> )	<name1> <name3> dictionary with <name6> entry .
super ( <name1> , self ) . <name2> ( <name3> )	call the method <name2> from the base class of the class <name1> , with an argument <name3> .
def <name6> ( <name3> , <name2> , <name5> , <name1> = <name4> ) :	define the method <name6> with 4 arguments : <name3> , <name2> , <name5> and <name1> set to <name4> .
<name6> <name2> <name4> <name1> :	<name6> <name2> <name4> <name1> ,
<name6> = ''	<name6> is an empty string .
<name5> = <name4> . build_attrs ( <name2> , <name3> = <name3> )	call the method <name4> .build_attrs with 2 arguments : <name2> and <name3> set to <name3> , substitute the result for <name5> .
\ <name3> <name5> ( <val6>   , <name2> ( final_attrs ) , force_text ( <name1> ) ) \	\ call the function <name5> with 3 arguments : string ( <val6> , <name3> <name1> of the function <name2> , \
<name3> <name6> ( <name5> ) :	called with an argument final_attrs and return value of the function force_text called with an argument value , return the result . derive the <name3> <name6> from the <name5> base <name3> .
format_key = ''	format key is an empty string .
<name3> = <name5>	<name3> is boolean <name5> .
def <name5> ( <name6> , <name4> = <name3> , <name1> = <name3> ) :	define the method <name5> with 3 arguments : <name6> , <name4> set to <name3> and <name1> is <name3> .
super ( <name4> , self ) . <name6> ( <name5> )	call the method <name6> from the base class of the class <name4> , with an argument <name5> .
<name1> . <name3> = <name3> <name2> <name3> else <name5>	substitute <name3> for <name1> .format <name2> <name3> is true , <name2> not <name1> .format is <name5> .
def <name4> ( <name5> , <name1> ) :	define the method <name4> with 2 arguments : <name5> and <name1> .
return <name2> . localize_input ( <name1> , <name5> . format or <name2> . get_format ( <name5> . format_key ) [ 0 ] )	call the function <name2> .localize_input with 2 arguments : <name1> and <name5> .format if true , if not ,
<name1> <name6> ( <name5> ) :	then the first element of the result of the function formats .get_format called with an argument self .format_key , return the result . derive the <name1> <name6> from the <name5> base <name1> .
<name6> = <val4>	<name6> is a string <val4> .
<name5> <name2> ( <name1> ) :	derive the <name5> <name2> from the <name1> base <name5> .
<name4> = <val3>	<name4> is a string <val3> .
<name6> <name2> ( <name1> ) :	derive the <name6> <name2> from the <name1> base <name6> .
<name1> = <val6>	<name1> is a string <val6> .
def <name5> ( <name2> ) :	define the function <name5> with an argument <name2> .
<name3> not ( <name6> <name4> <name5> <name1> <name6> <name4> <name2> <name1> <name6> == ''   )	if <name6> <name4> boolean <name5> <name1> <name6> <name4> <name2> <name1> <name6> <name4> an empty string , <name3> boolean <name5> , otherwise <name3> boolean True .
<name1> <name5> ( <name6> ) :	derive the <name1> <name5> from the <name6> base <name1> .
def <name4> ( <name5> , <name2> = <name3> , <name6> = <name3> ) :	define the method <name4> with 3 arguments : <name5> , <name2> set to <name3> and <name6> set to <name3> .
super ( <name2> , self ) . <name3> ( <name4> )	call the method <name3> from the base class of the class <name2> , with an argument <name4> .
<name1> . <name2> = <name5> <name4> <name2> <name3> <name6> else <name2>	substitute <name5> for <name1> .check_test <name4> <name2> <name3> <name6> , otherwise substitute <name2> for <name1> .check_test .
def <name1> ( <name6> , <name5> , <name4> , <name2> = <name3> ) :	define the method <name1> with 4 arguments : <name6> , <name5> , <name4> and <name2> set to <name3> .
<name4> = <name2> . build_attrs ( <name1> , <name6> = <val3>   , <name5> = <name5> )	call the method <name2> .build_attrs with 3 arguments : <name1> , <name6> as a string <val3> , <name5> as <name5> , substitute the result for <name4> .
<name4> <name6> . check_test ( <name1> ) :	call the method <name6> .check_test with an argument <name1> , <name4> it evaluates to true ,
<name2> [ <val6>   ] = <val6>	substitute string <val6> for value under the <val6> key of <name2> dictionary .
<name6> <name2> ( <name1> <name4> <name5> <name3> <name1> <name4> <name6> <name3> <name1> <name4> <name2> <name3> <name1> == ''   ) :	<name6> <name1> <name4> boolean <name6> <name3> boolean <name5> <name3> <name1> <name4> <name2> <name3> <name1> <name4> an empty string , do <name2> perform the following ,
<name3> [ <val1>   ] = <name2> ( <name4> )	call the function <name2> with an argument <name4> , substitute the result for <name4> under the <val1> key of the <name3> .
<name1> <name5> ( <val4>   , flatatt ( final_attrs ) )	<name1> the result of the function <name5> called with 2 arguments : string <val4> ,
def <name1> ( <name2> , <name6> , <name4> , <name3> ) :	and result of the function flatatt , called with an argument final_attrs . define the method <name1> with 4 arguments : <name2> , <name6> , <name4> and <name3> .
<name3> <name2> <name4> <name6> <name5> :	<name3> <name2> is <name4> contained <name6> <name5> ,
<name6> <name1>	<name6> boolean <name1> .
<name6> = <name5> . <name2> ( <name1> )	<name2> the <name1> key of the <name5> dictionary , substitute it for <name6> .
<name2> = {  <val3>   : <name6> , <val4>   : <name1> }	<name2> is an dictionary with 2 arguments : boolean <name1> for <val4> and boolean <name6> for <val3> .
<name2> isinstance ( <name1> , <name6> . string_types ) :	<name2> <name1> is an instance of <name6> .string_types class ,
<name5> = <name6> . <name1> ( <name5> . lower ( ) , <name5> )	<name1> the <name5> of the <name6> dictionary under the <name5> converted to lowercase key , substitute it for <name5> , if the key doesnt exists ,
<name1> bool ( <name3> )	substitute <name3> for <name3> . <name1> <name3> converted into a boolean .
<name6> <name2> ( <name5> ) :	derive the <name6> <name2> from the <name5> base <name6> .
<name4> = <name6>	<name4> is boolean <name6> .
def <name1> ( <name5> , <name2> = <name4> , <name3> = ( ) ) :	define the method <name1> with 3 arguments : <name5> , <name2> set to <name4> and <name3> set to an empty tuple .
super ( <name6> , self ) . <name5> ( <name1> )	call the method <name5> from the base class of the class <name6> , with an argument <name1> .
<name2> . <name5> = <name4> ( <name5> )	convert elements of <name5> into a <name4> , substitute it for <name2> .choices .
def <name4> ( <name6> , <name1> , <name5> , <name2> = <name3> , <name4> = ( ) ) :	define the method <name4> with 5 arguments : <name6> , <name1> , <name5> , <name2> set to <name3> and <name4> set to an empty tuple .
<name1> <name3> <name2> <name5> :	<name1> <name3> <name2> <name5> ,
<name6> = ''	<name6> is an empty string .
<name1> = <name3> . build_attrs ( <name4> , <name6> = <name6> )	call the method <name3> .build_attrs with arguments <name4> , <name6> as <name6> , substitute the result for <name1> .
<name6> = [ <name5> ( <val3>   , flatatt ( final_attrs ) ) ]	<name6> is a list containing an element : result of the function <name5> called with 2 arguments : string <val3> ,
<name2> = <name3> . render_options ( <name4> , [ <name6> ] )	and return <name6> of the function flatatt called with an argument final_attrs , substitute the result for output . call the method <name3> .render_options with 2 arguments : <name4> and list with an entry , <name6> , substitute the result for <name2> .
<name3> <name5> :	<name3> <name5> is true ,
<name2> . <name1> ( <name3> )	<name1> <name3> to <name2> .
<name6> . <name5> ( <val1>   )	<name5> string <val1> to <name6> .
\ return <name5> ( '\\n'   . <name6> ( <name3> ) ) \	<name6> elements of <name3> into a string , separated by newline characters , use it as the argument for the call the function <name5> ,
def <name2> ( <name4> , <name1> , <name6> , <name3> ) :	return the result . define the method <name2> with 4 arguments : <name4> , <name1> , <name6> and <name3> .
<name1> <name5> <name3> <name4> :	<name1> <name5> <name3> <name4> ,
<name2> = ''	<name2> is an empty string .
<name2> = <name5> ( <name2> )	call the function <name5> with an argument <name2> , substitute the result for <name2> .
<name3> <name1> <name4> <name2> :	<name3> <name1> is contained <name4> <name2> ,
<name5> = <name2> ( <val3>   )	call the function <name2> with an argument string <val3> , substitute the result for <name5> .
<name1> not <name3> . allow_multiple_selected :	<name1> <name3> .allow_multiple_selected is false ,
<name5> . remove ( <name4> )	call the method <name5> .remove with an argument <name4> .
else :	if not ,
<name5> = ''	<name5> is an empty string .
return <name4> ( <val5>   , <name1> , <name6> , force_text ( option_label ) )	call the function <name4> with 4 arguments : string <val5> , <name1> , <name6> ,
def <name4> ( <name5> , <name1> , <name3> ) :	result of the function force_text with an argument option_label , return the result . define the method <name4> with 3 arguments : <name5> , <name1> and <name3> .
<name4> = <name2> ( <name5> ( <name6> ) <name1> <name6> <name3> <name4> )	call the function <name5> with an argument <name6> , <name1> every <name6> <name3> <name4> , add results to a <name2> ,
<name6> = [ ]	substitute the resulting set for selected_choices . <name6> is an empty list .
<name1> <name5> , <name2> <name3> <name4> ( <name6> . <name1> , <name1> ) :	call the function <name4> with arguments <name6> .choices and <name1> , <name1> every <name5> and <name2> <name3> the result ,
<name4> isinstance ( <name6> , ( <name1> , <name5> ) ) :	<name4> <name6> is an instance of <name1> or <name5> ,
output . append ( <name2> ( <val1>   , <name3> ( option_value ) ) )	call the function <name2> with 2 arguments : string <val1> and return value of the function <name3> ,
<name1> <name3> <name2> <name4> :	called with an argument option_value , append the result to output . <name1> every <name3> <name2> <name4> ,
<name6> . <name4> ( <name5> . render_option ( <name3> , * <name1> ) )	call the method <name5> .render_option with 2 arguments : <name3> and unpacked list <name1> , <name4> the result to <name6> .
<name6> . <name5> ( <val2>   )	<name5> string <val2> to <name6> .
else :	if not ,
<name2> . <name3> ( <name5> . render_option ( <name6> , <name1> , <name4> ) )	call the method <name5> .render_option with 3 arguments : <name6> , <name1> and <name4> , <name3> the result to <name2> .
\ <name6> '\\n'   . <name3> ( <name5> ) \	<name3> elements of <name5> in a string , separated by newlines , <name6> it .
<name5> <name3> ( <name4> ) :	derive the <name5> <name3> from the <name4> base <name5> .
def <name4> ( <name5> , <name3> = <name1> ) :	define the method <name4> with 2 arguments : <name5> and <name3> set to <name1> .
<name4> = ( ( <val2>   , <name3> ( 'Unknown'   ) ) , ( '2'   , <name3> ( 'Yes'   ) ) , ( '3'   , <name3> ( 'No'   ) ) )	<name4> is a tuple with 3 elements : tuple with 2 elements : string <val2> and return value of the function <name3> ,
super ( <name6> , self ) . <name1> ( <name5> , <name3> )	called with an argument string 'Unknown' , tuple with 2 elements : string '2' and return value of the function ugettext_lazy , called with an argument string 'Yes' and tuple with 2 elements : string '3' and return value of the function ugettext_lazy , called with an argument string 'No' . call the method <name1> from the base class of the class <name6> , with arguments <name5> and <name3> .
def <name2> ( <name4> , <name3> , <name5> , <name1> = <name6> , <name2> = ( ) ) :	define the method <name2> with 5 arguments : <name4> , <name3> , <name5> , <name1> set to <name6> and <name2> set to an empty tuple .
<name2> :	<name2> ,
<name5> = {  <name3> : <val6>   , <name1> : <val2>   , <val6>   : <val6>   , <val2>   : <val2>  }  [ <name5> ]	get the <name5> under <name5> key of a dictionary with 4 entries : <val6> for boolean <name3> , <val2> for boolean <name1> , <val6> for <val6> ,
except <name1> :	and '3' for '3' , substitute it for value . if <name1> exception is caught ,
<name2> = <val3>	<name2> is an string <val3> .
return super ( <name3> , self ) . <name5> ( <name4> , <name6> , <name2> , <name1> )	call the method <name5> from the base class of the class <name3> , with 4 arguments : <name4> , <name6> , <name2> and <name1> ,
def <name4> ( <name6> , <name5> , <name2> , <name1> ) :	return the result . define the method <name4> with 4 arguments : <name6> , <name5> , <name2> and <name1> .
<name5> = <name1> . <name2> ( <name6> , <name4> )	<name2> the <name5> under the <name6> key of the <name1> dictionary , if it exists substitute it for <name5> , if not , <name5> is <name4> .
return {  <val1>   : <name4> , <name4> : <name4> , 'True'   : <name4> , '3'   : False , 'False'   : False , False : False }  . <name5> ( <name6> , None )	<name5> the <name6> under the <name6> key of a dictionary with 6 entries : boolean <name4> for <val1> , boolean <name4> for boolean <name4> ,
<name4> <name2> ( <name3> ) :	boolean True for 'True' , boolean False for '3' , boolean False for 'False' and boolean False for boolean False , return it if the key exists , if not return None . derive the <name4> <name2> from the <name3> base <name4> .
<name2> = <name6>	<name2> is boolean <name6> .
def <name4> ( <name3> , <name2> , <name1> , <name6> = <name5> , <name4> = ( ) ) :	define the method <name4> with 5 arguments : <name3> , <name2> , <name1> , <name6> set to <name5> and <name4> set to an empty tuple .
<name6> <name2> <name4> <name1> :	<name6> <name2> <name4> <name1> ,
<name3> = [ ]	<name3> is an empty list .
<name2> = <name3> . build_attrs ( <name4> , <name5> = <name5> )	call the method <name3> .build_attrs with 2 arguments : <name4> and <name5> set to <name5> , substitute the result for <name2> .
"<name6> = [ <name4> ( '<select multiple=""multiple""{0}>'   , flatatt ( final_attrs ) ) ]"	<name6> is a list containing an entry : result of the function <name4> called with 2 arguments :
<name3> = <name4> . render_options ( <name1> , <name2> )	"string '<select multiple=""multiple""{0}>' and result of the function flatatt called with an argument final_attrs . call the method <name4> .render_options with 2 arguments : <name1> and <name2> , substitute the result for <name3> ."
<name1> <name6> :	<name1> <name6> is true ,
<name4> . <name2> ( <name1> )	<name2> <name1> to <name4> .
<name4> . <name1> ( <val6>   )	<name1> string <val6> to <name4> .
\ return mark_safe ( '\\n'   . <name1> ( <name6> ) ) \	<name1> elements of <name6> into a string , separated with newline character ,
def <name2> ( <name1> , <name6> , <name5> , <name4> ) :	use it as an argument for the call to the mark_safe function , return the result . define the method <name2> with 4 arguments : <name1> , <name6> , <name5> and <name4> .
<name4> isinstance ( <name1> , ( <name5> , <name3> ) ) :	<name4> <name1> is an instance of <name5> or <name3> ,
<name4> <name2> . getlist ( <name1> )	call the method <name2> .getlist with an argument <name1> , <name4> the result .
<name6> <name4> . <name5> ( <name1> , <name2> )	<name5> the value under the <name1> key of the <name4> dictionary , if it exists <name6> it , if not <name6> <name2> .
@  <name4>	<name4> decorator ,
<name3> <name2> ( <name6> ) :	derive the <name3> <name2> from the <name6> base <name3> .
<name1> = <name5>	<name1> is <name5> .
def <name5> ( <name1> , <name3> , <name4> , <name2> , <name6> , <name5> ) :	define the method <name5> with 6 arguments : <name1> , <name3> , <name4> , <name2> , <name6> and <name5> .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .name .
<name4> . <name2> = <name2>	substitute <name2> for <name4> .value .
<name1> . <name3> = <name3>	substitute <name3> for <name1> .attrs .
<name6> . choice_value = <name1> ( <name2> [ 0 ] )	call the function <name1> with first element of <name2> as an argument , substitute the result for <name6> .choice_value .
<name1> . choice_label = <name3> ( <name4> [ 1 ] )	call the function <name3> with second element of <name4> as an argument , substitute the result for <name1> .choice_label .
<name2> . <name1> = <name1>	substitute <name1> for <name2> .index .
<name2> <val3>   <name6> <name4> . attrs :	<name2> string <val3> is contained <name6> <name4> .attrs ,
"<name1> . attrs [ <val2>   ] += ""_%d"" % <name1> . index"	convert <name1> .index into a string and append it to '_' string , substitute it for value under the <val2> key of <name1> .attrs dictionary .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name2> <name3> . render ( )	call the method <name3> .render , <name2> the result .
def <name2> ( <name3> , <name6> = <name5> , <name4> = <name5> , <name1> = <name5> , <name2> = ( ) ) :	define the method <name2> with 5 arguments : <name3> , <name6> set to <name5> , <name4> set to <name5> , <name1> set to <name5> and <name2> set to an empty tuple .
if <name2> . id_for_label :	<name2> .id_for_label is true ,
<name5> = <name4> ( <val2>   , <name3> . id_for_label )	call the function <name4> with 2 arguments : string <val2> and <name3> .id_for_label , substitute the result for <name5> .
else :	if not ,
<name6> = ''	<name6> is an empty string .
return <name3> ( <val6>   , <name4> , <name5> . tag ( ) , <name5> . choice_label )	call the function <name3> with 4 arguments : string <val6> , <name4> , result of the method <name5> .tag ,
def <name5> ( <name1> ) :	and <name1> .choice_label , return the result . define the method <name5> with an argument <name1> .
<name1> <name5> . value == <name5> . choice_value	if <name5> .value equals <name5> .choice_value , <name1> boolean True , if not , <name1> boolean False .
def <name1> ( <name2> ) :	define the method <name1> with an argument <name2> .
final_attrs = <name5> ( <name6> . attrs , <name2> = <name6> . input_type , <name3> = <name6> . <name3> , <name1> = <name6> . choice_value )	call the method <name5> with 4 : <name6> .attrs , <name2> as <name6> .input_type , <name3> as <name6> .name , <name1> as <name6> .choice_value ,
<name5> <name3> . is_checked ( ) :	substitute the result for final_attrs . call the method <name3> .is_checked , <name5> it evaluates to true ,
<name3> [ <val4>   ] = <val4>	substitute string <val4> for value under the <val4> key of <name3> dictionary .
return <name5> ( <val6>   , <name1> ( final_attrs ) )	call the function <name5> with 2 arguments : string <val6> and result of the function <name1> ,
@  <name3>	called with an argument final_attrs , return the result . <name3> decorator ,
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name2> <name4> . attrs . <name5> ( <val1>   , ''   )	<name5> the value under the <val1> key of the <name4> .attrs dictionary , <name2> it , if the key doesnt exists <name2> an empty string .
<name4> <name3> ( <name6> ) :	derive the <name4> <name3> from the <name6> base <name4> .
<name2> = <val5>	<name2> is a string <val5> .
def <name6> ( <name2> , * <name3> , ** <name1> ) :	define the method <name6> with 3 arguments : <name2> , unpacked list <name3> and unpacked dictionary <name1> .
super ( <name4> , self ) . <name6> ( * <name5> , ** kwargs )	call the method <name6> from the base class of the class <name4> , with 2 arguments : unpacked list <name5> ,
<name3> . value = <name2> ( <name3> . value )	and unpacked dictionary kwargs . call the function <name2> with an argument <name3> .value , substitute the result for <name3> .value .
<name1> <name5> ( <name4> ) :	derive the <name1> <name5> from the <name4> base <name1> .
<name6> = <val5>	<name6> is a string <val5> .
def <name6> ( <name5> , * <name3> , ** <name2> ) :	define the method <name6> with 3 arguments : <name5> , unpacked list <name3> and unpacked dictionary <name2> .
super ( <name3> , self ) . <name1> ( * <name5> , ** kwargs )	call the method <name1> from the base class of the class <name3> , with 2 arguments : unpacked list <name5> ,
<name6> . value = <name5> ( <name3> ( <name4> ) <name1> <name4> <name2> <name6> . value )	and unpacked dictionary kwargs . <name1> every <name4> <name2> <name6> .value call the function <name3> with an argument <name4> , add the result to a <name5> ,
def <name3> ( <name4> ) :	substitute set of the results for <name4> .value . define the method <name3> with an argument <name4> .
<name3> <name1> . choice_value <name5> <name1> . value	if <name1> .choice_value is contained <name5> <name1> .value <name3> boolean True , otherwise <name3> boolean False .
@  <name5>	<name5> decorator ,
<name1> <name6> ( <name4> ) :	derive the <name1> <name6> from the <name4> base <name1> .
<name2> = <name3>	<name2> is <name3> .
<name5> = <val1>	<name5> is a string <val1> .
<name6> = <val2>	<name6> is a string <val2> .
def <name4> ( <name2> , <name1> , <name5> , <name6> , <name3> ) :	define the method <name4> with 5 arguments : <name2> , <name1> , <name5> , <name6> and <name3> .
<name5> . <name1> = <name1>	substitute <name1> for <name5> .name .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .value .
<name1> . <name3> = <name3>	substitute <name3> for <name1> .attrs .
<name1> . <name4> = <name4>	substitute <name4> for <name1> .choices .
def <name3> ( <name5> , <name1> ) :	define the method <name3> with 2 arguments : <name5> and <name1> .
<name3> = <name1> . choices [ <name6> ]	substitute <name6> - th element of <name1> .choices for <name3> .
return <name1> . choice_input_class ( <name1> . name , <name1> . value , <name1> . attrs . copy ( ) , choice , idx )	call the method <name1> .choice_input_class with 5 arguments : <name1> .name , <name1> .value , result of the method <name1> .attrs .copy ,
def <name2> ( <name5> ) :	choice and idx , return the result . define the method <name2> with an argument <name5> .
<name6> <name5> . render ( )	call the method <name5> .render , <name6> the result .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name2> = <name3> . attrs . <name5> ( <val1>   , <name6> )	<name5> the value under the <val1> key of the <name3> .attrs dictionary , substitute it for <name2> if the key exists , if not <name2> is <name6> .
<name5> = [ ]	<name5> is an empty list .
<name5> <name1> , <name2> <name3> enumerate ( <name6> . choices ) :	<name5> every <name1> and <name2> <name3> enumerated iterable <name6> .choices ,
<name6> , <name2> = <name5>	substitute <name5> for <name6> and <name2> , respectively .
<name4> isinstance ( <name6> , ( <name2> , <name5> ) ) :	<name4> <name6> is an instance of <name2> or <name5> ,
<name5> = <name3> . attrs . copy ( )	call the method <name3> .attrs .copy , substitute the result for <name5> .
<name3> <name1> :	<name3> <name1> is true ,
<name6> [ <val4>   ] += '_{0}'   . format ( <name5> )	prepend string '_' to <name5> converted to an string , append the result to the value under the <val4> key of the <name6> .
<name2> = <name4> ( <name6> = <name5> . <name6> , <name1> = <name5> . <name1> , attrs = attrs_plus , choices = choice_label )	<name2> is an instance of <name4> class , created with 4 arguments : <name6> as <name5> .name , <name1> as <name5> .value ,
<name1> . choice_input_class = <name6> . choice_input_class	attrs as attrs_plus and choices as choice_label . substitute <name6> .choice_input_class for <name1> .choice_input_class .
output . append ( <name4> ( <name5> . inner_html , <name3> = <name3> , sub_widgets = sub_ul_renderer . render ( ) ) )	call the function <name4> with 3 arguments : <name5> .inner_html , <name3> set to <name3> ,
else :	and sub_widgets set to return value of the function sub_ul_renderer .render , append the result to output . if not ,
w = <name1> . choice_input_class ( <name1> . name , <name1> . <name5> , <name1> . attrs . copy ( ) , choice , i )	call the method <name1> .choice_input_class with 5 arguments : <name1> .name , <name1> .value , return <name5> of the method <name1> .attrs .copy ,
output . append ( <name3> ( <name4> . inner_html , <name5> = <name6> ( <name2> ) , sub_widgets = ''   ) )	choice and i , substitute the result for <name2> . call the function <name3> with 3 arguments : <name4> .inner_html , <name5> set to result of the function <name6> ,
"\ return <name3> ( <name2> . outer_html , id_attr = <name3> ( ' id=""{0}""'   , id_ ) if id_ else ''   , content = mark_safe ( '\\n'   . join ( <name6> ) ) ) \"	called with an argument w , and sub_widgets as an empty string , append the result to <name6> . call the function <name3> with 3 arguments : <name2> .outer_html ,
<name2> <name1> ( <name5> ) :	\ if id_ is true id_attr set to return value of the function format_html , if not id_attr set to an empty string , content set to result of the function mark_safe with an argument : string created by joining elements of outputs , with '\\n' separator , return the result . derive the <name2> <name1> from the <name5> base <name2> . \
<name5> = <name6>	substitute <name6> for <name5> .
<name6> <name2> ( <name1> ) :	derive the <name6> <name2> from the <name1> base <name6> .
<name6> = <name1>	substitute <name1> for <name6> .
<name3> <name5> ( <name6> ) :	derive the <name3> <name5> from the <name6> base <name3> .
<name5> = <name4>	<name5> is <name4> .
<name6> = <name3>	<name6> is <name3> .
def <name2> ( <name1> , * <name5> , ** <name3> ) :	define the method <name2> with 3 arguments : <name1> , unpacked list <name5> and unpacked dictionary <name3> .
<name4> = <name2> . pop ( 'renderer'   , <name1> )	remove entry under 'render' key of the <name2> dictionary and substitute it for <name4> , if the key doesnt exists , <name4> is <name1> .
<name3> <name6> :	<name3> <name6> is true ,
<name6> . <name2> = <name2>	substitute <name2> for <name6> .renderer .
super ( <name3> , self ) . <name6> ( * <name4> , ** kwargs )	call the method <name6> from the base class of the class <name3> , with 2 arguments : unpacked list <name4> ,
def <name6> ( <name4> , <name1> , <name5> , <name3> = <name2> , <name6> = ( ) ) :	and unpacked dictionary kwargs . define the method <name6> with 5 arguments : <name4> , <name1> , <name5> , <name3> set to <name2> and <name6> set to an empty tuple .
<name2> <name1> <name5> <name4> . get_renderer ( <name6> , <name3> , <name2> , <name1> ) :	call the method <name4> .get_renderer with 4 arguments : <name6> , <name3> , <name2> and <name1> , <name2> every <name1> <name5> result ,
<name1> <name4>	<name1> <name4> .
def <name4> ( <name1> , <name6> , <name5> , <name3> = <name2> , <name4> = ( ) ) :	define the method <name4> with 5 arguments : <name1> , <name6> , <name5> , <name3> set to <name2> and <name4> set to an empty tuple .
<name4> <name3> <name5> <name6> :	<name4> <name3> <name5> <name6> ,
<name6> = <name3> . _empty_value	substitute <name3> ._empty_value for <name6> .
<name4> = <name3> . build_attrs ( <name2> )	call the method <name3> .build_attrs with an argument <name2> , substitute the result for <name4> .
<name6> = <name2> ( <name1> ( <name4> . <name6> , <name6> ) )	call the function <name1> with 2 arguments : <name4> .choices and <name6> , convert the result into a <name2> and substitute it for <name6> .
<name5> <name6> . renderer ( <name2> , <name3> , <name4> , <name1> )	call the method <name6> .renderer with 4 arguments : <name2> , <name3> , <name4> and <name1> , <name5> the result .
def <name2> ( <name4> , <name6> , <name1> , <name3> = <name5> , <name2> = ( ) ) :	define the method <name2> with 5 arguments : <name4> , <name6> , <name1> , <name3> set to <name5> and <name2> set to an empty tuple .
<name4> <name3> . get_renderer ( <name2> , <name1> , <name5> , <name6> ) . <name4> ( )	call the method <name3> .get_renderer with 4 arguments : <name2> , <name1> , <name5> and <name6> , call the <name4> method on the result , <name4> the result .
def <name1> ( <name5> , <name3> ) :	define the method <name1> with 2 arguments : <name5> and <name3> .
<name6> <name5> :	<name6> <name5> is true ,
<name3> += <val4>	append string <val4> to <name3> .
<name5> <name4>	<name5> <name4> .
<name2> <name5> ( <name1> , <name3> ) :	derive the <name2> <name5> from the <name1> and <name3> base classes .
<name3> = <name5>	substitute <name5> for <name3> .
<name5> = ''	<name5> is an empty string .
<name6> <name5> ( <name4> , <name1> ) :	derive the <name6> <name5> from the <name4> and <name1> base classes .
<name6> = <name3>	substitute <name3> for <name6> .
<name1> = [ ]	<name1> is an empty list .
<name5> <name6> ( <name3> ) :	derive the <name5> <name6> from the <name3> base <name5> .
def <name6> ( <name5> , <name4> , <name2> = <name1> ) :	define the method <name6> with 3 arguments : <name5> , <name4> and <name2> set to <name1> .
self . <name6> = [ <name1> ( ) <name3> isinstance ( <name1> , <name4> ) else <name1> <name2> <name1> <name5> <name6> ]	<name2> every <name1> <name5> <name6> , call the function <name1> and append the result to a list , <name3> <name1> is an instance of <name4> class ,
super ( <name2> , <name1> ) . <name6> ( <name5> )	if not append w to the list , substitute the resulting list for <name1> .widgets . call the method <name6> from the base class of the class <name2> , with an argument <name5> .
@  <name2>	<name2> decorator ,
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name2> <name5> ( <name1> . is_hidden <name4> <name1> <name3> <name6> . widgets )	<name4> every <name1> <name3> <name6> .widgets , if <name5> elements <name1> .is_hidden are true , <name2> boolean True , otherwise <name2> boolean False .
def <name5> ( <name4> , <name1> , <name6> , <name3> = <name2> ) :	define the method <name5> with 4 arguments : <name4> , <name1> , <name6> and <name3> set to <name2> .
<name2> <name1> . is_localized :	<name2> <name1> .is_localized is true ,
<name3> widget <name4> <name1> . widgets :	<name3> every bwidget <name4> <name1> .widgets ,
<name4> . is_localized = <name1> . is_localized	substitute <name1> .is_localized for <name4> .is_localized .
<name3> <name6> isinstance ( <name5> , <name4> ) :	<name3> <name5> is <name6> an instance of <name4> type ,
<name5> = <name3> . decompress ( <name5> )	call the method <name3> .decompress with an argument <name5> , substitute the result for <name5> .
<name1> = [ ]	<name1> is an empty list .
<name1> = <name4> . build_attrs ( <name6> )	call the method <name4> .build_attrs with an argument <name6> , substitute the result for <name1> .
<name5> = <name2> . <name3> ( <val4>   , <name6> )	<name3> the value under the <val4> key of the <name2> dictionary , substitute it for <name5> , if it doesnt exists , <name5> is <name6> .
<name5> <name4> , <name3> <name6> enumerate ( <name1> . widgets ) :	<name5> every <name4> and <name3> <name6> enumerated iterable <name1> .widgets ,
<name1> :	<name1> ,
<name3> = <name6> [ <name4> ]	substitute <name4> - th element of <name6> for <name3> .
except <name5> :	if <name5> exception is caught ,
<name2> = <name6>	<name2> is <name6> .
<name2> <name3> :	<name2> <name3> is true ,
<name4> = <name2> ( <name4> , <name3> = <val6>   % ( <name1> , <name5> ) )	call the <name2> function with 2 arguments : <name4> and <name3> set to string <val6> , where '%s' is replaced with <name1> and <name5> ,
output . append ( <name4> . render ( <name1> + '_%s'   % <name5> , <name6> , <name3> ) )	substitute the result for <name3> . call the method <name4> .render with 3 arguments : string created by concatenation from : <name1> , string '_' and <name5> , <name6> ,
return <name6> ( <name4> . format_output ( <name5> ) )	and final_attrs , append the result to <name5> . call the method <name4> .format_output with an argument <name5> , use the result as an argument for the call to the function <name6> ,
def <name2> ( <name3> , <name5> ) :	return the result . define the method <name2> with 2 arguments : <name3> and <name5> .
<name4> <name2> :	<name4> <name2> is true ,
<name1> += <val4>	append string <val4> to <name1> .
<name3> <name1>	<name3> <name1> .
def <name6> ( <name4> , <name1> , <name2> , <name3> ) :	define the method <name6> with 2 arguments : <name4> , <name1> , <name2> and <name3> .
return [ <name6> . value_from_datadict ( <name4> , files , name + '_%s'   % <name2> ) <name5> <name2> , <name6> <name1> enumerate ( <name3> . widgets ) ]	<name5> every <name2> and <name6> <name1> enumerated iterable <name3> .widgets , call the function <name6> .value_from_datadict with 3 arguments : <name4> ,
def <name3> ( <name2> , <name5> ) :	files and string created with concatenation of : name , string '_' and i converted into a string , return the results in a list . define the method <name3> with 2 arguments : <name2> and <name5> .
<name1> ''   . <name6> ( <name3> )	<name6> <name3> into a string , <name1> it .
def <name4> ( <name3> , <name1> ) :	define the method <name4> with 2 arguments : <name3> and <name1> .
<name5> <name2> ( <val3>   )	<name5> <name2> exception with an argument string <val3> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name1> = <name4> ( )	<name1> is an instance of <name4> class .
<name3> <name2> <name6> <name1> . widgets :	<name3> every <name2> <name6> <name1> .widgets ,
<name5> = <name5> + <name1> . <name5>	sum <name5> and <name1> .media , substitute the result for <name5> .
<name2> <name6>	<name2> <name6> .
<name5> = <name6> ( <name4> )	<name5> is a <name6> object of the current class , with <name4> as getter function .
def <name3> ( <name4> , <name2> ) :	define the method <name3> with 2 arguments : <name4> and <name2> .
<name2> = super ( <name1> , self ) . <name3> ( <name4> )	call the method <name3> from the base class of the class <name1> , with an argument <name4> , substitute the result for <name2> .
<name1> . widgets = <name4> . deepcopy ( <name6> . widgets )	call the method <name4> .deepcopy with an argument <name6> .widgets , substitute the result for <name1> .widgets .
<name4> <name1>	<name4> <name1> .
@  <name1>	<name1> decorator ,
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name4> <name5> ( <name2> . needs_multipart_form <name1> <name2> <name3> <name6> . widgets )	if <name5> <name2> .needs_multipart_form <name1> every <name2> <name3> <name6> .widgets is true , <name4> boolean True , if not <name4> boolean False .
<name4> <name1> ( <name5> ) :	derive the <name4> <name1> from the <name5> base <name4> .
<name4> = <name1>	<name4> is boolean <name1> .
def <name1> ( <name6> , <name4> = <name5> , <name3> = <name5> , <name2> = <name5> ) :	define the method <name1> with 4 arguments : <name6> , <name4> set to <name5> , <name3> set to <name5> and <name2> set to <name5> .
<name6> = ( <name2> ( <name5> = <name5> , <name4> = <name3> ) , TimeInput ( <name5> = <name5> , <name4> = time_format ) )	<name6> is a tuple with 2 elements : instance of <name2> class , created with 2 arguments : <name5> as <name5> and <name4> as <name3> ,
super ( <name3> , self ) . <name1> ( <name2> , <name5> )	and instance of TimeInput class , created with 2 arguments : <name5> set to <name5> and format set to date_format . call the method <name1> from the base class of the class <name3> , with 2 arguments : <name2> and <name5> .
def <name4> ( <name2> , <name6> ) :	define the method <name4> with 2 arguments : <name2> and <name6> .
<name5> <name3> :	<name5> <name3> is true ,
<name3> = <name2> ( <name3> )	call the function <name2> with an argument , substitute the result for <name3> .
<name1> [ <name2> . date ( ) , <name2> . time ( ) . <name4> ( microsecond = 0 ) ]	<name1> a list containing 2 elements : <name1> <name2> of the <name2> .date method and <name1> <name2> of the <name4> method ,
<name5> [ <name1> , <name1> ]	called with the argument microseconds set to integer 0 , on the result of the method value .time . <name5> list containing 2 elements : <name1> and <name1> .
<name5> <name1> ( <name4> ) :	derive the <name5> <name1> from the <name4> base <name5> .
def __init__ ( <name4> , <name6> = <name5> , <name1> = <name5> , <name3> = <name5> ) :	define the method render with 4 arguments : <name4> , <name6> set to <name5> , <name1> set to <name5> and <name3> set to <name5> .
super ( <name4> , self ) . <name2> ( <name1> , <name6> , <name5> )	call the method <name2> from the base class of the class <name4> , with 3 arguments : <name1> , <name6> , and <name5> .
<name2> <name4> <name6> <name3> . widgets :	<name2> every <name4> <name6> <name3> .widgets : ,
<name2> . input_type = <val4>	<name2> .input_type is a string <val4> .
<name2> <name1> . http . cookie <name3> <name6> , <name5>	<name2> <name1> .http .cookie <name3> <name6> and <name5> into default name space .
<name4> <name3> . http . request <name6> ( <name1> , <name2> , <name5> , <name4> , <name3> )	<name4> <name3> .http .request <name6> <name1> , <name2> , <name5> , <name4> and <name3> into default name space .
<name1> <name5> . http . response <name2> ( <name6> , <name4> , <name3> , <name1> , HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )	<name1> <name5> .http .response <name2> <name6> , <name4> , <name3> , <name1> ,
<name3> <name5> . http . utils <name4> <name2> , <name1>	HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse into default name space . <name3> <name5> .http .utils <name4> <name2> and <name1> into default name space .
<name4> = [ <val5>   , <val3>   , <val6>   , <val2>   , <val1>   , 'UnreadablePostError'   , 'build_request_repr'   , 'HttpResponse'   , 'StreamingHttpResponse'   , 'HttpResponseRedirect'   , 'HttpResponsePermanentRedirect'   , 'HttpResponseNotModified'   , 'HttpResponseBadRequest'   , 'HttpResponseForbidden'   , 'HttpResponseNotFound'   , 'HttpResponseNotAllowed'   , 'HttpResponseGone'   , 'HttpResponseServerError'   , 'Http404'   , 'BadHeaderError'   , 'fix_location_header'   , 'JsonResponse'   , 'conditional_content_removal'   , ]	<name4> is a list of strings , <val5> , <val3> , <val6> , <val2> , <val1> ,
<name4> <name1> <name5> <name3>	<name4> <name1> <name5> <name3> into default name space .
<name6> <name5> . utils . encoding <name3> force_str	<name6> <name5> .utils .encoding <name3> force_st into default name space .
<name3> <name6> . utils <name2> <name5>	<name3> <name6> .utils <name2> <name5> into default name space .
<name3> <name2> . utils . six . moves <name1> <name5>	<name3> <name2> .utils .six .moves <name1> <name5> into default name space .
<name5> :	<name5> ,
<name1> . load ( str ( <val4>   ) )	call the <name1> .load method with the <val4> converted to string as an argument .
<name2> = <name1>	<name2> is a boolean <name1> .
except <name1> . CookieError :	if <name1> .CookieError exception is caught ,
<name3> = <name4>	<name3> is boolean <name4> .
<name3> <name5> <name2> <name6> :	<name3> <name5> <name2> <name6> are boolean True ,
<name3> = <name4> . <name3>	substitute <name4> .SimpleCookie for <name3> .
else :	if not ,
<name4> = <name2> . <name4>	substitute <name2> .Morsel for <name4> .
<name5> <name2> ( <name3> . <name2> ) :	derive <name5> <name2> from the base <name5> <name3> .SimpleCookie .
<name4> not <name3> :	<name4> <name3> is boolean False ,
def <name6> ( <name5> , <name2> ) :	define method <name6> with <name5> class instance and <name2> as arguments .
           <name3> , <name5> = super ( <name4> , self ) . <name6> ( <name3> )	from the base class of the class <name4> call the <name6> method with <name3> as the argument , store the result in the <name3> and <name5> , respectively .
\ <name3> = <name3> . <name5> ( <val1> , <val6> ) . <name5> ( <val2> , <val4> ) \	\ in <name3> , <name5> all the occurrences of unicode character <val4> with <val2> character and <val6> with <val1> characters . \
<name2> <name1> , <name6>	<name2> <name1> and <name6> as a tuple .
<name2> not <name3> :	<name2> <name3> is False ,
def <name3> ( <name4> , <name6> ) :	define the method <name3> with <name4> class instance and <name6> as arguments .
<name3> . bad_cookies = <name5> ( )	<name3> .bad_cookies is an empty <name5> .
<name4> <name5> . PY2 <name6> isinstance ( <name1> , <name5> . text_type ) :	<name4> <name5> .PY2 is true <name6> <name1> is an instance of the type <name5> .text_type .
<name1> = <name6> ( <name1> )	call the function <name6> with raw data as an argument and substitute it for <name1> .
super ( <name6> , self ) . <name1> ( <name2> )	from the base class of the <name6> class call the method <name1> with <name2> as argument .
<name4> <name2> in <name1> . bad_cookies :	<name4> every <name2> is <name1> .bad_cookies ,
del <name5> [ <name1> ]	delete <name5> entry under the <name1> <name1> .
def <name5> ( <name1> , <name4> , <name6> , <name3> ) :	define protected method <name5> with <name1> class instance , <name4> , <name6> and <name3> as arguments .
<name5> = <name1> ( <name5> )	evaluate the function <name1> with <name5> as the argument , substitute it for <name5> .
<name3> :	<name3> ,
<name2> = <name4> . <name5> ( <name3> , <name1> ( ) )	<name5> the value under the <name3> of the dictionary <name4> , if <name3> does not exists return evaluated result of the function <name1> , substitute it for <name2> .
<name3> . set ( <name4> , <name6> , <name5> )	call the <name3> .set method with the <name4> , <name6> , <name5> as the arguments .
<name4> . __setitem__ ( <name3> , <name2> , <name6> )	call the private <name4> .__setitem__ method with <name3> class instance , <name2> and <name6> as arguments .
except <name1> . CookieError :	if <name1> .CookieError exception is raised .
<name5> <name6> hasattr ( <name3> , <val1>   ) :	<name5> <name3> does <name6> have <val1> attribute ,
     <name6> . bad_cookies = <name5> ( )	<name6> .bad_cookies is an empty <name5> .
<name6> . bad_cookies . <name1> ( <name3> )	<name1> <name3> to the <name6> .bad_cookies set .
<name5> . __setitem__ ( <name6> , <name3> , <name2> . Morsel ( ) )	call the private <name5> .__setitem__ method with <name6> class instance , <name3> and result of the function <name2> .Morsel ( ) as arguments .
def <name3> ( <name2> ) :	define the function <name3> with <name2> as the argument .
<name4> <name5> == ''   :	<name4> <name5> is an empty string ,
<name3> { }	<name3> an empty dictionary .
<name3> <name6> isinstance ( <name2> , <name5> . BaseCookie ) :	<name3> <name2> is <name6> an instance of <name5> .BaseCookie ,
<name4> :	<name4> ,
<name1> = <name6> ( )	<name1> is an instance of the class <name6> .
<name4> . <name2> ( <name1> )	call the <name2> method on the <name4> class instance , with the <name1> argument .
except <name5> . CookieError :	if <name5> .CookieError exception is raised ,
<name1> { }	<name1> an empty dictionary .
else :	if not ,
<name6> = <name1>	substitute <name1> for <name6> .
<name6> = { }	<name6> is an empty dictionary .
<name6> <name4> <name5> <name1> . keys ( ) :	<name6> every <name4> <name5> return value of the method <name1> .keys call ,
<name1> [ <name6> ] = <name5> . <name2> ( <name6> ) . <name3>	<name2> the <name3> filed from the return <name3> of the call to the <name5> .key with the argument <name6> , add the <name3> to the <name1> under the <name6> <name6> .
<name1> <name3>	<name1> <name3> .
<name1> <name4> <name2> <name5>	<name1> <name4> <name2> <name5> into default name space .
<name1> <name3>	<name1> module <name3> .
<name1> <name5>	<name1> module <name5> .
<name5> <name3>	<name5> module <name3> .
<name4> <name3>	<name4> module <name3> .
<name6> <name3> . conf <name5> <name1>	<name6> <name3> .conf <name5> <name1> into default name space .
<name2> <name3> . core . exceptions <name5> SuspiciousMultipartForm	<name2> <name3> .core .exceptions <name5> SuspiciousMultipartF into default name space .
<name6> <name1> . utils . datastructures <name4> <name2>	<name6> <name1> .utils .datastructures <name4> <name2> into default name space .
<name3> <name1> . utils . encoding <name4> <name6>	<name3> <name1> .utils .encoding <name4> <name6> into default name space .
<name2> <name6> . utils <name1> <name5>	<name2> <name6> .utils <name1> <name5> into default name space .
<name3> <name1> . utils . text <name6> <name4>	<name3> <name1> .utils .text <name6> <name4> into default name space .
<name2> <name4> . core . files . uploadhandler <name1> <name5> , <name3> , <name6>	<name2> <name4> .core .files .uploadhandler <name1> <name5> , <name3> and <name6> into default name space .
<name2> = ( <val4>   , <val5>   , <val3>   )	<name2> is an tuple with 3 elements : strings <val4> , <val5> and <val3> .
<name3> <name5> ( <name6> ) :	derive the <name3> <name5> from the <name6> base <name3> .
pass	do nothing .
<name4> <name5> ( <name1> ) :	derive the <name4> <name5> from the <name1> base <name4> .
pass	do nothing .
<name5> = <val4>	<name5> is a string <val4> .
"<name3> = ""file"""	"<name3> is a file "" ."
"<name6> = ""field"""	"<name6> is a field "" ."
<name6> = <name3> <name5> <name4> . PY2 else <name2> . Error	<name5> <name4> .PY2 is true , <name6> is <name3> , <name5> not , <name6> is <name2> .Error .
<name6> <name5> ( <name4> ) :	derive the <name6> <name5> from the <name4> base <name6> .
def <name2> ( <name6> , <name3> , <name5> , <name4> , <name1> = <name2> ) :	define the method <name2> wiht 5 arguments : <name6> , <name3> , <name5> , <name4> and <name1> set to <name2> .
content_type = <name1> . <name5> ( <val4>   , <name1> . <name5> ( 'CONTENT_TYPE'   , ''   ) )	<name5> the value from <name1> dictionary , under the <val4> key , if the key doesnt exist ,
<name2> not <name5> . startswith ( <val6>   ) :	return the value under the 'CONTENT_TYPE' of the META dictionary , <name2> it doesnt exist return an empty string , substitute the result for <name5> . <name2> <name5> doesnt start with string <val6> ,
<name6> <name2> ( <val4>   % <name5> )	<name6> an <name2> with an argument string <val4> , where '%s' is replaced with <name5> .
ctypes , opts = <name5> ( content_type . encode ( <val2>   ) )	call the method boundary with an argument string <val2> , use the result to call to the <name5> function ,
<name3> = <name1> . <name2> ( <val6>   )	assign the result to ctypes and <name1> . <name2> the value under the <val6> key of the <name1> dictionary , substitute it for <name3> .
<name1> not <name2> <name5> not <name3> . valid_boundary ( <name2> ) :	<name1> <name2> is false <name5> return value of the method <name3> .valid_boundary called with an argument <name2> evaluates to false ,
<name2> <name5> ( <val1>   % <name4> )	<name2> an <name5> with an argument string <val1> is replaced with <name4> .
<name5> :	<name5> ,
<name6> = int ( <name3> . get ( <val4>   , <name3> . get ( <val5>   , <val1> ) ) )	convert value under the <val4> key of the <name3> dictionary to an integer of base of value under the <val5> key of <name3> dictionary , if the key doesnt exists use <val1> as the base , substitute the result for <name6> .
except ( <name2> , <name5> ) :	if <name2> or <name5> are caught ,
<name6> = <val4>	<name6> is integer <val4> .
<name2> <name5> <  <val3> :	<name2> <name5> is lesser than integer <val3> ,
<name4> <name2> ( <val1> % <name3> )	<name4> an <name2> with an argument string <val1> , where '%r' is replaced with <name3> .
<name4> isinstance ( <name5> , <name6> . text_type ) :	<name4> <name5> is an instance of <name6> .text_type class ,
<name6> = <name6> . encode ( <val4>   )	call the method <name6> .encode with an argument string <val4> , substitute the result for <name6> .
<name1> . _boundary = <name6>	substitute <name6> for <name1> ._boundary .
<name1> . _input_data = <name5>	substitute <name5> for <name1> ._input_data .
<name4> = [ <name5> . chunk_size <name3> <name5> <name1> <name6> <name2> <name5> . chunk_size ]	<name3> every <name5> <name1> <name6> <name2> <name5> .chunk_size is true , append <name5> .chunk_size to a list , substitute the result <name3> <name4> .
self . _chunk_size = min ( [ <val6> ** <val5> - <val3> ] + <name2> )	bring integer <val6> to the power of <val5> , subtract the result by <val3> , put the result into a list , append <name2> to it ,
<name2> . _meta = <name4>	substitute minimal element of the resulting list for <name2> ._chunk_size . substitute <name4> for <name2> ._meta .
<name6> . _encoding = <name5> or <name3> . DEFAULT_CHARSET	if <name5> is true , substitute it for <name6> ._encoding , if not substitute <name3> .DEFAULT_CHARSET for <name6> ._encoding .
<name4> . _content_length = <name3>	substitute <name3> for <name4> ._content_length .
<name3> . <name2> = upload_handlers	substitute <name2> for <name3> .__upload_handlers .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name1> <name2> . http <name3> <name6>	<name1> <name2> .http <name3> <name6> into default namespace .
<name3> = <name1> . _encoding	substitute <name1> ._encoding for <name3> .
<name1> = <name6> . _upload_handlers	substitute <name6> ._upload_handlers for <name1> .
<name5> <name3> . _content_length == <val6> :	<name5> <name3> ._content_length equals integer <val6> ,
<name4> <name6> ( ''   , <name3> = <name5> . _encoding ) , <name2> ( )	instantiate <name6> class with 2 arguments : an empty string and <name3> set to <name5> ._encoding , instantiate a class <name2> , <name4> them .
<name5> <name2> <name1> <name3> :	<name5> every <name2> <name1> <name3> ,
result = <name2> . handle_raw_input ( <name1> . _input_data , <name1> . _meta , <name1> . _content_length , <name1> . _boundary , encoding )	call the method <name2> .handle_raw_input with 5 arguments : <name1> ._input_data , <name1> ._meta , <name1> ._content_length , <name1> ._boundary ,
<name4> <name5> <name1> <name3> <name6> :	and encoding , substitute the <name5> for <name5> . <name4> <name5> <name1> <name3> <name6> ,
<name1> <name2> [ 0 ] , <name2> [ 1 ]	<name1> first and second element of <name2> .
<name3> . _post = <name1> ( ''   , <name6> = <name5> )	<name3> ._post is an instance of <name1> class , created with an empty string and <name6> set to boolean <name5> .
<name6> . _files = <name3> ( )	<name6> ._files is an instance of <name3> class .
stream = <name5> ( <name4> ( <name6> . _input_data , <name6> . _chunk_size ) )	instantiate class <name4> with 2 arguments : <name6> ._input_data and <name6> ._chunk_size , use it to instantiate <name5> class ,
<name4> = <name2>	assign the handle to stream . <name4> is <name2> .
<name6> = [ 0 ] * len ( <name2> )	<name6> is a list containing length of <name2> number of zeros .
<name3> :	<name3> ,
<name6> <name1> , <name2> , <name4> <name3> <name5> ( <name6> , <name1> . _boundary ) :	call the <name5> object with <name6> and <name1> ._boundary , <name6> every <name1> , <name2> and <name4> <name3> return value ,
<name1> <name3> :	<name1> <name3> is true ,
     <name4> . handle_file_complete ( <name5> , <name2> )	call the method <name4> .handle_file_complete with arguments <name5> , <name2> .
<name2> = <name6>	<name2> is <name6> .
<name1> :	<name1> ,
<name2> = <name6> [ <val5>   ] [ 1 ]	get the value under the <val5> key of the <name6> dictionary , substitute second element of it for <name2> .
<name2> = <name1> [ <val4>   ] . <name3> ( )	get the value under the <val4> key of the <name1> dictionary , <name3> it of whitespaces , substitute the result for <name2> .
except ( <name1> , <name6> , <name4> ) :	if <name1> , <name6> and <name4> exception is caught ,
continue	skip this loop iteration ,
<name3> = <name2> . <name6> ( <val1>   )	<name6> the value under the <val1> key of the disposition <name2> , substitute it for <name3> .
<name1> <name4> <name5> <name2> <name3> :	<name1> <name4> <name5> <name2> <name3> ,
<name6> = <name6> [ 0 ] . <name4> ( )	<name4> of the whitespaces first element of <name6> , substitute the result for <name6> .
<name5> = <name6> ( <name5> , <name2> , <name4> = <val1>   )	call the function <name6> with 3 arguments : <name5> , <name2> and <name4> as a string <val1> , substitute the result for <name5> .
<name5> <name6> == <name1> :	<name5> <name6> equals <name1> ,
   <name2> <name3> == <val5>   :	<name2> <name3> equals a string <val5> ,
     <name5> = <name1> . read ( )	call the method <name1> .read , substitute the result for <name5> .
<name3> :	<name3> ,
         <name3> = <name1> . b64decode ( <name2> )	call the function <name1> .b64decode with an argument <name2> , substitute the result for <name3> .
except <name5> :	if <name5> exception is caught ,
         <name6> = <name5>	substitute <name5> for <name6> .
else :	if not ,
     <name1> = <name2> . read ( )	call the method <name2> .read , substitute the result for <name1> .
<name2> . _post . appendlist ( <name5> , <name4> ( data , encoding , errors = 'replace'   ) )	call the method <name2> ._post .appendlist with 2 arguments : <name5> and result of the function <name4> called with 3 arguments :
elif <name2> == <name1> :	data , encoding and errors as a string 'replace' . otherwise if <name2> equals <name1> ,
   <name4> = <name5> . <name1> ( <val2>   )	<name1> the value under the <val2> key of the <name5> dictionary , substitute it for <name4> .
<name6> not <name4> :	<name6> <name4> is false ,
     continue	skip this loop execution .
<name3> = <name1> ( <name3> , <name5> , <name6> = <val4>   )	call the function <name1> with 3 arguments : <name3> , <name5> and <name6> set to string <val4> ,
<name2> = <name1> . IE_sanitize ( <name4> ( <name2> ) )	substitute the result for <name2> . call the function <name4> with an argument <name2> , use the result as an argument for the call to the <name1> .IE_sanitize ,
<name1> , <name4> = <name3> . <name5> ( <val2>   , ( ''   , { }  ) )	method , substitute the result for file_name . <name5> the value under the <val2> of the <name3> dictionary , if it exists assign it to <name1> , <name4> ,
<name6> = <name6> . <name1> ( )	if not , <name6> is an empty string and content_type_extra is an empty dictionary . <name1> the <name6> of the whitespaces , substitute it for <name6> .
<name6> = <name2> . <name3> ( <val1>   )	<name3> the value under the <val1> key of the <name2> dictionary , substitute it for <name6> .
<name3> :	<name3> ,
     <name2> = int ( <name4> . get ( <val6>   ) [ 0 ] )	convert to an integer first element of the value under the <val6> key of the <name4> dictionary , substitute it for <name2> .
except ( <name5> , <name1> , <name6> ) :	if <name5> , <name1> or <name6> exception is caught ,
     <name4> = <name6>	<name4> is <name6> .
<name2> = [ 0 ] * len ( <name1> )	<name2> is a list containing length of <name1> number of zeros .
<name6> :	<name6> ,
     <name6> <name4> <name5> <name2> :	<name6> every <name4> <name5> <name2> ,
         <name5> :	<name5> ,
             <name6> . new_file ( <name5> , <name4> , <name3> , <name2> , <name1> , <name6> )	call the method <name6> .new_file with 6 arguments : <name5> , <name4> , <name3> , <name2> , <name1> and <name6> .
except <name3> :	if <name3> exception is caught .
             <name1>	<name1> the loop execution .
<name5> <name4> <name1> <name2> :	<name5> every <name4> <name1> <name2> ,
         <name3> <name4> == <val1>   :	<name3> <name4> equals string <val1> ,
               <name2> = len ( <name6> ) % <val3>	calculate length of <name6> modulo integer <val3> , substitute the result for <name2> .
<name2> <name1> :	<name2> <name1> is true ,
                 <name5> = <name3> . read ( <val4> - <name1> )	call the method <name3> .read with an argument : <name1> subtracted from integer <val4> , substitute the result for <name5> .
<name2> += <name6>	increment <name2> by <name6> .
<name3> :	<name3> ,
                 <name1> = <name6> . b64decode ( <name1> )	call the method <name6> .b64decode with an argument <name1> , substitute the result for <name1> .
except <name3> as <name2> :	if <name3> , renamed to <name2> , exception is caught ,
                   <name2> = <val3> % <name5>	<name2> is a string <val3> , where '%r' is replace with <name5> .
<name3> . reraise ( <name6> , <name6> ( <name1> ) , sys . exc_info ( ) [ 2 ] )	call the method <name3> .reraise with 3 arguments : <name6> , <name6> created with <name1> ,
<name1> <name3> , <name5> <name6> enumerate ( <name2> ) :	and third element of the result of the function sys .exc_info . <name1> every <name3> and <name5> <name6> enumerated iterable <name2> ,
             <name4> = len ( <name3> )	substitute length of <name3> for <name4> .
<name1> = <name4> . receive_data_chunk ( <name1> , <name5> [ <name2> ] )	call the method <name4> .receive_data_chunk with 2 arguments : <name1> and <name2> - th element of <name5> , substitute the result for <name1> .
<name4> [ <name3> ] += <name1>	increment <name3> - th element of <name4> by <name1> .
<name4> <name6> <name1> <name2> :	<name4> <name6> <name1> <name2> ,
                   <name5>	<name5> the loop execution .
except <name1> :	if <name1> exception is caught ,
     <name2> . _close_files ( )	call the method <name2> ._close_files .
<name2> ( <name4> )	call the function <name2> with an argument <name4> .
else :	if not ,
       <name5> = <name3>	substitute <name3> for <name5> .
else :	if not ,
   <name3> ( <name5> )	call the function <name3> with an argument <name5> .
except <name6> as <name1> :	if <name6> , renamed to <name1> , exception is caught ,
<name2> . _close_files ( )	call the method <name2> ._close_files .
<name1> not <name6> . connection_reset :	<name1> <name6> .connection_reset is false ,
<name5> ( <name3> . _input_data )	call the function <name5> with an argument <name3> ._input_data .
else :	if not ,
<name1> ( <name6> . _input_data )	call the function <name1> with an argument <name6> ._input_data .
<name2> <name6> <name5> <name1> :	<name2> every <name6> <name5> <name1> ,
<name6> = <name4> . upload_complete ( )	call the method <name4> .upload_complete , substitute the result for <name6> .
<name6> <name4> :	<name6> <name4> is true ,
<name5>	<name5> the loop execution .
<name5> <name4> . _post , <name4> . _files	<name5> <name4> ._post and <name4> ._files .
def <name6> ( <name2> , <name4> , <name3> ) :	define the method <name6> with 3 arguments : <name2> , <name4> and <name3> .
<name3> <name6> , <name1> <name5> enumerate ( <name2> . _upload_handlers ) :	<name3> every <name6> and <name1> <name5> enumerated iterator <name2> ._upload_handlers ,
<name6> = <name3> . file_complete ( <name2> [ <name5> ] )	call the method <name3> .file_complete with <name5> - th element of <name2> as an argument , substitute the result for <name6> .
<name4> <name2> :	<name4> <name2> is true ,
<name3> . _files . appendlist ( <name5> ( <name1> , <name3> . _encoding , <name2> = <val6>   ) , file_obj )	call the function <name5> with 3 arguments : <name1> , <name3> ._encoding and <name2> as a string <val6> ,
<name1>	use the result and file_obj as arguments for the call to the method self ._files .appendlist . <name1> the loop execution .
def <name1> ( <name6> , <name4> ) :	define the method <name1> with arguments <name6> and <name4> .
"\ return <name1> and <name1> [ <name1> . rfind ( ""\\\\""  ) + 1 : ] . strip ( ) \"	"\ call the method <name1> .rfind with an argument string ""\\\\"" , increment the result by one , \"
def <name3> ( <name1> ) :	slice the filename from the previous result as start index to the end , strip it of white spaces from both ends , if the result is not an empty string and filename is not an empty string , return boolean True , otherwise return boolean False . define the method <name3> with an argument <name1> .
<name3> <name5> <name2> <name4> . _upload_handlers :	<name3> every <name5> <name2> <name4> ._upload_handlers ,
<name1> hasattr ( <name3> , <val4>   ) :	<name1> <name3> has an attribute <val4> ,
<name2> . file . close ( )	call the method <name2> .file .close .
<name3> <name6> ( <name2> . Iterator ) :	derive the <name3> <name6> from the <name2> .Iterator base <name3> .
def <name2> ( <name3> , <name4> , <name1> = <name5> ) :	define the method <name2> with 3 arguments : <name3> , <name4> and <name1> set to <name5> .
<name5> . _producer = <name3>	substitute <name3> for <name5> ._producer .
<name2> . _empty = <name4>	<name2> ._empty is boolean <name4> .
<name6> . _leftover = b ''	<name6> ._leftover is an empty string .
<name4> . <name5> = <name5>	substitute <name5> for <name4> ._length .
<name4> . position = <val6>	<name4> .position is an integer <val6> .
<name2> . _remaining = <name4>	substitute <name4> for <name2> ._remaining .
<name2> . _unget_history = [ ]	<name2> ._unget_history is an empty list .
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name4> <name3> . position	<name4> <name3> .position .
def <name3> ( <name6> , <name1> = <name2> ) :	define the method <name3> with arguments <name6> and <name1> set to <name2> .
def <name3> ( ) :	define the function <name3> .
<name6> = <name1> . _remaining <name2> <name5> <name4> <name3> else <name5>	<name2> <name5> <name4> <name3> substitute <name1> ._remaining for <name6> , <name2> not , substitute <name5> for <name6> .
<name5> <name6> <name1> <name3> :	<name5> <name6> <name1> <name3> ,
<name2> b ''   . <name5> ( <name6> )	<name5> <name6> into a bytes string , <name2> the result as the return value of the generator .
<name3>	<name3> nothing .
<name4> <name6> != <val3> :	<name4> <name6> is not equal to integer <val3> ,
<name2> <name3> >  <val6> , <val4>	if <name3> is not greater than <val6> , <name2> an error with the message string <val4> .
<name6> = <name1> ( <name3> )	get the <name1> element of iterable <name3> , substitute it for <name6> .
<name5> = <name2> [ : <name3> ]	create list of first <name3> elements of <name2> , substitute it for <name5> .
<name5> . unget ( <name3> [ <name1> : ] )	call the method <name5> .unget with list containing first <name1> elements of <name3> as an argument .
<name5> -= len ( <name1> )	decrement <name5> by length of <name1> .
<name3> <name4>	<name3> <name4> as result of the generator .
<name5> = b ''   . <name6> ( <name3> ( ) )	<name6> result of the <name3> function into a bytes string , substitute it for <name5> .
<name5> <name1>	<name5> <name1> .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name5> <name4> . _leftover :	<name5> <name4> ._leftover is true ,
<name5> = <name1> . _leftover	substitute <name1> ._leftover for <name5> .
<name2> . _leftover = b ''	<name2> ._leftover is an empty string .
else :	if not ,
<name3> = <name4> ( <name1> . _producer )	get the <name4> element of the <name1> ._producer iterable , substitute it for <name3> .
<name1> . _unget_history = [ ]	<name1> ._unget_history is an empty list .
<name2> . position += len ( <name1> )	increment <name2> .position by length of <name1> .
<name5> <name2>	<name5> <name2> .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name4> . _producer = [ ]	<name4> ._producer is an empty list .
def __iter__ ( <name4> ) :	define the method _iter with an argument <name4> .
<name4> <name1>	<name4> <name1> .
def <name1> ( <name5> , <name6> ) :	define the method <name1> with arguments <name5> and <name6> .
<name5> not <name3> :	<name5> <name3> is false ,
<name5>	<name5> nothing .
<name2> . _update_unget_history ( len ( <name5> ) )	call the method <name2> ._update_unget_history with length of <name5> as an argument .
<name5> . position -= len ( <name6> )	decrement <name5> .position by length of <name6> .
<name3> . _leftover = b ''   . <name6> ( [ <name1> , <name3> . _leftover ] )	<name6> <name1> and <name3> ._leftover into a <name1> string , substitute it for <name3> ._leftover .
def <name1> ( <name5> , <name6> ) :	define the method <name1> with arguments <name5> and <name6> .
<name1> . _unget_history = [ <name2> ] + <name1> . _unget_history [ : <val6> ]	append first <val6> elements of <name1> ._unget_history to list containing <name2> , substitute the result for <name1> ._unget_history .
number_equal = len ( [ <name2> <name4> <name2> <name1> <name6> . _unget_history <name3> <name2> == <name5> ] )	append <name2> to a list <name4> <name2> <name1> <name6> ._unget_history , <name3> <name2> is equal to <name5> ,
<name3> <name2> >  <val5> :	substitute the length of the resulting list for <name2> . <name3> <name2> is greater than integer <val5> ,
"<name2> <name5> ( <val6> "" normal uploaded files. Check for malicious upload activity;"" "" if there is none, report this to the Django developers."" )"	<name2> <name5> exception with an argument string , <val6>
<name6> <name2> ( <name1> . Iterator ) :	normal uploaded files . Check for malicious upload activity ; if there is none , report this to the Django developers . . derive the <name6> <name2> from the <name1> .Iterator base <name6> .
def <name2> ( <name4> , <name6> , <name1> = <val5> * <val3> ) :	define the method <name2> with arguments <name4> , <name6> and <name1> set to integer <val5> multiplied by integer <val3> .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .flo .
<name6> . <name2> = <name2>	substitute <name2> for <name6> .chunk_size .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name3> :	<name3> ,
<name3> = <name1> . flo . read ( <name1> . chunk_size )	call the method <name1> .flo .read with an argument <name1> .chunk_size , substitute the result for <name3> .
except <name2> :	if <name2> exception is caught ,
<name5> <name6> ( )	<name5> an <name6> exception .
<name6> <name3> :	<name6> <name3> is true ,
<name1> <name6>	<name1> <name6> .
else :	if not ,
<name3> <name4> ( )	<name3> an <name4> exception .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name4> <name2>	<name4> <name2> .
<name5> <name6> ( <name3> . Iterator ) :	derive the <name5> <name6> from the <name3> .Iterator base <name5> .
def <name6> ( <name4> , <name1> , <name5> ) :	define the method <name6> with arguments <name4> , <name1> and <name5> .
<name4> . _stream = <name5>	substitute <name5> for <name4> ._stream .
<name5> . _boundary = <name6>	substitute <name6> for <name5> .boundary .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name2> <name3>	<name2> <name3> .
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name3> :	<name3> ,
<name2> <name5> ( <name3> ( <name6> . _stream , <name6> . _boundary ) )	instantiate class <name3> with 2 arguments : <name6> ._stream and <name6> ._boundary , use it to instantiate <name5> class , <name2> it .
except <name6> :	if <name6> exception is caught ,
<name3> <name2> ( )	<name3> an <name2> .
<name1> <name3> ( <name6> . Iterator ) :	derive the <name1> <name3> from the <name6> .Iterator base <name1> .
def <name4> ( <name5> , <name1> , <name2> ) :	define the method <name4> with arguments <name5> , <name1> and <name2> .
<name5> . _stream = <name4>	substitute <name4> for <name5> ._stream .
<name1> . _boundary = <name4>	substitute <name4> for <name1> ._boundary .
<name2> . _done = <name4>	<name2> ._done is boolean <name4> .
<name4> . _rollback = len ( <name5> ) + <val3>	increment length of <name5> by integer <val3> , substitute the result for <name4> ._rollback .
<name4> = <name5> . _stream . read ( <val1> )	call the method <name5> ._stream .read with an argument integer <val1> , substitute the result for <name4> .
<name2> not <name5> :	<name2> <name5> is false ,
<name3> <name6> ( )	<name3> an <name6> exception ,
<name2> . _stream . unget ( <name5> )	call the method <name2> ._stream .unget with an argument <name5> .
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name5> <name1>	<name5> <name1> .
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name5> <name2> . _done :	<name5> <name2> ._done is true ,
<name5> <name6> ( )	<name5> an <name6> exception ,
<name6> = <name3> . _stream	substitute <name3> ._stream for <name6> .
<name1> = <name2> . _rollback	substitute <name2> ._rollback for <name1> .
<name5> = <val3>	<name5> is integer <val3> .
<name2> = [ ]	<name2> is an empty list .
<name1> <name3> <name5> <name2> :	<name1> every <name3> <name5> <name2> ,
<name5> += len ( <name1> )	increment <name5> by length of <name1> .
<name4> . <name1> ( <name5> )	<name1> <name5> to <name4> .
<name2> <name3> >  <name4> :	<name2> <name3> is greater than <name4> ,
<name4>	<name4> the loop execution .
<name2> not <name3> :	<name2> <name3> is false ,
<name4>	<name4> the loop execution .
else :	if not ,
<name6> . _done = <name2>	<name6> ._done is boolean <name2> .
<name5> not <name4> :	<name5> <name4> is false ,
<name3> <name5> ( )	<name3> an <name5> exception .
<name4> = b ''   . <name6> ( <name2> )	<name6> <name2> into bytes string , substitute it for <name4> .
boundary = <name1> . _find_boundary ( <name3> , len ( <name3> ) <  <name1> . _rollback )	call the method <name1> ._find_boundary with 2 arguments : <name3> and boolean if length of chunks is lesser than <name1> ._rollback ,
<name6> <name2> :	or boolean False <name6> not , substitute the result for <name2> . <name6> <name2> is true ,
<name1> , <name3> = <name5>	substitute elements of tuple <name5> to <name1> and <name3> , respectively .
<name6> . unget ( <name2> [ <name5> : ] )	call the method <name6> .unget with elements of list <name2> from the index <name5> to the end .
<name3> . _done = <name2>	<name3> ._done is boolean <name2> .
<name1> <name3> [ : <name4> ]	<name1> first <name4> elements of list <name3> .
else :	if not ,
<name3> <name5> <name1> [ : - <name2> ] :	slice <name1> list to get the last <name2> elements , <name3> the new list is <name5> empty ,
<name1> . _done = <name3>	<name1> ._done is boolean <name3> .
<name2> <name5>	<name2> <name5> .
else :	if not ,
<name2> . unget ( <name5> [ - <name6> : ] )	call the method <name2> .unget with last <name6> elements of <name5> as an argument .
<name5> <name1> [ : - <name6> ]	<name5> last <name6> elements of <name1> .
def <name6> ( <name4> , <name1> , <name3> = <name5> ) :	define the method <name6> with an arguments <name4> , <name1> and <name3> set to boolean <name5> .
<name2> = <name6> . find ( <name1> . _boundary )	call the method <name6> .find with an argument <name1> ._boundary , substitute the result for <name2> .
<name5> <name1> <  <val6> :	<name5> <name1> is lesser than integer <val6> ,
<name1> <name4>	<name1> <name4> .
else :	if not ,
<name3> = <name4>	substitute <name4> for <name3> .
<name2> = <name1> + len ( <name4> . _boundary )	sum <name1> and length of <name4> ._boundary , substitute the result for <name2> .
<name6> = max ( <val2> , <name4> - 1 )	substitute greater element between integer <val2> and <name4> decremented by one for <name6> .
\ if <name1> [ <name2> : <name2> + 1 ] == b '\\n'   : \	element of <name1> at the index <name2> equals to newline bytes character .
<name3> -= 1	decrement <name3> by one .
<name6> = max ( <val2> , <name5> - 1 )	substitute greater element between integer <val2> and <name5> decremented by one for <name6> .
\ if <name5> [ <name1> : <name1> + 1 ] == b '\\r'   : \	element of <name5> at the index <name1> equals to carriage return bytes character .
<name1> -= 1	decrement <name1> by one .
<name6> <name1> , <name5>	<name6> <name1> ans <name5> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name5> = <name3>	<name5> is <name3> .
<name2> :	<name2> ,
<name6> = iter ( <name1> )	<name6> is <name6> created out of <name1> .
except <name3> :	if <name3> exception is caught ,
<name5> = <name1> ( <name4> , <val3> )	<name5> is an instance of <name1> class , created with arguments : <name4> and integer <val3> .
<name1> <name4> <name2> <name6> :	<name1> <name4> <name2> <name6> ,
<name5> <name4> ( <val3>   )	<name5> an <name4> with an argument string <val3> .
<name6> <name4> <name5> <name2> :	<name6> every <name4> <name5> <name2> ,
pass	do nothing .
def <name3> ( <name2> , <name4> ) :	define the function <name3> with arguments <name2> and <name4> .
<name4> = <name3> . read ( <name6> )	call the method <name3> .read with an argument <name6> , substitute the result for <name4> .
\ <name1> = <name5> . find ( b <val6>   ) \	\ call the method <name5> .find with an argument bytes string <val6> , substitute the result for <name1> . \
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name5> , <name3> = <name4> ( <name6> )	call the function <name4> with an argument <name6> , substitute the result for <name5> and <name3> , respectively .
<name5> :	<name5> ,
<name2> , <name1> = <name6> . <name3> ( <val5>   , 1 )	<name3> into two parts string <name6> at character <val5> , substitute the parts for <name2> and <name1> , respectively .
except <name2> :	if <name2> exception is caught ,
<name6> <name1> ( <val2> % <name3> )	<name6> an <name1> with an argument string <val2> , where '%s' is replaced with <name3> .
<name2> <name1> , ( <name3> , <name5> )	<name2> <name1> and tuple containing 2 elements <name3> and <name5> .
<name2> <name3> == - <val6> :	<name2> <name3> equals integer negative <val6> ,
<name3> . unget ( <name1> )	call the method <name3> .unget with an argument <name1> .
<name3> ( <name6> , { }  , <name2> )	<name3> tuple containing 3 elements : <name6> , an empty dictionary and <name2> .
<name5> = <name6> [ : <name4> ]	substitute first <name4> elements of <name6> list for <name5> .
<name6> . unget ( <name5> [ <name3> + <val1> : ] )	call the method <name6> .unget with list containing elements of <name5> list from the <name3> incremented by integer <val1> as a start index to the end as argument .
<name5> = <name3>	substitute <name3> for <name5> .
<name1> = { }	<name1> is an empty dictionary .
\ <name3> <name5> <name6> <name1> . <name4> ( b <val2>   ) : \	\ <name4> <name1> string at string <val2> , <name3> every <name5> <name6> result , \
<name6> :	<name6> ,
<name3> , ( <name2> , <name4> ) = <name6> ( <name5> )	call the method <name6> with an argument <name5> , assign the result to <name3> and tuple with 2 elements : <name2> and <name4> , respectively .
except <name1> :	if <name1> exception is caught ,
continue	skip this loop iteration .
<name3> <name4> == <val1>   :	<name3> <name4> equals a string <val1> ,
<name4> = <name2>	substitute <name2> for <name4> ,
<name4> <name5> . <name6> ( <val3>   ) :	<name6> the value under the <val3> key of the <name5> dictionary , <name4> it is true ,
<name1> = <name2>	substitute <name2> for <name1> .
<name2> [ <name5> ] = <name3> , <name6>	assign <name3> and <name6> to the <name3> under the <name5> key of the <name2> dictionary .
<name6> <name5> == <name2> :	<name6> <name5> equals to <name2> ,
<name6> . unget ( <name3> )	call the method <name6> .unget with an argument <name3> .
<name6> ( <name2> , <name1> , <name3> )	<name6> a tuple with 3 elements : <name2> , <name1> and <name3> .
<name5> <name3> ( <name2> ) :	derive the <name5> <name3> from the base <name5> <name2> .
def <name4> ( <name5> , <name2> , <name6> ) :	define the method <name4> with arguments <name5> , <name2> and <name6> .
<name3> . _stream = <name1>	substitute <name1> for <name3> ._stream .
<name4> . _separator = b <val2>   + <name3>	append <name3> to bytes string <val2> , substitute the result for <name4> ._separator .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name4> = <name1> ( <name3> . _stream , <name3> . _separator )	<name4> is an instance of <name1> class , created with <name3> ._stream and <name3> ._separator as arguments .
<name1> <name4> <name6> <name2> :	<name1> every <name4> <name6> <name2> ,
<name5> <name6> ( <name1> , <val4> )	call the function <name6> with 2 arguments : <name1> and integer <val4> , <name5> the result as the return value of the generator .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name2> = <name1> ( b <val4>   + <name5> )	append <name5> to bytes string <val4> , use it as an argument for the call to the function <name1> , substitute the result for <name2> .
key = <name4> . <name2> ( 0 ) . lower ( ) . <name1> ( <val6>   )	<name2> the first element from <name4> , convert it to lowercase , call the method <name1> on it , with string <val6> as an argument ,
<name3> = { }	substitute the result for key . <name3> is an empty dictionary .
<name5> <name3> <name2> <name6> :	<name5> every <name3> <name2> <name6> ,
<name6> = <name1> . find ( b <val5>   )	call the method <name1> .find with bytes string <val5> as an argument , substitute the result for <name6> .
<name6> <name4> >= <val1> :	<name6> <name4> is greater or equal to integer <val1> ,
name = <name5> [ : <name6> ] . <name1> ( ) . lower ( ) . decode ( 'ascii'   )	take the first <name6> elements of string <name5> , <name1> the whitespaces from the both sides , convert it to lowercase and apply on it the method ,
<name3> = <name4> [ <name1> + <val2> : ] . <name6> ( )	decode with an argument string 'ascii' , substitute the result for name . take elements of <name4> from index <name1> incremented by <val2> to the end , <name6> the result of the whitespaces , substitute it for <name3> .
<name1> = <name1> [ 1 : - 1 ]	strip <name1> of the first and last element .
<name1> [ <name5> ] = <name6>	substitute <name6> for the vale under the <name5> key of the <name1> dictionary .
<name1> <name5> , <name6>	<name1> <name5> and <name6> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name3> = [ ]	<name3> is an empty list .
<name4> <name2> [ : 1 ] == b <val6>   :	<name4> first element of <name2> is equal to bytes string <val6> ,
<name2> = <name2> [ 1 : ]	substitute <name2> without the first element for <name2> .
<name4> = <name2> . find ( b <val1>   )	call the method <name2> .find with an argument bytes string <val1> , substitute the result for <name4> .
<name6> = <name1> . find ( b <val2>   , <name6> + 1 )	is an even number , call the method <name1> .find with 2 arguments : bytes string <val2> and <name6> incremented by one , substitute the result for <name6> .
<name4> <name1> <  <val2> :	<name4> <name1> is lesser than integer <val2> ,
<name1> = len ( <name6> )	substitute length of <name6> for <name1> .
<name1> = <name6> [ : <name2> ]	substitute first <name2> elements of <name6> for <name1> .
<name1> . <name4> ( <name2> . <name5> ( ) )	<name5> <name2> of whitespaces and <name4> it to <name1> .
<name5> = <name5> [ <name3> : ]	substitute elements of <name5> from the <name3> index to <name3> for <name5> .
<name6> <name3>	<name6> <name3> .
<name1> <name5> <name4> <name3>	<name1> <name5> <name4> <name3> into default name space .
<name1> <name2>	<name1> module <name2> .
<name5> <name3>	<name5> module <name3> .
<name5> <name3>	<name5> module <name3> .
<name2> <name5>	<name2> module <name5> .
<name4> <name3> <name2> <name5>	<name4> <name3> <name2> <name5> into default name space .
<name6> <name4> <name2> <name1>	<name6> <name4> <name2> <name1> into default name space .
<name5> <name3> <name6> <name4>	<name5> <name3> <name6> <name4> into default name space .
<name1> <name2> . conf <name3> <name5>	<name1> <name2> .conf <name3> <name5> into default name space .
<name1> <name6> . core <name3> <name2>	<name1> <name6> .core <name3> <name2> into default name space .
<name6> <name4> . core . exceptions <name5> <name2> , <name1>	<name6> <name4> .core .exceptions <name5> <name2> and <name1> into default name space .
<name1> <name3> . core . files <name6> <name5>	<name1> <name3> .core .files <name6> <name5> into default name space .
<name3> <name1> . http . multipartparser <name5> <name2> , <name6>	<name3> <name1> .http .multipartparser <name5> <name2> and <name6> into default name space .
<name3> <name2> . utils <name1> <name6>	<name3> <name2> .utils <name1> <name6> into default name space .
<name6> <name4> . utils . datastructures <name5> <name2> , <name3>	<name6> <name4> .utils .datastructures <name5> <name2> and <name3> into default name space .
<name1> <name5> . utils . encoding <name4> <name2> , <name3> , <name6> , <name1>	<name1> <name5> .utils .encoding <name4> <name2> , <name3> , <name6> and <name1> into default name space .
<name6> <name5> . utils . six . moves . urllib . parse <name4> <name2> , <name1> , <name3> , <name6> , <name5>	<name6> <name5> .utils .six .moves .urllib .parse <name4> <name2> , <name1> , <name3> , <name6> and <name5> into default name space .
<name2> = <name6> ( )	<name2> is an instance of <name6> class .
<name3> = <name1> . <name6> ( r <val2> , <name1> . I )	<name6> the regex <val2> with an argument <name1> .I , substitute it for <name3> .
\ <name3> = re . <name6> ( r <val2> ) \	\ <name6> the regex <val2> , substitute it for <name3> . \
<name1> <name6> ( <name2> ) :	derive the <name1> <name6> from the base <name1> <name2> .
pass	do nothing .
<name6> <name5> ( <name2> ) :	derive the <name6> <name5> from the base <name6> <name2> .
pass	do nothing .
<name4> <name5> ( <name6> ) :	derive the <name4> <name5> from the <name6> base <name4> .
<name4> = <name3>	<name4> is <name3> .
<name3> = [ ]	<name3> is an empty list .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name4> . GET = <name5> ( <name3> = <name1> )	<name4> .GET is an instance of <name5> class created with an argument <name3> set to boolean <name1> .
<name3> . POST = <name2> ( <name4> = <name1> )	<name3> .POST is an instance of <name2> class created with an argument <name4> set to boolean <name1> .
<name3> . COOKIES = { }	<name3> .COOKIES is an empty dictionary .
<name3> . META = { }	<name3> .META is an empty dictionary .
<name6> . FILES = <name4> ( )	<name6> .FILES is an instance of <name4> class .
<name4> . path = ''	<name4> .path is an empty string .
<name1> . path_info = ''	<name1> .path_info is an empty string .
<name5> . method = <name3>	<name5> .method is <name3> .
<name5> . resolver_match = <name1>	<name5> .resolver_match is <name1> .
<name3> . _post_parse_error = <name4>	<name3> ._post_parse_error is boolen <name4> .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name1> <name4> ( <name5> )	call the method <name4> with an argument <name5> , <name1> the result .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name1> <name6> . USE_X_FORWARDED_HOST <name2> ( <val4>   <name3> <name5> . META ) :	<name1> <name6> .USE_X_FORWARDED_HOST is true <name2> <val4> is contained <name3> <name5> .META .
<name5> = <name6> . META [ <val3>   ]	get the value under the <val3> key of the <name6> .META dictionary , substitute the result for <name5> .
elif <val2>   <name1> <name4> . META :	if <val2> is contained <name1> <name4> .META ,
<name4> = <name3> . META [ <val6>   ]	substitute the value under the <val6> key of the <name3> .META dictionary , substitute it for <name4> .
else :	if not ,
<name6> = <name3> . META [ <val1>   ]	substitute the value under the <val1> key of the <name3> .META dictionary , substitute it for <name6> .
<name1> = str ( <name6> . META [ 'SERVER_PORT'   ] )	convert the value under the 'SERVER_NAME' key of the <name6> .META dictionary to a string , substitute result for <name1> .
<name1> <name6> != ( <val5>   <name1> <name3> . is_secure ( ) else '80'   ) :	<name1> return value of the <name3> .is_secure method is true and <name6> is not equal to string <val5> ,
<name6> = '%s:%s'   % ( <name6> , <name3> )	if return value of the self .is_secure is false and server port is not equal to string '80' , join <name6> and <name3> into a string , separated with ':' , substitute the result for <name6> .
<name3> <name5> . DEBUG :	<name3> <name5> .DEBUG is true ,
<name1> <name4>	<name1> <name4> .
<name4> , <name1> = <name6> ( <name3> )	call the function <name6> with an argument <name3> , assign the result to <name4> and <name1> , respectively .
<name6> <name3> <name4> <name1> ( <name3> , <name5> . ALLOWED_HOSTS ) :	<name6> <name3> is true <name4> return value of the function <name1> called with 2 arguments : <name3> <name4> <name5> .ALLOWED_HOSTS , evaluates to true ,
<name2> <name3>	<name2> <name3> .
else :	if not ,
<name3> = <val2> % <name6>	<name3> is a string <val2> , replace '%r' with <name6> .
<name6> <name2> :	<name6> <name2> is true ,
<name1> += <val4> % <name2>	append string <val4> to <name1> , where '%s' is replaced with <name2> .
else :	if not ,
<name6> += <val4>	append string <val4> to <name6> .
<name1> <name6> ( <name2> )	<name1> an <name6> exception with an argument <name2> .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
return '%s%s'   % ( <name6> . path , ( '?'   + <name5> ( <name6> . META . get ( <val4>   , ''   ) ) ) <name1> <name6> . META . get ( <val4>   , ''   ) else ''   )	<name1> the value under the <val4> key of the <name6> .META dictionary is true , call the function <name5> ,
<name4> <name3> ( <name6> , <name1> , <name2> = <name5> , <name4> = ''   , max_age = None ) :	called with value under the 'QUERY_STRING' <name1> of the <name6> .META dictionary and append it to string '?' , append the result th the <name6> .path converted into a string and return it , if the value under the 'QUERY_STRING' <name1> of the <name6> .META dictionary is false , return <name6> .path converted into a string . <name4> the method <name3> with 5 arguments : <name6> , <name1> , <name2> set to <name5> , <name4> as an empty string ,
<name1> :	<name1> ,
<name4> = <name5> . COOKIES [ <name1> ]	substitute value under the <name1> <name1> of the <name5> .COOKIES dictionary , substitute it for <name4> .
except <name6> :	if <name6> exception is caught ,
<name3> <name5> <name6> not <name2> :	<name3> <name5> <name6> true and <name2> <name6> false ,
<name2> <name4>	<name2> <name4> .
else :	if not ,
<name4>	<name4> an exception .
<name5> :	<name5> ,
value = <name1> . get_cookie_signer ( <name5> = <name2> + <name5> ) . <name4> ( cookie_value , max_age = max_age )	call the method <name1> .get_cookie_signer with an argument <name5> set to sum of <name2> and <name5> , call the method <name4> on the result ,
except <name1> . BadSignature :	with arguments cookie_value and max_age set to max_age . if <name1> .BadSignature exception is caught ,
<name1> <name3> <name2> not <name6> :	<name1> <name3> <name2> true and <name6> <name2> false ,
<name3> <name5>	<name3> <name5> .
else :	if not ,
<name4>	<name4> an exception .
<name6> <name2>	<name6> <name2> .
def <name1> ( <name3> , <name2> = <name5> ) :	define the method <name1> with an arguments <name3> and <name2> set to <name5> .
<name6> <name5> <name1> <name2> :	<name6> <name5> <name1> <name2> ,
<name5> = '//%s'   % <name2> . get_full_path ( )	call the method <name2> .get_full_path , append the result to string '//' , substitute it for <name5> .
<name4> = <name2> ( <name1> )	call the function <name2> with an argument <name1> , substitute the result for <name4> .
<name5> <name2> ( <name4> . scheme <name3> <name4> . netloc ) :	do <name2> perform the following only <name5> <name4> .scheme <name3> <name4> .netloc are both true ,
current_uri = <val5>   . <name3> ( <name2> = <name1> . <name2> , <name4> = <name1> . get_host ( ) , path = <name1> . path )	<name3> the string <val5> by replacing <name2> with <name1> .scheme , <name4> with return value of the <name1> .get_host method ,
<name1> = <name5> ( <name4> , <name1> )	and path with self .path , substitute the result for <name4> . call the function <name5> with arguments <name4> and <name1> , substitute the result for <name1> .
<name5> <name4> ( <name6> )	call the function <name4> with an argument <name6> , <name5> the result .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name4> <val5>   <name3> <name1> . environ . get ( <val6> ) == <val2> else <val4>	<name4> string <val5> <name3> value under the <val6> key of the <name1> .environ dictionary equals string <val2> , <name3> not <name4> <val4> .
@  <name4>	<name4> decorator .
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name5> <name2> . SECURE_PROXY_SSL_HEADER :	<name5> <name2> .SECURE_PROXY_SSL_HEADER is true ,
<name5> :	<name5> ,
<name2> , <name3> = <name4> . SECURE_PROXY_SSL_HEADER	assign the <name4> .SECURE_PROXY_SSL_HEADER to <name2> and <name3> , respectively .
except <name3> :	if <name3> exception is caught ,
<name4> <name5> ( <val2>   )	<name4> an <name5> exception with an argument string <val2> .
<name2> <name5> . META . get ( <name1> , None ) == <name3> :	<name2> <name3> under the <name1> key of the <name5> .META dictionary is equal to <name3> ,
<name1> <val6>	<name1> string <val6> .
<name1> <name5> . _get_scheme ( )	call the method <name5> ._get_scheme , <name1> the result .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name2> <name6> . scheme == <val3>	if <name6> .scheme equals to string <val3> , <name2> boolean True , otherwise <name2> boolean False .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
return <name2> . META . <name1> ( <val6>   ) == <val4>	<name1> the value under the <val6> key of the <name2> .META dictionary , if it equals string <val4> ,
@  <name3>	return boolean True , otherwise return boolean False . <name3> decorator .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name4> <name1> . _encoding	<name4> <name1> ._encoding .
@  <name6> . setter	<name6> .setter decorator ,
def <name1> ( <name5> , <name3> ) :	define the method <name1> with arguments <name5> and <name3> .
<name1> . _encoding = <name6>	substitute <name6> for <name1> ._encoding .
<name3> hasattr ( <name5> , <val6>   ) :	<name3> <name5> has an <val6> attribute ,
del <name6> . _get	delete <name6> ._get .
<name6> hasattr ( <name2> , <val3>   ) :	<name6> <name2> has an <val3> attribute ,
<name6> <name5> . _post	<name6> <name5> ._post
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
self . _upload_handlers = [ uploadhandler . load_handler ( <name4> , self ) <name3> <name4> <name5> <name1> . FILE_UPLOAD_HANDLERS ]	<name3> every <name4> <name5> <name1> .FILE_UPLOAD_HANDLERS ,
@  <name4>	add to a list result of the method uploadhandler .load_handler called with arguments handler and self , substitute resulting list for self ._upload_handlers . <name4> decorator ,
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
<name4> not <name2> . _upload_handlers :	<name4> <name2> ._upload_handlers is false ,
<name5> . _initialize_handlers ( )	call the method <name5> ._initialize_handlers ,
<name5> <name2> . _upload_handlers	<name5> <name2> ._upload_handlers .
@  <name1> . setter	<name1> .setter decorator .
def <name6> ( <name4> , <name6> ) :	define the method <name6> with arguments : <name4> and <name6> .
<name3> hasattr ( <name6> , <val5>   ) :	<name3> <name6> has an <val5> attribute .
<name5> <name1> ( <val2> )	<name5> an <name1> exception with an argument string <val2> .
<name4> . _upload_handlers = <name2>	substitute <name2> for <name4> ._upload_handlers .
def <name2> ( <name3> , <name1> , <name4> ) :	define the method <name2> with 3 arguments : <name3> , <name1> and <name4> .
"<name4> . upload_handlers = <name3> ( <name4> . upload_handlers , warning = ""You cannot alter upload handlers after the upload has been processed."" )"	<name4> .upload_handlers is an instance of <name3> , created with 2 arguments : <name4> .upload_handlers ,
<name6> = <name3> ( <name5> , <name4> , <name1> . upload_handlers , <name1> . encoding )	"and warning as a string ""You cannot alter upload handlers after the upload has been processed."" . <name6> is an instance of <name3> class , created with 4 arguments : <name5> , <name4> , <name1> .upload_handlers and <name1> .encoding ."
<name4> <name6> . parse ( )	call the method <name6> .parse , <name4> the result .
@  <name5>	<name5> decorator ,
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name5> not hasattr ( <name1> , <val2>   ) :	<name5> <name1> doesnt have an <val2> attribute ,
<name1> <name3> . _read_started :	<name1> <name3> ._read_started is true ,
<name5> <name3> ( <val2> )	<name5> an <name3> exception with an argument string <val2> .
<name4> :	<name4> ,
<name2> . _body = <name2> . read ( )	call the method <name2> .read , substitute the result or <name2> ._body .
except <name2> as <name3> :	if <name2> , renamed to <name3> , exception is caught ,
<name4> . reraise ( <name3> , <name3> ( * <name5> . args ) , sys . exc_info ( ) [ 2 ] )	call the function <name4> .reraise with 3 arguments : <name3> , <name3> instantiated with unpacked list <name5> .args ,
<name5> . _stream = <name3> ( <name5> . _body )	third element of the result of the function sys .exc_info . <name5> ._stream is an instance of <name3> class created with an argument <name5> ._body .
<name3> <name4> . _body	<name3> <name4> ._body .
def _mark_post_parse_error ( <name4> ) :	define the method_mark_post_parse_error with an argument <name4> .
<name2> . _post = <name5> ( ''   )	<name2> ._post is an instance of <name5> class created with an empty string as argument .
<name1> . _files = <name3> ( )	<name1> ._files is an instance of <name3> class .
<name3> . _post_parse_error = <name6>	<name3> ._post_parse_error is boolean <name6> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name5> <name6> . method != <val3>   :	<name5> <name6> .method is not equal to string <val3> ,
<name5> . _post , <name5> . _files = <name6> ( ''   , <name4> = <name5> . _encoding ) , MultiValueDict ( )	<name5> ._post is an instance of <name6> created with arguments : an empty string and <name4> set to <name5> ._encoding ,
<name6>	self ._files is an instance of class MultiValueDict . <name6> nothing .
<name3> <name2> . _read_started <name4> not hasattr ( <name2> , <val6>   ) :	<name3> <name2> ._read_started is true <name4> <name2> doesnt have an <val6> attribute .
<name3> . _mark_post_parse_error ( )	call the method <name3> ._mark_post_parse_error .
<name3>	<name3> nothing .
<name2> <name3> . META . <name1> ( <val5>   , ''   ) . startswith ( <val6>   ) :	<name1> the value under the <val5> key of the <name3> .META dictionary , <name2> it starts with a string <val6> ,
<name6> hasattr ( <name3> , <val4>   ) :	<name6> <name3> has an attribute <val4> ,
<name1> = <name2> ( <name6> . _body )	<name1> is an instance of <name2> class , created with an argument : <name6> ._body .
else :	if not ,
<name4> = <name1>	substitute <name1> for <name4> .
<name4> :	<name4> ,
<name5> . _post , <name5> . _files = <name5> . parse_file_upload ( <name5> . META , <name3> )	call the method <name5> .parse_file_upload with arguments <name5> .META and <name3> , assign the result to <name5> ._post and <name5> ._files .
except <name6> :	if <name6> exception is caught ,
     <name6> . _mark_post_parse_error ( )	call the method <name6> ._mark_post_parse_error .
<name5>	<name5> an exception .
elif <name4> . META . get ( <val3>   , ''   ) . startswith ( <val1>   ) :	otherwise if value under the <val3> key of hte <name4> .META dictionary starts with <val1> ,
<name6> . _post , <name6> . _files = <name3> ( <name6> . body , <name5> = <name6> . _encoding ) , MultiValueDict ( )	<name6> ._post is an instance of <name3> created with arguments : <name6> .body and <name5> set to <name6> ._encoding ,
else :	self ._files is an instance of class MultiValueDict . if not ,
<name5> . _post , <name5> . _files = <name1> ( ''   , <name6> = <name5> . _encoding ) , MultiValueDict ( )	<name5> ._post is an instance of <name1> created with arguments : an empty string and <name6> set to <name5> ._encoding ,
def <name1> ( <name4> ) :	<name4> ._files is an instance of class MultiValueDict . define the method <name1> with an argument <name4> .
<name4> hasattr ( <name5> , <val1>   ) :	<name4> <name5> has an attribute <val1> ,
<name2> <name6> <name1> <name5> . from_iterable ( l [ 1 ] <name2> l <name1> self . _files . lists ( ) ) :	<name2> every <name6> <name1> return value of the return value of the method <name5> .from_iterable called with argument :
<name1> . close ( )	second element of l for every l in return value of the self ._files .lists call the method <name1> .close .
def <name3> ( <name5> , * <name2> , ** <name1> ) :	define the method <name3> with 3 arguments : <name5> , unpacked list <name2> and unpacked dictionary <name1> .
<name1> . _read_started = <name3>	<name1> ._read_started is <name3> .
<name2> :	<name2> ,
return <name2> . _stream . read ( * <name1> , ** <name5> )	call the method <name2> ._stream .read with 2 arguments : unpacked list <name1> and unpacked dictionary <name5> .
except <name6> as <name3> :	if <name6> , renamed to <name3> , exception is caught ,
<name1> . reraise ( <name2> , <name2> ( * <name4> . args ) , sys . exc_info ( ) [ 2 ] )	call the function <name1> .reraise with 3 arguments : <name2> , <name2> instantiated with unpacked list <name4> .args ,
def <name6> ( <name4> , * <name3> , ** <name1> ) :	third element of the result of the function sys .exc_info . define the method <name6> with 3 arguments : <name4> , unpacked list <name3> and unpacked list <name1> .
<name5> . _read_started = <name6>	<name5> ._read_started is boolean <name6> .
<name4> :	<name4> ,
return <name1> . _stream . readline ( * <name4> , ** <name3> )	call the method <name1> ._stream .readline with 2 arguments : unpacked list <name4> , unpacked dictionary <name3> .
except <name3> as <name5> :	if <name3> , substituted to <name5> , exception is caught ,
<name2> . reraise ( <name3> , <name3> ( * <name4> . args ) , sys . exc_info ( ) [ 2 ] )	call the function <name2> .reraise with 3 arguments : <name3> , <name3> instantiated with unpacked list <name4> .args ,
def xreadlines ( <name2> ) :	third element of the result of the function sys .exc_info . define the method __init__ with an argument <name2> .
while True :	endless loop ,
<name6> = <name1> . readline ( )	read one line from <name1> file stream , substitute the result for <name6> .
<name4> not <name6> :	<name4> <name6> is false ,
<name1>	<name1> the loop execution .
<name4> <name3>	<name4> <name3> as return value of the generator .
<name3> = <name4>	substitute <name4> for <name3> .
def readlines ( <name6> ) :	define the method __init__ with an argument <name6> .
<name3> <name5> ( iter ( <name6> ) )	append to a <name5> elements of the iterator <name6> , <name3> the resulting <name5> .
<name5> <name6> ( <name3> ) :	derive the <name5> <name6> from the base <name5> <name3> .
<name5> = <name2>	<name5> is boolean <name2> .
<name5> = <name4>	<name5> is <name4> .
def <name6> ( <name2> , <name5> = <name3> , <name4> = <name1> , <name6> = <name3> ) :	define the method <name6> with 4 arguments : <name2> , <name5> is <name3> , <name4> is boolean <name1> and <name6> set to <name3> .
super ( <name4> , self ) . <name1> ( )	call the <name1> method of the base class of the <name4> class .
<name6> not <name4> :	<name6> <name4> is false .
<name4> = <name2> . DEFAULT_CHARSET	substitute <name2> .DEFAULT_CHARSET for <name4> .
<name1> . <name2> = <name2>	substitute <name2> for <name1> .encoding .
<name5> <name6> . PY3 :	<name5> <name6> .PY3 is true ,
<name1> isinstance ( <name6> , <name3> ) :	<name1> <name6> is an instance of <name3> ,
<name5> = <name5> . decode ( )	call the method <name5> .decode , substitute the result for <name5> .
<name6> <name5> , <name3> <name2> <name4> ( <name1> <name6> ''   , keep_blank_values = True , encoding = encoding ) :	<name6> every <name5> and <name3> <name2> return <name3> of the <name4> with 3 arguments : <name1> is it exists <name6> an empty string if not ,
self . <name6> ( <name2> , <name1> )	keep_blank_values set to boolean True , encoding set to encoding . call the method <name6> with 2 arguments : <name2> and <name1> .
else :	if not ,
<name6> <name1> , <name4> <name5> parse_qsl ( <name3> <name2> ''   , <name6> = <name1> ) :	<name6> every <name1> and <name4> <name5> parse_gsl with <name3> is it exists <name2> an empty string if not and <name6> set to boolean <name1> .
<name6> . appendlist ( <name1> ( key , encoding , errors = 'replace'   ) , <name1> ( <name2> , encoding , errors = 'replace'   ) )	call the method <name6> .appendlist with 2 arguments : return <name2> of the function <name1> with 3 arguments :
<name3> . _mutable = <name2>	key , encoding and errors set to string 'replace' , and return value of the function force_text with 3 arguments : value , encoding and errors set to string 'replace' . call the method <name2> substitute for <name3> ._mutable .
@  <name2>	<name2> decorator ,
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name5> <name2> . _encoding <name1> <name6> :	<name5> <name2> ._encoding <name1> <name6> ,
<name1> . _encoding = <name6> . DEFAULT_CHARSET	substitute <name6> .DEFAULT_CHARSET for <name1> ._encoding .
<name2> <name5> . _encoding	<name2> <name5> ._encoding .
@  <name5> . setter	<name5> .setter decorator ,
def <name1> ( <name5> , <name3> ) :	define the method <name1> with arguments <name5> and <name3> .
<name4> . _encoding = <name6>	substitute <name6> for <name4> ._encoding .
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name3> <name4> <name5> . _mutable :	<name3> <name4> <name5> ._mutable ,
<name3> <name5> ( <val6> )	<name3> an <name5> with an argument string <val6> .
def <name1> ( <name5> , <name2> , <name4> ) :	define the method <name1> with 3 arguments : <name5> , <name2> and <name4> .
<name4> . _assert_mutable ( )	call the method <name4> ._assert_mutable .
<name3> = <name5> ( <name3> , <name4> . encoding )	call the method <name5> with 2 arguments : <name3> and <name4> .encoding , substitute the result for <name3> .
<name2> = <name5> ( <name2> , <name4> . encoding )	call the method <name5> with 2 arguments : key and <name4> .encoding , substitute the result for <name2> .
super ( <name2> , self ) . <name3> ( <name4> , <name1> )	call the method <name3> from the base class of the <name2> class , with arguments <name4> and <name1> .
def <name5> ( <name6> , <name4> ) :	define the method <name5> with 3 arguments : <name6> and <name4> .
<name2> . _assert_mutable ( )	call the method <name2> ._assert_mutable .
super ( <name6> , self ) . <name1> ( <name3> )	call the method <name1> from the base class of the <name6> class , with an argument <name3> .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name3> = <name6> . __class__ ( ''   , <name2> = <name4> , <name5> = <name6> . <name5> )	call the method <name6> .__class__ with 3 arguments : an empty string , <name2> is boolean <name4> , <name5> is <name6> .encoding , substitute the <name3> for <name3> .
<name3> <name5> , <name1> <name4> <name2> . iterlists ( <name6> ) :	<name3> <name5> and <name1> <name4> return <name1> of the <name2> .iterlists function called with an argument <name6> ,
<name5> . setlist ( <name3> , <name4> )	call the method <name5> .setlist with the arguments : <name3> and <name4> .
<name6> <name1>	<name6> <name1> .
def <name4> ( <name1> , <name2> ) :	define the method <name4> with 3 arguments : <name1> and <name2> .
<name6> = <name4> . __class__ ( ''   , <name2> = <name5> , <name1> = <name4> . <name1> )	call the method <name4> .__class__ with 3 arguments : an empty string , <name2> is boolean <name5> , <name1> is <name4> .encoding , substitute the <name6> for <name6> .
<name6> [ id ( <name4> ) ] = <name3>	get the identity of the <name4> object , use it as a key to get the value of the <name6> dictionary , substitute <name3> for it .
<name5> <name2> , <name1> <name3> <name4> . iterlists ( self ) :	<name5> <name2> and <name1> <name3> result of the function <name4> .iterlists called with an argument ,
<name2> . setlist ( <name4> . deepcopy ( <name5> , <name1> ) , <name4> . deepcopy ( <name6> , <name1> ) )	call the method <name2> .setlist with 2 arguments : return <name6> of the function <name4> .deepcopy called with 2 arguments : <name5> and <name1> ,
<name3> <name2>	and <name3> value of the function copy .deepcopy called with 2 arguments : value and memo . <name3> <name2> .
def <name5> ( <name6> , <name4> , <name3> ) :	define the method <name5> with 3 arguments : <name6> , <name4> and <name3> .
<name6> . _assert_mutable ( )	call the method <name6> ._assert_mutable .
<name2> = <name5> ( <name2> , <name6> . encoding )	call the method <name5> with an arguments <name2> and <name6> .encoding , substitute the result for <name2> .
<name6> = [ <name1> ( <name4> , <name2> . encoding ) <name3> <name4> <name5> <name6> ]	<name3> every <name4> <name5> <name6> call the method <name1> with 2 argument : <name4> and <name2> .encoding , append the result into a list ,
super ( <name4> , self ) . <name3> ( <name6> , <name1> )	substitute the resulting list for <name1> . call the method <name3> from the base class of the <name4> class , with arguments <name6> and <name1> .
def <name3> ( <name4> , <name1> , <name2> = <name6> ) :	define the method <name3> with 3 arguments : <name4> , <name1> and <name2> set to <name6> .
<name3> . _assert_mutable ( )	call the method <name3> ._assert_mutable .
<name5> super ( <name1> , self ) . <name4> ( <name2> , <name6> )	call the method <name4> from the base class of the class <name1> , with arguments <name2> and <name6> , <name5> the result .
def <name1> ( <name5> , <name4> , <name3> ) :	define the method <name1> with 3 arguments : <name5> , <name4> and <name3> .
<name6> . _assert_mutable ( )	call the method <name6> ._assert_mutable .
<name1> = <name5> ( <name1> , <name2> . encoding )	call the method <name5> with 2 arguments : <name1> and <name2> .encoding , substitute the result for <name1> .
<name4> = <name1> ( <name4> , <name3> . encoding )	call the method <name1> with 2 arguments : <name4> and <name3> .encoding , substitute the result for <name4> .
super ( <name5> , self ) . <name6> ( <name1> , <name2> )	call the method <name6> from the base class of the <name5> class , with arguments <name1> and <name2> .
def <name2> ( <name3> , <name6> , * <name4> ) :	define the method <name2> with 3 arguments : <name3> , <name6> and unpacked list <name4> .
<name5> . _assert_mutable ( )	call the method <name5> ._assert_mutable .
<name4> super ( <name1> , self ) . <name6> ( <name5> , * <name3> )	call the method <name6> from the base class of the class <name1> , with arguments <name5> and unpacked list <name3> , <name4> the result .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name1> . _assert_mutable ( )	call the method <name1> ._assert_mutable .
<name6> super ( <name2> , self ) . <name3> ( )	call the method <name3> from the base class of the class <name2> , <name6> the result .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name4> . _assert_mutable ( )	call the method <name4> ._assert_mutable .
super ( <name1> , self ) . <name2> ( )	call the method <name2> from the base class of the class <name1> , return the result .
def <name2> ( <name5> , <name6> , <name4> = <name1> ) :	define the method <name2> with 3 arguments : <name5> , <name6> and <name4> set to <name1> .
<name1> . _assert_mutable ( )	call the method <name1> ._assert_mutable .
<name4> = <name3> ( <name4> , <name6> . encoding )	call the method <name3> with 2 arguments : <name4> and <name6> .encoding , substitute the result for <name4> .
<name5> = <name1> ( <name5> , <name3> . encoding )	call the method <name1> with 2 arguments : <name5> and <name3> .encoding , substitute the result for <name5> .
<name5> super ( <name6> , self ) . setdefault ( <name4> , default )	call the method setlistdefault from the base class of the class <name6> , with arguments <name4> and default_list , <name5> the result .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
return <name2> . __deepcopy__ ( { }  )	call the method <name2> .__deepcopy__ with an empty dictionary as an argument .
def <name6> ( <name3> , <name5> = <name2> ) :	define the method <name6> with 3 arguments : <name3> and <name5> set to <name2> .
<name5> = [ ]	<name5> is an empty list .
<name3> <name1> :	<name3> <name1> is true ,
<name5> = <name6> ( <name5> , <name1> . encoding )	call the function <name6> with 2 arguments : <name5> and <name1> .encoding , substitute it for <name5> .
<name6> = <name4> <name1> , <name5> : <val2>   % ( ( quote ( <name1> , safe ) , quote ( <name5> , safe ) ) )	<name6> is an <name4> function with arguments <name1> and <name5> , return value is string <val2> , where '%s' is replaced with :
else :	return value of the function quote called with arguments k and safe , and with return value of the function quote called with arguments v and safe . if not ,
<name5> = <name3> <name2> , <name1> : <name4> ( {  <name2> : <name1> }  )	<name5> is an <name3> function with 2 arguments <name2> and <name1> , return value is the result of the function <name4> , called with an argument :
<name4> <name6> , <name2> <name5> <name1> . lists ( ) :	dictionary containing element v <name4> <name6> . <name4> every <name6> and <name2> <name5> return value of the method <name1> .lists ,
<name5> = <name6> ( <name5> , <name1> . encoding )	call the function <name6> with arguments <name5> and <name1> .encoding , substitute the result for <name5> .
output . extend ( [ <name2> ( <name5> , <name1> ( <name4> , self . encoding ) ) <name3> <name4> <name6> <name2> ] )	<name3> every <name4> <name6> <name2> append to a list result of the function <name2> , called with arguments : <name5> and result of the function <name1> ,
<name4> <val6>   . <name5> ( <name2> )	called with arguments v and self .encoding , extend the <name2> with the result . <name5> elements of the <name2> into a string , separated with <val6> , <name4> the result .
def <name3> ( <name1> , <name5> = <name4> , <name6> = <name4> , POST_override = <name4> , COOKIES_override = <name4> , META_override = <name4> ) :	define the function <name3> with arguments : <name1> , <name5> set to <name4> , <name6> set to <name4> ,
<name6> :	<name6> ,
<name1> = ( <name5> ( <name2> ) if <name2> <name6> not None else <name5> ( request . GET ) )	<name1> <name6> a tuple containing elements generated by the call to the function <name5> with an argument <name2> ,
except <name1> :	if GET_override is not None , or otherwise generated with the call to the function pformat with an argument request .GET . if <name1> exception is caught ,
<name2> = <val5>	<name2> is a string <val5> .
<name4> <name2> . _post_parse_error :	<name4> <name2> ._post_parse_error is true ,
<name6> = <val3>	<name6> is a string <val3> .
else :	if not ,
<name4> :	<name4> ,
post = ( <name1> ( <name5> ) if <name5> <name4> not None else <name1> ( request . POST ) )	get <name4> a tuple containing elements generated by the call to the function <name1> with an argument <name5> ,
except <name3> :	if POST_override is not None , or otherwise generated with the call to the function pformat with an argument request .POST . if <name3> exception is caught ,
<name2> = <val5>	<name2> is a string <val5> .
<name5> :	<name5> ,
cookies = ( <name6> ( <name1> ) if <name1> <name5> not None else <name6> ( request . COOKIES ) )	get <name5> a tuple containing elements generated by the call to the function <name6> with an argument <name1> ,
except <name1> :	if COOKIES_override is not None , or otherwise generated with the call to the function pformat with an argument request .COOKIES . if <name1> exception is caught ,
<name5> = <val3>	<name5> is a string <val3> .
<name6> :	<name6> ,
meta = ( <name5> ( <name2> ) if <name2> <name3> not None else <name5> ( request . META ) )	get <name3> a tuple containing elements generated by the call to the function <name5> with an argument <name2> ,
except <name4> :	if META_override is not None , or otherwise generated with the call to the function pformat with an argument request .META . if <name4> exception is caught ,
<name1> = <val3>	<name1> is a string <val3> .
<name3> = <name6> <name2> <name6> <name4> <name1> <name5> else <name3> . <name3>	substitute <name6> for <name3> <name2> <name6> <name4> <name1> <name5> , otherwise substitute <name3> .path for <name3>
\ return <name6> ( <val2>   % ( request . __class__ . __name__ , path , six . text_type ( get ) , six . text_type ( post ) , six . text_type ( cookies ) , six . text_type ( meta ) ) ) \	\ call the function <name6> with an argument string <val2> , \
def <name4> ( <name2> , <name1> ) :	where '%s' is replaced with request .__class__ .__name__ , path , return value of the function six .text_type called with an argument get , return value of the function six .text_type called with an argument post , return value of the function six .text_type , called with an argument cookies and return value of the function six .text_type called with an argument meta . define the function <name4> with 2 arguments <name2> and <name1> .
<name1> isinstance ( <name6> , <name2> ) :	<name1> <name6> is an instance of <name2> class ,
return <name5> . text_type ( <name3> , <name2> , <val4>   )	call the method <name5> .text_type with 3 arguments : <name3> , <name2> and string <val4> .
else :	if not ,
<name4> <name1>	<name4> <name1> .
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
<name2> = <name2> . lower ( )	convert <name2> to lowercase .
if not <name2> . match ( <name6> ) :	call the method <name2> .match with an argument <name6> .
<name5> ''   , ''	<name5> an empty string and an empty string .
<name3> <name2> [ - 1 ] == <val4>   :	<name3> last element of <name2> equals character <val4> ,
<name1> <name2> , ''	<name1> <name2> and an empty string .
<name4> = <name2> . rsplit ( <val6>   , 1 )	split <name2> from the right side into 2 parts at the <val6> , substitute the result for <name4> .
<name3> len ( <name1> ) == <val4> :	<name3> length of <name1> equals integer <val4> ,
<name4> <name2> ( <name6> )	add <name6> to a <name2> , <name4> it .
<name2> <name4> [ 0 ] , ''	<name2> the first element of <name4> and an empty string .
def <name1> ( <name3> , <name6> ) :	define the method <name1> with 2 arguments : <name3> and <name6> .
<name1> = <name1> [ : - 1 ] <name5> <name1> . endswith ( <val4>   ) else <name1>	<name5> <name1> ends with <val4> , remove the last element from <name1> .
<name4> <name6> <name5> <name2> :	<name4> every <name6> <name5> <name2> :
<name1> = <name1> . lower ( )	convert <name1> to lowercase , substitute it for <name1> .
match = ( <name5> == <val1>   <name2> <name5> . startswith ( <val3>   ) <name4> ( <name6> . endswith ( <name5> ) <name2> <name6> == <name5> [ 1 : ] ) <name2> <name5> == <name6> )	if <name5> equals <val1> <name2> <name5> starts with <val3> <name2> <name5> equals <name6> , <name4> only if :
<name2> <name3> :	host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern , substitute boolean true for <name3> , otherwise substitute boolean False for <name3> . <name2> <name3> is true ,
<name6> <name1>	<name6> boolean <name1> .
<name3> <name6>	<name3> boolean <name6> .
<name3> <name6> <name5> <name2>	<name3> <name6> <name5> <name2> into default name space .
<name6> <name4>	<name6> module <name4> .
<name5> <name6>	<name5> module <name6> .
<name4> <name2>	<name4> module <name2> .
<name6> <name2>	<name6> module <name2> .
<name5> <name3> . header <name1> <name6>	<name5> <name3> .header <name1> <name6> into default name space .
<name5> <name4> . conf <name1> <name6>	<name5> <name4> .conf <name1> <name6> into default name space .
<name2> <name4> . core <name5> <name3>	<name2> <name4> .core <name5> <name3> into default name space .
<name4> <name3> . core <name1> <name5>	<name4> <name3> .core <name1> <name5> into default name space .
<name3> <name6> . core . exceptions <name5> <name2>	<name3> <name6> .core .exceptions <name5> <name2> into default name space .
<name1> <name5> . core . serializers . json <name3> DjangoJSONEncoder	<name1> <name5> .core .serializers .json <name3> DjangoJSONEncode into default name space .
<name5> <name4> . http . cookie <name1> <name3>	<name5> <name4> .http .cookie <name1> <name3> into default name space .
<name5> <name2> . utils <name3> <name4> , <name1>	<name5> <name2> .utils <name3> <name4> and <name1> into default name space .
<name1> <name4> . utils . encoding <name5> <name6> , <name2> , <name3>	<name1> <name4> .utils .encoding <name5> <name6> , <name2> and <name3> into default name space .
<name4> <name6> . utils . http <name2> <name3>	<name4> <name6> .utils .http <name2> <name3> into default name space .
<name3> <name5> . utils . six . moves <name4> <name1>	<name3> <name5> .utils .six .moves <name4> <name1> into default name space .
<name6> <name1> . utils . six . moves . urllib . parse <name5> <name3>	<name6> <name1> .utils .six .moves .urllib .parse <name5> <name3> into default name space .
"<name2> = {   <val5> : <val1>   , <val3> : <val6>   , 102 : 'PROCESSING'   , 200 : 'OK'   , 201 : 'CREATED'   , 202 : 'ACCEPTED'   , 203 : 'NON-AUTHORITATIVE INFORMATION'   , 204 : 'NO CONTENT'   , 205 : 'RESET CONTENT'   , 206 : 'PARTIAL CONTENT'   , 207 : 'MULTI-STATUS'   , 208 : 'ALREADY REPORTED'   , 226 : 'IM USED'   , 300 : 'MULTIPLE CHOICES'   , 301 : 'MOVED PERMANENTLY'   , 302 : 'FOUND'   , 303 : 'SEE OTHER'   , 304 : 'NOT MODIFIED'   , 305 : 'USE PROXY'   , 306 : 'RESERVED'   , 307 : 'TEMPORARY REDIRECT'   , 308 : 'PERMANENT REDIRECT'   , 400 : 'BAD REQUEST'   , 401 : 'UNAUTHORIZED'   , 402 : 'PAYMENT REQUIRED'   , 403 : 'FORBIDDEN'   , 404 : 'NOT FOUND'   , 405 : 'METHOD NOT ALLOWED'   , 406 : 'NOT ACCEPTABLE'   , 407 : 'PROXY AUTHENTICATION REQUIRED'   , 408 : 'REQUEST TIMEOUT'   , 409 : 'CONFLICT'   , 410 : 'GONE'   , 411 : 'LENGTH REQUIRED'   , 412 : 'PRECONDITION FAILED'   , 413 : 'REQUEST ENTITY TOO LARGE'   , 414 : 'REQUEST-URI TOO LONG'   , 415 : 'UNSUPPORTED MEDIA TYPE'   , 416 : 'REQUESTED RANGE NOT SATISFIABLE'   , 417 : 'EXPECTATION FAILED'   , 418 : ""I'M A TEAPOT"" , 422 : 'UNPROCESSABLE ENTITY'   , 423 : 'LOCKED'   , 424 : 'FAILED DEPENDENCY'   , 426 : 'UPGRADE REQUIRED'   , 428 : 'PRECONDITION REQUIRED'   , 429 : 'TOO MANY REQUESTS'   , 431 : 'REQUEST HEADER FIELDS TOO LARGE'   , 500 : 'INTERNAL SERVER ERROR'   , 501 : 'NOT IMPLEMENTED'   , 502 : 'BAD GATEWAY'   , 503 : 'SERVICE UNAVAILABLE'   , 504 : 'GATEWAY TIMEOUT'   , 505 : 'HTTP VERSION NOT SUPPORTED'   , 506 : 'VARIANT ALSO NEGOTIATES'   , 507 : 'INSUFFICIENT STORAGE'   , 508 : 'LOOP DETECTED'   , 510 : 'NOT EXTENDED'   , 511 : 'NETWORK AUTHENTICATION REQUIRED'   , }"	<name2> is a dictionary containing 59 initial entries : <val1> for <val5> , <val6> for <val3> ,
<name6> <name5> ( <name3> ) :	'PROCESSING' for 102 , 'OK' for 200 , 'CREATED' for 201 , 'ACCEPTED' for 202 , 'NON-AUTHORITATIVE INFORMATION' for 203 , 'NO CONTENT' for 204 , 'RESET CONTENT' for 205 , 'PARTIAL CONTENT' for 206 , 'MULTI-STATUS' for 207 , 'ALREADY REPORTED' for 208 , 'IM USED' for 226 , 'MULTIPLE CHOICES' for 300 , 'MOVED PERMANENTLY' for 301 , 'FOUND' for 302 , 'SEE OTHER' for 303 , 'NOT MODIFIED' for 304 , 'USE PROXY' for 305 , 'RESERVED' for 306 , 'TEMPORARY REDIRECT' for 307 , 'PERMANENT REDIRECT' for 308 , 'BAD REQUEST' for 400 , 'UNAUTHORIZED' for 401 , 'PAYMENT REQUIRED' for 402 , 'FORBIDDEN' for 403 , 'NOT FOUND' for 404 , 'METHOD NOT ALLOWED' for 405 , 'NOT ACCEPTABLE' for 406 , 'PROXY AUTHENTICATION REQUIRED' for 407 , 'REQUEST TIMEOUT' for 408 , 'CONFLICT' for 409 , 'GONE' for 410 , 'LENGTH REQUIRED' for 411 , 'PRECONDITION FAILED' for 412 , 'REQUEST ENTITY TOO LARGE' for 413 , 'REQUEST-URI TOO LONG' for 414 , 'UNSUPPORTED MEDIA TYPE' for 415 , 'REQUESTED RANGE NOT SATISFIABLE' for 416 , 'EXPECTATION FAILED' for 417 , 'I' M A TEAPOT ' for 418, ' UNPROCESSABLE ENTITY ' for 422, ' LOCKED ' for 423, ' FAILED DEPENDENCY ' for 424,   ' UPGRADE REQUIRED ' for 426, ' PRECONDITION REQUIRED ' for 428, ' TOO MANY REQUESTS ' for 429, ' REQUEST HEADER FIELDS TOO LARGE ' for 431,   ' INTERNAL SERVER ERROR ' for 500, ' NOT IMPLEMENTED ' for 501, ' BAD GATEWAY ' for 502, ' SERVICE UNAVAILABLE ' for 503,   ' GATEWAY TIMEOUT ' for 504, ' HTTP VERSION NOT SUPPORTED ' for 505, ' VARIANT ALSO NEGOTIATES ' for 506, ' INSUFFICIENT STORAGE ' for 507,   ' LOOP DETECTED ' for 508, ' NOT EXTENDED ' for 510 and ' NETWORK AUTHENTICATION REQUIRED '  for 511 . derive the <name6> <name5> from the <name3> base <name6> .
pass	do nothing .
<name1> <name3> ( <name4> . Iterator ) :	derive the <name1> <name3> from the <name4> .Iterator base <name1> .
<name5> = <val1>	<name5> is an integer <val1> .
<name6> = <name3>	<name6> is <name3> .
def <name6> ( <name5> , <name3> = <name2> , <name1> = <name2> , <name4> = <name2> ) :	define the method <name6> with 4 arguments : <name5> , <name3> set to <name2> , <name1> set to <name2> , <name4> set to <name2> .
<name1> . _headers = { }	<name1> ._headers is an empty dictionary .
<name4> . _charset = <name1> . DEFAULT_CHARSET	substitute <name1> .DEFAULT_CHARSET for <name4> ._charset .
<name1> . _closable_objects = [ ]	<name1> ._closable_objects is an empty list .
<name6> . _handler_class = <name3>	<name6> ._handler_class is <name3> .
<name4> not <name5> :	<name4> <name5> is false ,
<name4> = <val6> % ( <name1> . DEFAULT_CONTENT_TYPE , <name5> . _charset )	replace '%s' in string <val6> with <name1> .DEFAULT_CONTENT_TYPE and <name5> ._charset , substitute it for <name4> .
<name3> . cookies = <name4> ( )	<name3> .cookies is an instance of a class <name4> .
<name2> <name5> <name6> <name3> <name4> :	<name2> <name5> <name6> <name3> <name4> .
<name3> . status_code = <name1>	substitute <name1> for <name3> .status_code .
<name4> <name5> <name1> <name2> <name6> :	<name4> <name5> <name1> <name2> <name6> ,
<name1> . reason_phrase = <name2>	substitute <name2> for <name1> .reason_phrase .
elif <name3> . reason_phrase <name4> <name5> :	otherwise if <name3> .reason_phrase <name4> <name5> ,
<name5> . reason_phrase = <name6> . <name3> ( <name5> . status_code , 'UNKNOWN STATUS CODE'   )	<name3> the value under the <name5> .status_code key of the <name6> dictionary , if it exists substitute it for the <name5> .reason_phrase ,
<name6> [ <val4>   ] = <name2>	if not , <name6> .reason_phrase is a string 'UNKNOWN STATUS CODE' . substitute <name2> for value under the <val4> key of the <name6> dictionary .
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
def <name4> ( <name2> , <name6> ) :	define the function <name4> with arguments <name2> and <name6> .
<name5> <name3> <name4> isinstance ( <name3> , <name1> ) else <name3> . encode ( <name2> )	<name4> <name3> is an instance of <name1> , <name5> <name3> , otherwise <name5> result of the method <name3> .encode called with an argument <name2> .
headers = [ ( b ': '   . join ( [ <name5> ( <name3> , 'ascii'   ) , <name5> ( <name1> , 'latin-1'   ) ] ) ) <name6> <name3> , <name1> <name4> <name2> . _headers . values ( ) ]	<name6> every <name3> and <name1> <name4> return <name1> of the <name2> ._headers .values method , call the function <name5> with 2 arguments : <name3> ,
\ return b <val3>   . <name4> ( <name2> ) \	\ and string 'ascii' and call the function to_bytes with 2 arguments : value and string 'latin-1' , <name4> the previous 2 results into a string , separated by ': ' , append it to a list , substitute the resulting list for <name2> . <name4> <name2> into a string , separated by string <val3> . \
<name5> <name1> . PY3 :	<name5> <name1> .PY3 is true ,
<name3> = <name4>	substitute <name4> for <name3> .
else :	if not ,
<name5> = <name3>	substitute <name3> for <name5> .
def <name6> ( <name2> , <name5> , <name3> , <name1> = <name4> ) :	define the method <name6> with 4 arguments : <name2> , <name5> , <name3> and <name1> set to boolean <name4> .
<name1> <name4> isinstance ( <name2> , ( <name5> , <name6> . text_type ) ) :	<name1> <name2> is <name4> an instance of <name5> or <name6> .text_type classes ,
<name2> = str ( <name2> )	convert <name2> to an string and substitute it for <name2> .
<name6> :	<name6> ,
<name2> <name6> . PY3 :	<name2> <name6> .PY3 is true ,
<name4> isinstance ( <name6> , <name3> ) :	<name4> <name6> is an instance of <name3> type ,
   <name6> . encode ( <name2> )	call the method <name6> .encode with an argument <name2> .
else :	if not ,
   <name6> = <name6> . decode ( <name1> )	call the method <name6> .decode with an argument <name1> , substitute the result for <name6> .
else :	if not ,
<name3> isinstance ( <name6> , <name5> ) :	<name3> <name6> is an instance of <name5> type ,
   <name3> . decode ( <name6> )	call the method <name3> .decode with an argument <name6> .
else :	if not ,
   <name1> = <name1> . encode ( <name4> )	call the method <name1> .encode with an argument <name4> , substitute the result for <name1> .
except <name5> as <name4> :	if <name5> , renamed to <name4> , exception is caught ,
<name3> <name5> :	<name3> <name5> is true ,
<name1> = str ( <name2> ( <name1> , <val5>   , <name4> = <name3> . maxsize ) . <name6> ( ) )	instantiate class <name2> with 3 arguments : <name1> , string <val5> , <name4> set to <name3> .maxsize , call the <name6> method on it ,
else :	convert the result into a string and substitute it for value . if not ,
<name2> . reason += <val1>   % <name6>	replace '%s' in string <val1> for <name6> , append it to <name2> .reason .
<name4>	<name4> an exception .
\ <name6> str ( <val1>   ) <name3> <name5> <name2> str ( <val4>   ) <name3> <name5> : \	\ convert <val1> to a string , <name6> it is contained <name3> <name5> <name2> <val4> converted to an string is contained <name3> <name5> , \
<name4> <name2> ( <val5> % <name3> )	<name4> an <name2> exception with an argument string <val5> , where '%r' is replaced with <name3> .
<name2> <name5>	<name2> <name5> .
def <name6> ( <name2> , <name4> , <name5> ) :	define the method <name6> with 3 arguments : <name2> , <name4> and <name5> .
<name3> = <name2> . _convert_to_charset ( <name3> , <val4>   )	call the method <name2> ._convert_to_charset with arguments : <name3> and string <val4> , substitute the result for <name3> .
value = <name5> . _convert_to_charset ( value , <val1>   , <name6> = <name3> )	call the method <name5> ._convert_to_charset with arguments : header , string <val1> and <name6> set to boolean <name3> ,
<name3> . _headers [ <name2> . lower ( ) ] = ( <name2> , <name6> )	substitute the result for <name6> . substitute tuple containing 2 elements : <name2> and <name6> for the <name6> under the <name2> converted to lowercase key of the <name3> ._headers dictionary .
def <name1> ( <name6> , <name2> ) :	define the method <name1> with 2 arguments : <name6> and <name2> .
<name4> :	<name4> ,
del <name2> . _headers [ <name5> . lower ( ) ]	delete the value under the <name5> converted to lowercase key of the <name2> ._headers dictionary .
except <name4> :	if <name4> exception is caught ,
pass	do nothing .
def <name3> ( <name2> , <name5> ) :	define the method <name3> with 2 arguments : <name2> and <name5> .
<name2> <name4> . _headers [ <name1> . lower ( ) ] [ 1 ]	convert <name1> to lowercase , use it as the key to get the value from the <name4> ._headers dictionary , <name2> the second element of the result .
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name6> = <name5> . __dict__ . copy ( )	call the method <name5> .__dict__ .copy , substitute the result for <name6> .
<name3> [ <val6>   ] = str ( <name3> [ <val6>   ] )	get the value under the <val6> key of the <name3> dictionary ,
<name4> <name3>	convert it to a string and substitute it for value under the 'cookies' key of the <name3> dictionary . <name4> <name3> .
def <name2> ( <name3> , <name6> ) :	define the method <name2> with 2 arguments : <name3> and <name6> .
<name5> . __dict__ . update ( <name2> )	add <name2> element to <name5> .__dict__ dictionary .
<name3> . cookies = <name2> ( <name3> . cookies )	<name3> .cookies is an instance of <name2> class created with <name3> .cookies as an argument .
def <name2> ( <name3> , <name5> ) :	define the method <name2> with 2 arguments : <name3> and <name5> .
<name4> header . lower ( ) <name2> <name6> . _headers	convert deader to lowercase , if it is contained <name2> <name6> ._headers <name4> boolean True , if not , <name4> boolean False .
<name2> = <name6>	substitute <name6> for <name2> .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name5> <name2> . _headers . values ( )	call the method <name2> ._headers .values , <name5> the result ,
def <name1> ( <name2> , <name5> , <name6> = <name4> ) :	define the method <name1> with 3 arguments : <name2> , <name5> and <name6> set to <name4> .
return <name5> . _headers . <name6> ( <name3> . lower ( ) , ( None , alternate ) ) [ 1 ]	convert <name3> to lowercase , use it to as a key to <name6> the value of the <name5> ._headers dictionary ,
def <name3> ( <name6> , <name2> , <name1> = ''   , <name4> = <name5> , <name3> = <name5> , path = '/'   , domain = <name5> , secure = False , httponly = False ) :	if it exists return the second element of the result , if not , return alternate . define the method <name3> with 9 arguments : <name6> , <name2> , <name1> set to an empty string , <name4> set to <name5> , <name3> set to <name5> ,
<name4> . cookies [ <name2> ] = <name5>	substitute <name5> for <name4> .cookies dictionary <name5> under the <name2> <name2> .
<name6> <name2> <name5> <name4> <name1> :	<name6> <name2> <name5> <name4> <name1> ,
<name5> isinstance ( <name3> , <name1> . <name1> ) :	<name5> <name3> is an instance of <name1> .datetime class ,
<name1> <name5> . is_aware ( <name4> ) :	call the method <name5> .is_aware with an argument <name4> , <name1> it evaluates to true ,
<name1> = <name4> . make_naive ( <name1> , <name4> . utc )	call the method <name4> .make_naive with arguments : <name1> , <name4> .utc , substitute the result for <name1> .
<name6> = <name3> - <name3> . utcnow ( )	call the method <name3> .utcnow , subtract the result from <name3> , substitute the result for <name6> .
<name5> = <name5> + <name6> . timedelta ( <name1> = <val2> )	call the method <name6> .timedelta with an argument <name1> set to integer <val2> , increment <name5> by it .
<name1> = <name3>	<name1> is <name3> .
max_age = max ( <val3> , <name5> . days * <val6> + <name5> . seconds )	multiply <name5> .days with an integer <val6> add to the result <name5> .seconds , if the result is greater than integer <val3> ,
else :	substitute it for max_age , if not , max_age is integer 0 . if not ,
<name3> . cookies [ <name5> ] [ <val2>   ] = <name1>	get the value under the <name5> <name5> of the <name3> .cookies dictionary , substitute <name1> for <val2> <name5> of the returned dictionary .
<name1> <name5> <name6> <name4> <name2> :	<name1> <name5> <name6> <name4> <name2> ,
<name5> . cookies [ <name3> ] [ <val1>   ] = max_age	get the value under the <name3> <name3> of the <name5> .cookies dictionary , substitute max - age for <val1> <name3> of the returned dictionary .
<name1> not <name6> :	<name1> <name6> is false ,
<name6> . cookies [ <name3> ] [ 'expires'   ] = <name4> ( time . time ( ) + max_age )	get the value under the <name3> <name3> of the <name6> .cookies dictionary , call the <name4> function with an argument :
<name5> <name1> <name2> <name4> <name3> :	sum of the result of the function time .time and max_age , substitute it for 'expires' key of the previously returned dictionary . <name5> <name1> <name2> <name4> <name3> ,
<name5> . cookies [ <name2> ] [ <val6>   ] = <name3>	get the value under the <name2> <name2> of the <name5> .cookies dictionary , substitute <name3> for <val6> <name2> of the returned dictionary .
<name2> <name1> <name6> <name5> <name3> :	<name2> <name1> <name6> <name5> <name3> ,
<name3> . cookies [ <name6> ] [ <val2>   ] = <name5>	get the value under the <name6> <name6> of the <name3> .cookies dictionary , <name5> expires for <val2> <name6> of the returned dictionary .
<name1> <name5> :	<name1> <name5> is true ,
<name3> . cookies [ <name2> ] [ <val5>   ] = <name6>	get the value under the <name2> <name2> of the <name3> .cookies dictionary , substitute boolean <name6> for <val5> <name2> of the returned dictionary .
<name4> <name2> :	<name4> <name2> is true ,
<name2> . cookies [ <name1> ] [ <val4>   ] = <name3>	get the value under the <name1> <name1> of the <name2> .cookies dictionary , substitute boolean <name3> for <val4> <name1> of the returned dictionary .
def <name6> ( <name1> , <name2> , <name5> , <name3> = ''   , ** kwargs ) :	define the method <name6> with 5 arguments : <name1> , <name2> , <name5> , <name3> as an empty string and unpacked dictionary kwarg .
value = <name3> . get_cookie_signer ( <name1> = <name2> + <name1> ) . sign ( value )	call the method <name3> .get_cookie_signer with an argument <name1> set to sum of <name2> and <name1> ,
<name2> <name3> . set_cookie ( <name6> , <name4> , ** <name1> )	call the method sign on the result with an argument <name4> , substitute the result for <name4> . call the method <name3> .set_cookie with 3 arguments : <name6> , <name4> and unpacked dictionary <name1> , <name2> the result .
def <name2> ( <name5> , <name4> , <name1> = <val6>   , <name3> = <name2> ) :	define the method <name2> with 4 arguments : <name5> , <name4> , <name1> set to character <val6> and <name3> set to <name2> .
<name1> . set_cookie ( <name4> , <name5> = <val2> , <name3> = <name3> , <name6> = <name6> , expires = 'Thu, 01-Jan-1970 00:00:00 GMT'   )	call the method <name1> .set_cookie with 5 arguments : <name4> , <name5> as integer <val2> , <name3> as <name3> , <name6> as <name6> ,
def <name4> ( <name6> , <name5> ) :	expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT' , return the result . define the method <name4> with 2 arguments : <name6> and <name5> .
<name1> <name4> . has_header ( <val6>   ) :	call the method <name4> .has_header with string <val6> as an argument , <name1> it evaluates to true ,
<name4> <name6> ( <name1> )	call the function <name6> with an argument <name1> , <name4> the result .
<name1> isinstance ( <name3> , <name5> ) :	<name1> <name3> is an instance of <name5> class ,
<name1> <name6> ( <name5> )	call the function <name6> with an argument <name5> , <name1> the result .
<name3> isinstance ( <name4> , <name6> . text_type ) :	<name3> <name4> is an instance of <name6> .text_type class ,
return <name3> ( <name2> . encode ( <name5> . _charset ) )	call the method <name2> .encode with an argument <name5> ._charset , use the result as an argument for the call to the <name3> function ,
<name5> <name3> ( <name2> , <name1> . _charset )	<name5> the result . call the function <name3> with arguments <name2> and <name1> ._charset , <name5> the result .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name6> <name2> <name3> <name4> . _closable_objects :	<name6> every <name2> <name3> <name4> ._closable_objects ,
<name4> :	<name4> ,
<name4> . close ( )	call the method <name4> .close .
except <name6> :	if <name6> exception is caught ,
pass	do nothing .
<name1> . request_finished . send ( <name4> = <name2> . _handler_class )	call the method <name1> .request_finished .send with an argument <name4> set to <name2> ._handler_class .
def <name1> ( <name2> , content ) :	define the method <name1> with 2 arguments : <name2> and value .
<name2> <name4> ( <val1> % self . __class__ . __name__ )	<name2> an <name4> exception with an argument string <val1> ,
def <name4> ( <name2> ) :	where '%s' is replaced with <name2> .__class__ .__name__ . define the method <name4> with an argument <name2> .
pass	do nothing .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name6> <name5> ( <val4> % self . __class__ . __name__ )	<name6> an <name5> exception with an argument string <val4> ,
<name3> <name6> ( <name2> ) :	where '%s' is replaced with self .__class__ .__name__ . derive the <name3> <name6> from the <name2> base <name3> .
<name2> = <name5>	<name2> is boolean <name5> .
def <name3> ( <name4> , <name6> = b ''   , * <name1> , ** <name5> ) :	define the method <name3> with 4 arguments : <name4> , <name6> set to an empty list , unpacked list <name1> and unpacked dictionary <name5> .
super ( <name2> , self ) . <name3> ( * <name4> , ** <name6> )	call the <name3> method from the base class of the <name2> class , with the arguments : unpacked list <name4> and unpacked dictionary <name6> .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .content .
def <name5> ( <name6> ) :	define the <name5> content with an argument <name6> .
\ <name6> <name5> . serialize_headers ( ) + b <val4>   + <name5> . content \	\ call method <name5> .serialize_headers , append bytes string <val4> to the result , append <name5> .content to the result , <name6> it . \
<name3> <name1> . PY3 :	<name3> <name1> .PY3 is true ,
<name3> = <name1>	substitute <name1> for <name3> .
else :	if not ,
<name1> = <name4>	substitute <name4> for <name1> .
@  <name5>	<name5> decorator ,
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name5> b ''   . <name2> ( <name1> . _container )	<name2> <name1> ._container elements into a string , <name5> it .
@  <name1> . setter	<name1> .setter decorator ,
def <name5> ( <name1> , <name3> ) :	define the method <name5> with 2 arguments : <name1> and <name3> .
<name6> hasattr ( <name5> , <val1>   ) <name3> <name4> isinstance ( <name5> , ( <name2> , <name6> . string_types ) ) :	<name6> <name5> has an <val1> attribute <name3> <name5> is <name4> an instance of <name2> or <name6> .string_types class .
<name3> hasattr ( <name1> , <val4>   ) :	<name3> <name1> has an <val4> attribute ,
<name6> . _closable_objects . <name2> ( <name5> )	<name2> <name5> to the <name6> ._closable_objects list .
<name4> = b ''   . <name2> ( <name1> . make_bytes ( <name5> ) <name3> <name5> <name6> <name4> )	call the <name1> .make_bytes method with an argument <name5> , <name3> every <name5> <name6> <name4> <name2> the result to a bytes string ,
else :	substitute the result for value . if not ,
<name4> = <name6> . make_bytes ( <name4> )	call the method <name6> .make_bytes with an argument <name4> , substitute the result for <name4> .
<name1> . _container = [ <name5> ]	<name1> ._container is a list containing element <name5> .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name6> iter ( <name1> . _container )	<name6> <name1> ._container converted into a iterable .
def <name3> ( <name2> , <name4> ) :	define the method <name3> with 2 arguments : <name2> and <name4> .
<name2> . _container . <name3> ( <name2> . make_bytes ( <name4> ) )	call the method <name2> .make_bytes with an argument <name4> , <name3> it to <name2> ._container .
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name4> len ( <name1> . content )	<name4> the length of <name1> .content .
<name4> <name5> ( <name6> ) :	derive the <name4> <name5> from the <name6> base <name4> .
<name1> = <name3>	<name1> is boolean <name3> .
def <name6> ( <name4> , <name1> = ( ) , * <name2> , ** kwargs ) :	define the method <name6> with 4 arguments : <name4> , result of the function <name1> = ( ) , unpacked list <name2> ,
super ( <name3> , self ) . <name4> ( * <name1> , ** <name6> )	and unpacked dictionary <name6> . call the <name4> method from the base class of the <name3> class , called with arguments : unpacked list <name1> ,
<name5> . <name1> = <name1>	and unpacked dictionary kwargs . substitute <name1> for <name5> .streaming_content .
@  <name2>	<name2> decorator ,
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
"<name5> <name2> ( <val6> ""Use `streaming_content` instead."" % self . __class__ . __name__ )"	"<name5> an <name2> with an argument string <val6> Use streaming_content instead . "" ,"
@  <name6>	where '%s' is replaced with self .__class__ .__name__ . <name6> decorator ,
def streaming_content ( <name1> ) :	define the method serialize_headers with an argument <name1> .
<name3> <name2> ( <name4> . make_bytes , <name4> . _iterator )	<name2> elements of <name4> ._iterator through <name4> .make_bytes function , <name3> the result .
@  <name1> . setter	<name1> .setter decorator ,
def <name6> ( <name1> , <name5> ) :	define the method <name6> with 2 arguments : <name1> and <name5> .
<name2> . _iterator = iter ( <name4> )	convert <name4> into a iterator , substitute the result for <name2> ._iterator .
<name5> hasattr ( <name6> , <val1>   ) :	<name5> <name6> has an attribute <val1> ,
<name6> . _closable_objects . <name3> ( <name2> )	<name3> <name2> to <name6> ._closable_objects list .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name1> <name2> . streaming_content	<name1> <name2> .streaming_content
<name6> <name4> ( <name1> ) :	derive the <name6> <name4> from the <name1> base <name6> .
<name1> = [ <val6>   , <val5>   , <val4>   ]	<name1> is an list containing 3 elements : strings <val6> , <val5> and <val4> .
def <name1> ( <name4> , <name2> , * <name3> , ** <name6> ) :	define the method <name1> with 4 arguments : <name4> , <name2> , unpacked list <name3> and unpacked dictionary <name6> .
parsed = <name5> ( <name1> ( <name6> ) )	call the function <name1> with an argument <name6> , use the result as an argument for the call to the function <name5> ,
<name2> <name3> . scheme <name6> <name3> . scheme <name1> <name5> <name4> . allowed_schemes :	substitute the result for <name3> . <name2> <name3> .scheme is true <name6> <name3> .scheme is <name1> contained <name5> <name4> .allowed_schemes ,
super ( <name5> , self ) . <name1> ( * <name2> , ** kwargs )	where '%s' is replaced with parsed .scheme . call the <name1> method from the base class of the <name5> class , called with arguments : unpacked list <name2> ,
<name5> [ <val4>   ] = <name1> ( <name6> )	and unpacked dictionary kwargs . call the function <name1> with an argument <name6> , substitute the result for the value under the <val4> key of the <name5> dictionary .
<name3> = <name6> ( <name5> <name4> : <name4> [ <val1>   ] )	<name3> is a <name6> of the class , <name5> function is getter attribute with an argument <name4> and return value is the value under the <val1> key of the <name4> dictionary .
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> from the <name4> base <name3> .
<name5> = <val3>	<name5> is an integer <val3> .
<name1> <name3> ( <name6> ) :	derive the <name1> <name3> from the <name6> base <name1> .
<name1> = <val6>	<name1> is an integer <val6> .
<name3> <name5> ( <name1> ) :	derive the <name3> <name5> from the <name1> base <name3> .
<name3> = <val4>	<name3> is an integer <val4> .
def <name2> ( <name1> , * <name5> , ** <name6> ) :	define the method <name2> with 3 arguments : <name1> , unpacked list <name5> and unpacked dictionary <name6> .
super ( <name6> , self ) . <name2> ( * <name3> , ** kwargs )	call the <name2> method from the base class of the <name6> class , called with arguments : unpacked list <name3> ,
del <name5> [ <val4>   ]	and unpacked dictionary kwargs . delete the value under the <val4> key of the <name5> dictionary .
@  <name3> . content . setter	<name3> .content .setter property ,
def <name5> ( <name3> , <name1> ) :	define the method <name5> with <name3> and <name1> .
<name1> <name4> :	<name1> <name4> ,
<name3> <name5> ( <val4> )	<name3> an <name5> exception with an argument string <val4> .
<name2> . _container = [ ]	<name2> ._container is an list .
<name4> <name5> ( <name3> ) :	derive the <name4> <name5> from the <name3> base <name4> .
<name1> = <val6>	<name1> is an integer <val6> .
<name1> <name6> ( <name4> ) :	derive the <name1> <name6> from the <name4> base <name1> .
<name5> = <val2>	<name5> is an integer <val2> .
<name1> <name5> ( <name2> ) :	derive the <name1> <name5> from the <name2> base <name1> .
<name6> = <val1>	<name6> is an integer <val1> .
<name2> <name5> ( <name4> ) :	derive the <name2> <name5> from the <name4> base <name2> .
<name3> = <val6>	<name3> is an integer <val6> .
def <name6> ( <name3> , <name1> , * <name4> , ** <name2> ) :	define the method <name6> with 4 arguments : <name3> , <name1> , unpacked list <name4> and unpacked dictionary <name2> .
super ( <name2> , self ) . <name6> ( * <name5> , ** kwargs )	call the <name6> method from the base class of the <name2> class , called with arguments : unpacked list <name5> ,
<name4> [ <val5>   ] = <val1>   . <name2> ( <name6> )	and unpacked dictionary kwargs . <name2> into a string <name6> , separated by string <val1> , substitute it for value under the <val5> key of the <name4> dictionary .
<name2> <name5> ( <name1> ) :	derive the <name2> <name5> from the <name1> base <name2> .
<name1> = <val2>	<name1> is an integer <val2> .
<name6> <name1> ( <name5> ) :	derive the <name6> <name1> from the <name5> base <name6> .
<name3> = <val4>	<name3> is an integer <val4> .
<name3> <name5> ( <name1> ) :	derive the <name3> <name5> from the <name1> base <name3> .
pass	do nothing .
<name1> <name5> ( <name6> ) :	derive the <name1> <name5> from the <name6> base <name1> .
def <name1> ( <name4> , <name6> , <name2> = <name3> , <name5> = <name1> , ** kwargs ) :	define the method <name1> with 5 arguments : <name4> , <name6> , <name2> set to <name3> , <name5> set to boolean <name1> ,
<name4> <name1> <name2> <name6> isinstance ( <name5> , <name3> ) :	<name2> unpacked dictionary kwargs . <name4> <name1> is true <name2> <name5> is <name6> an instance of <name3> type .
<name1> <name5> ( 'In order to allow non-dict objects to be '    'serialized set the safe parameter to False'   )	<name1> an <name5> exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False' .
<name4> . setdefault ( <val6>   , <val2>   )	if <val6> key doesnt exist in <name4> , set its value to <val2> .
<name2> = json . dumps ( <name2> , <name5> = <name3> )	serialize <name2> to JSON format with <name5> set to <name3> , substitute it for <name2> .
super ( <name5> , self ) . <name1> ( <name6> = <name4> , ** kwargs )	call the <name1> method from the base class of the <name5> class , called with arguments : <name6> set to <name4> ,
def <name6> ( <name5> , <name4> ) :	define function <name6> with <name5> and <name4> as arguments .
<name5> <val3>   <name4> <name1> <name6> <name2> . get_host ( ) :	<name5> <val3> is contained <name4> <name1> <name6> function <name2> .get_host evaluates to True ,
<name6> [ <val4>   ] = <name3> . build_absolute_uri ( <name6> [ <val4>   ] )	modify value at the key <val4> of the dictionary <name6> by applying function <name3> .build_absolute_uri on it .
<name4> <name1>	<name4> <name1> .
def <name2> ( <name4> , <name6> ) :	define the function <name2> with <name4> and <name6> as the arguments .
<name5> <val4> <= <name6> . status_code <  <val2> <name1> <name6> . status_code in ( <val3> , <val5> ) :	<name5> <name6> .status_code is lesser than integer <val2> and grater <name1> equal than <val4> , <name1> <name6> .status_code equals to integer <val3> <name1> <val5> ,
<name3> <name5> . streaming :	<name3> <name5> .streaming is True ,
<name4> . streaming_content = [ ]	<name4> .streaming_content is an empty list .
else :	if not ,
<name2> . content = b ''	<name2> .content is bytes empty string .
<name4> [ <val5>   ] = <val1>	substitute char <val1> for the value under the <val5> key of the <name4> dictionary .
<name5> <name3> . method == <val2>   :	<name5> <name3> .method equals to string <val2> ,
<name6> <name5> . streaming :	<name6> <name5> .streaming is true ,
<name6> . streaming_content = [ ]	<name6> .streaming_content is an empty list .
else :	if not ,
<name6> . content = b ''	<name6> .content is bytes empty string .
<name3> <name6>	<name3> <name6> .
<name1> <name4> . template . base <name6> ( <name5> , <name3> , <name2> , <name1> , <name4> , FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END , SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR , TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR , VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )	<name1> <name4> .template .base <name6> <name5> , <name3> , <name2> , <name1> , <name4> ,
<name6> <name4> . template . base <name1> ( <name5> , <name2> , <name3> , <name6> , TemplateSyntaxError , VariableDoesNotExist )	FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END , SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR , TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR , VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re and tag_re . <name6> <name4> .template .base <name1> <name5> , <name2> , <name3> , <name6> ,
<name2> <name3> . template . base <name6> ( <name4> , <name1> , <name5> , <name2> , <name3> , <name6> , <name4> , <name1> , <name5> , Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string , filter_raw_string )	TemplateSyntaxError and VariableDoesNotExist . <name2> <name3> .template .base <name6> <name4> , <name1> , <name5> , <name2> , <name3> , <name6> , <name4> , <name1> , <name5> ,
<name4> <name1> . template . base <name5> ( <name3> , <name2> , <name6> , <name4> )	Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string and filter_raw_string . <name4> <name1> .template .base <name5> <name3> , <name2> , <name6> and <name4> .
<name1> <name2> . template . base <name5> ( <name3> , <name4> , <name6> , <name1> , <name2> , <name5> , import_library , libraries )	<name1> <name2> .template .base <name5> <name3> , <name4> , <name6> , <name1> , <name2> , <name5> ,
<name5> = ( <val6>   , <val1>   , <val2>   , <val3>   )	import_library and libraries . <name5> is a tuple containing 4 strings : <val6> , <val1> , <val2> and <val3> .
<name4> <name1> <name3> <name5>	<name4> <name1> <name3> <name5> into default name space .
<name3> <name5>	<name3> module <name5> .
<name2> <name1> <name6> <name4>	<name2> <name1> <name6> <name4> into default name space .
<name4> <name3> <name2> <name5>	<name4> <name3> <name2> <name5> into default name space .
<name3> <name6> <name4> <name2> , <name5>	<name3> <name6> <name4> <name2> and <name5> into default name space .
<name2> <name4>	<name2> module <name4> .
<name5> <name6> . <name4> <name1> <name4>	<name5> <name6> .apps <name1> <name4> into default name space .
<name5> <name1> . conf <name4> <name3>	<name5> <name1> .conf <name4> <name3> into default name space .
<name2> <name1> . template . context <name5> ( <name3> , <name6> , <name4> , <name2> )	<name2> <name1> .template .context <name5> <name3> , <name6> , <name4> and <name2> into default namespace .
<name1> <name5> . utils . deprecation <name4> <name3>	<name1> <name5> .utils .deprecation <name4> <name3> into default name space .
<name6> <name1> . utils . itercompat <name2> <name4>	<name6> <name1> .utils .itercompat <name2> <name4> into default name space .
<name4> <name5> . utils . text <name2> ( <name3> , <name1> , <name6> )	<name4> <name5> .utils .text <name2> <name3> , <name1> and <name6> into default namespace .
<name5> <name4> . utils . encoding <name6> <name2> , <name1>	<name5> <name4> .utils .encoding <name6> <name2> and <name1> into default name space .
<name3> <name1> . utils . translation <name2> <name4> , <name6>	<name3> <name1> .utils .translation <name2> <name4> and <name6> into default name space .
<name2> <name4> . utils . safestring <name5> ( <name6> , <name3> , <name1> , <name2> )	<name2> <name4> .utils .safestring <name5> <name6> , <name3> , <name1> and <name2> into default namespace .
<name1> <name2> . utils . formats <name6> <name3>	<name1> <name2> .utils .formats <name6> <name3> into default name space .
<name3> <name5> . utils . html <name1> <name2>	<name3> <name5> .utils .html <name1> <name2> into default name space .
<name4> <name1> . utils . module_loading <name3> <name5>	<name4> <name1> .utils .module_loading <name3> <name5> into default name space .
<name5> <name4> . utils <name6> <name3>	<name5> <name4> .utils <name6> <name3> into default name space .
<name1> <name2> . utils . timezone <name6> <name5>	<name1> <name2> .utils .timezone <name6> <name5> into default name space .
<name1> <name4> . utils . encoding <name3> <name6>	<name1> <name4> .utils .encoding <name3> <name6> into default name space .
<name6> = <val1>	<name6> is integer <val1>
<name6> = <val2>	<name6> is integer <val2>
<name1> = <val3>	<name1> is integer <val3>
<name1> = <val6>	<name1> is integer <val6> .
<name1> = {   <name4> : <val6>   , <name2> : <val5>   , <name3> : <val1>   , TOKEN_COMMENT : 'Comment'   , }	<name1> is a dictionary with 4 initial entries : <val6> for <name4> , <val5> for <name2> , <val1> for <name3> ,
<name6> = <val5>	and 'Comment' for TOKEN_COMMENT . <name6> is a string <val5> .
<name2> = <val4>	<name2> is a string <val4> .
<name3> = <val6>	<name3> is a string <val6> .
<name4> = <val6>	<name4> is a string <val6> .
<name2> = <val3>	<name2> is a string <val3> .
<name2> = <val4>	<name2> is a string <val4> .
<name1> = <val6>	<name1> is a string <val6> .
<name4> = <val6>	<name4> is a string <val6> .
<name4> = <val3>	<name4> is a string <val3> .
<name1> = <val6>	<name1> is a string <val6> .
<name1> = <val4>	<name1> is a string <val4> .
<name3> = <val4>	<name3> is a string <val4> .
<name5> = ( 'abcdefghijklmnopqrstuvwxyz'    'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'   )	<name5> is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' .
<name1> = <val4>	<name1> is a string <val4> .
tag_re = ( <name5> . compile ( <val6>   % ( <name5> . escape ( BLOCK_TAG_START ) , <name5> . escape ( BLOCK_TAG_END ) , <name5> . escape ( VARIABLE_TAG_START ) , <name5> . escape ( VARIABLE_TAG_END ) , <name5> . escape ( COMMENT_TAG_START ) , <name5> . escape ( COMMENT_TAG_END ) ) ) )	call the function <name5> .compile with an argument string <val6> , substitute all occurrences of '%s' with ,
<name6> = { }	return value of the function re .escape called with an argument BLOCK_TAG_START , return value of the function re .escape called with an argument BLOCK_TAG_END , return value of the function re .escape called with an argument VARIABLE_TAG_START , return value of the function re .escape called with an argument VARIABLE_TAG_END , return value of the function re .escape called with an argument COMMENT_TAG_START , and return value of the function re .escape called with an argument COMMENT_TAG_END , substitute the result for tag_re . <name6> is an empty dictionary .
<name1> = [ ]	<name1> is an empty list .
<name4> = <name5>	<name4> is <name5> .
<name4> <name6> ( <name1> ) :	derive the <name4> <name6> form the base <name4> <name1> .
pass	do nothing .
<name5> <name1> ( <name2> ) :	derive the <name5> <name1> form the base <name5> <name2> .
pass	do nothing .
<name3> <name5> ( <name6> ) :	derive the <name3> <name5> form the base <name3> <name6> .
pass	do nothing .
@  <name2>	<name2> decorator ,
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> form the base <name3> <name4> .
def <name3> ( <name5> , <name1> , <name6> = ( ) ) :	define the method <name3> with 3 arguments : <name5> , <name1> and <name6> set to an empty tuple .
<name4> . <name5> = <name5>	substitute <name5> for <name4> .msg .
<name3> . <name4> = <name4>	substitute <name4> for <name3> .params .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name3> <name6> . msg % <name4> ( <name1> ( p , errors = 'replace'   ) for p in <name6> . params )	<name3> <name6> .msg formatted with a <name4> , with elements generated from <name3> value of the function <name1> with 2 arguments :
<name1> <name2> ( <name4> ) :	p and errors set to string 'replace' , for p in self .params . derive the <name1> <name2> form the base <name1> <name4> .
pass	do nothing .
<name5> <name2> ( <name1> ) :	derive the <name5> <name2> form the base <name5> <name1> .
def <name1> ( <name5> , <name6> ) :	define the method <name1> with 2 arguments : <name5> and <name6> .
<name2> . <name1> = <name1>	substitute <name1> for <name2> .name .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name5> <name1> ( <val3>   )	<name5> an <name1> exception with an argument string <val3> .
def __str__ ( <name3> ) :	define the method with reload with an argument <name3> .
<name6> <name3> . name	<name6> <name3> .name .
<name6> <name1> ( <name3> ) :	derive the <name6> <name1> form the base <name6> <name3> .
def <name6> ( <name1> , <name4> ) :	define the method <name6> with 2 arguments : <name1> and <name4> .
super ( <name1> , self ) . <name3> ( <name6> )	call the method <name3> with an argument <name6> , from the base class of the class <name1> .
<name1> . <name5> = <name5>	substitute <name5> for <name1> .source .
def <name5> ( <name3> ) :	define the method with <name5> with an argument <name3> .
<name6> <name1> . source	<name6> <name1> .source .
<name1> <name5> ( <name4> ) :	derive the <name1> <name5> form the base <name1> <name4> .
def <name3> ( <name2> , <name6> , <name4> = <name1> , <name5> = <name1> ) :	define the method <name3> with 4 arguments : <name2> , <name6> , <name4> set to <name1> and <name5> set to <name1> .
<name5> :	<name5> ,
<name2> = <name6> ( <name2> )	call the function <name6> with an argument <name2> .
except <name3> :	if <name3> exception is caught ,
"<name5> <name1> ( ""Templates can only be constructed "" ""from unicode or UTF-8 strings."" )"	"<name5> an <name1> exception with an argument ""Templates can only be constructed from unicode or UTF-8 strings."" ."
<name3> <name5> . TEMPLATE_DEBUG <name1> <name4> <name2> <name6> :	<name3> <name5> .TEMPLATE_DEBUG <name2> true <name1> <name4> <name2> <name6> ,
<name6> = <name4> ( <name5> )	<name6> is an instance of <name4> class created with an argument <name5> .
<name5> . nodelist = <name4> ( <name6> , <name3> )	call the function <name4> with 2 arguments : <name6> and <name3> , substitute the result for <name5> .nodelist .
<name4> . <name5> = <name5>	substitute <name5> for <name4> .name .
<name4> . <name5> = <name5>	substitute <name5> for <name4> .origin .
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name6> <name3> <name1> <name2> . nodelist :	<name6> every <name3> <name1> <name2> .nodelist ,
<name1> <name3> <name5> <name6> :	<name1> every <name3> <name5> <name6> ,
<name1> <name2>	<name1> <name2> .
def <name4> ( <name2> , <name6> ) :	define the method <name4> with 2 arguments <name2> and <name6> .
<name5> <name2> . nodelist . render ( <name6> )	call the method <name2> .nodelist .render with an argument <name6> , <name5> the result .
def <name6> ( <name1> , <name5> ) :	define the method <name6> with 2 arguments <name1> and <name5> .
<name3> . render_context . push ( )	call the method <name3> .render_context .push .
<name4> :	<name4> ,
<name2> <name1> . _render ( <name4> )	call the method <name1> ._render with an argument <name4> , <name2> the result ,
<name3> :	<name3> perform ,
<name1> . render_context . pop ( )	remove the first element from <name1> .render_context .
def <name5> ( <name4> , <name1> ) :	define the method <name5> with 2 arguments : <name4> and <name1> .
<name5> <name4> . TEMPLATE_DEBUG :	<name5> <name4> .TEMPLATE_DEBUG is true ,
<name1> <name2> . template . debug <name4> <name6> , <name3>	<name1> <name2> .template .debug <name4> <name6> and <name3> .
<name2> , <name5> = <name4> , <name6>	substitute <name4> and <name6> for <name2> and <name5> .
else :	if not ,
<name4> , <name2> = <name5> , <name6>	substitute <name5> and <name6> for <name4> and <name2> .
<name5> = <name6> ( <name1> , <name4> )	call the method <name6> with an arguments <name1> and <name4> , substitute the result for <name5> .
<name4> = <name5> ( <name6> . tokenize ( ) )	call the method <name6> .tokenize , use it as an argument for the call to the <name5> function , substitute the result for <name4> .
<name4> <name5> . parse ( )	call the method <name5> .parse , <name4> the result .
<name5> <name1> ( <name3> ) :	derive the <name5> <name1> form the base <name5> <name3> .
def <name3> ( <name5> , <name2> , <name4> ) :	define the method <name3> with 3 arguments : <name5> , <name2> and <name4> .
<name2> . <name5> , <name2> . <name3> = <name5> , <name3>	substitute <name5> and <name3> for <name2> .token_type and <name2> .contents .
<name1> . lineno = <name2>	<name1> .lineno is <name2> .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name4> = <name2> [ <name6> . token_type ]	substitute value under the <name6> .token_type key of the <name2> dictionary for <name4> .
\ <name1> ( <val5>   % ( <name3> , <name6> . contents [ : <val4> ] . <name2> ( '\\n'   , ''   ) ) ) \	<name1> a string <val5> with '%s' , <name2> '%s' with <name3> and <val4> <name6> .contents elements with every newline deleted .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name2> = [ ]	<name2> is an empty list .
<name6> = iter ( <name2> ( <name3> . contents ) )	call the function <name2> with an argument <name3> .contents , substitute the result converted to an iterable for <name6> .
<name3> <name2> <name1> <name5> :	<name3> every <name2> <name1> <name5> ,
<name6> = <name5> [ 2 ] + <val1>	append <val1> to third element of <name5> , substitute it for <name6> .
<name1> = [ <name4> ]	<name1> is a list with an element <name4> .
<name4> not <name5> . endswith ( sentinal ) :	<name4> <name5> doesnt end with sential ,
<name4> = <name6> ( <name1> )	call the method <name6> with an argument <name1> , substitute the result for <name4> .
<name2> . <name5> ( <name3> )	<name5> <name3> to <name2> .
<name5> = ' '   . <name2> ( <name6> )	<name2> <name6> into a string separated with whitespaces , substitute the result for <name5> .
<name5> . <name1> ( <name6> )	<name1> <name6> to <name5> .
<name3> <name5>	<name3> <name5> .
<name2> <name5> ( <name1> ) :	derive the <name2> <name5> form the base <name2> <name1> .
def <name1> ( <name2> , <name4> , <name5> ) :	define the method <name1> with 3 arguments : <name2> , <name4> and <name5> .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .template_string .
<name2> . <name5> = <name5>	substitute <name5> for <name2> .origin .
<name5> . lineno = <val4>	<name5> .lineno is integer <val4> .
<name6> . verbatim = <name5>	<name6> .verbatim is boolean <name5> .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name2> = <name6>	<name2> is boolean <name6> .
<name1> = [ ]	<name1> is an empty list .
<name3> <name4> <name5> <name1> . <name2> ( <name6> . template_string ) :	<name2> <name1> by <name6> .template_string separator , <name3> every <name4> <name5> result ,
<name6> <name4> :	<name6> <name4> is true ,
<name2> . <name1> ( <name3> . create_token ( <name4> , <name6> ) )	call the method <name3> .create_token with 2 arguments <name4> and <name6> , <name1> the <name2> to <name2> .
<name6> = not <name6>	<name6> is boolean True if <name6> is False , otherwise is boolean False .
<name4> <name2>	<name4> <name2> .
def <name5> ( <name3> , <name1> , <name2> ) :	define the method <name5> with 3 arguments : <name3> , <name1> and <name2> .
<name1> <name3> <name5> <name4> . startswith ( <name2> ) :	<name1> <name3> is true <name5> <name4> starts with <name2> .
block_content = <name3> [ 2 : - 2 ] . <name5> ( )	take elements of <name3> from second to second last element and <name5> the whitespaces surrounding the result ,
<name3> <name4> . verbatim <name5> <name2> == <name4> . verbatim :	substitute the result for <name2> . <name3> <name4> .verbatim is true <name5> <name2> equals <name4> .verbatim ,
<name6> . verbatim = <name4>	<name6> .verbatim is boolean <name4> .
<name1> <name2> <name3> <name4> <name5> . verbatim :	<name1> <name2> <name3> is <name4> contained in <name5> .verbatim ,
<name2> <name6> . startswith ( <name3> ) :	<name2> <name6> starts with <name3> ,
<name4> = <name3> ( <name2> , token_string [ <val5> : - <val5> ] . strip ( ) )	<name4> is an instance of <name3> class , created with <val5> arguments : <name2> ,
elif <name5> . startswith ( <name1> ) :	and elements of <name5> from second to second last element wiht the whitespaces striped from the both sides . otherwise if <name5> starts with <name1> ,
<name5> <name1> [ : 9 ] in ( <val6>   , <val2>   ) :	<name5> first nine elements of <name1> is string <val6> or <val2> ,
<name2> . verbatim = 'end%s'   % <name3>	append <name3> to a string 'end' , substitute the result for <name2> .verbatim .
<name5> = <name6> ( <name2> , <name3> )	<name5> is an instance of <name6> class , created with 2 arguments : <name2> and <name3> .
elif <name3> . startswith ( <name1> ) :	otherwise if <name3> starts with <name1> ,
<name2> = ''	<name2> is an empty string .
<name3> <name1> . find ( <name5> ) :	call the method <name1> .find with an argument <name5> , <name3> it evaluates to true ,
content = <name6> [ 2 : - 2 ] . <name1> ( )	take elements of <name6> from second to second last element and <name1> the whitespaces surrounding the result ,
<name5> = <name3> ( <name1> , <name6> )	substitute the result for <name6> . <name5> is an instance of <name3> class , created with 2 arguments : <name1> and <name6> .
else :	if not ,
<name4> = <name1> ( <name6> , <name2> )	<name4> is an instance of <name1> class , created with 2 arguments : <name6> and <name2> .
<name1> . lineno = <name2> . lineno	substitute <name2> .lineno for <name1> .lineno .
\ <name6> . lineno += <name4> . count ( <val1>   ) \	\ call the method <name4> .count with an argument <val1> , append the result to <name6> .lineno . \
<name4> <name5>	<name4> <name5> .
<name6> <name1> ( <name5> ) :	derive the <name6> <name1> form the base <name6> <name5> .
def <name5> ( <name1> , tokens ) :	define the method <name5> with 2 arguments : <name1> and token .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .tokens .
<name1> . tags = { }	<name1> .tags is an empty dictionary .
<name3> . filters = { }	<name3> .filters is an empty dictionary .
<name1> <name3> <name5> <name4> :	<name1> every <name3> <name5> <name4> ,
<name6> . add_library ( <name2> )	call the method <name6> .add_library with an argument <name2> .
def <name1> ( <name6> , <name3> = <name2> ) :	define the emethod <name1> with 2 arguments : <name6> and <name3> set to <name2> .
<name3> <name4> <name5> <name1> :	<name3> <name4> <name5> <name1> ,
<name4> = [ ]	<name4> is an empty list ,
<name3> = <name2> . create_nodelist ( )	call the method <name2> .create_nodelist , substitute the result for <name3> .
<name4> <name5> . tokens :	<name4> <name5> .tokens is true ,
<name1> = <name2> . next_token ( )	call the method <name2> .next_token , substitute the result for <name1> .
<name6> <name2> . token_type == <val5> :	<name6> <name2> .token_type equals integer <val5> ,
<name4> . extend_nodelist ( <name1> , <name5> ( <name6> . contents ) , <name6> )	call the method <name4> .extend_nodelist with 3 arguments : <name1> , instance of <name5> class , created with an argument <name6> .contents ,
elif <name3> . token_type == <val1> :	and <name3> . otherwise if <name3> .token_type equals integer <val1> ,
<name3> not <name2> . contents :	<name3> <name2> .contents is false ,
<name4> . empty_variable ( <name1> )	call the method <name4> .empty_variable with an argument <name1> ,
<name6> :	<name6> ,
<name1> = <name3> . compile_filter ( <name5> . contents )	call the method <name3> .compile_filter with an argument <name5> .contents , substitute the result for <name1> .
except <name2> as <name1> :	if <name2> , replaced with <name1> , exception is caught ,
<name3> not <name2> . compile_filter_error ( <name1> , <name6> ) :	call the method <name2> .compile_filter_error with 2 arguments : <name1> and <name6> , <name3> it evaluates to false ,
     <name3>	<name3> an exception ,
<name5> = <name1> . create_variable_node ( <name6> )	call the method <name1> .create_variable_node with an argument <name6> , substitute the result for <name5> .
<name2> . extend_nodelist ( <name5> , <name4> , <name3> )	call the method <name2> .extend_nodelist with 3 arguments : <name5> , <name4> and <name3> .
elif <name1> . token_type == <val3> :	otherwise if <name1> .token_type equals integer <val3> ,
<name1> :	<name1> ,
<name3> = <name4> . contents . <name6> ( ) [ 0 ]	<name6> <name4> .contents into separate words , substitute the first element of the result for <name3> .
except <name2> :	if <name2> exception is caught ,
<name2> . empty_block_tag ( <name5> )	call the method <name2> .empty_block_tag with an argument <name5> .
<name1> <name5> <name2> <name6> :	<name1> <name5> is contained <name2> <name6> ,
   <name5> . prepend_token ( <name1> )	call the method <name5> .prepend_token with an argument <name1> ,
<name1> <name3>	<name1> <name3> .
<name6> . enter_command ( <name3> , <name5> )	call the method <name6> .enter_command with 2 arguments <name3> and <name5> .
<name5> :	<name5> ,
<name1> = <name5> . tags [ <name4> ]	substitute the value under the <name4> key of <name5> .tags dictionary for <name1> .
except <name2> :	if <name2> exception is caught ,
<name2> . invalid_block_tag ( <name4> , <name1> , <name6> )	call the method <name2> .invalid_block_tag with 3 arguments : <name4> , <name1> and <name6> .
<name3> :	<name3> ,
<name4> = <name1> ( <name3> , <name2> )	call the method <name1> with 2 arguments <name3> and <name2> , substitute the result for <name4> .
except <name3> as <name4> :	if <name3> , renamed to <name4> , exception is caught ,
<name2> not <name5> . compile_function_error ( <name6> , <name4> ) :	call the method <name5> .compile_function_error with 2 arguments <name6> and <name4> , <name2> it evaluates to false ,
     <name5>	<name5> an exception ,
<name4> . extend_nodelist ( <name2> , <name6> , <name5> )	call the method <name4> .extend_nodelist with 3 arguments : <name2> , <name6> and <name5> .
<name4> . exit_command ( )	call the method <name4> .exit_command .
<name6> <name3> :	<name6> <name3> is true ,
<name3> . unclosed_block_tag ( <name4> )	call the method <name3> .unclosed_block_tag with an argument <name4> .
<name5> <name1>	<name5> <name1> .
def <name2> ( <name1> , <name4> ) :	define the method <name2> with 2 arguments : <name1> and <name4> .
<name1> <name3> . tokens :	<name1> <name3> .tokens is true ,
<name6> = <name5> . next_token ( )	call the method <name5> .next_token , substitute the result for <name6> .
<name6> <name1> . token_type == <name4> <name5> <name1> . contents == <name2> :	<name6> <name1> .token_type equals <name4> <name5> <name1> .contents equals <name2> ,
<name4>	<name4> nothing .
<name1> . unclosed_block_tag ( [ <name5> ] )	call the method <name1> .unclosed_block_tag with an argument list with an element <name5> .
def <name5> ( <name6> , <name3> ) :	define the method <name5> with 2 arguments <name6> and <name3> .
<name4> <name6> ( <name5> )	<name4> an instance of <name6> class with an argument <name5> .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name3> <name4> ( )	<name3> an instance of <name4> class .
def <name5> ( <name4> , <name1> , <name2> , <name3> ) :	define the method <name5> with 4 arguments : <name4> , <name1> , <name2> and <name3> .
<name3> <name2> . must_be_first <name1> <name6> :	<name3> <name2> .must_be_first is true <name1> <name6> is true ,
<name3> :	<name3> ,
<name2> <name3> . contains_nontext :	<name2> <name3> .contains_nontext is true ,
<name3> <name1>	<name3> <name1> exception ,
except <name1> :	if <name1> exception is raised ,
"<name2> <name3> ( ""%r must be the first tag "" ""in the template."" % <name1> )"	"<name2> <name3> ( ""%r must be the first tag in the template."" , where '%s' is replaced with <name1> ."
<name4> isinstance ( <name3> , <name5> ) <name6> <name2> isinstance ( <name1> , <name4> ) :	<name4> <name3> is an instance of <name5> <name6> <name1> is <name2> an instance of <name4> class .
<name3> . contains_nontext = <name6>	<name3> .contains_nontext is boolean <name6> .
<name2> . <name3> ( <name1> )	<name3> <name1> to <name2> .
def <name6> ( <name4> , <name3> , <name5> ) :	define the method <name6> with 3 arguments : <name4> , <name3> and <name5> .
pass	do nothing .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
pass	do nothing .
def error ( <name3> , <name1> , <name2> ) :	define the method enter_command with 3 arguments : <name3> , <name1> and <name2> .
<name3> <name4> ( <name6> )	<name3> an instance of <name4> class with an argument <name6> .
def <name2> ( <name6> , <name4> ) :	define the method <name2> with 2 arguments : <name6> and <name4> .
raise <name1> . error ( <name6> , <val4> )	call the method <name1> .error with 2 arguments : <name6> and string <val4> , return the result .
def <name6> ( <name3> , <name4> ) :	define the method <name6> with 2 arguments : <name3> and <name4> .
raise <name1> . error ( <name4> , <val2> )	call the method <name1> .error with 2 arguments : <name4> and string <val2> , return the result .
def <name3> ( <name2> , <name6> , <name4> , <name5> = <name1> ) :	define the method <name3> with 4 arguments : <name2> , <name6> , <name4> and <name5> as <name1> .
<name1> <name3> :	<name1> <name3> is true ,
def <name3> ( <name6> , <name1> ) :	return the result . define the method <name3> with 2 arguments : <name6> and <name1> .
<name5> <name6> . error ( <name4> , <val3> % ', '   . join ( parse_until ) )	<name5> an <name6> .error with 2 arguments : <name4> and string <val3> ,
def <name6> ( <name4> , <name2> , <name1> ) :	where '%s' is replaced with parse_until elements joined into a string , separated with ', ' . define the method <name6> with 3 arguments : <name4> , <name2> and <name1> .
pass	do nothing .
def <name3> ( <name6> , <name2> , <name1> ) :	define the method <name3> with 3 arguments : <name6> , <name2> and <name1> .
pass	do nothing .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name6> <name3> . tokens . pop ( 0 )	remove first element from <name3> .tokens , <name6> removed element .
def <name6> ( <name2> , <name3> ) :	define the function <name6> with 2 arguments : <name2> and <name3> .
<name5> . tokens . <name4> ( 0 , <name1> )	<name4> <name1> at the beginning of <name5> .tokens .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
del <name3> . tokens [ 0 ]	delete the first element of <name3> .tokens .
def <name4> ( <name3> , <name5> ) :	define the function <name4> with 2 arguments : <name3> and <name5> .
<name4> . tags . <name3> ( <name5> . tags )	<name3> <name4> .tags dictionary with <name5> .tags .
<name4> . filters . <name5> ( <name3> . filters )	<name5> <name4> .filters dictionary with <name3> .filters .
def <name3> ( <name2> , <name4> ) :	define the function <name3> with 2 arguments : <name2> and <name4> .
<name4> <name3> ( <name5> , <name1> )	<name4> an instance of <name3> class , created with 2 arguments : <name5> and <name1> .
def <name6> ( <name4> , <name5> ) :	define the function <name6> with 2 arguments : <name4> and <name5> .
<name1> <name2> <name6> <name4> . filters :	<name1> <name2> is contained <name6> <name4> .filters ,
<name2> <name5> . filters [ <name6> ]	<name2> the value under the <name6> key of the <name5> .filters dictionary .
else :	if not ,
<name6> <name4> ( <name5> ) :	derive the <name6> <name4> form the base <name6> <name5> .
def __init__ ( <name2> , <name6> ) :	define the function next_space_index with 2 arguments : <name2> and <name6> .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .subject .
<name5> . pointer = <val1>	<name5> .pointer is integer <val1> .
<name5> . backout = [ ]	<name5> .backout is an empty list .
<name2> . tagname = <name2> . tag ( )	call the method <name2> .tag , substitute the result for <name2> .tagname .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name3> <name1> ( <val4>   )	<name3> an <name1> with an argument string <val4> .
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name3> <name5> . pointer <  len ( <name5> . subject )	if <name5> .pointer is smaller than length of <name5> .subject , <name3> boolean True , otherwise <name3> False .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name2> not len ( <name5> . backout ) :	<name2> length of <name5> .backout is greater than zero ,
"<name1> <name3> ( ""back called without some previous "" ""parsing"" )"	"<name1> an <name3> exception with an argument string ""back called without some previous parsing"" ."
<name4> . pointer = <name4> . backout . pop ( )	remove the first element from <name4> .backout , substitute the result for <name4> .pointer .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name6> = <name1> . <name6>	substitute <name1> .subject for <name6> .
<name6> = <name3> . pointer	substitute <name3> .pointer for <name6> .
<name2> <name5> >= len ( <name1> ) :	<name2> <name5> is greater than or equal to length of <name1> .
"<name1> <name5> ( ""expected another tag, found "" ""end of string: %s"" % subject )"	"<name1> an <name5> exception with an argument string ""expected another tag, found end of string: %s"" ,"
<name4> = <name6>	where '%s' is replaced with subject . substitute <name6> for <name4> .
\ <name5> <name4> <  len ( <name3> ) <name2> <name3> [ <name4> ] <name1> in ( ' '   , '\\t'   ) : \	<name5> <name4> is lesser than length of <name3> <name2> <name4> - th element of <name3> is <name1> an empty space or tab character ,
<name2> += <val5>	increment <name2> by integer <val5> .
<name1> = <name3> [ <name6> : <name5> ]	take <name3> elements from <name6> - th to <name5> - th index , substitute it for <name1> .
\ <name3> <name1> <  len ( <name6> ) <name4> <name6> [ <name1> ] in ( ' '   , '\\t'   ) : \	<name3> <name1> is lesser than length of <name6> <name4> <name1> - th element of <name6> is an empty space or tab character ,
<name4> += <val5>	increment <name4> by integer <val5> .
<name3> . backout . <name4> ( <name3> . pointer )	<name4> <name3> .pointer to <name3> .backout .
<name1> . pointer = <name2>	substitute <name2> for <name1> .pointer .
<name6> <name3>	<name6> <name3> .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name3> = <name1> . <name3>	substitute <name1> .subject for <name3> .
<name3> = <name4> . pointer	substitute <name4> .pointer for <name3> .
def <name6> ( <name2> , <name4> ) :	define the <name6> with 2 arguments : <name2> and <name4> .
\ <name4> <name5> <  len ( <name1> ) <name2> <name1> [ <name5> ] <name6> in ( ' '   , '\\t'   ) : \	<name4> <name5> is lesser than length of <name1> <name2> <name5> - th element of <name1> is <name6> an empty space or tab character ,
<name6> = <name3> [ <name4> ]	substitute <name4> - th element of <name3> for <name6> .
<name6> += <val2>	increment <name6> by integer <val2> .
<name5> <name3> <  len ( <name2> ) <name4> <name2> [ <name3> ] != <name1> :	<name5> <name3> is lesser than length of <name2> <name4> <name3> - th element of <name2> is not equal to <name1> ,
     <name6> += 1	increment <name6> by one .
<name4> <name5> >= len ( <name6> ) :	<name4> <name5> is greater than , or equal to <name6> ,
"     <name3> <name1> ( ""Searching for value. "" ""Unexpected end of string in column %d: %s"" % ( i , subject ) )"	"<name3> an <name1> exception with an argument string ""Searching for value. Unexpected end of string in column %d: %s"" ,"
<name5> += 1	where '%d' is replaced with <name5> and '%s' is replaced with subject . increment <name5> by one .
<name4> <name3>	<name4> <name3> .
<name5> <name6> >= len ( <name4> ) :	<name5> <name6> is greater than or equal to length of <name4> ,
"<name4> <name5> ( ""Searching for value. Expected another "" ""value but found end of string: %s"" % subject )"	"<name4> an <name5> exception with an argument ""Searching for value. Expected another value but found end of string: %s"" ,"
<name6> = <name2>	substitute <name2> for <name6> .
<name6> += <val5>	increment <name6> by integer <val5> ,
<name1> <name5> <  len ( <name6> ) <name4> <name6> [ <name5> ] != <name6> [ <name2> ] :	<name1> <name5> is lesser than length of <name6> <name4> <name5> - th element of <name6> is not equal to <name2> - th element of <name6> ,
<name1> += <val6>	increment <name1> by integer <val6> ,
<name3> <name5> >= len ( <name1> ) :	<name3> <name5> is greater than length of <name1> ,
"<name4> <name6> ( ""Searching for value. Unexpected "" ""end of string in column %d: %s"" % ( i , subject ) )"	"<name4> an <name6> exception with an argument string ""Searching for value. Unexpected end of string in column %d: %s"" ,"
<name5> += <val2>	where '%d' is replaced with <name5> and '%s' is replaced with subject . increment <name5> by integer <val2> ,
<name5> = <name4> ( <name3> , <name5> )	call the function <name4> with 2 arguments : <name3> and <name5> , substitute the result for <name5> .
<name1> = <name3> [ <name4> : <name5> ]	substitute <name3> elements from <name4> - th to <name5> - th index for <name1> .
\ <name6> <name1> <  len ( <name3> ) <name4> <name3> [ <name1> ] in ( ' '   , '\\t'   ) : \	<name6> <name1> is lesser than length of <name3> <name4> <name1> - th element of <name3> is an empty space or tab character .
<name4> += <val3>	increment <name4> by integer <val3> ,
<name4> . backout . <name6> ( <name4> . pointer )	<name6> <name4> .pointer to <name4> .backout .
<name3> . pointer = <name6>	substitute <name6> for <name3> .pointer .
<name2> <name1>	<name2> <name1> .
else :	if not ,
<name2> = <name1>	substitute <name1> for <name2> .
<name2> = <name3> ( <name6> , <name2> )	call the function <name3> with 2 arguments <name6> and <name2> , substitute the result for <name2> .
<name2> = <name6> [ <name3> : <name5> ]	take <name6> elements from <name3> - th to <name5> - th index , substitute it for <name2> .
\ <name2> <name6> <  len ( <name1> ) <name3> <name1> [ <name6> ] in ( ' '   , '\\t'   ) : \	<name2> <name6> is lesser than length of <name1> <name3> <name6> - th element of <name1> is an empty space or tab character .
<name2> += <val5>	increment <name2> by integer <val5> , .
<name2> . backout . <name1> ( <name2> . pointer )	<name1> <name2> .pointer to <name2> .backout .
<name5> . pointer = <name3>	substitute <name3> for <name5> .pointer .
<name2> <name5>	<name2> <name5> .
"\ <name4> = r """" "" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\\s*%(filter_sep)s\\s*      (?P<filter_name>\\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )"" """" % {   'constant'   : constant_string , 'num'   : r '[-+\\.]?\\d[\\d\\.e]*'   , 'var_chars'   : ""\\w\\."" , 'filter_sep'   : re . escape ( FILTER_SEPARATOR ) , 'arg_sep'   : re . escape ( FILTER_ARGUMENT_SEPARATOR ) , }\"	"\ <name4> is a raw string ""^ ( ? P < constant > % ( constant ) s ) |^ ( ? P < var > [ % ( var_chars ) s ] + | % ( num ) s ) |  ( ? : \\ s * % ( filter_sep ) s \\ s * \"
filter_re = <name1> . compile ( <name2> , <name1> . UNICODE |  <name1> . VERBOSE )	"\ ( ? P < filter_name >\\ w + ) ( ? : % ( arg_sep ) s ( ? : ( ? P < constant_arg > % ( constant ) s ) | ( ? P < var_arg > [ % ( var_chars ) s ] + | % ( num ) s ) ) ) ? ) "",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\\.]?\\d[\\d\\.e]*', 'var_chars' with string "" \\ w \\ . "" , 'filter_sep' with result of the function <name1> .escape called with an argument FILTER_SEPARATOR , anbd 'arg_sep' with result of the function <name1> .escape called with an argument FILTER_ARGUMENT_SEPARATOR . call the function <name1> .compile with 2 arguments : <name2> and result for bitwise OR on 2 operands <name1> .UNICODE and <name1> .VERBOSE , \"
<name5> <name4> ( <name2> ) :	substitute the result for filter_re . derive the <name5> <name4> form the base <name5> <name2> .
def <name2> ( <name6> , <name3> , <name5> ) :	define the function <name2> with 3 arguments : <name6> , <name3> and <name5> .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .token .
<name5> = <name6> . finditer ( <name1> )	call the method <name6> .finditer with an argument <name1> , substitute the result for <name5> .
<name5> = <name1>	<name5> is <name1> .
<name3> = [ ]	<name3> is an empty list .
<name4> = <val3>	<name4> is integer <val3> .
<name3> <name5> <name4> <name2> :	<name3> every <name5> <name4> <name2> ,
<name1> = <name5> . <name1> ( )	call the method <name5> .start , substitute the result for <name1> .
<name2> <name6> != <name4> :	<name2> <name6> is not equal to <name4> .
"<name6> <name5> ( ""Could not parse some characters: "" ""%s|%s|%s"" % ( token [ : upto ] , token [ upto : start ] , token [ start : ] ) )"	"<name6> an <name5> exception with an argument string ""Could not parse some characters: %s|%s|%s"" ,"
<name4> <name6> <name2> <name5> :	where '%s' <name2> replaced with first upto elements of token string , token string elements from upto to start index , and token string elements from start index to the end . <name4> <name6> <name2> <name5> ,
<name4> , <name2> = <name3> . group ( <val5> , <val6> )	call the method <name3> .group with 2 arguments : strings <val5> and <val6> , substitute the result for <name4> and <name2> , respectively .
<name3> <name1> :	<name3> <name1> is true ,
<name1> :	<name1> ,
     <name2> = <name4> ( <name1> ) . <name6> ( { }  )	instantiate <name4> class , with an argument <name1> , call the <name6> method with an empty dictionary as an argument , substitute the result for <name2> .
except <name5> :	if <name5> exception is not caught ,
     <name3> = <name2>	<name3> is <name2> .
elif <name5> <name1> <name2> :	otherwise if <name5> <name1> <name2> ,
"<name6> <name2> ( ""Could not find variable at "" ""start of %s."" % <name5> )"	"<name6> an <name2> exception with an argument ""Could not find variable at start of %s."" , replace '%s' with <name5> ."
else :	if not ,
<name4> = <name1> ( <name5> )	<name4> is an instance of <name1> class , created with an argument <name5> .
else :	if not ,
<name2> = <name4> . group ( <val1> )	call the methof <name4> .group with an argument <val1> , substitute the result for <name2> .
<name4> = [ ]	<name4> is an empty list .
<name1> , var_arg = <name5> . group ( <val4> , <val6> )	call the method <name5> .group with 2 arguments : strings <val4> and <val6> , substitute the result for <name1> ,
<name4> <name3> :	and var_arg , respectively . <name4> <name3> is true ,
args . append ( ( <name5> , <name2> ( constant_arg ) . <name6> ( { }  ) ) )	take a tuple with 2 elements : boolean <name5> and method <name6> called with an empty dictionary on the instance of <name2> class ,
elif <name2> :	created with an argument constant_arg , append it to args . otherwise if <name2> is true ,
<name2> . <name6> ( ( True , <name5> ( var_arg ) ) )	take a tuple with 2 elements : boolean False and instance of <name5> class , created with an argument constant_arg , <name6> it to <name2> .
<name4> = <name5> . find_filter ( <name3> )	call the method <name5> .find_filter with an argument <name3> , substitute the result for <name4> .
<name1> . args_check ( <name4> , <name2> , <name5> )	call the method <name1> .args_check with 3 arguments : <name4> , <name2> and <name5> .
<name3> . <name4> ( ( <name5> , <name6> ) )	<name4> a tuple with 2 arguments : <name5> and <name6> to <name3> .
<name5> = <name4> . end ( )	call the method <name4> .end , substitute the result for <name5> .
<name6> <name3> != len ( <name4> ) :	<name6> <name3> is not equal to length of <name4> ,
<name2> . <name5> = <name5>	where '%s' is replaced with elemnts of token from upto index till the end , and token . substitute <name5> for <name2> .filters .
<name4> . var = <name3>	substitute <name3> for <name4> .var .
def <name5> ( <name2> , <name3> , <name6> = <name1> ) :	define the method <name5> with 3 arguments : <name2> , <name3> and <name6> set to boolean <name1> .
<name2> isinstance ( <name3> . var , <name1> ) :	<name2> <name3> .var is an instance of <name1> class ,
<name5> :	<name5> ,
<name4> = <name5> . var . resolve ( <name6> )	call the method <name5> .var .resolve with an argument <name6> , substitute it for <name4> .
except <name2> :	if <name2> exception is caught ,
<name4> <name5> :	<name4> <name5> is true ,
<name1> = <name6>	<name1> is <name6> ,
else :	if not ,
<name4> <name6> . TEMPLATE_STRING_IF_INVALID :	<name4> <name6> .TEMPLATE_STRING_IF_INVALID is true ,
     <name6> <name4>	use <name6> variable <name4> .
<name6> <name3> <name4> <name2> :	<name6> <name3> <name4> <name2> ,
         <name2> = <val5>   <name4> <name1> . TEMPLATE_STRING_IF_INVALID	if <val5> is contained <name4> <name1> .TEMPLATE_STRING_IF_INVALID , <name2> is boolean True , otherwise it is False .
<name4> <name1> :	<name4> <name1> is true ,
         <name3> <name5> . TEMPLATE_STRING_IF_INVALID % <name1> . var	format <name5> .TEMPLATE_STRING_IF_INVALID with <name1> .var , <name3> the result .
<name6> <name4> . TEMPLATE_STRING_IF_INVALID	<name6> <name4> .TEMPLATE_STRING_IF_INVALID .
else :	if not ,
     <name6> = <name3> . TEMPLATE_STRING_IF_INVALID	substitute <name3> .TEMPLATE_STRING_IF_INVALID with <name6> .
else :	if not ,
<name1> = <name4> . var	substitute <name4> .var for <name1> .
<name1> <name6> , <name5> <name3> <name4> . filters :	<name1> every <name6> and <name5> <name3> <name4> .filters ,
<name4> = [ ]	<name4> is an empty list ,
<name3> <name2> , <name1> <name5> <name4> :	<name3> every <name2> and <name1> <name5> <name4> ,
<name1> not <name6> :	<name1> <name6> is false ,
<name3> . <name1> ( <name4> ( <name2> ) )	call the function <name4> with an argument <name2> , <name1> it to <name3> .
else :	if not ,
<name2> . <name4> ( <name5> . resolve ( <name6> ) )	call the method <name5> .resolve with an argument <name6> , <name4> the result to <name2> .
<name4> getattr ( <name5> , <val6>   , False ) :	<name4> <val6> attribute of <name5> object exists and is true ,
<name4> = <name1> ( <name4> , <name5> . use_tz )	call the function <name1> with 2 arguments : <name4> and <name5> .use_tz , substitute the result for <name4> .
<name5> getattr ( <name1> , <val3>   , False ) :	<name5> <val3> attribute of <name1> object exists and is true ,
new_obj = <name3> ( <name5> , <name2> = <name6> . <name2> , * <name4> )	call the function <name3> with 3 arguments : <name5> , <name2> set to <name6> .autoescape and unpacked list <name4> ,
else :	substitute the result for new_obj . if not ,
<name4> = <name6> ( <name5> , * <name3> )	call the function <name6> with 2 arguments : <name5> and unpacked list <name3> , substitute the result for <name4> .
<name1> getattr ( <name2> , <val6>   , False ) <name4> isinstance ( <name3> , <name5> ) :	<name1> <val6> attribute of <name2> object exists <name4> is true <name4> <name3> is an instance of <name5> ,
<name5> = <name6> ( <name3> )	call the function <name6> with an argument <name3> , substitute the result for <name5> .
elif isinstance ( <name3> , <name5> ) :	otherwise if <name3> is an instance of <name5> ,
<name1> = <name2> ( <name5> )	call the function <name2> with an argument <name5> , substitute the result for <name1> .
else :	if not ,
<name2> = <name3>	substitute <name3> for <name2> .
<name2> <name1>	<name2> <name1> .
def <name3> ( <name4> , <name1> , <name2> ) :	define the method <name3> with 3 arguments : <name4> , <name1> and <name2> .
<name1> = <name5> ( <name1> )	convert <name1> into a <name5> and substitute it for <name1> .
<name6> = len ( <name2> ) + 1	calculate length of <name2> and increment it by one , substitute the result for <name6> .
<name1> = getattr ( <name1> , <val3>   , <name1> )	get the <val3> attribute from <name1> object , if it exists substitute it for <name1> .
<name4> , <name5> , <name3> , <name1> = <name6> ( <name2> )	call the function <name6> with an argument <name2> , substitute the result for <name4> , <name5> , <name3> and <name1> , respectively .
<name3> = len ( <name5> )	calculate the length of <name5> , substitute it for <name3> .
<name2> = len ( <name4> or [ ] )	substitute the length of <name4> for <name2> .
<name5> <name2> <  ( <name3> - <name4> ) <name1> <name2> >  <name3> :	<name5> <name2> is lesser than difference of <name3> and <name4> , <name1> <name5> <name2> is greater than <name3> ,
<name6> <name1> ( <val3> % ( name , alen - dlen , plen ) )	<name6> an <name1> exception with an argument string <val3> ,
<name5> <name2>	where '%d' is replaced with name , dlen subtracted from alen , and plen . <name5> boolean <name2> .
<name1> = staticmethod ( <name1> )	<name1> is a static method .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name3> <name1> . token	<name3> <name1> .token .
def <name5> ( <name1> , <name3> ) :	define the method <name5> with 2 arguments : <name1> and <name3> .
"<name3> . warn ( ""resolve_variable() is deprecated. Use django.template."" ""Variable(path).resolve(context) instead"" , RemovedInDjango20Warning , stacklevel = 2 )"	call the function <name3> .warn with 3 arguments :
return <name6> ( <name4> ) . <name3> ( <name5> )	"string ""resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead"" , RemovedInDjango20Warning , and stacklevel set to integer 2 . call the method <name3> with an argument <name5> , from the instance of <name6> class , created with an argument <name4> ."
<name5> <name2> ( <name3> ) :	derive the <name5> <name2> form the base <name5> <name3> .
def <name4> ( <name1> , <name2> ) :	define the method <name4> with 2 arguments <name1> and <name2> .
<name1> . <name6> = <name6>	substitute <name6> for <name1> .var .
<name2> . literal = <name5>	<name2> .literal is <name5> ,
<name4> . lookups = <name5>	<name4> .lookups is <name5> .
<name4> . translate = <name5>	<name4> .translate is boolean <name5> .
<name6> . message_context = <name3>	<name6> .message_context is <name3> .
<name2> <name6> isinstance ( <name3> , <name5> . string_types ) :	<name2> <name3> is <name6> an instance of <name5> .string_types ,
<name2> <name3> ( <val4> % <name6> ( <name1> ) )	<name2> an <name3> exception with an argument string <val4> , replace '%s' with <name6> of <name1> .
<name2> :	<name2> ,
<name6> . literal = float ( <name2> )	convert <name2> into an floating point number , substitute it for <name6> .literal .
<name2> <val5>   <name3> <name6> <name4> <name1> <val2>   <name3> <name6> <name4> . lower ( ) :	<name2> <val5> is <name3> contained <name6> <name4> <name1> <val2> is <name3> contained <name6> <name4> converted into lowercase ,
<name3> . literal = int ( <name3> . literal )	convert <name3> .literal into an integer , substitute it for <name3> .literal .
<name2> <name3> . endswith ( <val4>   ) :	<name2> <name3> ends with <val4> ,
<name1> <name4>	<name1> an <name4> exception .
except <name4> :	if <name4> exception is caught ,
<name3> <name4> . startswith ( <val1>   ) <name6> <name4> . endswith ( <val2>   ) :	<name3> <name4> starts with <val1> <name6> <name4> ends with <val2> ,
<name6> . translate = <name4>	<name6> .translate is boolean <name4> .
<name6> = <name6> [ <val4> : - 1 ]	remove first <val4> and last <val4> elements from <name6> .
<name5> :	<name5> ,
self . literal = <name5> ( <name1> ( <name2> ) )	call the function <name1> with an argument <name2> , use it as an argument for the call to the function <name5> ,
except <name2> :	substitute the result for self .literal . if <name2> exception is caught ,
<name6> <name4> . find ( <name3> + <val2>   ) >  - 1 or <name4> [ 0 ] == <val2>   :	call the function <name4> .find with an argument : <val2> appended to <name3> , <name6> the result is greater than integer -1 ,
<name4> . lookups = <name6> ( <name5> . split ( <name1> ) )	where '%s' is replaced with <name5> . call the method <name5> .split with an argument <name1> , convert the result to a <name6> and substitute it for <name4> .lookups .
def <name1> ( <name6> , <name2> ) :	define the method <name1> with 2 arguments : <name6> and <name2> .
<name3> <name5> . lookups <name6> <name1> <name4> :	<name3> <name5> .lookups <name6> <name1> <name4> ,
<name1> = <name6> . _resolve_lookup ( <name3> )	call the function <name6> ._resolve_lookup with an argument <name3> , substitute the result for <name1> .
<name6> :	if <name6> ,
<name5> = <name2> . literal	substitute <name2> .literal for <name5> .
<name3> <name6> . translate :	<name3> <name6> .translate is true ,
<name6> <name5> . message_context :	<name6> <name5> .message_context is true ,
<name1> <name6> ( <name3> . message_context , <name2> )	call the function <name6> with an argument <name3> .message_context and <name2> , <name1> the result .
else :	if not ,
<name3> <name5> ( <name6> )	call the function <name5> with an argument <name6> , <name3> the result .
<name1> <name4>	<name1> <name4> .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name1> <val3> % ( <name4> . __class__ . __name__ , <name4> . var )	<name1> an string <val3> , where '%s' is replaced with <name4> .__class__ .__name__ and <name4> .var , respectively .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name6> <name4> . var	<name6> <name4> .var .
def <name1> ( <name2> , <name6> ) :	define the method <name1> with 2 arguments : <name2> and <name6> .
<name2> = <name3>	substitute <name3> for <name2> .
<name4> :	<name4> ,
<name5> <name6> <name1> <name4> . lookups :	<name5> <name6> <name1> <name4> .lookups ,
<name4> :	<name4> ,
<name2> = <name2> [ <name6> ]	substitute element at the <name6> index of <name2> for <name2> .
except ( <name4> , <name1> , <name2> , <name3> ) :	if <name4> , <name1> , <name2> or <name3> exceptions are caught ,
<name2> :	<name2> ,
       <name4> isinstance ( <name2> , <name3> ) <name6> getattr ( <name1> ( <name2> ) , <name5> ) :	<name4> <name2> is an instance of <name3> <name6> <name5> attribute of <name1> of <name2> is true ,
         <name1> <name3>	<name1> an <name3> exception .
<name3> = getattr ( <name3> , <name1> )	get the <name1> attribute of <name3> object , substitute it for <name3> .
except ( <name3> , <name6> ) :	if <name3> and <name6> exceptions are caught ,
     <name5> :	<name5> ,
         <name5> = <name5> [ int ( <name6> ) ]	convert <name6> to an integer and use it as index to obtain an element for list <name5> , substitute it for <name5> .
except ( <name3> , <name4> , <name6> , <name1> ) :	if <name3> , <name4> , <name6> or <name1> exceptions are caught ,
"         <name2> <name1> ( ""Failed lookup for key "" ""[%s] in %r"" , ( bit , current ) )"	"<name2> an <name1> exception with an argument string ""Failed lookup for key [%s] in %r"" ,"
<name1> <name4> ( <name6> ) :	where '%s' is replaced with bit and '%r' is replaced with <name6> . <name1> <name6> is <name4> object ,
<name3> getattr ( <name4> , <val5>   , False ) :	get the <val5> attribute of <name4> object , <name3> it exists and is true ,
     pass	do nothing .
elif getattr ( <name3> , <val6>   , False ) :	otherwise , get the <val6> attribute of <name3> object , if it exists and is true ,
     <name5> = <name3> . TEMPLATE_STRING_IF_INVALID	substitute <name3> .TEMPLATE_STRING_IF_INVALID for <name5> .
else :	if not ,
     <name5> :	<name5> ,
         <name2> = <name2> ( )	call the function <name2> , substitute the result for <name2> .
except <name5> :	if <name5> exception is caught ,
         <name2> :	<name2> ,
             <name6> ( <name2> )	call the function <name6> with an argument <name2> ,
except <name6> :	if <name6> exception is caught ,
             <name2> = <name5> . TEMPLATE_STRING_IF_INVALID	substitute <name5> .TEMPLATE_STRING_IF_INVALID for <name2> ,
else :	if not ,
             <name5>	<name5> an exception ,
except <name5> as <name2> :	if <name5> , renamed to <name2> , exception is caught ,
<name3> getattr ( <name5> , <val6>   , False ) :	get the <val6> attribute of <name5> object , <name3> it exists and is true ,
<name1> = <name5> . TEMPLATE_STRING_IF_INVALID	substitute <name5> .TEMPLATE_STRING_IF_INVALID for <name1> .
else :	if not ,
<name4>	<name4> an exception .
<name1> <name6>	<name1> <name6> .
<name6> <name4> ( <name5> ) :	derive the <name6> <name4> form the base <name6> <name5> .
<name6> = <name4>	<name6> is boolean <name4> .
<name4> = ( <val5>   , )	<name4> is an tuple with an element <val5> .
def <name1> ( <name4> , <name3> ) :	define the method <name1> with 2 arguments : <name4> and <name3> .
pass	do nothing .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name4> <name3>	<name4> <name3> .
def <name6> ( <name4> , <name3> ) :	define the method <name6> with 2 arguments : <name4> and <name3> .
<name2> = [ ]	<name2> is an empty list .
<name3> isinstance ( <name5> , <name2> ) :	<name3> <name5> is an instance of <name2> ,
<name4> . <name2> ( <name1> )	<name2> <name1> to <name4> .
<name1> <name5> <name6> <name2> . child_nodelists :	<name1> every <name5> <name6> <name2> .child_nodelists ,
<name2> = getattr ( <name4> , <name6> , <name1> )	get <name6> attribute of <name4> object , if it exists substitute it for <name2> , if not <name2> is <name1> .
<name4> <name1> :	<name4> <name1> is true ,
<name4> . <name2> ( <name3> . get_nodes_by_type ( <name6> ) )	call the method <name3> .get_nodes_by_type with an argument <name6> , <name2> <name4> with the result .
<name1> <name3>	<name1> <name3> .
<name5> <name2> ( <name6> ) :	derive the <name5> <name2> form the base <name5> <name6> .
<name2> = <name4>	<name2> is boolean <name4> .
def <name6> ( <name1> , <name3> ) :	define the method <name6> with 2 arguments : <name1> and <name3> .
<name5> = [ ]	<name5> is an empty list .
<name5> <name3> <name4> <name6> :	<name5> every <name3> <name4> <name6> ,
<name5> isinstance ( <name2> , <name6> ) :	<name5> <name2> is an instance of <name6> ,
<name2> = <name5> . render_node ( <name3> , <name1> )	call the method <name5> .render_node with 2 arguments : <name3> and <name1> , substitute the result for <name2> .
else :	if not ,
<name4> = <name6>	substitute <name6> for <name4> .
<name2> . <name5> ( <name4> ( <name6> ) )	call the function <name4> with an argument <name6> , <name5> the result to <name2> .
<name4> <name3> ( ''   . join ( <name5> ) )	call the function <name3> with an argument , elements of <name5> joined into a string , <name4> the result .
def <name3> ( <name5> , <name1> ) :	define the method <name3> with 2 arguments : <name5> and <name1> .
nodes = [ ]	modes is an empty list .
<name3> <name2> <name4> <name6> :	<name3> every <name2> <name4> <name6> ,
<name3> . <name4> ( <name1> . get_nodes_by_type ( <name5> ) )	call the method <name1> .get_nodes_by_type with an argument <name5> , <name4> <name3> with it .
<name3> <name1>	<name3> <name1> .
def <name1> ( <name6> , <name5> , <name4> ) :	define the method <name1> with 3 arguments : <name6> , <name5> and <name4> .
<name2> <name3> . render ( <name6> )	call the method <name3> .render with an argument <name6> , <name2> the result .
<name1> <name2> ( <name5> ) :	derive the <name1> <name2> form the base <name1> <name5> .
def <name3> ( <name6> , <name4> ) :	define the method <name3> with 2 arguments : <name6> and <name4> .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .s .
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
return <name2> ( <val4> % <name6> . s [ : <val1> ] , 'ascii'   , errors = 'replace'   )	call the function <name2> with 3 arguments : string <val4> , with '%s' replaced with first <val1> elements of <name6> .s string ,
def <name2> ( <name6> , <name4> ) :	string 'ascii' and errors set to a string 'replace' , return the result . define the method <name2> with 2 arguments : <name6> and <name4> .
<name2> <name1> . s	<name2> <name1> .s .
def <name6> ( <name1> , <name5> ) :	define the function <name6> with 2 arguments : <name1> and <name5> .
<name1> = <name2> ( <name1> , <name6> = <name5> . <name6> )	call the method <name2> with 2 arguments : <name1> and <name6> = <name5> .use_tz , substitute the result for <name1> .
<name3> = <name1> ( <name3> , <name6> = <name4> . <name6> )	call the function <name1> with 2 arguments : <name3> and <name6> = <name4> .use_l10n , substitute the result for <name3> .
<name2> = <name6> ( <name2> )	call the function <name6> with an argument <name2> , substitute the result for <name2> .
<name1> ( ( <name4> . autoescape <name6> <name2> isinstance ( <name5> , <name3> ) ) <name1> isinstance ( <name5> , <name4> ) ) :	<name1> <name4> .autoescape is true <name6> <name5> is <name2> an instance of <name3> , <name1> <name5> is an instance of <name4> ,
<name4> <name2> ( <name3> )	call the function <name2> with an argument <name3> , <name4> the result .
else :	if not ,
<name6> <name3>	<name6> <name3> .
<name1> <name5> ( <name6> ) :	derive the <name1> <name5> form the base <name1> <name6> .
def <name2> ( <name1> , <name3> ) :	define the method <name2> with 2 arguments : <name1> and <name3> .
<name6> . <name4> = <name4>	substitute <name4> for <name6> .filter_expression .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name6> <val2> % <name5> . filter_expression	<name6> a string <val2> , substitute '%s' with <name5> .filter_expression .
def <name5> ( <name6> , <name4> ) :	define the method <name5> with 2 arguments <name6> and <name4> .
<name4> :	<name4> ,
<name3> = <name2> . filter_expression . resolve ( <name5> )	call the method <name2> .filter_expression .resolve with an argument <name5> , substitute the result for <name3> .
except <name3> :	if <name3> exception is caught ,
<name1> ''	<name1> an empty string .
<name5> <name1> ( <name2> , <name6> )	call the function <name1> with 2 arguments <name2> and <name6> , <name5> the result .
\ <name4> = <name6> . compile ( r <val5> ) \	\ call the function <name6> .compile with an argument raw string <val5> , substitute the result for <name4> . \
def <name6> ( <name3> , <name2> , <name4> = <name1> ) :	define the method <name6> : <name3> , <name2> and <name4> set to boolean <name1> .
<name2> not <name3> :	<name2> <name3> is false ,
<name5> { }	<name5> an empty dictionary .
<name4> = <name3> . <name4> ( <name5> [ 0 ] )	call the method <name3> .match with an argument first element of <name5> , substitute the result for <name4> .
<name1> = <name3> <name6> <name3> . group ( <val5> )	if <name3> is true <name6> call to the method <name3> .group with an argument integer <val5> evaluates to true , <name1> is boolean True ,
<name5> not <name1> :	otherwise it is boolean False . <name5> <name1> is false ,
<name6> not <name4> :	<name6> <name4> is false ,
<name4> { }	<name4> an empty dictionary .
<name2> len ( <name1> ) <  <val3> <name4> <name1> [ 1 ] != <val6>   :	<name2> length of <name1> is lesser than integer <val3> <name4> second element of <name1> is not equal to string <val6> ,
<name2> { }	<name2> an empty dictionary .
<name1> = { }	<name1> is an empty dictionary ,
<name3> <name6> :	<name3> <name6> is true ,
<name5> <name1> :	<name5> <name1> is true ,
<name2> = <name1> . <name2> ( <name3> [ 0 ] )	call the method <name1> .match with an argument first element of <name3> , substitute the result for <name2> .
<name6> not <name5> <name4> not <name5> . group ( <val2> ) :	<name6> <name5> is false <name4> call to the method <name5> .group with an argument integer <val2> evaluates to boolean false ,
<name4> <name1>	<name4> <name1> .
<name2> , <name3> = <name6> . groups ( )	call the method <name6> .groups with 2 arguments : <name2> and <name3> .
del <name5> [ : 1 ]	delete first element of <name5> .
else :	if not ,
<name1> len ( <name3> ) <  <val5> <name4> <name3> [ 1 ] != <val2>   :	<name1> length of <name3> is lesser than integer <val5> <name4> second element of <name3> is not equal to string <val2> ,
<name4> <name5>	<name4> <name5> .
<name3> , <name5> = <name1> [ 2 ] , <name1> [ 0 ]	substitute third and first element of <name1> for <name3> and <name5> , respectively .
del <name4> [ : <val5> ]	delete first <val5> elements of <name4> .
<name6> [ <name3> ] = <name5> . compile_filter ( <name4> )	call the method <name5> .compile_filter with an argument <name4> , substitute the result for <name4> under the <name3> <name3> of <name6> dictionary .
<name1> <name3> <name5> not <name4> :	<name1> <name3> is true <name5> <name4> is false ,
<name2> <name6> [ 0 ] != <val4>   :	<name2> first element of <name6> is not equal to string <val4> ,
<name3> <name1>	<name3> <name1> .
del <name4> [ : 1 ]	delete first element of <name4> .
<name2> <name6>	<name2> <name6> .
def <name3> ( <name6> , <name5> , <name4> , <name2> , <name1> , <name3> , <name6> , <name5> ) :	define the function <name3> with 8 arguments : <name6> , <name5> , <name4> , <name2> , <name1> , <name3> , <name6> and <name5> .
<name5> <name1> :	<name5> <name1> is true ,
<name1> <name6> [ 0 ] == <val3>   :	<name1> first element of <name6> equals a string <val3> ,
<name5> = <name5> [ 1 : ]	substitute <name5> without the first element for <name5> .
else :	if not ,
<name1> = [ ]	where '%s' is replaced with name . <name1> is an empty list .
<name2> = { }	<name2> is an empty dictionary .
<name6> = <name3> ( <name1> )	convert <name1> into a <name3> , substitute it for <name6> .
<name1> <name5> <name4> <name2> :	<name1> every <name5> <name4> <name2> ,
kwarg = token_kwargs ( [ bit ] , parser )	call the function
<name3> <name4> :	<name3> <name4> is true ,
param , value = <name2> ( <name3> . iteritems ( <name1> ) ) [ 0 ]	call the method <name3> .iteritems with an argument <name1> , convert the result into a <name2> ,
<name5> <name6> <name1> <name4> <name2> <name3> <name5> <name6> <name1> :	substitute first element of the result for <name6> <name3> value . <name5> <name6> <name6> <name1> <name4> <name2> <name3> <name5> <name6> <name1> ,
elif <name2> <name6> <name4> :	where '%s' are replaced with name and <name2> . otherwise if <name2> is contained <name6> <name4> ,
else :	where '%s' are replaced with name and param . if not ,
<name1> [ str ( <name6> ) ] = <name5>	convert <name6> to a string , use it as a key to get the <name5> from <name1> dictionary , assign it <name5> .
<name5> <name2> <name4> <name1> :	<name5> <name2> is contained <name4> <name1> ,
   <name6> . remove ( <name3> )	call the method <name6> .remove with an argument <name3> .
else :	if not ,
<name2> <name1> :	<name2> <name1> is true ,
"<name2> <name6> ( ""'%s' received some positional argument(s) after some "" ""keyword argument(s)"" % <name1> )"	"<name2> an <name6> exception with an argument string ""'%s' received some positional argument(s) after some keyword argument(s)"" , where '%s' is replaced with <name1> ."
else :	if not ,
<name2> . <name3> ( <name1> . compile_filter ( <name6> ) )	call the method <name1> .compile_filter with an argument <name6> , <name3> the result to <name2> .
<name4> :	<name4> ,
   <name3> . pop ( 0 )	remove first element of <name3> .
except <name3> :	if <name3> exception is caught ,
<name3> <name5> <name4> <name1> :	<name3> <name5> <name4> <name1> ,
     <name6> <name2> ( <val5> % name )	<name6> an <name2> exception with an argument string <val5> ,
<name4> <name6> <name1> <name3> <name5> :	where '%s' <name1> replaced with name . <name4> <name6> <name1> <name3> <name5> ,
<name5> = <name5> [ : - len ( <name3> ) ]	slice list <name5> from the beginning to the length of <name3> last element ,
<name3> <name2> :	<name3> <name2> is true ,
<name2> <name4> , <name3>	<name2> <name4> and <name3> .
def <name2> ( <name1> , <name4> , <name6> , <name5> , <name3> , <name2> , <name1> , <name4> , node_class ) :	define the method <name2> with 9 arguments : <name1> , <name4> , <name6> , <name5> , <name3> , <name2> , <name1> , <name4> ,
<name4> = <name6> . split_contents ( ) [ 1 : ]	call the function <name6> .split_contents , substitute the result without the first element for <name4> .
args , kwargs = <name2> ( <name6> , <name1> , <name3> , <name4> , <name5> , <name2> , <name6> , <name1> )	call the method <name2> with 8 arguments : <name6> , <name1> , <name3> , <name4> , <name5> , <name2> , <name6> and <name1> ,
return <name1> ( <name2> , <name5> , <name4> )	substitute the result for <name5> and <name4> , respectively . call the function <name1> with 3 arguments : <name2> , <name5> and <name4> .
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> form the base <name3> <name4> .
def <name6> ( <name3> , <name1> , <name4> , <name5> ) :	define the method <name6> with 4 arguments : <name3> , <name1> , <name4> and <name5> .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .takes_context .
<name5> . <name4> = <name4>	substitute <name4> for <name5> .args .
<name6> . <name2> = <name2>	substitute <name2> for <name6> .kwargs .
def <name5> ( <name4> , <name2> ) :	define the method <name5> with 2 arguments : <name4> and <name2> .
<name3> = [ <name2> . resolve ( <name5> ) <name1> <name2> <name4> <name6> . args ]	<name3> is an list with elements , return value of the method <name2> .resolve with an argument <name5> , <name1> every <name2> <name4> <name6> .args .
<name2> <name3> . takes_context :	<name2> <name3> .takes_context is true ,
<name2> = [ <name4> ] + <name2>	append <name2> to a list containing <name4> element , substitute it for <name2> .
<name6> = dict ( ( <name4> , <name5> . resolve ( <name1> ) ) <name2> <name4> , <name5> in self . kwargs . items ( ) )	<name6> is dictionary with elements : return value of the method <name5> .resolve called with an argument <name1> , <name2> <name4> ,
<name4> <name6> , <name1>	for every k and v in <name4> value of the method self .kwargs .items . <name4> <name6> and <name1> .
<name3> <name4> ( <name2> ) :	derive the <name3> <name4> form the base <name3> <name2> .
def __init__ ( <name6> ) :	define the method with reload with an argument <name6> .
<name1> . filters = { }	<name1> .filters is an empty dictionary .
<name1> . tags = { }	<name1> .tags is an empty dictionary .
def <name5> ( <name2> , <name3> = <name6> , <name4> = <name6> ) :	define the method <name5> with 3 arguments : <name2> , <name3> set to <name6> and <name4> set to <name6> .
<name3> <name2> <name5> <name1> <name6> <name4> <name5> <name1> :	<name3> <name2> <name5> <name1> <name6> <name4> <name5> <name1> ,
<name2> <name6> . tag_function	<name2> <name6> .tag_function .
elif <name4> <name2> <name6> <name1> <name5> <name3> <name2> <name1> :	otherwise if <name4> <name2> <name6> <name1> <name5> <name3> <name2> <name1> ,
<name2> <name1> ( <name6> ) :	<name2> <name6> is <name1> object ,
<name2> <name3> . tag_function ( <name1> )	call the method <name3> .tag_function with an argument <name1> , <name2> the result .
else :	if not ,
def <name4> ( <name6> ) :	define the function <name4> with an argument <name6> ,
<name2> <name3> . tag ( <name4> , <name5> )	call the method <name3> .tag with 2 arguments <name4> and <name5> , <name2> the result .
<name6> <name2>	<name6> <name2> .
elif <name6> <name4> <name3> <name1> <name5> <name2> <name4> <name3> <name1> :	otherwise if <name6> <name4> <name3> <name1> <name5> <name2> <name4> <name3> <name1> ,
<name4> . tags [ <name2> ] = <name6>	substitute <name6> for <name4> .tags dictionary value under the <name2> key .
<name3> <name1>	<name3> <name1> .
else :	if not ,
"<name1> <name2> ( ""Unsupported arguments to "" ""Library.tag: (%r, %r)"" , ( name , compile_function ) )"	"<name1> an <name2> exception with an argument string ""Unsupported arguments to Library.tag: (%r, %r)"" ,"
def <name5> ( <name4> , <name2> ) :	substitute '%r' with name and compile_function . define the method <name5> with 2 argument : <name4> and <name2> .
self . tags [ getattr ( <name4> , <val3> , <name4> ) . __name__ ] = <name4>	get <val3> attribute from <name4> , return <name4> if the attribute doesnt exists ,
<name3> <name2>	use its __name__ field as a key to get the value from self .tags , assign <name2> to it . <name3> <name2> .
def <name2> ( <name3> , <name5> = <name4> , <name6> = <name4> , ** <name1> ) :	define the method <name2> with 4 arguments : <name3> , <name5> set to <name4> , <name6> set to <name4> and unpacked dictionary <name1> .
<name6> <name5> <name4> <name3> <name1> <name2> <name4> <name3> :	<name6> <name5> <name4> <name3> <name1> <name2> <name4> <name3> ,
def <name4> ( <name1> ) :	define the function <name4> with an argument <name1> ,
<name6> <name4> . filter_function ( <name5> , ** <name1> )	call the method <name4> .filter_function with 2 arguments <name5> and unpacked dictionary <name1> , <name6> the result .
<name6> <name5>	<name6> <name5> .
elif <name6> <name3> <name4> <name2> <name1> <name5> <name3> <name2> :	otherwise if <name6> <name3> <name4> <name2> <name1> <name5> <name3> <name2> ,
<name5> <name6> ( <name2> ) :	<name5> <name2> is <name6> object ,
<name1> <name3> . filter_function ( <name2> , ** <name5> )	call the method <name3> .filter_function with arguments <name2> and unpacked dictionary <name5> , <name1> the result .
else :	if not ,
def <name6> ( <name5> ) :	define the function <name6> with an argument <name5> ,
<name4> <name1> . filter ( <name5> , <name2> , ** <name6> )	call the method <name1> .filter with 3 arguments : <name5> , <name2> and unpacked dictionary <name6> , <name4> the result .
<name2> <name5>	<name2> <name5> .
elif <name3> <name6> <name5> <name4> <name1> <name2> <name6> <name5> <name4> :	otherwise if <name3> <name6> <name5> <name4> <name1> <name2> <name6> <name5> <name4> ,
<name5> . filters [ <name6> ] = <name1>	substitute <name1> for value under the <name6> key of <name5> .filters dictionary .
<name1> <name5> <name2> ( <val4>   , <val6>   , <val3>   ) :	<name1> every <name5> <name2> tuple with 3 arguments : strings <val4> , <val6> and <val3> ,
<name1> <name5> <name6> <name4> :	<name1> <name5> is contained <name6> <name4> ,
<name1> = <name4> [ <name5> ]	substitute <name1> under the <name5> key of <name4> dictionary for <name1> .
setattr ( <name4> , <name6> , <name3> )	set <name4> objec <name6> attribute to <name3> .
<name1> hasattr ( <name2> , <val5> ) :	<name1> <name2> has an attribute <val5> ,
     setattr ( <name2> . _decorated_function , <name4> , <name5> )	set <name2> ._decorated_function objects <name4> attribute to <name5> .
<name3> . _filter_name = <name1>	substitute <name1> for <name3> ._filter_name .
<name3> <name1>	<name3> <name1> .
else :	if not ,
"<name3> <name2> ( ""Unsupported arguments to "" ""Library.filter: (%r, %r)"" , ( name , filter_func ) )"	"<name3> an <name2> exception with an argument string ( ""Unsupported arguments to Library.filter: (%r, %r)"" ,"
def <name2> ( <name6> , <name1> , ** <name5> ) :	where '%r' is replaced with name and filter_func , respectively . define the method <name2> with 3 arguments : <name6> , <name1> and unpacked dictionary <name5> .
<name6> = getattr ( <name3> , <val1> , <name3> ) . <name5>	get <val1> attribute from <name3> object , if it exists substitute <name5> field of the result for <name6> ,
return <name3> . filter ( <name4> , <name5> , ** <name2> )	if not , substitute <name5> .__name__ for <name4> . call the method <name3> .filter with 3 arguments : <name4> , <name5> and unpacked dictionary <name2> .
def <name4> ( <name3> , <name2> = <name1> , <name6> = <name1> , <name5> = <name1> ) :	define the method <name4> with 4 arguments : <name3> , <name2> and <name1> , <name6> and <name1> and <name5> set to <name1> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name5> , <name1> , <name6> , <name4> = <name2> ( <name3> )	call the function <name2> with an argument <name3> , substitute the result for <name5> , <name1> , <name6> and <name4> , respectively .
<name2> <name1> ( <name6> ) :	derive the <name2> <name1> form the base <name2> <name6> .
def <name6> ( <name2> , <name4> ) :	define the method <name6> with 2 arguments <name2> and <name4> .
<name4> , <name3> = <name6> . get_resolved_arguments ( <name2> )	call the method <name6> .get_resolved_arguments with an argument <name2> , substitute the result for <name4> and <name3> .
<name6> <name3> ( * <name5> , ** <name4> )	call the function <name3> with 2 arguments : unpacked list <name5> and unpacked dictionary <name4> , <name6> it .
<name1> = ( <name5> or getattr ( <name2> , <val3>   , <name2> ) . __name__ )	if <name5> is true , substitute it for <name1> , if not get attribute <val3> from <name2> object ,
compile_func = partial ( <name5> , <name3> = <name3> , <name2> = <name2> , <name4> = <name4> , <name6> = <name6> , <name1> = <name5> , takes_context = takes_context , node_class = SimpleNode )	substitute its __name__ field for function <name1> , if it doesnt exists substitute func .__name__ for <name5> . call the function <name5> , <name3> set to <name3> , <name2> set to <name2> , <name4> set to <name4> , <name6> set to <name6> ,
<name3> . __doc__ = <name1> . __doc__	name set to function_name , and takes_context set to takes_context and node_class set to SimpleNode . substitute <name1> .__doc__ for <name3> .__doc__ .
<name4> . tag ( <name1> , <name5> )	call the method <name4> .tag with 2 arguments : <name1> and <name5> .
<name2> <name1>	<name2> <name1> .
<name6> <name3> <name2> <name5> :	<name6> <name3> <name2> <name5> ,
<name2> <name5>	<name2> <name5> .
elif <name3> ( <name6> ) :	otherwise if <name6> is <name3> object ,
<name4> <name5> ( <name1> )	call the function <name5> with an argument <name1> , <name4> the result .
else :	if not ,
<name3> <name2> ( <val1> )	<name3> an <name2> exception with an argument string <val1> .
def <name6> ( <name5> , <name1> = <name2> , <name3> = <name2> , <name4> = <name2> ) :	define the method <name6> with 4 arguments : <name5> , <name1> set to <name2> , <name3> set to <name2> and <name4> set to <name2> .
def <name3> ( <name4> ) :	define the function <name3> with an argument <name4> .
<name2> , <name1> , <name5> , <name3> = <name6> ( <name4> )	call the function <name6> with an argument <name4> , substitute the result for <name2> , <name1> , <name5> and <name3> .
<name4> <name3> ( <name1> ) :	derive the <name4> <name3> form the base <name4> <name1> .
def <name2> ( <name4> , <name6> , <name5> , <name3> , <name1> ) :	define the function <name2> with 5 arguments : <name4> , <name6> , <name5> , <name3> and <name1> .
super ( <name4> , self ) . <name6> ( <name3> , <name5> , <name1> )	call the method <name6> from the base class of the class <name4> , with 3 arguments : <name3> , <name5> and <name1> .
<name3> . <name4> = <name4>	substitute <name4> for <name3> .target_var .
def <name2> ( <name1> , <name5> ) :	define the method <name2> with 2 arguments <name1> and <name5> .
<name6> , <name3> = <name2> . get_resolved_arguments ( <name5> )	call the method <name2> .get_resolved_arguments with an argument <name5> , substitute the result for <name6> and <name3> .
context [ self . target_var ] = <name6> ( * <name4> , ** <name5> )	call the function <name6> with 2 arguments : unpacked list <name4> and unpacked dictionary <name5> ,
<name4> ''	substitute the result for value under the self .target_var key of the context dictionary . <name4> an empty string .
<name3> = ( <name6> or getattr ( <name2> , <val1>   , <name2> ) . __name__ )	if <name6> is true , substitute it for <name3> , if not get <val1> attribute from <name2> object , if it exists ,
def <name5> ( <name4> , <name3> ) :	substitute __name__ field of the result for function_name , in not , substitute func .__name__ for function_name . define the function <name5> with 2 arguments : <name4> and <name3> .
<name1> = <name6> . split_contents ( ) [ 1 : ]	call the function <name6> .split_contents , substitute the result without the first element for <name1> .
<name2> len ( <name5> ) <  <val4> <name3> <name5> [ - <val4> ] != <val1>   :	<name2> length of <name5> is smaller than integer <val4> <name3> second last element of <name5> is not equal to <val1> ,
<name3> = <name3> [ : - 2 ]	substitute <name3> without last two elements for <name3> .
args , kwargs = <name2> ( <name4> , <name1> , <name5> , <name3> , <name6> , <name2> , <name4> , <name1> )	call the function <name2> with 8 arguments : <name4> , <name1> , <name5> , <name3> , <name6> , <name2> , <name4> and <name1> ,
<name6> <name4> ( <name5> , <name1> , <name2> , <name3> )	substitute the result for <name1> and <name2> . <name6> an instance of <name4> class created with 4 arguments : <name5> , <name1> , <name2> and <name3> .
<name3> . __doc__ = <name5> . __doc__	substitute <name5> .__doc__ for <name3> .__doc__ .
<name6> . tag ( <name2> , <name5> )	call the method <name6> .tag with 2 arguments : <name2> and <name5> .
<name4> <name2>	<name4> <name2> .
<name2> <name5> <name1> <name3> :	<name2> <name5> <name1> <name3> ,
<name4> <name3>	<name4> <name3> .
elif <name2> ( <name4> ) :	otherwise if <name4> is <name2> ,
<name3> <name2> ( <name5> )	call the function <name2> with an argument <name5> , <name3> the result .
else :	if not ,
<name6> <name2> ( <val5> )	<name6> an <name2> exception with an argument string <val5> .
def <name6> ( <name5> , <name1> , <name4> = <name3> , <name2> = <name6> , name = None ) :	define the method <name6> with 5 arguments : <name5> , <name1> , <name4> set to <name3> , <name2> set to boolean <name6> ,
def <name4> ( <name6> ) :	and name set to None . define the function <name4> with an argument <name6> .
<name4> , <name6> , <name1> , <name2> = <name3> ( <name5> )	call the function <name3> with an argument <name5> , substitute the result for <name4> , <name6> , <name1> and <name2> .
<name3> <name4> ( <name6> ) :	derive the <name3> <name4> form the base <name3> <name6> .
def <name5> ( <name2> , <name1> ) :	define the method <name5> with 2 arguments : <name2> and <name1> .
<name6> , <name5> = <name3> . get_resolved_arguments ( <name4> )	call the method <name3> .get_resolved_arguments with <name4> as an argument , substitute the result for <name6> and <name5> .
<name1> = <name6> ( * <name5> , ** <name4> )	call the function <name6> with 2 arguments : unpacked list <name5> and unpacked dictionary <name4> , substitute the result for <name1> .
<name2> not getattr ( <name4> , <val5>   , <name1> ) :	get <val5> attribute from <name4> object . <name2> it doesnt exists return boolean <name1> , <name2> the result evaluates to false ,
     <name3> <name6> . template . loader <name4> <name2> , <name5>	<name3> <name6> .template .loader <name4> <name2> , <name5> .
<name6> isinstance ( <name3> , <name4> ) :	<name6> <name3> is an instance of <name4> class .
         <name5> = <name1>	substitute <name1> for <name5> .
elif <name6> isinstance ( <name4> , <name2> . string_types ) <name1> <name5> ( <name4> ) :	otherwise if <name4> is <name6> an instance of <name2> .string_types <name1> call to the function <name5> with an argument <name4> ,
         <name4> = <name5> ( <name2> )	evaluates to true , call the function <name5> with an argument <name2> , substitute the result for <name4> .
else :	if not ,
         <name6> = <name3> ( <name2> )	call the function <name3> with an argument <name2> , substitute the result for <name6> .
<name4> . nodelist = <name2> . nodelist	substitute <name2> .nodelist for <name4> .nodelist .
new_context = <name3> ( <name1> , ** {   'autoescape'   : context . autoescape , 'current_app'   : context . current_app , 'use_l10n'   : context . use_l10n , 'use_tz'   : context . use_tz , }  )	call the function <name3> with 2 arguments : <name1> and unpacked dictionary containing 4 entries :
<name5> = <name2> . get ( <val4>   , <name3> )	<name2> .autoescape for 'autoescape' , <name2> .autoescape for 'current_app' , <name2> .use_l10n for 'use_l10n' , and <name2> .use_tz for 'use_tz' , substitute the result for new_context . call the function <name2> .get with 2 argument <val4> and <name3> , substitute the result for <name5> .
<name4> <name3> <name6> <name5> <name2> :	<name4> <name3> <name6> <name5> <name2> ,
     <name1> [ <val6>   ] = <name3>	substitute <name3> for value under the <val6> key of <name1> dictionary .
<name5> <name4> . nodelist . render ( <name1> )	call the method <name4> .nodelist .render with an argument <name1> , <name5> the result .
<name2> = ( <name1> or getattr ( <name5> , <val4>   , <name5> ) . __name__ )	if <name1> is true , substitute it for <name2> , if not get <val4> attribute from <name5> object , if it exists ,
compile_func = <name5> ( <name2> , <name3> = <name3> , <name1> = <name1> , <name6> = <name6> , defaults = defaults , name = <name4> , takes_context = takes_context , node_class = InclusionNode )	substitute __name__ field of the result for <name4> , in not , substitute func .__name__ for <name4> . call the function <name5> with 8 arguments : <name2> , <name3> set to <name3> , <name1> set to <name1> , <name6> set to <name6> ,
<name2> . __doc__ = <name5> . __doc__	defaults set to defaults , name set to function_name , takes_context set to takes_context and node_class set to InclusionNode , substitute the result for <name2> . substitute <name5> .__doc__ for <name2> .__doc__ .
<name2> . tag ( <name6> , <name5> )	call the function <name2> .tag with 2 arguments : <name6> and <name5> .
<name6> <name1>	<name6> <name1> .
<name4> <name3>	<name4> <name3> .
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name6> , <name5> = <name3> . rsplit ( <val1>   , 1 )	split string <name3> into two parts from the right side by the separator <val1> , substitute parts for <name6> and <name5> , respectively .
<name5> :	<name5> ,
<name6> = <name1> ( <name4> )	call the function <name1> with an argument <name4> , substitute it for <name6> .
<name4> not <name2> ( <name5> , <name6> )	call the function <name2> with 2 arguments : <name5> and <name6> , <name4> inverted boolean result .
except <name5> :	if <name5> exception is caught ,
<name5> <name1> ( <name4> )	call the function <name1> with an argument <name4> , <name5> the result .
def <name3> ( <name1> ) :	define the function <name3> with an argument <name1> .
<name5> :	<name5> ,
<name2> = <name4> ( <name3> )	call the function <name4> with an argument <name3> , substitute the result for <name2> .
except <name1> as <name4> :	if <name1> , renamed to <name4> , exception is caught ,
<name6> <name2> ( <name3> ) :	call the function <name2> with an argument <name3> , <name6> it evaluates to true ,
<name3> <name2>	<name3> <name2> .
else :	if not ,
<name4> <name3> ( <val5> % ( taglib_module , e ) )	<name4> an <name3> exception with an argument string <val5> ,
<name1> :	where '%s' is replaced with taglib_module and e . <name1> ,
<name3> <name5> . register	<name3> <name5> .register .
except <name2> :	if <name2> exception is caught ,
<name3> = [ ]	where '%s' is replaced with taglib_module . <name3> is an empty list .
def <name5> ( ) :	define the function <name5> .
<name2> <name5>	use <name2> variable <name5> .
<name5> not <name6> :	<name5> <name6> is false ,
<name3> = [ ]	<name3> is an empty list .
<name2> = [ <val3>   ]	<name2> is an list with an argument string <val3> .
templatetags_modules_candidates += [ <val3>   % <name4> . name for <name4> in apps . get_app_configs ( ) ]	add string <val3> to a list , where '%s' is replaced with <name4> .name ,
<name3> <name5> <name1> <name6> :	<name3> every app_config <name1> result of the method apps .get_app_configs , append the resulting list to <name6> . <name3> every <name5> <name1> <name6> ,
<name3> :	<name3> ,
<name2> ( <name5> )	call the function <name2> with an argument <name5> .
<name4> . <name2> ( <name6> )	<name2> <name6> to <name4> .
except <name2> :	if <name2> exception is caught ,
continue	skip this loop iteration .
<name5> = <name1>	substitute <name1> for <name5> .
<name1> <name6>	<name1> <name6> .
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
<name6> = <name1> . <name4> ( <name5> , <name3> )	<name4> the value under the <name5> key of the <name1> dictionary , if it exists , substitute it for <name6> , if not , <name6> is <name3> .
<name6> not <name2> :	<name6> <name2> is false ,
<name1> = <name2> ( )	call the function <name2> , substitute the result for <name1> .
<name2> = [ ]	<name2> is an empty list .
<name6> <name2> <name4> <name1> :	<name6> every <name2> <name4> <name1> ,
<name4> = <val2>   % ( <name3> , <name1> )	<name4> is an string <val2> , where '%s' is replaced to <name3> and <name1> .
<name1> . <name5> ( <name2> )	<name5> <name2> to <name1> .
<name6> = <name4> ( <name5> )	call the function <name4> with an argument <name5> , substitute the result for <name6> .
<name5> <name6> :	<name5> <name6> is true ,
<name2> [ <name1> ] = <name3>	substitute <name3> for value under the <name1> key of <name2> dictionary .
<name3>	<name3> loop execution .
<name2> not <name5> :	<name2> <name5> is false ,
"<name4> <name1> ( ""Template library %s not found, "" ""tried %s"" % ( library_name , ','   . join ( tried_modules ) ) )"	"<name4> an <name1> exception with an argument string ""Template library %s not found, tried %s"" ,"
<name6> <name5>	where '%s' is replaced with library_name and elements of tried_modules joined into a string , separated by ',' . <name6> <name5> .
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
<name1> . <name6> ( <name4> ( <name5> ) )	call the function <name4> with an argument <name5> , <name6> the result to <name1> .
<name5> ( <val4>   )	call the function <name5> with an argument string <val4> .
<name3> ( <val5>   )	call the function <name3> with an argument string <val5> .
<name1> ( <val3>   )	call the function <name1> with an argument string <val3> .
<name4> <name3> <name5> <name3>	<name4> <name3> <name5> <name3> into default name space .
<name3> <name2> . utils . module_loading <name4> <name5>	<name3> <name2> .utils .module_loading <name4> <name5> into default name space .
<name5> = <name2>	<name5> is <name2> .
<name3> = ( <val4>   , )	<name3> is a tuple containing a string <val4> .
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> from the <name4> base <name3> .
pass	do nothing .
<name2> <name6> ( <name3> ) :	derive the <name2> <name6> from the <name3> base <name2> .
def <name4> ( <name6> , <name5> , * <name2> , ** <name1> ) :	define the method <name4> with 4 arguments : <name6> , <name5> , unpacked list <name2> and unpacked dictionary <name1> .
super ( <name6> , self ) . <name4> ( * <name2> , ** <name5> )	call the method <name4> from the base class of the class <name6> , with 2 arguments : unpacked list <name2> and unpacked dictionary <name5> .
<name5> . dicts . <name1> ( <name2> )	<name1> <name2> to <name5> .dicts .
<name3> . <name6> = <name6>	substitute <name6> for <name3> .context .
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name5> <name2>	<name5> <name2> .
def <name6> ( <name3> , * <name1> , ** <name4> ) :	define the method <name6> with 3 arguments : <name3> , unpacked list <name1> and unpacked dictionary <name4> .
<name4> . context . pop ( )	remove the first element from the <name4> .context .
<name5> <name1> ( <name4> ) :	derive the <name5> <name1> from the <name4> base <name5> .
def <name5> ( <name4> , <name1> = <name3> ) :	define the method <name5> with 2 arguments : <name4> and <name1> set to <name3> .
<name3> . _reset_dicts ( <name6> )	call the method <name3> ._reset_dicts with an argument <name6> .
def <name3> ( <name4> , <name1> = <name2> ) :	define the method <name3> with 2 arguments : <name4> and <name1> set to <name2> .
<name3> = {  <val5>   : <name6> , <val1>   : <name2> , <val4>   : <name3> }	<name3> is an dictionary with 3 initial entries : boolean <name6> for <val5> , boolean <name2> for <val1> and <name3> for <val4> .
<name2> . dicts = [ <name1> ]	<name2> .dicts is an list with element <name1> .
<name4> <name2> <name1> <name6> <name5> :	<name4> <name2> <name1> <name6> <name5> ,
<name3> . dicts . <name1> ( <name6> )	<name1> <name6> to <name3> .dicts list .
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
<name2> = <name4> ( super ( <name6> , self ) )	call the function <name4> with an argument base class of the class <name6> , substitute the result for <name2> .
<name3> . dicts = <name5> . dicts [ : ]	hard copy list <name5> .dicts to <name3> .dicts .
<name2> <name3>	<name2> <name3> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name6> repr ( <name5> . dicts )	<name6> printable representation of <name5> .dicts .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name6> <name2> <name3> <name4> ( <name5> . dicts ) :	<name6> every <name2> <name3> <name4> list <name5> .dicts ,
<name1> <name3>	<name1> <name3> .
def <name1> ( <name6> , * <name2> , ** <name3> ) :	define the method <name1> with 3 arguments : <name6> , unpacked list <name2> and unpacked dictionary <name3> .
<name6> <name5> ( <name1> , * <name2> , ** <name3> )	instantiate class <name5> with 3 arguments : <name1> , unpacked list <name2> and unpacked dictionary <name3> , <name6> it .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name5> len ( <name4> . dicts ) == <val2> :	<name5> length of <name4> .dicts is equal to an integer <val2> ,
<name2> <name6>	<name2> an <name6> .
<name1> <name3> . dicts . pop ( )	call the method <name3> .dicts .pop , <name1> the result .
def <name6> ( <name5> , <name1> , <name4> ) :	define the method <name6> with 3 arguments : <name5> , <name1> and <name4> .
<name4> . dicts [ - 1 ] [ <name3> ] = <name5>	substitute <name5> for <name5> under the <name3> <name3> of dictionary at last element of <name4> .dicts .
def <name5> ( <name4> , <name6> ) :	define the method <name5> with 2 arguments : <name4> and <name6> .
<name6> <name1> <name2> <name3> ( <name5> . dicts ) :	<name6> every <name1> <name2> <name3> list <name5> .dicts ,
<name4> <name1> <name5> <name6> :	<name4> <name1> is contained <name5> <name6> ,
<name4> <name3> [ <name2> ]	<name4> value under the <name2> <name2> of <name3> dictionary .
<name1> <name4> ( <name3> )	<name1> <name4> exception with an argument <name3> .
def <name1> ( <name5> , <name3> ) :	define the method <name1> with 2 arguments : <name5> and <name3> .
del <name4> . dicts [ - 1 ] [ <name1> ]	delete value under the <name1> <name1> of dictionary at last element of <name4> .dicts .
def <name6> ( <name2> , <name3> ) :	define the method <name6> with 2 arguments : <name2> and <name3> .
<name3> <name5> <name1> <name4> . dicts :	<name3> every <name5> <name1> <name4> .dicts ,
<name5> <name4> <name2> <name3> :	<name5> <name4> is contained <name2> <name3> ,
<name4> <name2>	<name4> boolean <name2> .
<name1> <name4>	<name1> boolean <name4> .
def <name5> ( <name1> , <name6> ) :	define the method <name5> with 2 arguments : <name1> and <name6> .
<name5> <name2> . has_key ( <name1> )	call the method <name2> .has_key with an argument <name1> , <name5> the result .
def get ( <name6> , <name1> , <name3> = <name5> ) :	define the method got with 3 arguments : <name6> , <name1> and <name3> set to <name5> .
<name6> <name4> <name3> <name2> ( <name5> . dicts ) :	<name6> every <name4> <name3> <name2> list <name5> .dicts ,
<name2> <name1> <name5> <name6> :	<name2> <name1> is contained <name5> <name6> ,
<name3> <name5> [ <name2> ]	<name3> value under the <name2> <name2> of <name5> dictionary .
<name5> <name3>	<name5> <name3> .
def <name1> ( <name3> , <name2> = <name4> ) :	define the method <name1> with 2 arguments : <name3> and <name2> set to <name4> .
<name4> = <name2> ( <name5> )	call the function <name2> with an argument <name5> , substitute the result for <name4> .
<name6> . _reset_dicts ( <name4> )	call the method <name6> ._reset_dicts <name4> .
<name2> <name3>	<name2> <name3> .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name3> = { }	<name3> is an empty dictionary ,
<name3> <name5> <name1> <name2> . dicts :	<name3> every <name5> <name1> <name2> .dicts ,
<name3> . <name6> ( <name2> )	<name6> <name3> dictionary with <name2> .
<name1> <name6>	<name1> <name6> .
def <name1> ( <name4> , <name5> ) :	define the method <name1> with 2 arguments : <name4> and <name5> .
<name5> isinstance ( <name6> , <name4> ) :	<name5> <name6> is an instance of <name4> class ,
<name4> <name1> . <name3> ( ) == <name5> . <name3> ( )	call the <name3> method of the <name1> and <name5> objects , if they are equal , <name4> boolean True , if not <name4> boolean False .
<name4> <name1>	<name4> boolean <name1> .
<name4> <name2> ( <name6> ) :	derive the <name4> <name2> from the <name6> base <name4> .
def <name2> ( <name3> , <name1> = <name6> , <name4> = <name5> , <name2> = <name6> , use_l10n = <name6> , use_tz = <name6> ) :	define the method <name2> with 6 arguments : <name3> , <name1> set to <name6> , <name4> set to <name5> , <name2> set to <name6> ,
<name2> . <name4> = <name4>	use_l10n set to None and use_tz set to None . substitute <name4> for <name2> .autoescape .
<name6> . <name5> = <name5>	substitute <name5> for <name6> .current_app .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .use_l10n .
<name1> . <name5> = <name5>	substitute <name5> for <name1> .use_tz .
<name2> . render_context = <name4> ( )	<name2> .render_context is a instance of <name4> class .
super ( <name4> , self ) . <name3> ( dict_ )	call the the method <name3> from the base class of the class <name4> .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name2> = super ( <name3> , self ) . <name4> ( )	call the the method <name4> from the base class of the class <name3> , substitute the result for <name2> .
<name6> . render_context = <name1> ( <name4> . render_context )	call the function <name1> with an argument <name4> .render_context , substitute the result for <name6> .render_context .
<name6> <name4>	<name6> <name4>
def <name2> ( <name4> , <name5> ) :	define the method <name2> with 2 arguments : <name4> and <name5> .
<name3> not hasattr ( <name5> , <val2>   ) :	<name3> <name5> doesnt have an <val2> attribute ,
<name6> <name2> ( <val3>   )	<name6> an <name2> exception with an argument string <val3> .
<name1> . dicts . <name6> ( <name5> )	<name6> <name5> to <name1> .dicts .
<name5> <name1>	<name5> <name1> .
<name4> <name5> ( <name6> ) :	derive the <name4> <name5> from the <name6> base <name4> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name2> <name4> <name1> <name3> . dicts [ - 1 ] :	<name2> every <name4> <name1> last element of <name3> .dicts ,
<name3> <name6>	<name3> <name6> .
def <name3> ( <name5> , <name1> ) :	define the method <name3> with 2 arguments : <name5> and <name1> .
<name3> <name5> <name1> <name2> . dicts [ - 1 ]	if <name5> is contained <name1> last element of <name2> .dicts , <name3> boolean True , otherwise <name3> boolean False .
def <name5> ( <name3> , <name1> , <name2> = <name6> ) :	define the method <name5> with 3 arguments : <name3> , <name1> and <name2> set to <name6> .
<name1> <name2> . dicts [ - 1 ] . get ( <name6> , otherwise )	<name1> value under the <name6> <name6> of dictionary in last element of <name2> .dicts ,
def <name1> ( <name6> , <name4> ) :	if it doesnt exists return otherwise . define the method <name1> with 2 arguments : <name6> and <name4> .
<name6> <name3> . dicts [ - 1 ] [ <name2> ]	<name6> value under the <name2> <name2> of dictionary in last element of <name3> .dicts .
def <name3> ( ) :	define the function <name3> .
<name3> <name1> . conf <name4> <name5>	<name3> <name1> .conf <name4> <name5> into default namespace .
<name1> <name3>	use <name1> variable <name3> .
<name3> <name2> <name6> <name4> :	<name3> <name2> <name6> <name4> ,
<name4> = [ ]	<name4> is an empty list .
<name1> = [ ]	<name1> is an empty list .
<name6> . <name2> ( <name1> )	<name2> <name6> list with <name1> .
<name2> . <name5> ( <name4> . TEMPLATE_CONTEXT_PROCESSORS )	<name5> <name2> list with <name4> .TEMPLATE_CONTEXT_PROCESSORS .
<name1> <name4> <name5> <name3> :	<name1> every <name4> <name5> <name3> ,
<name2> = <name5> ( <name4> )	call the function <name5> with an argument <name4> , substitute the result for <name2> .
<name2> . <name6> ( <name1> )	<name6> <name1> to <name2> .
<name3> = <name4> ( <name6> )	convert <name6> elements into a <name4> , substitute it for <name3> .
<name5> <name3>	<name5> <name3> .
<name6> <name2> ( <name5> ) :	derive the <name6> <name2> from the <name5> base <name6> .
def <name1> ( <name6> , <name5> , <name2> = <name4> , <name3> = <name4> , <name1> = <name4> , use_l10n = <name4> , use_tz = <name4> ) :	define the method <name1> with 7 arguments : <name6> , <name5> , <name2> set to <name4> , <name3> set to <name4> , <name1> set to <name4> ,
<name6> . __init__ ( <name1> , <name2> , <name5> = <name5> , <name3> = <name3> , <name4> = <name4> )	<name3> set to None and <name4> set to None . call the method <name6> .__init__ with 5 arguments : <name1> , <name2> , <name5> as <name5> , <name3> as <name3> , <name4> as <name4> .
<name3> <name2> <name1> <name5> :	<name3> <name2> <name1> <name5> ,
<name3> = ( )	<name3> is an empty tuple .
else :	if not ,
<name5> = <name1> ( <name5> )	convert <name5> into a <name1> and substitute it for <name5> .
<name5> = dict ( )	<name5> is an empty dictionary .
<name4> <name3> in <name5> ( ) + <name6> :	call the function <name5> , append <name6> to the result , <name4> every <name3> is the result ,
<name5> . <name6> ( <name1> ( <name4> ) )	call the function <name1> with an argument <name4> , <name6> <name5> dictionary with the result .
<name1> . <name6> ( <name5> )	<name6> <name1> dictionary with <name5> .
<name4> <name1> . template . base <name3> <name6> , <name2> , <name5> , <name4> , <name1> , <name3>	<name4> <name1> .template .base <name3> <name6> , <name2> , <name5> , <name4> , <name1> and <name3> into default name space .
<name4> <name1> . utils . encoding <name5> <name2>	<name4> <name1> .utils .encoding <name5> <name2> into default name space .
<name4> <name1> . utils . html <name3> <name2>	<name4> <name1> .utils .html <name3> <name2> into default name space .
<name1> <name4> . utils . safestring <name2> <name3> , <name5>	<name1> <name4> .utils .safestring <name2> <name3> and <name5> into default name space .
<name6> <name1> . utils . formats <name2> <name5>	<name6> <name1> .utils .formats <name2> <name5> into default name space .
<name6> <name1> . utils . timezone <name3> <name4>	<name6> <name1> .utils .timezone <name3> <name4> into default name space .
<name1> <name6> ( <name3> ) :	derive the <name1> <name6> from the <name3> base <name1> .
def <name1> ( <name4> , <name5> , <name2> ) :	define the method <name1> with 3 arguments : <name4> , <name5> and <name2> .
super ( <name3> , self ) . <name6> ( <name2> , <name5> )	call the method <name6> from the base class of the class <name3> , with 2 arguments : <name2> and <name5> .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name2> , <name3> = [ ] , <val1>	<name2> is an empty list , <name3> is integer <val1> .
<name1> <name3> <name6> <name5> . finditer ( <name4> . template_string ) :	call the method <name5> .finditer with an argument <name4> .template_string , <name1> every <name3> <name6> result ,
<name3> , <name1> = <name6> . span ( )	call the method <name6> .span , substitute the result for <name3> an <name1> , respectively .
<name3> <name5> >  <name4> :	<name3> <name5> is greater than <name4> ,
result . append ( <name1> . create_token ( <name1> . template_string [ <name6> : <name5> ] , ( <name6> , <name5> ) , False ) )	call the method <name1> .create_token with 3 arguments : <name1> .template_string list elements from <name6> index to <name5> index ,
<name6> = <name3>	tuple with 2 elements : <name6> and <name3> and boolean False , append the result to result . substitute <name3> for <name6> .
result . append ( <name1> . create_token ( <name1> . template_string [ <name3> : <name5> ] , ( <name3> , <name5> ) , True ) )	call the method <name1> .create_token with 3 arguments : <name1> .template_string list elements from <name3> index to <name5> index ,
<name2> = <name3>	tuple with 2 elements : start and <name3> and boolean False , append the result to result . substitute <name3> for <name2> .
last_bit = <name4> . template_string [ <name2> : ]	substitute elements of <name4> .template_string list from <name2> index to the end for last_lit .
<name2> <name6> :	<name2> <name6> is true ,
result . append ( <name1> . create_token ( <name6> , ( <name5> , <name5> + len ( <name6> ) ) , False ) )	call the method <name1> .create_token with 3 arguments : <name6> , tuple with 2 elements : <name5> and sum of <name5> and length of <name6> ,
<name3> <name4>	and boolean False , append the <name4> to <name4> . <name3> <name4> .
def <name3> ( <name6> , <name5> , <name4> , <name2> ) :	define the method <name3> with 4 arguments : <name6> , <name5> , <name4> and <name2> .
token = super ( <name4> , self ) . <name3> ( token_string , <name6> )	call the method <name3> from the base class of the class <name4> , with 2 arguments : template_string and <name6> ,
<name6> . <name3> = <name4> . origin , <name3>	substitute the result for <name6> . assign <name4> .origin , <name3> to <name6> .source .
<name5> <name3>	<name5> <name3> .
<name6> <name4> ( <name2> ) :	derive the <name6> <name4> from the <name2> base <name6> .
def <name5> ( <name4> , <name3> ) :	define the method <name5> with 2 arguments : <name4> and <name3> .
super ( <name1> , self ) . <name3> ( <name2> )	call the method <name3> with an argument <name2> , from the base class of the class <name1> .
<name1> . command_stack = [ ]	<name1> .command_stack is an empty list .
def <name1> ( <name5> , <name3> , <name4> ) :	define the method <name1> with 3 arguments : <name5> , <name3> and <name4> .
<name1> . command_stack . <name2> ( ( <name3> , <name4> . source ) )	<name2> tuple with 2 elements : <name3> and <name4> .source , <name2> the result to <name1> .command_stack .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name4> . command_stack . pop ( )	remove first element from <name4> .command_stack .
def <name3> ( <name2> , <name1> , <name4> ) :	define the method <name3> with 3 arguments : <name2> , <name1> and <name4> .
<name6> <name2> . source_error ( <name1> . source , <name3> )	call the method <name2> .source_error with 2 arguments : <name1> .source and <name3> , <name6> the result .
def <name4> ( <name5> , <name3> , <name6> ) :	define the method <name4> with 3 arguments : <name5> , <name3> and <name6> .
<name6> = <name3> ( <name5> )	<name6> is an instance of <name3> class , created with an argument <name5> .
<name4> . django_template_source = <name6>	substitute <name6> for <name4> .django_template_source .
<name3> <name2>	<name3> <name2> .
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name6> <name4> ( )	<name6> an instance of <name4> class .
def <name2> ( <name5> , <name4> ) :	define the method <name2> with 2 arguments : <name5> and <name4> .
<name4> <name6> ( <name3> )	<name4> an instance of <name6> , created with an argument <name3> .
def <name2> ( <name5> , <name6> , <name3> , <name4> ) :	define the method <name2> with 4 arguments : <name5> , <name6> , <name3> and <name4> .
<name1> . source = <name2> . source	substitute <name2> .source for <name1> .source .
super ( <name6> , self ) . <name5> ( <name4> , <name3> , <name2> )	call the method <name5> with 3 arguments : <name4> , <name3> and <name2> , from the base class of the class <name6> .
def <name3> ( <name6> , <name5> ) :	define the method <name3> with 2 arguments : <name6> and <name5> .
<name5> , <name4> = <name3> . command_stack . pop ( )	remove the first element from <name3> .command_stack , assign the result to <name5> and <name4> , respectively .
<name2> = <val6> % ( <name1> , ', '   . join ( parse_until ) )	<name2> is an string <val6> , where '%s' is replaced with <name1> ,
<name5> <name2> . source_error ( <name4> , <name6> )	and elements of parse_until joined into a string , separated by string ', ' . <name5> an <name2> .source_error exception with 2 arguments : <name4> and <name6> .
def <name4> ( <name1> , <name5> , <name2> ) :	define the method <name4> with 3 arguments : <name1> , <name5> and <name2> .
<name2> not hasattr ( <name4> , <val6>   ) :	<name2> <name4> doesnt have an <val6> attribute ,
<name1> . django_template_source = <name3> . source	substitute <name3> .source for <name1> .django_template_source .
def <name1> ( <name5> , <name6> , <name4> ) :	define the method <name1> with 3 arguments : <name5> , <name6> and <name4> .
<name4> not hasattr ( <name3> , <val6>   ) :	<name4> <name3> doesnt have an <val6> attribute ,
<name6> . django_template_source = <name2> . source	substitute <name2> .source for <name6> .django_template_source .
<name2> <name4> ( <name5> ) :	derive the <name2> <name4> from the <name5> base <name2> .
def <name3> ( <name2> , <name5> , <name6> ) :	define the method <name3> with 3 arguments : <name2> , <name5> and <name6> .
<name5> :	<name5> ,
<name1> <name2> . render ( <name4> )	call the method <name2> .render with an argument <name4> , <name1> the result .
except <name1> as <name6> :	if <name1> , renamed to <name6> , exception is caught ,
<name5> not hasattr ( <name2> , <val1>   ) :	<name5> <name2> doesnt have an <val1> attribute ,
<name6> . django_template_source = <name4> . source	substitute <name4> .source for <name6> .django_template_source .
<name4>	<name4> an exception .
<name1> <name6> ( <name4> ) :	derive the <name1> <name6> from the <name4> base <name1> .
def <name3> ( <name2> , <name1> ) :	define the method <name3> with 2 arguments : <name2> and <name1> .
<name5> :	<name5> ,
<name1> = <name2> . filter_expression . resolve ( <name4> )	call the method <name2> .filter_expression .resolve with an argument <name4> , substitute the result for <name1> .
<name5> = <name3> ( <name5> , <name4> = <name2> . <name4> )	call the function <name3> with 2 arguments : <name5> and <name4> set to <name2> .use_tz , substitute the result for <name5> .
<name3> = <name2> ( <name3> , <name1> = <name6> . <name1> )	call the function <name2> with 2 arguments : <name3> and <name1> set to <name6> .use_l10n , substitute the result for <name3> .
<name5> = <name1> ( <name5> )	call the function <name1> with an argument <name5> , substitute the result for <name5> .
except <name3> :	if <name3> exception is caught ,
<name5> ''	<name5> an empty string .
except <name1> as <name4> :	if <name1> , renamed to <name4> , exception is caught ,
<name1> not hasattr ( <name6> , <val3>   ) :	<name1> <name6> doesnt have an <val3> attribute ,
<name6> . django_template_source = <name4> . source	substitute <name4> .source for <name6> .django_template_source .
<name2>	<name2> an exception .
<name3> ( <name5> . autoescape <name2> <name1> isinstance ( <name4> , <name6> ) ) <name3> isinstance ( <name4> , <name5> ) :	<name3> <name5> .autoescape is true <name2> <name4> is <name1> an instance of <name6> class <name3> <name4> is an instance of <name5> class ,
return <name5> ( <name4> )	call the function <name5> with an argument <name4> .
else :	if not ,
<name4> <name3>	<name4> <name3> .
<name3> <name1> <name4> <name5>	<name3> <name1> <name4> <name5> into default name space .
<name3> <name4>	<name3> module <name4> .
<name5> <name6> <name1> <name4>	<name5> module <name6> <name1> <name4> .
<name2> <name1> <name6> <name3> , <name4> , <name5> , <name2>	<name2> <name1> <name6> <name3> , <name4> , <name5> and <name2> into default name space .
<name6> <name2> <name4> <name1>	<name6> <name2> <name4> <name1> into default name space .
<name4> <name5> <name3> <name1>	<name4> <name5> <name3> <name1> into default name space .
<name4> <name1> . template . base <name3> <name2> , <name6> , <name5>	<name4> <name1> .template .base <name3> <name2> , <name6> and <name5> into default name space .
<name4> <name2> . conf <name6> <name1>	<name4> <name2> .conf <name6> <name1> into default name space .
<name1> <name5> . utils <name6> <name4>	<name1> <name5> .utils <name6> <name4> into default name space .
<name3> <name4> . utils . dateformat <name2> <name6> , <name1>	<name3> <name4> .utils .dateformat <name2> <name6> and <name1> into default name space .
<name1> <name4> . utils . encoding <name3> <name6> , <name2>	<name1> <name4> .utils .encoding <name3> <name6> and <name2> into default name space .
<name6> <name4> . utils . html <name3> ( <name2> , <name5> , <name1> , <name6> <name4> <name3> , <name2> , <name5> , <name1> , remove_tags )	<name6> <name4> .utils .html <name3> <name2> , <name5> , <name1> , <name6> <name4> <name3> , <name2> , <name5> , <name1> ,
<name3> <name5> . utils . http <name1> <name2>	and remove_tags . <name3> <name5> .utils .http <name1> <name2> into default name space .
<name1> <name2> . utils . text <name3> <name5> , <name4> , <name6>	<name1> <name2> .utils .text <name3> <name5> , <name4> and <name6> into default name space .
<name5> <name1> . utils . safestring <name3> <name4> , <name2> , <name6>	<name5> <name1> .utils .safestring <name3> <name4> , <name2> and <name6> into default name space .
<name5> <name1> . utils <name6> <name3>	<name5> <name1> .utils <name6> <name3> into default name space .
<name1> <name3> . utils . <name6> <name4> <name6> , <name2>	<name1> <name3> .utils .timesince <name4> <name6> and <name2> into default name space .
<name1> <name5> . utils . translation <name4> <name3> , <name6>	<name1> <name5> .utils .translation <name4> <name3> and <name6> into default name space .
<name2> <name5> . utils . text <name3> <name1> , <name6> <name4> <name2>	<name2> <name5> .utils .text <name3> <name1> and <name6> <name4> <name2> into default name space .
<name5> = <name4> ( )	<name5> is an instance of <name4> class .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
def <name6> ( * <name2> , ** <name1> ) :	define the method <name6> with 2 arguments : unpacked list <name2> and unpacked dictionary <name1> .
<name5> <name1> :	<name5> <name1> in true ,
<name1> = <name6> ( <name1> )	convert <name1> into a <name6> , substitute it for <name1> .
<name5> [ 0 ] = <name6> ( <name5> [ 0 ] )	call the function <name6> with an argument first element of <name5> , substitute the result for first element of <name5> .
<name5> ( isinstance ( <name1> [ 0 ] , <name4> ) <name2> getattr ( _dec . _decorated_function , <val6>   , False ) ) :	<name5> first element of <name1> is an instance of <name4> , <name2> <val6> attribute of dec ._decorated_function object is true ,
return mark_safe ( <name6> ( * <name5> , ** <name1> ) )	call the function <name6> with 2 arguments : unpacked list <name5> and unpacked dictionary <name1> ,
<name4> <name2> ( * <name1> , ** <name3> )	use the result as an argument for the call to the mark_safe function , <name4> the result . call the function <name2> with 2 arguments : unpacked list <name1> and unpacked dictionary <name3> , <name4> the result .
<name6> . _decorated_function = getattr ( <name5> , <val3>   , <name5> )	get <val3> attribute from the <name5> object , substitute it for <name6> ._decorated_function , if it doesnt exist ,
<name3> <name1> ( <name6> ) ( <name2> )	substitute <name6> for <name2> ._decorated_function . call the function <name1> with an argument <name6> , call the result with an argument <name2> , <name3> the result .
@  <name3> . filter ( <name1> = <name5> )	decorator function <name3> .filter with an argument <name1> set to boolean <name5> .
@  <name4>	decorator <name4> ,
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
@  <name3>	decorator <name3> ,
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
<name2> <name5> and <name5> [ 0 ] . upper ( ) + <name5> [ 1 : ]	if <name5> is false , <name2> it , if it is true convert first element of <name5> to uppercase letter , <name2> the <name5> .
@  <name6> . filter ( <val5> )	decorator function <name6> .filter with an argument string <val5> .
@  <name5>	decorator <name5> ,
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name4> <name5> ( <name2> )	call the function <name5> with an argument <name2> , <name4> the result .
<name1> = 1 e200 * 1 e200	multiply 10 to the power of 200 , with itself , substitute the result for <name1> .
<name1> = - 1 e200 * 1 e200	multiply 10 to the power of 200 , with 10 to the power of 200 , negative , substitute the result for <name1> .
<name4> = ( 1 e200 * 1 e200 ) // ( 1 e200 * 1 e200 )	divide 10 to the power of 400 by 10 to the power of 400 , substitute the result for <name4> .
<name4> = [ str ( <name2> ) , str ( <name1> ) , str ( <name6> ) ]	<name4> is an list with 3 elements , <name2> , <name1> and <name6> , all converted to strings .
@  <name6> . filter ( <name4> = <name2> )	decorator function <name6> .filter with an argument <name4> set to boolean <name2> .
def <name5> ( <name2> , <name1> = - 1 ) :	define the function <name5> with 2 arguments <name2> and <name1> set to integer -1 .
<name6> :	<name6> ,
<name1> = <name4> ( <name3> )	call the function <name4> with an argument <name3> , substitute the result for <name1> .
<name1> = <name2> ( <name4> )	<name1> is an instance of <name2> class created with an argument <name4> .
except <name2> :	if <name2> exception is caught ,
<name4> ''	<name4> an empty string .
except <name5> :	if <name5> exception is caught ,
<name3> <name6> <name1> <name4> :	<name3> every <name6> <name1> <name4> ,
<name4> <name6>	<name4> <name6> .
<name1> :	<name1> ,
<name3> = <name1> ( <name5> ( float ( text ) ) )	<name3> is an instance of class <name1> , created with result of the function <name5> ,
except ( <name2> , <name4> , <name1> , <name6> ) :	called with an argument text converted into a floating point number . if <name2> , <name4> , <name1> or <name6> exceptions are caught ,
<name6> ''	<name6> an empty string .
<name5> :	<name5> ,
<name4> = int ( <name5> )	convert <name5> to an integer , substitute it for <name4> .
except <name5> :	if <name5> exception is caught ,
<name3> <name4>	<name3> <name4> .
<name6> :	<name6> ,
<name1> = int ( <name2> ) - <name2>	convert <name2> into a integer , subtract <name2> from it , substitute the result for <name1> .
except ( <name4> , <name2> , <name3> ) :	if <name4> , <name2> or <name3> exceptions are caught ,
<name3> <name1>	<name3> <name1> .
<name6> not <name2> <name4> <name1> <  <val3> :	<name6> <name2> is false <name4> <name1> is lesser than integer <val3> ,
return mark_safe ( <name3> . number_format ( '%d'   % ( int ( <name1> ) ) , <val2> ) )	call the method <name3> .number_format with 2 arguments , <name1> converted to a integer and then to string , and integer <val2> ,
<name6> <name4> == <val2> :	use the result as an argument for the call to the function mark_safe , return the result . <name6> <name4> equals integer <val2> ,
<name1> = <name5> ( <val6> )	<name1> is an instance of <name5> , created with an argument integer <val6> .
else :	if not ,
exp = <name3> ( <val2>   ) / ( <name3> ( <val4> ) ** abs ( p ) )	instantiate class <name3> with string <val2> as argument , divide it by product of instance of <name3> class created with integer <val4> ,
<name6> :	and absolute value of p , substitute the result for exp . <name6> ,
<name4> = <name1> . as_tuple ( )	call the method <name1> .as_tuple , substitute the result for <name4> .
<name6> = len ( <name2> [ 1 ] ) - <name2> [ 2 ]	subtract third element of <name2> from length of second element of <name2> , substitute the result for <name6> .
<name3> = abs ( <name4> ) + <name5> + <val6>	sum absolute <name4> with <name5> an integer <val6> , substitute the result for <name3> .
sign , digits , exponent = <name4> . quantize ( <name2> , <name1> , <name5> ( <name6> = <name6> ) ) . as_tuple ( )	call the method <name4> .quantize with 3 arguments : <name2> , <name1> and instance of <name5> class created with <name6> as <name6> ,
<name6> = [ <name2> . text_type ( <name1> ) <name3> <name1> <name4> <name5> ( <name6> ) ]	call the method as_tuple on the result , substitute the result <name3> sign , <name6> and exponent , respectively . append result of method <name2> .text_type called with an argument <name1> to an list , <name3> every <name1> <name4> <name5> order of <name6> ,
<name2> len ( <name3> ) <= abs ( <name5> ) :	substitute the resulting list for <name3> . <name2> length of <name3> is smaller than or equal to absolute value of <name5> ,
<name1> . <name6> ( <val3>   )	<name6> <val3> to <name1> .
<name4> . <name3> ( - <name5> , <val2>   )	<name3> <val2> to <name4> at negative <name5> index .
<name4> <name2> :	<name4> <name2> is true ,
<name5> . <name3> ( <val2>   )	<name3> <val2> to <name5> .
<name6> = ''   . <name4> ( reversed ( digits ) )	reverse element order of dicts , <name4> them in a string , substitute the result for <name6> .
return mark_safe ( <name1> . number_format ( <name3> , abs ( <name2> ) ) )	call the method <name1> .number_format with 2 arguments : <name3> and absolute value of <name2> ,
except <name6> :	use the result as an argument for the call to the mark_safe function , return the result . if <name6> exception is caught ,
<name4> <name1>	<name4> <name1> .
@  <name6> . filter ( <name5> = <name4> )	decorator function <name6> .filter with an argument <name5> set to boolean <name4> .
@  <name2>	decorator <name2> ,
def <name1> ( <name2> ) :	define the function <name1> with an argument <name2> .
return <name1> ( <name4> ( <name2> ) )	call the function <name4> with an argument <name2> , use the result as an argument for the call to the <name1> function ,
@  <name2> . filter ( <name6> = <name5> , <name4> = <name5> )	return the result . decorator function <name2> .filter with 2 arguments <name6> set to boolean <name5> and <name4> set to boolean <name5> .
@  <name3>	decorator <name3> ,
def <name5> ( <name6> , <name3> = <name4> ) :	define the function <name5> with 2 arguments <name6> and <name3> set to <name4> .
\ <name6> = <name5> . <name3> ( '\\n'   ) \	<name3> <name5> by newline characters , substitute the result for <name6> .
width = <name6> . text_type ( len ( <name6> . text_type ( len ( <name2> ) ) ) )	call the function <name6> .text_type with length of <name2> as an argument ,
<name1> not <name4> or isinstance ( <name6> , <name2> ) :	use length of result as an argument for the call to the function six .text_type , substitute the result for width . <name1> <name4> is false , <name1> <name6> is an instance of <name2> ,
<name3> <name1> , <name4> <name6> enumerate ( <name2> ) :	<name3> every <name1> and <name4> <name6> enumerated iterable <name2> ,
lines [ <name4> ] = ( <val3> + <name1> + <val2> ) % ( <name4> + <val5> , <name6> )	concatenate string <val3> , <name1> and string <val2> , format the previous string with <name4> incremented by <val5> and <name6> ,
else :	substitute the result for i - th element of lines . if not ,
<name1> <name3> , <name4> <name2> enumerate ( <name5> ) :	<name1> every <name3> and <name4> <name2> enumerated iterable <name5> ,
lines [ <name4> ] = ( <val6> + <name3> + <val2> ) % ( <name4> + <val5> , escape ( line ) )	concatenate string <val6> , <name3> and string <val2> , format the previous string with <name4> incremented by <val5> ,
\ <name4> <name3> ( '\\n'   . join ( <name5> ) ) \	and result of the function escape called with an argument line , substitute the result for i - th element of <name5> . call the method <name3> with <name5> joined into a string , separated by newlines as argument , <name4> the result .
@  <name3> . filter ( <name4> = <name1> )	decorator function <name3> .filter with an argument <name4> set to boolean <name1> .
@  <name3>	decorator <name3> ,
def <name4> ( <name3> ) :	define the function <name4> with an argument <name3> .
<name1> <name2> . lower ( )	convert <name2> to lowercase and <name1> the result .
@  <name1> . filter ( <name6> = <name5> )	decorator function <name1> .filter with an argument <name6> set to boolean <name5> .
@  <name3>	decorator <name3> ,
def <name4> ( <name1> ) :	define the function <name4> with an argument <name1> .
<name6> <name1> ( <name4> )	<name6> <name4> converted into a <name1> .
@  <name4> . filter ( <name6> = <name2> )	decorator function <name4> .filter with an argument <name6> set to boolean <name2> .
@  <name2>	decorator <name2> ,
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name5> <name4> ( <name1> )	call the function <name4> with an argument <name1> , <name5> the result .
@  <name4> . filter ( <name3> = <name5> )	decorator function <name4> .filter with an argument <name3> set to boolean <name5> .
def <name5> ( <name2> , <name1> ) :	define the function <name5> with 2 arguments <name2> and <name1> .
<name4> :	<name4> ,
<name3> ( <val6> + <name4> . text_type ( <name1> ) ) % <name5>	call the function <name4> .text_type with an argument <name1> , append the result to <val6> , format the previous with <name5> , <name3> the result .
except ( <name3> , <name2> ) :	if <name2> or <name3> exceptions are caught ,
"<name2> """""	<name2> an empty string .
@  <name3> . filter ( <name1> = <name5> )	decorator function <name3> .filter with an argument <name1> set to boolean <name5> .
@  <name1>	decorator <name1> ,
def <name4> ( <name2> ) :	define the function <name4> with an argument <name2> .
t = <name3> . sub ( <val2> , <name5> <name4> : <name4> . group ( 0 ) . lower ( ) , <name1> . title ( ) )	call the function <name3> .sub with 3 arguments : string <val2> , <name5> function with an argument <name4> and return <name1> ,
\ <name2> <name1> . sub ( <val4> , <name3> <name5> : <name5> . group ( <val6> ) . lower ( ) , <name2> ) \	\ result of the <name5> .group method called with an argument integer <val6> converted into lowercase and result of the method value .title , substitute the result for <name2> . call the function <name1> .sub with 3 arguments : string <val4> , <name3> function with an argument <name5> and <name2> value , \
@  <name2> . filter ( <name3> = <name6> )	result of the m .group method called with an argument integer 0 converted into lowercase and t , return the result . decorator function <name2> .filter with an argument <name3> set to boolean <name6> .
@  <name5>	decorator <name5> ,
def <name6> ( <name1> , <name5> ) :	define the function <name6> with 2 arguments <name1> and <name5> .
<name4> :	<name4> ,
<name1> = int ( <name5> )	substitute <name5> converted into a integer for <name1> .
except <name3> :	if <name3> exception is caught ,
<name2> <name1>	<name2> <name1> .
<name6> <name5> ( <name3> ) . <name1> ( <name2> )	instantiate class <name5> , with an argument <name3> , call the method <name1> on the result with an argument <name2> , <name6> the result .
@  <name5> . filter ( <name2> = <name6> )	decorator function <name5> .filter with an argument <name2> set to boolean <name6> .
@  <name6>	decorator <name6> ,
def <name1> ( <name2> , <name4> ) :	define the function <name1> with 2 arguments <name2> and <name4> .
<name6> :	<name6> ,
<name1> = int ( <name5> )	substitute <name5> converted into an integer for <name1> .
except <name1> :	if <name1> exception is caught ,
<name5> <name6>	<name5> <name6> .
return <name3> ( <name5> ) . <name2> ( <name4> , html = True )	instantiate class <name3> , with an argument <name5> , call the method <name2> on the result with 2 arguments <name4> ,
@  <name5> . filter ( <name6> = <name4> )	and html set to boolean <name4> , return the result . decorator function <name5> .filter with an argument <name6> set to boolean <name4> .
@  <name4>	decorator <name4> ,
def <name2> ( <name4> , <name5> ) :	define the function <name2> with 2 arguments <name4> and <name5> .
<name4> :	<name4> ,
<name6> = int ( <name4> )	substitute <name4> converted into an integer for <name6> .
except <name2> :	if <name2> exception is caught ,
<name5> <name2>	<name5> <name2> .
return <name6> ( <name4> ) . <name1> ( <name3> , truncate = ' ...'   )	instantiate class <name6> , with an argument <name4> , call the method <name1> on the result with 2 arguments <name3> ,
@  <name5> . filter ( <name4> = <name1> )	and truncate set to string ' ...' , return the result . decorator function <name5> .filter with an argument <name4> set to boolean <name1> .
@  <name4>	decorator <name4> ,
def <name3> ( <name4> , <name6> ) :	define the function <name3> with 2 arguments <name4> and <name6> .
<name1> :	<name1> ,
<name3> = int ( <name6> )	substitute <name6> converted into an integer for <name3> .
except <name3> :	if <name3> exception is caught ,
<name6> <name3>	<name6> <name3> .
return <name3> ( <name4> ) . <name2> ( <name5> , html = True , truncate = ' ...'   )	instantiate class <name3> , with an argument <name4> , call the method <name2> on the result with 3 arguments <name5> ,
@  <name1> . filter ( <name6> = <name5> )	html set to boolean True and truncate set to string ' ...' , return the result . decorator function <name1> .filter with an argument <name6> set to boolean <name5> .
@  <name5>	decorator <name5> ,
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name4> <name6> . upper ( )	convert <name6> to uppercase , <name4> the result .
@  <name6> . filter ( <name5> = <name4> )	decorator function <name6> .filter with an argument <name5> set to boolean <name4> .
@  <name1>	decorator <name1> ,
def <name6> ( <name1> , <name2> = <name3> ) :	define the function <name6> with 2 arguments <name1> and <name2> set to <name3> .
<name1> = { }	<name1> is an empty dictionary .
<name3> <name2> <name1> <name6> <name4> :	<name3> <name2> <name1> <name6> <name4> ,
<name2> [ <val4>   ] = <name6>	substitute <name6> for value under the <val4> key of <name2> dictionary .
<name2> <name4> ( <name6> , ** <name1> )	call the function <name4> with 2 arguments <name6> and unpacked dictionary <name1> , <name2> the result .
@  <name1> . filter ( <name3> = <name6> , <name2> = <name6> )	decorator function <name1> .filter with 2 arguments <name3> set to boolean <name6> and <name2> set to boolean <name6> .
@  <name4>	decorator <name4> ,
def <name4> ( <name5> , <name2> = <name1> ) :	define the function <name4> with 2 arguments <name5> and <name2> set to <name1> .
return mark_safe ( <name5> ( <name1> , <name4> = <name2> , <name6> = <name6> ) )	call the function <name5> with 3 arguments : <name1> , <name4> set to boolean <name2> , <name6> set to <name6> ,
@  <name4> . filter ( <name2> = <name1> , <name5> = <name1> )	use the result as an argument for the call to the function mark_safe , return the result . decorator function <name4> .filter with 2 arguments <name2> set to boolean <name1> and <name5> set to boolean <name1> .
@  <name6>	decorator <name6> ,
def <name6> ( <name4> , <name2> , <name3> = <name5> ) :	define the function <name6> with 3 arguments <name4> , <name2> and <name3> set to <name5> .
return mark_safe ( <name1> ( <name4> , <name3> = int ( <name6> ) , <name5> = <name2> , autoescape = autoescape ) )	call the function <name1> with 4 arguments : <name4> , <name3> as <name6> converted into an integer , <name5> as boolean <name2> ,
@  <name4> . filter ( <name5> = <name6> )	and autoescape as autoescape , use the result as an argument for the call to the function mark_safe , return the result . decorator function <name4> .filter with an argument <name5> set to boolean <name6> .
@  <name3>	decorator <name3> ,
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name5> len ( <name4> . <name2> ( ) )	<name2> <name4> into words , <name5> the length of the result .
@  <name3> . filter ( <name6> = <name1> )	decorator function <name3> .filter with an argument <name6> set to boolean <name1> .
@  <name5>	decorator <name5> ,
def <name3> ( <name5> , <name4> ) :	define the function <name3> with 2 arguments <name5> and <name4> .
<name2> <name6> ( <name1> , int ( <name3> ) )	call the method <name6> with 2 arguments , <name1> and <name3> converted into a integer , <name2> the result .
@  <name1> . filter ( <name2> = <name5> )	decorator function <name1> .filter with an argument <name2> set to boolean <name5> .
@  <name6>	decorator <name6> ,
def <name2> ( <name6> , <name1> ) :	define the function <name2> with 2 arguments <name6> and <name1> .
<name2> <name6> . ljust ( int ( <name3> ) )	call the method <name6> .ljust with an argument , <name3> converted into a integer , <name2> the result .
@  <name1> . filter ( <name5> = <name3> )	decorator function <name1> .filter with an argument <name5> set to boolean <name3> .
@  <name5>	decorator <name5> ,
def <name2> ( <name6> , <name1> ) :	define the function <name2> with 2 arguments <name6> and <name1> .
<name6> <name2> . rjust ( int ( <name5> ) )	call the method <name2> .rjust with an argument , <name5> converted into a integer , <name6> the result .
@  <name3> . filter ( <name1> = <name6> )	decorator function <name3> .filter with an argument <name1> set to boolean <name6> .
@  <name3>	decorator <name3> ,
def <name5> ( <name2> , <name1> ) :	define the function <name5> with 2 arguments <name2> and <name1> .
<name2> <name3> . center ( int ( <name1> ) )	call the method <name3> .center with an argument , <name1> converted into a integer , <name2> the result .
@  <name3> . filter	decorator <name3> .filter .
@  <name4>	decorator <name4> ,
def <name6> ( <name2> , <name5> ) :	define the function <name6> with 2 arguments <name2> and <name5> .
<name6> = isinstance ( <name3> , <name1> )	if <name3> is an instance of <name1> , <name6> is boolean True , otherwise it is boolean False .
<name4> = <name4> . <name6> ( <name3> , ''   )	<name6> every occurrence of <name3> is <name4> for an empty string , substitute the result for <name4> .
<name2> <name3> <name6> <name5> != <val4>   :	<name2> <name3> is true <name6> <name5> is not equal to string <val4> ,
<name5> <name1> ( <name6> )	call the function <name1> with an argument <name6> , <name5> the result .
<name2> <name4>	<name2> <name4> .
@  <name3> . filter ( <val5> , <name4> = <name6> )	decorator function <name3> .filter with 2 arguments string <val5> and <name4> set to boolean <name6> .
@  <name3>	decorator <name3> ,
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
<name4> <name5> ( <name2> )	call the function <name5> with an argument <name2> , <name4> the result .
@  <name4> . filter ( <name5> = <name3> )	decorator function <name4> .filter with an argument <name5> set to boolean <name3> .
@  <name4>	decorator <name4> ,
def <name6> ( <name1> ) :	define the function <name6> with an argument <name1> .
<name3> <name5> ( <name2> )	call the function <name5> with an argument <name2> , <name3> the result .
"@  <name4> . filter ( ""linebreaks"" , <name3> = <name1> , <name2> = <name1> )"	"decorator function <name4> .filter with 3 arguments string ""slice"" , <name3> set to boolean <name1> and <name2> set to <name1> ."
@  <name5>	decorator <name5> ,
def <name4> ( <name3> , <name1> = <name6> ) :	define the function <name4> with 2 arguments <name3> and <name1> set to <name6> .
<name6> = <name6> <name3> <name1> isinstance ( <name4> , <name2> )	if <name6> is true <name3> <name4> is <name1> an instance of <name2> , <name6> is boolean True , otherwise it is boolean False .
return <name3> ( <name4> ( <name1> , <name2> ) )	call the function <name4> with 2 arguments <name1> and <name2> , use the result as an argument for the call to the <name3> ,
@  <name2> . filter ( <name5> = <name1> , <name3> = <name1> )	return the result . decorator function <name2> .filter with 2 arguments <name5> set to boolean <name1> and <name3> set to boolean <name1> .
@  <name3>	decorator <name3> ,
def <name4> ( <name2> , <name3> = <name5> ) :	define the function <name4> with 2 arguments <name2> and <name3> set to <name5> .
<name1> = <name1> <name4> <name5> isinstance ( <name6> , <name3> )	if <name1> is true <name4> <name6> is <name5> an instance of <name3> , <name1> is boolean True , otherwise it is boolean False .
<name5> = <name6> ( <name5> )	call the function <name6> with an argument <name5> , substitute the result for <name5> .
<name1> <name3> :	<name1> <name3> is true ,
<name6> = <name3> ( <name6> )	call the function <name3> with an argument <name6> , substitute it for <name6> .
\ return <name5> ( <name3> . <name6> ( '\\n'   , <val2>   ) ) \	<name6> every occurrence of newline character in <name3> with string <val2> , use it as an argument for the call to the <name5> ,
@  <name4> . filter ( <name1> = <name6> )	return the result . decorator function <name4> .filter with an argument <name1> set to boolean <name6> .
@  <name5>	decorator <name5> ,
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name6> <name3> ( <name4> )	call the function <name3> with an argument <name4> , <name6> the result .
@  <name5> . filter ( <name2> = <name4> )	decorator function <name5> .filter with an argument <name2> set to boolean <name4> .
def <name5> ( <name1> ) :	define the function <name5> with an argument <name1> .
return [ <name4> ( <name6> ( <name3> ) ) <name1> <name3> <name2> <name5> ]	<name1> every <name3> <name2> <name5> call the function <name4> with an argument result of the function <name6> called with an argument <name3> ,
@  <name4> . filter ( <name1> = <name3> )	return all the results in a list . decorator function <name4> .filter with an argument <name1> set to boolean <name3> .
@  <name1>	decorator <name1> ,
def <name1> ( <name3> , tags ) :	define the function <name1> with 2 arguments <name3> and arg .
<name2> <name6> ( <name3> , <name1> )	call the function <name6> with 2 arguments <name3> and <name1> , <name2> the result .
@  <name6> . filter ( <name4> = <name3> )	decorator function <name6> .filter with an argument <name4> set to boolean <name3> .
@  <name1>	decorator <name1> ,
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
<name5> <name3> ( <name6> )	call the function <name3> with an argument <name6> , <name5> the result .
@  <name3> . filter ( <name4> = <name6> )	decorator function <name3> .filter with an argument <name4> set to boolean <name6> .
def <name2> ( <name6> , <name1> ) :	define the function <name2> with 2 arguments <name6> and <name1> .
<name6> :	<name6> ,
<name5> sorted ( <name4> , <name3> = <name2> ( <name1> ) . <name6> )	sort <name4> with <name3> set to filed <name6> of instance of a class <name2> , created with an argument <name1> , <name5> the result .
except ( <name3> , <name2> ) :	if <name3> or <name2> exceptions are caught ,
<name4> ''	<name4> an empty string .
@  <name3> . filter ( <name1> = <name2> )	decorator function <name3> .filter with an argument <name1> set to boolean <name2> .
def <name6> ( <name4> , <name5> ) :	define the function <name6> with 2 arguments <name4> and <name5> .
<name1> :	<name1> ,
<name2> sorted ( <name4> , <name3> = <name6> ( <name1> ) . <name5> , <name2> = True )	sort <name4> with <name3> set to filed <name5> of instance of a class <name6> , created with an argument <name1> , <name2> the sort and <name2> the result .
except ( <name2> , <name3> ) :	if <name2> or <name3> exceptions are caught ,
<name4> ''	<name4> an empty string .
@  <name3> . filter ( <name5> = <name2> )	decorator function <name3> .filter with an argument <name5> set to boolean <name2> .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name5> :	<name5> ,
<name5> <name2> [ 0 ]	<name5> first element of <name2> .
except <name3> :	if <name3> exception is caught ,
<name1> ''	<name1> an empty string .
@  <name1> . filter ( <name2> = <name5> , <name4> = <name5> )	decorator function <name1> .filter with 2 arguments <name2> set to boolean <name5> and <name4> set to boolean <name5> .
def <name4> ( <name1> , <name3> , <name2> = <name5> ) :	define the function <name4> with 3 arguments : <name1> , <name3> and <name2> set to <name5> .
<name4> = <name5> ( <name1> , <name4> )	<name5> elements of <name4> through mapping function <name1> , substitute the result for <name4> .
<name1> <name6> :	<name1> <name6> is true ,
<name2> = [ <name6> ( <name1> ) <name4> <name1> <name5> <name2> ]	<name4> every <name1> <name5> <name2> call the function <name6> with an argument <name1> , append the result <name5> a list , substitute the resulting list <name4> <name2> .
<name5> :	<name5> ,
data = <name1> ( <name2> ) . <name6> ( <name3> )	call the function <name1> with an argument <name2> , call the method <name6> on the result with an argument <name3> ,
except <name4> :	substitute the result for data . if <name4> exception is caught ,
<name6> <name2>	<name6> <name2> .
<name6> <name5> ( <name4> )	call the function <name5> with an argument <name4> , <name6> the result .
@  <name6> . filter ( <name3> = <name1> )	decorator function <name6> .filter with an argument <name3> set to boolean <name1> .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name1> :	<name1> ,
<name4> <name1> [ - 1 ]	<name4> last element of <name1> .
except <name5> :	if <name5> exception is caught ,
<name3> ''	<name3> an empty string .
@  <name6> . filter ( <name2> = <name4> )	decorator function <name6> .filter with an argument <name2> set to boolean <name4> .
def <name5> ( <name2> ) :	define the function <name5> with an argument <name2> .
<name6> :	<name6> ,
<name2> len ( <name1> )	<name2> length of <name1> ,
except ( <name4> , <name2> ) :	if <name2> or <name4> exceptions are caught ,
<name2> <val3>	<name2> integer <val3> .
@  <name4> . filter ( <name2> = <name5> )	decorator function <name4> .filter with an argument <name2> set to boolean <name5> .
def <name2> ( <name4> , <name6> ) :	define the function <name2> with 2 arguments <name4> and <name6> .
<name5> :	<name5> ,
<name4> len ( <name5> ) == int ( <name2> )	if lengths of <name5> and <name2> are equal , <name4> boolean True , otherwise <name4> boolean False .
except ( <name4> , <name5> ) :	if <name5> or <name4> exceptions are caught ,
<name1> ''	<name1> an empty string .
@  <name1> . filter ( <name6> = <name2> )	decorator function <name1> .filter with an argument <name6> set to boolean <name2> .
def <name3> ( <name1> ) :	define the function <name3> with an argument <name1> .
<name1> <name6> . choice ( <name4> )	call the function <name6> .choice with an argument <name4> , <name1> the result .
@  <name3> . filter ( <val4> , <name1> = <name5> )	decorator function <name3> .filter with 2 arguments string <val4> and <name1> set to boolean <name5> .
def <name3> ( <name5> , <name6> ) :	define the function <name3> with 2 arguments <name5> and <name6> .
<name6> :	<name6> ,
<name3> = [ ]	<name3> is an empty list .
<name6> <name4> <name1> <name2> . <name3> ( <val5>   ) :	<name3> <name2> by <val5> , <name6> every <name4> <name1> result ,
<name2> len ( <name3> ) == <val6> :	<name2> length of <name3> is equal to integer <val6> ,
<name6> . <name4> ( <name1> )	<name4> <name1> to <name6> .
else :	if not ,
<name2> . <name1> ( int ( <name6> ) )	<name1> <name6> converted to an integer to <name2> .
<name6> <name5> [ <name3> ( * <name1> ) ]	<name3> the list <name5> with unpacked list <name1> as an argument , <name6> the result .
except ( <name3> , <name1> ) :	if <name1> or <name3> exceptions are caught ,
<name2> <name6>	<name2> <name6> .
@  <name1> . filter ( <name5> = <name6> , <name2> = <name6> )	decorator function <name1> .filter with 2 arguments <name5> set to boolean <name6> and <name2> set to boolean <name6> .
def <name6> ( <name3> , <name2> = <name1> ) :	define the function <name6> with 2 arguments <name3> and <name2> set to <name1> .
<name1> <name6> :	<name1> <name6> is true ,
<name2> = <name3>	substitute <name3> for <name2> .
else :	if not ,
<name3> = <name5> x : x	<name3> is an identity <name5> function .
def <name3> ( <name1> ) :	define the function <name3> with an argument <name1> .
<name6> <name2> isinstance ( <name4> , ( <name1> , <name5> ) ) <name3> len ( <name4> ) != <val6> :	<name6> <name4> is <name2> an instance of <name1> <name3> <name5> types and length of <name4> is <name2> equal to integer <val6> ,
<name5> <name2> , <name6>	<name5> <name2> and boolean <name6> .
<name3> , <name5> = <name6>	substitute <name6> for <name3> and <name5> , respectively .
<name4> <name1> == [ ] :	<name4> <name1> is an empty list ,
<name2> [ <name3> ] , <name5>	<name2> list with an element <name3> , and boolean <name5> .
<name1> :	<name1> ,
iter ( second_item )	convert second item to an iterable ,
except <name4> :	if <name4> exception is caught ,
<name1> <name4> , <name2>	<name1> <name4> and boolean <name2> .
<name5> = <name4>	<name5> is boolean <name4> .
<name6> = [ ]	<name6> is an empty list .
<name2> <name1> <name4> <name6> :	<name2> every <name1> <name4> <name6> ,
<name3> , <name5> = <name1> ( <name4> )	call the function <name1> with an argument <name4> , substitute the result for <name3> and <name5> .
<name5> not <name4> :	<name5> <name4> is false ,
<name2>	<name2> from the loop execution ,
<name1> . <name2> ( <name4> )	<name2> <name1> with <name4> .
<name5> <name2> :	<name5> <name2> is true ,
<name4> = <name3>	substitute <name3> with <name4> .
<name3> [ <name2> , <name5> ] , <name6>	<name3> list with 2 elements : <name2> and <name5> , and <name6> .
def <name5> ( list_ , <name4> = <val2> ) :	define the function <name5> with 2 arguments list and <name4> set to integer <val2> .
\ <name1> = '\\t'   * <name6> \	<name1> contain <name6> number of tab character .
<name5> = [ ]	<name5> is an empty list .
<name6> = len ( <name2> )	substitute length of <name2> for <name6> .
<name3> = <val5>	<name3> is integer <val5> .
<name1> <name2> <  <name3> :	<name1> <name2> is smaller than <name3> ,
<name6> = list_ [ <name1> ]	substitute <name1> - th element of list for <name6> .
<name1> = ''	<name1> is an empty string .
<name5> = <name6>	<name5> is <name6> .
<name3> isinstance ( <name1> , ( <name2> , <name6> ) ) :	<name3> <name1> is an instance of <name2> or <name6> ,
<name1> = <name6>	substitute <name6> for <name1> .
<name2> = ''	<name2> is an empty string .
elif <name4> <  <name1> - 1 :	otherwise if <name4> is smaller than <name1> decremented by one ,
<name2> = <name4> [ <name5> + <val3> ]	substitute ( <name5> + <val3> ) - th element of <name4> for <name2> .
<name6> <name2> <name3> isinstance ( <name2> , ( <name1> , <name5> ) ) :	<name6> <name2> is true <name3> <name2> is an instance of <name1> or <name5> type ,
   <name6> = <name3>	substitute <name3> for <name6> .
<name6> += <val3>	increment <name6> by integer <val3> .
<name6> <name3> :	<name6> <name3> is true ,
<name3> = <name4> ( <name5> , <name1> + <val6> )	call the function <name4> with 2 arguments : <name5> and <name1> incremented by <val6> , substitute the result for <name3> .
\ <name3> = <val1>   % ( <name6> , <name3> , <name6> , <name6> ) \	\ <name3> is an string <val1> , where every '%s' is replaced with <name6> , <name3> , <name6> and <name6> , respectively . \
output . append ( <val4>   % ( <name2> , <name6> ( force_text ( title ) ) , sublist ) )	substitute every '%s' in string <val4> with <name2> , with result of the function <name6> called with an argument :
<name2> += <val6>	result of the function force_text called with an argument title , and with sublist , append the string to output . increment <name2> by <val6> .
\ <name3> '\\n'   . <name2> ( <name1> ) \	<name2> elements of <name1> into a string , separated with newlines , <name3> the result .
<name3> , <name1> = <name2> ( <name3> )	call the function <name2> with an argument <name3> , substitute the result for <name3> and <name1> , respectively .
<name6> <name2> ( <name1> ( <name5> ) )	call the function <name1> with an argument <name5> , use it as an argument for the call to the function <name2> , <name6> the result .
@  <name5> . filter ( <name4> = <name2> )	decorator function <name5> .filter with an argument <name4> set to boolean <name2> .
def <name5> ( <name3> , <name2> ) :	define the function <name5> with 2 arguments <name3> and <name2> .
<name2> :	<name2> ,
<name3> int ( <name4> ) + int ( <name5> )	convert <name4> and <name5> into a integers , <name3> their sum .
except ( <name3> , <name6> ) :	if <name6> or <name3> exceptions are caught ,
<name2> :	<name2> ,
<name3> <name4> + <name6>	sum <name4> and <name6> , <name3> the result .
except <name2> :	if <name2> exception is caught ,
<name5> ''	<name5> an empty string .
@  <name4> . filter ( <name6> = <name2> )	decorator function <name4> .filter with an argument <name6> set to boolean <name2> .
def <name5> ( <name6> , <name2> ) :	define the function <name5> with 2 arguments <name6> and <name2> .
<name3> :	<name3> ,
<name5> = int ( <name5> )	convert <name5> to an integer .
<name5> = int ( <name5> )	convert <name5> to an integer .
except <name4> :	if <name4> exception is caught ,
<name3> <name1>	<name3> <name1> .
<name3> <name5> <  <val4> :	<name3> <name5> is smaller than integer <val4> ,
<name4> <name6>	<name4> <name6> .
<name5> :	<name5> ,
<name6> int ( str ( <name3> ) [ - <name1> ] )	convert <name3> into a string , take character at the negative <name1> index , convert it into an integer , <name6> it .
except <name2> :	if <name2> exception is caught ,
<name4> <val2>	<name4> integer <val2> .
@  <name6> . filter ( <name3> = <name4> , <name5> = <name2> )	decorator function <name6> .filter with 2 arguments <name3> set to boolean <name4> and <name5> set to boolean <name2> .
def <name4> ( <name2> , <name1> = <name5> ) :	define the function <name4> with 2 arguments <name2> and <name1> set to <name5> .
<name2> value in ( <name3> , ''   ) :	<name2> vale is <name3> or an empty string ,
<name1> ''	<name1> an empty string .
<name6> <name2> <name3> <name4> :	<name6> <name2> <name3> <name4> ,
<name4> = <name5> . DATE_FORMAT	substitute <name5> .DATE_FORMAT for <name4> .
<name2> :	<name2> ,
<name4> <name6> . date_format ( <name1> , <name2> )	call the method <name6> .time_format with 2 arguments : <name1> and <name2> , <name4> the result .
except <name1> :	if <name1> exception is caught ,
<name2> :	<name2> ,
<name4> <name5> ( <name3> , <name1> )	<name5> <name3> into printable data representation with formating rules <name1> , <name4> the result .
except <name4> :	if <name4> exception is caught ,
<name4> ''	<name4> an empty string .
@  <name4> . filter ( <name1> = <name6> , <name3> = <name5> )	decorator function <name4> .filter with 2 arguments <name1> set to boolean <name6> and <name3> set to boolean <name5> .
def <name1> ( <name5> , <name6> = <name4> ) :	define the function <name1> with 2 arguments <name5> and <name6> set to <name4> .
<name6> value in ( <name2> , ''   ) :	<name6> vale is <name2> or an empty string ,
<name1> ''	<name1> an empty string .
<name1> <name6> <name3> <name4> :	<name1> <name6> <name3> <name4>
<name3> = <name4> . TIME_FORMAT	substitute <name4> .TIME_FORMAT for <name3> .
<name1> :	<name1> ,
<name3> <name1> . time_format ( <name2> , <name4> )	call the method <name1> .time_format with 2 arguments : <name2> and <name4> , <name3> the result .
except <name1> :	if <name1> exception is caught ,
<name6> :	<name6> ,
<name4> <name5> ( <name6> , <name2> )	call the function <name5> with 2 arguments : <name6> and <name2> , <name4> the result .
except <name4> :	if <name4> exception is caught ,
<name6> ''	<name6> an empty string .
@  <name1> . filter ( <val6> , <name4> = <name3> )	decorator function <name1> .filter with 2 arguments string <val6> and <name4> set to boolean <name3> .
def <name3> ( <name6> , <name4> = <name2> ) :	define the function <name3> with 2 arguments <name6> and <name4> set to <name2> .
<name2> not <name1> :	<name2> <name1> is false ,
<name3> ''	<name3> an empty string .
<name3> :	<name3> ,
<name5> <name1> :	<name5> <name1> is true ,
<name3> <name4> ( <name6> , <name5> )	call the function <name4> with 2 arguments : <name6> and <name5> , <name3> the result .
<name6> <name5> ( <name4> )	call the function <name5> with an argument <name4> , <name6> the result .
except ( <name6> , <name5> ) :	if <name5> or <name6> exceptions are caught ,
<name4> ''	<name4> an empty string .
@  <name4> . filter ( <val6> , <name5> = <name3> )	decorator function <name4> .filter with 2 arguments string <val6> and <name5> set to boolean <name3> .
def <name2> ( <name6> , <name4> = <name5> ) :	define the function <name2> with 2 arguments <name6> and <name4> set to <name5> .
<name4> not <name2> :	<name4> <name2> is false ,
<name6> ''	<name6> an empty string .
<name5> :	<name5> ,
<name4> <name3> ( <name2> , <name6> )	call the function <name3> with 2 arguments <name2> and <name6> , <name4> the result .
except ( <name3> , <name5> ) :	if <name5> or <name3> exceptions are caught ,
<name4> ''	<name4> an empty string .
@  <name1> . filter ( <name6> = <name3> )	decorator function <name1> .filter with an argument <name6> set to boolean <name3> .
def <name6> ( <name5> , <name4> ) :	define the function <name6> with 2 arguments <name5> and <name4> .
<name6> <name3> or <name2>	<name6> <name3> , if it is None <name6> <name2> .
@  <name5> . filter ( <name1> = <name2> )	decorator function <name5> .filter with an argument <name1> set to boolean <name2> .
def <name6> ( <name1> , <name5> ) :	define the function <name6> with 2 arguments <name1> and <name5> .
<name6> <name4> <name2> <name1> :	<name6> <name4> <name2> <name1> ,
<name1> <name4>	<name1> <name4> .
<name3> <name4>	<name3> <name4> .
@  <name6> . filter ( <name2> = <name5> )	decorator function <name6> .filter with an argument <name2> set to boolean <name5> .
def <name4> ( <name2> , <name1> ) :	define the function <name4> with 2 arguments <name2> and <name1> .
<name3> int ( <name4> ) % int ( <name1> ) == 0	convert <name4> and <name1> to integers , if <name4> is divisible by <name1> , <name3> True , otherwise <name3> boolean False .
@  <name3> . filter ( <name1> = <name4> )	decorator function <name3> .filter with an argument <name1> set to boolean <name4> .
def <name1> ( <name6> , <name3> = <name2> ) :	define the function <name1> with 2 arguments <name6> and <name3> set to <name2> .
<name5> <name1> <name2> <name3> :	<name5> <name1> <name2> <name3>
<name2> = <name1> ( <val3>   )	call the function <name1> with string <val3> as an argument , substitute the result for <name2> .
<name6> = <name4> . <name3> ( <val2>   )	<name3> <name4> by <val2> , substitute the result for <name6> .
<name2> len ( <name3> ) <  <val6> :	<name2> length of <name3> is lesser than integer <val6> ,
<name3> <name1>	<name3> <name1> .
<name2> :	<name2> ,
<name2> , <name1> , <name5> = <name6>	assign <name6> elements to <name2> , <name1> and <name5> , respectively .
except <name2> :	if <name2> exception is caught ,
<name4> , <name5> , <name3> = <name6> [ 0 ] , <name6> [ 1 ] , <name6> [ 1 ]	substitute first , second and second elements of <name6> for <name4> , <name5> , <name3> , respectively .
<name6> <name5> <name4> <name1> :	<name6> <name5> <name4> <name1> ,
<name5> <name1>	<name5> <name1> .
<name1> <name4> :	<name1> <name4> is true ,
<name1> <name4>	<name1> <name4> .
<name1> <name4>	<name1> <name4> .
@  <name2> . filter ( <name3> = <name5> )	decorator function <name2> .filter with an argument <name3> set to boolean <name5> .
def <name6> ( <name4> ) :	define the function <name6> with an argument <name4> .
<name5> :	<name5> ,
<name6> = float ( <name6> )	convert <name6> to floating point number , substitute it for <name6> .
except ( <name3> , <name5> , <name6> ) :	if <name3> , <name5> or <name6> exceptions are caught ,
value = <name3> ( <val2> , <val4> , <val1> ) % {  'size'   : <val1> }	call the function <name3> with 3 arguments : string <val2> , string <val4> and <val1> , '%(size)d' is replaced with <val1> ,
<name2> <name5> ( <name4> )	substitute the result for <name4> . call the function <name5> with an argument <name4> , <name2> the result .
<name6> = <name4> <name1> : <name5> . number_format ( round ( <name1> , 1 ) , 1 )	<name6> is an <name4> function with an argument <name1> , return <name1> is the result of the method <name5> .number_format ,
<name6> = <val5> << <val3>	called with 2 arguments : value rounded to <val5> decimal point and integer <val5> . move integer <val5> left for <val3> bits , substitute the result for <name6> .
<name5> = <val4> << <val1>	move integer <val4> left for <val1> bits , substitute the result for <name5> .
<name4> = <val6> << <val2>	move integer <val6> left for <val2> bits , substitute the result for <name4> .
<name4> = <val2> << <val6>	move integer <val2> left for <val6> bits , substitute the result for <name4> .
<name2> = <val1> << <val3>	move integer <val1> left for <val3> bits , substitute the result for <name2> .
<name2> <name6> <  <name1> :	<name2> <name6> is smaller than <name1> ,
value = ungettext ( <val3> , <val5> , <name1> ) % {  'size'   : <name1> }	call the function ugettext with 3 arguments , string <val3> , string <val5> and <name1> ,
elif <name1> <  <name2> :	replace ' % ( size ) d with <name1> , substitute the result for value . otherwise if <name1> is smaller than <name2> ,
value = <name3> ( <val5> ) % filesize_number_format ( bytes / KB )	call the function <name3> with an argument string <val5> , substitute '%s' with the result of the call to the function ,
elif <name3> <  <name2> :	filesize_number_format with result of division of <name3> by KB as an argument , substitute the result for value . otherwise if <name3> is smaller than <name2> ,
value = <name3> ( <val1> ) % filesize_number_format ( bytes / MB )	call the function <name3> with an argument string <val1> , substitute '%s' with the result of the call to the function ,
elif <name2> <  <name1> :	filesize_number_format with result of division of <name2> by MB as an argument , substitute the result for value . otherwise if <name2> is smaller than <name1> ,
value = <name5> ( <val3> ) % filesize_number_format ( bytes / GB )	call the function <name5> with an argument string <val3> , substitute '%s' with the result of the call to the function ,
elif <name2> <  <name6> :	filesize_number_format with result of division of <name2> by GB as an argument , substitute the result for value . otherwise if <name2> is smaller than <name6> ,
value = <name3> ( <val4> ) % filesize_number_format ( bytes / TB )	call the function <name3> with an argument string <val4> , substitute '%s' with the result of the call to the function ,
else :	filesize_number_format with result of division of bytes by TB as an argument , substitute the result for value . if not ,
value = <name1> ( <val2> ) % filesize_number_format ( bytes / PB )	call the function <name1> with an argument string <val2> , substitute '%s' with the result of the call to the function ,
<name4> <name5> ( <name6> )	filesize_number_format with result of division of bytes by PB as an argument , substitute the result for <name6> . call the function <name5> with an argument <name6> , <name4> the result .
@  <name6> . filter ( <name1> = <name2> )	decorator function <name6> .filter with an argument <name1> set to boolean <name2> .
def <name2> ( <name1> , <name4> = <val3>   ) :	define the function <name2> with 2 arguments <name1> and <name4> set to character <val3> .
<name1> <val5>   <name2> <name3> <name6> :	<name1> <val5> is <name2> contained <name3> <name6> ,
<name2> = <val5>   + <name2>	append <name2> to <val5> , substitute the result for <name2> .
<name6> = <name1> . <name5> ( <val2>   )	<name5> <name1> by <val2> , substitute the result for <name6> .s
<name4> len ( <name5> ) >  <val3> :	<name4> length of <name5> is greater than integer <val3> ,
<name4> ''	<name4> an empty string .
<name5> , <name6> = <name2> [ : <val4> ]	substitute first <val4> elements of <name2> for <name5> and <name6> , respectively .
<name1> :	<name1> ,
<name3> float ( <name2> ) != <val5> :	convert <name2> to an floating point number <name3> it is not equal to integer <val5> ,
<name3> <name4>	<name3> <name4> .
except <name2> :	if <name2> exception is caught ,
pass	do nothing ,
except <name5> :	if <name5> exception is caught ,
<name3> :	<name3> ,
<name5> len ( <name3> ) != <val2> :	<name5> length of <name3> is not equal to integer <val2> ,
<name2> <name3>	<name2> <name3> .
except <name1> :	if <name1> exception is caught ,
pass	do nothing ,
<name6> <name5>	<name6> <name5> .
@  <name5> . filter ( <val2> , <name4> = <name1> )	decorator function <name5> .filter with 2 arguments string <val2> and <name4> set to boolean <name1> .
def <name4> ( <name1> ) :	define the function <name4> with an argument <name1> .
<name3> <name6> ( <name2> )	call the function <name6> with an argument <name2> , <name3> the result .
@  <name5> . filter ( <name6> = <name1> )	decorator function <name5> .filter with an argument <name6> set to boolean <name1> .
def <name2> ( <name6> ) :	define the function <name2> with an argument <name6> .
<name5> :	<name5> ,
<name2> <name6> ( <name1> )	call the function <name6> with an argument <name1> , <name2> the result .
except <name4> as <name1> :	if <name4> , renamed to <name1> , exception is caught ,
"<name4> <val1> % <name2> ( e , errors = ""replace"" )"	<name4> an string <val1> , replace '%s' with result of the function <name2> ,
<name6> <name4> <name1> <name2>	<name6> <name4> <name1> <name2> into default name space .
<name2> <name3>	<name2> module <name3> .
<name6> <name5>	<name6> module <name5> .
<name1> <name3>	<name1> module <name3> .
<name5> <name2> <name1> <name2>	<name5> <name2> <name1> <name2> into default name space .
<name3> <name5> <name1> <name2> , <name6> <name4> <name3>	<name3> <name5> <name1> <name2> and <name6> <name4> <name3> into default name space .
<name1> <name5>	<name1> module <name5> .
<name6> <name2> . conf <name5> <name1>	<name6> <name2> .conf <name5> <name1> into default name space .
<name2> <name6> . template . base <name3> ( <name5> , <name4> , <name1> , <name2> , <name6> , <name3> , <name5> , InvalidTemplateLibrary , BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END , SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END , VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re , render_value_in_context )	<name2> <name6> .template .base <name3> <name5> , <name4> , <name1> , <name2> , <name6> , <name3> , <name5> ,
<name5> <name1> . template . smartif <name2> <name6> , <name3>	validTemplateLibrary , BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END , SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END , VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re and render_value_in_context . <name5> <name1> .template .smartif <name2> <name6> and <name3> into default name space .
<name4> <name3> . template . defaultfilters <name1> <name5>	<name4> <name3> .template .defaultfilters <name1> <name5> into default name space .
<name3> <name1> . utils . deprecation <name2> <name6>	<name3> <name1> .utils .deprecation <name2> <name6> into default name space .
<name5> <name4> . utils . encoding <name3> <name6> , <name2>	<name5> <name4> .utils .encoding <name3> <name6> and <name2> into default name space .
<name2> <name5> . utils . safestring <name4> <name3>	<name2> <name5> .utils .safestring <name4> <name3> into default name space .
<name2> <name5> . utils . html <name6> <name3>	<name2> <name5> .utils .html <name6> <name3> into default name space .
<name1> <name6> . utils <name5> <name3>	<name1> <name6> .utils <name5> <name3> into default name space .
<name1> <name3> . utils <name2> <name4>	<name1> <name3> .utils <name2> <name4> into default name space .
<name6> = <name5> ( )	<name6> is an instance of <name5> class .
<name2> <name6> ( <name4> ) :	derive the <name2> <name6> from <name4> base <name2> .
def <name1> ( <name5> , <name6> , <name3> ) :	define the method <name1> with 3 arguments : <name5> , <name6> and <name3> .
<name1> . <name3> , <name1> . <name5> = <name3> , <name5>	substitute <name3> and <name5> for <name1> .setting and <name1> .nodelist , respectively .
def <name5> ( <name2> , <name6> ) :	define the method <name5> with 2 arguments : <name2> and <name6> .
<name4> = <name3> . autoescape	substitute <name3> .autoescape for <name4> .
<name3> . autoescape = <name5> . setting	substitute <name5> .setting for <name3> .autoescape .
<name1> = <name5> . nodelist . render ( <name3> )	call the method <name5> .nodelist .render with an argument <name3> , substitute the result for <name1> .
<name3> . autoescape = <name2>	substitute <name2> for <name3> .autoescape .
<name2> <name5> . setting :	<name2> <name5> .setting is true ,
return <name6> ( <name1> )	call the function <name6> with an argument <name1> .
else :	if not ,
<name1> <name6>	<name1> <name6> .
<name1> <name4> ( <name6> ) :	derive the <name1> <name4> from <name6> base <name1> .
def <name3> ( <name1> , <name2> ) :	define the method <name3> with 2 arguments : <name1> and <name2> .
<name4> ''	<name4> an empty string ,
<name1> <name3> ( <name6> ) :	derive the <name1> <name3> from <name6> base <name1> .
def <name3> ( <name6> , <name4> ) :	define the method <name3> with 2 arguments : <name6> and <name4> .
<name4> = <name6> . <name2> ( <val3>   , None )	<name2> the value under the <val3> key of the <name6> dictionary , if it exists substitute the result for <name4> ,
<name1> <name3> :	<name1> not <name3> is None . <name1> <name3> is true ,
<name6> <name3> == <val4>   :	<name6> <name3> equals string <val4> ,
"<name2> <name3> ( """" )"	call the function <name3> with an argument empty string , <name2> the result .
else :	if not ,
return <name1> ( <val4> , csrf_token )	call the function <name1> with 2 arguments : string <val4> ,
else :	and csrf_token , return the result . if not ,
<name5> <name4> . DEBUG :	<name5> <name4> .DEBUG is true ,
<name2> . warn ( <val1> )	call the function <name2> .warn with an argument string <val1> .
<name2> ''	<name2> an empty string ,
<name3> <name6> ( <name2> ) :	derive the <name3> <name6> from <name2> base <name3> .
def <name1> ( <name6> , <name2> , <name3> = <name5> , <name4> = <name1> ) :	define the method <name1> with 4 arguments : <name6> , <name2> , <name3> set to <name5> and <name4> set to boolean <name1> .
<name5> . <name3> = <name3>	substitute <name3> for <name5> .cyclevars .
<name6> . <name2> = <name2>	substitute <name2> for <name6> .variable_name .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .silent .
def <name2> ( <name3> , <name5> ) :	define the method <name2> with 2 arguments : <name3> and <name5> .
<name4> <name6> <name5> <name1> <name3> . render_context :	<name4> <name6> is <name5> contained <name1> <name3> .render_context ,
<name4> . render_context [ <name3> ] = <name2> ( <name3> . cyclevars )	call the function <name2> with an argument <name3> .cyclevars , substitute the result for value under the <name3> dictionary <name4> .render_context .
<name6> = <name1> . render_context [ <name5> ]	get the value under the <name5> key of the <name1> .render_context dictionary , substitute it for <name6> .
<name2> = <name6> ( <name5> ) . <name1> ( <name3> )	call the function <name6> with an argument <name5> , call the method <name1> on the result with an argument <name3> , substitute the result for <name2> .
<name2> <name4> . variable_name :	<name2> <name4> .variable_name is true .
<name3> [ <name2> . variable_name ] = <name6>	substitute <name6> for <name6> under the <name2> .variable_name key of the <name3> dictionary .
<name5> <name2> . silent :	<name5> <name2> .silent is true ,
<name6> ''	<name6> an empty string ,
<name1> <name6> ( <name3> , <name5> )	call the function <name6> with 2 arguments : <name3> and <name5> , <name1> the result .
<name3> <name4> ( <name5> ) :	derive the <name3> <name4> from <name5> base <name3> .
def <name6> ( <name2> , <name1> ) :	define the method <name6> with 2 arguments : <name2> and <name1> .
<name6> <name3> <name2> <name5>	<name6> <name3> <name2> <name5> .
<name2> = [ <name4> ( <name3> ) <name5> <name3> <name1> <name6> ]	<name2> is an list with initial elements generated with call to the function <name4> with an argument <name3> , <name5> every <name3> <name1> <name6> .
\ <name6> . <name3> ( '\\n\\n'   ) \	<name3> 2 consecutive newlines to <name6> .
<name6> . <name4> ( <name5> ( <name2> . modules ) )	call the function <name5> with an argument <name2> .modules , <name4> the result for <name6> .
<name5> ''   . <name6> ( <name2> )	<name6> elements of <name2> into a string , <name5> the result .
<name1> <name4> ( <name3> ) :	derive the <name1> <name4> from <name3> base <name1> .
def <name3> ( <name5> , <name6> , <name4> ) :	define the method <name3> with 3 arguments : <name5> , <name6> and <name4> ) .
<name5> . <name4> , <name5> . <name6> = <name4> , <name6>	substitute <name4> and <name6> for <name5> .filter_expr and <name5> .nodelist , respectively .
def <name2> ( <name6> , <name4> ) :	define the method <name2> with 2 arguments : <name6> and <name4> .
<name1> = <name2> . nodelist . render ( <name5> )	call the method <name2> .nodelist .render with an argument <name5> , substitute the result <name1> .
<name6> <name2> . push ( <name4> = <name5> ) :	call the method <name2> .push <name6> an argument <name4> set to <name5> , <name6> the result perform ,
<name4> <name6> . filter_expr . resolve ( <name2> )	call the function <name6> .filter_expr .resolve with an argument <name2> , <name4> the result .
<name2> <name4> ( <name1> ) :	derive the <name2> <name4> from <name1> base <name2> .
def <name4> ( <name6> , <name5> ) :	define the method <name4> with 2 arguments : <name6> and <name5> .
<name6> . vars = <name4>	substitute <name4> for <name6> .vars .
def <name1> ( <name4> , <name6> ) :	define the method <name1> with 2 arguments : <name4> and <name6> .
<name5> <name2> <name4> <name1> . vars :	<name5> every <name2> <name4> <name1> .vars ,
<name1> = <name5> . resolve ( <name6> , <name2> )	call the method <name5> .resolve with 2 arguments : <name6> and <name2> , substitute the result for <name1> .
<name3> <name6> :	<name3> <name6> is true ,
<name2> <name4> ( <name3> , <name5> )	call the function <name4> with 2 arguments : <name3> and <name5> , <name2> the result .
<name1> ''	<name1> an empty string ,
<name6> <name1> ( <name5> ) :	derive the <name6> <name1> from <name5> base <name6> .
<name2> = ( <val6>   , <val1>   )	<name2> is an tuple with 2 elements : strings <val6> and <val1> .
def <name6> ( <name4> , <name3> , <name5> , <name1> , <name2> , <name6> = <name4> ) :	define the method <name6> with 6 arguments : <name4> , <name3> , <name5> , <name1> , <name2> and <name6> set to <name4> .
<name3> . <name4> , <name3> . <name5> = <name4> , <name5>	substitute <name4> and <name5> for <name3> .loopvars and <name3> .sequence , respectively .
<name2> . <name1> = <name1>	substitute <name1> for <name2> .is_reversed .
<name1> . <name4> = <name4>	substitute <name4> for <name1> .nodelist_loop .
<name5> <name2> <name1> <name4> :	<name5> <name2> <name1> <name4> ,
<name5> . nodelist_empty = <name2> ( )	<name5> .nodelist_empty is an instance of <name2> class .
else :	if not ,
<name1> . <name6> = <name6>	substitute <name6> for <name1> .nodelist_empty .
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name1> = <val2>   <name6> <name3> . is_reversed else ''	<name6> <name3> .is_reversed is true , substitute <name1> is an string <val2> , <name6> not , <name1> is an empty string .
<name4> <val1> % ( ', '   . join ( <name6> . loopvars ) , <name6> . sequence , len ( <name6> . nodelist_loop ) , reversed_text )	<name4> an string <val1> , substitute '%s' with elements of <name6> .loopvars joined into a string ,
def <name3> ( <name6> ) :	separated with string ', ' , substitute '%s' with <name6> .sequence , substitute '%d' with length of <name6> .nodelist_loop , substitute '%s' with reversed_text . define the method <name3> with an argument <name6> .
<name6> <name4> <name3> <name2> . nodelist_loop :	<name6> every <name4> <name3> <name2> .nodelist_loop ,
<name5> <name4>	<name5> <name4> .
<name1> <name6> <name4> <name5> . nodelist_empty :	<name1> every <name6> <name4> <name5> .nodelist_empty ,
<name1> <name6>	<name1> <name6> .
def <name4> ( <name6> , <name1> ) :	define the method <name4> with 2 arguments : <name6> and <name1> .
<name1> <val3>   <name6> <name4> :	<name1> string <val3> is contained <name6> <name4> ,
<name1> = <name5> [ <val2>   ]	substitute value under the the <val2> key of the <name5> dictionary for <name1> .
else :	if not ,
<name6> = { }	<name6> is an empty dictionary .
<name4> <name1> . push ( ) :	call the method <name1> .push , <name4> the result perform ,
<name5> :	<name5> ,
<name3> = <name5> . sequence . resolve ( <name6> , <name4> )	call the method <name5> .sequence .resolve with 2 arguments : <name6> and boolean <name4> , substitute the result for <name3> .
except <name3> :	if <name3> exception is caught ,
<name4> = [ ]	<name4> is an empty list .
<name4> <name6> <name2> <name5> :	<name4> <name6> <name2> <name5> ,
<name6> = [ ]	if <name6> is None ,
<name3> not hasattr ( <name6> , <val1>   ) :	<name3> <name6> has an attribute <val1> ,
<name2> = <name1> ( <name2> )	convert <name2> into a <name1> , substitute it for value .
<name3> = len ( <name1> )	substitute length of <name1> for <name3> .
<name2> <name4> <  <val5> :	<name2> <name4> is smaller than integer <val5> ,
<name5> <name4> . nodelist_empty . render ( <name1> )	call the method <name4> .nodelist_empty .render with an argument <name1> , <name5> the result .
<name2> = [ ]	<name2> is an empty list .
<name3> <name1> . is_reversed :	<name3> <name1> .is_reversed is true ,
<name6> = reversed ( <name6> )	reverse elements order of <name6> .
<name4> = len ( <name1> . loopvars )	substitute length of <name1> .loopvars for <name4> .
<name2> = <name4> >  <val1>	if <name4> is greater than integer <val1> , <name2> is an boolean True , otherwise is an boolean False .
<name1> = <name3> [ <val2>   ] = {  <val6>   : <name4> }	<name1> and value under the <val2> key of the <name3> dictionary are dictionaries with an entry : <name4> for <val6> .
<name2> <name5> , <name6> <name1> enumerate ( <name3> ) :	<name2> every <name5> and <name6> <name1> enumerated iterable <name3> ,
<name5> [ <val3>   ] = <name2>	substitute <name2> for value under the <val3> key of the <name5> dictionary .
<name3> [ <val6>   ] = <name2> + <val1>	substitute <name2> incremented by <val1> for value under the <val6> key of the <name3> dictionary .
<name2> [ <val5>   ] = <name6> - <name4>	subtract <name4> from <name6> , substitute the result for value under the <val5> key of the <name2> dictionary .
<name6> [ 'revcounter0'   ] = <name4> - <name2> - <val5>	subtract <name2> from <name4> , decrement the result by integer <val5> , substitute it for value under the 'revcounter' key of the <name6> dictionary .
<name3> [ <val5>   ] = ( <name6> == <val1> )	if <name6> is equal to integer <val1> , value under the <val5> key of the <name3> dictionary is boolean True , otherwise it is False .
<name6> [ <val2>   ] = ( <name1> == <name4> - <val3> )	if <name1> is equal to <name4> decremented by <val3> , value under the <val2> key of the <name6> dictionary is boolean True , otherwise it is False .
<name1> = <name3>	<name1> is boolean <name3> .
<name2> <name5> :	<name2> <name5> is true ,
       <name2> <name5> isinstance ( <name1> , ( <name6> , <name4> ) ) :	<name2> <name1> is <name5> an instance of <name6> or <name4> class ,
     <name5> = <val1>	<name5> is integer <val1> .
else :	if not ,
     <name3> = len ( <name5> )	substitute length of <name5> for <name3> .
<name2> <name5> != <name1> :	<name2> <name5> is not equal to <name1> ,
"     <name1> . warn ( ""Need {0} values to unpack in for loop; got {1}. "" ""This will raise an exception in Django 2.0."" . format ( num_loopvars , len_item ) , RemovedInDjango20Warning )"	"call the function <name1> .warn with 2 arguments : string "" Need { 0 }  values to unpack in for loop ; got { 1 } . This will raise an"
<name4> :	"exception in Django 2.0 . ""  formated with num_loopvars and len_item , respectively , and RemovedInDjango20Warning . <name4> ,"
     <name2> = dict ( <name1> ( <name3> . loopvars , <name4> ) )	<name1> <name3> .loopvars and <name4> is a list to tuples , convert the result to an dictionary , substitute it for <name2> .
except <name5> :	if <name5> exception is caught ,
     pass	do nothing .
else :	if not ,
     <name4> = <name3>	<name4> is boolean <name3> .
<name6> . update ( <name2> )	call the method <name6> .update with an argument <name2> .
else :	if not ,
<name2> [ <name3> . loopvars [ 0 ] ] = <name1>	substitute <name1> for value under the first element of <name3> .loopvars key of the <name2> dictionary .
<name6> <name5> . TEMPLATE_DEBUG :	<name6> <name5> .TEMPLATE_DEBUG is true ,
<name1> <name6> <name2> <name3> . nodelist_loop :	<name1> every <name6> <name2> <name3> .nodelist_loop ,
     <name4> :	<name4> ,
         <name2> . <name4> ( <name1> . render ( <name3> ) )	call the method <name1> .render with an argument <name3> , <name4> the result to the <name2> .
except <name2> as <name4> :	if <name2> , renamed to <name4> , exception is caught ,
         <name5> not hasattr ( <name4> , <val2>   ) :	<name5> <name4> doesnt have an <val2> attribute ,
             <name4> . django_template_source = <name5> . source	substitute <name5> .source for <name4> .django_template_source .
<name5>	<name5> an exception .
else :	if not ,
<name6> <name3> <name1> <name4> . nodelist_loop :	<name6> every <name3> <name1> <name4> .nodelist_loop ,
     <name3> . <name1> ( <name5> . render ( <name6> ) )	call the method <name5> .render with an argument <name6> , <name1> the result to the <name3> .
<name5> <name3> :	<name5> <name3> is true ,
       <name1> . pop ( )	remove the first element of <name1> .
<name6> <name4> ( ''   . join ( <name2> ( <name3> ) <name5> <name3> <name1> <name6> ) )	call the function <name4> with an arguments : <name5> every <name3> <name1> <name6> results of the function <name2> called with an argument <name3> , joined <name1> a string , <name6> the result .
<name5> <name1> ( <name6> ) :	derive the <name5> <name1> from <name6> base <name5> .
<name2> = ( <val6>   , <val1>   )	<name2> is a tuple with 2 initial elements : strings <val6> and <val1> .
def <name3> ( <name2> , <name6> , <name5> , * <name4> ) :	define the method <name3> with 4 arguments : <name2> , <name6> , <name5> and unpacked list <name4> .
<name3> . <name5> , <name3> . <name2> = <name5> , <name2>	substitute <name5> and <name2> for <name3> .nodelist_true and <name3> .nodelist_false , respectively .
<name4> . _varlist = <name2>	substitute <name2> for <name4> .varlist .
def <name1> ( <name3> , <name4> ) :	define the method <name1> with 2 arguments : <name3> and <name4> .
<name4> = <name2> . _get_context_stack_frame ( <name3> )	call the method <name2> ._get_context_stack_frame with an argument <name3> , substitute the result for <name4> .
<name5> <name1> <name6> <name2> <name3> :	<name5> <name1> is <name6> contained <name2> <name3> ,
<name2> [ <name4> ] = <name5>	value under the <name4> key of <name2> dictionary is <name5> .
<name5> = <name1>	<name5> is <name1> .
<name1> :	<name1> ,
<name2> <name4> . _varlist :	<name2> <name4> ._varlist is true ,
<name6> = [ <name3> . resolve ( <name4> , <name5> ) for <name3> in self . _varlist ]	<name6> is an list with elements generated by calling the <name3> .resolve method with 2 arguments : <name4> and boolean <name5> ,
else :	for every var in self ._varlist . if not ,
<name1> = <name6> = <name4> . nodelist_true . render ( <name5> )	call the method <name4> .nodelist_true .render with an argument <name5> , assign the result to <name1> and <name6> .
except <name3> :	if <name3> exception is caught ,
<name1> = <name4>	<name1> is <name4> .
<name6> <name1> != <name2> [ <name4> ] :	<name6> <name1> is not equal to value under the <name4> key of <name2> .
<name6> [ <name5> ] = <name4>	substitute <name4> for value under the <name6> dictionary under the <name5> key .
<name5> <name6> or <name4> . nodelist_true . render ( <name2> )	<name5> <name6> , if true , if not call the method <name4> .nodelist_true .render with an argument <name2> and <name5> the result .
elif <name6> . nodelist_false :	otherwise if <name6> .nodelist_false is true ,
<name1> <name2> . nodelist_false . render ( <name5> )	call the method <name2> .nodelist_false .render with an argument <name5> , <name1> the result .
<name4> ''	<name4> an empty string ,
def <name3> ( <name4> , <name1> ) :	define the method <name3> with 2 arguments : <name4> and <name1> .
<name4> <val1>   <name3> <name6> :	<name4> string <val1> is contained <name3> <name6> ,
<name2> <name5> [ <val1>   ]	<name2> value under the <val1> key of the <name5> dictionary .
else :	if not ,
<name1> <name4> . render_context	<name1> <name4> .render_context .
<name3> <name6> ( <name2> ) :	derive the <name3> <name6> from <name2> base <name3> .
<name2> = ( <val1>   , <val4>   )	<name2> is a tuple with 2 elements strings <val1> and <val4> .
def <name6> ( <name4> , <name5> , <name1> , <name2> , <name3> , <name6> ) :	define the method <name6> with 6 arguments : ( <name4> , <name5> , <name1> , <name2> , <name3> and <name6> .
<name4> . <name2> , <name4> . <name3> = <name2> , <name3>	substitute <name2> and <name3> for <name4> .var1 and <name4> .var2 , respectively .
<name3> . <name1> , <name3> . <name2> = <name1> , <name2>	substitute <name1> and <name2> for <name3> .nodelist_true and <name3> .nodelist_false , respectively .
<name6> . <name1> = <name1>	substitute <name1> for <name6> .negate .
def <name1> ( <name2> ) :	define the method <name1> with an argument <name2> .
<name1> <val6>	<name1> an string <val6> .
def <name6> ( <name2> , <name3> ) :	define the method <name6> with 2 arguments : <name2> and <name3> .
val1 = <name3> . var1 . resolve ( <name5> , <name2> )	call the method <name3> .var1 .resolve with 2 arguments : <name5> and boolean <name2> , substitute the result for val2 .
<name1> = <name6> . var2 . resolve ( <name2> , <name5> )	call the method <name6> .var2 .resolve with 2 arguments : <name2> and boolean <name5> , substitute the result for <name1> .
<name2> ( <name5> . negate <name3> <name4> != <name1> ) <name6> ( <name2> <name5> . negate <name3> <name4> == <name1> ) :	<name2> <name5> .negate is true <name3> <name4> is <name2> equal to <name1> , <name6> <name2> , <name5> .negate is false <name3> <name4> equals <name1> ,
<name3> <name1> . nodelist_true . render ( <name6> )	call the method <name1> .nodelist_true .render with an argument <name6> , <name3> the result .
<name5> <name1> . nodelist_false . render ( <name3> )	call the method <name1> .nodelist_false .render with an arguments <name3> , <name5> the result .
<name4> <name3> ( <name1> ) :	derive the <name4> <name3> from <name1> base <name4> .
def <name5> ( <name2> , <name6> ) :	define the method <name5> with 2 arguments : <name2> and <name6> .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .conditions_nodelists .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name2> <val1>	<name2> an string <val1> .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name1> <name2> , <name5> <name6> <name4> . conditions_nodelists :	<name1> every <name2> and <name5> <name6> <name4> .conditions_nodelists ,
<name5> <name6> <name1> <name3> :	<name5> every <name6> <name1> <name3> ,
<name6> <name1>	<name6> <name1> as an return value of a generator .
@  <name5>	<name5> decorator ,
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name5> <name2> ( <name4> <name1> _ , <name3> <name6> self . conditions_nodelists <name1> <name4> <name6> <name3> )	<name5> an instance of a <name2> class , created with arguments <name4> , <name1> every <name4> <name6> <name3> ,
def <name1> ( <name6> , <name4> ) :	and for every _ , nodelist in <name6> .conditions_nodelists . define the method <name1> with 2 arguments : <name6> and <name4> .
<name1> <name2> , <name3> <name5> <name4> . conditions_nodelists :	<name1> every <name2> and <name3> <name5> <name4> .conditions_nodelists ,
<name6> <name2> <name1> <name4> <name3> :	<name6> <name2> <name1> <name4> <name3> ,
<name2> :	<name2> ,
<name5> = <name6> . eval ( <name1> )	call the method <name6> .eval with an argument <name1> , substitute the result for <name5> .
except <name4> :	if <name4> exception is caught ,
<name2> = <name3>	<name2> is <name3> .
else :	if not ,
<name3> = <name4>	<name3> is boolean <name4> .
<name3> <name1> :	<name3> <name1> is true ,
<name3> <name1> . render ( <name5> )	call the method <name1> .render with an argument <name5> , <name3> the result .
<name2> ''	<name2> an empty string ,
<name5> <name1> ( <name6> ) :	derive the <name5> <name1> from <name6> base <name5> .
def <name1> ( <name3> , <name5> , <name2> , <name4> ) :	define the method <name1> with 4 arguments : <name3> , <name5> , <name2> and <name4> .
<name6> . <name1> , <name6> . <name4> = <name1> , <name4>	substitute <name1> and <name4> for <name6> .target and <name6> .expression , respectively .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .var_name .
def <name6> ( <name2> , <name4> , <name5> ) :	define the method <name6> with 3 arguments : <name2> , <name4> and <name5> .
<name6> [ <name2> . var_name ] = <name3>	substitute <name3> for value under the <name2> .var_name key of the <name6> dictionary .
<name1> <name6> . expression . resolve ( <name4> , <name3> )	call the method <name6> .expression .resolve with 2 arguments : <name4> and boolean <name3> , <name1> the result .
def <name3> ( <name1> , <name4> ) :	define the method <name3> with 2 arguments : <name1> and <name4> .
<name5> = <name4> . target . resolve ( <name6> , <name2> )	call the method <name4> .target .resolve with 2 arguments : <name6> and boolean <name2> , substitute it for <name5> .
<name3> <name4> <name6> <name2> :	<name3> <name4> <name6> <name2> ,
<name1> [ <name4> . var_name ] = [ ]	value under the <name4> .var_name key of the <name1> dictionary is an empty list .
<name4> ''	<name4> an empty string ,
<name2> [ <name4> . var_name ] = [ {  'grouper'   : <name5> , 'list'   : <name3> ( val ) }   for <name5> , val in groupby ( obj_list , lambda obj : <name4> . resolve_expression ( obj , <name2> ) ) ]	value under the <name4> .var_name <name5> of the <name2> dictionary is an <name3> with dictionary elements with 2 entries :
<name4> ''	key for 'grouper' and val converted into a list for 'list' , for every key and val in result of the function groupby , called with 2 arguments : obj_list and lambda function with an argument obj and <name4> value as a result of the function , self .resolve_expression called with 2 arguments obj and context . <name4> an empty string ,
def <name3> ( <name5> ) :	define the function <name3> with an argument <name5> .
<name3> = os . <name2> . abspath ( <name3> )	return the absolute <name2> of file <name2> <name3> , substitute it for <name3> .
<name6> <name5> <name1> <name2> . ALLOWED_INCLUDE_ROOTS :	<name6> every <name5> <name1> <name2> .ALLOWED_INCLUDE_ROOTS ,
<name2> <name6> . startswith ( <name1> ) :	<name2> <name6> starts with <name1> ,
<name6> <name1>	<name6> boolean <name1> .
<name6> <name5>	<name6> boolean <name5> .
<name6> <name4> ( <name1> ) :	derive the <name6> <name4> from <name1> base <name6> .
def <name4> ( <name2> , <name3> , <name1> ) :	define the method <name4> with 3 arguments : <name2> , <name3> and <name1> .
<name1> . <name5> = <name5>	substitute <name5> for <name1> .filepath .
<name5> . <name6> = <name6>	substitute <name6> for <name5> .parsed .
def <name6> ( <name2> , <name5> ) :	define the method <name6> with 2 arguments : <name2> and <name5> .
<name5> = <name3> . <name5> . resolve ( <name6> )	call the function <name3> .filepath .resolve with an argument <name6> , substitute the result for <name5> .
<name4> not <name5> ( <name3> ) :	call the function <name5> with an argument <name3> , <name4> it evaluates to false ,
<name6> <name1> . DEBUG :	<name6> <name1> .DEBUG is true ,
<name6> <val3>	<name6> string <val3> .
else :	if not ,
<name4> ''	<name4> an empty string ,
<name3> :	<name3> ,
<name3> <name2> ( <name5> , 'r'   ) <name6> <name1> :	<name2> <name5> file in read mode , <name3> file descriptor <name6> <name1> , perform ,
<name6> = <name1> . <name3> ( )	<name3> file <name1> , substitute the <name3> data for <name6> .
except <name4> :	if <name4> exception is caught ,
<name4> = ''	<name4> is an empty string .
<name2> <name5> . parsed :	<name2> <name5> .parsed is true ,
<name5> :	<name5> ,
<name6> = <name3> ( <name4> , <name2> = <name5> )	<name6> is an instance of <name3> class , created with 2 arguments <name4> and <name2> set to <name5> .
<name4> <name2> . render ( <name5> )	call the function <name2> .render with an argument <name5> , <name4> the result .
except <name1> as <name3> :	if <name1> , renamed to <name3> , exception is caught ,
<name1> <name5> . DEBUG :	<name1> <name5> .DEBUG is true ,
<name4> <val3> % <name1>	<name4> an string <val3> , where '%s' is replaced with <name1> .
else :	if not ,
<name5> ''	<name5> an empty string ,
<name6> <name4>	<name6> <name4> .
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> from <name4> base <name3> .
def <name4> ( <name5> , <name1> ) :	define the method <name4> with 2 arguments : <name5> and <name1> .
<name2> ''	<name2> an empty string ,
<name5> <name1> ( <name2> ) :	derive the <name5> <name1> from <name2> base <name5> .
def <name6> ( <name4> , <name5> ) :	define the method <name6> with 2 arguments : <name4> and <name5> .
<name4> . <name2> = <name2>	substitute <name2> for <name4> .format_string .
def <name6> ( <name2> , <name5> ) :	define the method <name6> with 2 arguments : <name2> and <name5> .
<name6> = <name5> . get_current_timezone ( ) <name4> <name1> . USE_TZ else <name2>	<name4> <name1> .USE_TZ is true substitute result of the function <name5> .get_current_timezone for <name6> , <name4> not <name6> is <name2> .
return <name6> ( <name1> . now ( <name4> = <name2> ) , self . format_string )	call the function <name6> with 2 arguments : result of the call to the function <name1> .now with an argument <name4> set to <name2> ,
<name2> <name4> ( <name6> ) :	and self .format_string , return the result . derive the <name2> <name4> from <name6> base <name2> .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with 2 arguments : <name1> and <name6> .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .nodelist .
def <name4> ( <name1> , <name3> ) :	define the method <name4> with 2 arguments : <name1> and <name3> .
<name1> <name6> . utils . html <name5> <name4>	<name1> <name6> .utils .html <name5> <name4> .
return strip_spaces_between_tags ( <name3> . nodelist . render ( <name5> ) . <name6> ( ) )	call the method <name3> .nodelist .render with an argument <name5> , <name6> the result of the surrounding whitespaces ,
<name6> <name3> ( <name5> ) :	use the result as an argument for the call to the function strip_spaces_between_tags , return the result . derive the <name6> <name3> from <name5> base <name6> .
<name3> = {  <val6>   : <name2> , <val5>   : <name1> , 'openvariable'   : VARIABLE_TAG_START , 'closevariable'   : VARIABLE_TAG_END , 'openbrace'   : SINGLE_BRACE_START , 'closebrace'   : SINGLE_BRACE_END , 'opencomment'   : COMMENT_TAG_START , 'closecomment'   : COMMENT_TAG_END , }	<name3> is an dictionary with 8 initial entries : <name2> for <val6> , <name1> for <val5> ,
def <name1> ( <name4> , <name5> ) :	VARIABLE_TAG_START for 'openvariable' , VARIABLE_TAG_END for 'closevariable' , SINGLE_BRACE_START for 'openbrace' , SINGLE_BRACE_END 'closebrace' , COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment' . define the method <name1> with 2 arguments : <name4> and <name5> .
<name5> . <name3> = <name3>	substitute <name3> for <name5> .tagtype .
def <name1> ( <name2> , <name5> ) :	define the method <name1> with 2 arguments : <name2> and <name5> .
<name3> <name6> . mapping . get ( <name6> . tagtype , ''   )	call the method <name6> .mapping .get with 2 arguments : <name6> .tagtype and an empty list , <name3> the result .
<name3> <name6> ( <name4> ) :	derive the <name3> <name6> from <name4> base <name3> .
def <name4> ( <name1> , <name5> , <name2> , <name3> , <name6> ) :	define the method <name4> with 5 arguments : <name1> , <name5> , <name2> , <name3> and <name6> .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .view_name .
<name5> . <name2> = <name2>	substitute <name2> for <name5> .args .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .kwargs .
<name5> . <name4> = <name4>	substitute <name4> for <name5> .asvar .
def <name1> ( <name5> , <name2> ) :	define the method <name1> with 2 arguments : <name5> and <name2> .
<name1> <name5> . core . urlresolvers <name4> <name6> , <name2>	<name1> <name5> .core .urlresolvers <name4> <name6> , <name2> .
<name6> = [ <name1> . resolve ( <name3> ) <name5> <name1> <name2> <name4> . <name6> ]	<name5> every <name1> <name2> <name4> .args call the method <name1> .resolve with an argument <name3> , substitute the results <name2> a list <name5> <name6> .
<name3> = dict ( ( smart_text ( <name5> , 'ascii'   ) , <name2> . resolve ( context ) ) <name1> <name5> , <name2> <name4> <name6> . <name3> . items ( ) )	<name3> is an dictionary , populated <name1> every <name5> and <name2> <name4> result of the method <name6> .kwargs .items with :
<name4> = <name6> . <name4> . resolve ( <name5> )	result of the call to the method v .resolve with an argument <name5> , for result of the function smart_text called with 2 arguments k and string 'ascii' . call the method <name6> .view_name .resolve with an argument <name5> , substitute the result for <name4> .
<name4> = ''	<name4> is an empty string .
<name3> :	<name3> ,
url = <name4> ( <name5> , <name2> = <name2> , <name1> = <name1> , <name6> = <name3> . <name6> )	call the function <name4> with 4 arguments : <name5> , <name2> as <name2> , <name1> as <name1> and <name6> as <name3> .current_app ,
except <name2> :	substitute the result for url . if <name2> exception is caught ,
<name6> = <name5> . <name6> ( )	call the function <name5> .exc_info with an argument <name6> .
<name4> <name5> . SETTINGS_MODULE :	<name4> <name5> .SETTINGS_MODULE is true ,
<name3> = <name4> . SETTINGS_MODULE . <name1> ( <val5>   ) [ 0 ]	<name1> <name4> .SETTINGS_MODULE by <val5> character , substitute the first element of the result for <name3> .
<name1> :	<name1> ,
url = <name1> ( <name6> + <val3>   + <name5> , <name4> = <name4> , <name2> = <name2> , current_app = context . current_app )	call the function <name1> with 4 arguments : concatenated <name6> , character <val3> and <name5> , <name4> as <name4> , <name2> as <name2> ,
except <name3> :	current_app as context .current_app , substitute the result for url . if <name3> exception is caught ,
<name3> <name5> . asvar <name6> <name4> :	<name3> <name5> .asvar <name6> <name4> ,
         <name5> . reraise ( * <name3> )	call the function <name5> .reraise with unpacked list <name3> as an argument .
else :	if not ,
<name5> <name3> . asvar <name6> <name1> :	<name5> <name3> .asvar <name6> <name1> ,
<name1>	<name1> an exception .
<name2> <name5> . asvar :	<name2> <name5> .asvar is true ,
<name2> [ <name5> . asvar ] = <name3>	substitute <name3> for value under the <name5> .asvar key of <name2> dictionary .
<name5> ''	<name5> an empty string .
else :	if not ,
<name4> <name5>	<name4> <name5> .
<name2> <name3> ( <name6> ) :	derive the <name2> <name3> from <name6> base <name2> .
def <name1> ( <name5> , <name2> ) :	define the method <name1> with 2 arguments : <name5> and <name2> .
<name5> . <name6> = <name6>	substitute <name6> for <name5> .content .
def <name1> ( <name5> , <name2> ) :	define the method <name1> with 2 arguments : <name5> and <name2> .
<name1> <name3> . content	<name1> <name3> .content
<name4> <name3> ( <name5> ) :	derive the <name4> <name3> from <name5> base <name4> .
def <name5> ( <name6> , <name2> , <name4> , <name3> , <name1> = <name5> ) :	define the method <name5> with 5 arguments : <name6> , <name2> , <name4> , <name3> and <name1> set to <name5> .
<name2> . <name1> = <name1>	substitute <name1> for <name2> .val_expr .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .max_expr .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .max_width .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .asvar .
def <name1> ( <name6> , <name3> ) :	define the method <name1> with 2 arguments : <name6> and <name3> .
<name3> :	<name3> ,
<name3> = <name4> . val_expr . resolve ( <name5> )	call the method <name4> .val_expr .resolve with an argument <name5> , substitute the result for <name3> .
<name2> = <name3> . max_expr . resolve ( <name5> )	call the method <name3> .max_expr .resolve with an argument <name5> , substitute the result for <name2> .
<name2> = int ( <name6> . <name2> . resolve ( <name3> ) )	call the method <name6> .max_width .resolve with an argument <name3> , convert the result to an integer and substitute it for <name2> .
except <name4> :	if <name4> exception is caught ,
<name6> ''	<name6> an empty string .
except ( <name6> , <name1> ) :	if <name6> or <name1> exceptions are caught ,
<name2> <name5> ( <val4> )	<name2> an <name5> exception with an argument string <val4> .
<name1> :	<name1> ,
<name5> = float ( <name5> )	convert <name5> into an floating point number , substitute it for <name5> .
<name1> = float ( <name1> )	convert <name1> into an floating point number , substitute it for <name1> .
<name5> = ( <name3> / <name1> ) * <name6>	divide <name3> by <name1> , multiply the result with <name6> , substitute it for <name5> .
<name5> = str ( int ( <name4> ( ratio ) ) )	<name4> up radio , convert it to an integer and the convert it to a string and substitute the <name5> for <name5> .
except <name6> :	if <name6> exception is caught ,
<name2> <val1>	<name2> an string <val1> .
except ( <name4> , <name1> , <name3> ) :	if <name4> , <name1> or <name3> exceptions are caught ,
<name4> ''	<name4> an empty string ,
<name4> <name5> . asvar :	<name4> <name5> .asvar is true ,
<name2> [ <name5> . asvar ] = <name4>	substitute <name4> for value under the <name5> .asvar key of <name2> dictionary .
<name3> ''	<name3> an empty string ,
else :	if not ,
<name4> <name6>	<name4> <name6> .
<name5> <name1> ( <name4> ) :	derive the <name5> <name1> from <name4> base <name5> .
def <name4> ( <name5> , <name3> , <name2> , <name1> , <name6> = <name4> ) :	define the method <name4> with 5 arguments : <name5> , <name3> , <name2> , <name1> and <name6> set to <name4> .
<name6> . <name1> = <name1>	substitute <name1> for <name6> .nodelist .
<name4> . <name1> = <name1> or { }	if <name1> is true , substitute it for <name4> .extra_context , if not <name4> .extra_context is an empty dictionary .
<name2> <name1> :	<name2> <name1> is true ,
<name4> . extra_context [ <name1> ] = <name3>	substitute <name3> for value under the <name1> key of the <name4> .extra_context dictionary .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name6> <val1>	<name6> a string <val1>
def <name5> ( <name6> , <name3> ) :	define the method <name5> with 2 arguments : <name6> and <name3> .
<name6> = dict ( ( <name5> , <name2> . resolve ( <name3> ) ) <name1> <name5> , <name2> in six . iteritems ( self . extra_context ) )	<name6> is an dictionary created with result of the method <name2> .resolve called with an argument <name3> , <name1> <name5> ,
<name1> <name6> . push ( ** <name5> ) :	for every key and val in return value of the function six .iteritems called <name1> an arguments self .extra_context . call the method <name6> .push <name1> an argument unpacked dictionary <name5> , <name1> the result as an argument ,
<name1> <name3> . nodelist . render ( <name2> )	call the method <name3> .nodelist .render with an argument <name2> , <name1> the result .
@  <name1> . tag	<name1> .tag decorator ,
def <name2> ( <name4> , <name1> ) :	define the function <name2> with 2 arguments : <name4> and <name1> .
<name1> = <name2> . contents . split ( )	call the method <name2> .contents .split , substitute the result for <name1> .
<name2> len ( <name5> ) != <val3> :	<name2> length of <name5> is not equal to integer <val3> ,
<name4> <name5> ( <val3> )	<name4> an <name5> with an argument string <val3> .
<name4> = <name6> [ 1 ]	substitute first element of <name6> for <name4> .
<name2> <name3> <name1> in ( <val5>   , <val4>   ) :	<name2> <name3> is <name1> string <val5> or <val4> ,
<name5> = <name3> . parse ( ( <val4>   , ) )	call the method <name3> .parse with an argument tuple with an element string <val4> , substitute the result for <name5> .
<name2> . delete_first_token ( )	call the method <name2> .delete_first_token .
<name1> <name6> ( ( <name3> == <val5>   ) , <name4> )	<name1> an instance of <name6> with 2 arguments : boolean exception <name3> equals to string <val5> , and <name4> .
@  <name1> . tag	<name1> .tag decorator ,
def <name3> ( <name4> , <name2> ) :	define the function <name3> with 2 arguments : <name4> and <name2> .
<name5> . skip_past ( <val3>   )	call the method <name5> .skip_past with an argument string <val3> .
<name1> <name4> ( )	<name1> an instance of <name4> class .
@  <name5> . tag	<name5> .tag decorator ,
def <name3> ( <name6> , <name4> ) :	define the function <name3> with 2 arguments : <name6> and <name4> .
<name2> = <name5> . split_contents ( )	call the method <name5> .split_contents , substitute the result for <name2> .
<name4> len ( <name1> ) <  <val3> :	<name4> length of <name1> is smaller than integer <val3> ,
<name1> <name6> ( <val2> )	<name1> an <name6> exception with an argument string <val2> .
<name6> <val5>   <name1> <name2> [ 1 ] :	<name6> <val5> is contained <name1> second element of <name2> ,
<name2> len ( <name3> ) == <val1> :	for second and third element of <name3> , respectively . <name2> length of <name3> equals integer <val1> ,
<name1> = <name2> [ 1 ]	substitute second element of <name2> for <name1> .
<name4> not hasattr ( <name6> , <val1>   ) :	<name4> <name6> doesnt have an <val1> attribute ,
<name1> <name6> ( <val4> % name )	<name1> an <name6> exception with an argument string <val4> ,
<name5> <name1> <name4> <name6> <name2> . _namedCycleNodes :	where '%s' is replaced with <name1> . <name5> <name1> is <name4> contained <name6> <name2> ._namedCycleNodes ,
<name5> <name6> ( <val4> % <name2> )	<name5> an <name6> exception with an argument string <val4> , where '%s' is replaced with <name2> .
<name1> <name2> . _namedCycleNodes [ <name6> ]	get the index <name6> , of the <name2> ._namedCycleNodes , <name1> the result .
<name4> = <name2>	<name4> is boolean <name2> .
<name1> len ( <name2> ) >  <val6> :	<name1> length of <name2> is greater than <val6> .
<name2> <name1> [ - 3 ] == <val3> :	<name2> third element from the end of the <name1> equals string <val3> ,
<name6> <name3> [ - 1 ] != <val2> :	<name6> last element of <name3> is not equal to a string <val2> ,
<name4> <name5> ( <val1> % args [ - 1 ] )	<name4> an <name5> exception with an argument string <val1> ,
<name1> = <name4>	where '%s' is replaced with last element of args . <name1> is boolean <name4>
<name6> = <name5>	<name6> is boolean <name5> .
<name5> = <name5> [ : - 1 ]	substitute <name5> , without the last element for <name5> .
elif <name2> [ - 2 ] == <val6> :	if second from the end element of <name2> equals a string <val6> ,
<name6> = <name1>	<name6> is boolean <name1> .
<name3> = <name4>	<name3> is boolean <name4> .
<name4> <name5> :	<name4> <name5> is true ,
<name2> = <name3> [ - 1 ]	substitute the last element of <name3> for <name2> .
values = [ <name3> . compile_filter ( <name5> ) <name4> <name5> <name1> <name2> [ <val6> : - 2 ] ]	call the function <name3> .compile_filter with an argument <name5> <name4> every <name5> <name1> <name2> from the index <val6> to the index -2 ,
<name4> = <name1> ( <name6> , <name2> , <name3> = <name3> )	append the results into a list , substitute it for value . <name4> is an instance <name1> class , created with <name6> , <name2> and <name3> set to <name3> .
<name6> not hasattr ( <name4> , <val1>   ) :	<name6> <name4> doesnt have an <val1> attribute ,
<name1> . _namedCycleNodes = { }	<name1> ._namedCycleNodes is an empty dictionary .
<name4> . _namedCycleNodes [ <name5> ] = <name6>	substituet <name6> for value under the <name5> key of the <name4> ._namedCycleNodes dictionary .
else :	if not ,
values = [ <name6> . compile_filter ( <name3> ) <name4> <name3> <name1> <name5> [ 1 : ] ]	call the function <name6> .compile_filter with an argument <name3> <name4> every <name3> <name1> <name5> from first element to the end ,
<name2> = <name1> ( <name5> )	append the results into a list , substitute it for value . <name2> is an instance of <name1> class , created wiht an argument <name5> .
<name6> <name5>	<name6> <name5> .
@  <name2> . tag	<name2> .tag decorator ,
def <name6> ( <name3> , <name4> ) :	define the function <name6> with 2 arguments : <name3> and <name4> .
<name5> <name6> ( )	<name5> an instance of <name6> class .
@  <name5> . tag	<name5> .tag decorator ,
def <name5> ( <name4> , <name1> ) :	define the function <name5> with 2 arguments : <name4> and <name1> .
<name5> <name2> ( )	<name5> an instance of <name2> class .
@  <name6> . tag ( <val5>   )	<name6> .tag decorator function with an argument <val5> ,
def <name1> ( <name4> , <name5> ) :	define the function <name1> with 2 arguments : <name4> and <name5> .
<name5> , <name4> = <name2> . contents . <name6> ( <name3> , 1 )	<name6> into two parts <name2> .contents by <name3> , substitute the parts for <name5> and <name4> , respectively .
<name6> = <name1> . compile_filter ( <val2> % ( <name3> ) )	call the method <name1> .compile_filter with an argument string <val2> , where '%s' is replaced with <name3> , substitute the result for <name6> .
<name6> <name4> , <name3> <name5> <name1> . filters :	<name6> every <name4> and <name3> <name5> <name1> .filters ,
<name1> = getattr ( <name4> , <val6>   , <name2> )	get <val6> attribute of the <name4> object , if it exists , substitute it for <name1> , if not , <name1> is <name2> .
<name4> <name3> <name2> ( <val1>   , <val6>   ) :	<name4> every <name3> <name2> strings <val1> or <val6> ,
<name1> = <name2> . parse ( ( <val6>   , ) )	where '%s' is replaced with filter_name . call the method <name2> .parse with an argument tuple with an element string <val6> , substitute the result for <name1> .
<name1> . delete_first_token ( )	call the method <name1> .delete_first_token .
<name6> <name5> ( <name3> , <name2> )	<name6> a class instance <name5> , called with an arguments <name3> and <name2> .
@  <name4> . tag	<name4> .tag decorator ,
def <name1> ( <name3> , <name5> ) :	define the function <name1> with 2 arguments : <name3> and <name5> .
<name2> = <name5> . split_contents ( ) [ 1 : ]	call the method <name5> .split_contents , substitute the result without the first element for <name2> .
<name3> len ( <name5> ) <  <val1> :	<name3> length of <name5> is smaller than integer <val1> ,
<name5> <name1> ( <val2> )	<name5> an <name1> exception with an argument string <val2> .
<name2> <name3> ( [ <name5> . compile_filter ( <name6> ) for <name6> in bits ] )	<name2> an instance of <name3> class , created with an argument , result of the method <name5> .compile_filter called with <name6> ,
@  <name2> . tag ( <val3>   )	for every bit in bits . <name2> .tag decorator function with an argument <val3> ,
def <name1> ( <name5> , <name6> ) :	define the function <name1> with 2 arguments : <name5> and <name6> .
bits = <name5> . split_contents ( )	call the method <name5> .split_contents , substitute the result .
<name2> len ( <name1> ) <  <val6> :	<name2> length <name1> is smaller than intger <val6> ,
"<name3> <name1> ( ""'for' statements should have at least four"" "" words: %s"" % token . contents )"	"<name3> an <name1> exception with an argument string ""'for' statements should have at least four words: %s"" ,"
<name3> = <name5> [ - 1 ] == <val1>	where '%s' is replaced with token .contents . assign the string <val1> to <name3> and <name5> last elements .
<name5> = - <val6> <name2> <name1> else - <val4>	<name2> index is negative inter <val6> , <name2> <name1> , substitute it for <name5> , <name2> not , <name5> is negative integer <val4> .
<name3> <name2> [ <name5> ] != <val6>   :	<name3> <name5> - th element of <name2> equals to string <val6> ,
"<name1> <name5> ( ""'for' statements should use the format"" "" 'for x in y': %s"" % token . contents )"	"<name1> an <name5> exception with an argument string ""'for' statements should use the format 'for x in y': %s"" ,"
loopvars = <name1> . split ( r <val6>   , ' '   . join ( <name3> [ <val2> : <name5> ] ) )	where '%s' is replaced with token .contents . call the method <name1> .split with 2 arguments : raw string <val6> and elements of <name3> from <val2> index to <name5> index ,
<name6> <name2> <name3> <name5> :	joined into a string , separated by whitespaces , substitute the result <name6> <name5> . <name6> every <name2> <name3> <name5> ,
<name6> not <name3> <name1> ' '   <name5> <name3> :	<name6> <name3> is false <name1> whitespaces are contained <name5> <name3> ,
"<name2> <name4> ( ""'for' tag received an invalid argument:"" "" %s"" % token . contents )"	"<name2> an <name4> exception with an argument string ""'for' tag received an invalid argument: %s"" ,"
sequence = <name6> . compile_filter ( bits [ <name3> + 1 ] )	where '%s' is replaced with token .contents . call the method <name6> .compile_filter with an argument , <name3> incremented by one , and used to index <name6> .compile_filter ,
<name3> = <name6> . parse ( ( <val1>   , <val5>   , ) )	substitute the result for sequence . call the method <name6> .parse with an argument tuple with 2 elements strings <val1> and <val5> , substitute the result for <name3> .
<name5> = <name4> . next_token ( )	call the method <name4> .next_token , substitute the result for <name5> .
<name3> <name6> . contents == <val1>   :	<name3> <name6> .contents equals string <val1> ,
<name2> = <name5> . parse ( ( <val1>   , ) )	call the method <name5> .parse with an argument tuple with an element string <val1> , substitute the result for <name2> .
<name3> . delete_first_token ( )	call the method <name3> .delete_first_token .
else :	if not ,
<name2> = <name3>	<name2> is <name3> .
<name6> <name2> ( <name5> , <name1> , <name3> , <name4> , <name6> )	<name6> an instance of <name2> class , created with 5 arguments : <name5> , <name1> , <name3> , <name4> and <name6> .
def <name5> ( <name1> , <name6> , <name3> ) :	define the function <name5> with 2 arguments : <name1> , <name6> and <name3> .
<name6> = <name1> ( <name3> . split_contents ( ) )	call the method <name3> .split_contents , convert the result into a <name1> and substitute it for <name6> .
<name4> len ( <name2> ) != <val6> :	<name4> length of <name2> is not equal to integer <val6> ,
<name4> <name2> ( <val3> % bits [ 0 ] )	<name4> an <name2> exception with an argument string <val3> ,
<name4> = <val3>   + <name5> [ 0 ]	where '%r' is replaced with first element of <name5> . append first element of <name5> to <val3> . substitute the result for <name4> .
nodelist_loop = <name4> . parse ( ( <val6>   , <name1> ) )	call the method <name4> .parse with an argument tuple with an element string <val6> and <name1> , substitute the result for nodelist_true .
<name5> = <name6> . next_token ( )	call the method <name6> .next_token , substitute the result for <name5> .
<name1> <name5> . contents == <val3>   :	<name1> <name5> .contents equals a string <val3> ,
<name1> = <name4> . parse ( ( <name2> , ) )	call the method <name4> .parse with an argument tuple with an element <name2> , substitute the result for <name1> .
<name6> . delete_first_token ( )	call the method <name6> .delete_first_token .
else :	if not ,
<name1> = <name5> ( )	<name1> is an instance of <name5> class .
<name6> = <name4> . compile_filter ( <name2> [ 1 ] )	call the method <name4> .compile_filter with an argument , second element of <name2> , substitute the result for <name6> .
<name4> = <name1> . compile_filter ( <name2> [ 2 ] )	call the method <name1> .compile_filter with an argument , third element of <name2> , substitute the result for <name4> .
<name3> <name4> ( <name1> , <name5> , <name6> , <name2> , <name3> )	<name3> an instance of <name4> class , created with 5 arguments : <name1> , <name5> , <name6> , <name2> and <name3> .
@  <name2> . tag	<name2> .tag decorator ,
def <name5> ( <name6> , <name1> ) :	define the function <name5> with 2 arguments : <name6> and <name1> .
<name3> <name1> ( <name6> , <name5> , <name2> )	call the function <name1> with 3 arguments : <name6> , <name5> and boolean <name2> , <name3> the result .
@  <name3> . tag	<name3> .tag decorator ,
def <name1> ( <name4> , <name2> ) :	define the function <name1> with 2 arguments : <name4> and <name2> .
<name3> <name2> ( <name5> , <name1> , True )	call the function <name2> with 3 arguments : <name5> , <name1> and boolean False , <name3> the result .
<name5> <name3> ( <name6> ) :	derive the <name5> <name3> from <name6> base <name5> .
def <name5> ( <name2> , <name4> , <name6> ) :	define the method <name5> with 3 arguments : <name2> , <name4> and <name6> .
<name5> . <name2> = <name2>	substitute <name2> for <name5> .value .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .text .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name5> <name6> . text	<name5> <name6> .text .
def <name4> ( <name2> , <name6> ) :	define the method <name4> with 2 arguments : <name2> and <name6> .
<name5> <name3> . value . resolve ( <name2> , <name1> = <name4> )	call the method <name3> .value .resolve with 2 arguments <name2> and <name1> set to boolean <name4> , <name5> the result .
<name6> <name5> ( <name2> ) :	derive the <name6> <name5> from <name2> base <name6> .
<name2> = <name3>	substitute <name3> for <name2> .
def <name5> ( <name3> , <name1> , * <name4> , ** <name6> ) :	define the method <name5> with 4 arguments : <name3> , <name1> , unpacked list <name4> and unpacked dictionary <name6> .
<name2> . template_parser = <name4>	substitute <name4> for <name2> .template_parser .
super ( <name6> , self ) . <name2> ( * <name4> , ** kwargs )	call the method <name2> from the base class of the class <name6> , with 2 arguments : unpacked list <name4> and unpacked dictionary .
def <name3> ( <name6> , <name2> ) :	define the method <name3> with 2 arguments : <name6> and <name2> .
<name4> <name5> ( <name6> . template_parser . compile_filter ( value ) , value )	<name4> an instance of <name5> with 2 arguments : result of the function <name6> .template_parser .compile_filter ,
@  <name4> . tag ( <val5>   )	called with an argument value and value . <name4> .tag decorator function with an argument <val5> ,
def <name6> ( <name3> , <name5> ) :	define the function <name6> with 2 arguments : <name3> and <name5> .
<name1> = <name2> . split_contents ( ) [ 1 : ]	call the method <name2> .split_contents , substitute results without the first element for <name1> .
<name6> = <name4> ( <name5> , <name3> ) . <name1> ( )	call the method <name1> from the instance of <name4> class , created with 2 arguments <name5> and <name3> , substitute the result for <name6> .
<name4> = <name1> . parse ( ( <val6>   , <val2>   , <val3>   ) )	call the method <name1> .parse with an argument tuple with 3 elements : strings <val6> , <val2> and <val3> , substitute the result for <name4> .
<name1> = [ ( <name5> , <name4> ) ]	<name1> is a list containing tuple with 2 elements <name5> and <name4> .
<name2> = <name6> . next_token ( )	call the method <name6> .next_token , substitute the result for <name2> .
<name5> <name6> . contents . startswith ( <val2>   ) :	<name5> <name6> .contents starts with a string <val2> ,
<name6> = <name3> . split_contents ( ) [ 1 : ]	call the method <name3> .split_contents , substitute results without the first element for <name6> .
<name4> = <name1> ( <name5> , <name6> ) . <name3> ( )	call the method <name3> from the instance of <name1> class , created with 2 arguments <name5> and <name6> , substitute the result for <name4> .
<name6> = <name4> . parse ( ( <val2>   , <val3>   , <val1>   ) )	call the method <name4> .parse with an argument tuple with 3 elements strings <val2> , <val3> and <val1> , substitute the result for <name6> .
<name6> . <name5> ( ( <name2> , <name4> ) )	<name5> a tuple with 2 elements : <name2> and <name4> to <name6> .
<name3> = <name6> . next_token ( )	call the method <name6> .next_token , substitute the result for <name3> .
<name1> <name4> . contents == <val2>   :	<name1> <name4> .contents equals string <val2> ,
<name1> = <name4> . parse ( ( <val6>   , ) )	call the method <name4> .parse with an argument tuple with an element string <val6> , substitute the result for <name1> .
<name1> . <name3> ( ( <name5> , <name6> ) )	<name3> a tuple with 2 elements : <name5> and <name6> to <name1> .
<name6> = <name1> . next_token ( )	call the method <name1> .next_token , substitute the result for <name6> .
assert <name6> . contents == <val3>	if <name6> .contents doesn not equals a string <val3> , raise an AssertionError exception ,
<name2> <name4> ( <name6> )	<name2> an instance of <name4> class , created with an argument <name6> .
@  <name2> . tag	<name2> .tag decorator ,
def <name1> ( <name5> , <name3> ) :	define the function <name1> with 2 arguments : <name5> and <name3> .
<name4> = <name1> . split_contents ( )	call the method <name1> .split_contents , substitute the result for <name4> .
nodelist_true = <name2> . parse ( ( <val4>   , 'endifchanged'   ) )	call the method <name2> .parse with an argument tuple with 2 elements strings : <val4> and 'endfilter' , substitute the result for nodelistelse .
<name1> = <name3> . next_token ( )	call the method <name3> .next_token , substitute the result for <name1> .
<name1> <name4> . contents == <val3>   :	<name1> <name4> .contents equals string <val3> ,
<name1> = <name2> . parse ( ( <val4>   , ) )	call the method <name2> .parse with an argument tuple with an element string <val4> , substitute the result for <name1> .
<name6> . delete_first_token ( )	call the method <name6> .delete_first_token .
else :	if not ,
<name4> = <name2> ( )	<name4> is an instance of <name2> .
values = [ <name4> . compile_filter ( <name3> ) <name2> <name3> <name5> <name6> [ 1 : ] ]	<name2> every <name3> <name5> elements of <name6> without the first element , call the method <name4> .compile_filter , with an argument <name3> ,
<name1> <name6> ( <name4> , <name3> , * <name5> )	substitute the list of results for <name5> . <name1> an instance of a class <name6> , created with 3 arguments : <name4> , <name3> and unpacked list <name5> .
@  <name4> . tag	<name4> .tag decorator ,
def <name1> ( <name5> , <name6> ) :	define the function <name1> with 2 arguments : <name5> and <name6> .
<name3> = <name1> . split_contents ( )	call the method <name1> .split_contents , substitute the result for <name3> .
<name5> = <name1>	<name5> is boolean <name1> .
<name2> len ( <name6> ) <name1> in ( <val3> , <val4> ) :	<name2> length of <name6> is <name1> integer <val3> or <val4> ,
"<name4> <name3> ( ""'ssi' tag takes one argument: the path to"" "" the file to be included"" )"	"<name4> an <name3> exception with an argument string ""'ssi' tag takes one argument: the path to the file to be included"" ."
<name5> len ( <name4> ) == <val6> :	<name5> length of <name4> equals integer <val6> ,
<name6> <name2> [ 2 ] == <val1>   :	<name6> third element of <name2> equals a string <val1> ,
<name4> = <name3>	<name4> is boolean <name3> .
else :	if not ,
<name5> = <name2> . compile_filter ( <name6> [ 1 ] )	where '%s' is replaced with first element of <name6> . call the method <name2> .compile_filter with second element of <name6> as an argument , substitute the result for <name5> .
<name2> <name6> ( <name5> , <name3> )	<name2> an instance of a <name6> class , created with 2 arguments : <name5> and <name3> .
@  <name2> . tag	<name2> .tag decorator ,
def <name1> ( <name3> , <name5> ) :	define the function <name1> with 2 arguments : <name3> and <name5> .
<name6> = <name4> . contents . split ( )	call the method <name4> .split_contents , substitute the result for <name6> .
<name6> len ( <name1> ) >= <val4> <name2> <name1> [ - 2 ] == <val3> :	<name6> length of <name1> is greater or equal to integer <val4> <name2> second last element of <name1> equals sting <val3> ,
<name2> :	<name2> ,
<name3> = <name2> [ - 1 ]	substitute last element of <name2> for <name3> .
<name1> = <name4> ( <name6> )	call the function <name4> with an argument <name6> , substitute the result for <name1> .
except <name2> as <name4> :	if <name2> , renamed to <name4> , exception is caught ,
<name4> <name6> ( <val2> % ( taglib , e ) )	<name4> an <name6> exception with an argument string <val2> ,
else :	where '%s' is replaced with taglib and e . if not ,
<name3> = <name4> ( )	<name3> is an instance of <name4> class .
<name1> <name5> <name2> <name3> [ <val6> : - <val4> ] :	<name1> every <name5> <name2> <name3> from the start index <val6> to the end index negative <val4> ,
<name3> <name6> <name1> <name5> . tags :	<name3> <name6> is contained <name1> <name5> .tags ,
<name6> . tags [ <name4> ] = <name1> . tags [ <name4> ]	substitute value under the <name4> key of the <name1> .tags dictionary for value under the <name4> key of the <name6> .tags dictionary .
<name2> <name3> <name5> <name4> . filters :	<name2> <name3> is contained <name5> <name4> .filters .
     <name5> . filters [ <name2> ] = <name1> . filters [ <name2> ]	substitute value under the <name2> key of the <name1> .filters dictionary for value under the <name2> key of the <name5> .filters dictionary .
elif <name6> <name1> <name4> . filters :	otherwise if <name6> is contained <name1> <name4> .filters ,
<name2> . filters [ <name6> ] = <name1> . filters [ <name6> ]	substitute value under the <name6> key of the <name1> .filters dictionary for value under the <name6> key of the <name2> .filters dictionary .
else :	if not ,
<name5> . add_library ( <name6> )	where '%s' is replaced with name and taglib . call the method <name5> .add_library with an argument <name6> .
else :	if not ,
<name1> <name3> <name2> <name6> [ 1 : ] :	<name1> every <name3> <name2> <name6> without the first element ,
<name6> :	<name6> ,
<name1> = <name4> ( <name6> )	call the function <name4> with an argument <name6> , substitute the result for <name1> .
<name6> . add_library ( <name5> )	call the method <name6> .add_library with an argument <name5> .
except <name2> as <name5> :	if <name2> , renamed to <name5> , exception is caught ,
<name4> <name2> ( <val6> % ( taglib , e ) )	<name4> an <name2> exception with an argument string <val6> ,
<name3> <name5> ( )	where '%s' is replaced with taglib and e . <name3> an instance of a <name5> class .
@  <name3> . tag	<name3> .tag decorator ,
def <name3> ( <name2> , <name5> ) :	define the function <name3> with 2 arguments : <name2> and <name5> .
<name5> = <name3> . split_contents ( )	call the method <name3> .split_contents , substitute the result for <name5> .
<name3> len ( <name4> ) != <val6> :	<name3> length of <name4> is not equal to integer <val6> ,
<name1> <name4> ( <val3> )	<name1> an <name4> exception with an argument string <val3> .
<name1> = <name6> [ 1 ] [ 1 : - 1 ]	substitute second element of <name6> without the first and last element for <name1> .
<name2> <name6> ( <name3> )	<name2> an instance of a <name6> class , created with an argument <name3> .
@  <name2> . tag	<name2> .tag decorator ,
def <name2> ( <name5> , <name1> ) :	define the function <name2> with 2 arguments : <name5> and <name1> .
<name5> = <name1> . split_contents ( )	call the method <name1> .split_contents , substitute the result for <name5> .
<name5> len ( <name2> ) != <val3> :	<name5> length of <name2> is not equal to integer <val3> ,
<name6> <name4> ( <val2> )	<name6> an <name4> exception with an argument string <val2> .
<name3> = <name5> . compile_filter ( <name2> [ 1 ] )	call the method <name5> .compile_filter with an argument first element of <name2> , substitute the result for <name3> .
<name3> <name4> [ 2 ] != <val1>   :	<name3> third element of <name4> is not equal to a string <val1> ,
<name2> <name4> [ 4 ] != <val1>   :	<name2> fift element of <name4> is not equal to a string <val1> ,
<name4> = <name5> [ 5 ]	substitute sixth element of <name5> for <name4> .
expression = parser . compile_filter ( <name5> + <name3> + <name4> [ 3 ] )	concatenate <name5> , <name3> and fourth element of <name4> , use the result as an argument for the call the method ,
<name1> <name4> ( <name3> , <name5> , <name2> )	parser .compile_filter , substitute the result for <name5> . <name1> an instance of a <name4> class , created with 3 arguments <name3> , <name5> and <name2> .
@  <name1> . tag	<name1> .tag decorator ,
def <name6> ( <name4> , <name5> ) :	define the function <name6> with 2 arguments : <name4> and <name5> .
<name3> = <name2> . parse ( ( <val6>   , ) )	call the method <name2> .parse with an argument tuple with an element string <val6> , substitute the result for <name3> .
<name6> . delete_first_token ( )	call the method <name6> .delete_first_token .
<name4> <name1> ( <name5> )	<name4> an instance of a <name1> class , created with an argument <name5> .
@  <name6> . tag	<name6> .tag decorator ,
def <name6> ( <name1> , <name5> ) :	define the function <name6> with 2 arguments : <name1> and <name5> .
<name5> = <name2> . contents . split ( )	call the method <name2> .split_contents , substitute the result for <name5> .
<name5> len ( <name3> ) != <val2> :	<name5> length of <name3> is not equal to integer <val2> ,
<name3> <name1> ( <val6> )	<name3> an <name1> exception with an argument string <val6> .
<name3> = <name5> [ 1 ]	substitute second element of <name5> for <name3> .
<name2> <name6> <name5> <name4> <name3> . mapping :	<name2> <name6> is <name5> contained <name4> <name3> .mapping ,
"<name3> <name1> ( ""Invalid templatetag argument: '%s'."" "" Must be one of: %s"" % ( tag , list ( TemplateTagNode . mapping ) ) )"	"<name3> an <name1> exception with an argument string ""Invalid templatetag argument: '%s'. Must be one of: %s"" ,"
<name5> <name4> ( <name1> )	where '%s' is replaced with <name1> and <name4> .mapping converted into a list . <name5> an instance of a <name4> class , created with an argument <name1> .
@  <name6> . tag	<name6> .tag decorator ,
def <name4> ( <name1> , <name6> ) :	define the function <name4> with 2 arguments : <name1> and <name6> .
<name6> = <name1> . split_contents ( )	call the method <name1> .split_contents , substitute the result for <name6> .
<name6> len ( <name5> ) <  <val4> :	<name6> length of <name5> is lesser than integer <val4> ,
"<name6> <name3> ( ""'%s' takes at least one argument"" "" (path to a view)"" % bits [ 0 ] )"	"<name6> an <name3> exception with an argument string ""'%s' takes at least one argument (path to a view)"" ,"
<name2> = <name4> . compile_filter ( <name3> [ 1 ] )	where '%s' is replaced with first element of <name3> . call the method <name4> .compile_filter with second element of <name3> as an argument , substitute the result for <name2> .
<name6> = [ ]	<name6> is an empty list .
<name6> = { }	<name6> is an empty dictionary .
<name5> = <name6>	<name5> is <name6> .
<name5> = <name5> [ 2 : ]	remove first two elements from <name5> .
<name5> len ( <name2> ) >= <val1> <name3> <name2> [ - <val1> ] == <val4>   :	<name5> length of <name2> is greater or equal to intger <val1> <name3> second last element of <name2> is equal to string <val4> ,
<name6> = <name1> [ - 1 ]	substitute last element of <name1> for <name6> .
<name3> = <name3> [ : - <val5> ]	remove last <val5> elements from <name3> .
<name5> len ( <name1> ) :	<name5> length of <name1> is not zero ,
<name4> <name3> <name6> <name1> :	<name4> every <name3> <name6> <name1> ,
<name6> = <name4> . <name6> ( <name2> )	call the method <name4> .match with an argument <name2> , substitute it for <name6> .
<name2> not <name1> :	<name2> <name1> is true ,
<name3> <name4> ( <val2> )	<name3> an <name4> exception with an argument string <val2> .
<name1> , <name5> = <name6> . groups ( )	call the method <name6> .groups , assign the result to <name1> and <name5> , respectively .
<name2> <name3> :	<name2> <name3> is true ,
<name3> [ <name1> ] = <name4> . compile_filter ( <name6> )	call the method <name4> .compile_filter with an argument <name6> , substitute the result for <name6> under the <name1> key of <name3> dictionary .
else :	if not ,
<name2> . <name5> ( <name3> . compile_filter ( <name6> ) )	call the method <name3> .compile_filter with an argument <name6> , <name5> the result to <name2> .
<name3> <name2> ( <name5> , <name6> , <name1> , <name4> )	<name3> an instance of a <name2> class , created with 4 arguments <name5> , <name6> , <name1> and <name4> .
@  <name5> . tag	<name5> .tag decorator ,
def <name1> ( <name2> , <name6> ) :	define the function <name1> with 2 arguments : <name2> and <name6> .
<name5> = <name2> . parse ( ( <val3>   , ) )	call the method <name2> .parse with an argument tuple with an element string <val3> , substitute the result for <name5> .
<name5> . delete_first_token ( )	call the method <name5> .delete_first_token .
return VerbatimNode ( <name3> . render ( <name4> ( ) ) )	call the method <name3> .render with an argument , an instance of <name4> class , use the result as an argument for the creation of ,
@  <name2> . tag	an instance of VerbatimNode class , return it . <name2> .tag decorator ,
def <name4> ( <name2> , <name1> ) :	define the function <name4> with 2 arguments : <name2> and <name1> .
<name4> = <name2> . split_contents ( )	call the method <name2> .split_contents , substitute the result for <name4> .
<name5> len ( <name6> ) == <val4> :	<name5> length of <name6> equals integer <val4> ,
<name1> , <name2> , <name6> , <name4> = <name5>	assign the <name5> elements to <name1> , <name2> , <name6> and <name4> , respectively .
<name3> = <name4>	<name3> is <name4> .
elif len ( <name6> ) == <val5> :	otherwise if length of <name6> equals integer <val5> ,
<name1> , <name4> , <name3> , <name6> , <name2> , <name5> = <name1>	assign the <name1> elements to <name1> , <name4> , <name3> , <name6> , <name2> and <name5> .
<name3> <name4> != <val6>   :	<name3> <name4> is not equal to string <val6> ,
<name5> <name3> ( <val6> )	<name5> an <name3> exception with an argument string <val6> .
else :	if not ,
<name6> <name5> ( <val1> )	<name6> an <name5> exception with an argument string <val1> .
<name4> <name3> ( <name2> . compile_filter ( this_value_expr ) , <name2> . compile_filter ( max_value_expr ) , <name2> . compile_filter ( max_width ) , asvar = asvar )	<name4> an instance of a class <name3> , created with 4 arguments : result of the method <name2> .compile_filter ,
@  <name1> . tag ( <val5>   )	called with an argument this_value_expr , result of the method parser .compile_filter called with an argument max_value_expr , return value of the method parser .compile_filter called with an argument max_width and asvar as asvar . <name1> .tag decorator function with an argument <val5> ,
def <name1> ( <name3> , <name6> ) :	define the function <name1> with 2 arguments : <name3> and <name6> .
<name6> = <name5> . split_contents ( )	call the method <name5> .split_contents , substitute the result for <name6> .
<name2> = <name3> [ 1 : ]	substitute <name3> without the first element for <name2> .
<name1> = <name6> ( <name5> , <name2> , <name4> = <name3> )	call the function <name6> with 3 arguments : <name5> , <name2> and <name4> set to boolean <name3> , substitute the result for <name1> .
<name5> not <name2> :	<name5> <name2> is false ,
"<name3> <name5> ( ""%r expected at least one variable "" ""assignment"" % bits [ 0 ] )"	"<name3> an <name5> exception with an argument string ""%r expected at least one variable assignment"" ,"
<name5> <name4> :	where '%r' is replaced with first element of bits . <name5> <name4> is true ,
<name6> <name4> ( <val1> % ( bits [ 0 ] , remaining_bits [ 0 ] ) )	<name6> an <name4> exception with an argument string <val1> , where '%r' is replaced with ,
<name3> = <name4> . parse ( ( <val6>   , ) )	first element of bits and first element of remaining_bits . call the method <name4> .parse with an argument tuple , with an element string <val6> , substitute the result for <name3> .
<name3> . delete_first_token ( )	call the method <name3> .delete_first_token .
<name4> <name3> ( <name5> , <name5> , <name1> , <name2> = <name2> )	<name4> an instance of a class <name3> , created with 4 arguments : <name5> , <name5> , <name1> and <name2> as <name2> .
       <name4> <name6> . core . exceptions <name2> <name1>	<name4> <name6> .core .exceptions <name2> <name1> into default name space .
<name2> <name3> . template . base <name1> <name5> , <name6> , <name4> , <name2>	<name2> <name3> .template .base <name1> <name5> , <name6> , <name4> and <name2> into default name space .
<name4> <name1> . conf <name5> <name3>	<name4> <name1> .conf <name5> <name3> into default name space .
<name5> <name2> . utils . module_loading <name6> <name3>	<name5> <name2> .utils .module_loading <name6> <name3> into default name space .
<name1> <name4> . utils <name2> <name5>	<name1> <name4> .utils <name2> <name5> into default name space .
<name5> = <name1>	<name5> is <name1> .
<name6> <name2> ( <name3> ) :	derive the <name6> <name2> from the <name3> base <name6> .
<name6> = <name4>	<name6> is boolean <name4> .
def <name2> ( <name1> , * <name3> , ** <name5> ) :	define the method <name2> with 3 arguments : <name1> , unpacked list <name3> and unpacked dictionary <name5> .
pass	do nothing .
def <name6> ( <name1> , <name3> , <name2> = <name5> ) :	define the method <name6> with 3 arguments : <name1> , <name3> and <name2> set to <name5> .
<name1> <name5> . load_template ( <name4> , <name6> )	call the method <name5> .load_template with 2 arguments : <name4> and <name6> , <name1> the result .
def <name4> ( <name2> , <name5> , <name3> = <name1> ) :	define the method <name4> with 3 arguments : <name2> , <name5> and <name3> set to <name1> .
<name1> , <name4> = <name3> . load_template_source ( <name2> , <name5> )	call the method <name3> .load_template_source with arguments <name2> and <name5> , assign the result to <name1> and <name4> .
origin = <name2> ( <name3> , <name5> . load_template_source , <name4> , <name6> )	call the function <name2> with 4 arguments : <name3> , <name5> .load_template_source , <name4> and <name6> ,
<name1> :	substitute the result for origin . <name1> ,
<name5> = <name2> ( <name1> , <name3> , <name4> )	call the function <name2> with 3 arguments : <name1> , <name3> and <name4> , substitute the result for <name5> .
<name1> <name4> , <name3>	<name1> <name4> and <name3> .
except <name5> :	if <name5> exception is caught ,
<name1> <name2> , <name4>	<name1> <name2> and <name4> .
def <name3> ( <name2> , <name1> , <name5> = <name4> ) :	define the method <name3> with 3 arguments : <name2> , <name1> and <name5> set to <name4> .
<name2> <name5> ( <val4>   )	<name2> an <name5> with an argument string <val4> .
def <name5> ( <name1> ) :	define the method <name5> with an argument <name1> .
pass	do nothing .
<name4> <name5> ( <name1> ) :	derive the <name4> <name5> from the <name1> base <name4> .
def <name2> ( <name5> , <name4> , <name6> , <name1> , <name3> ) :	define the method <name2> with 5 arguments : <name5> , <name4> , <name6> , <name1> and <name3> .
super ( <name5> , self ) . <name1> ( <name3> )	call the method <name1> with an argument <name3> , from the base class of the <name5> class .
<name6> . <name1> , <name6> . loadname , <name6> . <name4> = <name1> , <name2> , <name4>	substitute <name1> , <name2> and <name4> for <name6> .loader , <name6> .loadname and <name6> .dirs , respectively .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name1> <name4> . loader ( <name4> . loadname , <name4> . dirs ) [ 0 ]	call the method <name4> .loader with 2 arguments : <name4> .loadname and <name4> .dirs , <name1> the first element of the result .
def <name3> ( <name1> , <name2> , <name5> , <name4> ) :	define the function <name3> with 4 arguments : <name1> , <name2> , <name5> and <name4> .
<name4> <name6> . TEMPLATE_DEBUG <name2> <name3> :	<name4> <name6> .TEMPLATE_DEBUG <name2> <name3> are both true ,
<name6> <name3> ( <name2> , <name4> , <name1> , <name5> )	<name6> an instance of <name3> class , created with 4 arguments : <name2> , <name4> , <name1> and <name5> .
else :	if not ,
<name3> <name4>	<name3> <name4> .
def <name2> ( <name3> ) :	define the function <name2> with an argument <name3> .
<name1> isinstance ( <name5> , ( <name6> , <name4> ) ) :	<name1> <name5> is an instance of <name6> or <name4> ,
<name2> , <name5> = <name2> [ 0 ] , <name2> [ 1 : ]	substitute first element of <name2> for <name2> and <name2> without the first element for <name5> .
else :	if not ,
<name1> = [ ]	<name1> is an empty list .
<name5> isinstance ( <name6> , <name4> . string_types ) :	<name5> <name6> is an instance of <name4> .string_types ,
<name4> = <name2> ( <name6> )	call the function <name2> with an argument <name6> , substitute the result for <name4> .
<name5> hasattr ( <name1> , <val6>   ) :	<name5> <name1> has an attribute <val6> ,
<name4> = <name3> ( * <name5> )	<name4> is an instance of <name3> class , created with unpacked list <name5> .
else :	if not ,
<name1> <name6> :	<name1> <name6> is true ,
"<name3> <name4> ( ""Error importing template source loader %s - can't pass arguments to function-based loader."" % <name6> )"	"<name3> an <name4> exception with an argument string "" Error importing template source <name6> % s - can ' t pass arguments to"
<name5> = <name4>	"function - based loader . "" , where '%s' is replaced with loader . substitute <name4> for <name5> ."
if not <name4> . is_usable :	<name4> .is_usable in false ,
<name4> <name6>	<name4> module <name6> .
"<name3> . warn ( ""Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS."" % loader )"	"call the function <name3> .warn with an argument string "" Your TEMPLATE_LOADERS setting includes % r , but your Python installation"
<name5> <name1>	"doesn 't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS."",   where ' % r '  is replaced with loader . <name5> <name1> ."
else :	if not ,
<name4> <name5>	<name4> <name5> .
else :	if not ,
<name1> <name6> ( <val2>   )	<name1> an <name6> with an argument string <val2> .
def <name5> ( name , <name6> = <name2> ) :	define the function <name5> with 2 : template_name and <name6> set to <name2> .
<name2> <name3>	use <name2> variable <name3> .
<name1> <name2> <name4> <name5> :	<name1> <name2> <name4> <name5> ,
<name1> = [ ]	<name1> is an empty list .
<name1> <name5> <name6> <name3> . TEMPLATE_LOADERS :	<name1> every <name5> <name6> <name3> .TEMPLATE_LOADERS ,
<name6> = <name3> ( <name4> )	call the function <name3> with an argument <name4> , substitute the result for <name6> .
<name4> <name2> <name1> <name6> <name3> :	<name4> <name2> <name1> <name6> <name3> ,
<name3> . <name1> ( <name4> )	<name1> <name4> to <name3> .
<name3> = <name1> ( <name4> )	put <name4> elements in a <name1> , substitute it for <name3> .
<name4> <name2> <name6> <name3> :	<name4> every <name2> <name6> <name3> ,
<name2> :	<name2> ,
<name3> , <name2> = <name6> ( <name1> , <name4> )	call the function <name6> with 2 arguments <name1> and <name4> , substitute the result for <name3> and <name2> , respectively .
<name6> ( source , <name3> ( <name5> , <name1> , <name2> , <name4> ) )	call the function <name3> with 4 arguments : <name5> , <name1> , <name2> and <name4> , <name6> a tuple containing 2 elements :
except <name5> :	source and previous result . if <name5> exception is caught ,
pass	do nothing ,
<name6> <name5> ( <name4> )	<name6> an <name5> exception with an argument <name4> .
def <name3> ( <name4> , <name5> = <name2> ) :	define the function <name3> with 2 : <name4> and <name5> set to <name2> .
<name5> , <name4> = <name1> ( <name2> , <name3> )	call the function <name1> with 2 arguments : <name2> and <name3> , substitute the result for <name5> and <name4> .
<name4> not hasattr ( <name2> , <val5>   ) :	<name4> <name2> has an attribute <val5> ,
<name1> = <name3> ( <name1> , <name5> , <name4> )	call the function <name3> with 3 arguments : <name1> , <name5> and <name4> , substitute the result for <name1> .
<name6> <name1>	<name6> <name1> .
def <name3> ( <name4> , <name1> = <name2> , <name6> = <name2> ) :	define the function <name3> with 3 : <name4> , <name1> set to <name2> and <name6> set to <name2> .
<name2> <name5> ( <name6> , <name3> , <name4> )	<name2> an instance of <name5> class , created with 2 arguments : <name6> , <name3> and <name4> , <name2> the result .
def <name6> ( <name3> , <name5> = <name4> , <name2> = <name4> , <name1> = <name4> ) :	define the function <name6> with 4 arguments : <name3> , <name5> set to <name4> , <name2> set to <name4> and <name1> set to <name4> .
<name1> isinstance ( <name3> , ( <name4> , <name6> ) ) :	<name1> <name3> is an instance of <name4> or <name6> types ,
<name5> = <name2> ( <name4> , <name6> )	call the function <name2> with 2 arguments : <name4> , <name6> , substitute the result for <name5> .
else :	if not ,
<name5> = <name6> ( <name3> , <name4> )	call the function <name6> with 2 arguments : <name3> and <name4> , substitute the result for <name5> .
<name4> not <name6> :	<name4> <name6> is false ,
<name3> <name4> . render ( <name2> ( <name5> ) )	call the method <name4> .render with an argument , instance of <name2> class , created with an argument <name5> , <name3> the result .
<name5> not <name1> :	<name5> <name1> is false ,
<name1> <name5> . render ( <name2> )	call the function <name5> .render with an argument <name2> , <name1> the result .
<name6> <name1> . push ( <name5> ) :	call the method <name1> .push <name6> an argument <name5> , <name6> the result perform ,
<name6> <name5> . render ( <name4> )	call the function <name5> .render with an argument <name4> , <name6> the result .
def <name4> ( <name1> , <name5> = <name2> ) :	define the function <name4> with 2 arguments : <name1> and <name5> set to <name2> .
<name1> not <name4> :	<name1> <name4> is false ,
<name5> <name4> ( <val2> )	<name5> an <name4> exception with an argument string <val2> .
<name4> = [ ]	<name4> is an empty list .
<name3> <name5> <name1> <name6> :	<name3> every <name5> <name1> <name6> ,
<name1> :	<name1> ,
<name5> <name6> ( <name4> , <name3> )	call the function <name6> with 2 arguments <name4> and <name3> , <name5> the result .
except <name6> as <name1> :	if <name6> , renamed to <name1> , exception is caught ,
<name6> <name1> . args [ 0 ] <name4> <name2> <name5> :	<name6> first element of <name1> .args is <name4> contained <name2> <name5> ,
<name3> . <name4> ( <name6> . args [ 0 ] )	<name4> first element of <name6> .args to <name3> list .
continue	skip this loop iteration .
<name3> <name4> ( <val2>   . join ( <name6> ) )	<name3> an <name4> exception with an argument , elements of <name6> joined into a string , separated with <val2>
<name2> <name6> <name5> <name1>	<name2> <name6> <name5> <name1> into default name space .
<name2> <name1> . conf <name5> <name4>	<name2> <name1> .conf <name5> <name4> into default name space .
<name6> <name4> . template . base <name5> <name1> , <name3> , <name2> , <name6> , <name4> , <name5>	<name6> <name4> .template .base <name5> <name1> , <name3> , <name2> , <name6> , <name4> and <name5> into default namespace .
<name5> <name1> . template . loader <name6> <name4>	<name5> <name1> .template .loader <name6> <name4> into default name space .
<name2> <name1> . utils . safestring <name3> <name5>	<name2> <name1> .utils .safestring <name3> <name5> into default name space .
<name2> <name4> . utils <name3> <name6>	<name2> <name4> .utils <name3> <name6> into default name space .
<name1> = <name4> ( )	<name1> is an instance of <name4> class .
<name5> = <val1>	<name5> is a strign <val1> .
<name3> <name6> ( <name1> ) :	derive the <name3> <name6> from the <name1> base <name3> .
pass	do nothing .
<name1> <name2> ( object ) :	derive the <name1> <name2> from the Exception base <name1> .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name4> . blocks = <name6> ( <name2> )	convert elements of <name6> to <name2> , substitute it for <name4> .blocks .
def add_blocks ( <name2> , <name4> ) :	define the method <name2> and <name4> .
<name6> <name3> , <name4> <name5> <name1> . iteritems ( <name2> ) :	call the function <name1> .iteritems with an argument <name2> , <name6> every <name3> and <name4> <name5> result ,
<name6> . blocks [ <name2> ] . <name3> ( 0 , <name4> )	get the value under the <name2> key of <name6> .blocks dictionary , <name3> to it <name4> at the beginning .
def pop ( <name1> , <name3> ) :	define the method <name1> and <name3> .
<name6> :	<name6> ,
<name5> <name1> . blocks [ <name4> ] . pop ( )	remove the first element of value under the <name4> key of <name1> .blocks dictionary , <name5> it .
except <name6> :	if <name6> exception is caught ,
<name6> <name4>	<name6> <name4> .
def <name4> ( <name2> , <name6> , <name1> ) :	define the method <name4> with 3 arguments : <name2> , <name6> and <name1> .
<name3> . blocks [ <name2> ] . <name4> ( <name6> )	<name4> <name6> to the value under the <name2> key of <name3> .blocks dictionary .
def <name3> ( <name1> , <name5> ) :	define the method <name3> with 2 arguments <name1> and <name5> .
<name1> :	<name1> ,
<name1> <name3> . blocks [ <name4> ] [ - 1 ]	get value under the <name3> .blocks dictionary under the <name4> key , <name1> the last element .
except <name4> :	if <name4> exception is caught ,
<name4> <name1>	<name4> <name1> .
<name6> <name1> ( <name3> ) :	derive the <name6> <name1> from the <name3> base <name6> .
def <name4> ( <name3> , <name1> , <name6> , <name5> = <name2> ) :	define the method <name4> with 4 arguments : <name3> , <name1> , <name6> , <name5> set to <name2> .
<name2> . <name1> , <name2> . <name5> , <name2> . <name4> = <name1> , <name5> , <name4>	substitute <name1> , <name5> and <name4> for <name2> .name , <name2> .nodelist and <name2> .parent .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name3> <val4> % ( <name6> . name , <name6> . nodelist )	<name3> string <val4> , where '%s' is replaced with <name6> .name and '%r' with <name6> .nodelist .
def <name6> ( <name1> , <name2> ) :	define the method <name6> with 2 arguments <name1> and <name2> .
<name5> = <name6> . render_context . <name2> ( <name4> )	<name2> value under the <name4> key of <name6> .render_context dictionary , substitute it for <name5> .
<name3> <name1> . push ( ) :	call the <name1> .push method , <name3> the result , perform ,
<name5> <name1> <name4> <name3> :	<name5> <name1> <name4> <name3> ,
<name5> [ <val6>   ] = <name3>	substitute <name3> for value under the <val6> key of <name5> dictionary .
<name4> = <name2> . nodelist . render ( <name5> )	call the method <name2> .nodelist .render with an argument <name5> , substitute the <name4> for <name4> .
else :	if not ,
<name3> = <name6> = <name5> . pop ( <name4> . name )	call the method <name5> .pop with an argument <name4> .name , assign the result to <name3> and <name6> .
<name3> <name2> <name1> <name5> :	<name3> <name2> <name1> <name5> ,
<name6> = <name1>	substitute <name1> for <name6> .
<name3> = type ( <name5> ) ( <name3> . name , <name3> . nodelist )	convert <name5> to a tuple , call the result with 2 arguments : <name3> .name and <name3> .nodelist , substitute the result for <name3> .
<name2> . <name5> = <name5>	substitute <name5> for <name2> .context .
<name4> [ <val1>   ] = <name3>	substitute <name3> for value under the <val1> key of <name4> dictionary .
<name2> = <name3> . nodelist . render ( <name4> )	call the method <name3> .nodelist .render with an argument <name4> , substitute the <name2> for <name2> .
<name2> <name3> <name6> <name1> <name5> :	<name2> <name3> <name6> <name1> <name5> ,
<name5> . <name2> ( <name3> . name , <name2> )	call the method <name5> .push with 2 arguments : <name3> .name and <name2> .
<name2> <name4>	<name2> <name4> .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name5> = <name1> . context . <name5>	substitute <name1> .context .render_context for <name5> .
<name2> ( <name4> <name1> <name3> <name5> <name3> [ <name4> ] . <name6> ( <name2> . name ) <name4> not None ) :	<name2> <name4> <name4> contained <name1> <name3> <name5> call to the method <name6> with an argument <name2> .name from the object ,
<name4> <name5> ( <name6> . render ( <name6> . context ) )	under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None , call the method <name6> .render with an argument <name6> .context , use it as an argument for the call to the <name5> function , <name4> the result .
<name3> ''	<name3> an empty string .
<name5> <name1> ( <name6> ) :	derive the <name5> <name1> from the <name6> base <name5> .
<name5> = <name3>	<name5> is boolean <name3> .
def <name4> ( <name6> , <name5> , <name3> , <name1> = <name2> ) :	define the method <name4> with 4 arguments : <name6> , <name5> , <name3> and <name1> set to <name2> .
<name3> . <name1> = <name1>	substitute <name1> for <name3> .nodelist .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .parent_name .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .template_dirs .
<name3> . blocks = dict ( ( <name1> . name , <name1> ) <name5> <name1> <name4> <name2> . get_nodes_by_type ( BlockNode ) )	<name3> .blocks is a dictionary with elements : <name1> <name5> <name1> .name , <name5> every <name1> <name4> return value of the method <name2> .get_nodes_by_type ,
def <name5> ( <name1> ) :	called with an argument BlockNode . define the method <name5> with an argument <name1> .
<name1> <val3>   % <name6> . parent_name . token	<name1> an string <val3> , where '%s' is replaced with <name6> .parent_name .token .
def <name3> ( <name5> , <name6> ) :	define the method <name3> with 2 arguments <name5> and <name6> .
parent = <name1> . parent_name . resolve ( <name3> )	call the method <name1> .parent_name .resolve with an argument <name3> .
<name4> not <name2> :	<name4> <name2> is false ,
<name3> = <val2> % <name5>	<name3> is a string <val2> , where '%s' is replaced with <name5> .
<name5> <name2> . parent_name . filters <name6> isinstance ( <name2> . parent_name . var , <name3> ) :	<name5> <name2> .parent_name .filters is true <name6> <name2> .parent_name .var is an instance of <name3> .
<name1> += <val3> % <name5> . parent_name . token	append string <val3> to <name1> , where ' % s is replaced with <name5> .parent_name .token .
<name1> <name3> ( <name4> )	<name1> an <name3> exception with an argument <name4> .
<name2> hasattr ( <name1> , <val4>   ) :	<name2> <name1> has an attribute <val4> ,
<name4> <name3>	<name4> <name3> .
<name1> <name2> ( <name5> )	call the function <name2> with an argument <name5> , <name1> the result .
def <name6> ( <name3> , <name2> ) :	define the method <name6> with 2 arguments <name3> and <name2> .
<name1> = <name5> . get_parent ( <name6> )	call the method <name5> .get_parent with an argument <name6> , substitute the result for <name1> .
<name1> <name4> <name3> <name2> <name6> . render_context :	<name1> <name4> is <name3> contained <name2> <name6> .render_context ,
<name3> . render_context [ <name4> ] = <name1> ( )	value under the <name4> key of <name3> .render_context dictionary is <name1> class instance .
<name4> = <name6> . render_context [ <name3> ]	get the value under the <name3> key of the <name6> .render_context dictionary , substitute it for <name4> .
<name1> . add_blocks ( <name2> . blocks )	call the method <name1> .add_blocks with an argument <name2> .block .
<name5> <name6> <name2> <name3> . nodelist :	<name5> every <name6> <name2> <name3> .nodelist ,
<name4> <name6> isinstance ( <name2> , <name1> ) :	<name4> <name2> is <name6> an instance of <name1> ,
<name6> <name1> isinstance ( <name3> , <name4> ) :	<name6> <name3> is <name1> an instance of <name4> ,
<name1> = dict ( ( <name4> . name , <name4> ) <name5> <name4> <name3> compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )	<name1> is a dictionary with elements : <name4> <name5> <name4> .name , <name5> every <name4> <name3> return value of the method ,
<name5> . add_blocks ( <name4> )	compiled_parent .nodelist .get_nodes_by_type , called with an argument BlockNode . call the method <name5> .add_blocks with an argument <name4> .
<name3>	<name3> from the loop execution .
<name6> <name4> . _render ( <name1> )	call the method <name4> ._render with an argument <name1> , <name6> the result .
<name4> <name1> ( <name6> ) :	derive the <name4> <name1> from the <name6> base <name4> .
def <name1> ( <name4> , <name5> , * <name2> , ** <name3> ) :	define the method <name1> with 4 arguments : <name4> , <name5> , unpacked list <name2> and unpacked dictionary <name3> .
<name3> . <name6> = <name6>	substitute <name6> for <name3> .template .
<name3> . extra_context = <name6> . pop ( <val1>   , { }  )	remove <name6> dictionary entry under the <val1> key , if it exists substitute it for <name3> .extra_context ,
<name6> . isolated_context = <name5> . pop ( <val2>   , False )	if not <name6> .extra_context is an empty dictionary . remove <name5> dictionary entry under the <val2> key , if it exists substitute it for <name6> .isolated_context ,
super ( <name4> , <name1> ) . <name6> ( * <name3> , ** kwargs )	if not <name1> .isolated_context is boolean False . call the method <name6> from the base class of the class <name4> , called with 2 arguments : unpacked dictionary <name3> ,
def <name1> ( <name2> , <name6> ) :	and unpacked dictionary kwargs . define the method <name1> with 2 arguments <name2> and <name6> .
<name6> :	<name6> ,
<name6> = <name5> . <name6> . resolve ( <name3> )	call the method <name5> .template .resolve with an argument <name3> , substitute the result for <name6> .
<name5> not <name2> ( getattr ( <name4> , <val6>   , None ) ) :	get <val6> attribute of <name4> object , <name5> it is <name2> ,
<name4> = <name2> ( <name4> )	call the method <name2> with an argument <name4> , substitute the result for <name4> .
<name1> = {   <name4> : <name3> . resolve ( <name5> ) <name6> <name4> , <name3> in six . iteritems ( self . extra_context ) }	<name1> is an dictionary with entries : return value of the method <name3> .resolve with an argument <name5> <name6> <name4> ,
<name4> <name5> . isolated_context :	for every name and var in return value of the function six .iteritems called with an argument <name5> .extra_context . <name4> <name5> .isolated_context is true ,
<name6> <name4> . render ( <name3> . new ( <name1> ) )	call the method <name3> .new with an argument <name1> , use it as an argument for the call to the method <name4> .render , <name6> the result .
<name5> <name1> . push ( ** <name4> ) :	call the method <name1> .push <name5> unpacked dictionary <name4> as an argument , <name5> the result perform ,
<name4> <name3> . render ( <name2> )	call the method <name3> .render with an argument <name2> , <name4> the result .
except <name1> :	if <name1> exception is caught ,
<name2> <name1> . TEMPLATE_DEBUG :	<name2> <name1> .TEMPLATE_DEBUG is true ,
<name1>	<name1> an exception ,
<name4> ''	<name4> an empty string .
@  <name4> . tag ( <val1>   )	decorator method <name4> .tag with an argument <val1> ,
def <name6> ( <name5> , <name1> ) :	define the function <name6> with 2 arguments <name5> and <name1> .
<name2> = <name4> . contents . split ( )	call the method <name4> .contents .split , substitute the result for <name2> .
<name6> len ( <name3> ) != <val5> :	<name6> length of <name3> is not equal to integer <val5> ,
<name5> <name3> ( <val4> % bits [ 0 ] )	<name5> an <name3> exception with an argument string <val4> ,
<name4> = <name1> [ 1 ]	where '%s' is replaced with first element of <name1> . substitute second element for <name1> for <name4> .
<name2> :	<name2> ,
<name5> <name2> <name1> <name3> . __loaded_blocks :	<name5> <name2> is contained <name1> <name3> .__loaded_blocks ,
<name2> <name6> ( <val3> % ( bits [ 0 ] , block_name ) )	<name2> an <name6> exception with an argument string <val3> ,
<name3> . __loaded_blocks . <name5> ( <name4> )	substitute '%s' with first element of bits and <name4> , respectively . <name5> <name4> to <name3> .__loaded_blocks .
except <name5> :	if <name5> exception is caught ,
<name4> . __loaded_blocks = [ <name6> ]	substitute list with an element <name6> for <name4> .__loaded_blocks .
<name5> = <name6> . parse ( ( <val3>   , ) )	call the method <name6> .parse with an argument tuple with one element string <val3> , substitute the result for <name5> .
<name5> = <name3> . next_token ( )	call the method <name3> .next_token , substitute the result for <name5> .
<name3> = ( <val4>   , <val2>   % <name5> )	<name3> is a tuple with 2 elements : string <val4> and <val2> , where '%s' replaced with <name5> .
<name3> <name1> . contents <name2> <name6> <name4> :	<name3> <name1> .contents is <name2> contained <name6> <name4> ,
<name6> . invalid_block_tag ( <name1> , <val2>   , <name5> )	call the method <name6> .invalid_block_tag with 3 arguments : <name1> , <val2> and <name5> .
<name6> <name4> ( <name3> , <name2> )	<name6> an instance of a <name4> class , created with 2 arguments : <name3> and <name2> .
@  <name2> . tag ( <val1>   )	decorator method <name2> .tag with an argument <val1> ,
def <name1> ( <name5> , <name3> ) :	define the function <name1> with 2 arguments <name5> and <name3> .
<name2> = <name1> . split_contents ( )	call the method <name1> .split_contents , substitute the result for <name2> .
<name3> len ( <name5> ) != <val6> :	<name3> length of <name5> is not equalt to integer <val6> ,
<name4> <name1> ( <val3> % <name2> [ 0 ] )	<name4> an <name1> exception with an argument string <val3> , where '%s' is replaced with first element of <name2> .
<name3> = <name1> . compile_filter ( <name5> [ 1 ] )	call the method <name1> .compile_filter with an argument second element for <name5> , substitute the result for <name3> .
<name1> = <name2> . parse ( )	call the method <name2> .parse , substitute the result for <name1> .
<name3> <name4> . get_nodes_by_type ( <name2> ) :	call the method <name4> .get_nodes_by_type with an argument <name2> , <name3> it evaluates to true ,
<name6> <name3> ( <val1> % bits [ 0 ] )	<name6> an <name3> exception with an argument string <val1> ,
<name4> <name3> ( <name1> , <name2> )	where '%s' is replaced with first element of bits . <name4> an instance of <name3> with 2 arguments <name1> and <name2> .
@  <name2> . tag ( <val6>   )	decorator method <name2> .tag with an argument <val6> ,
def <name6> ( <name3> , <name4> ) :	define the function <name6> with 2 arguments <name3> and <name4> .
<name3> = <name1> . split_contents ( )	call the method <name1> .split_contents , substitute the result for <name3> .
<name4> len ( <name3> ) <  <val1> :	<name4> length of <name3> is lesser than integer <val1> ,
<name2> <name3> ( <val1> % bits [ 0 ] )	<name2> an <name3> with an argument string <val1> ,
<name6> = { }	where '%r' is replaced with first element of bits . <name6> is an empty dictionary .
<name1> = <name4> [ 2 : ]	substitute <name4> , without the first two elements , substitute the result for <name1> .
<name1> <name4> :	<name1> <name4> is true ,
<name2> = <name6> . pop ( 0 )	remove first element from <name6> , substitute the result for <name2> .
<name2> <name3> <name6> <name1> :	<name2> <name3> is contained <name6> <name1> ,
<name6> <name2> ( 'The %r option was specified more '    'than once.'   % option )	<name6> an <name2> exception with an argument string 'The %r option was specified more than once.' ,
<name2> <name4> == <val5>   :	where '%r' is replaced with options . <name2> <name4> equals a string <val5> ,
<name1> = <name3> ( <name6> , <name4> , <name5> = <name2> )	call the function <name3> with 3 arguments : <name6> , <name4> , <name5> set to boolean <name2> , substitute the result for <name1> .
<name1> not <name2> :	<name1> <name2> is true ,
elif option == <val1>   :	where '%s' is replaced with first element of bits . otherwise if options equals <val1> ,
<name3> = <name5>	<name3> is boolean <name5> .
else :	if not ,
<name2> <name3> ( <val1>   % ( <name4> [ 0 ] , option ) )	<name2> an <name3> with an argument string <val1> , where '%r' is replaced with first element of <name4> and options .
<name3> [ option ] = <name6>	substitute <name6> for <name6> under the <name3> key of <name3> dictionary .
<name4> = <name2> . <name6> ( <val3>   , False )	<name6> the value under the key <val3> of the <name2> dictionary , if it exists substitute the result for <name4> ,
<name2> = <name5> . <name4> ( 'with'   , { }  )	if not , isolated_context is boolean False . <name4> the value under the 'width' key of the <name5> dictionary , if it exists , substitute it for <name2> , if not <name2> is an empty dictionary .
<name3> <name6> ( <name1> . compile_filter ( bits [ 1 ] ) , extra_context = namemap , isolated_context = isolated_context )	<name3> an instance of <name6> class , created with 3 arguments : <name3> value of the method <name1> .compile_filter ,
<name1> <name5>	<name1> module <name5> .
<name6> <name2>	<name6> module <name2> .
<name2> <name6> . <name1> <name4> <name1>	<name2> <name6> .apps <name4> <name1> into default name space .
<name1> <name3> . conf <name5> <name4>	<name1> <name3> .conf <name5> <name4> into default name space .
<name4> <name1> . template . base <name6> <name2>	<name4> <name1> .template .base <name6> <name2> into default name space .
<name4> <name3> . template . loader <name1> <name2>	<name4> <name3> .template .loader <name1> <name2> into default name space .
<name2> <name3> . utils . _os <name6> <name5>	<name2> <name3> .utils ._os <name6> <name5> into default name space .
<name3> <name6> . utils <name1> <name2>	<name3> <name6> .utils <name1> <name2> into default name space .
def <name3> ( ) :	define the function <name3> .
<name6> <name1> . PY2 :	<name6> <name1> .PY2 is true ,
<name6> = <name1> . getfilesystemencoding ( ) or <name1> . getdefaultencoding ( )	call the function <name1> .getfilesystemencoding , if it evaluates to true , substitute the result for <name6> ,
<name2> = [ ]	if not , call the function sys .getdefaultencoding and substitute the result for fs_encoding . <name2> is an empty list .
<name4> <name3> <name1> <name6> . get_app_configs ( ) :	call the function <name6> .get_app_configs , <name4> every <name3> <name1> result ,
<name5> not <name4> . path :	<name5> <name4> .path is true ,
continue	skip this loop iteration .
<name1> = os . <name5> . <name2> ( <name4> . <name5> , <val6>   )	<name2> <name4> .path and string <val6> into file <name5> , substitute it for <name1> .
<name4> os . path . isdir ( <name6> ) :	<name4> <name6> is directory ,
<name6> <name5> . PY2 :	<name6> <name5> .PY2 is true ,
<name5> = <name5> . decode ( <name4> )	call the function <name5> .decode with an argument <name4> , substitute the result for <name5> .
<name3> . <name2> ( <name5> )	<name2> <name5> to <name3> .
<name3> <name5> ( <name1> )	convert <name1> to a <name5> , <name3> it .
<name1> = <name3> ( )	call the function <name3> , substitute the result for <name1> .
<name3> <name1> ( <name6> ) :	derive the <name3> <name1> from the <name6> base <name3> .
<name4> = <name1>	<name4> is boolean <name1> .
def <name4> ( <name1> , <name3> , <name5> = <name2> ) :	define the method <name4> with 3 arguments : <name1> , <name3> , <name5> set to <name2> .
<name2> not <name1> :	<name2> <name1> is false ,
<name4> = <name1>	substitute <name1> for <name4> .
<name3> <name6> <name4> <name2> :	<name3> every <name6> <name4> <name2> ,
<name2> :	<name2> ,
<name5> <name4> ( <name2> , <name3> )	call the function <name4> with 2 arguments <name2> and <name3> , <name5> the result .
except <name4> :	if <name4> exception is caught ,
<name6>	<name6> an exception .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
def <name6> ( <name4> , <name5> , <name1> = <name3> ) :	define the method <name6> with 3 arguments : <name4> , <name5> , <name1> set to <name3> .
<name4> <name5> <name6> <name1> . get_template_sources ( <name2> , <name3> ) :	call the method <name1> .get_template_sources with 2 arguments <name2> and <name3> , <name4> every <name5> <name6> the result ,
<name5> :	<name5> ,
<name2> <name1> ( <name6> , 'rb'   ) as <name5> :	<name1> the file named <name6> in read mode , <name2> file descriptor renamed to <name5> perform ,
<name6> ( <name2> . <name1> ( ) . <name4> ( <name3> . FILE_CHARSET ) , filepath )	<name1> file <name2> , call the method <name4> on the result with an argument <name3> .FILE_CHARSET , <name6> tuple containing 2 elements ,
except <name1> :	previous result and filepath . if <name1> exception is caught ,
pass	do nothing .
<name5> <name6> ( <name3> )	<name5> an <name6> exception with an argument <name3> .
<name4> <name5>	<name4> module <name5> .
<name4> <name2> . template . base <name5> <name3>	<name4> <name2> .template .base <name5> <name3> into default name space .
<name3> <name1> . template . loader <name2> <name5> , <name6> , <name4> , <name3>	<name3> <name1> .template .loader <name2> <name5> , <name6> , <name4> and <name3> into default name space .
<name4> <name5> . utils . encoding <name3> <name6>	<name4> <name5> .utils .encoding <name3> <name6> into default name space .
<name4> <name6> ( <name2> ) :	derive the <name4> <name6> from the <name2> base <name4> .
<name1> = <name4>	<name1> is boolean <name4> .
def <name6> ( <name2> , <name3> ) :	define the method <name6> with 2 arguments : <name2> and <name3> .
<name6> . template_cache = { }	<name6> .template_cache is an empty dictionary .
<name2> . find_template_cache = { }	<name2> .find_template_cache is an empty dictionary .
<name6> . _loaders = <name1>	substitute <name1> for <name6> ._loaders .
<name6> . _cached_loaders = [ ]	<name6> ._cached_loaders is an empty list .
@  <name3>	<name3> decorator .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name3> not <name1> . _cached_loaders :	<name3> <name1> ._cached_loaders is false ,
<name6> = [ ]	<name6> is an empty list .
<name1> <name2> <name4> <name3> . _loaders :	<name1> every <name2> <name4> <name3> ._loaders ,
<name5> . <name4> ( <name6> ( <name2> ) )	call the function <name6> with an argument <name2> , <name4> the result to <name5> .
<name6> . _cached_loaders = <name3>	substitute <name3> for <name6> ._cached_loaders .
<name1> <name2> . _cached_loaders	<name1> <name2> ._cached_loaders .
def <name3> ( <name6> , <name5> , <name1> ) :	define the method <name3> with 3 arguments : <name6> , <name5> and <name1> .
<name6> <name2> :	<name6> <name2> is true ,
return '-'   . <name5> ( [ template_name , hashlib . sha1 ( <name1> ( <val3>   . <name5> ( <name2> ) ) ) . hexdigest ( ) ] )	<name5> <name2> elements into a string , separated by <val3> , use it as an argument for the call to the function <name1> ,
else :	use the result as the argument for the call to the function hashlib .sha1 , call the hexdigest method on the result , join template_name and previous final result into a string , separated with '-' , return it . if not ,
<name6> <name1>	<name6> <name1> .
def <name4> ( <name6> , <name2> , <name1> = <name3> ) :	define the method <name4> with 3 arguments : <name6> , <name2> , <name1> set to <name3> .
<name3> = <name1> . cache_key ( <name2> , <name6> )	call the method <name1> .cache_key with 2 arguments <name2> and <name6> , substitute the result for <name3> .
<name6> :	<name6> ,
<name1> = <name4> . find_template_cache [ <name5> ]	get the value under the <name5> <name5> of the <name4> .find_template_cache dictionary , substitute it for <name1> .
except <name5> :	if <name5> exception is caught ,
<name6> = <name4>	<name6> is <name4> .
<name1> <name2> <name3> <name5> . loaders :	<name1> every <name2> <name3> <name5> .loaders ,
<name3> :	<name3> ,
<name2> , <name6> = <name5> ( <name3> , <name4> )	call the function <name5> with arguments <name3> and <name4> , assign the result to <name2> and <name6> , respectively .
except <name4> :	if <name4> exception is caught ,
pass	do nothing .
else :	if not ,
<name6> = ( <name1> , <name4> ( <name3> , <name5> , <name2> , <name6> ) )	<name6> is an tuple with 2 elements : <name1> and return value of the function <name4> called with 4 arguments : <name3> , <name5> , <name2> and <name6> .
<name6>	<name6> from the loop execution .
<name4> . find_template_cache [ <name5> ] = <name2>	substitute <name2> for <name4> .find_template_cache dictionary value under the <name5> <name5> .
<name4> <name6> :	<name4> <name6> is true ,
<name6> <name4>	<name6> <name4>
else :	if not ,
<name4> . template_cache [ <name1> ] = <name2>	substitute <name2> for <name4> .find_template_cache dictionary value under the <name1> <name1> .
<name4> <name5> ( <name3> )	<name4> an <name5> exception with an argument <name3> .
def <name4> ( <name1> , <name3> , <name2> = <name6> ) :	define the method <name4> with 3 arguments : <name1> , <name3> , <name2> set to <name6> .
<name3> = <name4> . cache_key ( <name6> , template_dirs )	get the value under the <name6> <name3> of the <name4> .cache_key dictionary , if it exists , substitute it for <name3> ,
<name6> = <name4> . template_cache . <name5> ( <name1> )	if not , substitute template_dirs for <name1> . <name5> the value under the <name1> <name1> of the <name4> .template_cache dictionary , substitute it for <name6> .
<name3> <name4> <name5> <name2> :	<name3> <name4> <name5> contained in <name2> ,
<name6> <name3>	<name6> an <name3> exception .
elif <name4> <name3> <name5> :	otherwise if <name4> <name3> <name5> ,
<name1> , <name5> = <name2> . find_template ( <name4> , <name3> )	call the method <name2> .find_template with 2 argumetns : <name4> and <name3> , assign the result to <name1> , <name5> , respectively .
<name6> not hasattr ( <name2> , <val1>   ) :	<name6> <name2> doesnt have a <val1> attribute ,
<name4> :	<name4> ,
<name6> = <name2> ( <name6> , <name5> , <name3> )	call the function <name2> with 3 arguments : <name6> , <name5> and <name3> , substitute the result for <name6> .
except <name5> :	if <name5> exception is caught ,
     <name3> . template_cache [ <name2> ] = ( <name4> , <name5> )	substitute a tuple with 2 elements : <name4> and <name5> , for <name3> .find_template_cache dictionary value under the <name2> <name2> .
<name6> . template_cache [ <name4> ] = ( <name2> , <name1> )	substitute a tuple with 2 elements : <name2> and <name1> , for <name6> .find_template_cache dictionary value under the <name4> <name4> .
<name6> <name1> . template_cache [ <name3> ]	<name6> <name1> .find_template_cache dictionary value under the <name3> <name3> .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name5> . template_cache . clear ( )	call the method <name5> .template_cache .clear .
<name4> . find_template_cache . clear ( )	call the method <name4> .find_template_cache .clear .
<name3> <name4> <name1> <name5>	<name3> <name4> <name1> <name5> into default name space .
<name1> :	<name1> ,
<name3> <name5> <name6> <name4>	<name3> <name5> <name6> <name4> into default name space .
except <name2> :	if <name2> exception is caught ,
<name4> = <name3>	<name4> is <name3> .
<name5> <name2> . <name4> <name3> <name4>	<name5> <name2> .apps <name3> <name4> into default name space .
<name5> <name3> . conf <name2> <name1>	<name5> <name3> .conf <name2> <name1> into default name space .
<name5> <name4> . template . base <name1> <name2>	<name5> <name4> .template .base <name1> <name2> into default name space .
<name1> <name6> . template . loader <name2> <name4>	<name1> <name6> .template .loader <name2> <name4> into default name space .
<name2> <name3> . utils <name4> <name5>	<name2> <name3> .utils <name4> <name5> into default name space .
<name4> <name3> ( <name5> ) :	derive the <name4> <name3> from the <name5> base <name4> .
<name6> = <name2> <name4> <name3> <name5>	if <name2> <name4> <name3> <name5> , <name6> <name4> boolean True , otherwise <name6> <name4> boolean False .
def <name1> ( <name5> , <name6> , <name2> = <name3> ) :	define the method <name1> with 3 arguments : <name5> , <name6> , <name2> set to <name3> .
<name1> <name2> <name4> <name6> <name3> :	<name1> <name2> <name4> <name6> <name3> ,
<name6> = <val1>   + <name4>	concatenate string <val1> and <name4> , substitute the result for <name6> .
<name1> <name4> <name3> <name5> . get_app_configs ( ) :	call the method <name5> .get_app_configs , <name1> <name4> <name3> the result ,
<name3> :	<name3> ,
<name3> = <name1> ( <name5> . name , <name4> )	call the function <name1> with 2 arguments <name5> .name and <name4> , substitute the result for <name3> .
except <name3> :	if <name3> exception is caught ,
continue	skip this loop iteration .
<name1> <name2> . PY2 :	<name1> <name2> .PY2 is true ,
<name1> = <name1> . decode ( <name2> . FILE_CHARSET )	call the method <name1> .decode with an argument <name2> .FILE_CHARSET , substitute the result for <name1> .
<name1> ( <name3> , <val2>   % ( <name4> . name , <name5> ) )	<name1> a tuple with 2 elements : <name3> and string <val2> , where '%s' is replaced with <name4> .name and <name5> , respective .
<name6> <name1> ( <name2> )	<name6> an <name1> exception with an argument <name2> .
<name6> <name1> . conf <name3> <name4>	<name6> <name1> .conf <name3> <name4> into default name space .
<name1> <name4> . template . base <name2> <name5>	<name1> <name4> .template .base <name2> <name5> into default name space .
<name2> <name5> . template . loader <name3> <name6>	<name2> <name5> .template .loader <name3> <name6> into default name space .
<name4> <name5> . utils . _os <name2> <name1>	<name4> <name5> .utils ._os <name2> <name1> into default name space .
<name6> <name5> ( <name1> ) :	derive the <name6> <name5> from the <name1> base <name6> .
<name6> = <name1>	<name6> is boolean <name1> .
def get_template_sources ( <name1> , <name6> , <name4> = <name3> ) :	define the method get_template_source with 3 arguments : <name1> , <name6> , <name4> set to <name3> .
<name3> not <name2> :	<name3> <name2> is false ,
<name5> = <name2> . TEMPLATE_DIRS	substitute <name2> .TEMPLATE_DIRS for <name5> .
<name2> <name4> <name5> <name3> :	<name2> every <name4> <name5> <name3> ,
<name4> :	<name4> ,
<name4> <name3> ( <name2> , <name6> )	call the function <name3> with 2 arguments <name2> and <name6> , <name4> the result .
except <name4> :	if <name4> exception is caught ,
<name4>	<name4> an exception .
except <name2> :	if <name2> exception is caught ,
pass	do nothing .
def <name6> ( <name5> , <name1> , <name3> = <name4> ) :	define the method <name6> with 3 arguments : <name5> , <name1> , <name3> set to <name4> .
<name2> = [ ]	<name2> is an empty list .
<name4> <name6> <name5> <name2> . get_template_sources ( <name1> , <name3> ) :	call the method <name2> .get_template_sources with 2 arguments <name1> and <name3> , <name4> every <name6> <name5> the result ,
<name2> :	<name2> ,
<name1> <name2> ( <name4> , 'rb'   ) as <name6> :	<name2> the file named <name4> in read mode , <name1> file descriptor renamed to <name6> perform ,
<name2> ( <name6> . <name5> ( ) . <name1> ( <name3> . FILE_CHARSET ) , filepath )	<name5> file <name6> , call the method <name1> on the result with an argument <name3> .FILE_CHARSET , <name2> tuple containing 2 elements ,
except <name3> :	previous result and filepath . if <name3> exception is caught ,
<name4> . <name1> ( <name6> )	<name1> <name6> to <name4> .
<name4> <name2> :	<name4> <name2> is true ,
error_msg = <val5> % <name1>	err_msg is a string <val5> , where '%s' is replaced with <name1> .
else :	if not ,
<name3> = <val6>	<name3> is a string <val6> .
<name1> <name6> ( <name4> )	<name1> an <name6> exception with an argument <name4> .
<name6> . is_usable = <name2>	<name6> .is_usable is boolean <name2> .
<name5> <name2> . http <name6> <name1>	<name5> <name2> .http <name6> <name1> into default name space .
<name2> <name5> . template <name4> <name6> , <name3> , <name1>	<name2> <name5> .template <name4> <name6> , <name3> and <name1> into default name space .
<name2> <name3> . utils <name4> <name6>	<name2> <name3> .utils <name4> <name6> into default name space .
<name2> <name4> ( <name3> ) :	derive the <name2> <name4> from the <name3> base <name2> .
pass	do nothing .
<name1> <name6> ( <name5> ) :	derive the <name1> <name6> from the <name5> base <name1> .
<name3> = [ <val1>   , <val4>   , <val5>   ]	<name3> is a list containing 3 strings : <val1> , <val4> and <val5> .
def <name1> ( <name3> , <name6> , <name2> = <name4> , <name5> = <name4> , <name1> = <name4> ) :	define the method <name1> with 5 arguments : <name3> , <name6> , <name2> set to <name4> , <name5> set to <name4> and <name1> set to <name4> .
<name6> . template_name = <name2>	substitute <name2> for <name6> .template_name .
<name2> . context_data = <name4>	substitute <name4> for <name2> .context_data .
<name1> . _post_render_callbacks = [ ]	<name1> ._post_render_callbacks is an empty list .
super ( <name6> , self ) . <name3> ( ''   , <name5> , <name2> )	call the <name3> method from the base class of the class <name6> , with 3 arguments : an empty string , <name5> and <name2> .
<name3> . _is_rendered = <name1>	<name3> ._is_rendered is boolean <name1> .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name3> = super ( <name6> , self ) . <name5> ( )	call the <name5> method from the base class of the class <name6> , substitute the result for <name3> .
<name5> not <name6> . _is_rendered :	<name5> <name6> ._is_rendered is false ,
<name2> <name1> ( 'The response content must be '    'rendered before it can be pickled.'   )	<name2> an <name1> exception with an argument string 'The response content must be rendered before it can be pickled.' .
<name6> <name2> <name1> <name3> . rendering_attrs :	<name6> every <name2> <name1> <name3> .rendering_attrs ,
<name1> <name2> <name5> <name6> :	<name1> <name2> is contained <name5> <name6> ,
del <name6> [ <name2> ]	delete entry under the <name2> key of <name6> dictionary .
<name5> <name4>	<name5> <name4> .
def <name6> ( <name3> , <name5> ) :	define the method <name6> with 2 arguments : <name3> and <name5> .
<name2> isinstance ( <name6> , ( <name4> , <name3> ) ) :	<name2> <name6> is an instance of <name4> or <name3> types ,
<name1> <name3> . select_template ( <name4> )	call the method <name3> .select_template with an argument <name4> , <name1> the result .
elif isinstance ( <name6> , <name2> . string_types ) :	otherwise is <name6> is <name2> .string_types instance ,
<name3> <name2> . get_template ( <name6> )	call the method <name2> .get_template with an argument <name6> , <name3> the result .
else :	if not ,
<name2> <name1>	<name2> <name1> .
def <name1> ( <name4> , <name5> ) :	define the method <name1> with 2 arguments : <name4> and <name5> .
<name2> isinstance ( <name4> , <name3> ) :	<name2> <name4> is an instance of <name3> ,
<name3> <name1>	<name3> <name1> .
else :	if not ,
<name2> <name3> ( <name6> )	<name2> an instance of <name3> class , created with an argument <name6> .
@  <name2>	<name2> decorator ,
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name4> = <name6> . resolve_template ( <name6> . template_name )	call the method <name6> .resolve_template with an argument <name6> .template_name , substitute the result for <name4> .
<name3> = <name4> . resolve_context ( <name4> . context_data )	call the method <name4> .resolve_context with an argument <name4> .context_data , substitute the result for <name3> .
<name5> = <name2> . render ( <name4> )	call the method <name2> .render with an argument <name4> , substitute the result for <name5> .
<name1> <name2>	<name1> <name2> .
def <name6> ( <name2> , <name4> ) :	define the method <name6> with 2 arguments : <name2> and <name4> .
<name3> <name6> . _is_rendered :	<name3> <name6> ._is_rendered is true ,
<name5> ( <name6> )	call the functoin <name5> with an argument <name6> .
else :	if not ,
<name3> . _post_render_callbacks . <name1> ( <name4> )	<name1> <name4> to <name3> ._post_render_callbacks list .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name5> = <name6>	substitute <name6> for <name5> .
<name3> not <name5> . _is_rendered :	<name3> <name5> ._is_rendered is false ,
<name2> . content = <name2> . rendered_content	substitute <name2> .rendered_content for <name2> .content .
<name1> <name5> <name4> <name2> . _post_render_callbacks :	<name1> every <name5> <name4> <name2> ._post_render_callbacks ,
<name4> = <name2> ( <name3> )	call the function <name2> with an argument <name3> , substitute the result for <name4> .
<name5> <name1> <name4> <name2> <name3> :	<name5> <name1> <name4> <name2> <name3> ,
<name4> = <name3>	substitute <name3> for <name4> .
<name6> <name2>	<name6> <name2> .
@  <name4>	<name4> decorator ,
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name4> <name1> . _is_rendered	<name4> <name1> ._is_rendered .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name5> not <name1> . _is_rendered :	<name5> <name1> ._is_rendered is false ,
<name6> <name3> ( 'The response content must be '    'rendered before it can be iterated over.'   )	<name6> an <name3> exception with an string 'The response content must be rendered before it can be iterated over.' .
<name6> super ( <name1> , self ) . __iter__ ( )	call the method __init__ from the base class of the class <name1> , <name6> the result .
@  <name2>	<name2> decorator ,
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name1> not <name2> . _is_rendered :	<name1> <name2> ._is_rendered is false .
<name3> <name1> ( 'The response content must be '    'rendered before it can be accessed.'   )	<name3> an <name1> exception with an sring 'The response content must be rendered before it can be accessed.' .
<name5> super ( <name4> , self ) . <name2>	<name5> the <name2> field of the base class of the class <name4> .
@  <name4> . setter	<name4> .setter decorator ,
def <name6> ( <name3> , <name4> ) :	define the method <name6> with 2 arguments : <name3> and <name4> .
<name1> . content . fset ( <name2> , <name4> )	call the method <name1> .content .fset with 2 arguments : <name2> and <name4> .
<name1> . _is_rendered = <name2>	<name1> ._is_rendered is boolean <name2> .
<name4> <name6> ( <name1> ) :	derive the <name4> <name6> from the <name1> base <name4> .
<name2> = <name3> . <name2> + [ <val5>   , <val6>   ]	append list with 2 strings : <val5> and <val6> to <name3> .rendering_attrs , substitute the result for <name2> .
def <name6> ( <name5> , <name1> , <name3> , <name4> = <name2> , <name6> = <name2> , status = <name2> , current_app = <name2> ) :	define the method <name6> with 7 arguments : <name5> , <name1> , <name3> , <name4> set to <name2> , <name6> set to <name2> ,
<name1> . _request = <name6>	status set to None and current_app set to None . substitute <name6> for <name1> ._request .
<name2> . _current_app = <name4>	substitute <name4> for <name2> ._current_app .
super ( <name3> , self ) . <name2> ( <name6> , <name1> , <name5> , <name4> )	call the <name2> method from the base class of the class <name3> , with 4 arguments : <name6> , <name1> , <name5> , <name4> .
def <name1> ( <name2> , <name4> ) :	define the method <name1> with 2 arguments : <name2> and <name4> .
<name1> isinstance ( <name4> , <name3> ) :	<name1> <name4> is an instance of <name3> class .
<name6> <name4>	<name6> <name4> .
<name3> <name6> ( <name5> . _request , <name4> , <name1> = <name5> . _current_app )	<name3> an instance of <name6> class , created with 3 arguments : <name5> ._request , <name4> and <name1> set to <name5> ._current_app .
<name6> <name2> ( <name3> ) :	derive the <name6> <name2> from the <name3> base <name6> .
<name2> = <name6>	<name2> is <name6> .
<name2> = <name4>	<name2> is <name4> .
<name5> = <name3> = <name4>	<name5> and <name3> are <name4> .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with 2 arguments : <name1> and <name6> .
<name6> <name4> . error_class ( <val5> % self . id )	<name6> an exception <name4> .error_class with an argument string <val5> ,
def <name4> ( <name3> , <name1> , <name6> ) :	where '%s' is replaced with <name3> .id . define the method <name4> with 3 arguments : <name3> , <name1> and <name6> .
<name2> <name1> . error_class ( <val5> % self . id )	<name2> an exception <name1> .error_class with an argument string <val5> ,
def <name2> ( <name5> ) :	where '%s' is replaced with <name5> .id . define the method <name2> with an argument <name5> .
<name5> <name1> . id	<name5> <name1> .id .
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
out = [ str ( <name3> ) <name5> <name3> <name2> [ <name1> . id , <name1> . first , <name1> . second ] <name6> <name3> <name4> <name3> <name5> ]	<name5> <name3> <name2> a list containing 3 elements : <name1> .id , <name1> .first and <name1> .second , <name6> <name3> <name4> <name3> <name5> ,
"<name2> <val4> + "" "" . <name3> ( <name1> ) + <val6>"	convert x into a string and append it to a list , substitute the resulting list for <name1> . <name3> elements of <name1> into a string , separated with whitespaces , append <val6> to it , append the result to <val4> , <name2> it .
def <name6> ( <name3> , <name2> ) :	define the function <name6> with 2 arguments <name3> and <name2> .
<name5> <name4> ( <name2> ) :	derive the <name5> <name4> from the base <name5> <name2> .
<name1> = <name3>	substitute <name3> for <name1> .
def <name4> ( <name6> , <name5> , <name1> ) :	define the method <name4> with 3 arguments <name6> , <name5> and <name1> .
<name1> . first = <name5>	substitute <name5> for <name1> .first .
<name4> . second = <name2> . expression ( <name3> )	call the method <name2> .expression with an argument <name3> , substitute it for <name4> .seconds .
<name1> <name2>	<name1> <name2> .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with 2 arguments <name1> and <name6> .
<name5> :	<name5> ,
<name5> <name2> ( <name6> , <name3> . first , <name3> . second )	call the function <name2> with 3 arguments : <name6> , <name3> .first and <name3> .second , <name5> the result .
except <name6> :	if <name6> exception is caught ,
<name5> <name6>	<name5> boolean <name6> .
<name3> <name6>	<name3> <name6> .
def <name4> ( <name3> , <name5> ) :	define the function <name4> with 2 arguments <name3> and <name5> .
<name6> <name3> ( <name4> ) :	derive the <name6> <name3> from the base <name6> <name4> .
<name1> = <name4>	substitute <name4> for <name1> .
def <name4> ( <name3> , <name5> ) :	define the method <name4> with 2 arguments <name3> and <name5> .
<name4> . first = <name5> . expression ( <name2> )	call the method <name5> .expression with an argument <name2> , substitute the result for <name4> .first .
<name5> . second = <name4>	<name5> .second is <name4> .
<name2> <name5>	<name2> <name5> .
def eval ( <name4> , <name6> ) :	define the method evalu with 2 arguments <name4> and <name6> .
<name3> :	<name3> ,
<name5> <name1> ( <name6> , <name3> . first )	call the function <name1> with 2 arguments : <name6> and <name3> .first , <name5> the result .
except <name6> :	if <name6> exception is caught ,
<name5> <name4>	<name5> boolean <name4> .
<name1> <name5>	<name1> <name5> .
<name4> = {   'or'   : infix ( <val1> , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) , 'and'   : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) , 'not'   : prefix ( 8 , lambda context , x : not x . eval ( context ) ) , 'in'   : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) , 'not in'   : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) , '='   : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '=='   : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '!='   : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) , '>'   : infix ( 10 , lambda context , x , y : x . eval ( context ) >  y . eval ( context ) ) , '>='   : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) , '<'   : infix ( 10 , lambda context , x , y : x . eval ( context ) <  y . eval ( context ) ) , '<='   : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) , }	<name4> is an dictionary with 12 initial entries : result of the function inflix called with 2 arguments , integer <val1> ,
<name5> <name4> , <name2> <name3> <name6> . items ( ) :	and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) or y .eval ( context ) is True , <name5> 'or' , result of the function inflix called with 2 arguments , integer 7 , and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) and y .eval ( context ) is True <name5> 'and' , result of the function prefix called with 2 arguments , integer 8 , and lambda function with 2 arguments context and x , returns boolean True if x .eval ( context ) is True <name5> 'not' , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x .eval ( context ) is contained <name3> y .eval ( context ) <name5> 'in' , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x .eval ( context ) is not contained <name3> y .eval ( context ) , <name5> 'not in' , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) equals y .eval ( context ) <name5> '=' , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) equals y .eval ( context ) <name5> '==' , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) doesnt equals y .eval ( context ) <name5> '!=' , result of the function inflix called with 2 arguments , integer 10 and , lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) is greater than y .eval ( context ) <name5> '>' , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) is greater than or equal to y .eval ( context ) <name5> '>=' , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) is smaller than y .eval ( context ) <name5> '<' , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x .eval ( context ) is smaller than or equal to y .eval ( context ) <name5> '<=' , call the function <name6> .items , <name5> every <name4> and <name2> <name3> result ,
<name4> . id = <name2>	substitute <name2> for <name4> .id .
<name5> <name6> ( <name2> ) :	derive the <name5> <name6> from the <name2> base <name5> .
<name2> = <val1>	<name2> is a string <val1> .
<name2> = <val5>	<name2> is integer <val5> .
def <name5> ( <name6> , <name4> ) :	define the method <name5> with 2 arguments : <name6> and <name4> .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .value .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name4> repr ( <name2> . value )	<name4> printable representation of <name2> .value .
def <name3> ( <name6> , <name2> ) :	define the method <name3> with 2 arguments : <name6> and <name2> .
<name6> <name3>	<name6> <name3> .
def <name3> ( <name5> , <name2> ) :	define the method <name3> with 2 arguments : <name5> and <name2> .
<name5> <name3> . value	<name5> <name3> .value .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name5> <val1> % ( <name4> . id , <name4> . value )	<name5> string <val1> , replace '%s' with <name4> .if and '%r' with <name4> .value .
<name6> <name5> ( <name4> ) :	derive the <name6> <name5> from the <name4> base <name6> .
<name2> = <val1>	<name2> is an integer <val1> .
def <name6> ( <name2> , <name3> ) :	define the method <name6> with 2 arguments : <name2> and <name3> .
<name3> <name6> . error_class ( <val5> )	<name3> an exception <name6> .error_class with an argument string <val5> .
<name1> = <name1> ( )	<name1> is an instance of <name1> class .
<name2> <name3> ( <name5> ) :	derive the <name2> <name3> from the <name5> base <name2> .
<name2> = <name6>	substitute <name6> for <name2> .
def <name3> ( <name5> , <name2> ) :	define the method <name3> with 2 arguments : <name5> and <name2> .
<name5> = len ( <name1> )	substitute length of <name1> for <name5> .
<name6> = [ ]	<name6> is an empty list .
<name5> = <val3>	<name5> is integer <val3> .
<name2> <name5> <  <name4> :	<name2> <name5> is smaller than <name4> ,
<name4> = <name2> [ <name6> ]	substitute <name6> - th element of <name2> for <name4> .
"<name1> <name5> == <val4> <name3> <name2> + <val6> <  <name1> <name3> tokens [ <name2> + <val6> ] == ""in"" :"	<name1> <name5> equals a string <val4> <name3> <name2> incremented by <val6> is lesser than <name1> ,
<name2> = <val5>	"and element of tokens at i incremented by 1 index equals a string ""in"" , <name2> is a string <val5> ."
<name6> += <val1>	increment <name6> by integer <val1> .
<name4> . <name1> ( <name3> . translate_token ( <name2> ) )	call the method <name3> .translate_token with an argument <name2> , <name1> the result to <name4> .
<name5> += <val3>	increment <name5> by integer <val3> .
<name6> . tokens = <name3>	substitute <name3> for <name6> .tokens .
<name5> . pos = <val6>	<name5> .pos is integer <val6> .
<name6> . current_token = <name6> . next_token ( )	call the method <name6> .next_token , substitute the result for <name6> .current_token .
def <name5> ( <name4> , <name6> ) :	define the method <name5> with 2 arguments : <name4> and <name6> .
<name4> :	<name4> ,
<name2> = <name4> [ <name3> ]	substitute <name4> dictionary element under <name3> key for <name2> .
except ( <name6> , <name2> ) :	if <name6> and <name2> exceptions are caught ,
<name2> <name6> . create_var ( <name3> )	call the function <name6> .create_var with an argument <name3> , <name2> the result .
else :	if not ,
<name6> <name2> ( )	call the function <name2> , <name6> the result .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name1> <name4> . pos >= len ( <name4> . tokens ) :	<name1> <name4> .pos is greater than or equal to <name4> .tokens ,
<name6> <name2>	<name6> <name2> .
else :	if not ,
<name1> = <name4> . tokens [ <name4> . pos ]	substitute element at <name4> .pos index of <name4> .tokens for <name1> .
<name4> . pos += <val2>	increment <name4> .pos by integer <val2> .
<name5> <name2>	<name5> <name2> .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name4> = <name6> . expression ( )	call the method <name6> .expression , substitute the result for <name4> .
<name6> <name2> . current_token <name4> <name5> <name1> :	<name6> <name2> .current_token <name4> <name5> <name1> ,
"<name1> <name2> . error_class ( ""Unused '%s' at end of if expression."" % <name2> . current_token . display ( ) )"	"<name1> an exception <name2> .error_class with an argument string """" Unused '%s' at end of if expression "" ,"
<name3> <name6>	where '%s' is replaced with result of the method self .current_token .display . <name3> <name6> .
def <name6> ( <name2> , <name3> = <val5> ) :	define the method <name6> with 2 arguments : <name2> and <name3> set to integer <val5> .
<name1> = <name6> . current_token	substitute <name6> .current_token for <name1> .
<name5> . current_token = <name5> . next_token ( )	call the method <name5> .next_token , substitute the result for <name5> .current_token .
<name5> = <name3> . nud ( <name6> )	call the method <name3> .nud with an argument <name6> , substitute the result for <name5> .
<name5> <name4> <  <name2> . current_token . lbp :	<name5> <name4> is smaller than <name2> .current_token .lbp ,
<name4> = <name1> . current_token	substitute <name1> .current_token for <name4> .
<name3> . current_token = <name3> . next_token ( )	call the method <name3> .next_token , substitute the result for <name3> .current_token .
<name4> = <name3> . led ( <name4> , <name1> )	call the method <name3> .led with 2 arguments <name4> and <name1> .
<name1> <name2>	<name1> <name2> .
def <name6> ( <name1> , <name5> ) :	define the method <name6> with 2 arguments : <name1> and <name5> .
<name1> <name5> ( <name3> )	<name1> an instance of <name5> class , created with an argumen <name3> .
<name1> <name6> <name2> <name4>	<name1> <name6> <name2> <name4> into default name space .
<name2> <name1> <name6> <name4>	<name2> <name1> <name6> <name4> into default name space .
<name5> <name6> . fixer_util <name3> <name1> , <name4> , <name2> , <name5>	<name5> <name6> .fixer_util <name3> <name1> , <name4> , <name2> and <name5> into default name space .
<name4> <name2> . pgen2 <name1> <name3>	<name4> <name2> .pgen2 <name1> <name3> into default name space .
<name1> <name4> . pytree <name5> <name6> , <name3>	<name1> <name4> .pytree <name5> <name6> and <name3> into default name space .
<name2> <name4> ( <name5> . BaseFix ) :	derive the <name2> <name4> from the base <name2> <name5> .BaseFix .
<name2> = <name4>	<name2> is boolean <name4> .
"<name1> = """" ""     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     "" """""	"<name1> is a string ""classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >"" ."
def <name1> ( <name2> , <name5> , <name3> ) :	define the method <name1> with 3 arguments : <name2> , <name5> and <name3> .
<name6> = <name3> [ <val1> ]	substitute value under the <val1> key of the <name3> dictionary for <name6> .
<name4> = <name5> ( <val3> , <name2> = <name6> . <name2> )	<name4> is an instance of a class <name5> , created with 2 arguments : string <val3> and <name2> as <name6> .prefix .
<name2> . replace ( <name1> )	call the method <name2> .replace with an argument <name1> .
<name4> = <name2> . clone ( )	call the method <name2> .clone , substitute the result for <name4> .
\ <name1> . prefix = '\\n'   + <name6> ( <name5> ) \	call the method <name6> with an argument <name5> , append the result to newline , substitute the result for <name1> .prefix .
"<name2> = <name1> ( syms . <name2> , [ <name3> ( <name4> . AT , ""@"" ) , Name ( 'python_2_unicode_compatible'   ) ] )"	"<name2> is an instance of class <name1> , created with 2 arguments : instance of <name3> class created with 2 arguments : <name4> .AT and ""@' ,"
<name2> = <name1> ( <name6> . <name2> , [ <name3> , <name4> ] , prefix = node . prefix )	and instance of Name class created with an argument string 'python_2_unicode_compatible' . <name2> is an instance of class <name1> , created with 3 arguments : <name6> .decorated , list with 2 arguments : <name3> and <name4> ,
<name3> . replace ( <name5> )	and prefix as <name3> .prefix . call the method <name3> .replace with an argument <name5> .
<name6> ( <val1>   , <val4>   , <name5> )	call the function <name6> with 3 arguments : string <val1> , string <val4> and <name5> .
<name2> <name5>	<name2> module <name5> .
<name4> stat	<name4> module sta .
<name4> <name1>	<name4> module <name1> .
<name5> <name1>	<name5> module <name1> .
<name6> <name5> . path <name2> <name3> , <name4> , <name1> , <name6> , <name5> , <name2> , <name3>	<name6> <name5> .path <name2> <name3> , <name4> , <name1> , <name6> , <name5> , <name2> and <name3> into default name space .
<name2> <name1> . utils . encoding <name3> <name5>	<name2> <name1> .utils .encoding <name3> <name5> into default name space .
<name1> <name2> . utils <name4> <name6>	<name1> <name2> .utils <name4> <name6> into default name space .
<name4> :	<name4> ,
<name3> = <name3>	substitute <name3> for <name3> .
except <name3> :	if <name3> exception is caught ,
<name6> <name3> ( <name5> ) :	derive <name6> <name3> from <name5> base <name6> .
pass	do nothing .
<name2> <name4> . PY2 :	<name2> <name4> .PY2 is true ,
<name6> = <name3> . getfilesystemencoding ( ) or <name3> . getdefaultencoding ( )	call the function <name3> .getfilesystemencoding if it evaluates to true , substitute its result for <name6> ,
<name4> <name6> . PY3 <name2> <name1> . name == <val3>   :	otherwise call the function sys .getdefaultencoding and substitute its result for fs_encoding . <name4> <name6> .PY3 is true <name2> <name1> .name equals a string <val3> ,
<name4> = <name1>	substitute <name1> for <name4> .
else :	if not ,
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
<name3> not <name6> ( <name2> ) :	call the function <name6> with an argument <name2> , <name3> it evaluates to false ,
<name3> = <name6> ( os . getcwdu ( ) , <name3> )	get the unicode representation of current working directory , <name6> it and <name3> into a string , substitute the result for <name3> .
<name1> <name2> ( <name4> )	call the function <name2> with an argument <name4> , <name1> the result .
def <name6> ( <name4> ) :	define the function <name6> with an argument <name4> .
<name6> <name1> . PY2 <name5> <name2> isinstance ( <name4> , <name1> . text_type ) :	<name6> <name1> .PY2 is true <name5> <name4> is <name2> an instance of <name1> .text_type type ,
<name4> <name2> . decode ( <name6> )	call the method <name2> .decode with an argument <name6> , <name4> the result .
<name4> <name3>	<name4> <name3> .
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
<name3> <name1> . PY2 <name4> <name6> isinstance ( <name5> , bytes ) :	<name3> <name1> .PY2 is true <name4> <name5> is <name6> an instance of byes type ,
<name2> <name1> . encode ( <name3> )	call the method <name1> .encode with an argument <name3> , <name2> the result .
<name4> <name5>	<name4> <name5> .
def <name6> ( <name4> , * <name3> ) :	define the function <name6> with 2 arguments <name4> and unpacked dictionary <name3> .
<name4> = <name6> ( <name4> )	call the function <name6> with an argument <name4> , substitute the result for <name4> .
<name2> = [ <name5> ( <name6> ) <name1> <name6> <name4> <name2> ]	<name2> is a list containing results of the function <name5> called with an argument <name6> , <name1> every <name6> <name4> <name2> .
<name3> = abspathu ( <name4> ( <name6> , * <name1> ) )	<name4> <name6> an unpacked list <name1> into a string , get the absolute path in unicode representation of the result , substitute the result for <name3> .
<name3> = abspathu ( <name2> )	get the unicode representation of the absolute path of <name2> , substitute it for <name3> .
<name3> ( not <name5> ( <name1> ) . startswith ( <name5> ( base_path + sep ) ) and <name5> ( <name1> ) != <name5> ( base_path ) and dirname ( <name5> ( base_path ) ) != <name5> ( base_path ) ) :	<name3> return value of the function <name5> called with an argument <name1> doesnt starts with result of the function <name5> ,
<name3> <name1> ( 'The joined path (%s) is located outside of the base '    'path component (%s)'   % ( <name2> , <name5> ) )	called with sep appended to <name5> as an argument and results of the function normcase called twice with <name2> , and base_pah are not equal and directory name of the result of the function normcase called with an argument <name5> , if not equal to the result of the function normcase called with an argument <name5> . <name3> an <name1> with an argument string 'The joined path (%s) is located outside of the base path component (%s)' ,
<name3> <name6>	where '%s' is replaced with <name6> and base_path . <name3> <name6> .
def <name4> ( <name3> , <name1> , <name5> ) :	define the function <name4> with 3 arguments <name3> , <name1> and <name5> .
<name2> , <name5> = <name6> [ : 2 ]	substitute fist and second element of <name6> for <name2> and <name5> , respectively .
<name3> <name5> <name1> <name4> <name2> <name6> <val3>   <name4> <name5> str ( <name1> ) :	<name3> <name5> <name1> <name4> <name2> <name6> string <val3> <name1> <name4> contained <name5> <name1> converted into a string ,
<name1>	<name1> an exception .
if ( ( <name2> . <name1> ( <name6> ) . <name5> &  <name1> . S_IREAD ) != <name1> . S_IREAD ) :	call the function <name2> .stat with an argument <name6> , perform bitwise and on 2 operands <name5> field of the result and <name1> .S_IREAD ,
<name1>	if it is not equal to stat .S_IREAD , <name1> an exception .
os . chmod ( <name5> , <name6> . S_IWRITE )	change access mode of <name5> to <name6> .S_IWRITE mode .
<name4> ( <name1> )	call the function <name4> with an argument <name1> .
def <name3> ( ) :	define the method <name3> .
<name2> = <name3> . mkdtemp ( )	call the function <name3> .mkdtemp , substitute the result for <name2> .
<name1> = os . <name5> . <name3> ( <name2> , <val4>   )	<name3> <name2> and sting <val4> into a file <name5> name , substitute it for <name1> .
<name1> = os . <name6> . <name5> ( <name2> , <val4>   )	<name5> <name2> and sting <val4> into a file <name6> name , substitute it for <name1> .
os . makedirs ( <name5> )	make a directory named <name5> .
<name6> :	<name6> ,
os . symlink ( <name5> , <name6> )	make a system symbolic link between <name5> and <name6> .
<name5> = <name4>	<name5> is boolean <name4> .
except ( <name4> , <name6> , <name2> ) :	if <name4> , <name6> or <name2> exceptions are caught ,
<name6> = <name3>	<name6> is boolean <name3> .
else :	if not ,
os . <name1> ( <name6> )	<name1> <name6> file .
<name5> :	<name5> perform ,
os . rmdir ( <name6> )	remove <name6> directory .
os . rmdir ( <name6> )	remove <name6> directory .
<name6> <name1>	<name6> <name1> .
<name3> <name6>	<name3> module <name6> .
<name6> <name5>	<name6> module <name5> .
<name3> <name1>	<name3> module <name1> .
<name2> <name5>	<name2> module <name5> .
<name4> <name1> . utils <name6> <name5>	<name4> <name1> .utils <name6> <name5> into default name space .
<name6> <name3> ( <name4> ) :	derive the <name6> <name3> from the <name4> base <name6> .
<name6> <name5> ( <name2> ) :	derive the <name6> <name5> from the <name2> base <name6> .
def <name6> ( <name5> , <name4> = ''   ) :	define the function <name6> with 2 arguments <name5> and <name4> set to empty string .
<name3> <name6> ( <name2> ) as <name1> :	instantiate <name6> class <name3> an argument <name2> , <name3> it renamed to <name1> , perform ,
<name2> . extract ( <name4> )	call the method <name2> .extract with an argument <name4> .
<name3> <name4> ( <name6> ) :	derive the <name3> <name4> from the <name6> base <name3> .
def <name1> ( <name4> , <name3> ) :	define the method <name1> with 2 arguments <name4> and <name3> .
<name3> . _archive = <name3> . _archive_cls ( <name1> ) ( <name1> )	call the method <name3> ._archive_cls with an argument <name1> , call the result with an argument <name1> , substitute the result for <name3> ._archive .
@  staticmethod	static method ,
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name3> = <name2>	<name3> is <name2> .
<name1> isinstance ( <name5> , <name6> . string_types ) :	<name1> <name5> is an instance of <name6> .string_types .
<name1> = <name5>	substitute <name5> for <name1> .
else :	if not ,
<name3> :	<name3> ,
<name5> = <name6> . name	substitute <name6> .name for <name5> .
except <name6> :	if <name6> exception is caught .
<name4> <name6> ( <val3> )	<name4> an <name6> exception with an argument string <val3> .
base , tail_ext = <name2> . path . splitext ( <name5> . lower ( ) )	convert <name5> to lowercase , use the result as an argument for the call to the function <name2> .path .splitext ,
<name5> = <name6> . <name3> ( <name2> )	substitute the result for base and <name2> . <name3> the value under the <name2> key of the <name6> dictionary , substitute it for <name5> .
<name2> not <name1> :	<name2> <name1> is false ,
<name2> , <name1> = <name4> . path . splitext ( <name2> )	call the method <name4> .path .splitext with an argument <name2> , substitute the result for <name2> and <name1> , respectively .
<name4> = <name2> . <name3> ( <name6> )	<name3> the value under the <name6> key of the <name2> dictionary , substitute it for <name4> .
<name2> not <name1> :	<name2> <name1> is false ,
<name4> <name3> ( <val5> % filename )	<name4> an <name3> exception with an argument string <val5> ,
<name4> <name2>	where '%s' is replaced with filename . <name4> <name2> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name6> <name2>	<name6> <name2> .
def <name2> ( <name3> , <name4> , <name5> , <name6> ) :	define the method <name2> with 4 arguments : <name3> , <name4> , <name5> and <name6> .
<name4> . close ( )	call the method <name4> .close .
def <name2> ( <name1> , <name4> = ''   ) :	define the method <name2> with 2 arguments : <name1> and <name4> set to an empty string .
<name5> . _archive . extract ( <name4> )	call the method <name5> ._archive .extract with an argument <name4> .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name6> . _archive . list ( )	call the method <name6> ._archive .list .
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
<name3> . _archive . close ( )	call the method <name3> ._archive .close .
<name6> <name3> ( <name2> ) :	derive the <name6> <name3> from the <name2> base <name6> .
def <name5> ( <name3> , <name2> ) :	define the method <name5> with 2 arguments <name3> and <name2> .
<name2> = str ( <name2> )	convert <name2> to a string , substitute the result for <name2> .
\ <name6> = <name6> . lstrip ( <val3>   ) . lstrip ( '\\\\'  ) \	\ strip <name6> of all leading <val3> and '\\\\'  characters , substitute the result for <name6> . \
\ <name3> <val2>   <name6> <name5> <name4> ( ( '\\\\' in path and path . find ( ' / ' ) < path . find ( ' \\\\ ' ) )  or ' \\\\'  not <name6> <name5> ) : \	\ <name3> <val2> is contained <name6> <name5> , <name4> only <name3> '\\\\' is contained in path and index of the first occurrence of ' / '  <name6> <name5> is lesser than , \
<name6> path . split ( '/'   , 1 )	\ index of the first occurrence of '\\\\' in path, or alternatively if ' \\\\ ' is not contained in path,   split path in two parts by ' / '  character , <name6> the result . \
\ elif '\\\\'  <name4> <name6> : \	\ otherwise if '\\\\'  is contained <name4> <name6> , \
\ <name6> <name1> . <name4> ( '\\\\'  , 1 ) \	\ <name4> <name1> in two parts by '\\\\'  string , <name6> the result . \
else :	if not ,
<name3> <name4> , ''	<name3> <name4> an an empty string .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with 2 arguments <name1> and <name6> .
<name3> = <name5>	<name3> is <name5> .
<name5> <name2> <name3> <name6> :	<name5> every <name2> <name3> <name6> ,
<name1> , <name4> = <name2> . split_leading_dir ( <name3> )	call the method <name2> .split_leading_dir with an argument <name3> , assign the result to <name1> and <name4> , respectively .
<name5> not <name3> :	<name5> <name3> is false ,
<name6> <name3>	<name6> boolean <name3> .
elif <name3> <name2> <name6> :	otherwise if <name3> <name2> <name6> ,
<name6> = <name2>	substitute <name2> for <name6> .
elif <name4> != <name2> :	otherwise if <name4> is not equal to <name2> ,
<name6> <name5>	<name6> boolean <name5> .
<name3> <name6>	<name3> boolean <name6> .
def extract ( <name3> ) :	define the method list with an argument <name3> .
<name1> <name4> ( <val5>   )	<name1> an <name4> exception with an argument string <val5> .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name4> <name2> ( <val6>   )	<name4> an <name2> exception with an argument string <val6> .
<name3> <name5> ( <name4> ) :	derive the <name3> <name5> from the <name4> base <name3> .
def <name3> ( <name5> , <name1> ) :	define the method <name3> with 2 arguments <name5> and <name1> .
<name6> . _archive = <name2> . open ( <name3> )	call the method <name2> .open with an argument <name3> , substitute the result for <name6> ._archive .
def <name3> ( <name2> , * <name4> , ** <name1> ) :	define the method __init__ with 3 arguments <name2> and unpacked <name3> <name4> and unpacked dictionary <name1> .
<name4> . _archive . <name3> ( * <name6> , ** <name5> )	define the method <name3> with 3 arguments : <name4> and unpacked <name3> <name6> and unpacked dictionary <name5> .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with 2 arguments <name1> and <name6> .
<name3> = [ <name6> <name4> <name6> <name1> <name5> . _archive . getmembers ( ) if <name6> . name != 'pax_global_header'   ]	<name3> is a list with elements <name6> <name4> every <name6> <name1> the result of the function <name5> ._archive .getmembers ,
<name1> = <name3> . has_leading_dir ( <name2> . name <name4> <name2> <name5> <name6> )	only if member .name is not equal to string 'pax_global_header' . call the method <name3> .has_leading_dir with an argument list , with elements <name2> .name <name4> every <name2> <name5> <name6> , substitute the result <name4> <name1> .
<name2> <name3> <name4> <name5> :	<name2> every <name3> <name4> <name5> ,
<name3> = <name5> . <name3>	substitute <name5> .name for <name3> .
<name6> <name3> :	<name6> <name3> is true ,
<name3> = <name1> . split_leading_dir ( <name3> ) [ 1 ]	call the method <name1> .split_leading_dir with an argument <name3> , substitute the first element of result for <name3> .
<name5> = os . <name4> . <name3> ( <name1> , <name6> )	<name3> <name1> and <name6> into a valid system <name4> , substitute the result for <name5> .
<name4> <name6> . isdir ( ) :	<name4> <name6> is a directory ,
<name4> <name6> <name2> not os . <name1> . exists ( <name6> ) :	<name4> <name6> is true <name2> <name6> <name1> doesnt exist ,
os . makedirs ( <name2> )	create directories from the elements in <name2> .
else :	if not ,
<name4> :	<name4> ,
<name6> = <name5> . _archive . extractfile ( <name4> )	call the method <name5> ._archive .extractfile with an argument <name4> , substitute the result for <name6> .
except ( <name6> , <name4> ) as <name5> :	if <name6> or <name4> , renamed to <name5> , exceptions are caught ,
   <name3> ( <val4> % ( <name1> , <name2> . <name1> , <name5> ) )	<name3> a string <val4> , where '%s' is substituted with : <name1> , <name2> .name and <name5> , respectively .
else :	if not ,
<name3> = os . path . <name3> ( <name5> )	get the directory name of <name5> , substitute it for <name3> .
<name1> <name2> <name6> not os . path . <name4> ( <name2> ) :	<name1> <name2> is true <name6> <name2> directory doesnt <name4> ,
     os . makedirs ( dirname )	create directories from the elements in filename .
<name1> <name4> ( <name3> , 'wb'   ) as <name5> :	<name4> <name3> file in write mode , <name1> the file descriptor renamed to <name5> , perform ,
     <name1> . copyfileobj ( <name2> , <name6> )	call the method <name1> .copyfileobj with 2 arguments : <name2> and <name6> .
<name2> :	<name2> ,
<name3> <name6> :	<name3> <name6> is true ,
     <name5> . close ( )	call the method <name5> .close .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name2> . _archive . close ( )	call the method <name2> ._archive .close .
<name4> <name6> ( <name2> ) :	derive the <name4> <name6> from the <name2> base <name4> .
def <name4> ( <name1> , <name2> ) :	define the method <name4> with 2 arguments <name1> and <name2> .
<name1> . _archive = <name6> . ZipFile ( file )	call the method <name6> .ZipFile with an argument <name1> , substitute the result for <name1> ._archive .
def <name3> ( <name5> , * <name4> , ** <name6> ) :	define the method <name3> with 3 arguments : <name5> and unpacked <name3> <name4> and unpacked dictionary <name6> .
<name3> . _archive . printdir ( * <name5> , ** <name2> )	call the method <name3> ._archive .printdir with 2 arguments : unpacked list <name5> and unpacked dictionary <name2> .
def <name4> ( <name3> , <name5> ) :	define the method <name4> with 2 arguments <name3> and <name5> .
<name1> = <name6> . _archive . <name1> ( )	call the method <name6> ._archive .namelist , substitute the result for <name1> .
<name5> = <name4> . has_leading_dir ( <name3> )	call the method <name4> .has_leading_dir with an argument <name3> , substitute the result for <name5> .
<name5> <name6> <name1> <name3> :	<name5> every <name6> <name1> <name3> ,
<name5> = <name4> . _archive . read ( <name6> )	call the method <name4> ._archive .read with an argument <name6> , substitute the result for <name5> .
<name6> <name1> :	<name6> <name1> is true ,
<name4> = <name3> . split_leading_dir ( <name4> ) [ 1 ]	call the method <name3> .split_leading_dir with an argument <name4> , substitute the second element of the result for <name4> .
<name6> = os . <name2> . <name5> ( <name4> , <name1> )	<name5> <name4> and <name1> into a file <name2> , substitute the result for <name6> .
<name6> = os . path . <name6> ( <name2> )	get the directory name of <name2> , substitute the result for <name6> .
<name6> <name1> <name4> not os . <name2> . <name5> ( <name1> ) :	<name6> <name1> is true <name4> <name1> <name2> doesnt <name5> ,
os . makedirs ( dirname )	create directories from the elements in filename .
\ <name6> <name4> . endswith ( ( <val5>   , '\\\\'  ) ) : \	\ <name6> <name4> ends with <val5> or with '\\\\' , \
<name5> not os . <name1> . <name2> ( <name3> ) :	<name5> <name3> <name1> doesnt <name2> ,
os . makedirs ( <name2> )	create directories from the elements in <name2> .
else :	if not ,
<name6> <name4> ( <name2> , 'wb'   ) as <name1> :	<name4> <name2> file in write mode , <name6> the file descriptor renamed to <name1> , perform ,
<name4> . <name3> ( <name1> )	<name3> <name1> bytes to <name4> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name2> . _archive . close ( )	call the method <name2> ._archive .close .
<name1> = {   <val4>   : <name5> , <val3>   : <name5> , <val6>   : <name5> , '.tgz'   : <name5> , '.tz2'   : <name5> , '.zip'   : ZipArchive , }	<name1> is a dictioanry with 6 initial elntries : <name5> for <val4> , <name5> for <val3> , <name5> for <val6> ,
         <name4> <name2> <name1> <name3>	<name4> <name2> <name1> <name3> into default name space .
<name6> <name4>	<name6> module <name4> .
<name5> <name2>	<name5> module <name2> .
<name4> <name6>	<name4> module <name6> .
<name6> <name2>	<name6> module <name2> .
<name4> <name2>	<name4> module <name2> .
<name3> <name1> . <name5> <name6> <name5>	<name3> <name1> .apps <name6> <name5> into default name space .
<name6> <name5> . conf <name3> <name4>	<name6> <name5> .conf <name3> <name4> into default name space .
<name3> <name4> . core . signals <name6> <name2>	<name3> <name4> .core .signals <name6> <name2> into default name space .
<name2> :	<name2> ,
<name5> <name4> . utils . six . moves <name3> <name6> <name2> <name1>	<name5> <name4> .utils .six .moves <name3> <name6> <name2> <name1> into default name space .
except ImportError :	if imoportError exception is caught ,
<name2> <name3> . utils . six . moves <name4> <name5> <name1> <name6>	<name2> <name3> .utils .six .moves <name4> <name5> <name1> <name6> into default name space .
<name6> :	<name6> ,
<name2> <name5>	<name2> <name5> module .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
<name1> :	<name1> ,
<name6> <name1>	<name6> <name1> module .
except <name5> :	if <name5> exception is caught ,
<name2> = <name1>	<name2> is <name1> .
<name2> = <name4>	<name2> is boolean <name4> .
<name2> :	<name2> ,
<name1> <name4>	<name1> <name4> module .
<name3> = <name4> . INotifyWrapper . create ( ) . <name6> ( )	call the method <name4> .INotifyWrapper .create , on the return value call the <name6> method , substitute the result for <name3> .
<name3> <name5> >= <val6> :	<name3> <name5> is greater or equal to integer <val6> .
<name2> = <name5>	<name2> is boolean <name5> .
os . <name3> ( <name5> )	<name3> <name5> file descriptor .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
<name1> = <name4>	<name1> is boolean <name4> .
<name3> = <val2>	<name3> is integer <val2> .
<name5> = <val3>	<name5> is integer <val3>
<name2> = { }	<name2> is an empty dictionary .
<name3> = ( <name4> . platform == <val2> )	<name3> is a tuple containing 1 initial boolean : True is <name4> .platform equals to string <val2> , False otherwise .
<name6> = [ ]	<name6> is an empty list .
<name4> = <name2> ( )	<name4> is an empty <name2> .
<name3> = [ ]	<name3> is an empty list .
def <name5> ( <name3> = <name4> ) :	define the function <name5> with an argument <name3> defaulting to boolean <name4> .
<name2> _cached_modules , <name1>	declare that we use <name2> variables cached_modules and <name1> in this function .
<name6> = <name3> ( <name2> . modules . values ( ) )	<name6> is a <name3> created from the elements of <name2> .modules .values method return value .
<name1> <name5> == <name4> :	<name1> <name5> equals to <name4> ,
<name6> <name1> :	<name6> <name1> is true ,
<name1> [ ]	<name1> an empty list .
else :	if not ,
<name5> <name2>	<name5> <name2> .
<name1> = <name6> - <name3>	subtract <name3> from <name6> , assign the result to <name1> .
<name4> = [ <name5> . __file__ <name6> <name5> <name2> <name1> if hasattr ( <name5> , <val3>   ) ]	create the list of paths from which <name5> module was included <name6> every <name5> <name2> <name1> , only is <name5> has <val3> attribute , substitute the resulting list <name6> <name4> .
<name2> not <name6> <name5> <name4> . USE_I18N :	<name2> <name6> is empty <name5> <name4> .USE_I18N is True ,
<name3> = [ os . <name6> . <name1> ( os . <name6> . dirname ( os . <name6> . dirname ( <name5> ) ) , <val4>   , <val2>   ) , <val2>   ]	return the directory name two directories up from the <name5> <name6> , <name1> it with <val4> and <val2> into valid <name6> , separated by '/' , <name3> is a list containing 2 elements : previous result and string <val2> .
<name2> <name5> <name6> <name1> ( <name4> ( <name3> . get_app_configs ( ) ) ) :	<name2> <name5> <name6> <name1> <name4> of <name3> .get_app_configs ( ) elements ,
<name5> . <name2> ( os . <name6> . <name3> ( <name1> . <name6> , <val4>   ) )	<name3> <name1> .path and <val4> into a valid directory <name6> , separated by '/' , <name2> it to <name5> .
<name1> . <name3> ( <name5> . LOCALE_PATHS )	<name3> <name1> list with <name5> .LOCALE_PATHS .
basedirs = [ os . <name5> . abspath ( <name2> ) for <name2> in basedirs if os . <name5> . isdir ( <name2> ) ]	replace all the elements of the <name2> list by its corresponding absolute directory <name5> , only is that directory exists .
<name3> <name2> <name4> <name1> :	<name3> every <name2> <name4> <name1> ,
<name5> <name4> , <name2> , <name6> <name3> os . walk ( <name1> ) :	<name5> every <name4> , <name2> and <name6> <name3> directory tree starting at the <name1> directory .
<name5> filename <name3> <name1> :	<name5> every filenam <name3> <name1> ,
<name1> <name3> . endswith ( <val5>   ) :	<name1> <name3> ends with string <val5> ,
     <name4> . <name2> ( os . <name1> . <name6> ( <name5> , <name3> ) )	<name6> <name5> and <name3> into a <name1> separated by '/' , <name2> it to <name4> .
<name5> <name1> :	<name5> <name1> is True ,
<name2> = <name3>	substitute <name3> for <name2> .
else :	if not ,
<name4> = <name6> + <name2> + <name3>	sum <name6> , <name2> and <name3> , store the result in <name4> .
<name4> = [ ]	<name4> is an empty list .
<name5> <name6> in <name2> :	<name5> every <name6> is <name2> ,
<name1> not <name4> :	<name1> <name4> is empty ,
continue	skip this loop iteration ,
<name3> <name6> . endswith ( <val2> ) <name5> <name6> . endswith ( <val4> ) :	<name3> <name6> ends with string <val2> <name5> it ends with <val4> ,
<name3> = <name3> [ : - 1 ]	truncate the last element of <name3> .
<name6> <name2> . endswith ( <val3> ) :	<name6> <name2> ends with string <val3> ,
<name1> = <name1> [ : - <val6> ] + <val5>	truncate last <val6> elements of <name1> and append it string <val5> .
<name1> os . path . <name4> ( <name3> ) :	<name1> file <name3> <name4> ,
<name6> . <name1> ( <name3> )	<name1> <name3> to <name6> .
<name4> = <name4> . union ( <name3> )	add elements from <name3> set to <name4> set .
<name3> += <name4>	append <name4> to <name3> .
<name5> <name2>	<name5> <name2> .
def reset_translations ( ) :	define the function reset_translation .
<name3> <name4>	<name3> <name4> module .
<name6> <name4> . utils . translation <name3> <name1>	<name6> <name4> .utils .translation <name3> <name1> into default namespace .
<name1> . _translations = { }	<name1> ._translations is an empty dictionary .
<name5> . _translations = { }	<name5> ._translations is an empty dictionary .
<name1> . _default = <name6>	<name1> ._default is <name6> .
<name5> . _active = <name4> . local ( )	call the <name4> .local method , assign the result to <name5> ._active .
def <name3> ( ) :	define the function <name3> .
<name5> <name2> ( <name3> . ProcessEvent ) :	derive the <name2> <name5> from the base <name5> <name3> .ProcessEvent .
<name3> = <name4>	<name3> is <name4> .
def <name2> ( <name1> , <name5> ) :	define the method <name2> with <name1> class instance and <name5> as arguments .
<name3> <name2> . path . endswith ( <val1>   ) :	<name3> <name2> .path ends with string <val1> ,
<name2> . modified_code = <name4>	<name2> .modified_code is <name4> .
else :	if not ,
<name4> . modified_code = <name6>	<name4> .modified_code is <name6> .
<name3> = <name2> . WatchManager ( )	call the <name2> .WatchManager method , assign the result to <name3> .
<name3> = <name4> . Notifier ( <name2> , <name5> ( ) )	call the method <name4> .Notifier with <name2> and <name5> ( ) as arguments , assign the result to <name3> .
def <name6> ( <name4> = <name3> , ** <name2> ) :	define the method <name6> with <name4> defaulting to <name3> and dictionary pair of elements <name2> .
<name5> <name1> <name3> getattr ( <name1> , <val2>   , False ) :	<name5> <name1> is true <name3> <name1> attribute <val2> is also True ,
<name1>	<name1> nothing .
mask = ( <name2> . IN_MODIFY |   <name2> . IN_DELETE |   <name2> . IN_ATTRIB |   <name2> . IN_MOVED_FROM |   <name2> . IN_MOVED_TO |   <name2> . IN_CREATE )	perform the bitwise or operation on the next 6 operands <name2> .IN_MODIFY <name2> .IN_DELETE , <name2> .IN_ATTRIB ,
<name4> <name1> <name6> <name2> ( <name5> = <name3> ) :	pyinotify .IN_MOVED_FROM , pyinotify .IN_MOVED_TO and pyinotify .IN_CREATE , store the result <name6> mask . <name4> every <name1> <name6> return value of the call to the function <name2> with argument <name5> set to boolean <name3> ,
<name6> . add_watch ( <name3> , <name5> )	call the method <name6> .add_watch with <name3> and <name5> as arguments .
<name6> . connect ( <name2> )	call the method <name6> .connect with argument <name2> .
<name6> ( )	call the method <name6> .
<name6> . check_events ( <name4> = <name5> )	call the method <name6> .check_events with argument <name4> set to <name5> .
<name4> . read_events ( )	call the method <name4> .read_events .
<name6> . process_events ( )	call the method <name6> .process_events .
<name2> . stop ( )	call the method <name2> .stop .
<name6> <name4> . modified_code	<name6> <name4> .modified_code .
def <name6> ( ) :	define the function <name6> .
<name2> <name4> , <name3>	use the <name2> variables <name4> and <name3> in this function .
<name4> <name2> <name5> <name1> ( ) :	<name4> every <name2> <name5> <name1> ( ) ,
<name6> = <name5> . <name6> ( <name3> )	call the <name5> .stat function with argument <name3> , store the return value in <name6> .
<name3> = <name2> . st_mtime	substitute <name2> .st_mtime for <name3> .
<name6> <name1> :	<name6> <name1> is true ,
<name1> -= <name5> . st_ctime	decrement <name1> by <name5> .st_ctime .
<name3> <name2> <name1> <name6> <name4> :	<name3> <name2> is <name1> contained <name6> <name4> ,
<name2> [ <name3> ] = <name1>	substitute <name1> for the value under the <name3> key of <name2> dictionary .
continue	skip this loop iteration .
<name5> <name6> != <name2> [ <name1> ] :	<name5> <name6> is different than the value of dictionary <name2> under the key <name1> ,
<name1> = { }	<name1> is an empty dictionary .
<name2> :	<name2> ,
del <name2> [ <name2> . index ( <name6> ) ]	remove the first occurrence of the <name6> value in the <name2> list .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
<name5> <name6> <name4> <name3> . endswith ( <val2>   ) else <name1>	<name4> <name3> ends with string <val2> <name5> <name6> , otherwise <name5> <name1> .
<name6> <name3>	<name6> boolean <name3> .
def <name4> ( <name6> ) :	define the function <name4> with argument <name6> .
def <name5> ( * <name4> , ** <name1> ) :	define the function <name5> with list <name4> , and dictionary pair of values <name1> as arguments .
<name3> :	<name3> ,
<name5> ( * <name4> , ** <name3> )	call the function <name5> with list of arguments <name4> and dictionary of argument values <name3> .
except ( <name3> , <name2> , <name1> , <name6> , <name5> , AttributeError ) :	if <name3> , <name2> , <name1> , <name6> , <name5> or AttributeErrorexception is caught ,
<name1> , <name5> , <name3> = <name6> . exc_info ( )	call the <name6> .exc_info function , assign the result to <name1> , <name5> and <name3> , respectively .
<name1> getattr ( <name2> , <val4>   , <name6> ) <name3> <name6> :	<name1> <val4> attribute of <name2> <name3> <name6> ,
<name2> = <name1> . extract_tb ( <name4> ) [ - 1 ] [ 0 ]	call the <name1> .extract_tb method with argument <name4> , substitute the first element of last row of the result to <name2> .
else :	if not ,
<name6> = <name3> . <name6>	substitute <name3> .filename for <name6> .
<name4> <name2> <name3> <name5> <name1> :	<name4> <name2> is <name3> contained <name5> <name1> ,
<name5> . <name4> ( <name2> )	<name4> <name2> to <name5> .
<name5>	<name5> an exception .
<name6> <name4>	<name6> <name4> .
def <name6> ( ) :	define <name6> function .
<name1> <name4> :	<name1> <name4> is true ,
<name1> = <name3> . stdin	substitute <name3> .stdin for <name1> .
<name3> <name6> . isatty ( ) :	evaluate the <name6> .isatty method , <name3> the result is true ,
<name5> = <name4> . tcgetattr ( <name3> )	call the method <name4> .tcgetattr with argument <name3> , substitute the result for <name5> .
<name6> not <name2> [ 3 ] &  <name1> . ECHO :	<name6> fourth element of <name2> and <name1> .ECHO are both true ,
<name5> [ 3 ] | = <name6> . ECHO	perform binary or for operands : fourth element of_attr_list and <name6> .ECHO , store the result in fourth element of <name5> .
<name2> hasattr ( <name4> , <val1>   ) :	<name2> <name4> has an attribute <val1> ,
<name2> = <name5> . <name5> ( <name5> . SIGTTOU , <name5> . SIG_IGN )	call the <name5> .signal method with <name5> .SIGTTOU and <name5> .SIG_IGN as arguments , store the result in <name2> .
else :	if not ,
<name4> = <name6>	<name4> is <name6> .
<name1> . tcsetattr ( <name5> , <name1> . TCSANOW , <name4> )	call the method <name1> .tcsetattr with <name5> , <name1> .TCSANOW and <name4> , as arguments .
<name4> <name6> <name1> <name5> <name3> :	<name4> <name6> <name1> <name5> <name3> ,
<name1> . <name1> ( <name1> . SIGTTOU , <name3> )	call the method <name1> .signal with <name1> .SIGTTOU and <name3> , as arguments .
def <name4> ( ) :	define the function <name4> .
<name4> ( )	call the function <name4> .
<name3> <name2> :	<name3> <name2> is true ,
<name3> = <name2>	substitute <name2> for <name3> .
else :	if not ,
<name5> = <name3>	substitute <name3> for <name5> .
<name5> <name2> :	<name5> <name2> is true .
<name4> = <name3> ( )	assign the return value of the function <name3> to <name4> .
<name5> <name4> == <name1> :	<name5> <name4> equals to <name1> ,
<name4> . exit ( <val1> )	call the function <name4> .exit with argument integer <val1> .
elif <name1> == <name4> :	otherwise id <name1> equals to <name4> ,
<name5> ( )	call the function <name5> .
<name1> . sleep ( <val3> )	call the function <name1> .sleep with an argument integer <val3> .
def <name2> ( ) :	define the function <name2> .
while True :	endless loop ,
<name2> = [ <name3> . executable ] + [ <val5>   % <name6> <name4> <name6> <name1> <name3> . warnoptions ] + <name3> . argv	<name1> string <val5> replace '%s' with <name6> <name4> every <name6> <name1> <name3> .warnoptions , put the result into a list , append the list to a list containing <name3> .executable , append <name3> .argv to the end of the resulting list , substitute the result <name4> <name2> .
<name6> <name4> . platform == <val1> :	<name6> <name4> .platform equals to string <val1> ,
<name6> = <name5> . environ . copy ( )	call the method <name5> .environ .copy , substitute the result for <name6> .
<name1> [ <val5> ] = <val6>	value under the <val5> key of <name1> dictionary is a string <val6> .
<name6> = <name1> . spawnve ( <name1> . P_WAIT , <name5> . executable , <name2> , <name3> )	call the function <name1> .spawnve with <name1> .P_WAIT , <name5> .executable , <name2> and <name3> as arguments , substitute the result for <name6> .
<name5> <name6> != <val3> :	<name5> <name6> is not equal to integer <val3> .
<name3> <name1>	<name3> <name1> .
def <name5> ( <name4> , args , <name3> ) :	define the function <name5> with <name4> and <name3> as arguments .
<name5> <name6> . environ . get ( <val1> ) == <val4> :	<name5> value under the <val1> key of the <name6> .environ dictionary equals to string <val4> ,
<name6> . start_new_thread ( <name1> , <name2> , <name4> )	call the function <name6> .start_new_thread with <name1> , <name2> and <name4> as arguments .
<name3> :	<name3> ,
<name6> ( )	call the function <name6> .
except <name4> :	if <name4> exception is caught ,
pass	do nothing .
else :	if not ,
<name3> :	<name3> ,
<name2> = <name3> ( )	call the function <name3> , substitute the return value for <name2> .
<name3> <name1> <  <val5> :	<name3> <name1> is lesser than integer <val5> ,
<name6> . kill ( <name6> . getpid ( ) , - <name3> )	call the function <name6> .kill with <name6> .getpid ( ) and negative <name3> as arguments .
else :	if not ,
<name6> . exit ( <name5> )	call the function <name6> .exit with argument <name5> .
except <name4> :	if <name4> exception is caught ,
pass	do nothing ,
def <name5> ( <name6> , <name1> , <name4> ) :	define the function <name5> with <name6> , <name1> and <name4> as arguments .
<name3> <name5> <name6> <name1>	<name3> <name5> <name6> <name1> into default name space .
<name4> . start_new_thread ( <name6> , <name2> )	call the function <name4> .start_new_thread with <name6> and <name2> as arguments .
while True :	endless loop ,
<name2> <name6> ( ) :	<name2> return value of the <name6> function is true ,
<name2> <name1>	<name2> an <name1> exception ,
<name4> . sleep ( <val3> )	call the function <name4> .sleep with argument integer <val3> .
def <name1> ( <name5> , <name6> = <name4> , <name3> = <name4> ) :	define the function <name1> , with <name5> , <name6> defaulting to <name4> and <name3> defaulting to <name4> as arguments .
<name6> <name1> <name4> <name5> :	<name6> <name1> <name4> <name5> ,
<name6> = ( )	<name6> is a empty tuple .
<name2> <name4> <name1> <name5> :	<name2> <name4> <name1> <name5> ,
<name3> = { }	<name3> is a empty dictionary .
<name5> <name2> . platform . startswith ( <val3>   ) :	<name5> <name2> .platform starts with string <val3> ,
<name5> = <name6>	substitute <name6> for <name5> .
else :	if not ,
<name3> = <name5>	substitute <name5> for <name3> .
<name4> = <name6> ( <name5> )	call the function <name6> with argument <name5> , substitute the result for <name4> .
<name5> ( <name1> , <name3> , <name4> )	call the function <name5> with <name1> , <name3> and <name4> as arguments .
<name3> = <val6>	<name3> is a string <val6> .
<name5> = <val1>	<name5> is a string <val1> .
<name3> = <val5>	<name3> is a string <val5> .
<name4> = <val2>	<name4> is a string <val2> .
<name5> = <val4>	<name5> is string <val4> .
<name1> = <name2> + <val6>	append string <val6> to the <name2> , substitute it for <name1> .
<name1> BaseConverter ( <name5> ) :	derive <name1> BaseCOnverter from <name5> base <name1> .
<name6> = <val3>	<name6> is a string <val3> .
def __init__ ( <name2> , <name4> , <name5> = <val6>   ) :	define the initialization function with <name2> class instance , <name4> and <name5> defaulting to <val6> as arguments .
<name3> . <name6> = <name6>	substitute <name6> for <name3> .sign .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .digits .
<name2> <name6> <name4> <name5> . digits :	<name2> <name6> is contained <name4> <name5> .digits ,
<name6> <name5> ( <val3>   )	<name6> <name5> exception with string <val3> as an argument .
def <name6> ( <name3> ) :	define private method <name6> with argument <name3> .
<name6> <val3> % ( len ( <name5> . digits ) , <name5> . digits )	replace '%s' in the string <val3> with length of <name5> .digits and <name5> .digits , respectively , <name6> the string .
def <name6> ( <name4> , <name5> ) :	define the method <name6> with <name4> class instance and <name5> as arguments .
<name3> , <name6> = <name1> . convert ( <name4> , <name1> . decimal_digits , <name1> . digits , <val2>   )	call the <name1> .convert method with <name4> , <name1> .decimal_digits , <name1> .digits and <val2> as arguments , assign the result to the <name3> and <name6> , respectively .
<name5> <name4> :	<name5> <name4> is true ,
<name6> <name4> . sign + <name5>	append <name5> to the <name4> .sign , <name6> the result .
<name2> <name3>	<name2> <name3> .
def <name3> ( <name2> , <name4> ) :	define the <name3> method with <name2> class instance and <name4> as arguments .
<name3> , <name4> = <name5> . convert ( <name2> , <name5> . digits , <name5> . decimal_digits , <name5> . sign )	call the <name5> .convert method with <name2> , <name5> .decimal , <name5> .decimal_digits and <name5> .sign as arguments , assign the result to the <name3> and <name4> , respectively .
<name6> <name1> :	<name6> <name1> is true ,
<name2> = <val4>   + <name2>	append <name2> to the <val4> , substitute it for <name2> .
<name3> int ( <name1> )	convert <name1> to an integer , <name3> it .
def <name2> ( <name6> , <name3> , <name1> , <name4> , <name5> ) :	define <name2> method with <name6> class instance , <name3> , <name1> , <name4> and <name5> as arguments .
<name5> str ( <name6> ) [ 0 ] == <name2> :	convert <name6> to string , <name5> first element equals to <name2> ,
<name4> = str ( <name4> ) [ 1 : ]	convert <name4> to a string , truncate first element .
<name3> = <val4>	<name3> is integer <val4> .
else :	if not ,
<name2> = <val6>	<name2> is integer <val6> .
<name4> = <val5>	<name4> is integer <val5> .
<name5> <name1> <name4> str ( <name3> ) :	<name5> every <name1> <name4> <name3> coverted to a string ,
<name5> = <name5> * len ( <name6> ) + <name6> . index ( <name1> )	multiply <name5> by length of <name6> add the return value of method <name6> .index with <name1> argument , substitute the result for <name5> .
<name3> <name6> == <val1> :	<name3> <name6> equals to integer <val1> ,
<name3> = <name5> [ 0 ]	substitute first element of <name5> for <name3> .
else :	if not ,
<name5> = ''	<name5> is an empty string .
<name1> <name6> >  0 :	<name1> <name6> is greater than zero ,
<name1> = <name4> % len ( <name2> )	calculate reminder of division of <name4> by length <name2> , substitute it for <name1> .
<name6> = to_digits [ <name2> ] + <name6>	increment <name6> by element of to_digit at the <name2> index .
<name3> = int ( <name3> // len ( <name1> ) )	divide <name3> by length of <name1> , convert floor value of the result to an integer , substitute it for <name3> .
<name3> <name4> , <name2>	<name3> <name4> and <name2> .
<name4> = <name5> ( <name6> )	call the <name5> function with <name6> as argument , store the result in <name4> .
<name4> = <name3> ( <name2> )	call the <name3> function with <name2> as argument , store the result in <name4> .
<name3> = <name5> ( <name4> )	call the <name5> function with <name4> as argument , store the result in <name3> .
<name2> = <name6> ( <name3> )	call the <name6> function with <name3> as argument , store the result in <name2> .
<name6> = <name4> ( <name3> )	call the <name4> function with <name3> as argument , store the result in <name6> .
<name2> = <name4> ( <name3> , <name5> = <val1>   )	call the <name4> function with <name3> and <name5> set to <val1> as arguments , store the result in <name2> .
<name6> <name4> <name2> <name5>	<name6> module <name4> <name2> <name5> to default name space .
<name2> <name4>	<name2> <name4> module .
<name3> <name5>	<name3> <name5> module .
<name3> <name1>	<name3> <name1> module .
<name1> <name3> . conf <name6> <name5>	<name1> <name3> .conf <name6> <name5> object to the default name space .
<name2> <name3> . core . cache <name6> <name5>	<name2> <name3> .core .cache <name6> <name5> to the default name space .
<name4> <name3> . utils . encoding <name5> <name2> , <name6> , <name1>	<name4> <name3> .utils <name5> <name2> , <name6> , <name1> to the default name space .
<name1> <name2> . utils . http <name3> <name5>	<name1> <name2> .utils .http <name3> <name5> to the default name space .
<name5> <name1> . utils . timezone <name6> <name3>	<name5> <name1> .utils .timezone <name6> <name3> to the default name space .
<name2> <name6> . utils . translation <name3> <name4>	<name2> <name6> .utils .translation <name3> <name4> to the default name space .
\ <name2> = re . <name3> ( r <val5>   ) \	\ <name3> regular expression based on the string <val5> and assign the result to <name2> . \
def <name2> ( <name1> , ** <name4> ) :	define function <name2> , with <name1> and dictionary set of arguments , <name4> , as arguments .
def <name5> ( <name6> ) :	define function <name5> with <name6> as an argument .
<name5> = <name6> . <name4> ( <val2>   , 1 )	<name4> string <name6> once , with <val2> sign as a delimiter , assign the resulting list to the <name5> .
<name4> len ( <name5> ) >  <val6> :	<name4> length of <name5> is greater than integer <val6> ,
<name6> ( <name4> [ 0 ] . lower ( ) , <name4> [ 1 ] )	<name6> first element of <name4> converted to lowercase and second element of <name4> , as a tuple .
else :	if not ,
<name6> ( <name1> [ 0 ] . lower ( ) , <name4> )	<name6> first element of <name1> converted to lowercase and boolean <name4> , as a tuple .
def dictvalue ( <name6> ) :	define function dictvale , with an argument <name6> .
<name6> <name4> [ 1 ] <name3> <name2> :	<name6> second element of <name4> <name3> boolean <name2> ,
<name4> <name2> [ 0 ]	<name4> first element of <name2> .
else :	if not ,
<name3> '%s=%s'   % ( <name5> [ 0 ] , <name5> [ 1 ] )	<name3> string first element of <name5> , '=' , second element of <name5> .
<name5> <name1> . has_header ( <val4>   ) :	<name5> call to the method <name1> .has_header with string <val4> as an argument returns boolean True ,
cc = cc_delim_re . <name2> ( <name4> [ <val5>   ] )	find the value of <name4> under the key <val5> , use it as a delimiter to <name2> string ss_delim_re ,
<name2> = dict ( <name6> ( <name5> ) <name4> <name5> <name3> <name2> )	assign the result to <name2> . <name2> is a dictionary populated with items by calling function <name6> with <name5> as argument , <name4> every <name5> <name3> <name2> .
else :	if not ,
<name1> = { }	<name1> is an empty dictionary .
<name4> <val2>   in <name5> <name1> <val3>   in <name6> :	<name4> <name5> contains item <val2> <name1> <name6> contains item <val3> ,
kwargs [ 'max_age'   ] = min ( int ( <name5> [ <val4>   ] ) , kwargs [ 'max_age'   ] )	convert to integer value of dictionary <name5> under the key <val4> ,
<name2> <val4>   in <name5> <name3> <val6>   in <name1> :	<name2> it is smaller than the value of dictionary <name1> under the key 'max_age' , substitute <name1> value under the key 'max-age' by it . <name2> <name5> contains item <val4> <name3> <name1> contains item <val6> ,
del <name5> [ <val4>   ]	delete dictionary item <val4> from <name5> .
elif <val5>   in <name6> <name1> <val4>   in <name2> :	if <name6> contains item <val5> <name1> <name2> contains item <val4> ,
del <name6> [ <val1>   ]	delete dictionary item <val1> from <name6> .
<name4> ( <name5> , <name3> ) <name2> <name1> . <name6> ( ) :	<name4> every <name5> and <name3> <name2> <name6> of dictionary <name1> , respectively ,
<name2> [ <name4> . <name5> ( <val1>   , <val3>   ) ] = v	<name5> all occurrences of symbol <val1> in string <name4> with symbol <val3> , use new string as key to find a value in dictionary <name2> ,
<name4> = ', '   . join ( <name5> ( <name3> ) <name1> <name3> <name6> <name4> . items ( ) )	replace this value with v . call the function <name5> with <name3> as argument <name1> every <name3> <name6> values of dictionary <name4> ,
<name6> [ <val1>   ] = <name4>	join the resulting sequence in a string with comma as separator , assign the string to <name4> . substitute <name6> dictionary value under the key <val1> for <name4> .
def <name4> ( <name2> ) :	define function <name4> with <name2> as an argument .
<name3> not <name1> . has_header ( <val2>   ) :	<name3> the result to the method call <name1> .has_header , with string <val2> as an argument is boolean False ,
<name3>	<name3> from the function
<name6> = dict ( <name1> ( <name2> ) for <name2> in cc_delim_re . split ( response [ 'Cache-Control'   ] ) )	<name6> is a dictionary populated with items by calling function <name1> with <name2> as an argument ,
<name1> <val4>   <name6> <name2> :	for every el <name6> split string cc_delim_re , with delimiter being the value of dictionary response under the key 'Cache-Control' . <name1> <name2> contains item <val4> ,
<name4> :	<name4> ,
<name4> int ( <name2> [ <val6>   ] )	convert to integer the value of dictionary <name2> under the key <val6> , and <name4> it
except ( <name3> , <name1> ) :	if exception <name3> or <name1> is raised ,
pass	do nothing .
def <name6> ( <name3> ) :	define the function <name6> , with <name3> as an argument .
<name6> not <name3> . streaming :	<name6> <name3> .streaming is boolean False ,
<name3> <name2>	and store it in the value of the dictionary <name2> under the key 'ETag' . <name3> <name2>
def <name6> ( <name1> , <name4> = <name2> ) :	define the function <name6> , with <name1> and <name4> with <name2> as default value , as arguments .
<name1> <name2> is <name4> :	<name1> <name2> equals to <name4> ,
<name3> = <name1> . CACHE_MIDDLEWARE_SECONDS	substitute <name1> .CACHE_MIDDLEWARE_SECONDS for <name3> .
<name2> <name3> <  <val6> :	<name2> <name3> is lesser than integer <val6> ,
<name4> = <val3>	substitute integer <val3> for <name4> .
<name5> <name6> . USE_ETAGS <name4> not <name2> . has_header ( <val1>   ) :	<name5> <name6> .USE_ETAGS is True <name4> function call <name2> .has_header with string <val1> as argument returns boolean False ,
<name4> hasattr ( <name1> , <val5>   ) <name6> <name2> ( <name1> . render ) :	<name4> object <name1> has an attribute <val5> <name6> <name4> <name1> .render is <name2> object ,
<name5> . add_post_render_callback ( <name1> )	call the method <name5> .add_post_render_callback with <name1> as argument .
else :	if not ,
<name4> = <name1> ( <name4> )	substitute return value of call to the function <name1> with <name4> as an argument , for <name4> .
<name1> not <name2> . has_header ( <val6>   ) :	<name1> call to the function <name2> .has_header with string <val6> as an argument returns boolean False ,
response [ 'Last-Modified'   ] = <name4> ( )	call the function <name4> with no arguments , and substitute its return value
<name2> not <name4> . has_header ( <val6>   ) :	for value of dictionary <name4> under the key 'Last-Modified' . <name2> call to the function <name4> .has_header with <val6> as argument returns boolean False ,
response [ 'Expires'   ] = <name3> ( <name6> . <name6> ( ) + <name1> )	sum return value of the function call <name6> .time ( ) and <name1> , use it as an argument for function call of <name3> ,
<name1> ( <name5> , <name2> = <name3> )	and substitute the return value for value under the key 'Expires' of dictionary <name5> . call the function <name1> , with <name5> and <name2> set to <name3> as arguments .
def <name1> ( <name5> ) :	define function <name1> , with <name5> as an argument .
patch_response_headers ( <name5> , <name2> = - <val3> )	call the function patch_response with <name5> and <name2> decremented by integer <val3> as arguments .
def <name5> ( <name6> , <name2> ) :	define function <name5> , with <name6> and <name2> as arguments .
"      Adds ( or updates ) the Vary header in the given HttpResponse object . newheaders is a list of header names that should be in ""Vary"" . Existing headers in ""Vary"" aren ' t removed . """" """	doctring
<name2> <name4> . has_header ( <val1>   ) :	<name2> call to the function <name4> .has_header with argument <val1> returns boolean True ,
<name2> = <name3> . <name1> ( <name6> [ <val5>   ] )	<name1> the string <name3> with value under the key <val5> of <name6> dictionary as delimiter , substitute result for <name2> .
else :	if not ,
<name2> = [ ]	<name2> is an empty list .
<name4> = <name3> ( <name6> . lower ( ) <name5> <name6> <name1> <name2> )	<name4> is a <name3> of lowercase headers <name5> every <name6> <name1> <name2> .
additional_headers = [ <name3> for <name3> <name4> <name6> <name2> <name3> . lower ( ) <name5> <name4> <name1> ]	put every header <name4> <name6> <name4> a list , only <name2> <name3> converted to lowercase does <name5> exist <name4> <name1> ,
response [ 'Vary'   ] = ', '   . <name3> ( <name2> + <name5> )	substitute this list for <name5> . <name3> all of the elements of <name2> and <name5> in a string delimited by a comma ,
def <name2> ( <name3> , <name5> ) :	substitute it for value of dictionary <name3> under the key 'Vary' . define function <name2> , with <name3> and <name5> as arguments .
<name6> not <name4> . has_header ( <val5>   ) :	<name6> return value of function <name4> .has_header with string <val5> as argument is boolean False ,
<name4> <name6>	<name4> boolean <name6> .
<name3> = <name5> . <name1> ( <name2> [ <val4>   ] )	<name1> string <name5> by value of dictionary <name2> under the key <val4> as a delimiter , substitute it for <name3> .
<name3> = <name4> ( <name2> . lower ( ) <name6> <name2> <name1> <name5> )	<name3> is a <name4> containing lowercase strings <name2> <name6> every <name2> <name1> <name5> .
<name4> <name2> . lower ( ) in <name6>	check if lowercase <name2> exists is <name6> , <name4> the boolean result .
def <name1> ( <name5> , <name4> ) :	define function <name1> , with <name5> and <name4> as arguments .
<name4> <name5> . USE_I18N <name2> <name5> . USE_L10N :	<name4> eather one of <name5> .USE_I18N <name2> <name5> .USE_L10N is True ,
cache_key += '.%s'   % <name5> ( <name2> , <val6>   , <name1> ( ) )	call the function <name5> with <name2> , string <val6> and function <name1> as arguments ,
<name5> <name4> . USE_TZ :	append the result at the end of string '.' , append it all at the end of string cache_key . <name5> <name4> .USE_TZ is True ,
tz_name = <name1> ( <name5> ( ) , <name4> = <val2>   )	call the function <name1> , with the function <name5> and <name4> set to string <val2> as arguments ,
cache_key += '.%s'   % <name3> . encode ( <val2>   , <val5>   ) . <name4> ( <val2>   ) . <name6> ( ' '   , '_'   )	<name6> the result for <name3> . call the method <name3> .encode with the arguments <val2> and <val5> , call the method <name4> on the result with <val2> as argument ,
<name3> <name1>	in the resulting string replace all occurrences of ' ' with '_' and append it to the end of <name1> . <name3> <name1> .
def <name1> ( <name4> , <name3> , <name5> , <name2> ) :	define function <name1> , with <name4> , <name3> , <name5> and <name2> as arguments .
<name6> = <name2> . <name4> ( )	<name6> is an <name2> object , for calculating hash function with <name4> algorithm .
<name2> <name4> <name6> <name3> :	<name2> every <name4> <name6> <name3> ,
value = <name5> . META . get ( <name4> , <name2> )	call method <name5> .META .get with arguments <name4> and <name2> .
<name3> <name2> <name6> <name4> <name5> :	<name3> <name2> <name6> <name4> <name5> ,
<name5> . update ( <name1> ( <name6> ) )	call function <name1> with <name6> as argument , use the result to as the result for the call to the methgod <name5> .update .
url = hashlib . md5 ( force_bytes ( <name2> ( <name4> . build_absolute_uri ( ) ) ) )	call <name2> with return value of the <name4> .build_absolute_uri method , us the result as the argument for the call to the
cache_key = <val4>   % ( <name3> , <name5> , <name1> . hexdigest ( ) , ctx . hexdigest ( ) )	force_bytes function , use the result as the argument for the call to the hashlib .mdb function , store the result in <name1> . substitute the '%s' in string <val4> with <name3> , <name5> ,
<name1> <name6> ( <name4> , <name3> )	<name1> value of method url .hexdigest ( ) , <name1> value of method ctx .hexdigest , respectively , substitute it for <name3> . call the function <name6> with <name4> and <name3> as arguments , <name1> the result .
def <name2> ( <name5> , <name3> ) :	define the funtion <name2> with <name5> and <name3> as arguments .
url = hashlib . md5 ( force_bytes ( <name6> ( <name5> . build_absolute_uri ( ) ) ) )	call method <name5> .build_absolute_uri , use the result as an argument for function call of <name6> ,
cache_key = <val3>   % ( <name4> , <name6> . hexdigest ( ) )	use the result as an argument for function call of force_bytes , use the result as an argument for calling the method hashlib .md5 , put the result in <name6> . substitute the '%s' in string <val3> with <name4> and result of the function call ,
<name5> <name1> ( <name4> , <name6> )	to the function url .hexdigest ( ) , respectively , substitute it for <name6> . call the function <name1> with <name4> and <name6> as arguments , <name5> the result .
def <name1> ( <name2> , <name4> = <name6> , <name5> = <val3>   , <name1> = <name6> ) :	define the function <name1> , with <name2> <name4> set to <name6> , <name5> set to <val3> and <name1> set to <name6> as arguments .
<name2> <name3> <name1> <name5> :	<name2> <name3> <name1> <name5> ,
<name2> = <name4> . CACHE_MIDDLEWARE_KEY_PREFIX	substitute <name4> .CACHE_MIDDLEWARE_KEY_PREFIX for <name2> .
<name2> = <name3> ( <name1> , <name6> )	call the function <name3> with <name1> and <name6> as arguments , substitute the result for <name2> .
<name2> <name3> <name5> <name4> :	<name2> <name3> <name5> <name4> ,
<name2> = <name3> [ <name1> . CACHE_MIDDLEWARE_ALIAS ]	set <name2> to the value of the dictionary <name3> under the key <name1> .CACHE_MIDDLEWARE_ALIAS .
<name3> = <name4> . <name2> ( <name1> , <name5> )	<name2> the value of dictionary <name4> under the key <name1> , if key is not available return <name5> , substitute it for <name3> .
<name1> headerlist <name5> <name2> <name4> :	<name1> header list <name5> <name2> <name4> ,
<name4> <name5> ( <name3> , <name2> , <name1> , <name6> )	call the function <name5> with <name3> , <name2> , <name1> , <name6> as arguments , <name4> the result .
else :	if not ,
<name1> <name4>	<name1> <name4> .
def <name3> ( <name4> , <name1> , <name5> = <name2> , <name6> = <name2> , <name3> = <name2> ) :	define function <name3> with <name4> , <name1> , <name5> set to <name2> , <name6> set to <name2> , <name3> set to <name2> as arguments .
<name1> <name3> <name4> <name2> :	<name1> <name3> <name4> <name2> ,
<name2> = <name6> . CACHE_MIDDLEWARE_KEY_PREFIX	substitute <name6> .CACHE_MIDDLEWARE_KEY_PREFIX for <name2> .
<name3> <name6> <name2> <name4> :	<name3> <name6> <name2> <name4> ,
<name2> = <name3> . CACHE_MIDDLEWARE_SECONDS	substitute <name3> .CACHE_MIDDLEWARE_SECONDS for <name2> .
<name4> = <name2> ( <name3> , <name1> )	call function <name2> with arguments <name3> and <name1> , substitute the result for <name4> .
<name4> <name3> <name1> <name6> :	<name4> <name3> <name1> <name6> ,
<name3> = <name6> [ <name1> . CACHE_MIDDLEWARE_ALIAS ]	get value under the key <name1> .CACHE_MIDDLEWARE_ALIAS of <name6> dictionary , substitute with it the <name3> .
<name3> <name1> . has_header ( <val2>   ) :	<name3> call to the function <name1> .has_header with string <val2> as an argument returns True ,
<name6> = <name2> . USE_I18N <name3> <name2> . USE_L10N	if eather of <name2> .USE_I18N <name3> <name2> .USE_L10N is True , set <name6> to True .
<name2> = [ ]	<name2> is an empty list .
<name6> <name1> <name3> <name4> . split ( <name2> [ <val5>   ] ) :	<name6> every <name1> <name3> list of strings compiled by splitting string <name4> with value under the key <val5> of <name2> dictionary as a delimiter .
<name6> = <name6> . upper ( ) . <name4> ( <val2>   , <val1>   )	convert string <name6> to uppercase and <name4> all occurrences of <val2> with <val1> , substitute it for <name6> .
<name5> <name2> == <val1>   <name6> <name4> :	<name5> <name2> equals a string <val1> <name6> <name4> is boolean True ,
<name1>	<name1> with the next iteration of the for loop .
<name4> . <name5> ( <val2>   + <name1> )	<name5> <name1> to the string <val2> , <name5> the result to the list <name4> .
<name4> . <name1> ( )	call method <name1> on the <name4> .
<name2> . set ( <name4> , <name5> , <name3> )	call the method <name2> .set , with <name4> , <name5> , <name3> as arguments .
<name4> <name1> ( <name5> , <name5> . method , <name2> , <name3> )	call the function <name1> with <name5> , <name5> .method , <name2> , <name3> as arguments , <name4> the result .
else :	if not ,
<name4> . set ( <name6> , [ ] , <name1> )	call the method <name4> .set with <name6> , an empty list and <name1> as arguments .
<name4> <name2> ( <name1> , <name1> . method , [ ] , <name3> )	call the function <name2> with <name1> , <name1> .method , an empty list and <name3> as arguments , <name4> the result .
def <name3> ( <name1> ) :	define function <name3> with <name1> as an argument .
<name3> = <name2> . <name5> ( <val4>   , 1 )	<name5> string <name2> once , with <val4> as delimiter , substitute the result for <name3> .
<name4> len ( <name5> ) == <val3> :	<name4> length of <name5> equals to integer <val3> ,
<name6> <name3> [ 0 ] . lower ( ) , <name3> [ 1 ]	<name6> tuple , consisting of first element of <name3> converted to lowercase and second element of <name3> .
<name5> <name6> [ 0 ] . lower ( ) , <name3>	<name5> tuple , consisting of first element of <name6> converted to lowercase and <name3> .
<name5> = [ <val4>   ]	<name5> is an list with an element <val4> .
<name6> <name5> . utils <name1> <name3>	<name6> <name5> .utils <name1> <name3> into default name space .
<name4> = ( <val3> , <val1> , <val6> , <val5> , <val2> , <val4> , <val3> , <val1> , <val6> , <val5> )	<name4> is a tuple with 10 elements : integers <val3> , <val1> , <val6> , <val5> , <val2> , <val4> , <val3> , <val1> , <val6> and <val5> .
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
<name6> <name2> isinstance ( <name5> , <name3> . string_types ) :	<name6> <name5> is <name2> an instance of <name3> .string_types ,
<name6> = str ( <name6> )	convert <name6> to a string .
<name4> :	<name4> ,
<name2> = <name3> ( int ( <name5> ) <name1> <name5> <name6> <name4> [ - 1 : : - 2 ] )	<name1> every <name5> <name6> reversed order of <name4> , convert <name5> into an integer , <name3> all the results and substitute the result <name1> <name2> .
odds = sum ( LUHN_ODD_LOOKUP [ int ( <name2> ) ] <name5> <name2> <name6> <name3> [ - 2 : : - 2 ] )	<name5> every <name2> <name6> <name3> without the last element and <name6> reversed order , convert <name2> into an integer ,
<name3> ( ( <name1> + <name6> ) % <val4> == 0 )	use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary , sum all the results and substitute the result for <name6> . sum <name1> and <name6> , if the result is divisible by integer <val4> , <name3> boolean True , if not <name3> boolean False .
except <name4> :	if <name4> exception is caught ,
<name1> <name3>	<name1> boolean <name3> .
<name2> <name1> <name4> <name6>	<name2> <name1> <name4> <name6> into default name space .
<name2> <name3>	<name2> module <name3> .
<name3> struct	<name3> module struc .
<name2> <name5>	<name2> module <name5> .
<name1> <name2>	<name1> module <name2> .
<name4> <name3>	<name4> module <name3> .
<name5> <name4>	<name5> module <name4> .
<name2> :	<name2> ,
<name4> = <name4> . SystemRandom ( )	<name4> is an instance of <name4> .SystemRandom class .
<name3> = <name4>	<name3> is boolean <name4> .
except <name1> :	if <name1> exception is caught ,
<name1> <name6>	<name1> <name6> .
<name6> . warn ( 'A secure pseudo-random number generator is not available '    'on your system. Falling back to Mersenne Twister.'   )	call the function <name6> .warn with an argument ,
<name2> = <name1>	string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.' . <name2> is boolean <name1> .
<name3> <name6> . conf <name4> <name1>	<name3> <name6> .conf <name4> <name1> into default name space .
<name3> <name2> . utils . encoding <name6> <name1>	<name3> <name2> .utils .encoding <name6> <name1> into default name space .
<name2> <name5> . utils <name6> <name4>	<name2> <name5> .utils <name6> <name4> into default name space .
<name4> <name6> . utils . six . moves <name5> <name3>	<name4> <name6> .utils .six .moves <name5> <name3> into default name space .
def <name6> ( <name2> , <name3> , <name4> = <name5> ) :	define the function <name6> with 3 arguments : <name2> , <name3> and <name4> set to <name5> .
<name5> <name4> <name3> <name1> :	<name5> <name4> <name3> <name1> ,
<name1> = <name5> . SECRET_KEY	substitute <name5> .SECRET_KEY for <name1> .
<name5> = <name4> ( <name5> )	call the function <name4> with an argument <name5> , substitute the result for <name5> .
<name4> = <name6> ( <name4> )	call the function <name6> with an argument <name4> , substitute the result for <name4> .
key = <name4> . sha1 ( <name6> + <name3> ) . <name5> ( )	call the method <name4> .sha1 with an argument <name3> appended to <name6> , call the method <name5> on the result , return the result .
return <name4> . new ( <name5> , <name6> = <name1> ( <name2> ) , digestmod = hashlib . sha1 )	call the method <name4> .new with 3 arguments : <name5> , <name6> set to result of the function <name1> with an argument <name2> ,
def get_random_string ( <name4> = <val3> , allowed_chars = 'abcdefghijklmnopqrstuvwxyz'    'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'   ) :	and digestmod set to hashlib .sha1 , return the result . define the function constant_time_compare with 2 arguments : <name4> set to integer <val3> ,
<name4> not <name2> :	<name4> <name2> is false ,
<name1> . seed ( hashlib . sha256 ( ( <val3> % ( <name1> . getstate ( ) , <name2> . <name2> ( ) , settings . SECRET_KEY ) ) . encode ( 'utf-8'   ) ) . digest ( ) )	format string <val3> with 3 elements : result of the function <name1> .getstate , result of the call the the function <name2> .time ,
return ''   . join ( <name2> . choice ( <name4> ) <name3> <name5> <name1> <name6> ( length ) )	and settings .SECRET_KEY , call on it method encode with an argument string 'utf-8' , use the result as an argument <name3> the call to the method hashlib .sha256 , call the method digest on the result , use the result as an argument <name3> the call to the function <name2> .seed . call the function <name2> .choice with an argument <name4> , <name3> every <name5> <name1> <name6> of integers from 0 to lengths ,
<name1> hasattr ( <name4> , <val3> ) :	join the results into a string , return it . <name1> <name4> has an attribute <val3> ,
def <name4> ( <name3> , <name1> ) :	define the function <name4> with 2 arguments : <name3> and <name1> .
return <name6> . compare_digest ( <name2> ( <name4> ) , <name2> ( val2 ) )	call the function <name6> .compare_digest with 2 arguments : result of the function <name2> called with an argument <name4> ,
else :	and result of the function force_bytes called with an argument val2 , return the result . if not ,
def <name6> ( <name3> , <name2> ) :	call the function <name6> with 2 arguments : <name3> and <name2> .
<name5> len ( <name2> ) != len ( <name1> ) :	<name5> lengths of <name2> and <name1> are not equal ,
<name3> <name4>	<name3> boolean <name4> .
<name2> = <val4>	<name2> is an integer <val4> .
<name3> <name6> . PY3 <name5> isinstance ( <name2> , <name1> ) <name5> isinstance ( <name4> , <name1> ) :	<name3> <name6> .PY3 is true <name5> <name2> <name5> <name4> are an instances of <name1> ,
<name3> <name4> , <name2> <name5> <name6> ( <name1> , val2 ) :	<name6> <name1> and va2 into list of tuples , <name3> every <name4> and <name2> <name5> the result ,
<name3> | = <name6> ^  <name1>	perform bitwise exclusive OR on 2 operands <name6> and <name1> , perform bitwise OR with 2 operands : previous <name3> and <name3> , substitute the <name3> for <name3> .
else :	if not ,
<name6> <name5> , <name4> <name3> <name2> ( <name1> , val2 ) :	<name2> <name1> and va2 into list of tuples , <name6> every <name5> and <name4> <name3> the result ,
result | = ord ( <name2> ) ^  ord ( <name6> )	perform bitwise exclusive OR on 2 operands integer representation of <name2> and integer representation of <name6> ,
<name3> <name4> == <val1>	perform bitwise OR with 2 operands : previous <name4> and <name4> , substitute the <name4> for <name4> . if <name4> is equal to integer <val1> , <name3> boolean True , otherwise <name3> boolean False .
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name6> int ( <name3> . hexlify ( <name2> ) , <val4> )	call the function <name3> .hexlify with an argument <name2> , convert the result to base <val4> integer , <name6> the result .
def <name2> ( <name6> , <name1> ) :	define the function <name2> with 2 arguments : <name6> and <name1> .
return binascii . unhexlify ( ( <name1> % <name5> ) . <name4> ( <val6>   ) )	format string <name1> with <name5> , call the method <name4> on the result with an argument string <val6> ,
<name4> hasattr ( <name6> , <val3> ) :	use the result as an argument for the call to the function binascii .unhexlify , return the result . <name4> <name6> had an instance <val3> ,
def <name6> ( <name4> , <name2> , <name1> , <name3> = <val5> , <name6> = <name4> ) :	define the function <name6> with 5 arguments : <name4> , <name2> , <name1> , <name3> set to integer <val5> and <name6> set to <name4> .
<name3> <name6> <name5> <name4> :	<name3> <name6> <name5> <name4> ,
<name4> = <name6> . sha256	substitute <name6> .sha256 for <name4> .
<name4> not <name2> :	<name4> <name2> is false ,
<name2> = <name6>	<name2> is <name6> .
<name5> = <name3> ( <name5> )	call the function <name3> with an argument <name5> , substitute the result for <name5> .
<name6> = <name2> ( <name6> )	call the function <name2> with an argument <name6> , substitute the result for <name6> .
return <name5> . pbkdf2_hmac ( <name4> ( ) . <name1> , <name6> , <name2> , iterations , dklen )	call the function <name5> .pbkdf2_hmac with 5 arguments : field <name1> of the result of the function <name4> , <name6> , <name2> ,
else :	iterations and dklen , return the result . if not ,
def <name5> ( <name2> , <name1> , <name3> , <name6> = <val4> , <name5> = <name2> ) :	define the function <name5> with 5 arguments : <name2> , <name1> , <name3> , <name6> set to integer <val4> and <name5> set to <name2> .
assert <name5> >  <val2>	if <name5> is lesser than integer <val2> , raise an error .
<name1> not <name6> :	<name1> <name6> is false ,
<name2> = <name6> . sha256	substitute <name6> .sha256 for <name2> .
<name6> = <name2> ( <name6> )	call the function <name2> with an argument <name6> , substitute the result for <name6> .
<name2> = <name1> ( <name2> )	call the function <name1> with an argument <name2> , substitute the result for <name2> .
<name1> = <name2> ( ) . <name6>	call the function <name2> , substitute the filed <name6> of the result for <name1> .
<name5> not <name4> :	<name5> <name4> is false ,
<name5> = <name1>	substitute <name1> for <name5> .
<name3> <name5> >  ( <val4> ** <val2> - <val1> ) * <name6> :	bring intger <val4> to integer <val2> , decrement the result by <val1> , multiply it with <name6> , <name3> <name5> is greater than the previous result ,
<name1> <name4> ( <val6>   )	<name1> an <name4> exception with an argument string <val6> .
<name3> = - ( - <name2> // <name5> )	divide negative <name2> with <name5> , substitute floored result for <name3> .
<name4> = <name6> - ( <name2> - <val3> ) * <name1>	decrement <name2> by integer <val3> , multiply it with <name1> , subtract the result from <name6> , substitute the result for <name4> .
<name5> = <val1> % ( <name6> * <val3> )	<name5> is a string <val1> formated with <name6> multiplied with integer <val3> .
<name6> , <name1> = <name2> ( ) , <name2> ( )	call the function <name2> twice , substitute the results for <name6> , <name1> , respectively .
<name5> len ( <name3> ) >  <name1> . block_size :	<name5> length of <name3> is greater than <name1> .block_size ,
<name6> = <name5> ( <name6> ) . <name5> ( )	call the function <name5> with an argument <name6> , call the method <name5> on the result , substitute the result or <name6> .
\ <name3> += b <val4>   * ( inner . block_size - len ( <name3> ) ) \	\ decrement by length of <name3> , create bytes string with previous result number of characters <val4> , \
<name6> . <name4> ( <name2> . translate ( <name5> . trans_36 ) )	append the result to <name2> . call the method <name2> .translate with an argument <name5> .trans_36 , <name4> <name6> dictionary with the result .
<name6> . <name1> ( <name3> . translate ( <name5> . trans_5C ) )	call the method <name3> .translate with an argument <name5> .trans_5C , <name1> <name6> dictionary with the result .
def <name5> ( <name4> ) :	define the function <name5> with an argument <name4> .
<name5> = <name1> + <name2> . pack ( b <val6>   , <name3> )	call the method <name2> .pack with 2 arguments : bytes string <val6> and <name3> , append the result to <name1> , substitute the result or <name5> .
<name1> = <val4>	<name1> is an integer <val4> .
<name6> <name5> <name4> xrange ( int ( <name2> ) ) :	<name6> every <name5> <name4> range of integers from 0 to <name2> converted to an integer ,
<name6> , <name2> = <name5> . copy ( ) , <name1> . copy ( )	call the function <name5> .copy , substitute the result for <name6> , call the function <name1> .copy , substitute the result for <name2> .
<name1> . update ( <name4> )	call the method <name1> .update with an argument <name4> .
<name6> . update ( <name2> . digest ( ) )	call the method <name2> .digest , use the result as an argument for the call to the function <name6> .update .
<name3> = <name5> . digest ( )	call the method <name5> .digest , substitute the result for <name3> .
<name2> ^ = <name5> ( <name6> )	call the function <name5> with an argument <name6> perform bitwise exclusive OR with 2 operands , previous <name2> an <name2> ,
<name2> <name3> ( <name5> , <name1> )	substitute the <name5> for <name5> . call the function <name3> with 2 arguments : <name5> and <name1> , <name2> the <name5> .
T = [ <name5> ( <name4> ) <name3> <name4> <name1> range ( <val2> , <name6> ) ]	call the function <name5> with an argument <name4> , <name3> every <name4> <name1> sequence of integers from <val2> to <name6> , not included ,
return b ''   . <name5> ( <name6> ) + <name1> ( <name3> ) [ : <name4> ]	substitute the results in a list for <name6> . <name5> elements of <name6> in a bytes string , append first <name4> elements of result of the call to the function <name1> with an argument <name3> to it ,
<name4> <name5>	<name4> module <name5> .
<name1> <name2>	<name1> module <name2> .
<name4> . <name3> <name6>	<name4> . <name3> <name6> into default name space .
<name1> = int ( <name3> . PY3 )	convert <name3> .PY3 to an integer , substitute it for <name1> .
<name4> <name1> . name == <val5>   :	<name4> <name1> .name equals string <val5> ,
def <name5> ( <name6> = <val3>   , <name4> = <val2>   , err_log = <val2>   , umask = 0 o022 ) :	define the function <name5> with 4 arguments : <name6> set to <val3> , <name4> set to a string <val2> ,
<name1> :	<name1> ,
<name5> os . <name6> ( ) >  <val2> :	<name6> a child process , <name5> the result equals integer <val2> ,
sys . exit ( <val4> )	close the process with an argument <val4> .
except <name5> as <name6> :	if <name5> , renamed to <name6> , exception is caught ,
\ <name2> . stderr . write ( <val5> % ( <name3> . errno , <name3> . strerror ) ) \	\ call the method <name2> .stderr .write with an argument string <val5> , formated with <name3> .errno and <name3> .strerror . \
sys . exit ( <val4> )	close the process with an argument <val4> .
<name3> . setsid ( )	call the method <name3> .setsid .
<name3> . chdir ( <name6> )	call the method <name3> .chdir with an argument <name6> .
<name1> . <name3> ( <name3> )	call the function <name1> .umask with an argument <name3> .
<name5> :	<name5> ,
<name2> os . <name4> ( ) >  <val1> :	<name4> a child process , <name2> the result equals integer <val1> ,
os . _exit ( <val2> )	close the process with an argument <val2> .
except <name1> as <name6> :	if <name1> , renamed to <name6> , exception is caught ,
\ <name2> . stderr . write ( <val4> % ( <name6> . errno , <name6> . strerror ) ) \	\ call the method <name2> .stderr .write with an argument string <val4> , formated with <name6> .errno and <name6> .strerror . \
<name6> . _exit ( <val5> )	call the method <name6> ._exit with an argument integer <val5> .
<name2> = <name4> ( <val3>   , 'r'   )	<name4> <val3> file in read mode , substitute the result for <name2> .
<name6> = <name2> ( <name1> , 'a+'   , <name5> )	<name2> <name1> flie in append mode with <name5> size of input buffer , substitute the result for <name6> .
<name5> = <name1> ( <name3> , 'a+'   , <name6> )	<name1> <name3> flie in append mode with <name6> size of input buffer , substitute the result for <name5> .
<name6> . dup2 ( <name2> . fileno ( ) , <name5> . stdin . fileno ( ) )	call the method <name6> .dup2 with 2 arguments : result of the method <name2> .fileno and result of the method <name5> .stdin .fileno .
<name5> . dup2 ( <name3> . fileno ( ) , <name1> . stdout . fileno ( ) )	call the method <name5> .dup2 with 2 arguments : result of the method <name3> .fileno and result of the method <name1> .stdout .fileno .
<name4> . dup2 ( <name3> . fileno ( ) , <name6> . stderr . fileno ( ) )	call the method <name4> .dup2 with 2 arguments : result of the method <name3> .fileno and result of the method <name6> .stderr .fileno .
<name2> . stdout , <name2> . stderr = <name5> , <name4>	substitute <name5> and <name4> for <name2> .stdout and <name2> .stderr .
else :	if not ,
def <name6> ( <name1> = <val2>   , <name4> = <name3> , <name5> = <name3> , umask = 0 o022 ) :	define the function <name6> with 4 argument : <name1> set to <val2> , <name4> set to <name3> , <name5> set to <name3> ,
<name6> . chdir ( <name5> )	call the method <name6> .chdir with an argument <name5> .
<name1> . <name3> ( <name3> )	call the method <name1> .umask with an argument <name3> .
<name4> . stdin . close ( )	call the method <name4> .stdin .close .
<name3> . stdout . close ( )	call the method <name3> .stdout .close .
<name6> . stderr . close ( )	call the method <name6> .stderr .close .
<name5> <name1> :	<name5> <name1> is true ,
<name1> . stderr = <name5> ( <name2> , 'a'   , <name4> )	<name5> <name2> file in append mode with <name4> size of the input buffer , substitute the result for <name1> .stderr .
else :	if not ,
<name2> . stderr = <name3> ( )	<name2> .stderr is an instance of <name3> class .
<name6> <name2> :	<name6> <name2> is true ,
<name3> . stdout = <name1> ( <name6> , 'a'   , <name4> )	<name1> <name6> file in append mode with <name4> size of the input buffer , substitute the result for <name3> .stdout .
else :	if not ,
<name2> . stdout = <name6> ( )	<name2> .stdout is an instance of <name6> class .
<name5> <name6> :	derive the <name5> <name6> .
def <name6> ( <name5> , <name2> ) :	define the method <name6> with 2 arguments : <name5> and <name2> .
pass	do nothing .
<name1> <name5>	<name1> module <name5> .
<name6> <name3>	<name6> module <name3> .
<name5> <name2> <name4> <name3>	<name5> <name2> <name4> <name3> into default name space .
<name6> <name1> . utils <name5> <name3>	<name6> <name1> .utils <name5> <name3> into default name space .
<name4> <name6> . utils . deprecation <name5> <name2>	<name4> <name6> .utils .deprecation <name5> <name2> into default name space .
<name6> <name2> ( <name1> ) :	derive the <name6> <name2> from the <name1> base <name6> .
def <name4> ( <name3> , * <name1> ) :	define the method <name4> with 2 arguments : <name3> and unpacked list <name1> .
<name1> . warn ( '`MergeDict` is deprecated, use `dict.update()` '    'instead.'   , RemovedInDjango19Warning , 2 )	call the function <name1> .warn with 3 arguments : string '`MergeDict` is deprecated, use `dict.update()` instead.' ,
<name2> . <name5> = <name5>	RemovedInDjango19Warning and integer 2 . substitute <name5> for <name2> .dicts .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name4> <name1> ( <name3> . dicts )	if <name1> element of <name3> .dicts is true , <name4> boolean True , otherwise <name4> boolean False .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name4> <name3> ( <name6> ) . <name1> ( <name6> )	get the <name3> of <name6> object , call its method <name1> with an argument <name6> , <name4> the result .
def <name1> ( <name2> , <name5> ) :	define the method <name1> with 2 arguments : <name2> and <name5> .
<name6> <name5> <name3> <name1> . dicts :	<name6> every <name5> <name3> <name1> .dicts ,
<name1> :	<name1> ,
<name5> <name2> [ <name1> ]	<name5> value under <name1> <name1> of <name2> dictionary .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
raise <name2> ( <name3> )	rise an <name2> exception with an argument <name3> .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name6> <name3> . __class__ ( * <name3> . dicts )	call the method __copy__ with an argument unpacked list <name3> .dicts , <name6> the result .
def <name6> ( <name2> , <name5> , <name1> = <name4> ) :	define the method <name6> with 3 arguments : <name2> , <name5> and <name1> set to <name4> .
<name4> :	<name4> ,
<name2> <name4> [ <name3> ]	<name2> value under <name3> <name3> of <name4> dictionary
except <name6> :	if <name6> exception is caught ,
<name5> <name6>	<name5> <name6> .
def <name6> ( <name5> , <name3> ) :	define the method <name6> with 2 arguments : <name5> and <name3> .
<name1> <name3> <name5> <name2> . dicts :	<name1> every <name3> <name5> <name2> .dicts ,
<name4> <name5> <name3> <name6> :	<name4> <name5> is contained <name3> <name6> ,
<name1> <name6> . getlist ( <name2> )	call the method <name6> .getlist with an argument <name2> , <name1> the result .
<name3> [ ]	<name3> an empty list .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name4> = <name5> ( )	<name4> is an empty <name5> .
<name4> <name6> <name5> <name1> . dicts :	<name4> every <name6> <name5> <name1> .dicts ,
<name2> <name1> <name4> <name6> . iteritems ( <name5> ) :	call the function <name6> .iteritems with an argument <name5> , <name2> every <name1> <name4> the result ,
<name1> = <name3> [ 0 ]	substitute first element of <name3> for <name1> .
<name3> <name1> <name6> <name5> :	<name3> <name1> is contained <name6> <name5> ,
continue	skip this loop iteration .
<name4> . <name2> ( <name3> )	<name2> <name3> to <name4> .
<name6> <name1>	<name6> <name1> .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name6> <name2> , <name4> <name1> <name3> . _iteritems ( ) :	call the method <name3> ._iteritems , <name6> every <name2> and <name4> <name1> the result ,
<name5> <name4>	<name5> <name4> .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name3> <name4> , <name2> <name5> <name6> . _iteritems ( ) :	call the method <name6> ._iteritems , <name3> every <name4> and <name2> <name5> the result ,
<name2> <name5>	<name2> <name5> .
<name5> <name1> . PY3 :	<name5> <name1> .PY3 is true ,
<name6> = <name5>	substitute <name5> for <name6> .
<name1> = <name5>	substitute <name5> for <name1> .
<name3> = <name1>	substitute <name1> for <name3> .
else :	if not ,
<name2> = <name6>	substitute <name6> for <name2> .
<name5> = <name2>	substitute <name2> for <name5> .
<name6> = <name5>	substitute <name5> for <name6> .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name6> <name1> ( <name3> . iteritems ( ) )	call the method <name3> .iteritems , <name6> the <name1> of results .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name3> <name4> ( <name1> . iterkeys ( ) )	call the method <name1> .iterkeys , <name3> the <name4> of results .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name2> <name6> ( <name4> . itervalues ( ) )	call the method <name4> .itervalues , <name2> the <name6> of results .
def <name6> ( <name3> , <name1> ) :	define the method <name6> with 2 arguments : <name3> and <name1> .
<name3> <name4> <name5> <name1> . dicts :	<name3> every <name4> <name5> <name1> .dicts ,
<name1> <name2> <name4> <name6> :	<name1> <name2> is contained <name4> <name6> ,
<name1> <name4>	<name1> boolean <name4> .
<name3> <name4>	<name3> boolean <name4> .
<name2> = <name4>	substitute <name4> for <name2> .
<name1> = <name3>	substitute <name3> for <name1> .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name2> <name5> . __copy__ ( )	call the method <name5> .__copy__ , <name2> the result .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name1> str ( dict ( <name4> . <name5> ( ) ) )	get dictionary <name4> <name5> , convert the result into a dictionary , convert the result into a string and <name1> it .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name1> = <val3>   . <name2> ( repr ( <name5> ) <name4> <name5> <name6> <name1> . dicts )	<name2> printable representation of <name5> into a string separated with <val3> , <name4> every <name5> <name6> <name1> .dicts , substitute the result <name4> <name1> .
<name3> <val5>   % ( <name2> . __class__ . __name__ , <name4> )	<name3> a string <val5> formated with <name2> .__class__ .__name__ and <name4> .
<name6> <name2> ( <name1> ) :	derive the <name6> <name2> from the <name1> base <name6> .
def <name1> ( <name3> , * <name2> , ** <name6> ) :	define the method <name1> with 3 arguments : <name3> , unpacked list <name2> and unpacked dictionary <name6> .
instance = super ( <name2> , <name6> ) . <name3> ( <name6> , * <name5> , ** kwargs )	call the method <name3> from the base class of the class <name2> , with 3 arguments : <name6> , unpacked list <name5> ,
<name1> . keyOrder = [ ]	and unpacked dictionary kwargs . <name1> .keyOrder is an empty list .
<name5> <name3>	<name5> <name3> .
def <name2> ( <name4> , <name5> = <name3> ) :	define the method <name2> with 2 arguments : <name4> and <name5> set to <name3> .
<name6> . warn ( <val4> , RemovedInDjango19Warning , stacklevel = 2 )	call the function <name6> .warn with 3 arguments : string <val4> ,
<name4> <name6> <name1> <name3> <name5> isinstance ( <name6> , <name2> ) :	RemovedInDjango19Warning and stacklevel set to integer 2 . <name4> <name6> <name1> <name3> <name5> <name6> <name1> an instance of <name2> type ,
<name3> = <name3> or [ ]	if <name3> is true , substitute it for <name3> , otherwise <name3> is an empty list .
super ( <name6> , self ) . <name3> ( <name2> )	call the method <name3> from the base class of the class <name6> , called with an argument <name2> .
<name4> . keyOrder = <name6> ( <name1> ) <name2> <name1> else [ ]	<name2> <name1> is true , substitute <name6> created from elements of <name1> , substitute it for <name4> .keyOrder , otherwise <name4> .keyOrder is an empty <name6> .
else :	if not ,
super ( <name6> , self ) . <name3> ( )	call the method <name3> from the base class of the class <name6> .
<name2> = super ( <name4> , self ) . <name5>	substitute <name5> filed of the base class of the class <name4> for <name2> .
<name5> <name2> , <name3> <name1> <name6> :	<name5> every <name2> and <name3> <name1> <name6> ,
<name1> <name6> <name2> <name5> <name4> :	<name1> <name6> is <name2> contained <name5> <name4> ,
<name2> . keyOrder . <name5> ( <name1> )	<name5> <name1> to <name2> .keyOrder .
<name5> ( <name4> , <name3> )	call the function <name5> with 2 arguments : <name4> and <name3> .
def <name2> ( <name5> , <name4> ) :	define the method <name2> with 2 arguments : <name5> and <name4> .
return <name5> . __class__ ( [ ( <name4> , <name3> . deepcopy ( value , memo ) ) for <name4> , value in <name5> . items ( ) ] )	call the method <name5> .__class__ with an argument list , with 2 elements : <name4> and result of the function <name3> .deepcopy ,
def <name4> ( <name3> ) :	called with 2 arguments : value and memo , for every key and value in result for the method <name3> .items , return the result . define the method <name4> with an argument <name3> .
<name5> <name1> . copy ( )	call the method <name1> .copy , <name5> the result .
def <name6> ( <name2> , key , <name3> ) :	define the method <name6> with 3 arguments : <name2> , kay and <name3> .
<name6> <name4> <name2> <name1> <name5> :	<name6> <name4> is <name2> contained <name1> <name5> ,
<name4> . keyOrder . <name2> ( <name1> )	<name2> <name1> to <name4> .keyOrder .
super ( <name3> , self ) . <name4> ( <name5> , <name1> )	call the method <name4> from the base class of the class <name3> , with 2 arguments <name5> and <name1> .
def <name5> ( <name1> , <name6> ) :	define the method <name5> with 2 arguments : <name1> and <name6> .
super ( <name4> , self ) . <name2> ( <name6> )	call the method <name2> from the base class of the class <name4> , with an argument <name6> .
<name6> . keyOrder . <name3> ( <name4> )	<name3> <name4> element from <name6> .keyOrder dictionary .
def <name1> ( <name3> ) :	define the method <name1> with an argument <name3> .
<name5> iter ( <name2> . keyOrder )	<name5> iterable <name2> .keyOrder .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name5> reversed ( <name2> . keyOrder )	reverse order of elements of <name2> .keyOrder , <name5> the result .
def <name1> ( <name4> , <name2> , * <name6> ) :	define the method <name1> with 3 arguments : <name4> , <name2> and unpacked list <name6> .
result = super ( <name4> , self ) . <name1> ( <name6> , * <name5> )	call the method <name1> from the base class of the class <name4> , with 2 arguments <name6> and unpacked list <name5> ,
<name5> :	substitute the result for result . <name5> ,
<name5> . keyOrder . <name4> ( <name6> )	<name4> <name6> element from <name5> .keyOrder dictionary .
except <name3> :	if <name3> exception is caught ,
pass	do nothing .
<name3> <name6>	<name3> <name6> .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name5> = super ( <name1> , self ) . <name3> ( )	call the method <name3> from the base class of the class <name1> , substitute the <name5> for <name5> .
<name4> . keyOrder . <name2> ( <name6> [ 0 ] )	<name2> first element of <name6> from <name4> .keyOrder dictionary .
<name1> <name3>	<name1> <name3> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name1> <name6> <name3> <name2> . keyOrder :	<name1> every <name6> <name3> <name2> .keyOrder ,
<name5> <name4> , <name6> [ <name4> ]	<name5> <name4> and value under <name4> <name4> of <name6> dictionary .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name3> <name6> <name4> <name1> . keyOrder :	<name3> every <name6> <name4> <name1> .keyOrder ,
<name2> <name4>	<name2> <name4> .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name2> <name3> <name4> <name6> . keyOrder :	<name2> every <name3> <name4> <name6> .keyOrder ,
<name3> <name4> [ <name2> ]	<name3> value under <name2> <name2> of <name4> dictionary .
<name1> <name4> . PY3 :	<name1> <name4> .PY3 is true ,
<name4> = <name3>	substitute <name3> for <name4> .
<name2> = <name5>	substitute <name5> for <name2> .
<name6> = <name4>	substitute <name4> for <name6> .
else :	if not ,
<name3> = <name1>	substitute <name1> for <name3> .
<name2> = <name6>	substitute <name6> for <name2> .
<name5> = <name1>	substitute <name1> for <name5> .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
return [ ( <name3> , <name6> [ <name3> ] ) <name1> <name3> <name5> <name6> . keyOrder ]	put a tuple with 2 elements : <name3> and value under <name3> key of <name6> dictionary into a list , <name1> every <name3> <name5> <name6> .keyOrder ,
def <name3> ( <name2> ) :	return resulting list . define the method <name3> with an argument <name2> .
<name2> <name5> . keyOrder [ : ]	<name2> hard copy of <name5> .keyOrder elements .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name4> [ <name6> [ <name1> ] <name3> <name1> <name2> <name6> . keyOrder ]	append value under <name1> key of <name6> dictionary to a list , <name3> every <name1> <name2> <name6> .keyOrder , <name4> the result .
def <name5> ( <name6> , <name3> ) :	define the method <name5> with 2 arguments : <name6> and <name3> .
<name4> <name3> , <name2> <name5> <name1> . iteritems ( <name6> ) :	call the method <name1> .iteritems with an argument <name6> , <name4> every <name3> and <name2> <name5> the result ,
<name2> [ <name5> ] = <name1>	substitute <name1> for value under the <name5> key of <name2> dictionary .
def <name1> ( <name2> , <name6> , <name4> ) :	define the method <name1> with 3 arguments : <name2> , <name6> and <name4> .
<name2> <name5> <name6> <name1> <name4> :	<name2> <name5> is <name6> contained <name1> <name4> ,
<name4> . keyOrder . <name2> ( <name5> )	<name2> <name5> to <name4> .keyOrder dictionary .
<name1> super ( <name5> , self ) . <name2> ( <name4> , <name6> )	call the method <name2> from the base class of the class <name5> , with 2 arguments <name4> and <name6> , <name1> the result .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name4> <name5> . __class__ ( <name5> )	call the method <name5> .__class__ with an argument <name5> , <name4> the result .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
return '{%s}'   % ', '   . join ( '%r: %r'   % ( <name2> , <name1> ) <name6> <name2> , <name1> <name5> <name3> . iteritems ( <name4> ) )	<name6> every <name2> and <name1> <name5> result of the function <name3> .iteritems , called with an argument <name4> ,
def <name3> ( <name1> ) :	joining string '%r: %r' formated with k and v into a string , separated with ', ' , use it to format a string '{%s}' , return it . define the method <name3> with an argument <name1> .
super ( <name6> , self ) . <name5> ( )	call the method <name5> from the base class of the class <name6> .
<name3> . keyOrder = [ ]	<name3> .keyOrder is an empty list .
<name2> <name6> ( <name1> ) :	derive the <name2> <name6> from the <name1> base <name2> .
def <name2> ( <name3> , <name5> = <name6> ) :	define the method <name2> with 2 arguments : <name3> and <name5> set to <name6> .
<name2> . dict = <name3> ( ( ( <name5> , <name4> ) <name6> <name5> <name1> iterable ) if iterable else [ ] )	<name2> .dict is an instance of <name3> class , created with arguments : tuples with 2 argument <name5> and <name4> , <name6> every <name5> <name1> iterables ,
def <name3> ( <name4> , <name2> ) :	if iterable is true , otherwise use an empty list as an argument . define the method <name3> with 2 arguments : <name4> and <name2> .
<name3> . dict [ <name1> ] = <name5>	value under the <name1> key of <name3> .dict dictionary is <name5> .
def <name1> ( <name6> , <name5> ) :	define the method <name1> with 2 arguments : <name6> and <name5> .
del <name1> . dict [ <name6> ]	delete entry under <name6> key of <name1> .dict dictionary .
def <name2> ( <name6> , <name3> ) :	define the method <name2> with 2 arguments : <name6> and <name3> .
<name2> :	<name2> ,
<name6> . <name4> ( <name5> )	<name4> <name5> from <name6> dictionary .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name3> iter ( <name2> . dict . <name4> ( ) )	convert <name4> of dictionary <name2> .dict into a iterable , <name3> it .
def <name1> ( <name5> , <name3> ) :	define the method <name1> with 2 arguments : <name5> and <name3> .
<name2> <name5> <name4> <name3> . dict	if <name5> is contained <name4> <name3> .dict , <name2> boolean True , otherwise <name2> boolean False .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name6> bool ( <name1> . dict )	convert <name1> .dict into boolean , <name6> the result .
<name5> <name4> ( <name6> ) :	derive the <name5> <name4> from the <name6> base <name5> .
pass	do nothing .
<name3> <name1> ( <name2> ) :	derive the <name3> <name1> from the <name2> base <name3> .
def <name4> ( <name3> , <name2> = ( ) ) :	define the method <name4> with 2 arguments : <name3> and <name2> set to an empty tuple .
super ( <name3> , self ) . <name1> ( <name4> )	call the method <name1> from the base class of the class <name3> , with an argument <name4> .
def <name1> ( <name2> ) :	define the method <name1> with an argument <name2> .
<name1> <val3> % ( <name2> . __class__ . __name__ , super ( MultiValueDict , <name2> ) . __repr__ ( ) )	<name1> a string <val3> formated with <name2> .__class__ .__name__ ,
def <name3> ( <name4> , <name5> ) :	and a result of the method __repr__ called from instance of base class of the MultiValueDict class . define the method <name3> with 2 arguments : <name4> and <name5> .
<name5> :	<name5> ,
<name6> = super ( <name5> , self ) . <name1> ( <name3> )	call the method <name1> from the base class of the class <name5> , with an argument <name3> , substitute the result for <name6> .
except <name2> :	if <name2> exception is caught ,
<name6> <name1> ( repr ( <name3> ) )	<name6> an <name1> exception with printable representation of <name3> .
<name5> :	<name5> ,
<name6> <name2> [ - 1 ]	<name6> last element of <name2> .
except <name4> :	if <name4> exception is caught ,
<name2> [ ]	<name2> an empty list .
def <name4> ( <name6> , <name2> , <name1> ) :	define the method <name4> with 3 arguments : <name6> , <name2> and <name1> .
super ( <name5> , self ) . <name4> ( <name3> , [ <name1> ] )	call the method <name4> from the base class of the class <name5> , with 2 arguments <name3> and list containing element <name1> .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
return <name4> . __class__ ( [ ( <name3> , <name5> [ : ] ) for <name3> , <name5> in <name4> . lists ( ) ] )	call the method <name4> .__class__ with an argument list , with elements : tuples with 2 elements : <name3> and hard copy of list <name5> ,
def <name3> ( <name2> , <name1> = <name5> ) :	for every k and v in result of method the <name2> .lists . define the method <name3> with 2 arguments : <name2> and <name1> set to <name5> .
<name3> <name2> <name6> <name1> :	<name3> <name2> <name6> <name1> ,
<name1> = { }	<name1> is an empty dictionary .
<name3> = <name4> . __class__ ( )	call the method <name4> .__class__ , substitute the <name3> for <name3> .
<name6> [ <name4> ( <name1> ) ] = <name3>	substitute <name3> for value under the <name4> of <name1> key of <name6> dictionary .
<name2> <name6> , <name3> <name5> dict . <name1> ( <name4> ) :	<name2> every <name6> and <name3> <name5> <name1> of dictionary <name4> ,
<name2> . __setitem__ ( <name5> , <name6> . deepcopy ( <name1> , memo ) , <name6> . deepcopy ( value , memo ) )	call the method <name2> .__setitem__ with 3 arguments : <name5> , <name5> of the function <name6> .deepcopy , called with 2 arguments : <name1> ,
<name4> <name3>	and memo , and <name3> of the function copy .deepcopy called with 2 arguments : value and memo . <name4> <name3> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name2> = <name3> . __dict__ . copy ( )	call the method <name3> .__dict__ .copy , substitute the result for <name2> .
<name1> [ <val3>   ] = dict ( ( <name6> , self . getlist ( <name6> ) ) for <name6> in self )	value under <val3> key of <name1> is a dictionary created with tuples containing 2 elements : <name6> and result of the function ,
<name3> <name4>	self .getlist with an argument k , for every k in self . <name3> <name4> .
def <name1> ( <name3> , <name5> ) :	define the method <name1> with 2 arguments : <name3> and <name5> .
<name1> = <name2> . pop ( <val6>   , { }  )	remove element under <val6> key of <name2> dictionary , if it exists substitute it for <name1> , if not <name1> is an empty list .
<name2> <name5> , <name6> <name1> <name3> . items ( ) :	call the method <name3> .items , <name2> every <name5> and <name6> <name1> the result ,
<name3> . setlist ( <name5> , <name4> )	call the method <name3> .setlist with 2 arguments : <name5> and <name4> .
<name5> . __dict__ . <name6> ( <name3> )	<name6> <name5> .__dict__ dictionary with <name3> .
def <name3> ( <name4> , <name2> , <name1> = <name5> ) :	define the method <name3> with 3 arguments : <name4> , <name2> and <name1> set to <name5> .
<name1> :	<name1> ,
<name1> = <name5> [ <name4> ]	substitute value under the <name4> <name4> of <name5> dictionary for <name1> .
except <name2> :	if <name2> exception is caught ,
<name1> <name2>	<name1> <name2> ,
<name5> <name3> == [ ] :	<name5> <name3> equals an empty list .
<name2> <name5>	<name2> <name5> .
<name6> <name2>	<name6> <name2> .
def <name5> ( <name1> , <name3> , <name2> = <name4> ) :	define the method <name5> with 3 arguments : <name1> , <name3> and <name2> set to <name4> .
<name1> :	<name1> ,
<name2> super ( <name3> , self ) . <name6> ( <name1> )	call the method <name6> from the base class of the class <name3> , with an argument <name1> , <name2> the result . .
except <name4> :	if <name4> exception is caught ,
<name3> <name6> <name1> <name2> :	<name3> <name6> <name1> <name2> ,
<name6> [ ]	<name6> an empty list .
<name1> <name2>	<name1> <name2> .
def <name1> ( <name6> , <name2> , <name5> ) :	define the method <name1> with 3 arguments : <name6> , <name2> and <name5> .
super ( <name1> , self ) . <name6> ( <name2> , <name5> )	call the method <name6> from the base class of the class <name1> , with 2 arguments <name2> and <name5> .
def <name4> ( <name2> , <name1> , <name3> = <name6> ) :	define the method <name4> with 3 arguments : <name2> , <name1> and <name3> set to <name6> .
<name2> <name1> <name4> <name5> <name3> :	<name2> <name1> is <name4> contanied <name5> <name3> ,
<name3> [ <name4> ] = <name2>	substitute <name2> for value under the <name4> <name4> of <name3> dictionary .
<name4> <name2> [ <name3> ]	<name4> value under the <name3> <name3> of <name2> dictionary .
def <name5> ( <name1> , <name6> , <name2> = <name3> ) :	define the method <name5> with 3 arguments : <name1> , <name6> and <name2> set to <name3> .
<name3> <name6> <name2> <name1> <name4> :	<name3> <name6> is <name2> contained <name1> <name4> ,
<name4> <name2> <name5> <name1> :	<name4> <name2> <name5> <name1> ,
<name5> = [ ]	<name5> is an empty list .
<name6> . setlist ( <name2> , <name3> )	call the method <name6> .setlist with 2 arguments : <name2> and <name3> .
<name5> <name3> . getlist ( <name6> )	call the method <name3> .getlist with an argument <name6> , <name5> the result .
def <name1> ( <name6> , <name4> , <name5> ) :	define the method <name1> with 3 arguments : <name6> , <name4> and <name5> .
<name6> . setlistdefault ( <name2> ) . <name4> ( <name3> )	call the method <name6> .setlistdefault with an argument <name2> , <name4> <name3> to the result .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name4> <name5> <name1> <name6> :	<name4> every <name5> <name1> <name6> ,
<name6> <name1> , <name2> [ <name1> ]	<name6> <name1> and value under the <name1> <name1> of <name2> dictionary .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name5> <name4> . iteritems ( super ( <name3> , self ) )	call the function <name4> .iteritems with an argument : instance of base class of the <name3> class , <name5> the result .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name5> <name6> <name3> <name2> :	<name5> every <name6> <name3> <name2> ,
<name3> <name5> [ <name1> ]	<name3> value under <name1> <name1> of <name5> dictionary .
<name6> <name3> . PY3 :	<name6> <name3> .PY3 is true ,
<name5> = <name2>	substitute <name2> for <name5> .
<name5> = <name4>	substitute <name4> for <name5> .
<name6> = <name3>	substitute <name3> for <name6> .
else :	if not ,
<name2> = <name4>	substitute <name4> for <name2> .
<name4> = <name1>	substitute <name1> for <name4> .
<name6> = <name4>	substitute <name4> for <name6> .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name3> <name1> ( <name2> . iteritems ( ) )	call the method <name2> .iteritems , <name3> <name1> of results .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name4> <name2> ( <name3> . iterlists ( ) )	call the method <name3> .iterlists , <name4> <name2> of results .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name5> <name4> ( <name3> . itervalues ( ) )	call the method <name3> .itervalues , <name5> <name4> of results .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name5> <name2> . <name2> ( <name6> )	call the method <name2> .copy with an argument <name6> , <name5> the result .
def <name1> ( <name3> , * <name2> , ** <name6> ) :	define the method <name1> with 3 arguments : <name3> , unpacked list <name2> and unpacked dictionary <name6> .
<name4> len ( <name1> ) >  <val3> :	<name4> length of <name1> is greater than integer <val3> ,
<name6> <name1> ( <val3> % len ( <name4> ) )	<name6> an <name1> with an argument string <val3> formated with length of <name4> .
<name2> <name5> :	<name2> <name5> is true ,
<name3> = <name1> [ 0 ]	substitute first <name1> for <name3> .
<name6> isinstance ( <name5> , <name1> ) :	<name6> <name5> is an instance of <name1> .
<name1> <name3> , <name5> <name4> <name6> . lists ( ) :	call the method <name6> .lists , <name1> every <name3> and <name5> <name4> result ,
<name3> . setlistdefault ( <name2> ) . <name4> ( <name1> )	call the method <name3> .setlistdefault with an argument <name2> , <name4> the result with <name1> .
else :	if not ,
try :	trym
<name4> <name5> , <name2> <name6> <name3> . <name1> ( ) :	<name4> every <name5> and <name2> <name6> <name1> of <name3> dictionary ,
     <name6> . setlistdefault ( <name2> ) . <name4> ( <name1> )	call the method <name6> .setlistdefault with an argument <name2> , <name4> <name1> to the result .
except <name3> :	if <name3> exception is caught ,
<name6> <name2> ( <val4> )	<name6> an <name2> with an argument string <val4> .
<name5> <name2> , <name1> <name4> <name3> . iteritems ( <name6> ) :	call the function <name3> .iteritems with an argument <name6> , <name5> every <name2> and <name1> <name4> the result ,
<name6> . setlistdefault ( <name4> ) . <name2> ( <name1> )	call the method <name6> .setlistdefault with an argument <name4> , <name2> <name1> to the result .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name3> dict ( ( <name1> , <name6> [ <name1> ] ) <name4> <name1> <name2> <name6> )	<name3> dictionary created with tuples with 2 elements : <name1> and value under the <name1> <name1> of <name6> dictionary , <name4> every <name1> <name2> <name6> .
<name4> <name2> ( <name1> ) :	derive the <name4> <name2> from the <name1> base <name4> .
def <name3> ( <name2> , * <name6> , ** <name4> ) :	define the method <name3> with 3 arguments : <name2> , unpacked list <name6> and unpacked dictionary <name4> .
<name5> <val4>   <name2> <name3> :	<name5> <val4> is contained <name2> <name3> ,
<name5> = <name3> [ <val4>   ]	substitute value under <val4> key of <name3> dictionary for <name5> .
del <name1> [ <val2>   ]	delete element under <val2> key of <name1> dictionary .
else :	if not ,
<name3> = <val6>	<name3> is a string <val6> .
<name1> = <name3> . __new__ ( <name2> , * <name6> , ** <name5> )	call the method <name3> .__new__ with 3 arguments : <name2> , unpacked list <name6> and unpacked dictionary <name5> , substitute the result for <name1> .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .warning .
<name2> <name3>	<name2> <name3> .
def <name3> ( <name2> , * <name1> , ** <name6> ) :	define the method <name3> with 3 arguments : <name2> , unpacked dictionary <name1> and unpacked dictionary <name6> .
<name5> isinstance ( <name1> . warning , <name6> ) :	<name5> <name1> .warning is an instance of <name6> class ,
<name4> <name5> . warning	<name4> <name5> .warning .
else :	if not ,
<name2> AttributeError ( <name4> . warning )	<name2> an <name2> <name4> .warning with an argument <name4> .warning .
<name5> = <name2>	substitute <name2> for <name5> .
<name6> = <name4>	substitute <name4> for <name6> .
<name6> = <name1>	substitute <name1> for <name6> .
<name5> = <name1>	substitute <name1> for <name5> .
<name1> = <name5>	substitute <name5> for <name1> .
<name2> = <name3>	substitute <name3> for <name2> .
<name6> = <name5>	substitute <name5> for <name6> .
<name5> = <name4>	substitute <name4> for <name5> .
<name3> = <name5>	substitute <name5> for <name3> .
<name4> = <name6>	substitute <name6> for <name4> .
<name5> = <name4>	substitute <name4> for <name5> .
<name5> = <name2>	substitute <name2> for <name5> .
<name6> = <name5>	substitute <name5> for <name6> .
<name6> <name4> ( <name2> ) :	derive the <name6> <name4> from the <name2> base <name6> .
def <name6> ( <name3> , <name1> , <name2> , <name4> ) :	define the method <name6> with 4 arguments : <name3> , <name1> , <name2> and <name4> .
super ( <name3> , self ) . <name6> ( <name4> )	call the method <name6> with an argument <name4> , from the base class of the class <name3> .
<name1> . <name5> = <name5>	substitute <name5> for <name1> .func .
<name1> . <name6> = <name6>	substitute <name6> for <name1> .prefix .
def <name1> ( <name2> , <name4> ) :	define the method <name1> with 2 arguments : <name2> and <name4> .
<name5> <name3> . startswith ( <name6> . prefix ) :	<name5> <name3> starts with <name6> .prefix .
<name3> = <name1>	<name3> is boolean <name1> .
<name2> = <name2> [ len ( <name1> . prefix ) : ]	<name2> is a list with elements of list <name2> from length of <name1> .prefixes index to the end ,
else :	if not ,
<name5> = <name6>	<name5> is boolean <name6> .
<name1> = super ( <name2> , self ) . <name6> ( <name5> )	call the method <name6> with an argument <name5> from the base class of the class <name2> , substitute the result for <name1> .
<name3> <name1> :	<name3> <name1> is true ,
return <name3> . func ( <name6> )	call the method <name3> .func with an argument <name6> .
<name2> <name1>	<name2> <name1> .
<name6> <name3> <name4> <name5>	<name6> <name3> <name4> <name5> into default name space .
<name5> <name2>	<name5> module <name2> .
<name6> <name4>	<name6> module <name4> .
<name1> <name5>	<name1> module <name5> .
<name2> <name4>	<name2> module <name4> .
<name4> <name2> . utils . dates <name3> <name5> , <name6> , <name1> , <name4> , <name2> , <name3>	<name4> <name2> .utils .dates <name3> <name5> , <name6> , <name1> , <name4> , <name2> and <name3> into default name space .
<name2> <name3> . utils . translation <name1> <name5> <name4> <name6>	<name2> <name3> .utils .translation <name1> <name5> <name4> <name6> into default name space .
<name2> <name4> . utils . encoding <name5> <name1>	<name2> <name4> .utils .encoding <name5> <name1> into default name space .
<name2> <name4> . utils <name5> <name3>	<name2> <name4> .utils <name5> <name3> into default name space .
<name3> <name6> . utils . timezone <name1> <name5> , <name4> , <name2>	<name3> <name6> .utils .timezone <name1> <name5> , <name4> and <name2> into default name space .
\ <name5> = re . <name4> ( r <val2>   ) \	\ <name4> regex from a string <val2> , substitute it for <name5> . \
\ <name2> = re . <name5> ( r <val3>   ) \	\ <name5> regex from a string <val3> , substitute it for <name2> . \
<name6> <name1> ( <name2> ) :	derive the <name6> <name1> from <name2> base <name6> .
def <name3> ( <name4> , <name5> ) :	define the function <name3> with 2 arguments <name4> and <name5> .
<name2> = [ ]	<name2> is an empty list .
<name1> i , piece in enumerate ( re_formatchars . split ( <name4> ( <name5> ) ) ) :	call the function <name4> with an argument <name5> , use the result as an argument <name1> the call to the method ,
<name1> <name3> % 2 :	re_formatchars .split , for every <name3> and piece in enumerated result , <name1> <name3> is even number ,
pieces . append ( <name4> ( getattr ( <name6> , <name3> ) ( ) ) )	get attribute <name3> of the <name6> object , call it and use the result as an argument for the call to the function <name4> ,
elif <name2> :	append the result to pieces . otherwise if <name2> is true ,
\ <name6> . <name4> ( <name1> . sub ( r <val2>   , <name5> ) ) \	\ call the method <name1> .sub with 2 arguments : raw string <val2> and <name5> , <name4> the result to <name6> . \
<name4> ''   . <name5> ( <name1> )	<name5> elements of <name1> into a string , <name4> it .
<name1> <name5> ( <name3> ) :	derive the <name1> <name5> from the base <name1> <name3> .
def <name6> ( <name3> , <name1> ) :	define the method <name6> with 2 arguments : <name3> and <name1> .
<name5> . data = <name4>	substitute <name4> for <name5> .data .
<name5> . timezone = <name3>	<name5> .timezone is <name3> .
<name1> isinstance ( <name6> , <name5> . <name5> ) :	<name1> <name6> is an instance of <name5> .datetime ,
if <name2> ( <name6> ) :	call the function <name2> with an argument <name6> .
<name5> . timezone = <name3> ( )	call the function <name3> , substitute the result for <name5> .timezone .
else :	if not ,
<name3> . timezone = <name6> . tzinfo	substitute <name6> .tzinfo for <name3> .timezone .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name1> <name3> . data . hour >  <val2> :	<name1> <name3> .data .hour is greater than integer <val2> ,
<name3> <name5> ( <val2>   )	call the function <name5> with an argument string <val2> , <name3> the result .
<name4> <name5> ( <val2>   )	call the function <name5> with an argument string <val2> , <name4> the result .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name3> <name4> . data . hour >  <val2> :	<name3> <name4> .data .hour is greater than integer <val2> ,
<name2> <name3> ( <val1>   )	call the function <name3> with an argument string <val1> , <name2> the result .
<name6> <name4> ( <val5>   )	call the function <name4> with an argument string <val5> , <name6> the result .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name6> <name3> ( <val4>   )	<name6> an <name3> exception with an argument string <val4> .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name1> not <name6> . timezone :	<name1> <name6> .timezone is false ,
"<name5> """""	<name5> an empty string .
<name2> :	<name2> ,
if hasattr ( <name1> . data , <val2>   ) <name6> <name1> . data . tzinfo :	is <name1> .data has an attribute <val2> <name6> <name1> .data .tzinfo is true ,
"<name4> <name5> . data . tzinfo . tzname ( <name5> . data ) or """""	call the method <name5> .data .tzinfo .tzname with an argument <name5> .data , if it is true , <name4> it , otherwise <name4> an empty string .
except <name2> :	if <name2> exception is caught ,
pass	do nothing .
"<name3> """""	<name3> an empty string .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name2> <name3> . data . minute == <val6> :	<name2> <name3> .data .minute equals integer <val6> ,
<name4> <name5> . g ( )	call the method <name5> .g , <name4> the result .
<name1> <val2>   % ( <name3> . g ( ) , <name3> . i ( ) )	<name1> a string <val2> formated with the results of the functions <name3> .g and <name3> .i , respectivley .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name3> <name5> . data . hour == <val6> :	<name3> <name5> .data .hour equals integer <val6> ,
<name5> <val6>	<name5> integer <val6> .
<name2> <name3> . data . hour >  <val5> :	<name2> <name3> .data .hour is greater than inreger <val5> ,
<name5> <name6> . data . hour - <val4>	subtract integer <val4> from <name6> .data .hour , <name5> the result .
<name1> <name4> . data . hour	<name1> <name4> .data .hour .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name5> <name1> . data . hour	<name5> <name1> .data .hour .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name5> <val1>   % <name4> . g ( )	<name5> a string <val1> formated with the result of the function <name4> .g .
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name6> <val2>   % <name3> . G ( )	<name6> a string <val2> formated with the result of the function <name3> .G .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name4> <val2>   % <name1> . data . minute	<name4> a string <val2> formated with <name1> .data .minute .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name6> not <name2> . timezone :	<name6> <name2> .timezone is false ,
"<name6> """""	<name6> an empty string .
<name6> = <name4> . Z ( )	call the method <name4> .Z , substitute the result for <name6> .
<name4> = <val2>   <name3> <name5> <  <val6> else <val1>	<name3> <name5> smaller than integer <val6> , <name4> is <val2> , otherwise <name4> is <val1> ,
<name6> = abs ( <name6> )	substitute absolute <name6> for <name6> .
<name2> <val6> % ( <name1> , <name3> // 3600 , ( <name3> // 60 ) % 60 )	<name2> a string <val6> formated with <name1> , floored result of the division of <name3> by integer 3000 ,
def <name5> ( <name3> ) :	reminder of the division of floored result of division of seconds by 60 , by integer 60 . define the method <name5> with an argument <name3> .
<name4> <name3> . data . minute == <val6> <name5> <name3> . data . hour == <val6> :	<name4> <name3> .data .minute equals integer <val6> <name5> <name3> .data .hour equals integer <val6> ,
<name6> <name1> ( <val3>   )	call the function <name1> with an argument string <val3> , <name6> the result .
<name3> <name5> . data . minute == <val6> <name1> <name5> . data . hour == <val4> :	<name3> <name5> .data .minute equals integer <val6> <name1> <name5> .data .hour equals integer <val4> ,
<name2> <name3> ( <val1>   )	call the function <name3> with an argument string <val1> , <name2> the result .
<name6> '%s %s'   % ( <name4> . f ( ) , <name4> . <name5> ( ) )	<name6> <name5> string '%02d' formated with <name4> .data .month .
def <name1> ( <name2> ) :	define the method <name1> with an argument <name2> .
<name4> <val1>   % <name6> . data . second	<name4> a string <val1> formated with <name6> .data .second .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name4> not <name5> . timezone :	<name4> <name5> .timezone is false ,
"<name3> """""	<name3> an empty string .
<name4> = <name2> . timezone . tzname ( <name2> . data ) <name6> <name2> . timezone else None	<name6> <name2> .timezone is true , call the method <name2> .timezone .tzname with an argument <name2> .data , substitute the result for <name4> ,
<name2> <name1> <name6> <name4> :	otherwise <name1> <name6> <name4> . <name2> <name1> <name6> <name4> ,
<name5> = <name6> . format ( 'O'   )	call the method <name6> .format with an argument string '0' , substitute the result for <name5> .
<name3> <name5> . text_type ( <name4> )	call the function <name5> .text_type with an argument <name4> , <name3> the result .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name2> <val6>   % <name5> . data . microsecond	<name2> a string <val6> formated with <name5> .data .microsecond .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name6> not <name3> . timezone :	<name6> <name3> .timezone is true ,
"<name4> """""	<name4> an empty string .
<name4> = <name1> . timezone . utcoffset ( <name1> . data )	call the method <name1> .timezone .utcoffset with an argument <name1> .data , substitute the result for <name4> .
<name4> <name5> . days * <val2> + <name5> . seconds	multiply <name5> .days with <val2> , add <name5> .seconds to the result , <name4> the result .
<name4> <name6> ( <name5> ) :	derive the <name4> <name6> from the base <name4> <name5> .
<name1> = [ <name3> , <val2> , <val6> , <val5> , <val4> , <val1> , <val3> , <val2> , 212 , 243 , 273 , 304 , 334 ]	<name1> is a list with 13 elements : <name3> , integer <val2> , integer <val6> , integer <val5> , integer <val4> , integer <val1> , integer <val3> , integer <val2> ,
def <name3> ( <name4> ) :	integer 212 , integer 243 , integer 273 , integer 304 and integer 334 . define the method <name3> with an argument <name4> .
<name3> <name4> [ <name5> . data . month ]	<name3> the value under the <name5> .data .month key of the <name4> dictionary .
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name4> <name6> . data . isoformat ( )	call the method <name6> .data .isoformat , <name4> the result .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name5> <val3>   % <name1> . data . day	<name5> a string <val3> formated with <name1> .data .day .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name4> <name3> [ <name6> . data . weekday ( ) ]	call the method <name6> .data .weekday , use the result as an key for obtaining <name3> dictionary value , <name4> it .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name2> <name1> [ <name6> . data . month ]	<name2> the value under the <name6> .data .month key of the <name1> dictionary .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name4> <name1> [ <name2> . data . month ]	<name4> the value under the <name2> .data .month key of the <name1> dictionary .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name5> <name2> . timezone <name3> <name2> . timezone . dst ( <name2> . data ) :	<name5> <name2> .timezone is true <name3> call to the method <name2> .timezone .dst with an argument <name2> .data , evaluates to true ,
<name5> <val4>	<name5> string <val4> .
else :	if not ,
<name3> <val1>	<name3> string <val1> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name5> <name2> . data . day	<name5> <name2> .data .day .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name6> <name1> [ <name4> . data . weekday ( ) ]	call the method <name4> .data .weekday , use the result as an key for obtaining <name1> dictionary value , <name6> it .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name5> <name3> . isleap ( <name4> . data . year )	call the method <name3> .isleap with an argument <name4> .data .year , <name5> the result .
def <name6> ( <name3> ) :	define the method <name6> with an argument <name3> .
<name5> <val1>   % <name3> . data . month	<name5> a string <val1> formated with <name3> .data .month .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name5> <name2> [ <name3> . data . month ] . <name6> ( )	get the value under the <name3> .data .month key of the <name2> dictionary , call on it the method <name6> , <name5> the result .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name3> <name4> . data . month	<name3> <name4> .data .month .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name4> <name3> [ <name2> . data . month ]	<name4> the value under the <name2> .data .month key of the <name3> dictionary .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name5> <name2> . data . isocalendar ( ) [ 0 ]	call the method <name2> .data .isocalendar , <name5> the first element of the result .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name1> <name4> . format ( <val6>   )	call the method <name1> <name4> .format with an argument string <val6> , <name1> the result .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name1> <name5> . data . day in ( <val2> , <val4> , <val6> ) :	<name1> <name5> .data .day equals integer <val2> , <val4> or <val6> ,
<name6> <val5>	<name6> string <val5> .
<name2> = <name6> . data . day % <val1>	divide <name6> .data .day by <val1> , substitute reminder of the result for <name2> .
<name5> last == <val6> :	<name5> las equals integer <val6> ,
<name5> <val4>	<name5> string <val4> .
<name2> last == <val4> :	<name2> las equals integer <val4> ,
<name2> <val3>	<name2> string <val3> .
<name1> last == <val2> :	<name1> las equals integer <val2> ,
<name1> <val5>	<name1> string <val5> .
<name1> <val2>	<name1> string <val2> .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
return '%02d'   % <name5> . monthrange ( <name1> . data . year , <name1> . data . month ) [ 1 ]	call the method <name5> .monthrange with 2 arguments : <name1> .data .year and <name1> .data .month ,
def <name4> ( <name6> ) :	format string '%02d' with the second element of the result , return it . define the method <name4> with an argument <name6> .
<name5> isinstance ( <name1> . data , <name2> . <name2> ) <name4> <name6> ( <name1> . data ) :	<name5> <name1> .data is an instance of <name2> .datetime <name4> result of the function <name6> called with an argument <name1> .data evaluates to true ,
return int ( <name4> . timegm ( <name2> . data . utctimetuple ( ) ) )	call the method <name2> .data .utctimetuple , use the result as an argument for the call to the function <name4> .timegm ,
else :	return result converted into an integer . if not ,
return int ( <name5> . mktime ( <name4> . data . timetuple ( ) ) )	call the method <name4> .data .timetuple , use the result as an argument for the call to the function <name5> .mktime ,
def <name2> ( <name6> ) :	return result converted into an integer . define the method <name2> with an argument <name6> .
<name2> ( <name6> . data . weekday ( ) + <val3> ) % <val5>	call the method <name6> .data .weekday , increment the result by an integer <val3> , divide it with integer <val5> , <name2> the reminder of the division .
def <name1> ( <name5> ) :	define the method <name1> with an argument <name5> .
<name2> = <name5>	<name2> is <name5> .
jan1_weekday = <name1> . data . replace ( <name2> = <val6> , <name3> = <val6> ) . weekday ( ) + <val6>	call the method <name1> .data .replace with 2 arguments : <name2> as integer <val6> and <name3> as integer <val6> , on the result call the method ,
<name5> = <name3> . data . <name5> ( ) + <val2>	<name5> , increment the result by integer <val2> and substitute it for jan1_weekday . call the method <name3> .data .weekday , increment the result by integer <val2> , substitute the result for <name5> .
<name4> = <name5> . z ( )	call the method <name5> .z , substitute the result for <name4> .
<name4> <name1> <= ( <val2> - <name5> ) <name3> <name5> >  <val6> :	<name4> <name1> is smaller than or equalt to <name5> subtracted from integer <val2> <name3> <name5> is greater than integer <val6> ,
<name5> <name1> == <val3> <name6> ( <name1> == <val4> <name2> <name5> . isleap ( self . data . year - 1 ) ) :	<name5> <name1> equals integer <val3> , <name6> <name5> <name1> equals integer <val4> <name2> call to the function <name5> .isleap ,
<name6> = <val5>	with an argument self .data .year decremented by 1 , evaluates to true , <name6> is integer <val5> .
else :	if not ,
<name1> = <val4>	<name1> is integer <val4> .
else :	if not ,
<name5> <name1> . isleap ( <name6> . data . year ) :	call the function <name1> .isleap with an argument <name6> .data .year , <name5> it evaluates to true ,
<name5> = <val4>	<name5> is integer <val4> .
else :	if not ,
<name1> = <val4>	<name1> is integer <val4> .
<name2> ( <name4> - <name6> ) <  ( <val3> - <name1> ) :	subtract <name6> from <name4> , <name2> the result is smaller than the result of subtraction of <name1> from integer <val3> ,
<name3> = <val4>	<name3> is integer <val4> .
else :	if not ,
j = <name2> + ( <val6> - <name5> ) + ( <name4> - <val3> )	sum <name2> , result of the subtraction of <name5> from integer <val6> and subtraction of integer <val3> from <name4> .
<name1> = <name2> // <val4>	divide <name2> by integer <val4> , substitute the floored result for <name1> .
<name6> <name2> >  <val5> :	<name6> <name2> is greater than integer <val5> ,
<name4> -= <val1>	decrement <name4> by integer <val1> .
<name1> <name6>	<name1> <name6> .
def <name3> ( <name4> ) :	define the method <name3> with an argument <name4> .
<name1> <name4> . text_type ( <name2> . data . year ) [ <val6> : ]	call the function <name4> .text_type with an argument <name2> .data .year , <name1> the result without the first <val6> elements .
def <name4> ( <name5> ) :	define the method <name4> with an argument <name5> .
<name6> <name2> . data . year	<name6> <name2> .data .year .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name1> = <name3> . year_days [ <name3> . data . month ] + <name3> . data . day	append <name3> .data .day to the value under the <name3> .data .month key of the <name3> .year_days dictionary , substitute the result for <name1> .
<name3> <name5> . L ( ) <name6> <name5> . data . month >  <val4> :	<name3> call to the method <name5> .L evaluates to true , <name6> result of the call to the method <name5> .data .month is greater than integer <val4> ,
<name2> += <val5>	increment <name2> by integer <val5> .
<name3> <name4>	<name3> <name4> .
def <name4> ( <name1> , <name5> ) :	define the function <name4> with 2 arguments : <name1> and <name5> .
<name2> = <name3> ( <name1> )	<name2> is an instance of <name3> class , created with an argument <name1> .
<name5> <name4> . format ( <name6> )	call the method <name4> .format with an argument <name6> , <name5> the result .
def <name4> ( <name5> , <name3> ) :	define the function <name4> with 2 arguments : <name5> and <name3> .
<name1> = <name2> ( <name4> )	<name1> is an instance of <name2> class , created with an argument <name4> .
<name1> <name2> . format ( <name4> )	call the method <name2> .format with an argument <name4> , <name1> the result .
<name2> <name1>	<name2> module <name1> .
<name2> <name1>	<name2> module <name1> .
<name5> <name6> . utils <name2> <name4>	<name5> <name6> .utils <name2> <name4> into default name space .
<name2> <name5> . utils . timezone <name3> <name4> , <name1>	<name2> <name5> .utils .timezone <name3> <name4> and <name1> into default name space .
\ <name2> = re . <name1> ( r <val4>    ) \	\ <name1> regex from raw string <val4> , substitute it for <name2> . \
\ time_re = re . <name3> ( r '(?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})'    r '(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?'    ) \	\ <name3> regex from raw string '(?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?' , \
\ datetime_re = re . <name1> ( r '(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})'    r '[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})'    r '(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?'    r '(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$'    ) \	\ substitute it for time_re . <name1> regex from raw string '(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})' \
def <name5> ( <name4> ) :	\ '(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$' , substitute it for datetime_re . define the function <name5> with an argument <name4> . \
<name2> = <name3> . <name2> ( <name4> )	<name2> regex <name3> with <name4> , substitute the result for <name2> .
<name2> <name4> :	<name2> <name4> is true ,
kw = dict ( ( k , int ( v ) ) <name4> k , v in <name6> . iteritems ( <name2> . groupdict ( ) ) )	call the method <name2> .groupdict , use the result as an argument <name4> the call to the function <name6> .iteritems ,
<name6> <name2> . date ( ** <name1> )	for every k and v in the previous result , add a key into a dictionary : v converted to an integer for k , substitute the resulting dictionary for <name1> . call the method <name2> .date with an argument unpacked dictionary <name1> , <name6> the result .
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name4> = <name2> . <name4> ( <name6> )	<name4> regex <name2> with <name6> , substitute the result for <name4> .
<name1> <name2> :	<name1> <name2> is true ,
<name4> = <name5> . groupdict ( )	call the method <name5> .groupdict , substitute the result for <name4> .
<name6> <name5> [ <val1>   ] :	<name6> value under the <val1> key of the <name5> dictionary is true ,
<name3> [ <val4>   ] = <name3> [ <val4>   ] . ljust ( <val2> , <val6>   )	left justify value under the <val4> key of the <name3> dictionary , in the field of width <val2> , fill the rest with <val6> ,
<name5> = dict ( ( <name4> , int ( <name3> ) ) <name6> <name4> , <name3> <name1> <name2> . iteritems ( <name5> ) if <name3> is not None )	substitute the result <name6> value under the 'microsecond' key of the <name5> dictionary . update a dictionary with an entry <name3> converted to an integer <name6> <name4> , <name6> every <name4> and <name3> <name1> result of the function <name2> .iteritems ,
<name6> <name4> . time ( ** <name3> )	called with an argument <name3> , only if v is not None , substitute the result for <name3> . call the method <name4> .time with an argument unpacked dictionary <name3> , <name6> the result .
def <name4> ( <name1> ) :	define the function <name4> with an argument <name1> .
<name5> = <name6> . <name5> ( <name1> )	<name5> regex <name6> with <name1> , substitute the result for <name5> .
<name6> <name5> :	<name6> <name5> is true ,
<name2> = <name5> . groupdict ( )	call the method <name5> .groupdict , substitute the result for <name2> .
<name1> <name6> [ <val2>   ] :	<name1> value under the <val2> key of the <name6> dictionary is true ,
<name3> [ <val2>   ] = <name3> [ <val2>   ] . ljust ( <val4> , <val6>   )	left justify value under the <val2> key of the <name3> dictionary , in the field of width <val4> , fill the rest with <val6> ,
<name1> = <name2> . pop ( <val5>   )	substitute the result for value under the 'microsecond' key of the <name2> dictionary . remove entry under the <val5> key of the <name2> dictionary , substitute it for <name1> .
<name4> <name3> == <val5>   :	<name4> <name3> equals a string <val5> ,
<name3> = <name1>	substitute <name1> for <name3> .
elif <name5> <name4> <name3> <name1> :	otherwise if <name5> <name4> <name3> <name1> ,
offset_mins = int ( <name6> [ - 2 : ] ) <name5> len ( <name6> ) >  <val1> else 0	<name5> length of <name6> is greater than integer <val1> , convert elements of <name6> from indexes 1 to <val1> to an integer ,
offset = <val1> * int ( <name3> [ <val6> : <val2> ] ) + <name4>	substitute the result for <name4> , otherwise <name4> is integer 0 . convert elements of <name3> from indexes <val6> to <val2> to an integer , multiply it by integer <val1> and increment it by <name4> ,
<name2> <name6> [ 0 ] == <val4>   :	substitute the result for offset . <name2> first element of <name6> equals <val4> ,
<name5> = - <name5>	multiply <name5> by integer -1 .
<name4> = <name6> ( <name2> )	call the function <name6> with an argument <name2> , substitute the result for <name4> .
kw = dict ( ( <name2> , int ( <name6> ) ) <name5> <name2> , <name6> <name4> <name3> . iteritems ( kw ) if <name6> is not None )	update a dictionary with an entry <name6> converted to an integer <name5> <name2> , <name5> every <name2> and <name6> <name4> result of the function <name3> .iteritems ,
<name4> [ <val2>   ] = <name5>	called with an argument <name4> , only if v is not None , substitute the result for <name4> . substitute <name5> for value under the <val2> key of the <name4> dictionary .
<name4> <name2> . <name2> ( ** <name6> )	call the method <name2> .datetime with an argument unpacked dictionary <name6> , <name4> the result .
<name4> <name5> . utils . translation <name2> <name6> <name1> <name3> , <name4>	<name4> <name5> .utils .translation <name2> <name6> <name1> <name3> and <name4> into default name space .
<name3> = {   <val5> : <name2> ( <val6>   ) , 1 : <name2> ( 'Tuesday'   ) , 2 : <name2> ( 'Wednesday'   ) , 3 : <name2> ( 'Thursday'   ) , 4 : <name2> ( 'Friday'   ) , 5 : <name2> ( 'Saturday'   ) , 6 : <name2> ( 'Sunday'   ) }	<name3> is an dictionary with 7 entries : result of the call to the function <name2> with an argument string <val6> for <val5> ,
<name3> = {   <val1> : <name6> ( <val5>   ) , <val4> : <name6> ( 'Tue'   ) , <val2> : <name6> ( 'Wed'   ) , <val3> : <name6> ( 'Thu'   ) , <val1> : <name6> ( 'Fri'   ) , <val6> : <name6> ( 'Sat'   ) , <val5> : <name6> ( 'Sun'   ) }	result of the call to the function <name6> with an argument string 'Tuesday' for <val4> , result of the call to the function <name6> with an argument string 'Wednesday' for <val2> , result of the call to the function <name6> with an argument string 'Thursday' for <val3> , result of the call to the function <name6> with an argument string 'Friday' for <val1> , result of the call to the function <name6> with an argument string 'Saturday' for <val6> , and result of the call to the function <name6> with an argument string 'Sunday' for <val5> . <name3> is an dictionary with 7 entries : result of the call to the function <name6> with an argument string <val5> for <val1> ,
<name2> = {   <val1>   : <val4> , <val5>   : <val3> , <val6>   : <val2> , <val1>   : <val4> , <val5>   : <val3> , <val6>   : <val2> , <val1>   : <val4> }	result of the call to the function _ with an argument string 'Tue' for <val3> , result of the call to the function _ with an argument string 'Wed' for <val2> , result of the call to the function _ with an argument string 'Thu' for <val4> , result of the call to the function _ with an argument string 'Fri' for <val3> , result of the call to the function _ with an argument string 'Sat' for <val2> , and result of the call to the function _ with an argument string 'Sun' for <val4> . <name2> is an dictionary with 7 entries : <val4> for <val1> , <val3> for <val5> , <val2> for <val6> , <val4> for <val1> , <val3> for <val5> , <val2> for <val6> and <val4> for <val1> .
<name3> = {   <val5> : <name1> ( <val6>   ) , 2 : <name1> ( 'February'   ) , 3 : <name1> ( 'March'   ) , 4 : <name1> ( 'April'   ) , 5 : <name1> ( 'May'   ) , 6 : <name1> ( 'June'   ) , 7 : <name1> ( 'July'   ) , 8 : <name1> ( 'August'   ) , 9 : <name1> ( 'September'   ) , 10 : <name1> ( 'October'   ) , 11 : <name1> ( 'November'   ) , <val2> : <name1> ( 'December'   ) }	<name3> is an dictionary with <val2> entries : result of the call to the function <name1> with an argument string <val6> for <val5> ,
<name1> = {   <val6> : <name3> ( <val5>   ) , <val2> : <name3> ( 'feb'   ) , <val4> : <name3> ( 'mar'   ) , <val1> : <name3> ( 'apr'   ) , <val6> : <name3> ( 'may'   ) , <val3> : <name3> ( 'jun'   ) , <val5> : <name3> ( 'jul'   ) , <val2> : <name3> ( 'aug'   ) , <val4> : <name3> ( 'sep'   ) , <val1> : <name3> ( 'oct'   ) , <val6> : <name3> ( 'nov'   ) , <val3> : <name3> ( 'dec'   ) }	result of the call to the function <name3> with an argument string 'February' for <val2> , result of the call to the function <name3> with an argument string 'March' for <val4> , result of the call to the function <name3> with an argument string 'April' for <val1> , result of the call to the function <name3> with an argument string 'May' for <val6> , result of the call to the function <name3> with an argument string 'June' for <val3> , result of the call to the function <name3> with an argument string 'July' for <val5> , result of the call to the function <name3> with an argument string 'August' for <val2> , result of the call to the function <name3> with an argument string 'September' for <val4> , result of the call to the function <name3> with an argument string 'October' for <val1> , result of the call to the function <name3> with an argument string 'November' for <val6> , and result of the call to the function <name3> with an argument string 'December' for <val3> . <name1> is an dictionary with <val3> entries : result of the call to the function <name3> with an argument string <val5> for <val6> ,
<name3> = {   <val1>   : <val6> , <val5>   : <val2> , <val4>   : <val3> , <val1>   : <val6> , <val5>   : <val2> , <val4>   : <val3> , <val1>   : <val6> , <val5>   : <val2> , <val4>   : <val3> , <val1>   : <val6> , <val5>   : <val2> , <val4>   : <val3> }	result of the call to the function _ with an argument string <val5> for <val2> , result of the call to the function _ with an argument string <val4> for <val3> , result of the call to the function _ with an argument string <val1> for <val6> , result of the call to the function _ with an argument string <val5> for <val2> , result of the call to the function _ with an argument string <val4> for <val3> , result of the call to the function _ with an argument string <val1> for <val6> , result of the call to the function _ with an argument string <val5> for <val2> , result of the call to the function _ with an argument string <val4> for <val3> , result of the call to the function _ with an argument string <val1> for <val6> , result of the call to the function _ with an argument string <val5> for <val2> , result of the call to the function _ with an argument string <val4> for <val3> . <name3> is an dictionary with <val3> entries : <val6> for <val1> , <val2> for <val5> , <val3> for <val4> , <val6> for <val1> , <val2> for <val5> , <val3> for <val4> ,
<name4> = {   <val2> : <name6> ( <val5>   , <val3>   ) , <val1> : <name6> ( <val5>   , 'Feb.'   ) , 3 : <name6> ( <val5>   , 'March'   ) , 4 : <name6> ( <val5>   , 'April'   ) , 5 : <name6> ( <val5>   , 'May'   ) , 6 : <name6> ( <val5>   , 'June'   ) , <val4> : <name6> ( <val5>   , 'July'   ) , <val2> : <name6> ( <val5>   , 'Aug.'   ) , <val6> : <name6> ( <val5>   , 'Sept.'   ) , <val5> : <name6> ( <val5>   , 'Oct.'   ) , <val3> : <name6> ( <val5>   , 'Nov.'   ) , <val1> : <name6> ( <val5>   , 'Dec.'   ) }	<val4> for 'jul' , <val2> for 'aug' , <val6> for 'sep' , <val5> for 'oct' , <val3> for 'nov' and <val1> for 'dec' . <name4> is an dictionary with <val1> entries : result of the function <name6> with <val1> arguments : <val5> and <val3> for <val2> ,
<name6> = {   <val2> : <name1> ( <val4>   , <val5>   ) , <val3> : <name1> ( <val4>   , 'February'   ) , <val6> : <name1> ( <val4>   , <val2>   ) , <val1> : <name1> ( <val4>   , <val4>   ) , <val5> : <name1> ( <val4>   , <val3>   ) , <val6> : <name1> ( <val4>   , <val2>   ) , <val1> : <name1> ( <val4>   , <val4>   ) , <val5> : <name1> ( <val4>   , 'August'   ) , <val3> : <name1> ( <val4>   , 'September'   ) , <val6> : <name1> ( <val4>   , 'October'   ) , <val2> : <name1> ( <val4>   , 'November'   ) , <val1> : <name1> ( <val4>   , 'December'   ) }	result of the function <name1> with <val3> arguments : strings 'abbrev. month' and 'Feb.' for <val3> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and <val2> for <val6> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and <val4> for <val1> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and <val3> for <val5> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and <val2> for <val6> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and <val4> for <val1> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and 'Aug.' for <val5> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and 'Sept.' for <val3> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and 'Oct.' for <val6> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and 'Nov.' for <val2> , result of the function <name1> with <val3> arguments : strings 'abbrev. month' and 'Dec.' for <val1> , <name6> is an dictionary with <val1> entries : result of the function <name1> with <val3> arguments : <val4> and <val5> for <val2> ,
<name2> <name1> <name5> <name4> <name6> <name3> , <name1> <name6> <name2>	<name2> <name1> <name5> <name4> <name6> <name3> and <name1> <name6> <name2> into default name space .
<name6> <name1>	<name6> module <name1> .
<name3> <name4>	<name3> module <name4> .
<name1> <name2> ( <name6> ) :	derive the <name1> <name2> from the <name6> base <name1> .
def <name2> ( <name4> , <name5> ) :	define the method <name2> with 2 arguments : <name4> and <name5> .
<name3> <name1> ( <name2> , <name4> )	call the function <name1> with 2 arguments : <name2> and <name4> , <name3> the result .
<name5> <name6> ( <name1> ) :	derive the <name5> <name6> from the <name1> base <name5> .
def <name2> ( <name3> , <name4> ) :	define the method <name2> with 2 arguments : <name3> and <name4> .
<name2> <name4> ( <name6> , <name5> )	call the function <name4> with 2 arguments : <name6> and <name5> , <name2> the result .
@  <name5>	decorator <name5> ,
def <name3> ( <name2> , <name1> , <name6> ) :	define the method <name3> with 3 arguments : <name2> , <name1> and <name6> .
return <name2> ( <name6> . year , <name6> . month , <name6> . day , <name3> . hour , <name3> . minute , <name3> . second , <name3> . microsecond , <name3> . tzinfo )	call the function <name2> with 8 arguments : <name6> .year , <name6> .month , <name6> .day , <name3> .hour , <name3> .minute , <name3> .second , <name3> .microsecond ,
def <name3> ( <name6> ) :	and time .tzinfo , return the result . define the method <name3> with an argument <name6> .
<name2> date ( <name6> . year , <name6> . month , <name6> . day )	call the function data with 3 arguments : <name6> .year , <name6> .month and <name6> .day , <name2> the result .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name3> date ( <name1> . year , <name1> . month , <name1> . day )	call the function data with 3 arguments : <name1> .year , <name1> .month and <name1> .day , <name3> the result .
def <name5> ( <name3> ) :	define the function <name5> with an argument <name3> .
<name2> = [ <name4> . year , <name4> . month , <name4> . day ]	<name2> is a list with 3 elements : <name4> .year , <name4> .month and <name4> .day .
<name1> isinstance ( <name3> , <name4> ) :	<name1> <name3> is an instance of <name4> class ,
<name6> . <name1> ( [ <name4> . hour , <name4> . minute , <name4> . second , <name4> . microsecond , <name4> . tzinfo ] )	<name1> list <name6> with a list with 5 elements : <name4> .hour , <name4> .minute , <name4> .second , <name4> .microsecond and <name4> .tzinfo .
<name2> <name5> ( * <name6> )	call the function <name5> with an argument unpacked list <name6> , <name2> the result .
<name3> = re . <name1> ( r <val4> )	<name1> the regex from the raw string <val4> , substitute the result for <name3> .
def <name3> ( <name6> , <name1> ) :	define the function <name3> with 2 arguments <name6> and <name1> .
<name2> = [ ]	<name2> is an empty list .
<name4> = <val2>	<name4> is integer <val2> .
while 1 :	endless loop ,
<name1> = <name3> . find ( <name4> , <name6> )	call the method <name3> .find with 2 arguments : <name4> and <name6> , substitute the result for <name1> .
<name2> <name6> == - 1 :	<name2> <name6> equals to integer -1 ,
<name3>	<name3> from the loop execution .
<name3> . <name6> ( <name5> )	<name6> <name5> to <name3> .
<name6> = <name3> + <val5>	add <name3> and integer <val5> , substitute the result for <name6> .
<name2> <name5>	<name2> <name5> .
def <name6> ( <name2> , <name5> ) :	define the function <name6> with 2 arguments <name2> and <name5> .
<name2> <name6> . year >= <val4> :	<name2> <name6> .year is greater than or equal to integer <val4> ,
return super ( <name3> ( <name5> ) , <name5> ) . <name4> ( <name2> )	call the method <name4> with an argument <name2> , from the base class of the <name3> of <name5> class .
<name2> = <name3> . search ( <name4> )	call the method <name3> .search with an argument <name4> , substitute the result for <name2> .
<name2> <name1> :	<name2> <name1> is true ,
"<name1> <name2> ( ""strftime of dates before 1900 does not handle"" + <name5> . group ( 0 ) )"	<name1> an <name2> exception with an argument : result of the method <name5> .group called with an argument ,
<name2> = <name1> . <name2>	"integer 0 , appended to a string ""strftime of dates before 1900 does not handle"" . substitute <name1> .year for <name2> ."
<name6> = <val3> - <name2>	subtract <name2> from integer <val3> , substitute the result for <name6> .
<name5> = <val6> * ( <name4> // <val2> + <name4> // <val1> )	floor the division of <name4> by integer <val2> and <name4> by integer <val1> , sum the two results , multiply integer <val6> by it , substitute the result for <name5> .
<name1> = <name1> + <name6>	sum <name1> and <name6> , substitute the result for <name1> .
<name6> = <name6> + ( ( <val4> - <name6> ) // <val3> ) * <val3>	subtract <name6> from integer <val4> , divide the result by integer <val3> , floor the result , multiply it with <val3> and increment by <name6> ,
<name4> = <name5> . <name4> ( )	substitute the result for year . call the method <name5> .timetuple , substitute the result for <name4> .
s1 = <name3> . strftime ( <name6> , ( year , ) + <name5> [ 1 : ] )	call the function <name3> .strftime with 2 arguments : <name6> and and <name5> without the first element ,
<name4> = <name2> ( <name1> , str ( <name6> ) )	added to a tuple with an element <name6> , substitute the result for <name1> . call the function <name2> with 2 arguments : <name1> and <name6> converted into a string , substitute the result for <name4> .
s2 = <name1> . strftime ( <name3> , ( year + 28 , ) + <name4> [ 1 : ] )	call the function <name1> .strftime with 2 arguments : <name3> and and <name4> without the first element ,
<name2> = <name5> ( <name3> , str ( <name6> + <val1> ) )	added to a tuple with an element sum of <name6> an integer <val1> , substitute the result for <name3> . call the function <name5> with 2 arguments : <name3> and sum of <name6> and integer <val1> , converted into a string , substitute the result for <name2> .
<name1> = [ ]	<name1> is an empty list .
for <name3> <name6> <name5> :	if <name3> is contained <name6> <name5> ,
<name5> <name1> <name2> <name6> :	<name5> <name1> is contained <name2> <name6> ,
<name4> . <name2> ( <name6> )	<name2> <name6> to <name4> .
<name6> = <name4>	substitute <name4> for <name6> .
<name1> = <val6> % ( <name2> . year , )	<name1> is a string <val6> formated with <name2> .year .
<name6> <name4> <name2> <name3> :	<name6> every <name4> <name2> <name3> ,
<name5> = <name5> [ : <name1> ] + <name3> + <name5> [ <name1> + <val4> : ]	concatenate first <name1> elements of <name5> , <name3> and elements of <name5> from the <name1> incremented by integer <val4> index , substitute the result for <name5> .
<name6> <name3>	<name6> <name3> .
def <name6> ( * <name5> , ** <name2> ) :	define the function <name6> with 2 arguments : unpacked list <name5> and unpacked dictionary <name2> .
<name3> = <name5> . pop ( <val4>   , <name6> )	remove elements under the <val4> key of the <name5> dictionary , if it exists substitute it for <name3> , if not <name3> is <name6> .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
def <name1> ( <name2> , * <name5> , ** <name6> ) :	define the method <name1> with 3 arguments : <name2> , unpacked list <name5> and unpacked dictionary <name6> .
obj = super ( <name2> , <name3> ) . <name6> ( <name3> )	call the method <name6> with an argument <name3> from the base class of the <name2> function .
<name1> . _constructor_args = ( <name6> , <name5> )	<name1> ._constructor_args is a tuple with 2 elements : <name6> and <name5> .
<name4> <name5>	<name4> <name5> .
def <name4> ( <name1> ) :	define the function <name4> with an argument <name1> .
<name4> ( <name3> or <val5>   % ( <name1> . __class__ . __module__ , <name1> . __class__ . __name__ ) , <name1> . _constructor_args [ 0 ] , <name1> . _constructor_args [ 1 ] , )	<name4> a tuple with 3 elements : if <name3> is true , <name3> , in not , a string <val5> formated with <name1> .__class__ .__module__ ,
<name5> . <name4> = staticmethod ( <name4> )	and obj .__class__ .__name__ , first element of obj ._constructor_args and second element of obj ._constructor_args . <name5> .__new__ is a static method of the function <name4> .
<name5> . <name6> = <name6>	substitute <name6> for <name5> .deconstruct .
<name6> <name2>	<name6> <name2> .
<name4> not <name2> :	<name4> <name2> is true ,
<name6> <name3>	<name6> <name3> .
<name1> <name3> ( * <name4> , ** <name5> )	call the function <name3> with 2 arugments : unpacked list <name4> and unpacked dictionary <name5> , <name1> the result .
<name5> <name4> <name6> <name1> , <name2> , <name3>	<name5> <name4> <name6> <name1> , <name2> and <name3> into default name space .
<name4> <name2> . utils <name3> <name1>	<name4> <name2> .utils <name3> <name1> into default name space .
<name5> <name3> ( <name2> ) :	derive the <name5> <name3> from the <name2> base <name5> .
def <name5> ( <name6> , <name4> , <name1> ) :	define the method <name5> with 3 arguments : <name6> , <name4> and <name1> .
<name2> <name6> <name3> <name5> <name4> :	<name2> <name6> <name3> <name5> <name4> ,
<name2> <name3> ( <val6> )	<name2> an <name3> exception with an argument string <val6> .
<name1> super ( <name2> , self ) . <name6> ( <name3> , <name5> )	call the method <name6> with 2 arguments : <name3> and <name5> , from the base class of the <name2> class , <name1> the result .
def <name1> ( <name3> ) :	define the function <name1> with an argument <name3> .
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
def <name4> ( <name5> , * <name1> , ** <name2> ) :	define the method <name4> with 3 arguments : <name5> , unpacked list <name1> and unpacked dictionary <name2> .
@  <name1>	<name1> <name1> .
def <name2> ( * <name4> , ** <name5> ) :	define the function <name2> with 2 arguments : unpacked list <name4> and unpacked dictionary <name5> .
return <name5> . __get__ ( <name2> , <name1> ( <name2> ) ) ( * args2 , ** kwargs2 )	call the method <name5> .__get__ with 2 arguments : <name2> and <name1> of <name2> object , call the result with 2 arguments :
<name6> <name3> ( * <name4> , ** <name2> )	unpacked list args2 and unpacked dictionary kwargs2 , <name6> the result . call the function <name3> with 2 arguments : unpacked list <name4> and unpacked dictionary <name2> , <name6> the result .
@  <name6>	<name6> <name6> .
def <name4> ( * <name6> , ** <name1> ) :	define the function <name4> with 2 arguments : unpacked list <name6> and unpacked dictionary <name1> .
pass	do nothing .
<name6> ( <name1> , <name4> )	call the function <name6> with 2 arguments : <name1> and <name4> .
<name5> ( <name3> , <name2> )	call the function <name5> with 2 arguments : <name3> and <name2> .
<name3> <name6>	<name3> <name6> .
<name4> ( <name2> , <name6> , <name1> = <name3> ( <name6> ) )	call the function <name4> with 3 arguments : <name2> , <name6> and <name1> as result of the function <name3> ,
<name1> hasattr ( <name4> , '__name__'   ) :	called with an argument <name4> . <name1> <name4> has an attribute 'process_view' ,
<name4> . __name__ = <val3>   % <name1> . __name__	<name4> .__name__ is a string <val3> formated with <name1> .__name__ .
else :	if not ,
<name1> . __name__ = <val5>   % <name2> . __class__ . __name__	<name1> .__name__ is a string <val5> formated with <name2> .__class__ .__name__ .
<name1> <name5>	<name1> <name5> .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name1> <name4> ( <name3> )	call the function <name4> with an argument <name3> , <name1> the result .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name1> <name4> ( <name5> ) ( )	call the function <name4> with an argument <name5> , call the result , <name1> the new result .
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
<name5> <name3> . PY3 :	<name5> <name3> .PY3 is true ,
<name6> <name5>	<name6> <name5> .
else :	if not ,
<name5> <name6> ( <name1> <name2> <name1> <name4> <name3> <name5> hasattr ( fn , <name1> ) )	<name5> fh has an attribute <name1> , <name2> every <name1> <name4> <name3> , put <name1> into <name1> <name6> , <name5> the resulting <name6> .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
def _make_decorator ( * <name6> , ** <name5> ) :	define the function make_decorator with 2 arguments : unpacked list <name6> and unpacked dictionary <name5> .
middleware = <name3> ( * <name6> , ** <name4> )	call the function <name3> with 2 arguments : unpacked list <name6> and unpacked dictionary <name4> ,
def <name5> ( <name1> ) :	substitute the middleware . define the function <name5> with an argument <name1> .
@  <name2> ( <name1> , <name4> = <name6> ( <name1> ) )	decorator function <name2> with 2 arguments : <name1> and <name4> set to result of the function <name6> ,
def <name1> ( <name5> , * <name2> , ** <name4> ) :	called with an argument view_func . define the function <name1> with 3 arguments : <name5> , unpacked list <name2> and unpacked dictionary <name4> .
<name4> hasattr ( <name6> , <val5>   ) :	<name4> <name6> has an attribute <val5> ,
<name4> = <name2> . process_request ( <name6> )	call the method <name2> .process_request with an argument <name6> , substitute the <name4> for <name4> .
<name6> <name2> <name5> <name3> <name4> :	<name6> <name2> <name5> <name3> <name4> ,
     <name1> <name5>	<name1> <name5> .
<name1> hasattr ( <name4> , <val2>   ) :	<name1> <name4> has an attribute <val2> ,
<name4> = <name6> . process_view ( <name2> , <name5> , <name3> , <name1> )	call the method <name6> .process_view with 4 arguments : <name2> , <name5> , <name3> and <name1> , substitute the <name4> for <name4> .
<name3> <name4> <name1> <name5> <name6> :	<name3> <name4> <name1> <name5> <name6> ,
     <name4> <name6>	<name4> <name6> .
<name4> :	<name4> ,
<name4> = <name3> ( <name6> , * <name5> , ** <name2> )	call the function <name3> with 3 arguments : <name6> , unpacked list <name5> , unpacked dictionary <name2> , substitute the result for <name4> .
except <name2> as <name5> :	if <name2> , renamed to <name5> , exception is caught ,
<name6> hasattr ( <name2> , <val5>   ) :	<name6> <name2> has an attribute <val5> ,
     <name2> = <name4> . process_exception ( <name6> , <name1> )	call the method <name4> .process_exception with 2 arguments : <name6> and <name1> , substitute the <name2> for <name2> .
<name1> <name2> <name3> <name6> <name5> :	<name1> <name2> <name3> <name6> <name5> ,
         <name1> <name4>	<name1> <name4> ,
<name5>	<name5> an exception .
<name4> hasattr ( <name2> , <val3>   ) <name5> <name6> ( <name2> . render ) :	<name4> <name2> has an attribute <val3> <name5> <name2> .render is a <name6> object ,
<name1> hasattr ( <name4> , 'process_template_response'   ) :	<name1> <name4> has an attribute 'process_response' ,
     <name6> = <name3> . process_template_response ( <name2> , <name6> )	call the method <name3> .process_template_response with 2 arguments : <name2> and <name6> , substitute the result for <name6> .
<name2> hasattr ( <name5> , <val1>   ) :	<name2> <name5> has an attribute <val1> ,
     <name1> = <name4> <name2> : <name5> . process_response ( request , <name2> )	<name1> is an <name4> function with an argument <name2> and with return value result of the method <name5> .process_response ,
<name3> . add_post_render_callback ( <name2> )	called with 2 arguments : request and <name3> . call the method <name3> .add_post_render_callback with an argument <name2> .
else :	if not ,
<name3> hasattr ( <name1> , <val4>   ) :	<name3> <name1> has an attribute <val4> ,
     <name6> <name2> . process_response ( <name5> , <name1> )	call the method <name2> .process_response with 2 arguments : <name5> and <name1> , <name6> the result .
<name3> <name5>	<name3> <name5> .
<name4> <name2>	<name4> <name2> .
<name3> <name2>	<name3> <name2> .
<name2> <name1>	<name2> <name1> .
<name6> <name4>	<name6> module <name4> .
<name6> <name5>	<name6> module <name5> .
<name1> <name6> ( <name5> ) :	derive the <name1> <name6> from <name5> base <name1> .
pass	do nothing .
<name2> <name1> ( <name5> ) :	derive the <name2> <name1> from <name5> base <name2> .
pass	do nothing .
<name1> = <name4>	substitute <name4> for <name1> .
<name4> <name2> ( <name6> ) :	derive the <name4> <name2> from <name6> base <name4> .
def <name3> ( <name1> , <name6> , <name2> , <name5> , <name4> ) :	deifne the method <name3> with 5 arguments : <name1> , <name6> , <name2> , <name5> and <name4> .
<name6> . <name5> = <name5>	substitute <name5> for <name6> .class_name .
<name4> . <name2> = <name2>	substitute <name2> for <name4> .old_method_name .
self . <name5> = <name5>	substitute <name5> for <name5> .
<name1> . <name2> = <name2>	substitute <name2> for <name1> .deprecation_warning .
def <name3> ( <name5> , <name6> ) :	define the method <name3> with 2 arguments : <name5> and <name6> .
def <name1> ( * <name2> , ** <name6> ) :	define the function <name1> with 2 arguments : unpacked list <name2> and unpacked dictionary <name6> .
<name4> . warn ( <val5> % ( self . class_name , self . old_method_name , self . new_method_name ) , self . deprecation_warning , 2 )	call the function <name4> .warn with 3 arguments : string <val5> ,
<name2> <name1> ( * <name5> , ** <name4> )	formated with 3 elements : self .class_name , self .old_method_name and self .new_method_name , self .deprecation_warning and integer 2 . call the function <name1> with a arguments : unpacked list <name5> and unpacked dictionary <name4> , <name2> the result .
<name1> <name3>	<name1> <name3> .
<name2> <name4> ( <name3> ) :	derive the <name2> <name4> from <name3> base <name2> .
<name6> = ( )	<name6> is an tuple .
def <name3> ( <name4> , <name5> , <name2> , <name1> ) :	define the method <name3> with 4 arguments : <name4> , <name5> , <name2> and <name1> .
new_class = super ( <name4> , <name1> ) . <name3> ( <name1> , <name5> , <name6> , <name2> )	call the method <name3> with 4 arguments : <name1> , <name5> , <name6> and <name2> , from the base class of the class <name4> .
<name1> <name4> <name5> <name3> . getmro ( <name2> ) :	call the method <name3> .getmro with an argument <name2> , <name1> every <name4> <name5> the result ,
<name1> = <name6> . __name__	substitute <name6> .__name__ for <name1> .
<name6> <name2> <name3> <name4> . renamed_methods :	<name6> every <name2> <name3> <name4> .renamed_methods ,
<name4> = <name3> [ 0 ]	substitute first element of <name3> for <name4> .
<name5> = <name6> . __dict__ . <name2> ( <name4> )	<name2> the value under the <name4> key of the <name6> .__dict__ dictionary , substitute it for <name5> .
<name5> = <name3> [ 1 ]	substitute second element of <name3> for <name5> .
<name5> = <name4> . __dict__ . <name3> ( <name1> )	<name3> the value under the <name1> key of the <name4> .__dict__ dictionary , substitute it for <name5> .
<name5> = <name4> [ 2 ]	substitute third element of <name4> for <name5> .
<name1> = <name3> ( <name4> , * <name5> )	call the function <name3> with 2 arguments : <name4> and unpacked list <name5> , substitute the result for <name1> .
<name2> not <name1> <name6> <name4> :	<name2> <name1> is false <name6> <name4> is true ,
<name1> . warn ( <val2> % ( class_name , old_method_name , new_method_name ) , deprecation_warning , 2 )	call the function <name1> .warn with 3 arguments : string <val2> ,
setattr ( <name1> , <name5> , <name6> )	formated with 3 elements : class_name , old_method_name and <name5> , deprecation_warning and integer 2 . set <name5> attribute of the <name1> object to <name6> .
setattr ( <name6> , <name1> , <name4> ( <name5> ) )	set <name1> attribute of the <name6> object to the result of the function <name4> called with an argument <name5> .
<name1> not <name3> <name5> <name2> :	<name1> <name3> is false <name5> <name2> is true ,
setattr ( <name1> , <name2> , <name4> ( <name6> ) )	set <name2> attribute of the <name1> object to the result of the function <name4> called with an argument <name6> .
<name1> <name4>	<name1> <name4> .
<name5> <name6>	<name5> module <name6> .
<name4> <name2> . utils . deprecation <name6> <name3>	<name4> <name2> .utils .deprecation <name6> <name3> into default name space .
<name4> . warn ( <val5> , RemovedInDjango19Warning , stacklevel = 2 )	call the function <name4> .warn with 3 arguments : string <val5> ,
<name1> <name6> . handlers	RemovedInDjango19Warning and stacklevel set to integer 2 . <name1> module <name6> .handlers .
<name4> <name5>	<name4> module <name5> .
<name6> <name2>	<name6> module <name2> .
<name6> <name2>	<name6> module <name2> .
<name5> <name2> . utils <name1> <name4>	<name5> <name2> .utils <name1> <name4> into default name space .
<name2> = re . <name4> ( <val6>   , re . I )	<name4> regex from string <val6> in case insensitive mode , substitute it for <name2> .
def <name6> ( <name4> ) :	define the function <name6> with an argument <name4> .
<name1> = <name6> . <name4> ( <name2> )	<name4> string <name2> with regex <name6> , substitute the result for <name1> .
<name5> not <name2> :	<name5> <name2> is false ,
<name6> <name1> ( <val2>   % <name3> )	<name6> an <name1> exception with an argument string <val2> formated with <name3> .
<name4> <name2>	<name4> boolean <name2> .
<name5> :	<name5> ,
<name3> <name1> <name6> <name4>	<name3> <name1> <name6> <name4> .
except <name3> :	if <name3> exception is caught ,
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
<name1> isinstance ( <name3> , <name5> ) :	<name1> <name3> is an instance of <name5> type ,
<name4> = <name5>	substitute <name5> for <name4> .
elif str ( <name2> ) == <name2> :	otherwise if <name2> converted into a string equals <name2> ,
<name5> <name1> <name6> <name2> <name3> . _levelNames :	<name5> <name1> is <name6> contained <name2> <name3> ._levelNames ,
<name3> <name5> ( <val4>   % <name2> )	<name3> an <name5> exception with an argument string <val4> formated with <name2> .
<name2> = <name6> . _levelNames [ <name5> ]	substitute value under <name5> key of <name6> ._levelNames dictionary for <name2> .
else :	if not ,
<name5> <name4> ( 'Level not an integer or a '    'valid string: %r'   % <name3> )	<name5> an <name4> exception with an argument string 'Level not an integer or a valid string: %r' formated with <name3> .
<name1> <name5>	<name1> <name5> .
<name5> <name3> ( <name1> ) :	derive the <name5> <name3> from <name1> base <name5> .
def <name3> ( <name1> , <name6> ) :	define the method <name3> with 2 arguments : <name1> and <name6> .
<name1> = <name2> . __getitem__ ( <name3> , <name6> )	call the method <name2> .__getitem__ with 2 arguments <name3> and <name6> , substitute the result for <name1> .
<name6> = <name3> . configurator . convert ( <name5> )	call the method <name3> .configurator .convert with an argument <name5> , substitute the <name6> for <name6> .
<name3> <name4> <name6> <name1> <name2> :	<name3> <name4> <name6> <name1> contained in <name2> ,
<name2> [ <name3> ] = <name6>	substitute <name6> for <name2> dictionary under <name3> <name3> .
<name5> <name1> ( <name4> ) in ( <name2> , <name3> , <name6> ) :	<name5> <name1> of <name4> is <name2> , <name3> or <name6> ,
<name6> . parent = <name3>	substitute <name3> for <name6> .parent .
<name6> . <name3> = <name3>	substitute <name3> for <name6> .key .
<name3> <name1>	<name3> <name1> .
def <name2> ( <name4> , <name3> , <name1> = <name5> ) :	define the method <name2> with 3 arguments : <name4> , <name3> and <name1> set to <name5> .
<name5> = dict . <name2> ( <name1> , <name6> , <name3> )	<name2> <name5> under <name6> <name6> of <name1> dictionary , if it doesnt exists return <name3> , substitute the result for <name5> .
<name5> = <name3> . configurator . convert ( <name1> )	call the method <name3> .configurator .convert with an argument <name1> , substitute the <name5> for <name5> .
<name4> <name5> <name3> <name6> <name2> :	<name4> <name5> <name3> <name6> contained in <name2> ,
<name5> [ <name1> ] = <name3>	substitute <name3> for value under <name1> <name1> of <name5> dictionary .
<name2> <name5> ( <name1> ) in ( <name4> , <name3> , <name6> ) :	<name2> <name5> of <name1> is <name4> , <name3> or <name6> ,
<name4> . parent = <name2>	substitute <name2> for <name4> .parent .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .key .
<name3> <name2>	<name3> <name2> .
def <name1> ( <name2> , <name6> , <name4> = <name5> ) :	define the method <name1> with 3 arguments : <name2> , <name6> and <name4> set to <name5> .
<name6> = dict . pop ( <name4> , <name2> , <name5> )	remove <name6> under <name2> <name2> of <name4> dictionary , if it doesnt exists return <name5> , substitute the result for <name6> .
result = <name2> . configurator . convert ( <name1> )	call the method <name2> .configurator .convert with an argument <name1> .
<name2> <name4> <name6> <name5> <name3> :	<name2> <name4> <name6> <name5> contained in <name3> ,
<name5> <name2> ( <name1> ) in ( <name4> , <name3> , <name6> ) :	<name5> <name2> of <name1> is <name4> , <name3> or <name6> ,
<name4> . parent = <name1>	substitute <name1> for <name4> .parent .
<name4> . <name6> = <name6>	substitute <name6> for <name4> .key .
<name2> <name5>	<name2> <name5> .
<name4> <name6> ( <name2> ) :	derive the <name4> <name6> from <name2> base <name4> .
def <name2> ( <name3> , <name1> ) :	define the method <name2> with 2 arguments : <name3> and <name1> .
<name5> = <name1> . __getitem__ ( <name6> , <name2> )	call the method <name1> .__getitem__ with 2 arguments <name6> and <name2> , substitute the result for <name5> .
<name4> = <name1> . configurator . convert ( <name3> )	call the method <name1> .configurator .convert with an arugment <name3> , substitute the <name4> for <name4> .
<name3> <name4> <name1> <name5> <name2> :	<name3> <name4> <name1> <name5> contained in <name2> ,
<name3> [ <name2> ] = <name6>	substitute <name6> for value under <name2> <name2> of <name3> dictionary .
<name5> <name6> ( <name4> ) in ( <name2> , <name1> , <name3> ) :	<name5> <name6> of <name4> is <name2> , <name1> or <name3> ,
<name1> . parent = <name6>	substitute <name6> for <name1> .parent .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .key .
<name1> <name6>	<name1> <name6> .
def <name3> ( <name5> , <name4> = - <val1> ) :	define the method <name3> with 2 arguments : <name5> and <name4> set to negative integer <val1> .
value = <name6> . pop ( <name1> , <name4> )	remove <name4> - th element from <name1> <name6> .
<name3> = <name4> . configurator . convert ( <name2> )	call the method <name4> .configurator .convert with an argument <name2> , substitute the <name3> for <name3> .
<name2> <name6> <name5> <name4> <name3> :	<name2> <name6> <name5> <name4> contained in <name3> ,
<name3> <name1> ( <name5> ) in ( <name6> , <name4> , <name2> ) :	<name3> <name1> of <name5> is <name6> , <name4> or <name2> ,
<name5> . parent = <name6>	substitute <name6> for <name5> .parent .
<name4> <name6>	<name4> <name6> .
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> from <name4> base <name3> .
def <name6> ( <name4> , <name5> ) :	define the method <name6> with 2 arguments : <name4> and <name5> .
<name6> = <name3> . __getitem__ ( <name2> , <name1> )	call the method <name3> .__getitem__ with 2 arguments : <name2> and <name1> , substitute the result for <name6> .
<name6> = <name4> . configurator . convert ( <name5> )	call the method <name4> .configurator .convert with an argument <name5> , substitute the <name6> for <name6> .
<name4> <name3> <name2> <name6> <name1> :	<name4> <name3> <name2> <name6> contained in <name1> ,
<name6> <name1> ( <name3> ) in ( <name2> , <name4> , <name5> ) :	<name6> <name1> of <name3> is <name2> , <name4> or <name5> ,
<name1> . parent = <name2>	substitute <name2> for <name1> .parent .
<name4> . <name1> = <name1>	substitute <name1> for <name4> .key .
<name5> <name6>	<name5> <name6> .
<name4> <name3> ( <name2> ) :	derive the <name4> <name3> from <name2> base <name4> .
<name2> = re . <name4> ( r <val5>   )	<name4> a regex from raw string <val5> , substitute it for <name2> .
\ <name1> = re . <name6> ( r <val2>   ) \	\ <name6> a regex from raw string <val2> , substitute it for <name1> . \
\ <name6> = re . <name3> ( r <val1>   ) \	\ <name3> a regex from raw string <val1> , substitute it for <name6> . \
\ <name5> = re . <name6> ( r <val1>   ) \	\ <name6> a regex from raw string <val1> , substitute it for <name5> . \
\ <name5> = re . <name3> ( r <val1>   ) \	\ <name3> a regex from raw string <val1> , substitute it for <name5> . \
<name3> = {   <val4>   : <val5>   , <val6>   : <val1>   , }	<name3> is a dictionary with 2 entries : <val5> for <val4> and <val1> for <val6> .
<name3> = <name5>	substitute <name5> for <name3> .
def <name2> ( <name1> , <name5> ) :	define the method <name2> with 2 arguments : <name1> and <name5> .
<name6> . <name5> = <name2> ( <name5> )	<name6> .config is an instance of <name2> , called with an argument <name5> .
<name1> . config . configurator = <name1>	substitute <name1> for <name1> .config .configurator .
def <name2> ( <name4> , <name6> ) :	define the method <name2> with 2 arguments : <name4> and <name6> .
<name1> = <name4> . <name3> ( <val5>   )	<name3> <name4> into parts by <val5> , substitute the result for <name1> .
<name5> = <name2> . pop ( 0 )	remove first element from <name2> , substitute the result for <name5> .
<name3> :	<name3> ,
<name5> = <name1> . importer ( <name3> )	call the method <name1> .importer with an argument <name3> , substitute the result for <name5> .
<name5> <name4> <name2> <name6> :	<name5> every <name4> <name2> <name6> .
<name6> += <val3>   + <name5>	append <val3> to <name5> , append the result to <name6> .
<name5> :	<name5> ,
<name4> = getattr ( <name4> , <name6> )	get <name6> attribute from <name4> object , substitute it for <name4> .
except <name5> :	if <name5> exception is caught ,
<name3> . importer ( <name2> )	call the method <name3> .importer with an argument <name2> .
<name1> = getattr ( <name1> , <name2> )	get <name2> attribute from <name1> object , substitute it for <name1> .
<name2> <name6>	<name2> <name6> .
except <name1> :	if <name1> exception is caught ,
<name6> , <name3> = <name2> . exc_info ( ) [ 1 : ]	call the method <name2> .exc_info , substitute the result without the first element for <name6> and <name3> .
v = <name1> ( <val4>   % ( <name3> , <name2> ) )	raise an <name1> exception with an argument string <val4> , formated with <name3> and <name2> .
<name6> . __cause__ , <name6> . __traceback__ = <name5> , <name4>	substitute <name5> and <name4> for <name6> .__cause__ and <name6> .__traceback__ .
<name4> <name6>	<name4> an <name6> exception .
def <name5> ( <name3> , <name4> ) :	define the method <name5> with 2 arguments : <name3> and <name4> .
<name6> <name4> . resolve ( <name5> )	call the method <name4> .resolve with an argument <name5> , <name6> the result .
def <name4> ( <name5> , <name6> ) :	define the method <name4> with 2 arguments : <name5> and <name6> .
<name4> = <name6>	substitute <name6> for <name4> .
<name5> = <name1> . WORD_PATTERN . <name4> ( <name3> )	<name4> <name3> string with <name1> .WORD_PATTERN regex , substitute the result for <name5> .
<name2> <name3> <name5> <name6> :	<name2> <name3> <name5> <name6> ,
<name3> <name2> ( <val4> % <name6> )	<name3> an <name2> exception with an argument string <val4> formated with <name6> .
else :	if not ,
<name6> = <name6> [ <name1> . <name5> ( ) : ]	call the method <name1> .end , slice list <name6> from previous result as starting index to the <name5> , substitute the result for <name6> .
d = <name5> . config [ <name4> . groups ( ) [ 0 ] ]	call the method <name4> .groups , use the first element of the result as key for obtaining value from <name5> .config dictionary ,
<name2> <name1> :	substitute it for d . <name2> <name1> is true ,
<name1> = <name5> . DOT_PATTERN . <name6> ( <name3> )	<name6> <name3> string with <name5> .DOT_PATTERN regex , substitute the result for <name1> .
<name1> <name3> :	<name1> <name3> is true ,
<name1> = <name1> [ <name5> . groups ( ) [ 0 ] ]	call the method <name5> .groups , use the first element of the result as key for obtaining value from <name1> dictionary ,
else :	if not ,
<name4> = <name1> . INDEX_PATTERN . <name3> ( <name2> )	<name3> <name2> string with <name1> .INDEX_PATTERN regex , substitute the result for <name4> .
<name2> <name6> :	<name2> <name6> is true ,
     <name3> = <name5> . groups ( ) [ 0 ]	call the method <name5> .groups , substitute the first element of the result for <name3> .
<name4> not <name6> . DIGIT_PATTERN . <name1> ( idx ) :	<name1> rest string with <name6> .DIGIT_PATTERN regex , <name4> it evaluates to false ,
         <name6> = <name6> [ <name3> ]	substitute value under <name3> key of dictionary <name6> for <name6> .
else :	if not ,
         <name5> :	<name5> ,
             <name6> = int ( <name2> )	convert <name2> to an integer , substitute it or <name6> .
<name4> = <name4> [ <name2> ]	substitute value under <name2> key of dictionary <name4> for <name4> .
except <name2> :	if <name2> exception is caught ,
             <name4> = <name4> [ <name6> ]	substitute value under <name6> key of dictionary <name4> for <name4> .
<name4> <name3> :	<name4> <name3> is true ,
<name1> = <name1> [ <name2> . <name6> ( ) : ]	call the method <name2> .end , slice list <name1> from previous result as starting index to the <name6> , substitute the result for <name1> .
else :	if not ,
<name2> <name4> ( 'Unable to convert '    '%r at %r'   % ( <name6> , <name3> ) )	<name2> an <name4> exception with an argument string 'Unable to convert %r at %r' formated with <name6> and <name3> .
<name4> <name6>	<name4> <name6> .
def <name6> ( <name5> , <name3> ) :	define the method <name6> with 2 arguments : <name5> and <name3> .
<name1> <name5> isinstance ( <name3> , <name4> ) <name2> isinstance ( <name3> , <name6> ) :	<name1> vale is <name5> an instance of <name4> <name2> <name3> is an instance of <name6> type ,
<name1> = <name4> ( <name1> )	<name1> is an instance of <name4> class , created with an argument <name1> .
<name4> . configurator = <name5>	substitute <name5> for <name4> .configurator .
elif <name4> isinstance ( <name5> , <name6> ) <name1> isinstance ( <name5> , <name2> ) :	otherwise if vale is <name4> an instance of <name6> <name1> <name5> is an instance of <name2> type ,
<name5> = <name6> ( <name5> )	<name5> is an instance of <name6> class , created with an argument <name5> .
<name6> . configurator = <name1>	substitute <name1> for <name6> .configurator .
elif <name1> isinstance ( <name5> , <name2> ) <name3> isinstance ( <name5> , <name6> ) :	otherwise if vale is <name1> an instance of <name2> <name3> <name5> is an instance of <name6> type ,
<name4> = <name6> ( <name4> )	<name4> is an instance of <name6> class , created with an argument <name4> .
<name2> . configurator = <name4>	substitute <name4> for <name2> .configurator .
elif isinstance ( <name6> , six . string_types ) :	otherwise if vale is an instance of <name6> ,
<name6> = <name5> . CONVERT_PATTERN . <name3> ( <name2> )	<name3> <name2> string with regex <name5> .CONVERT_PATTERN , substitute the result for <name6> .
<name1> <name6> :	<name1> <name6> is true ,
<name3> = <name2> . groupdict ( )	call the method <name2> .groupdict , substitute the result for <name3> .
<name4> = <name1> [ <val3>   ]	substitute value under the <val3> key of dictionary <name1> , substitute it for <name4> .
<name4> = <name2> . value_converters . get ( <name5> , <name1> )	remove <name2> .value_converters dictionary element under <name5> key , if it exists substitute it for <name4> , if not , <name4> is <name1> .
<name4> <name5> :	<name4> <name5> is true ,
<name1> = <name5> [ <val2>   ]	substitute value under the <val2> key of dictionary <name5> , substitute it for <name1> .
<name4> = getattr ( <name3> , <name4> )	get <name4> attribute from <name3> object , substitute it for <name4> .
<name5> = <name2> ( <name1> )	call the function <name2> with an argument <name1> , substitute the result for <name5> .
<name3> <name5>	<name3> <name5> .
def <name2> ( <name3> , <name1> ) :	define the method <name2> with 2 arguments : <name3> and <name1> .
<name1> = <name2> . pop ( <val3>   )	remove <name2> dictionary element under <val3> key , substitute it for <name1> .
<name3> <name4> hasattr ( <name5> , <val1>   ) <name2> hasattr ( <name6> , <val3>   ) <name2> <name4> ( <name5> ) != <name6> . ClassType :	<name3> <name5> doesnt have an attribute <val1> <name2> <name6> has an <val3> attribute <name2> <name4> of <name5> is <name4> equal to <name6> .ClassType ,
<name5> = <name2> . resolve ( <name5> )	call the method <name2> .resolve with an argument <name5> , substitute the result for <name5> .
<name1> = <name2> . pop ( <val3>   , <name4> )	remove <name2> dictionary element under <val3> key , if it exists substitute it for <name1> , if not , <name1> is <name4> .
<name4> = dict ( ( <name2> , <name6> [ <name2> ] ) <name3> <name2> <name1> <name6> if <name5> ( <name2> ) )	<name4> is a dictionary with elements : <name6> dictionary element under <name2> key <name3> <name2> , <name3> every <name2> <name1> result of function <name5> ,
<name2> = <name3> ( ** <name5> )	called with an argument k . call the function <name3> with an argument unpacked dictionary <name5> , substitute the <name2> for <name2> .
<name4> <name6> :	<name4> <name6> is true ,
<name5> <name6> , <name2> <name3> <name4> . <name1> ( ) :	<name5> every <name6> and <name2> <name3> <name1> of <name4> dictionary ,
setattr ( <name2> , <name4> , <name3> )	set <name2> attribute <name4> to <name3> <name3> .
<name2> <name1>	<name2> <name1> .
def <name5> ( <name1> , <name4> ) :	define the method <name5> with 2 arguments : <name1> and <name4> .
<name3> isinstance ( value , <name4> ) :	<name3> valu is an instance of <name4> type ,
<name1> = <name4> ( <name1> )	convery <name1> into a <name4> , substitute it for <name1> .
<name6> <name5>	<name6> <name5> .
<name2> <name6> ( <name1> ) :	derive the <name2> <name6> from the <name1> base <name2> .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name2> = <name5> . <name2>	substitute <name5> .config for <name2> .
<name5> <val2>   <name6> <name4> <name1> :	<name5> string <val2> is <name6> contained <name4> <name1> ,
<name4> <name5> ( <val2> )	<name4> an <name5> exception with an argument string <val2> .
<name5> <name4> [ <val3>   ] != <val6> :	<name5> <name4> dictionary value under <val3> key is not equal to integer <val6> ,
<name2> <name1> ( <val3> % <name5> [ <val6>   ] )	<name2> an <name1> exception with an argument string <val3> formated with value under <val6> key of <name5> dictionary .
<name2> = <name3> . pop ( <val5>   , False )	get <name3> dictionary element under <val5> key , if it exists substitute it for <name2> , if not ,
<name2> = { }	incremental is boolean False . <name2> is an empty dictionary .
<name6> . _acquireLock ( )	call the method <name6> ._acquireLock .
<name4> :	<name4> ,
<name3> <name6> :	<name3> <name6> is true ,
<name4> = <name3> . <name6> ( <val1>   , <name5> )	<name6> <name3> dictionary element under <val1> key , if it exists substitute it for <name4> , if not , <name4> is <name5> .
<name4> <name6> . version_info [ : <val1> ] == ( <val1> , <val3> ) :	<name4> first two elements of <name6> .version_info equal to integers <val1> ant <val3> , respectively ,
<name5> <name1> <name2> <name6> :	<name5> every <name1> <name2> <name6> ,
     <name2> <name1> <name6> <name3> <name4> . _handlers :	<name2> <name1> is <name6> contained <name3> <name4> ._handlers ,
         <name1> <name5> ( 'No handler found with '    'name %r'   % <name3> )	<name1> an <name5> exception with an argument string 'No handler found with name %r' formated with <name3> .
else :	if not ,
         <name1> :	<name1> ,
             <name2> = <name3> . _handlers [ <name5> ]	substitute value under <name5> key of <name3> ._handlers dictionary for <name2> .
<name3> = <name1> [ <name5> ]	substitute value under <name5> key of <name1> dictionary for <name3> .
<name2> = <name5> . <name6> ( <val3>   , <name4> )	<name6> <name5> dictionary element under <val3> key , if it exists substitute it for <name2> , if not , <name2> is <name4> .
<name1> <name2> :	<name1> <name2> is true ,
                 <name4> . setLevel ( <name6> ( <name5> ) )	call the function <name6> with an argument <name5> , use the result as an argument for the call to the function <name4> .setLevel .
except <name1> as <name2> :	if <name1> , renamed to <name2> , exception is caught ,
             <name5> <name6> ( 'Unable to configure handler '    '%r: %s'   % ( <name3> , <name2> ) )	<name5> an <name6> exception with an argument string 'Unable to configure handler %r: %s' formated with <name3> and <name2> .
<name6> = <name3> . <name5> ( <val2>   , <name1> )	<name5> <name3> dictionary element under <val2> key , if it exists substitute it for <name6> , if not , <name6> is <name1> .
<name5> <name3> <name1> <name6> :	<name5> every <name3> <name1> <name6> ,
<name6> :	<name6> ,
     <name2> . configure_logger ( <name4> , <name1> [ <name4> ] , <name5> )	call the method <name2> .configure_logger with 3 arguments : <name4> , value under <name4> key of <name1> dictionary and boolean <name5> .
except <name5> as <name2> :	if <name5> , renamed to <name2> , exception is caught ,
     <name6> <name1> ( 'Unable to configure logger '    '%r: %s'   % ( <name3> , <name5> ) )	<name6> an <name1> exception with an argument string 'Unable to configure logger %r: %s' formated with <name3> and <name5> .
<name4> = <name1> . <name6> ( <val2>   , <name3> )	<name6> <name1> dictionary element under <val2> key , if it exists substitute it for <name4> , if not , <name4> is <name3> .
<name3> <name1> :	<name3> <name1> is true ,
<name3> :	<name3> ,
     <name3> . configure_root ( <name4> , <name6> )	call the method <name3> .configure_root with 2 arguments : <name4> and boolean <name6> .
except <name3> as <name1> :	if <name3> , renamed to <name1> , exception is caught ,
     <name2> <name3> ( 'Unable to configure root '    'logger: %s'   % <name5> )	<name2> an <name3> exception with an argument string 'Unable to configure root logger: %s' formated with <name5> .
else :	if not ,
<name4> = <name5> . pop ( <val1>   , True )	remove <name5> dictionary element under <val1> key , if it exists substitute it for <name4> , if not ,
<name4> . _handlers . clear ( )	disable_existing is boolean True . call the method <name4> ._handler .clear .
del <name6> . _handlerList [ : ]	delete <name6> ._handlerList list .
<name3> = <name5> . <name2> ( <val1>   , <name4> )	<name2> <name5> dictionary element under <val1> key , if it exists substitute it for <name3> , if not , <name3> is <name4> .
<name4> <name2> <name6> <name1> :	<name4> every <name2> <name6> <name1> ,
<name4> :	<name4> ,
     <name2> [ <name4> ] = <name5> . configure_formatter ( <name2> [ <name4> ] )	call the method <name5> .configure_filter with an argument value under <name4> key of <name2> dictionary ,
except <name4> as <name5> :	substitute the result for formatters dictionary value under name key . if <name4> , renamed to <name5> , exception is caught ,
     <name5> <name1> ( 'Unable to configure '    'formatter %r: %s'   % ( <name4> , <name2> ) )	<name5> an <name1> exception with an argument string 'Unable to configure formatter %r: %s' formated with <name4> and <name2> .
<name4> = <name1> . <name6> ( <val5>   , <name3> )	<name6> <name1> dictionary element under <val5> key , if it exists substitute it for <name4> , if not , <name4> is <name3> .
<name6> <name4> <name3> <name1> :	<name6> every <name4> <name3> <name1> ,
<name3> :	<name3> ,
     <name1> [ <name2> ] = <name6> . configure_filter ( <name1> [ <name2> ] )	call the method <name6> .configure_filter with an argument value under <name2> key of <name1> dictionary ,
except <name6> as <name1> :	substitute the result for filters dictionary value under name key . if <name6> , renamed to <name1> , exception is caught ,
     <name5> <name2> ( 'Unable to configure '    'filter %r: %s'   % ( <name3> , <name4> ) )	<name5> an <name2> exception with an argument string 'Unable to configure filter %r: %s' formated with <name3> and <name4> .
<name4> = <name1> . <name2> ( <val3>   , <name6> )	<name2> <name1> dictionary element under <val3> key , if it exists substitute it for <name4> , if not , <name4> is <name6> .
<name1> <name2> <name4> sorted ( <name6> ) :	sort elements of <name6> , <name1> every <name2> <name4> result ,
<name2> :	<name2> ,
     <name3> = <name5> . configure_handler ( <name1> [ <name2> ] )	call the method <name5> .configure_handler with an argument value under <name2> key of <name1> dictionary , substitute the result for <name3> .
<name5> . <name4> = <name4>	substitute <name4> for <name5> .name .
<name1> [ <name6> ] = <name3>	substitute <name3> for value under <name6> key of <name1> dictionary .
except <name1> as <name5> :	if <name1> , renamed to <name5> , exception is caught ,
     <name1> <name4> ( 'Unable to configure handler '    '%r: %s'   % ( <name3> , <name6> ) )	<name1> an <name4> exception with an argument string 'Unable to configure handler %r: %s' formated with <name3> and <name6> .
<name3> = <name4> . <name3>	substitute <name4> .root for <name3> .
<name3> = <name4> ( <name2> . manager . loggerDict )	convert <name2> .manager .loggerDict into a <name4> , substitute it for <name3> .
<name4> . <name2> ( )	<name2> elements of list <name4> .
<name2> = [ ]	<name2> is an empty list .
<name3> = <name6> . <name1> ( <val2>   , <name5> )	<name1> <name6> dictionary element under <val2> key , if it exists substitute it for <name3> , if not , <name3> is <name5> .
<name4> <name1> <name2> <name5> :	<name4> every <name1> <name2> <name5> ,
<name6> <name4> <name2> <name1> :	<name6> <name4> is contained <name2> <name1> ,
     <name1> = <name2> . <name6> ( <name3> )	get the <name6> of first occurrence of <name3> in <name2> , substitute it for <name1> .
<name1> = <name4> + <val2>	append <val2> to <name4> , substitute the result for <name1> .
<name3> = len ( <name1> )	substitute length of <name1> for <name3> .
<name3> = len ( <name1> )	substitute length of <name1> for <name3> .
<name3> = <name3> + <val5>	increment <name3> by integer <val5> , substitute the result for <name3> .
<name4> ( <name6> <  <name1> ) <name5> ( <name2> [ <name6> ] [ : <name3> ] == <name4> ) :	<name4> <name6> is lesser than <name1> <name5> first <name3> elements of <name6> - th element of <name2> equals <name4> ,
         <name3> . <name1> ( <name6> [ <name2> ] )	<name1> <name2> - th element of <name6> to <name3> .
<name2> = <name2> + <val4>	increment <name2> by integer <val4> , substitute the result for <name2> .
<name5> . <name2> ( <name4> )	<name2> <name4> from <name5> .
<name5> :	<name5> ,
     <name2> . configure_logger ( <name4> , <name1> [ <name4> ] )	call the method <name2> .configure_logger with 2 arguments : <name4> and value under <name1> dictionary key <name4> .
except <name4> as <name5> :	if <name4> , renamed to <name5> , exception is caught ,
     <name1> <name6> ( 'Unable to configure logger '    '%r: %s'   % ( <name3> , <name4> ) )	<name1> an <name6> exception with an argument string 'Unable to configure logger %r: %s' formated with <name3> and <name4> .
<name1> <name4> <name5> <name3> :	<name1> every <name4> <name5> <name3> ,
<name5> = <name4> . manager . loggerDict [ <name6> ]	get the value under <name6> key of <name4> .manager .loggerDict dictionary , substitute it for <name5> .
<name4> <name6> <name5> <name3> :	<name4> <name6> is contained <name5> <name3> ,
     <name1> . level = <name5> . NOTSET	substitute <name5> .NOTSET for <name1> .level .
<name2> . handlers = [ ]	<name2> .handlers is an empty list .
<name5> . propagate = <name4>	<name5> .propagate is boolean <name4> .
elif <name6> :	otherwise if <name6> is true ,
     <name1> . disabled = <name6>	<name1> .disabled is boolean <name6> .
<name1> = <name6> . <name5> ( <val3>   , <name2> )	<name5> <name6> dictionary element under <val3> key , if it exists substitute it for <name1> , if not , <name1> is <name2> .
<name1> <name5> :	<name1> <name5> is true ,
<name4> :	<name4> ,
     <name6> . configure_root ( <name1> )	call the method <name6> .configure_root with an argument <name1> .
except <name5> as <name3> :	if <name5> , renamed to <name3> , exception is caught ,
     <name2> <name5> ( 'Unable to configure root '    'logger: %s'   % <name1> )	<name2> an <name5> exception with an argument string '' Unable to configure root logger : % s '  formated with <name1> .
<name1> :	<name1> perform ,
<name1> . _releaseLock ( )	call the method <name1> ._releaseLock .
def <name6> ( <name2> , <name1> ) :	define the method <name6> with 2 arguments : <name2> and <name1> .
<name4> <val6>   <name1> <name2> :	<name4> string <val6> is contained <name1> <name2> ,
<name1> = <name6> [ <val2>   ]	substitute <name6> dictionary value under <val2> key for <name1> .
<name5> :	<name5> ,
<name4> = <name3> . configure_custom ( <name2> )	call the method <name3> .configure_custom with an argument <name2> , substitute the <name4> for <name4> .
except <name4> as <name5> :	if <name4> , renamed to <name5> , exception is caught ,
<name3>	<name3> an exception .
<name2> [ <val1>   ] = <name2> . pop ( <val5>   )	remove <name2> dictionary entry under <val5> key , substitute it for value under <val1> key of <name2> dictionary .
<name6> [ <val5>   ] = <name3>	substitute <name3> for value under <val5> key of <name6> dictionary .
<name6> = <name2> . configure_custom ( <name5> )	call the method <name2> .configure_custom with an argument <name5> , substitute the <name6> for <name6> .
else :	if not ,
<name5> = <name1> . <name3> ( <val6>   , <name2> )	<name3> <name1> dictionary element under <val6> key , if it exists substitute it for <name5> , if not , <name5> is <name2> .
<name1> = <name3> . <name2> ( <val4>   , <name5> )	<name2> <name3> dictionary element under <val4> key , if it exists substitute it for <name1> , if not , <name1> is <name5> .
<name5> = <name3> . Formatter ( <name4> , <name1> )	call the method <name3> .Formatter with 2 arguments : <name4> and <name1> , substitute the <name5> for <name5> .
<name1> <name3>	<name1> <name3> .
def <name2> ( <name4> , <name6> ) :	define the method <name2> with 2 arguments : <name4> and <name6> .
<name4> <val5>   <name3> <name1> :	<name4> string <val5> is contained <name3> <name1> ,
<name5> = <name2> . configure_custom ( <name6> )	call the method <name2> .configure_custom with an argument <name6> , substitute the <name5> for <name5> .
else :	if not ,
<name6> = <name1> . get ( <val3>   , ''   )	remove <name1> dictionary element under <val3> key , if it exists substitute it for <name6> , if not , <name6> is an empty string .
<name4> = <name5> . Filter ( <name3> )	call the method <name5> .Filter with an argument <name3> , substitute the <name4> for <name4> .
<name6> <name4>	<name6> <name4> .
def <name2> ( <name5> , <name6> , <name3> ) :	define the method <name2> with 3 arguments : <name5> , <name6> and <name3> .
<name6> <name3> <name1> <name5> :	<name6> every <name3> <name1> <name5> ,
<name4> :	<name4> ,
filterer . addFilter ( <name3> . config [ <val6>   ] [ <name2> ] )	get the value under <name2> key of dictionary under <val6> key of <name3> .config dictionary ,
except <name6> <name3> <name2> :	use the result <name3> an argument for the call to the method filterer .addFilter . if <name6> , renamed to <name2> , exception is caught ,
<name1> <name2> ( <val4>   % ( <name5> , <name6> ) )	<name1> an <name2> exception with an argument string <val4> formated with <name5> and <name6> .
def <name1> ( <name6> , <name2> ) :	define the method <name1> with 2 arguments : <name6> and <name2> .
<name1> = <name6> . pop ( <val3>   , <name4> )	remove <name6> dictionary element under <val3> key , if it exists substitute it for <name1> , if not , <name1> is <name4> .
<name1> <name3> :	<name1> <name3> is true ,
<name4> :	<name4> ,
<name2> = <name6> . config [ <val4>   ] [ <name2> ]	get the value under <name2> key of dictionary under <val4> key of <name6> .config dictionary , substitute the result for <name2> .
except <name6> as <name2> :	if <name6> , renamed to <name2> , exception is caught ,
<name2> <name1> ( 'Unable to set formatter '    '%r: %s'   % ( <name6> , <name3> ) )	<name2> an <name1> exception with an argument string 'Unable to set formatter %r: %s' formated with <name6> and <name3> .
<name3> = <name6> . pop ( <val2>   , <name4> )	remove <name6> dictionary element under <val2> key , if it exists substitute it for <name3> , if not , <name3> is <name4> .
<name1> = <name4> . pop ( 'filters'   , <name5> )	remove <name4> dictionary element under 'filter' key , if it exists substitute it for <name1> , if not , <name1> is <name5> .
<name2> <val4>   <name3> <name6> :	<name2> string <val4> is contained <name3> <name6> ,
<name4> = <name2> . pop ( <val5>   )	remove <name2> dictionary element under <val5> key , substitute it for <name4> .
<name5> <name3> hasattr ( <name2> , <val6>   ) <name4> hasattr ( <name1> , <val5>   ) <name4> <name3> ( <name2> ) != <name1> . ClassType :	<name5> <name2> doesnt have an attribute <val6> , <name4> <name1> has an attribute <val5> , <name4> <name3> of <name2> is <name3> equal to <name1> .ClassType ,
<name4> = <name6> . resolve ( <name4> )	call the method <name6> .resolve with an argument <name4> , substitute the result for <name4> .
<name6> = <name1>	substitute <name1> for <name6> .
else :	if not ,
klass = <name6> . resolve ( <name3> . pop ( <val5>   ) )	remove <name3> dictionary element under <val5> key , use it as an argument for the call to the method <name6> .resolve ,
<name4> issubclass ( <name6> , <name1> . handlers . MemoryHandler ) <name5> <val2>   <name3> <name4> :	substitute the result for <name6> . <name4> <name6> is a subclass of <name1> .handlers .MemoryHandler base class <name5> string <val2> is contained <name3> <name4> ,
<name4> :	<name4> ,
<name6> [ <val4>   ] = self . <name6> [ 'handlers'   ] [ <name6> [ <val4>   ] ]	get value under <val4> key of <name6> dictionary , use it as a key to get the value from the dictionary ,
except <name2> as <name4> :	under the 'handlers' key of self .config dictionary , substitute the result for value under 'target' key of config dictioanry . if <name2> , renamed to <name4> , exception is caught ,
<name3> <name4> ( 'Unable to set target handler '    '%r: %s'   % ( config [ 'target'   ] , e ) )	<name3> an <name4> exception with an argument string 'Unable to set target handler %r: %s' ,
elif issubclass ( <name2> , <name4> . handlers . SMTPHandler ) <name3> <val6>   <name1> <name5> :	formated with value under 'target' key of <name5> dictionary <name3> e . otherwise if <name2> is a subclass of <name4> .handlers .SMTPHandler <name3> string <val6> is contained <name1> <name5> ,
<name2> [ <val5>   ] = <name3> . as_tuple ( <name2> [ <val5>   ] )	call the method <name3> .as_tuple with an argument value under <val5> key of <name2> dictionary ,
elif issubclass ( <name2> , <name5> . handlers . SysLogHandler ) <name6> <val1>   <name3> <name4> :	substitute the result for value under 'mailhost' key of <name4> dictionary . otherwise if <name2> is subclass of <name5> .handlers .SysLogHandler class , <name6> string <val1> is contained <name3> <name4> ,
<name1> [ <val3>   ] = <name5> . as_tuple ( <name1> [ <val3>   ] )	call the method <name5> .as_tuple with an argument value under <val3> key of <name1> dictionary ,
<name3> = <name6>	substitute the result for value under 'address' key of config dictionary . substitute <name6> for <name3> .
<name6> = dict ( ( <name4> , <name5> [ <name4> ] ) for <name4> in <name5> if valid_ident ( <name4> ) )	<name6> is a dictionary created with tuples with 2 elements : <name4> and value under <name4> key of <name5> dictionary ,
<name5> :	for every k in config , only if result of the function valid_ident called with an argument k evaluates to true . <name5> ,
<name1> = <name5> ( ** <name4> )	call the function <name5> with an argument unpacked dictionary <name4> , substitute the <name1> for <name1> .
except <name5> as <name3> :	if <name5> , renamed to <name3> , exception is caught ,
<name4>	<name4> an exception .
<name3> [ <val4>   ] = <name3> . pop ( <val5>   )	remove element under <val5> key of <name3> dictionary , substitute the result for value under <val4> key of <name3> dictionary .
<name1> = <name6> ( ** <name4> )	call the function <name6> with an argument unpacked dictionary <name4> , substitute the <name1> for <name1> .
<name2> <name6> :	<name2> <name6> is true ,
<name4> . setFormatter ( <name3> )	call the method <name4> .setFormatter with an argument <name3> .
<name1> <name4> <name3> <name6> <name5> :	<name1> <name4> <name3> <name6> <name5> ,
<name5> . setLevel ( <name1> ( <name3> ) )	call function <name1> with an argument <name3> , use the <name5> as an argument for the method <name5> .setLevel .
<name3> <name4> :	<name3> <name4> is true ,
<name4> . add_filters ( <name6> , <name3> )	call the method <name4> .add_filters with 2 arguments : <name6> and <name3> .
<name2> <name1>	<name2> <name1> .
def <name1> ( <name3> , <name6> , <name5> ) :	define the method <name1> with 3 arguments : <name3> , <name6> and <name5> .
<name1> <name4> <name5> <name2> :	<name1> every <name4> <name5> <name2> ,
<name1> :	<name1> ,
<name4> . addHandler ( <name2> . config [ <val5>   ] [ <name6> ] )	call the method <name4> .addHandler with an argument : <name6> - th element of value under <val5> key of <name2> .config dictionary .
except <name4> as <name1> :	if <name4> , renamed to <name1> , exception is caught ,
<name5> <name6> ( <val3>   % ( <name4> , <name1> ) )	<name5> an <name6> exception with an argument string <val3> formated with <name4> and <name1> .
def <name1> ( <name2> , <name3> , <name5> , <name4> = <name6> ) :	define the method <name1> with 4 arguments : <name2> , <name3> , <name5> and <name4> set to boolean <name6> .
<name4> = <name2> . <name6> ( <val1>   , <name3> )	<name6> value under the <val1> key of the <name2> dictioanry , if it exists substitute it for <name4> , if not <name4> is <name3> .
<name5> <name6> <name4> <name1> <name2> :	<name5> <name6> <name4> <name1> <name2> ,
<name5> . setLevel ( <name3> ( <name2> ) )	call the function <name3> with an argument <name2> , use the result as an argument for the call to the method <name5> .setLevel .
<name3> not <name1> :	<name3> <name1> is true ,
<name4> <name3> <name1> <name2> . handlers [ : ] :	<name4> every <name3> <name1> elements of <name2> .handlers list ,
<name3> . removeHandler ( <name6> )	call the method <name3> .removeHandler with an argument <name6> .
<name2> = <name1> . <name6> ( <val5>   , <name3> )	<name6> value under the <val5> key of the <name1> dictioanry , if it exists substitute it for <name2> , if not <name2> is <name3> .
<name4> <name6> :	<name4> <name6> is true ,
<name6> . add_handlers ( <name5> , <name1> )	call the method <name6> .add_handlers with 2 arguments : <name5> and <name1> .
<name1> = <name6> . <name4> ( <val2>   , <name5> )	<name4> value under the <val2> key of the <name6> dictioanry , if it exists substitute it for <name1> , if not <name1> is <name5> .
<name2> <name1> :	<name2> <name1> is true ,
<name3> . add_filters ( <name5> , <name2> )	call the method <name3> .add_filters with 2 arguments : <name5> and <name2> .
def <name5> ( <name3> , <name2> , <name1> , <name4> = <name6> ) :	define the method <name5> with 4 arguments : <name3> , <name2> , <name1> , <name4> set to boolean <name6> .
<name1> = <name3> . getLogger ( <name6> )	call the method <name3> .getLogger with an argument <name6> , substitute the result for <name1> .
<name5> . common_logger_config ( <name4> , <name1> , <name2> )	call the method <name5> .common_logger_config with 3 arguments : <name4> , <name1> and <name2> .
<name3> = <name1> . <name5> ( <val2>   , <name6> )	<name5> value under the <val2> key of the <name1> dictioanry , if it exists substitute it for <name3> , if not <name3> is <name6> .
<name4> <name6> <name5> <name3> <name2> :	<name4> <name6> <name5> <name3> <name2> ,
<name2> . <name4> = <name4>	substitute <name4> for <name2> .propagate .
def <name1> ( <name5> , <name6> , <name3> = <name2> ) :	define the method <name1> with 3 arguments : <name5> , <name6> and <name3> set to boolean <name2> .
<name4> = <name2> . getLogger ( )	call the method <name2> .getLogger , substitute the result for <name4> .
<name2> . common_logger_config ( <name4> , <name3> , <name6> )	call the method <name2> .common_logger_config with 3 arguments : <name4> , <name3> and <name6> .
<name4> = <name5>	substitute <name5> for <name4> .
def <name3> ( <name4> ) :	define the function <name3> with an argument <name4> .
<name3> ( <name4> ) . <name5> ( )	call the method <name3> with an argument <name4> , call the method <name5> on the result .
<name5> <name3> <name1> <name6>	<name5> <name3> <name1> <name6> into default name space .
<name4> <name5>	<name4> module <name5> .
<name6> <name4>	<name6> module <name4> .
<name4> <name3> <name6> <name5>	<name4> <name3> <name6> <name5> into default name space .
<name6> <name5>	<name6> module <name5> .
<name4> <name5> . utils . functional <name3> <name2>	<name4> <name5> .utils .functional <name3> <name2> into default name space .
<name2> <name3> . utils <name6> <name4>	<name2> <name3> .utils <name6> <name4> into default name space .
<name3> <name6> . utils . six . moves . urllib . parse <name2> <name4>	<name3> <name6> .utils .six .moves .urllib .parse <name2> <name4> into default name space .
<name3> <name4> ( <name5> ) :	derive the <name3> <name4> from the base <name3> <name5> .
def <name3> ( <name6> , <name5> , * <name4> ) :	define the private method <name3> , with <name6> instance of this class , <name5> and list of arbitrary length * <name4> as arguments .
<name6> . <name3> = <name3>	assign <name3> to the <name3> field of <name6> instance of this class .
<name3> . __init__ ( <name6> , * <name1> )	call the initialization method <name3> .__init__ , with <name6> instance of this class and * <name1> as arguments .
def <name6> ( <name3> ) :	define the private method <name6> , with <name3> instance of this class as the only argument .
<name2> = <name6> . __str__ ( <name4> )	call the method <name6> .__str__ , with <name4> as the argument , substitute the result for <name2> .
return <val4>   % ( <name3> , <name2> . obj , <name1> ( <name2> . obj ) )	in the string <val4> replace every % s with <name3> and <name1> of the object <name2> .obj as strings , respectively ,
def <name2> ( <name4> ) :	and replace % r with self .obj , return the result . define function <name2> , with <name4> as an argument .
<name5> <name4> . <name3> :	<name5> field <name3> of the module <name4> is boolean True ,
<name1> <val2>   <name6> <name4> <name5> . <name3> :	<name1> string <val2> is <name6> contained <name4> <name3> field of <name5> ,
"<name3> <name4> ( ""@python_2_unicode_compatible cannot be applied "" ""to %s because it doesn't define __str__()."" % klass . __name__ )"	"<name3> the exception <name4> , with string as argument , ""@python_2_unicode_compatible cannot be applied"" ,"
<name6> . <name5> = <name6> . <name1>	to % s because it doesn ' t define <name1> ( ) . , replace % s with string value of <name6> .__name__ . substitute <name1> filed of <name6> for <name5> field of <name6> .
klass . __str__ = <name2> <name4> : <name4> . __unicode__ ( ) . encode ( 'utf-8'   )	define <name2> function with <name4> class instance as the argument , <name2> function body encapsulates the call to the method ,
<name5> <name2>	str .__unicode__ ( ) .encode ( 'utf-8' ) , call the lambda function and put the result in the __str__ filed of <name2> . <name5> <name2> .
def <name5> ( <name1> , <name2> = <val3>   , <name4> = <name6> , <name5> = <val1>   ) :	define the function <name5> , with <name1> , <name2> set to string <val3> , <name4> set to <name6> , <name5> set to <val1> as arguments .
<name2> isinstance ( <name3> , <name4> ) :	<name2> <name3> is instance of a class <name4> ,
<name2> <name6>	<name2> <name6> .
<name5> <name3> ( <name6> , <name2> , strings_only , <name1> )	<name5> the result of the call to the function <name3> , with <name6> , <name2> , string_only and <name1> as arguments .
<name2> = <name5> . integer_types + ( <name3> ( <name4> ) , <name1> , <name6> , datetime . datetime , datetime . date , datetime . time )	<name2> is a tuple containing next elements , <name5> .integer_types , <name3> of <name4> , <name3> of <name1> , <name6> , detetime .datetime ,
def <name4> ( <name3> ) :	datetime .date and datetime .time . define the function <name4> with <name3> as the only argument .
<name2> isinstance ( <name1> , <name6> )	check if <name1> is instance of the object <name6> , <name2> the boolean result .
def <name2> ( <name6> , <name3> = <val4>   , <name5> = <name1> , <name2> = <val6>   ) :	define the function <name2> , with <name6> , <name3> set to <val4> , <name5> set to <name1> , <name2> set to string <val6> as arguments .
<name6> isinstance ( <name3> , <name1> . text_type ) :	<name6> <name3> is the instance of the object <name1> .text_type ,
<name3> <name4>	<name3> <name4> .
<name6> strings_only <name2> <name4> ( <name5> ) :	<name6> the boolean return vale of the call to the function <name4> ( <name5> ) <name2> string_onlys are boolean True ,
<name4> <name3>	<name4> <name3> .
<name2> :	<name2> ,
<name1> <name2> isinstance ( <name4> , <name3> . <name6> ) :	<name1> <name4> is <name2> an instance of the object <name3> / <name6> ,
<name5> <name1> . <name2> :	<name5> <name2> filed of <name1> is boolean True ,
<name3> isinstance ( <name4> , <name5> ) :	<name3> <name4> is an instance of object <name5> ,
<name3> = <name1> . text_type ( <name3> , <name5> , <name6> )	call the function <name1> .text_type with <name3> , <name5> and <name6> as the arguments , substitute the result for <name3> .
else :	if not ,
<name6> = <name4> . text_type ( <name6> )	call the function <name4> .text_type with <name6> as an argument , substitute the result for <name6> .
elif hasattr ( <name2> , <val1>   ) :	otherwise , if <name2> has an attribute <val1> ,
<name3> = <name6> . text_type ( <name3> )	call the function <name6> .text_type with <name3> as an argument , substitute result for <name3> .
else :	if not ,
<name3> = <name6> . text_type ( <name5> ( <name3> ) , <name4> , <name1> )	call the function <name6> .text_type with return value of the function <name5> ( <name3> ) , <name4> and <name1> as the arguments ,
else :	substitute the result for s . if not ,
<name1> = <name1> . decode ( <name4> , <name2> )	call the method <name1> .decode with <name4> and <name2> as the arguments , substitute the result for <name1> .
except <name6> as <name5> :	if an exception of the type <name6> , renamed to <name5> , is caught ,
<name5> <name6> isinstance ( <name4> , <name3> ) :	<name5> <name4> is <name6> an instance of the object <name3> ,
<name1> DjangoUnicodeDecodeError ( <name4> , * <name6> . <name5> )	<name1> an exception DjingoUnicodeDecodeError , with <name4> and list of arguments * <name5> from object <name6> , as the arguments .
else :	if not ,
<name3> = ' '   . join ( [ <name5> ( <name4> , <name1> , <name2> , <name6> ) <name3> <name4> <name5> <name3> ] )	<name3> every <name4> <name5> <name3> , call the function <name5> with <name4> , <name1> , <name2> and <name6> as arguments ,
<name1> <name4>	join the result in a string separated by whitespaces , substitute it for <name4> . <name1> <name4> .
def <name1> ( <name5> , <name2> = <val3>   , <name4> = <name6> , <name1> = <val5>   ) :	define function <name1> with <name5> , <name2> set to string <val3> , <name4> set to <name6> and <name1> set to string <val5> , as arguments .
<name2> isinstance ( <name5> , <name3> ) :	<name2> <name5> is an instance of an object <name3> .
<name3> <name5>	<name3> <name5> .
<name4> <name1> ( <name2> , <name5> , <name6> , <name3> )	evaluate the function <name1> , with the arguments <name2> , <name5> , <name6> and <name3> , <name4> the result .
def <name3> ( <name5> , <name6> = <val2>   , <name1> = <name4> , <name3> = <val5>   ) :	define function <name3> with <name5> , <name6> set to <val2> , <name1> set to <name4> and <name3> set to <val5> as arguments .
<name3> isinstance ( <name5> , <name2> ) :	<name3> <name5> is an instance of an object <name2> .
<name3> <name6> == <val5>   :	<name3> <name6> equals to string <val5> .
<name4> <name1>	<name4> <name1> .
else :	if not ,
return <name2> . decode ( <val3>   , <name4> ) . encode ( encoding , <name4> )	evaluate the method <name2> .decode with string <val3> and <name4> as the arguments ,
<name5> <name6> <name2> <name1> ( <name4> ) :	on the result call the method encode with the arguments encoding <name2> errors , return the result . <name5> <name6> <name2> boolean return value of the call to the function <name1> for argument <name4> are boolean True ,
<name4> <name5>	<name4> <name5> .
<name2> isinstance ( <name1> , <name3> . memoryview ) :	<name2> <name1> is an instance of an object <name3> .memoryview .
<name5> <name1> ( <name3> )	evaluate the function <name1> with the argument <name3> , and <name5> the result .
<name1> isinstance ( <name5> , <name6> ) :	<name1> <name5> is an instance of an object <name6> .
<name6> <name4> . text_type ( <name3> ) . encode ( <name5> , <name1> )	<name6> <name4> .text_type ( <name3> ) .encode ( <name5> , <name1> ) .
<name6> <name1> isinstance ( <name5> , <name3> . string_types ) :	<name6> <name5> is <name1> an instance of the object <name3> .string_types ,
<name3> :	<name3> ,
<name6> <name2> . <name3> :	<name6> <name3> field of <name2> is boolean True ,
<name4> <name6> . text_type ( <name5> ) . <name2> ( <name1> )	evaluate the method <name6> .text_type ( <name5> ) , on the result call the method <name2> with <name1> as an argument , <name4> the result .
else :	if not ,
<name5> <name2> ( <name6> )	evaluate the function <name2> with the argument <name6> , and <name5> the result .
except <name2> :	if the <name2> exception is caught ,
<name2> isinstance ( <name3> , <name5> ) :	<name2> <name3> is an instance of the subclass <name5> ,
return b ' '   . join ( [ <name3> ( <name5> , <name6> , <name1> , <name2> ) <name4> <name5> <name3> <name5> ] )	<name4> every <name5> <name3> <name5> , evaluate the function <name3> <name4> the arguments <name5> , <name6> , <name1> and <name2> ,
<name5> <name1> . text_type ( <name6> ) . <name2> ( <name4> , <name3> )	put the results in a list , join the list elements in a string separated by whitespace separator , <name5> the string as the bytes string . evaluate the method <name1> .text_type ( <name6> ) , on the result call the method <name2> with the arguments <name4> and <name3> , <name5> the result .
else :	if not ,
<name1> <name4> . <name6> ( <name2> , <name5> )	evaluate the member method of <name4> , <name6> with the <name2> and <name5> as the arguments , <name1> the result .
<name3> <name6> . <name2> :	<name3> <name2> field of module <name6> is boolean True ,
<name5> = <name4>	substitute <name4> for <name5> .
<name3> = <name2>	substitute <name2> for <name3> .
else :	if not ,
<name2> = <name6>	substitute <name6> for <name2> .
<name1> = <name3>	substitute <name3> for <name1> .
<name6> = <name2>	substitute <name2> for <name6> .
<name3> = <name2>	substitute <name2> for <name3> .
def <name4> ( <name2> ) :	define the function <name4> with <name2> as an argument .
<name2> <name4> <name6> None :	<name2> <name4> <name6> not initialized ,
<name1> <name5>	<name1> <name5> .
"<name6> <name1> ( <name5> ( <name2> ) , safe = b ""/#%[]=:;$&()+,!?*@'~"" )"	call the function <name1> with <name6> value of the evaluated function <name5> ( <name2> ) ,
def <name2> ( <name3> ) :	"and with safe set to bytes string ""/#%[]=:;$&()+,!?*@'~"" , return the result . define function <name2> with <name3> as the argument ."
<name6> <name2> <name4> None :	<name6> <name2> <name4> not initialized ,
<name3> <name5>	<name3> <name5> .
<name4> :	<name4> ,
<name5> = <name2> . <name6> ( ) [ 1 ] or 'ascii'	evaluate the function <name6> from the module <name2> , if second element of return value exists assign it to <name5> ,
codecs . <name2> ( <name5> )	otherwise assign string 'ascii' to <name5> . call the method <name2> with the <name5> as the argument .
except <name4> :	if the <name4> exception is caught ,
<name6> = <val5>	substitute string <val5> for <name6> .
<name5> <name6>	<name5> <name6> .
<name1> = <name2> ( )	evaluate the function <name2> ( ) , substitute the return vale for <name1> .
<name3> <name5> <name6> <name4>	<name3> <name5> <name6> <name4> into default name space .
<name6> <name5>	<name6> module <name5> .
<name5> <name4> . utils . xmlutils <name6> <name3>	<name5> <name4> .utils .xmlutils <name6> <name3> into default name space .
<name6> <name2> . utils . encoding <name5> <name3> , <name4>	<name6> <name2> .utils .encoding <name5> <name3> and <name4> into default name space .
<name3> <name6> . utils <name5> <name4>	<name3> <name6> .utils <name5> <name4> into default name space .
<name1> <name4> . utils <name2> <name5>	<name1> <name4> .utils <name2> <name5> into default name space .
<name5> <name6> . utils . six <name1> <name2>	<name5> <name6> .utils .six <name1> <name2> into default name space .
<name1> <name4> . utils . six . moves . urllib . parse <name6> <name5>	<name1> <name4> .utils .six .moves .urllib .parse <name6> <name5> into default name space .
<name1> <name4> . utils . timezone <name3> <name6>	<name1> <name4> .utils .timezone <name3> <name6> into default name space .
def <name6> ( <name2> ) :	define the function <name6> with an argument <name2> .
<name3> = ( <val2>   , <val5>   , <val4>   , <val1>   , <val6>   , <val3>   , <val2>   , <val5>   , <val4>   , <val1>   , <val6>   , <val3>   , )	<name3> is a tuple with 12 elements : strings <val2> , <val5> , <val4> , <val1> , <val6> , <val3> , <val2> , <val5> , <val4> , <val1> , <val6> and <val3> .
<name2> = ( <val3>   , <val1>   , <val4>   , <val6>   , <val5>   , <val2>   , <val3>   )	<name2> is a tuple with 7 elements : strings <val3> , <val1> , <val4> , <val6> , <val5> , <val2> and <val3> .
<name4> = <name5> . new_datetime ( <name4> )	call the method <name5> .new_datetime with an argument <name4> , substitute the result for <name4> .
<name1> = <name4> [ <name6> . weekday ( ) ]	call the method <name6> .weekday , use the result as an key to obtain the value from the <name4> dictionary , substitute it for <name1> .
<name4> = <name5> [ <name1> . <name4> - <val6> ]	decrement <name1> .month by integer <val6> , use the result as an key to obtain the value from the <name5> dictionary , substitute it for <name4> .
time_str = <name3> . strftime ( <val1>   % ( <name4> , <name2> ) )	call the function <name3> .strftime with an argument string <val1> formated with <name4> and <name2> ,
<name3> <name5> . PY2 :	substitute the result for time_str . <name3> <name5> .PY2 is true ,
<name1> = <name1> . decode ( <val5>   )	call the method <name1> .decode with an argument string <val5> , substitute the result for <name1> .
<name5> <name3> ( <name4> ) :	call the function <name3> with an argument <name4> , <name5> it evaluates to true ,
<name3> = <name1> . tzinfo . utcoffset ( <name1> )	call the method <name1> .tzinfo .utcoffset with an argument <name1> , substitute the result for <name3> .
timezone = ( <name3> . days * <val5> * <val6> ) + ( <name3> . seconds // <val6> )	multiply <name3> .days , integer <val5> and integer <val6> , sum the result with floored result of dividing <name3> .seconds by integer <val6> ,
<name2> , <name4> = divmod ( <name5> , <val6> )	substitute the result for <name5> . divide <name5> by integer <val6> , substitute the quotient of the division for <name2> and reminder for <name4> .
<name1> <name6> + <val2>   % ( <name3> , <name5> )	format string <val2> with <name3> and <name5> , append it to <name6> , <name1> the result .
else :	if not ,
<name5> <name4> + <val6>	append string <val6> to <name4> , <name5> the result .
def <name4> ( <name6> ) :	define the function <name4> with an argument <name6> .
<name5> = <name3> . new_datetime ( <name5> )	call the function <name3> .new_datetime with an argument <name5> , substitute the result for <name5> .
<name6> = <name3> . strftime ( <val5>   )	call the function <name3> .strftime with an argument string <val5> , substitute the result for <name6> .
<name1> <name2> . PY2 :	<name1> <name2> .PY2 ,
<name1> = <name1> . decode ( <val6>   )	call the method <name1> .decode with an argument string <val6> , substitute the result for <name1> .
<name5> <name1> ( <name2> ) :	call the function <name1> with an argument <name2> , <name5> it evaluates to true ,
<name3> = <name4> . tzinfo . utcoffset ( <name4> )	call the method <name4> .tzinfo .utcoffset with an argument <name4> , substitute the result for <name3> .
timezone = ( <name5> . days * <val1> * <val4> ) + ( <name5> . seconds // <val4> )	multiply <name5> .days , integer <val1> and integer <val4> , sum the result with floored result of division of <name5> .seconds ,
<name3> , <name4> = divmod ( <name6> , <val1> )	and integer <val1> , substitute the result for <name6> . divide <name6> by integer <val1> , substitute the quotient of the division for <name3> and reminder for <name4> .
<name1> <name6> + <val4>   % ( <name2> , <name5> )	format string <val4> with <name2> and <name5> , append it to <name6> , <name1> the result .
else :	if not ,
<name1> <name6> + <val2>	append <val2> to <name6> , <name1> the result .
def <name4> ( <name2> , <name1> ) :	define the function <name4> with 2 arguments : <name2> and <name1> .
<name1> = <name6> ( <name2> )	call the method <name6> with an argument <name2> , substitute the result for <name1> .
<name5> = ''	<name5> is an empty string .
<name3> <name5> <name6> <name4> <name2> :	<name3> <name5> <name6> <name4> <name2> ,
d = ',%s'   % <name5> . new_datetime ( <name1> ) . <name4> ( '%Y-%m-%d'   )	call the function <name5> .new_datetime with an argument <name1> , on the result call the method <name4> with an argument ,
<name5> <val4>   % ( <name6> . hostname , <name2> , <name6> . path , <name6> . fragment )	string '%Y-%m-%d' , convert the result into a string and append it to ',' , substitute the result for <name2> . format string <val4> with <name6> .hostname , <name2> , <name6> .path and <name6> .fragment , <name5> it .
<name3> <name2> ( <name6> ) :	derive the <name3> <name2> from the <name6> base <name3> .
def <name3> ( <name2> , <name4> , <name5> , <name6> , <name1> = <name3> , <name2> = <name3> , author_name = <name3> , author_link = <name3> , subtitle = <name3> , categories = <name3> , feed_url = <name3> , feed_copyright = <name3> , feed_guid = <name3> , ttl = <name3> , ** kwargs ) :	define the method <name3> with 15 elements : <name2> , <name4> , <name5> , <name6> , <name1> set to <name3> , <name2> set to <name3> ,
<name4> = <name6> <name3> : <name5> ( <name3> , strings_only = True )	author_name set to None , author_link set to None , subtitle set to None , categories set to None , feed_url set to None , feed_copyright set to None , feed_guid set to None , ttl set to None and unpacked dictionary kwargs . <name4> is an <name6> function with an argument <name3> , result is the result of the function <name5> ,
<name4> <name6> :	called with 2 arguments : s and string_only as boolean True . <name4> <name6> is true ,
<name3> = [ <name1> ( <name6> ) <name5> <name6> <name4> <name3> ]	<name3> is a list containing the results of the function <name1> , called with an argument <name6> , <name5> every <name6> <name4> <name3> .
<name1> <name5> <name4> <name3> <name2> :	<name1> <name5> <name4> <name3> <name2> ,
<name1> = <name6> ( <name1> )	call the function <name6> with an argument <name1> , substitute the result for <name1> .
<name5> . feed = {   <val1>   : <name6> ( <name3> ) , 'link'   : iri_to_uri ( link ) , 'description'   : <name6> ( description ) , 'language'   : <name6> ( language ) , 'author_email'   : <name6> ( author_email ) , 'author_name'   : <name6> ( author_name ) , 'author_link'   : iri_to_uri ( author_link ) , 'subtitle'   : <name6> ( subtitle ) , 'categories'   : categories or ( ) , 'feed_url'   : iri_to_uri ( feed_url ) , 'feed_copyright'   : <name6> ( feed_copyright ) , 'id'   : feed_guid or link , 'ttl'   : ttl , }	<name5> .feed is an dictionary with 13 initial entries , result of the function <name6> called with an argument <name3> for <val1> ,
<name4> . feed . <name6> ( <name5> )	result of the function iri_to_uri called with an argument link for 'link' , result of the function to_unicode called with an argument description for 'description' , result of the function to_unicode called with an argument language for 'language' , result of the function to_unicode called with an author_email description for 'author_email' , result of the function to_unicode called with an argument author_name for 'author_name' , result of the function iri_to_uri called with an argument author_link for 'author_link' , result of the function to_unicode called with an argument subtitle for 'subtitle' , if true , categories is value for 'categories' key , if not , empty tuple is value for 'categories' key , result of the function iri_to_uri called with an argument feed_url for 'feed_url' , result of the function to_unicode called with an argument feed_copyright for 'feed_copyright' , if true , feed_guid is value for 'id' key , if not , lik is value for 'id' key and ttl for 'ttl' . <name6> <name4> .feed dictionary with <name5> .
<name4> . items = [ ]	<name4> .items is an empty list .
def <name5> ( <name3> , <name4> , <name1> , <name2> , <name6> = <name5> , <name3> = <name5> , author_link = <name5> , pubdate = <name5> , comments = <name5> , unique_id = <name5> , unique_id_is_permalink = <name5> , enclosure = <name5> , categories = ( ) , item_copyright = <name5> , ttl = <name5> , updateddate = <name5> , ** kwargs ) :	define the method <name5> with 17 arguments : <name3> , <name4> , <name1> , <name2> , <name6> set to <name5> , <name3> set to <name5> ,
<name5> = <name4> <name2> : <name1> ( <name2> , strings_only = True )	<name5> is an <name4> function with an argument <name2> , result is the result of the function <name1> ,
<name1> <name2> :	called with 2 arguments : s and string_only as boolean True . <name1> <name2> is true ,
<name1> = [ ( <name5> ) <name2> <name5> <name4> <name1> ]	<name1> is a list containing the results of the function to_unicode , called with an argument <name5> , <name2> every <name5> <name4> <name1> .
<name2> <name5> <name3> <name6> <name1> :	<name2> <name5> <name3> <name6> <name1> ,
<name3> = <name4> ( <name3> )	call the function <name4> with an argument <name3> , substitute the result for <name3> .
<name6> = {   <val4>   : <name1> ( <name3> ) , 'link'   : iri_to_uri ( link ) , 'description'   : <name1> ( description ) , 'author_email'   : <name1> ( author_email ) , 'author_name'   : <name1> ( author_name ) , 'author_link'   : iri_to_uri ( author_link ) , 'pubdate'   : pubdate , 'updateddate'   : updateddate , 'comments'   : <name1> ( comments ) , 'unique_id'   : <name1> ( unique_id ) , 'unique_id_is_permalink'   : unique_id_is_permalink , 'enclosure'   : enclosure , 'categories'   : categories or ( ) , 'item_copyright'   : <name1> ( item_copyright ) , 'ttl'   : ttl , }	<name6> is a dictionary with 15 initial entries : result of the function <name1> called with an argument <name3> for <val4> ,
<name3> . <name2> ( <name5> )	result of the function iri_to_uri called with an argument link for 'link' , result of the function to_unicode called with an argument description for 'description' , result of the function to_unicode called with an argument author_email for 'author_email' , result of the function to_unicode called with an argument author_name for 'author_name' , result of the function iri_to_uri called with an author_link link for 'author_link' , pubdate for 'pubdate' , updateddate for 'updateddate' , result of the function to_unicode called with an comments author_name for 'comments' , result of the function to_unicode called with an argument unique_id ) for 'unique_id)' , unique_id_is_permalink for 'unique_id_is_permalink' , enclosure for 'enclosure' , if true , categories is value for 'categories' key , if not , empty tuple is value for 'categories' key , result of the function to_unicode called with an argument item_copyright for 'item_copyright' , ttl for 'ttl' . <name2> dictionary <name3> with an argument <name5> .
<name1> . items . <name6> ( <name5> )	<name6> <name5> to <name1> .items .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name4> len ( <name5> . items )	<name4> length of <name5> .items .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name2> { }	<name2> an empty dictionary .
def <name2> ( <name4> , <name3> ) :	define the method <name2> with 2 arguments <name4> and <name3> .
pass	do nothing .
def <name3> ( <name5> , <name4> ) :	define the method <name3> with 2 arguments <name5> and <name4> .
<name5> { }	<name5> an empty dictionary .
def <name1> ( <name4> , <name6> , <name5> ) :	define the method <name1> with 2 arguments , <name6> <name4> and <name5> .
pass	do nothing .
def <name5> ( <name4> , <name1> , <name6> ) :	define the method <name5> with 3 arguments <name4> , <name1> and <name6> .
<name1> <name2> ( <val4>   )	<name1> an <name2> with an argument string <val4> .
def <name3> ( <name5> , <name2> ) :	define the method <name3> with 2 arguments <name5> and <name2> .
<name4> = <name3> ( )	<name4> is an instance of <name3> class .
<name5> . write ( <name3> , <name6> )	call the method <name5> .write with 2 arguments : <name3> and <name6> .
<name6> <name1> . getvalue ( )	call the method <name1> .getvalue , <name6> the result .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name1> = <name6>	<name1> is <name6> .
<name3> = ( <val6>   , <val5>   )	<name3> is a tuple with 2 arguments : strings <val6> and <val5> .
<name1> <name2> <name6> <name4> . items :	<name1> every <name2> <name6> <name4> .items ,
<name5> <name4> <name2> <name1> :	<name5> every <name4> <name2> <name1> ,
<name3> = <name4> . <name5> ( <name2> )	<name5> the value under the <name2> key of the <name4> dictionary , substitute it for <name3> .
<name4> <name3> :	<name4> <name3> is true ,
<name6> <name4> <name2> <name3> <name1> <name5> >  <name4> :	<name6> <name4> <name2> <name3> <name1> <name5> <name2> greater than <name4> ,
     <name3> = <name4>	substitute <name4> for <name3> .
<name6> <name1> or <name3> . <name3> . now ( )	if <name1> is true , <name6> it , if not , call the method <name3> .datetime .now and <name6> the result .
<name5> <name2> ( <name6> ) :	derive the <name5> <name2> from the <name6> base <name5> .
def <name4> ( <name5> , <name2> , <name3> , <name1> ) :	define the method <name4> with 4 arguments : <name5> , <name2> , <name3> and <name1> .
<name4> . <name6> , <name4> . <name1> = <name6> , <name1>	substitute <name6> and <name1> for <name4> .length and <name4> .mime_type .
<name6> . <name5> = <name4> ( <name5> )	call the function <name4> with an argument <name5> , substitute the result for <name6> .url .
<name4> <name5> ( <name6> ) :	derive the <name4> <name5> from the <name6> base <name4> .
<name3> = <val1>	<name3> is a string <val1> .
def <name1> ( <name4> , <name5> , <name3> ) :	define the method <name1> with 3 arguments : <name4> , <name5> and <name3> .
<name4> = <name5> ( <name6> , <name2> )	<name4> is an instance of <name5> class , created with 2 arguments : <name6> and <name2> .
<name5> . startDocument ( )	call the method <name5> .startDocument .
<name5> . startElement ( <val1> , <name4> . rss_attributes ( ) )	call the method <name5> .startElement with 2 arguments : string <val1> and result of the method <name4> .rss_attributes .
<name4> . startElement ( <val1> , <name6> . root_attributes ( ) )	call the method <name4> .startElement with 2 arguments : string <val1> and result of the method <name6> .root_attributes .
<name1> . add_root_elements ( <name2> )	call the method <name1> .add_root_elements with an argument <name2> .
<name4> . write_items ( <name2> )	call the method <name4> .write_items with an argument <name2> .
<name1> . endChannelElement ( <name5> )	call the method <name1> .endChannelElement with an argument <name5> .
<name5> . endElement ( <val6> )	call the method <name5> .endElement with an argument string <val6> .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name4> {  <val5> : <name2> . _version , <val6> : <val1> }	<name4> a dictionary with 2 elements : <name2> ._version for <val5> and <val1> for <val6> .
def <name3> ( <name1> , <name5> ) :	define the method <name3> with 2 arguments : <name1> and <name5> .
<name5> <name3> <name6> <name4> . items :	<name5> every <name3> <name6> <name4> .items ,
<name5> . startElement ( <val3>   , <name2> . item_attributes ( <name1> ) )	call the method <name5> .startElement with 2 arguments : string <val3> and result of the method <name2> .item_attributes with an argument <name1> .
<name5> . add_item_elements ( <name1> , <name6> )	call the method <name5> .add_item_elements with 2 arguments : <name1> and <name6> .
<name4> . endElement ( <val2> )	call the method <name4> .endElement with an argument string <val2> .
def <name3> ( <name2> , <name4> ) :	define the method <name3> with 2 arguments : <name2> and <name4> .
<name1> . addQuickElement ( <val2> , <name6> . feed [ <val2>   ] )	call the method <name1> .addQuickElement with 2 arguments : string <val2> and value under the <val2> key of the <name6> .feed dictionary .
<name1> . addQuickElement ( <val3> , <name2> . feed [ <val3>   ] )	call the method <name1> .addQuickElement with 2 arguments : string <val3> and value under the <val3> key of the <name2> .feed dictionary .
<name1> . addQuickElement ( <val2> , <name6> . feed [ <val2>   ] )	call the method <name1> .addQuickElement with 2 arguments : string <val2> and value under the <val2> key of the <name6> .feed dictionary .
<name4> <name6> . feed [ <val2>   ] <name1> <name5> <name3> :	<name4> value under the <val2> key of the <name6> .feed dictionary <name1> <name5> <name3> ,
"<name2> . addQuickElement ( <val6> , <name1> , {  <val5> : <val4> , ""href"" : self . feed [ 'feed_url'   ] }  )"	call the method <name2> .addQuickElement with 3 arguments : string <val6> , <name1> and dictionary with 2 entries : <val4> for <val5> ,
<name5> <name2> . feed [ <val6>   ] <name1> <name4> <name3> :	value under the 'feed_url' key of the <name2> .feed dictionary for 'href' . <name5> value under the <val6> key of the <name2> .feed dictionary <name1> <name4> <name3> ,
<name6> . addQuickElement ( <val1> , <name2> . feed [ <val1>   ] )	call the method <name6> .addQuickElement with 2 arguments : string <val1> and value under the <val1> key of the <name2> .feed dictionary .
<name5> <name6> <name4> <name3> . feed [ <val2>   ] :	<name5> every <name6> <name4> value under the <val2> key of the <name3> .feed dictionary .
<name1> . addQuickElement ( <val4> , <name5> )	call the method <name1> .addQuickElement with 2 arguments : string <val4> and <name5> .
<name6> <name2> . feed [ <val4>   ] <name1> <name3> <name5> :	<name6> value under the <val4> key of the <name2> .feed dictionary <name1> <name3> <name5> ,
<name2> . addQuickElement ( <val1> , <name6> . feed [ <val5>   ] )	call the method <name2> .addQuickElement with 2 arguments : string <val1> and value under the <val5> key of the <name6> .feed dictionary .
<name1> . addQuickElement ( <val6> , <name5> ( self . latest_post_date ( ) ) )	call the method <name1> .addQuickElement with 2 arguments : string <val6> and result of the function <name5> ,
<name5> <name6> . feed [ <val3>   ] <name4> <name1> <name2> :	called with an argument result of the method <name6> .latest_post_date . <name5> value under the <val3> key of the <name6> .feed dictionary <name4> <name1> <name2> ,
<name2> . addQuickElement ( <val3> , <name5> . feed [ <val3>   ] )	call the method <name2> .addQuickElement with 2 arguments : string <val3> and value under the <val3> key of the <name5> .feed dictionary .
def <name1> ( <name4> , <name2> ) :	define the method <name1> with 2 arguments : <name4> and <name2> .
<name4> . endElement ( <val1> )	call the method <name4> .endElement with an argument string <val1> .
<name5> <name2> ( <name3> ) :	derive the <name5> <name2> from the <name3> base <name5> .
<name2> = <val3>	<name2> is a string <val3> .
def <name3> ( <name4> , <name2> , <name1> ) :	define the method <name3> with 3 arguments : <name4> , <name2> and <name1> .
<name4> . addQuickElement ( <val3> , <name6> [ <val3>   ] )	call the method <name4> .addQuickElement with 2 arguments : string <val3> and value under the <val3> key of the <name6> dictionary .
<name2> . addQuickElement ( <val6> , <name1> [ <val6>   ] )	call the method <name2> .addQuickElement with 2 arguments : string <val6> and value under the <val6> key of the <name1> dictionary .
<name1> <name5> [ <val3>   ] <name6> <name2> <name4> :	<name1> value under the <val3> key of the <name5> dictionary <name6> <name2> <name4> ,
<name2> . addQuickElement ( <val3> , <name1> [ <val3>   ] )	call the method <name2> .addQuickElement with 2 arguments : string <val3> and value under the <val3> key of <name1> dictionary .
<name1> <name6> ( <name2> ) :	derive the <name1> <name6> from the <name2> base <name1> .
<name1> = <val3>	<name1> is a string <val3> .
def <name2> ( <name5> , <name4> , <name3> ) :	define the method <name2> with 3 arguments : <name5> , <name4> and <name3> .
<name3> . addQuickElement ( <val4> , <name6> [ <val4>   ] )	call the method <name3> .addQuickElement with 2 arguments : string <val4> and value under the <val4> key of the <name6> dictionary .
<name3> . addQuickElement ( <val1> , <name2> [ <val1>   ] )	call the method <name3> .addQuickElement with 2 arguments : string <val1> and value under the <val1> key of the <name2> dictionary .
<name2> <name6> [ <val3>   ] <name4> <name1> <name5> :	<name2> value under the <val3> key of the <name6> dictionary <name4> <name1> <name5> ,
<name2> . addQuickElement ( <val5> , <name4> [ <val5>   ] )	call the method <name2> .addQuickElement with 2 arguments : string <val5> and value under the <val5> key of the <name4> dictionary .
<name4> <name1> [ <val3> ] <name6> <name1> [ <val5> ] :	<name4> values under <val3> <name6> <val5> keys of the <name1> dictionary are both true ,
<name2> . addQuickElement ( <val4> , <val5> % ( item [ 'author_email'   ] , item [ 'author_name'   ] ) )	call the method <name2> .addQuickElement with an argument string <val4> , <val5> ,
elif <name4> [ <val2> ] :	formated with values under the 'author_email' and 'author_name' keys of <name4> dictionary . otherwise if value under the <val2> key of the <name4> dictionary is true ,
<name4> . addQuickElement ( <val1> , <name6> [ <val5> ] )	call the method <name4> .addQuickElement with 2 arguments : string <val1> and value under the <val5> key of the <name6> dictionary .
elif <name1> [ <val4> ] :	otherwise if value under the <val4> key of the <name1> dictionary is true ,
"<name2> . addQuickElement ( <val5> , item [ ""author_name"" ] , {  ""xmlns:dc"" : ""http://purl.org/dc/elements/1.1/"" }  )"	call the method <name2> .addQuickElement with 3 arguments : string <val5> ,
<name4> <name1> [ <val3>   ] <name2> <name5> <name6> :	"value under the 'author_name' key of the <name1> dictionary and dictionary with an entry : ""http://purl.org/dc/elements/1.1/"" for ""xmlns:dc"" . <name4> value under the <val3> key of the <name1> dictionary <name2> <name5> <name6> ,"
<name6> . addQuickElement ( <val4> , <name1> ( item [ 'pubdate'   ] ) )	call the method <name6> .addQuickElement with 2 arguments : string <val4> and result of the function <name1> ,
<name4> <name6> [ <val2>   ] <name5> <name3> <name1> :	called with value under the 'pubdate' key of the <name6> dictionary . <name4> value under the <val2> key of the <name6> dictionary <name5> <name3> <name1> ,
<name5> . addQuickElement ( <val2> , <name1> [ <val2>   ] )	call the method <name5> .addQuickElement with 2 arguments : string <val2> and value under the <val2> key of the <name1> dictionary .
<name2> <name1> [ <val5>   ] <name4> <name6> <name3> :	<name2> value under the <val5> key of the <name1> dictionary <name4> <name6> <name3> ,
<name5> = { }	<name5> is an empty dictionary .
<name2> isinstance ( <name6> . get ( <val5>   ) , <name3> ) :	<name2> value object the <val5> key of the <name6> dictionary is an instance of <name3> type ,
guid_attrs [ 'isPermaLink'   ] = str ( <name4> [ <val5>   ] ) . lower ( )	covert to string value under the <val5> key of the <name4> dictionary , convert it to lowercase ,
<name3> . addQuickElement ( <val5> , <name1> [ <val4>   ] , <name6> )	substitute the result for value under the 'isPermaLink' key of the <name6> dictionary . call the method <name3> .addQuickElement with 3 arguments : string <val5> , value under the <val4> key of the <name1> dictionary ,
<name3> <name2> [ <val1>   ] <name6> <name5> <name4> :	and guid_attrs . <name3> value under the <val1> key of the <name2> dictionary <name6> <name5> <name4> ,
<name1> . addQuickElement ( <val5> , <name2> [ <val5>   ] )	call the method <name1> .addQuickElement with 2 arguments : string <val5> and value under the <val5> key of the <name2> dictionary .
<name6> <name4> [ <val1>   ] <name2> <name3> <name5> :	<name6> value under the <val1> key of the <name4> dictionary <name2> <name3> <name5> ,
"<name2> . addQuickElement ( ""enclosure"" , ''   , {  ""url"" : item [ 'enclosure'   ] . url , ""length"" : item [ 'enclosure'   ] . length , ""type"" : item [ 'enclosure'   ] . mime_type }  )"	call the method <name2> .addQuickElement with 3 arguments : string 'title' , an empty string and a dictionary with 3 entries :
<name5> <name2> <name1> <name6> [ <val4>   ] :	field url of the value under the 'enclosure' key of the <name6> dictionary <name5> 'url' , field length of the value under the 'enclosure' key of the <name6> dictionary <name5> 'length' , and field mime_type of the value under the 'enclosure' key of the <name6> dictionary <name5> 'type' . <name5> every <name2> <name1> value under the <val4> key of the <name6> dictionary ,
<name5> . addQuickElement ( <val6> , <name2> )	call the method <name5> .addQuickElement with 2 arguments : string <val6> and <name2> .
<name5> <name2> ( <name3> ) :	derive the <name5> <name2> from the <name3> base <name5> .
<name1> = <val4>	<name1> is a string <val4> .
<name3> = <val2>	<name3> is a string <val2> .
def <name3> ( <name6> , <name5> , <name2> ) :	define the method <name3> with 3 arguments : <name6> , <name5> and <name2> .
<name4> = <name6> ( <name5> , <name1> )	<name4> is an instance of <name6> class , created with 2 arguments : <name5> and <name1> .
<name4> . startDocument ( )	call the method <name4> .startDocument .
<name5> . startElement ( <val4>   , <name2> . root_attributes ( ) )	call the method <name5> .startElement with 2 arguments : string <val4> and result of the method <name2> .root_attributes .
<name1> . add_root_elements ( <name5> )	call the method <name1> .add_root_elements with an argument <name5> .
<name1> . write_items ( <name6> )	call the method <name1> .write_items with an argument <name6> .
<name5> . endElement ( <val2> )	call the method <name5> .endElement with an argument string <val2> .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name5> <name4> . feed [ <val2>   ] <name1> <name6> <name3> :	<name5> value under the <val2> key of the <name4> .feed dictionary <name1> <name6> <name3> ,
"<name1> {  ""xmlns"" : <name6> . ns , <val3> : <name6> . feed [ <val4>   ] }"	<name1> a dictionary with 2 entries : value under the <val4> key of the <name6> .feed dictionary for <val3> ,
else :	"and self .ns for ""xmlns"" . if not ,"
<name1> {  <val2> : <name5> . ns }	<name1> a dictionary with an entry : <name5> .ns for <val2> .
def <name1> ( <name4> , <name2> ) :	define the method <name1> with 2 arguments : <name4> and <name2> .
<name4> . addQuickElement ( <val3> , <name2> . feed [ <val3>   ] )	call the method <name4> .addQuickElement with 2 arguments : string <val3> and value under the <val3> key of the <name2> .feed dictionary .
"<name6> . addQuickElement ( <val1> , """" , {  ""rel"" : ""alternate"" , ""href"" : self . feed [ <val1>   ] }  )"	call the method <name6> .addQuickElement with 3 arguments : string <val1> , an empty string and a dictionary with 2 entries :
<name2> <name3> . feed [ <val6>   ] <name1> <name5> <name4> :	'alternate' for 'rel' and value under the 'link' key of <name3> .feed dictionary for 'href' . <name2> value under the <val6> key of the <name3> .feed dictionary <name1> <name5> <name4> ,
"<name4> . addQuickElement ( <val2> , """" , {  ""rel"" : ""self"" , ""href"" : self . feed [ 'feed_url'   ] }  )"	call the method <name4> .addQuickElement with 3 arguments : string <val2> , an empty string and a dictionary with 2 entries :
"<name1> . addQuickElement ( ""id"" , <name3> . feed [ 'id'   ] )"	'self' for 'rel' and value under the 'feed_url' key of <name3> .feed dictionary for 'href' . call the method <name1> .addQuickElement with 2 arguments : string 'title' and value under the 'title' key of the <name3> .feed dictionary .
<name2> . addQuickElement ( <val4> , <name3> ( self . latest_post_date ( ) ) )	call the method <name2> .addQuickElement with 2 arguments : string <val4> and result of the function <name3> ,
<name1> <name2> . feed [ <val3>   ] <name4> <name6> <name5> :	called with an argument result of the method <name2> .latest_post_date . <name1> value under the <val3> key of the <name2> .feed dictionary <name4> <name6> <name5> ,
<name5> . startElement ( <val4> , { }  )	call the method <name5> .startElement with 2 arguments : string <val4> and an empty dictionary .
<name4> . addQuickElement ( <val2> , <name3> . feed [ <val1>   ] )	call the method <name4> .addQuickElement with 2 arguments : string <val2> and value under the <val1> key of the <name3> .feed dictionary .
<name5> <name2> . feed [ <val6>   ] <name4> <name3> <name1> :	<name5> value under the <val6> key of the <name2> .feed dictionary <name4> <name3> <name1> ,
<name1> . addQuickElement ( <val5> , <name4> . feed [ <val6>   ] )	call the method <name1> .addQuickElement with 2 arguments : string <val5> and value under the <val6> key of the <name4> .feed dictionary .
<name3> <name2> . feed [ <val1>   ] <name4> <name6> <name5> :	<name3> value under the <val1> key of the <name2> .feed dictionary <name4> <name6> <name5> ,
<name5> . addQuickElement ( <val4> , <name2> . feed [ <val3>   ] )	call the method <name5> .addQuickElement with 2 arguments : string <val4> and value under the <val3> key of the <name2> .feed dictionary .
<name4> . endElement ( <val1> )	call the method <name4> .endElement with an argument string <val1> .
<name5> <name1> . feed [ <val4>   ] <name2> <name6> <name3> :	<name5> value under the <val4> key of the <name1> .feed dictionary <name2> <name6> <name3> ,
<name3> . addQuickElement ( <val2> , <name1> . feed [ <val2>   ] )	call the method <name3> .addQuickElement with 2 arguments : string <val2> and value under the <val2> key of the <name1> .feed dictionary .
<name1> <name4> <name2> <name5> . feed [ <val6>   ] :	<name1> every <name4> <name2> value under the <val6> key of the <name5> .feed dictionary .
"<name5> . addQuickElement ( <val1> , """" , {  ""term"" : cat }  )"	call the method <name5> .addQuickElement with 3 arguments : string <val1> , an empty string and a dictionary with an entry :
<name6> <name1> . feed [ <val2>   ] <name3> <name5> <name4> :	cat for 'term' . <name6> value under the <val2> key of the <name1> .feed dictionary <name3> <name5> <name4> ,
<name3> . addQuickElement ( <val6> , <name4> . feed [ <val1>   ] )	call the method <name3> .addQuickElement with 2 arguments : string <val6> and value under the <val1> key of the <name4> .feed dictionary .
def <name5> ( <name3> , <name2> ) :	define the method <name5> with 2 arguments : <name3> and <name2> .
<name1> <name3> <name5> <name2> . items :	<name1> every <name3> <name5> <name2> .items ,
<name2> . startElement ( <val5> , <name4> . item_attributes ( item ) )	call the method <name2> .startElement with 2 arguments : string <val5> and result of the function <name4> .item_attributes ,
<name4> . add_item_elements ( <name1> , <name5> )	called with an argument <name5> . call the method <name4> .add_item_elements with 2 arguments : <name1> and <name5> .
<name5> . endElement ( <val3> )	call the method <name5> .endElement with an argument string <val3> .
def <name6> ( <name1> , <name3> , <name2> ) :	define the method <name6> with 3 arguments : <name1> , <name3> and <name2> .
<name3> . addQuickElement ( <val5> , <name4> [ <val5>   ] )	call the method <name3> .addQuickElement with 2 arguments : string <val5> and value under the <val5> key of the <name4> dictionary .
"<name6> . addQuickElement ( <val5> , """" , {  ""href"" : item [ <val5>   ] , ""rel"" : ""alternate"" }  )"	call the method <name6> .addQuickElement with 3 arguments : string <val5> , an empty string and a dictionary with 2 entries :
<name4> <name6> [ <val1>   ] <name2> <name5> <name3> :	"value under the 'link' key of <name6> dictionary for 'href' and ""alternate"" for ""rel"" . <name4> value under the <val1> key of the <name6> dictionary <name2> <name5> <name3> ,"
<name6> . addQuickElement ( <val2>   , <name5> ( item [ 'pubdate'   ] ) )	call the method <name6> .addQuickElement with 2 arguments : string <val2> and result of the function <name5> ,
<name2> <name6> [ <val5>   ] <name1> <name3> <name4> :	called with an argument value under the 'pubdate' key of the <name6> dictionary . <name2> value under the <val5> key of the <name6> dictionary <name1> <name3> <name4> ,
<name6> . addQuickElement ( <val5>   , <name3> ( item [ 'updateddate'   ] ) )	call the method <name6> .addQuickElement with 2 arguments : string <val5> and result of the function <name3> ,
<name5> <name2> [ <val4>   ] <name6> <name3> <name1> :	called with an argument value under the 'updateddate' key of the <name2> dictionary . <name5> value under the <val4> key of the <name2> dictionary <name6> <name3> <name1> ,
<name3> . startElement ( <val2> , { }  )	call the method <name3> .endElement with 2 arguments : string <val2> and an empty dictionary .
<name5> . addQuickElement ( <val1> , <name2> [ <val4>   ] )	call the method <name5> .addQuickElement with 2 arguments : string <val1> and value under the <val4> key of the <name2> dictionary .
<name2> <name5> [ <val4>   ] <name1> <name3> <name6> :	<name2> value under the <val4> key of the <name5> dictionary <name1> <name3> <name6> ,
<name5> . addQuickElement ( <val1> , <name2> [ <val3>   ] )	call the method <name5> .addQuickElement with 2 arguments : string <val1> and value under the <val3> key of the <name2> dictionary .
<name4> <name1> [ <val3>   ] <name6> <name5> <name2> :	<name4> value under the <val3> key of the <name1> dictionary <name6> <name5> <name2> ,
<name5> . addQuickElement ( <val2> , <name6> [ <val4>   ] )	call the method <name5> .addQuickElement with 2 arguments : string <val2> and value under the <val4> key of the <name6> dictionary .
<name5> . endElement ( <val1> )	call the method <name5> .endElement with an argument string <val1> .
<name2> <name6> [ <val1>   ] <name5> <name3> <name4> :	<name2> value under the <val1> key of the <name6> dictionary <name5> <name3> <name4> ,
<name6> = <name1> [ <val2>   ]	substitute value under <val2> key of <name1> dictionary for <name6> .
else :	if not ,
<name4> = <name1> ( <name5> [ <val6>   ] , <name5> [ <val3>   ] )	call the function <name1> with 2 arguments : values under <val6> and <val3> keys of <name5> dictionary , substitute the result for <name4> .
<name3> . addQuickElement ( <val2> , <name5> )	call the method <name3> .addQuickElement with 2 arguments : string <val2> and <name5> .
<name2> <name4> [ <val6>   ] <name5> <name3> <name1> :	<name2> value under the <val6> key of the <name4> dictionary <name5> <name3> <name1> ,
"<name1> . addQuickElement ( <val2> , <name3> [ <val4>   ] , {  ""type"" : ""html"" }  )"	call the method <name1> .addQuickElement with 3 arguments : string <val2> , value under the <val4> key of <name3> dictionary ,
<name4> <name1> [ <val3>   ] <name5> <name2> <name6> :	and dictionary with an entry : 'html' for 'type' . <name4> value under the <val3> key of the <name1> dictionary <name5> <name2> <name6> ,
"<name1> . addQuickElement ( <val6> , ''   , {  ""rel"" : ""enclosure"" , ""href"" : item [ 'enclosure'   ] . url , ""length"" : item [ 'enclosure'   ] . length , ""type"" : item [ 'enclosure'   ] . mime_type }  )"	call the method <name1> .addQuickElement with 3 arguments : string <val6> , an empty string and a dictionary with 4 entries :
<name4> <name3> <name6> <name5> [ <val1>   ] :	"enclosure <name4> 'rel' , field url of value under the ""enclosure"" key of <name5> dictionary <name4> 'href' , field length of value under the ""enclosure"" key of <name5> dictionary <name4> 'length' , and field mime_type of value under the ""enclosure"" key of <name5> dictionary <name4> 'type' . <name4> every <name3> <name6> value under <val1> key of <name5> dictionary ,"
"<name5> . addQuickElement ( ""category"" , """" , {  ""term"" : cat }  )"	call the method <name5> .addQuickElement with 3 arguments : string 'link' , an empty string and a dictionary with an entry :
<name4> <name1> [ <val3>   ] <name6> <name5> <name2> :	cat for 'term' . <name4> value under the <val3> key of the <name1> dictionary <name6> <name5> <name2> ,
<name1> . addQuickElement ( <val6> , <name2> [ <val3>   ] )	call the method <name1> .addQuickElement with 2 arguments : string <val6> and value under the <val3> key of the <name2> dictionary .
<name5> = <name2>	substitute <name2> for <name5> .
<name5> <name1> <name4> absolute_import	<name5> <name1> <name4> absolute_ into default name space .
<name2> <name5>	<name2> module <name5> .
<name1> <name4>	<name1> module <name4> .
<name1> <name3> <name6> <name5>	<name1> <name3> <name6> <name5> into default name space .
<name2> <name4>	<name2> module <name4> .
<name3> <name2> . conf <name4> <name5>	<name3> <name2> .conf <name4> <name5> into default name space .
<name6> <name1> . utils <name5> <name3> , <name4> , <name2>	<name6> <name1> .utils <name5> <name3> , <name4> and <name2> into default name space .
<name6> <name1> . utils . encoding <name5> <name2>	<name6> <name1> .utils .encoding <name5> <name2> into default name space .
<name2> <name5> . utils . functional <name4> <name6>	<name2> <name5> .utils .functional <name4> <name6> into default name space .
<name2> <name6> . utils . safestring <name5> <name1>	<name2> <name6> .utils .safestring <name5> <name1> into default name space .
<name2> <name6> . utils <name4> <name1>	<name2> <name6> .utils <name4> <name1> into default name space .
<name1> <name4> . utils . translation <name3> <name5> , <name2> , <name6>	<name1> <name4> .utils .translation <name3> <name5> , <name2> and <name6> into default name space .
<name5> = { }	<name5> is an empty dictionary .
<name5> = { }	<name5> is an empty dictionary .
<name3> = {   <val5>   : ( <val1>   , ) , 'TIME_INPUT_FORMATS'   : ( '%H:%M:%S'   , '%H:%M:%S.%f'   , '%H:%M'   ) , 'DATETIME_INPUT_FORMATS'   : ( '%Y-%m-%d %H:%M:%S'   , '%Y-%m-%d %H:%M:%S.%f'   , '%Y-%m-%d %H:%M'   , <val1>    ) , }	<name3> is a dictionary with 3 entries : tuple with an element string <val1> for <val5> ,
def <name2> ( ) :	tuple with 3 elements : strings '%H:%M:%S' , '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS' , tuple with 4 elements : strings '%Y-%m-%d %H:%M:%S' , '%Y-%m-%d %H:%M:%S.%f' , '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS' . define the function <name2> .
<name3> <name2> , <name5>	use <name3> variables <name2> and <name5> .
<name1> = { }	<name1> is an empty dictionary .
<name4> = { }	<name4> is an empty dictionary .
def <name2> ( <name1> , <name4> = <name5> ) :	define the function <name2> with 2 arguments : <name1> and <name4> set to <name5> .
<name3> not <name5> ( <name2> ) :	call the function <name5> with an argument <name2> , <name3> it evaluates to false ,
<name2>	<name2> nothing .
<name3> <name5> <name1> <name4> :	<name3> <name5> <name1> <name4> .
format_module_path = <name4> . FORMAT_MODULE_PATH	substitute <name4> .FORMAT_MODULE_PATH for <name4> .FORMAT_MODULE_PATH .
<name1> = [ ]	<name1> is an empty list .
<name1> <name3> :	<name1> <name3> is true ,
<name4> isinstance ( <name1> , <name6> . string_types ) :	<name4> <name1> is an instance of <name6> .string_types ,
<name1> = [ <name1> ]	<name1> is a list containing an element <name1> .
<name2> <name3> <name1> <name5> :	<name2> every <name3> <name1> <name5> ,
format_locations . <name5> ( <name2> + <val6>   )	concatenate <name2> and string <val6> , <name5> the result to format_module_path .
<name4> . <name1> ( <val3>   )	<name1> string <val3> to <name4> .
<name4> = <name6> ( <name2> )	call the function <name6> with an argument <name2> , substitute the result for <name4> .
<name6> = [ <name4> ]	<name6> is a list with an element <name4> .
<name6> <val1>   <name4> <name3> :	<name6> <val1> is contained <name4> <name3> ,
<name2> . <name1> ( <name3> . <name4> ( <val5>   ) [ 0 ] )	<name4> <name3> by <val5> , <name1> the first element of the result to <name2> .
<name6> <name2> <name5> <name3> :	<name6> every <name2> <name5> <name3> ,
<name6> <name1> <name2> <name5> :	<name6> every <name1> <name2> <name5> ,
<name3> :	<name3> ,
yield <name4> ( <val1>   % ( <name2> % <name6> ) )	call the function <name4> with an argument string <val1> formated with <name2> , which is formated with <name6> ,
except <name1> :	yield the result . if <name1> exception is caught ,
pass	do nothing .
def <name6> ( <name2> = <name1> , <name3> = <name4> ) :	define the function <name6> with 2 arguments : <name2> set to <name1> and <name3> set to boolean <name4> .
<name2> <name5> <name1> <name3> :	<name2> <name5> <name1> <name3> ,
<name2> = <name5> ( )	call the function <name5> , substitute the result for <name2> .
modules = <name5> . setdefault ( <name6> , <name4> ( iter_format_modules ( <name6> , settings . FORMAT_MODULE_PATH ) ) )	call the method <name5> .setdefault with 2 arguments : <name6> and <name4> created out of the results of the function ,
<name4> <name1> :	iter_format_modules called with 2 arguments : lang and settings .FORMAT_MODULE_PATH , substitute the result for modules . <name4> <name1> is true ,
<name3> <name4> ( reversed ( <name5> ) )	reverse the order of <name5> elements , put them into a <name4> , <name3> it .
<name3> <name6>	<name3> <name6> .s
def <name4> ( <name3> , <name6> = <name5> , <name2> = <name5> ) :	define the function <name4> with 3 arguments : <name3> , <name6> set to <name5> and <name2> set to <name5> .
<name6> = <name3> ( <name6> )	call the function <name3> with an argument <name6> , substitute the result for <name6> .
<name2> <name5> <name6> ( <name5> <name1> <name4> <name3> <name2> . USE_L10N ) :	<name2> <name5> <name1> true , <name6> <name2> <name5> <name1> <name4> <name3> <name2> .USE_L10N <name1> true ,
<name2> <name1> <name4> <name5> :	<name2> <name1> <name4> <name5> ,
<name3> = <name5> ( )	call the function <name5> , substitute the result for <name3> .
<name6> = ( <name4> , <name3> )	<name6> is a tuple with 2 argumetns : <name4> and <name3> .
<name2> :	<name2> ,
<name6> = <name5> [ <name2> ]	substitute value under the <name2> key of the <name5> dictionary for <name6> .
<name5> <name3> <name2> <name4> <name1> :	<name5> <name3> <name2> <name4> <name1> ,
<name3> <name2>	<name3> <name2> .
else :	if not ,
<name4> getattr ( <name3> , <name6> )	get <name6> attribute of the <name3> object , <name4> it .
except <name1> :	if <name1> exception is caught ,
<name2> <name1> <name5> <name4> ( <name6> ) :	call the function <name4> with an argument <name6> , <name2> every <name1> <name5> the result ,
<name6> :	<name6> ,
<name2> = getattr ( <name5> , <name3> )	get <name3> attribute of <name5> object , substitute the result for <name2> .
for <name5> <name6> <name2> . <name1> ( format_type , ( ) ) :	<name1> the value under the if <name5> not <name6> val key of the <name2> dictionary , if it doesnt exists return an empty tuple ,
     <name3> <name4> <name5> <name6> <name1> :	for every <name4> <name6> the result , <name3> <name4> is <name5> contained <name6> <name1> ,
         <name3> isinstance ( <name2> , <name1> ) :	<name3> <name2> is an instance of <name1> ,
             <name2> = <name4> ( <name2> )	convert <name2> to an <name4> , substitute it for <name2> .
<name6> . <name4> ( <name1> )	<name4> <name1> to <name6> .
<name3> [ <name4> ] = <name5>	substitute <name5> for the value under the <name4> key of the <name3> dictionary .
<name3> <name1>	<name3> <name1> .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
<name6> [ <name1> ] = <name3>	value under the <name1> key of the <name6> dictionary is <name3> .
<name1> getattr ( <name6> , <name5> )	get <name5> attribute of the <name6> object , <name1> it .
<name3> = <name4> ( <name6> , <name2> . text_type , <name1> , <name5> )	call the function <name4> with 4 arguments : <name6> , <name2> .text_type , <name1> and <name5> , substitute the result for <name3> .
def <name6> ( <name4> , <name1> = <name3> , <name5> = <name3> ) :	define the function <name6> with 3 arguments : <name4> , <name1> set to <name3> and <name5> set to <name3> .
return <name3> . format ( <name5> , <name2> ( format or 'DATE_FORMAT'   , use_l10n = use_l10n ) )	call the function <name3> .format with 2 arguments : <name5> and result of the function <name2> called with 2 arguments :
def <name6> ( <name5> , <name4> = <name3> , <name2> = <name3> ) :	<name4> , if its true , otherwise string 'DATE_FORMAT' and <name2> as <name2> , return the result . define the function <name6> with 3 arguments : <name5> , <name4> set to <name3> and <name2> set to <name3> .
return <name2> . time_format ( <name5> , <name4> ( format or 'TIME_FORMAT'   , use_l10n = use_l10n ) )	call the function <name2> .time_format with 2 arguments : <name5> and result of the function <name4> called with 2 arguments :
def <name5> ( <name1> , <name6> = <name2> , <name4> = <name2> , force_grouping = False ) :	format , if its true , otherwise string 'TIME_FORMAT' and <name4> as <name4> , return the result . define the function <name5> with 4 arguments : <name1> , <name6> set to <name2> , <name4> set to <name2> ,
<name5> <name3> <name2> ( <name3> <name4> <name1> <name6> <name5> . USE_L10N ) :	<name5> <name3> <name4> true , <name2> <name3> <name4> <name1> <name6> <name5> .USE_L10N <name4> true ,
<name3> = <name6> ( )	call the function <name6> , substitute the result for <name3> .
else :	if not ,
<name6> = <name4>	<name6> is <name4> .
return <name4> . format ( <name6> , <name5> ( 'DECIMAL_SEPARATOR'   , lang , use_l10n = use_l10n ) , decimal_pos , <name5> ( 'NUMBER_GROUPING'   , lang , use_l10n = use_l10n ) , <name5> ( 'THOUSAND_SEPARATOR'   , lang , use_l10n = use_l10n ) , force_grouping = force_grouping )	call the method <name4> .format with 6 arguments : <name6> , result of the function <name5> called with 3 arguments :
def <name3> ( <name5> , <name6> = <name2> ) :	string 'DECIMAL_SEPARATOR' , lang and <name6> set to <name6> , decimal_pos , result of the function get_format called with 3 arguments : string 'NUMBER_GROUPING' , lang and <name6> as <name6> , result of the function get_format called with an argument : string 'THOUSAND_SEPARATOR' , lang and <name6> as <name6> and force_grouping as force_grouping , return the result . define the function <name3> with 2 arguments <name5> and <name6> set to <name2> .
<name4> isinstance ( <name1> , <name5> ) :	<name4> <name1> is an instance of <name5> .
return <name5> ( <name3> . text_type ( <name6> ) )	call the function <name3> .text_type with an argument <name6> , use the result as an argument for the call to the function <name5> ,
elif isinstance ( <name4> , ( <name5> . Decimal , <name3> ) + <name2> . integer_types ) :	return the result . otherwise if <name4> is an instance of <name5> .Decimal , <name3> or <name2> .integer_types ,
<name3> <name4> ( <name5> , <name6> = <name6> )	call the function <name4> with 2 arguments : <name5> and use_l10 as <name6> , <name3> the result .
elif isinstance ( <name5> , <name4> . <name4> ) :	otherwise if <name5> is an instance of <name4> .datetime ,
<name4> <name2> ( <name3> , <val1>   , <name5> = <name5> )	call the function <name2> with 2 arguments : <name3> , string <val1> and <name5> as <name5> , <name4> the result .
elif isinstance ( <name4> , <name1> . date ) :	otherwise if <name4> is an instance of <name1> .date ,
<name1> <name3> ( <name2> , <name4> = <name4> )	call the function <name3> with 2 arguments : <name2> and <name4> as <name4> , <name1> the result .
elif isinstance ( <name3> , <name1> . time ) :	otherwise if <name3> is an instance of <name1> .time ,
<name6> <name5> ( <name1> , <val3>   , <name2> = <name2> )	call the function <name5> with 3 arguments : <name1> , string <val3> and <name2> as <name2> , <name6> the result .
else :	if not ,
<name3> <name2>	<name3> <name2> .
def <name1> ( <name5> , <name2> = <name3> ) :	define the function <name1> with 2 arguments <name5> and <name2> set to <name3> .
<name1> isinstance ( <name6> , ( <name2> . Decimal , <name5> ) + <name4> . integer_types ) :	otherwise <name1> <name6> is an instance of <name2> .Decimal , <name5> or <name4> .integer_types ,
<name1> <name2> ( <name3> )	call the function <name2> with an argument <name3> , <name1> the result .
elif isinstance ( <name4> , <name3> . <name3> ) :	otherwise if <name4> is an instance of <name3> .datetime ,
<name3> = <name6> . new_datetime ( <name3> )	call the method <name6> .new_datetime with an argument <name3> , substitute the result for <name3> .
format = <name2> ( <name3> <name1> get_format ( 'DATETIME_INPUT_FORMATS'   ) [ 0 ] )	call the function <name2> with an argument : <name3> if it is true , <name1> if not , first element of the result of the function ,
<name4> <name5> . strftime ( <name6> )	get_format called with an argument string 'DATETIME_INPUT_FORMATS' , substitute the result for <name6> . call the method <name5> .strftime with an argument <name6> , <name4> the result .
elif isinstance ( <name6> , <name5> . date ) :	otherwise if <name6> is an instance of <name5> .date ,
<name5> = <name4> . new_date ( <name5> )	call the method <name4> .new_date with an argument <name5> , substitute the result for <name5> .
format = <name5> ( <name1> <name6> get_format ( 'DATE_INPUT_FORMATS'   ) [ 0 ] )	call the function <name5> with an argument : <name1> if it is true , <name6> if not , first element of the result of the function ,
<name4> <name6> . strftime ( <name5> )	get_format called with an argument string 'DATE_INPUT_FORMATS' , substitute the result for <name5> . call the method <name6> .strftime with an argument <name5> , <name4> the result .
elif isinstance ( <name4> , <name3> . time ) :	otherwise if <name4> is an instance of <name3> .time ,
format = <name6> ( <name2> <name4> get_format ( 'TIME_INPUT_FORMATS'   ) [ 0 ] )	call the function <name6> with an argument : <name2> if it is true , <name4> if not , first element of the result of the function ,
<name2> <name1> . strftime ( <name6> )	get_format called with an argument string 'TIME_INPUT_FORMATS' , substitute the result for <name6> . call the method <name1> .strftime with an argument <name6> , <name2> the result .
<name6> <name4>	<name6> <name4> .
def <name6> ( <name1> ) :	define the function <name6> with an argument <name1> .
<name6> <name3> . USE_L10N <name2> isinstance ( <name5> , <name4> . string_types ) :	<name6> <name3> .USE_L10N is true <name2> <name5> is an instance of <name4> .string_types ,
<name2> = [ ]	<name2> is an empty list .
<name3> = <name2> ( <val1>   )	call the function <name2> with an argument string <val1> , substitute the result for <name3> .
<name6> <name3> <name1> <name5> :	<name6> <name3> is contained <name1> <name5> ,
<name1> , <name4> = <name1> . <name6> ( <name5> , 1 )	<name6> <name1> into two parts by <name5> , assign the result to <name1> and <name4> .
<name1> . <name6> ( <name2> )	<name6> <name2> to <name1> .
<name2> <name4> . USE_THOUSAND_SEPARATOR :	<name2> <name4> .USE_THOUSAND_SEPARATOR is true ,
<name3> = <name6> ( <val4>   )	call the function <name6> with an argument string <val4> , substitute the result for <name3> .
for replacement in <name5> ( [ <name2> , <name4> . normalize ( <val1>   , <name2> ) ] ) :	call the function <name4> .normalize with 2 arguments : string <val1> and <name2> , put the result and <name2> into a <name5> ,
<name5> = <name5> . <name4> ( <name6> , ''   )	for every <name6> in the resulting set , <name4> every occurrence of <name6> in <name5> for an empty string , substitute the result for <name5> .
<name2> . <name6> ( <name4> )	<name6> <name4> to <name2> .
<name5> = <val1>   . <name6> ( reversed ( <name4> ) )	reverse order of <name4> , <name6> them into a string , separated with <val1> , substitute the result for <name5> .
<name1> <name4>	<name1> <name4> .
<name3> <name5>	<name3> module <name5> .
<name2> operator	<name2> module opera .
<name5> <name6> <name2> <name4>	<name5> <name6> <name2> <name4> into default name space .
<name2> <name1>	<name2> module <name1> .
<name6> <name1>	<name6> module <name1> .
<name5> <name1> . utils <name2> <name3>	<name5> <name1> .utils <name2> <name3> into default name space .
<name6> <name5> . utils . deprecation <name3> <name4>	<name6> <name5> .utils .deprecation <name3> <name4> into default name space .
<name3> <name2> . utils . six . moves <name5> <name1>	<name3> <name2> .utils .six .moves <name5> <name1> into default name space .
def <name4> ( <name3> , * <name1> , ** <name5> ) :	define the function <name4> with 3 arguments : <name3> , unpacked list <name1> and unpacked dictionary <name5> .
def <name1> ( * <name5> , ** <name3> ) :	define the function <name1> with 2 arguments : unpacked list <name5> and unpacked dictionary <name3> .
return <name3> ( * ( <name1> + <name5> ) , ** dict ( kwargs , ** morekwargs ) )	call the function <name3> with 2 arguments : list <name5> appended to <name1> and unpacked ,
<name1> <name4>	unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping , <name1> the result . <name1> <name4> .
def <name5> ( <name6> , <name3> , <name4> ) :	define the function <name5> with 3 arguments : <name6> , <name3> and <name4> .
"<name5> . warn ( ""memoize wrapper is deprecated and will be removed in "" ""Django 1.9. Use django.utils.lru_cache instead."" , RemovedInDjango19Warning , stacklevel = 2 )"	call the function <name5> .warn with 3 arguments :
@  <name6> ( <name3> )	"string ""memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead."" , RemovedInDjango19Warning and stacklevel set to integer 2 . decorator function <name6> with an argument <name3> ."
def <name6> ( * <name4> ) :	define the function <name6> with an argument unpacked list <name4> .
<name4> = <name2> [ : <name1> ]	<name4> is a list containing of first <name1> elements of <name2> list .
<name3> <name4> <name6> <name2> :	<name3> <name4> is contained <name6> <name2> ,
<name1> <name6> [ <name5> ]	get the value under the <name5> key of the <name6> dictionary , <name1> it .
<name3> = <name4> ( * <name2> )	call the function <name4> with an argument unpacked list <name2> , substitute the <name3> for <name3> .
<name6> [ <name1> ] = <name3>	substitute <name3> for value under the <name1> key of the <name6> dictionary .
<name3> <name1>	<name3> <name1> .
<name6> <name4>	<name6> <name4> .
<name6> <name3> ( <name4> ) :	derive the <name6> <name3> from the <name4> base <name6> .
def <name5> ( <name6> , <name1> , <name4> = <name3> ) :	define the method <name5> with 3 arguments : <name6> , <name1> and <name4> set to <name3> .
<name2> . <name5> = <name5>	substitute <name5> for <name2> .func .
<name3> . <name2> = <name2> or <name6> . __name__	if <name2> is true , substitute it for <name3> .name , otherwise substitute <name6> .__name__ for <name3> .name .
def <name2> ( <name5> , <name6> , <name1> = <name4> ) :	define the method <name2> with 3 arguments : <name5> , <name6> and name <name1> to <name4> .
<name5> <name2> <name4> <name1> :	<name5> <name2> <name4> <name1> ,
<name1> <name4>	<name1> <name4> .
<name5> = <name2> . __dict__ [ <name4> . name ] = <name4> . func ( <name2> )	call the function <name4> .func with an argument <name2> , substitute the result for <name5> and value under the <name4> .name key of the <name2> .__dict__ dictionary .
<name6> <name2>	<name6> <name2> .
<name2> <name6> ( <name1> ) :	derive the <name2> <name6> from the <name1> base <name2> .
pass	do nothing .
def <name1> ( <name5> , * <name4> ) :	define the function <name1> with 2 arguments : <name5> and unpacked list <name4> .
@  <name5>	decorator <name5> ,
<name2> <name6> ( <name4> ) :	derive the <name2> <name6> from the <name4> base <name2> .
<name5> = <name2>	<name5> is <name2> .
def <name1> ( <name4> , <name5> , <name2> ) :	define the method <name1> with 3 arguments : <name4> , <name5> and <name2> .
<name5> . __args = <name1>	substitute <name1> for <name5> .__args .
<name3> . __kw = <name4>	substitute <name4> for <name3> .__kw .
<name6> <name4> . __dispatch <name1> <name3> :	<name6> <name4> .__dispatch <name1> <name3> .
<name4> . __prepare_class__ ( )	call the method <name4> .__prepare_class__ .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name6> ( <name5> , ( <name3> , <name4> . __args , <name4> . __kw ) + <name1> )	<name6> a tuple wit 2 elements : <name5> and tuple with 3 elements : <name3> , <name4> .__args , <name4> .__kw and <name1> .
@  <name5>	<name5> decorator ,
def <name2> ( cls ) :	define the method <name2> with an argument self .
<name1> . __dispatch = { }	<name1> .__dispatch is an empty dictionary .
<name6> <name5> <name3> <name4> :	<name6> every <name5> <name3> <name4> ,
<name1> . __dispatch [ <name3> ] = { }	value under the <name3> key of the <name1> .__dispatch dictionary is an empty dictionary .
<name2> <name1> <name3> reversed ( <name5> . mro ( ) ) :	call the method <name5> .mro , reverse the order of elements , <name2> every <name1> <name3> the result .
<name6> ( <name2> , <name3> ) <name1> <name5> . __dict__ . items ( ) :	<name6> every <name2> and <name3> <name1> result of the call to the method <name5> .__dict__ .items ,
         <name2> = <name5> . __promise__ ( <name3> , <name6> , <name4> )	call the method <name5> .__promise__ with 3 arguments : <name3> , <name6> and <name4> , substitute the result for <name2> .
<name4> hasattr ( <name2> , <name1> ) :	<name4> <name2> has an attribute <name1> ,
         continue	skip this loop iteration ,
setattr ( <name1> , <name3> , <name4> )	set <name3> attribute of <name1> object to <name4> .
<name2> . _delegate_bytes = <name4> <name3> <name1>	if <name4> is contained <name3> <name1> , <name2> ._delegate_bytes is boolean True , otherwise it is boolean False .
<name1> . _delegate_text = <name5> . text_type <name2> <name3>	if <name5> .text_type is contained <name2> <name3> , <name1> ._delegate_text is boolean True , otherwise it is boolean False .
assert not ( <name5> . _delegate_bytes <name3> <name5> . _delegate_text ) , <val4>	if <name5> ._delegate_bytes <name3> <name5> ._delegate_text are both false , raise an error , with an argument string <val4> .
<name5> <name1> . _delegate_text :	<name5> <name1> ._delegate_text is true ,
<name6> <name5> . PY3 :	<name6> <name5> .PY3 is true ,
<name3> . __str__ = <name3> . __text_cast	substitute <name3> .__text_cast for <name3> .__str__ .
else :	if not ,
<name3> . __unicode__ = <name3> . __text_cast	substitute <name3> .__text_cast for <name3> .__text_cast .
elif <name1> . _delegate_bytes :	otherwise if <name1> ._delegate_bytes is true ,
<name6> <name5> . PY3 :	<name6> <name5> .PY3 is true ,
<name1> . __bytes__ = <name1> . __bytes_cast	substitute <name1> .__bytes_cast for <name1> .__bytes__ .
else :	if not ,
<name6> . __str__ = <name6> . __bytes_cast	substitute <name6> .__bytes_cast for <name6> .__str__ .
@  classmethod	class method decorator ,
def <name4> ( <name3> , <name5> , <name1> , <name2> ) :	define the <name2> <name4> with 4 arguments : <name3> , <name5> , <name1> and <name2> .
def <name3> ( <name5> , * <name6> , ** <name4> ) :	define the method <name3> with 3 arguments : <name5> , unpacked list <name6> and unpacked dictionary <name4> .
<name6> = <name3> ( * <name1> . __args , ** <name1> . __kw )	call the function <name3> with 2 arguments : unpacked list <name1> .__args and unpacked dictionary <name1> .__kw , substitute the result for <name6> .
<name6> <name4> <name1> <name3> ( <name5> ) . <name2> ( ) :	get the <name3> of <name5> , call the method <name2> on the result , <name6> every <name4> <name1> the result ,
<name1> <name5> <name3> <name6> . __dispatch :	<name1> <name5> is contained <name3> <name6> .__dispatch ,
     return <name3> . __dispatch [ <name4> ] [ <name2> ] ( <name5> , * args , ** kw )	get the value under the <name2> key of the <name4> - th elment of <name3> .__dispatch dictionary , call the result with 3 arguments : <name5> ,
<name4> <name2> ( <val5> )	unpacked list args and unpacked dictionary kw , return the result . <name4> an <name2> exception with an argument sting <val5> .
<name3> <name6> <name4> <name1> <name5> . __dispatch :	<name3> <name6> is <name4> contained <name1> <name5> .__dispatch ,
<name4> . __dispatch [ <name3> ] = { }	value under the <name3> key of the <name4> .__dispatch dictionary is an empty dictionary .
<name1> . __dispatch [ <name3> ] [ <name2> ] = <name5>	substitute <name5> for value under the <name2> key of the dictionary under the <name3> key of the <name1> .__dispatch dictionary .
<name4> <name1>	<name4> <name1> .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name2> <name4> ( * <name6> . __args , ** <name6> . __kw )	call the function <name4> with 2 arguments : unpacked list <name6> .__args and unpacked dictionary <name6> .__kw , <name2> the result .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
return bytes ( <name6> ( * <name3> . __args , ** <name3> . __kw ) )	call the function <name6> with 2 arguments : unpacked list <name3> .__args and unpacked dictionary <name3> .__kw ,
def <name2> ( <name4> ) :	use the result as an argument for the call to the function bytes , return the result . define the method <name2> with an argument <name4> .
<name1> <name5> . _delegate_bytes :	<name1> <name5> ._delegate_bytes is true ,
<name4> <name1> . __bytes_cast ( )	call the method <name1> .__bytes_cast , <name4> the result .
elif <name4> . _delegate_text :	otherwise if <name4> ._delegate_text is true ,
<name2> <name3> . __text_cast ( )	call the method <name3> .__text_cast , <name2> the result .
else :	if not ,
<name5> <name2> ( * <name1> . __args , ** <name1> . __kw )	call the function <name2> with 2 arguments : unpacked list <name1> .__args and unpacked dictionary <name1> .__kw , <name5> the result .
def <name4> ( <name5> , <name6> ) :	define the method <name4> with 2 arguments : <name5> and <name6> .
<name2> isinstance ( <name1> , <name6> ) :	<name2> <name1> is an instance of <name6> class ,
<name3> = <name3> . __cast ( )	call the method <name3> .__cast , substitute the result for <name3> .
<name2> <name1> . __cast ( ) != <name3>	call the method <name1> .__cast , if the result doesnt equal to <name3> , <name2> boolean True , otherwise <name2> boolean False .
def __eq__ ( <name3> , <name2> ) :	define the method __ne__ with 2 arguments : <name3> and <name2> .
<name3> isinstance ( <name5> , <name2> ) :	<name3> <name5> is an instance of <name2> class ,
<name3> = <name3> . __cast ( )	call the method <name3> .__cast , substitute the result for <name3> .
<name3> <name2> . __cast ( ) == <name5>	call the method <name2> .__cast , if the result equals <name5> , <name3> boolean True , otherwise <name3> boolean False .
def <name6> ( <name3> , <name1> ) :	define the method <name6> with 2 arguments : <name3> and <name1> .
<name3> isinstance ( <name1> , <name5> ) :	<name3> <name1> is an instance of <name5> ,
<name3> = <name3> . __cast ( )	call the method <name3> .__cast , substitute the result for <name3> .
<name5> <name6> . __cast ( ) <  <name3>	call the method <name6> .__cast , if the result is lesser than <name3> , <name5> boolean True , otherwise <name5> boolean False .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name1> <name6> ( <name5> . __cast ( ) )	call the method <name5> .__cast , <name1> the <name6> value of the result .
def <name5> ( <name1> , <name4> ) :	define the method <name5> with 2 arguments : <name1> and <name4> .
<name4> <name5> . _delegate_bytes <name3> <name6> . PY2 :	<name4> <name5> ._delegate_bytes <name3> <name6> .PY2 are both true ,
<name2> <name5> ( <name1> ) % <name4>	call the function <name5> with an argument <name1> , divide the result with <name4> and <name2> the reminder of the division .
elif <name4> . _delegate_text :	otherwise if <name4> ._delegate_text is true ,
<name4> <name3> . text_type ( <name6> ) % <name2>	call the function <name3> .text_type with an argument <name6> , divide the result with <name2> and <name4> the reminder of the division .
<name2> <name6> . __cast ( ) % <name4>	call the function sself .__cast with an argument <name6> , divide the result with <name4> and <name2> the reminder of the division .
def <name4> ( <name1> , <name3> ) :	define the method <name4> with 2 arguments : <name1> and <name3> .
<name6> [ <name5> ( <name4> ) ] = <name4>	get the <name5> of the <name4> object , use it as a key to obtain the value from the <name6> dictionary , substitute <name4> with it .
<name1> <name4>	<name1> <name4> .
@  <name6> ( <name3> )	decorator function <name6> with an argument <name3> .
def <name4> ( * <name3> , ** <name6> ) :	define the function <name4> with 2 arguments : unpacked list <name3> and unpacked dictionary <name6> .
<name1> <name2> ( <name5> , <name3> )	call the function <name2> with 2 arguments : <name5> and <name3> , <name1> the result .
<name2> <name5>	<name2> <name5> .
def <name6> ( <name2> , <name4> , <name3> , * <name5> ) :	define the function <name6> with 4 arguments : <name2> , <name4> , <name3> and unpacked list <name5> .
return <name3> ( <name5> , * <name2> ) ( * <name4> , ** kwargs )	call the function <name3> with 2 arguments : <name5> and unpacked list <name2> , call the result with 2 arguments : unpacked list <name4> ,
def <name2> ( <name5> , * <name1> ) :	and unpacked dictionary kwargs . define the function <name2> with 2 arguments : <name5> and unpacked list <name1> .
@  <name6> ( <name4> )	decorator function <name6> with an argument <name4> .
def <name1> ( * <name3> , ** <name4> ) :	define the function <name1> with 2 arguments : unpacked list <name3> and unpacked dictionary <name4> .
for arg in <name6> ( <name2> ) + <name6> ( <name3> . itervalues ( <name4> ) ) :	call the function <name3> .itervalues with an argument <name4> , convert the result to a <name6> and append it to a <name6> containing <name2> ,
<name6> isinstance ( <name1> , <name3> ) :	for every <name1> in the result , <name6> <name1> is an instance of <name3> class ,
<name6>	<name6> from the loop execution ,
else :	if not ,
return <name4> ( * <name5> , ** <name3> )	call the function <name4> with 2 arguments : unpacked list <name5> and unpacked dictionary <name3> .
return <name6> ( <name5> , * <name1> ) ( * <name4> , ** kwargs )	call the function <name6> with 2 arguments : <name5> and unpacked list <name1> , call the result with 2 arguments : unpacked list <name4> ,
<name2> <name1>	and unpacked dictionary kwargs , <name2> the result . <name2> <name1> .
<name6> = <name3> ( )	<name6> is an instance of <name3> class .
def <name6> ( <name4> ) :	define the function <name6> with an argument <name4> .
def <name4> ( <name1> , * <name6> ) :	define the method <name4> with 2 arguments : <name1> and unpacked list <name6> .
<name2> <name6> . _wrapped <name3> <name4> :	<name2> <name6> ._wrapped <name3> contained in <name4> ,
<name2> . _setup ( )	call the method <name2> ._setup .
return <name1> ( <name5> . _wrapped , * <name2> )	call the function <name1> with 2 arguments : <name5> ._wrapped and unpacked list <name2> .
return inner	self ._wrapped .
<name2> <name6> ( <name1> ) :	derive the <name2> <name6> from the <name1> base <name2> .
<name1> = <name6>	<name1> is <name6> .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name3> . _wrapped = <name2>	substitute <name2> for <name3> ._wrapped .
<name6> = <name4> ( <name3> )	call the function <name4> with an argument <name3> , substitute the result for <name6> .
def <name1> ( <name3> , <name6> , <name2> ) :	define the method <name1> with 3 arguments : <name3> , <name6> and <name2> .
<name4> <name2> == <val1> :	<name4> <name2> equals string <val1> ,
<name5> . __dict__ [ <val2> ] = <name4>	substitute <name4> under the <val2> key of the <name5> .__dict__ dictionary .
else :	if not ,
<name3> <name2> . _wrapped <name4> <name1> :	<name3> <name2> ._wrapped <name4> <name1> ,
<name6> . _setup ( )	call the method <name6> ._setup .
setattr ( <name1> . _wrapped , <name4> , <name6> )	set <name4> attribute of <name1> ._wrapped object to <name6> .
def <name5> ( <name4> , <name1> ) :	define the method <name5> with 2 arguments <name4> and <name1> .
<name6> <name5> == <val3> :	<name6> <name5> equals string <val3> ,
<name4> <name3> ( <val1> )	<name4> an <name3> exception with an argument sting <val1> .
<name5> <name3> . _wrapped <name1> <name4> :	<name5> <name3> ._wrapped <name1> <name4> ,
<name2> . _setup ( )	call the method <name2> ._setup .
delattr ( <name2> . _wrapped , <name5> )	delete <name5> attribute from <name2> ._wrapped object .
def <name5> ( <name2> ) :	define the method <name5> with an argument <name2> .
<name4> <name1> ( <val5>   )	<name4> an <name1> exception with an argument sting <val5> .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name5> <name2> . _wrapped <name6> <name1> :	<name5> <name2> ._wrapped <name6> <name1> ,
<name3> . _setup ( )	call the method <name3> ._setup .
<name6> <name3> . _wrapped . __dict__	<name6> <name3> ._wrapped .__dict__ .
@  <name4>	<name4> decorator ,
def <name5> ( <name3> , * <name4> ) :	define the method <name5> with 2 arguments <name3> and unpacked list <name4> .
return <name6> . __new__ ( <name6> , * <name5> )	call the method <name6> .__new__ with 2 arguments : <name6> and unpacked list <name5> .
def <name6> ( <name1> , <name4> ) :	define the method <name6> with 2 arguments <name1> and <name4> .
<name6> <name2> >= <val3> :	<name6> <name2> is greater than or equal to integer <val3> ,
<name4> ( <name6> . __newobj__ , ( <name6> . __class__ , ) , <name6> . __getstate__ ( ) )	<name4> a tuple with 3 elements : <name6> .__newobj__ , tuple with an element <name6> .__class__ and result of the method <name6> .__getstate__ .
else :	if not ,
<name5> ( <name6> . _reconstructor , ( <name3> . __class__ , <name4> , <name2> ) , <name3> . __getstate__ ( ) )	<name5> a tuple with 3 elements : <name6> ._reconstructor , tuple with 3 elements : <name3> .__class__ , <name4> and <name2> ,
def <name1> ( <name6> , <name2> ) :	and result of the method <name6> .__getstate__ . define the method <name1> with 2 arguments <name6> and <name2> .
<name1> <name4> . _wrapped <name3> <name2> :	<name1> <name4> ._wrapped <name3> <name2> ,
<name5> = <name4> ( <name3> ) ( )	get <name4> of <name3> , call it and substitute the <name5> for <name5> .
<name3> [ <name5> ( <name4> ) ] = result	get the <name5> of the <name4> object , use it as a key to obtain the value from the <name3> dictionary , substitute <name4> with it .
<name3> <name5>	<name3> <name5> .
<name5> <name3> . deepcopy ( <name1> . _wrapped , <name4> )	call the method <name3> .deepcopy with 2 arguments : <name1> ._wrapped and <name4> , <name5> the result .
<name6> <name3> . PY3 :	<name6> <name3> .PY3 is true ,
<name6> = <name5> ( <name3> )	call the function <name5> with an argument <name3> , substitute the result for <name6> .
<name2> = <name4> ( <name5> )	call the function <name4> with an argument <name5> , substitute the result for <name2> .
<name3> = <name5> ( <name2> )	call the function <name5> with an argument <name2> , substitute the result for <name3> .
else :	if not ,
<name3> = <name6> ( <name5> )	call the function <name6> with an argument <name5> , substitute the result for <name3> .
<name3> = <name4> ( <name6> )	call the function <name4> with an argument <name6> , substitute the result for <name3> .
<name5> = <name6> ( <name1> )	call the function <name6> with an argument <name1> , substitute the result for <name5> .
<name4> = <name1> ( <name2> )	call the function <name1> with an argument <name2> , substitute the result for <name4> .
__class__ = property ( new_method_proxy ( <name3> . attrgetter ( <val6> ) ) )	cal the method <name3> .attrgetter with an argument string <val6> , use the result as an argument for the call to the function ,
<name1> = <name5> ( <name3> . eq )	<name5> , __class__ is an property object created with previous result as an argument . call the function <name5> with an argument <name3> .eq , substitute the result for <name1> .
<name3> = <name6> ( <name1> . ne )	call the function <name6> with an argument <name1> .ne , substitute the result for <name3> .
<name3> = <name1> ( <name6> )	call the function <name1> with an argument <name6> , substitute the result for <name3> .
<name4> = <name6> ( <name3> . getitem )	call the function <name6> with an argument <name3> .getitem , substitute the result for <name4> .
<name1> = <name3> ( <name4> . setitem )	call the function <name3> with an argument <name4> .setitem , substitute the result for <name1> .
<name2> = <name4> ( <name6> . delitem )	call the function <name4> with an argument <name6> .delitem , substitute the result for <name2> .
<name4> = <name6> ( <name3> )	call the function <name6> with an argument <name3> , substitute the result for <name4> .
<name1> = <name6> ( <name4> . contains )	call the function <name6> with an argument <name4> .contains , substitute the result for <name1> .
<name6> = <name1>	substitute <name1> for <name6> .
<name2> <name4> ( <name5> ) :	derive the <name2> <name4> from the <name5> base <name2> .
def <name6> ( <name1> , <name4> ) :	define the method <name6> with 2 arguments <name1> and <name4> .
<name2> . __dict__ [ <val4>   ] = <name3>	substitute <name3> for value under the <val4> key of the <name2> .__dict__ dictionary .
<name5> ( <name2> , <name4> ) . <name1> ( )	call the function <name5> with 2 arguments : class <name2> and <name4> , call the method <name1> on the result .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name3> . _wrapped = <name3> . _setupfunc ( )	call the method <name3> ._setupfunc , substitute the result for <name3> ._wrapped .
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name3> <name5> . _wrapped <name1> <name4> :	<name3> <name5> ._wrapped <name1> <name4> ,
<name1> = <name5> . _setupfunc	substitute <name5> ._setupfunc for <name1> .
else :	if not ,
<name6> = <name2> . _wrapped	substitute <name2> ._wrapped for <name6> .
<name4> <val1>   % ( type ( <name6> ) . <name3> , <name5> )	<name4> a string <val1> , format it with <name3> field of the <name6> class and <name5> .
def <name6> ( <name5> , <name3> ) :	define the method <name6> with 2 arguments <name5> and <name3> .
<name3> <name2> . _wrapped <name1> <name5> :	<name3> <name2> ._wrapped <name1> <name5> ,
<name2> = <name3> ( <name5> . _setupfunc )	<name2> is an instance of <name3> class , created with an argument <name5> ._setupfunc .
<name6> [ <name3> ( <name5> ) ] = result	get the <name3> of the <name5> object , use it as a key to obtain the value from the <name6> dictionary , substitute <name5> with it .
<name1> <name5>	<name1> <name5> .
<name4> <name6> . deepcopy ( <name3> . _wrapped , <name2> )	call the method <name6> .deepcopy with 2 arguments : <name3> ._wrapped and <name2> , <name4> the result .
<name1> <name3> ( <name5> ) :	derive the <name1> <name3> from the <name5> base <name1> .
def <name2> ( <name3> , <name1> = <name5> , <name4> = <name5> , <name6> = <name5> , <name2> = <name5> ) :	define the method <name2> with 5 arguments : <name3> , <name1> set to <name5> , <name4> set to <name5> , <name6> set to <name5> and <name2> set to <name5> .
<name4> <name1> <name6> <name2> <name5> :	<name4> <name1> <name6> <name2> <name5> ,
@  <name5> ( <name4> )	decorator function <name5> with an argument <name4> .
def <name1> ( <name3> , <name5> = <name4> , <name2> = <name1> . __name__ ) :	define the function <name1> with 3 arguments : <name3> , <name5> set to <name4> and <name2> set to <name1> .__name__ .
<name1> getattr ( <name3> , <name5> ) ( )	get <name5> attribute from the <name3> object , call it and <name1> the result .
<name2> <name4> <name6> <name3> <name1> :	<name2> <name4> <name6> <name3> <name1> ,
@  <name3> ( <name2> )	decorator function <name3> with an argument <name2> .
def <name5> ( <name4> , value , <name3> = <name5> . __name__ ) :	define the function <name5> with 3 arguments : <name4> , valse to None and <name3> set to <name5> .__name__ .
<name1> getattr ( <name4> , <name5> ) ( <name2> )	get <name5> attribute from the <name4> object , call it with an argument <name2> and <name1> the result .
<name3> <name5> <name1> <name4> <name6> :	<name3> <name5> <name1> <name4> <name6> ,
@  <name3> ( <name1> )	decorator function <name3> with an argument <name1> .
def <name3> ( <name5> , <name2> = <name3> . __name__ ) :	define the function <name3> with 2 arguments : <name5> and <name2> set to <name3> .__name__ .
<name6> getattr ( <name3> , <name4> ) ( )	get <name4> attribute from the <name3> object , call it and <name6> the result .
<name2> <name4> ( <name3> , <name5> , <name1> , <name6> )	<name2> an <name4> object with getter function <name3> , setter function <name5> , destructor <name1> and documentation string <name6> .
def <name6> ( <name5> , <name4> ) :	define the function <name6> with 2 arguments : <name5> and <name4> .
<name6> = ( [ ] , [ ] )	<name6> is a tuple with 2 elements , 2 empty lists .
<name3> <name4> <name6> <name2> :	<name3> every <name4> <name6> <name2> ,
<name4> [ <name5> ( <name6> ) ] . <name3> ( <name6> )	call the function <name5> with an argument <name6> , use it as a key to get <name4> dictionary value , <name3> <name6> to it .
<name6> <name5>	<name6> <name5> .
<name5> <name4> . version_info >= ( <val2> , <val6> , <val2> ) :	<name5> <name4> .version_info is greater than or equal to a tuple with 3 elements : integers <val2> , <val6> and <val2> , respectively ,
<name1> <name2> <name6> <name5>	<name1> <name2> <name6> <name5> .
else :	if not ,
def <name5> ( <name2> ) :	define the function <name5> with an argument <name2> .
<name2> = {   '__lt__'   : [ ( <val5>   , lambda self , other : not ( self <  other or self == other ) ) , ( '__le__'   , lambda self , other : self <  other or self == other ) , ( '__ge__'   , lambda self , other : not self <  other ) ] , '__le__'   : [ ( '__ge__'   , lambda self , other : not self <= other or self == other ) , ( '__lt__'   , lambda self , other : self <= other and not self == other ) , ( <val5>   , lambda self , other : not self <= other ) ] , <val5>   : [ ( '__lt__'   , lambda self , other : not ( self >  other or self == other ) ) , ( '__ge__'   , lambda self , other : self >  other or self == other ) , ( '__le__'   , lambda self , other : not self >  other ) ] , '__ge__'   : [ ( '__le__'   , lambda self , other : ( not self >= other ) or self == other ) , ( <val5>   , lambda self , other : self >= other and not self == other ) , ( '__lt__'   , lambda self , other : not self >= other ) ] }	<name2> is a dictionary with 4 initial entries : list with 3 tuples : tuple with 2 elements : string <val5> ,
<name1> = <name5> ( dir ( <name6> ) ) &  <name5> ( <name2> )	and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other or self is equal to other , tuple with 2 elements : string '__le__' , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than other or self is equal to other , tuple with 2 elements : string '__ge__' , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other , for '__lt__' , list with 3 tuples : tuple with 2 elements : string '__ge__' , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , or self is equal to other , tuple with 2 elements : string '__lt__' , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than or equal to other , or self is not equal to other , tuple with 2 elements : string '__gt__' , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , for '__le__' , list with 3 tuples : tuple with 2 elements : string '__lt__' , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other or self is equal to other , tuple with 2 elements : string '__ge__' , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than other or self is equal to other , tuple with 2 elements : string '__le__' , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other , for '__gt__' , and list with 3 tuples : tuple with 2 elements : string '__le__' , and lambda function with 2 arguments : self and other , resulting boolean True if self is not greater than or is not equal to other , or self is equal to other , tuple with 2 elements : string '__gt__' , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than or not equal to other , or self is not equal to other , tuple with 2 elements : string '__lt__' , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than or equal to other , for '__ge__' , <name2> <name6> to a dictionary , <name2> the result into a <name5> and <name2> <name2> into a <name5> , <name1> is a <name5> of differences of the two previous sets .
<name5> not <name2> :	<name5> <name2> is false ,
<name4> <name5> ( <val1>   )	<name4> an <name5> exception with an argument string <val1> .
<name1> = max ( <name2> )	get maximal element from <name2> and substitute it for <name1> .
<name3> <name1> , <name2> <name5> <name6> [ <name4> ] :	get the value under the <name4> key of the <name6> dictionary , <name3> every <name1> and <name2> <name5> the result ,
<name5> <name4> <name6> <name3> <name1> :	<name5> <name4> is <name6> contained <name3> <name1> ,
<name6> . __name__ = <name2>	substitute <name2> for <name6> .__name__ .
<name4> . <name5> = getattr ( <name3> , <name6> ) . <name5>	get <name6> attribute from <name3> object , substitute its field <name5> for <name4> .__doc__ .
setattr ( <name2> , <name1> , <name6> )	set <name1> attribute of <name2> object to <name6> .
<name6> <name5>	<name6> <name5> .
<name2> <name5> <name1> <name6>	<name2> <name5> <name1> <name6> into default name space .
<name6> <name3>	<name6> module <name3> .
<name3> <name6>	<name3> module <name6> .
<name2> <name6> . utils . encoding <name3> <name1> , <name4>	<name2> <name6> .utils .encoding <name3> <name1> and <name4> into default name space .
<name6> <name2> . utils . functional <name5> <name1>	<name6> <name2> .utils .functional <name5> <name1> into default name space .
<name5> <name1> . utils . safestring <name2> <name3> , <name6>	<name5> <name1> .utils .safestring <name2> <name3> and <name6> into default name space .
<name6> <name4> . utils <name2> <name5>	<name6> <name4> .utils <name2> <name5> into default name space .
<name1> <name4> . utils . six . moves . urllib . parse <name3> <name5> , <name2> , <name6> , <name1>	<name1> <name4> .utils .six .moves .urllib .parse <name3> <name5> , <name2> , <name6> and <name1> into default name space .
<name6> <name1> . utils . text <name3> <name4>	<name6> <name1> .utils .text <name3> <name4> into default name space .
<name2> . html_parser <name6> <name3> , <name1>	<name2> .html_parser <name6> <name3> and <name1> into default name space .
\ <name5> = <name6> . compile ( r <val1>   ) \	\ call the function <name6> .compile with raw string <val1> , substitute the result for <name5> . \
\ <name6> = <name2> . compile ( r <val1>   ) \	\ call the function <name2> .compile with raw string <val1> , substitute the result for <name6> . \
\ <name3> = <name2> . compile ( r <val6>   , <name2> . IGNORECASE ) \	\ call the function <name2> .compile with 2 arguments : raw string <val6> and <name2> .IGNORECASE , substitute the result for <name3> . \
\ simple_url_2_re = <name6> . compile ( r <val4>   , <name6> . IGNORECASE ) \	\ call the function <name6> .compile with 2 arguments : raw string <val4> , \
\ <name3> = <name2> . compile ( r '^\\S+@\\S+\\.\\S+$'   ) \	\ and <name2> .IGNORECASE , substitute the result for simple_url_re . call the function <name2> .compile with raw string '&(?!(\\w+|#\\d+);)' , substitute the result for <name3> . \
\ <name1> = <name5> . compile ( r <val2>   ) \	\ call the function <name5> .compile with raw string <val2> , substitute the result for <name1> . \
"\ html_gunk_re = <name6> . compile ( r '(?:<br clear=""all"">|<i><\\/i>|<b><\\/b>|<em><\\/em>|<strong><\\/strong>|<\\/?smallcaps>|<\\/?uppercase>)'   , <name6> . IGNORECASE ) \"	call the function <name6> .compile with 2 arguments :
\ hard_coded_bullets_re = <name3> . compile ( r <val5>   % '|'   . join ( <name3> . escape ( x ) <name4> x in DOTS ) , <name3> . DOTALL ) \	"\ raw string '(?:<br clear=""all"">|<i><\\/i>|<b><\\/b>|<em><\\/em>|<strong><\\/strong>|<\\/?smallcaps>|<\\/?uppercase>)' and <name3> .IGNORECASE , substitute the result <name4> html_gunk_re . call the function <name3> .compile with 2 arguments : raw string <val5> , \"
\ <name1> = <name6> . compile ( r <val2>   ) \	\ formated with string created by joining elements of result of the function <name6> .escape with an argument x , with separator '|' , for every x in DOTS , and <name6> .DOTALL , substitute the result for hard_coded_bullets_re . call the function <name6> .compile with raw string <val2> , substitute the result for <name1> . \
def <name6> ( <name1> ) :	define the function <name6> with an argument <name1> .
def <name6> ( <name5> ) :	for integer representation of z converted into a string . define the function <name6> with an argument <name5> .
return mark_safe ( <name3> ( <name2> ) . <name5> ( <name1> ) )	call the function <name3> with an argument <name2> , call the method <name5> on the result , with an argument <name1> ,
<name2> = <name5> ( <name2> , <name6> . text_type )	use the result as an argument for the call to the mark_safe function , return the result . call the function <name5> with 2 arguments : <name2> , <name6> .text_type , substitute the result for <name2> .
def <name5> ( <name2> ) :	define the function <name5> with an argument <name2> .
<name3> hasattr ( <name4> , <val1>   ) :	<name3> <name4> has an <val1> attribute ,
<name3> <name4> . __html__ ( )	call the method <name4> .__html__ , <name3> the result .
else :	if not ,
<name5> <name6> ( <name1> )	call the function <name6> with an argument <name1> , <name5> the result .
def <name3> ( <name5> , * <name1> , ** <name4> ) :	define the function <name3> with 3 arguments : <name5> , unpacked list <name1> and unpacked dictionary <name4> .
<name5> = <name6> ( <name4> , <name2> )	<name6> elements from <name2> through the function <name4> , substitute the result for <name5> .
<name6> = dict ( ( <name1> , conditional_escape ( <name2> ) ) <name3> ( <name1> , <name2> ) <name4> <name5> . iteritems ( <name6> ) )	<name6> is a dictionary created <name3> every <name1> and <name2> <name4> result of the function <name5> .iteritems called with an argument <name6> ,
return mark_safe ( <name3> . format ( * <name6> , ** <name4> ) )	with value result of the conditional_escape function called with an argument v for key k . call the method <name3> .format with 2 arguments : unpacked list <name6> and unpacked dictionary <name4> ,
def <name6> ( <name2> , <name1> , <name5> ) :	use the result as an argument for the call to the function mark_safe , return the result . define the function <name6> with 3 arguments : <name2> , <name1> and <name5> .
return mark_safe ( conditional_escape ( sep ) . <name2> ( <name6> ( <name5> , * <name3> ( <name4> ) ) for <name4> in args_generator ) )	<name2> results of <name6> called with 2 arguments : <name5> and <name3> with an element <name4> , into a string ,
def <name6> ( <name4> , <name2> = <name3> ) :	separated with result of the function conditional_escape with an argument sep , for every args in args_generator , use the result as an argument for the call to the function mark_safe , return the result . define the function <name6> with 2 arguments : <name4> and <name2> set to boolean <name3> .
<name5> = <name2> ( <name5> )	call the function <name2> with an argument <name5> , substitute the result for <name5> .
\ <name1> = <name4> . split ( <val5>   , <name3> ) \	\ call the method <name4> .split with 2 arguments : string <val5> and <name3> , substitute the result for <name1> . \
<name4> <name5> :	<name4> <name5> is true ,
\ paras = [ '<p>%s</p>'   % <name2> ( <name1> ) . <name3> ( <val6>   , <val5>   ) <name4> <name1> <name2> paras ] \	\ call the function <name2> with an argument <name1> , <name3> every occurrence of <val6> <name2> the result <name4> <val5> , \
else :	format the string '<p>%s</p>' with the result , for every p in paras , substitute list of results for paras . if not ,
\ paras = [ '<p>%s</p>'   % <name1> . <name3> ( <val5>   , <val6>   ) <name4> <name1> <name2> paras ] \	\ <name3> every occurrence of <val5> <name2> <name1> <name4> <val6> , \
\ <name1> <val3>   . <name2> ( <name5> ) \	\ format the string '<p>%s</p>' with the result , for every p in <name5> , substitute list of results for <name5> . <name2> elements of <name5> into a string separated with <val3> , <name1> the result . \
<name2> = <name3> ( <name2> , <name1> . text_type )	call the function <name3> with 2 arguments : <name2> , <name1> .text_type , substitute the result for <name2> .
<name3> <name1> ( <name6> ) :	derive the <name3> <name1> from the <name6> base <name3> .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name6> <name1> . version_info [ : <val3> ] == ( <val4> , <val3> ) :	<name6> fist and second element of <name1> .version_info equals to integer <val4> and <val3> , respectively ,
<name4> . __init__ ( <name3> , <name2> = <name6> )	call the method <name4> .__init__ with 2 arguments : <name3> and <name2> set to boolean <name6> .
else :	if not ,
<name4> . __init__ ( <name1> )	call the method <name4> .__init__ with an argument <name1> .
<name1> . reset ( )	call the method <name1> .reset .
<name1> . fed = [ ]	<name1> .fed is an empty list .
def <name3> ( <name4> , <name6> ) :	define the method <name3> with 2 arguments <name4> and <name6> .
<name2> . fed . <name5> ( <name6> )	<name5> <name6> to <name2> .fed .
def <name5> ( <name4> , <name2> ) :	define the method <name5> with 2 arguments <name4> and <name2> .
<name6> . fed . <name2> ( <val3>   % <name4> )	format string <val3> with <name4> , <name2> it to <name6> .fed .
def <name3> ( <name4> , <name5> ) :	define the method <name3> with 2 arguments <name4> and <name5> .
<name2> . fed . <name3> ( <val5>   % <name1> )	format string <val5> with <name1> , <name3> it to <name2> .fed .
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
<name2> ''   . <name6> ( <name1> . fed )	<name6> elements of <name1> .fed into a string , <name2> the result .
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
<name1> = <name6> ( )	<name1> is an instance of <name6> class .
<name4> :	<name4> ,
<name4> . feed ( <name6> )	call the method <name4> .feed with an argument <name6> .
except <name6> :	if <name6> exception is caught ,
<name2> <name6>	<name2> <name6> .
<name5> :	<name5> ,
<name1> . <name2> ( )	<name2> file descriptor <name1> .
except ( <name4> , <name5> ) :	if <name4> or <name5> exceptions are caught ,
<name1> <name2> . get_data ( ) + <name2> . rawdata	sum the result of the method <name2> .get_data and <name2> .rawdata , <name1> the result .
else :	if not ,
<name5> <name6> . get_data ( )	call the method <name6> .get_data , <name5> the result .
def <name2> ( <name3> ) :	define the function <name2> with an argument <name3> .
<name2> <val1>   <name4> <name6> <name3> <val5>   <name4> <name6> :	<name2> <val1> is contained <name4> <name6> <name3> <val5> is contained <name4> <name6> ,
<name5> = <name4> ( <name6> )	call the function <name4> with an argument <name6> , substitute the result for <name5> .
<name3> <name4> == <name6> :	<name3> <name4> equals <name6> ,
<name3>	<name3> from the loop execution .
<name6> = <name5>	substitute <name5> for <name6> .
<name4> <name6>	<name4> <name6> .
<name4> = <name3> ( <name4> )	call the function <name3> with an argument <name4> , substitute the result for <name4> .
def <name6> ( <name5> , <name4> ) :	define the function <name6> with 2 arguments : <name5> and <name4> .
<name2> = [ <name1> . escape ( <name4> ) <name6> <name4> <name3> <name2> . <name5> ( ) ]	<name2> is a list containing results of the function <name1> .escape with an argument <name4> , <name6> every <name4> <name3> <name2> <name5> into words .
<name5> = <val4>   % <val2>   . <name1> ( <name3> )	<name1> elements of <name3> into a string , separated with <val2> , format string <val4> with it , substitute the result for <name5> .
\ starttag_re = <name2> . compile ( r <val1>   % <name4> , <name2> . U ) \	\ call the function <name2> .compile with 2 arguments : raw string <val1> formated with <name4> and <name2> .U , \
<name3> = <name1> . compile ( <val5>   % <name4> )	substitute the result for starttag_re . call the function <name1> .compile with an argument string <val5> formated with <name4> , substitute the result for <name3> .
<name6> = <name4> . sub ( ''   , <name6> )	call the function <name4> .sub with 2 arguments : an empty string and <name6> , substitute the result for <name6> .
<name2> = <name6> . sub ( ''   , <name2> )	call the function <name6> .sub with 2 arguments : an empty string and <name2> , substitute the result for <name2> .
<name2> <name1>	<name2> <name1> .
<name1> = <name5> ( <name1> , <name3> . text_type )	call the function <name5> with 2 arguments : <name1> , <name3> .text_type , substitute the result for <name1> .
def <name6> ( <name3> ) :	define the function <name6> with an argument <name3> .
\ return <name5> . sub ( r <val1>   , <val2>   , <name4> ( value ) ) \	\ call the method <name5> .sub with 3 arguments : raw string <val1> , string <val2> and result of the function <name4> , \
<name5> = <name2> ( <name5> , <name3> . text_type )	called with an argument value , return the result . call the function <name2> with 2 arguments : <name5> , <name3> .text_type , substitute the result for <name5> .
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
\ return <name2> . sub ( r <val5>   , ''   , <name1> ( value ) ) \	\ call the method <name2> .sub with 3 arguments : raw string <val5> , empty string and result of the function <name1> , \
<name6> = <name4> ( <name6> , <name1> . text_type )	called with an argument value , return the result . call the function <name4> with 2 arguments : <name6> , <name1> .text_type , substitute the result for <name6> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name6> :	<name6> ,
<name4> , <name1> , <name5> , <name3> , <name6> = <name2> ( <name4> )	call the function <name2> with an argument <name4> , assign the result to <name4> , <name1> , <name5> , <name3> and <name6> , respectively .
<name4> :	<name4> ,
<name5> = <name5> . encode ( <val6>   ) . <name2> ( <val4>   )	call the method <name5> .encode with an argument string <val6> , call the method <name2> on the result with an argument <val4> ,
except <name1> :	substitute the result for netloc . if <name1> exception is caught ,
pass	do nothing .
else :	if not ,
<name5> = <name6> ( ( <name4> , <name2> , <name1> , <name3> , <name5> ) )	call the function <name6> with an argument tuple with 4 elements : <name4> , <name2> , <name1> , <name3> and <name5> , substitute the result for <name5> .
except <name5> :	if <name5> exception is caught ,
pass	do nothing .
<name6> = <name1> ( <name2> ( <name6> ) )	call the function <name2> with an argument <name6> , use the result as an argument for the call to the function <name1> , substitute the result for <name6> .
\ <name5> = <name4> ( <name5> , <name1> = b <val2>   ) \	\ call the function <name4> with 2 arguments : <name5> and <name1> as bytes string <val2> , substitute the result for <name5> . \
<name5> <name2> ( <name4> )	call the function <name2> with an argument <name4> , <name5> the result .
def <name4> ( <name5> , <name6> = <name2> , <name3> = <name1> , autoescape = <name1> ) :	define the function <name4> with 4 arguments : <name5> , <name6> set to <name2> , <name3> set to boolean <name1> ,
def <name1> ( <name4> , <name6> = <name5> ) :	define the function <name1> with 2 arguments : <name4> and <name6> set to <name5> .
<name2> <name4> <name3> <name1> <name6> len ( <name5> ) <= <name4> :	<name2> <name4> <name3> <name1> <name6> length of <name5> <name3> lesser than <name6> equal to <name4> ,
<name1> <name5>	<name1> <name5> .
<name4> <val3>   % <name1> [ : max ( <val6> , <name2> - <val5> ) ]	<name4> a string <val3> formated with elements of <name1> up to the index equal to the maximum value between integer <val6> and <val5> subtracted from <name2> .
<name1> = isinstance ( <name2> , <name3> )	if <name2> is an instance of <name3> , <name1> is boolean True , otherwise is boolean False .
<name4> = <name3> . <name6> ( <name1> ( <name5> ) )	call the function <name1> with an argument <name5> , <name6> by it <name3> , substitute it for <name4> .
<name3> <name6> , <name1> <name2> enumerate ( <name4> ) :	<name3> every <name6> and <name1> <name2> enumerated iterable <name4> ,
<name5> <val4>   <name6> <name2> <name3> <val1>   <name6> <name2> <name3> <val5>   <name6> <name2> :	<name5> <val4> is contained <name6> words <name3> <val1> is contained <name6> <name2> <name3> <val5> is contained <name6> <name2> ,
<name1> , <name4> , <name6> = ''   , <name3> , ''	substitute empty string , <name3> an empty string for <name1> , <name4> and <name6> , respectively .
<name1> <name5> <name6> <name3> :	<name1> every <name5> <name6> <name3> ,
<name3> <name4> . endswith ( <name1> ) :	<name3> <name4> ends with <name1> ,
<name5> = <name5> [ : - len ( <name2> ) ]	substitute elements of <name5> from the beginning to the negative length of <name2> , for <name5> .
<name2> = <name1> + <name2>	sum <name1> and <name2> , substitute the result for <name2> .
<name4> <name6> , <name3> <name5> <name2> :	<name4> every <name6> and <name3> <name5> <name2> ,
<name1> <name5> . startswith ( <name3> ) :	<name1> <name5> starts with <name3> ,
<name4> = <name4> [ len ( <name6> ) : ]	substitute elements of <name4> from length of <name6> index to the end , for <name4> .
<name4> = <name4> + <name3>	sum <name4> and <name3> , substitute the result for <name4> .
<name2> ( <name6> . endswith ( <name3> ) <name1> <name6> . <name4> ( <name3> ) == <name6> . <name4> ( <name5> ) + 1 ) :	<name2> <name6> ends with <name3> <name1> <name4> of occurrence of <name3> in <name6> equals <name4> of occurrence of <name5> in <name6> incremented by one ,
<name6> = <name6> [ : - len ( <name4> ) ]	substitute elements of <name6> from the beginning to the negative length of <name4> , for <name6> .
<name1> = <name3> + <name1>	sum <name1> and <name3> , substitute the result for lead .
<name2> = <name1>	<name2> is <name1> .
<name3> = <val4>   <name5> <name2> else ''	<name5> <name2> is true <name3> is a string <val4> , otherwise <name3> is an empty string .
<name2> <name1> . match ( <name3> ) :	call the method <name1> .match with an argument <name3> , <name2> it evaluates to true ,
<name3> = <name6> ( <name1> )	call the function <name6> with an argument <name1> , substitute the result for <name3> .
elif <name5> . match ( <name2> ) :	otherwise if call the method <name5> .match with an argument <name2> evaluates to true ,
<name5> = <name4> ( <val3>   % <name2> )	call the function <name4> with an argument string <val3> formated with an argument <name2> , substitute the result for <name5> .
elif <val3>   <name1> <name2> <name5> <name4> <name6> . match ( <name5> ) :	otherwise if <val3> is <name1> contained <name2> <name5> <name4> result of the function <name6> .match called with an argument <name5> ,
<name2> , <name4> = <name3> . rsplit ( <val6>   , 1 )	evaluates to true , split <name3> into two parts from the right by <val6> character , assign the resulting parts to <name2> and <name4> .
<name2> :	<name2> ,
<name3> = <name3> . encode ( <val4>   ) . <name5> ( <val2>   )	call the method <name3> .encode with an argument string <val4> , call the method <name5> on the result with an argument string <val2> ,
except <name3> :	substitute the result for domain . if <name3> exception is caught ,
continue	skip this loop iteration .
<name1> = <val2>   % ( <name6> , <name5> )	<name1> is a string <val2> formated with <name6> and <name5> .
<name3> = ''	<name3> is an empty string .
<name2> <name5> :	<name2> <name5> is true ,
<name1> = <name4> ( <name2> )	call the function <name4> with an argument <name2> , substitute the result for <name1> .
<name2> <name1> <name6> not <name5> :	<name2> <name1> is true <name6> <name5> is false ,
<name2> , <name5> = <name6> ( <name2> ) , <name6> ( <name5> )	call the function <name6> with an argument <name2> , substitute the result for <name2> , call the function <name6> with an argument <name5> ,
<name4> , <name3> = <name5> ( <name4> ) , <name5> ( <name3> )	substitute the result for trail . call the function <name5> with an argument <name4> , substitute the result for <name4> , call the function <name5> with an argument <name3> ,
<name2> = <val4>   % ( <name6> , <name5> , <name3> )	substitute the result for <name3> . <name2> is a string <val4> formated with <name6> , <name5> and <name3> .
words [ i ] = <name6> ( '%s%s%s'   % ( <name5> , <name2> , <name3> ) )	"format string '<a href=""%s""%s>%s</a>' with <name5> , <name2> and <name3> , use it as an argument for the call to the function <name6> ,"
else :	substitute the result for i - th element of words . if not ,
<name1> <name3> :	<name1> <name3> is true ,
<name6> [ <name1> ] = <name3> ( <name4> )	call the function <name3> with an argument <name4> , substitute the result for <name1> - th element of <name6> .
elif <name6> :	otherwise if <name6> is true ,
<name5> [ <name2> ] = <name1> ( <name3> )	call the function <name1> with an argument <name3> , substitute the result for <name2> - th element of <name5> .
elif <name1> :	otherwise if <name1> is true ,
<name5> [ <name6> ] = <name1> ( <name2> )	call the function <name1> with an argument <name2> , substitute the result for <name6> - th element of <name5> .
elif <name1> :	otherwise if <name1> is true ,
<name2> [ <name4> ] = <name6> ( <name1> )	call the function <name6> with an argument <name1> , substitute the result for <name4> - th element of <name2> .
<name6> ''   . <name4> ( <name5> )	<name4> elements of <name5> into a string , <name6> it .
<name1> = <name4> ( <name1> , <name5> . text_type )	call the function <name4> with 2 arguments : <name1> , <name5> .text_type , substitute the result for <name1> .
def <name6> ( <name3> ) :	define the function <name6> with an argument <name3> .
\ <name6> <name5> . <name4> ( <val1> , <val3> ) \	\ <name4> every occurrence of <val1> in <name5> for <val3> , <name6> the result . \
<name1> <name4> . utils . six . moves <name2> <name6> <name5> _html_parser	<name1> <name4> .utils .six .moves <name2> <name6> <name5> _html_parse into default name space .
<name1> <name2>	<name1> module <name2> .
<name4> <name6>	<name4> module <name6> .
current_version = <name1> . <name4>	substitute <name4> from module <name1> for surrent_version .
<name2> = ( ( <name5> <  ( <val4> , <val1> , <val6> ) ) or ( <name5> >= ( <val6> , 0 ) and <name5> <  ( <val6> , <val4> , <val6> ) ) )	set <name2> to boolean True if <name5> tuple elements are smaller than the tuple ( <val4> , <val1> , <val6> ) , respectively ,
<name3> = <name2> . <name3>	or if current_version is greater than ( 3 , 0 ) , but smaller than ( 3 , 2 , 3 ) , otherwise set use_workaround to boolean False . substitute <name3> from the module <name2> for <name3> .
<name3> not <name4> :	<name3> <name4> is boolean False ,
<name4> <name5> >= ( <val1> , <val3> ) :	<name4> tuple <name5> elements are greater or equal to ( <val1> , <val3> ) , respectively ,
<name3> <name2> ( <name5> . <name2> ) :	derive the <name3> <name2> from the base <name3> <name2> located in the module <name5> .
def <name4> ( <name3> , <name6> = <name1> , ** kwargs ) :	define the initialization method <name4> , with <name3> instance of this class , <name6> set to boolean <name1> ,
<name5> . HTMLParser . __init__ ( <name2> , convert_charrefs = convert_charrefs , ** <name4> )	and dictionary of arbitrary length ** <name4> as arguments . call the initialization method for the base class , <name5> .HTMLParser .__init__ with <name2> ,
else :	convert_charrefs set to convert_charrefs and dictionary ** kwargs as the arguments . if not ,
<name4> = <name1> . <name4>	substitute <name4> from the module <name1> for <name4> .
else :	if not ,
\ <name2> = re . <name4> ( <val6>   ) \	\ <name4> a regular expression pattern string <val6> into a regular expression object and assign it to <name2> . \
<name3> <name4> ( <name1> . <name4> ) :	derive the <name3> <name4> from the base <name3> <name4> located in the module <name1> .
def <name4> ( <name3> ) :	define initialization method <name4> with <name3> instance of the class as an argument .
<name2> . HTMLParser . __init__ ( <name1> )	call the initialization method <name2> .HTMLParser .__init__ ( <name1> ) for the base class .
self . <name1> = <name3>	set field <name1> for this class instance to <name3> .
def <name5> ( <name1> , <name2> ) :	define method <name5> , with <name1> class instance and <name2> as the arguments .
<name1> :	<name1> ,
self . <name6> = <name1> . <name4>	set field <name6> for this class instance to <name4> from module <name1> .
except <name1> :	if <name1> exception is caught ,
\ self . interesting = re . compile ( r <val1>   % <name6> . lower ( ) , re . I ) \	\ replace '%s' in the string <val1> with the result of the function call <name6> .lower ( ) , \
<name4> . cdata_tag = <name3> . lower ( )	use it and the re .I as the input arguments for function re .compile , put the result in the <name4> .interesting . evaluate function <name3> .lower , without the arguments , put the result in the <name4> .cdata_tag .
def <name6> ( <name5> ) :	define method <name6> , with <name5> class instance as an argument .
<name2> . interesting = <name6> . interesting_normal	substitute <name6> .interesting_normal for <name2> .interesting .
<name3> . cdata_tag = <name4>	set <name3> .cdata_tag to <name4> .
def <name1> ( <name4> , <name6> ) :	define method <name1> with <name4> class instance and <name6> as the arguments .
<name2> . __starttag_text = <name6>	set <name2> .__starttag_text to <name6> .
<name2> = <name1> . check_for_whole_start_tag ( <name5> )	call the method <name1> .check_for_whole_start_tag with <name5> as an argument , substitute result for the <name2> .
<name5> <name6> <  0 :	<name5> <name6> is lesser than zero ,
<name2> <name5>	<name2> <name5> .
<name1> = <name6> . <name1>	substitute <name6> .rawdata for <name1> .
<name6> . __starttag_text = rawdata [ <name1> : <name3> ]	slice the list from the <name1> - th to the <name3> - th element , substitute it for <name6> .__starttag_text .
<name4> = [ ]	<name4> is a empty list .
<name2> = <name4> . <name2> ( <name3> , <name1> + <val5> )	<name2> the <name3> from the position <name1> + <val5> , with <name4> pattern , assign the result to the <name2> .
assert <name3> , <val1>	if <name3> evaluates to False throw an exception with the string message <val1> .
<name6> = <name3> . end ( )	find the ending position of the regular expression <name3> of the object <name3> , substitute the result for <name6> .
<name4> . lasttag = <name2> = <name3> . group ( 1 ) . lower ( )	find the first subgroup of the matched string from the <name3> object , convert it to lowercase , substitute it for <name2> and <name4> .lasttag .
while <name6> <  <name5> :	as long <name6> is smaller than <name5> ,
<name4> = _html_parser . <name6> . <name2> ( <name5> , <name1> )	<name2> the <name5> from the position <name1> , with <name6> pattern , assign the result to the <name4> .
<name4> <name5> <name2> :	<name4> <name2> is <name5> False , None is considered False ,
break	breaks from the smallest enclosing loop .
<name4> , <name1> , <name5> = <name6> . group ( 1 , 2 , 3 )	find the first , second and third subgroup of the <name6> regular expression match , assign the result to the <name4> , <name1> and <name5> , respectively .
<name5> <name3> <name1> :	<name5> <name1> is <name3> False , None is considered False ,
<name6> = <name2>	set <name6> to <name2> .
<name6> = <name6> [ 1 : - 1 ]	remove first and last character from the <name6> , substitute it for <name6> .
<name3> <name2> :	<name3> <name2> is not an empty string ,
<name4> = <name3> . <name5> ( <name4> )	call the method <name5> with <name4> as the argument on the <name3> class instance , substitute the result for <name4> .
<name6> . <name4> ( ( <name5> . lower ( ) , <name2> ) )	form the tuple from the <name5> converted to lowercase and <name2> , <name4> it to the end of <name6> .
<name3> = m . end ( )	find the ending position of the regular expression match of the object match , substitute the result for <name3> .
<name1> = <name2> [ <name5> : <name4> ] . strip ( )	slice the <name2> string from the <name5> - th to the <name4> - th index , remove the whitespaces from the start and the <name1> of the string , substitute it for <name1> .
<name1> <name6> <name3> in ( <val4> , <val5> ) :	<name1> <name6> is <name3> a <val4> or <val5> character ,
<name6> , <name1> = <name3> . getpos ( )	evaluate the <name3> .getpos ( ) and assign the result to the <name6> and <name1> respectfully .
"\ <name1> ""\\n"" in <name5> . __starttag_text : \"	<name1> <name5> .__stattag_text contains newline character ,
"\ <name5> = <name5> + <name6> . __starttag_text . <name1> ( ""\\n"" ) \"	increment the <name5> by the <name1> of the newlines in <name6> .__starttag_text .
"\ offset = ( len ( <name4> . __starttag_text ) - <name4> . __starttag_text . rfind ( ""\\n"" ) ) \"	find the last index of newline occurrence in <name4> .__starttag_text , subtract it from total length of <name4> .__starttag_text ,
else :	substitute the result for offset . if not ,
<name1> = <name1> + len ( <name6> . __starttag_text )	increment the <name1> by the length of <name6> .__starttag_text .
"self . error ( ""junk characters in start tag: %r"" % ( <name3> [ <name1> : <name6> ] [ : <val5> ] , ) )"	slice the <name3> from <name1> to <name6> , then take the first <val5> elements of the previous slice ,
<name6> <name5> . endswith ( <val4>   ) :	"with it replace % r in the string ""junk characters in start tag: %r"" , call the method self .error with the resulting string as an argument . <name6> string <name5> ends with string <val4> ,"
<name1> . handle_startendtag ( <name2> , <name3> )	call the method <name1> .handle_startendtag with <name2> and <name3> as the arguments .
else :	if not ,
<name4> . handle_starttag ( <name5> , <name6> )	call the method <name4> .handle_starttag , with <name5> and <name6> as the arguments .
<name6> <name3> <name2> <name1> . CDATA_CONTENT_ELEMENTS :	<name6> <name3> is contained <name2> <name1> .CDATA_CONTENT_ELEMENTS ,
<name3> . set_cdata_mode ( <name4> )	call the method <name3> .set_cdata_mode with <name4> as the argument .
<name1> <name4>	<name1> <name4> .
def <name5> ( <name6> , <name1> ) :	define the method <name5> with <name6> class instance and <name1> as the arguments .
<name6> = <name4> . <name6>	substitute <name4> .rawdata for <name6> .
"assert <name4> [ <name3> : <name3> + 2 ] == <val5> , ""unexpected call to parse_endtag"""	take two characters from the <name3> - th element of <name4> , if they are not equal to the string <val5> ,
<name1> = <name2> . endendtag . <name5> ( <name4> , <name6> + <val3> )	"throw an exception with string ""unexpected call to parse_endtag"" as the message . <name5> anywhere in the <name4> string starting from the ( <name6> + <val3> ) - th element for the <name2> .endendeag , replace the result for <name1> ."
<name1> not <name6> :	<name1> there is no <name6> ,
<name1> - 1	<name1> integer -1 .
<name2> = <name3> . end ( )	find the ending position of the regular expression <name3> of the object <name3> , substitute the result for <name2> .
<name3> = <name1> . endtagfind . <name3> ( <name2> , <name5> )	<name3> the <name2> from the position <name5> , with <name1> .endtagfind pattern , assign the result to the <name3> .
<name2> not <name5> :	<name2> there is no <name5> ,
<name5> <name6> . cdata_tag <name4> <name1> <name3> :	<name5> <name6> .cdata_tag <name4> <name1> <name3> ,
<name1> . handle_data ( <name4> [ <name6> : <name2> ] )	slice the <name4> to obtain substring from <name6> - th to <name2> - th element , use it as the argument for the method call to the <name1> .handle_data .
<name4> <name6>	<name4> <name6> .
<name1> . error ( <val4> % ( <name5> [ <name6> : <name3> ] , ) )	slice the <name5> from <name6> - th to the <name3> - th element , replace with it '%r' in the string <val4> , use it to call the method <name1> .error .
<name2> = <name6> . group ( 1 ) . <name5> ( )	find the first subgroup of the matched string from the <name6> object , <name5> the whitespaces from the begging and end , replace it for <name2> .
<name1> <name4> . cdata_tag <name3> <name6> <name2> :	<name1> <name4> .cdata_tag <name3> <name6> <name2> ,
<name6> <name4> . lower ( ) != <name3> . cdata_tag :	convert <name4> to lowercase <name6> it is not equal to <name3> .cdata_tag ,
<name4> . handle_data ( <name1> [ <name5> : <name3> ] )	slice the <name1> to obtain substring from <name5> - th to <name3> - th element , use it as the argument for the method call to the <name4> .handle_data .
<name2> <name1>	<name2> <name1> .
<name2> . handle_endtag ( <name4> . lower ( ) )	convert <name4> to lowercase , use it as the argument for the call to the method <name2> .handle_endtag .
<name4> . clear_cdata_mode ( )	call the method <name4> .clear_cdata_mode .
<name3> <name1>	<name3> <name1> .
<name2> <name4> <name6> <name3>	<name2> <name4> <name6> <name3> into default name space .
<name6> <name5>	<name6> module <name5> .
<name6> <name2>	<name6> module <name2> .
<name4> <name1>	<name4> module <name1> .
<name4> <name5>	<name4> module <name5> .
<name4> <name5>	<name4> module <name5> .
<name2> <name4> <name1> <name6> <name5> <name3>	<name2> <name4> <name1> <name6> <name5> <name3> into default name space .
<name5> <name3> . utils <name4> <name6>	<name5> <name3> .utils <name4> <name6> into default name space .
<name3> <name1> . utils . datastructures <name6> <name4>	<name3> <name1> .utils .datastructures <name6> <name4> into default name space .
<name4> <name6> . utils . encoding <name1> <name2> , <name5>	<name4> <name6> .utils .encoding <name1> <name2> and <name5> into default name space .
<name3> <name2> . utils . functional <name5> <name6>	<name3> <name2> .utils .functional <name5> <name6> into default name space .
<name6> <name3> . utils <name2> <name4>	<name6> <name3> .utils <name2> <name4> into default name space .
<name3> <name2> . utils . six . moves . urllib . parse <name6> ( <name1> , <name4> , <name5> , <name3> , <name2> , <name6> <name1> <name4> )	<name3> <name2> .utils .six .moves .urllib .parse <name6> <name1> , <name4> , <name5> , <name3> , <name2> , <name6> <name1> <name4> .
\ <name6> = <name5> . compile ( r <val1>   ) \	\ call the function <name5> .compile with an argument raw string <val1> , substitute the result for <name6> . \
<name4> = 'jan feb mar apr may jun jul aug sep oct nov dec'   . split ( )	<name4> is a list with 12 elements : strings 'jan' , 'feb' , 'mar' , 'apr' , 'may' , 'jun' , 'jul' , 'aug' , 'sep' , 'oct' , 'nov' , and 'dec' .
\ <name5> = r <val3> \	\ <name5> is a raw string <val3> . \
\ <name5> = r <val2> \	\ <name5> is a raw string <val2> . \
\ <name6> = r <val5> \	\ <name6> is a raw string <val5> . \
\ <name3> = r <val1> \	\ <name3> is a raw string <val1> . \
\ <name5> = r <val2> \	\ <name5> is a raw string <val2> . \
\ <name3> = r <val6> \	\ <name3> is a raw string <val6> . \
\ RFC1123_DATE = <name4> . compile ( r <val6>   % ( <name1> , <name2> , <name5> , <name3> ) ) \	\ call the function <name4> .compile with an argument raw string <val6> formated with <name1> , <name2> , <name5> and <name3> , \
\ RFC850_DATE = <name1> . compile ( r <val3>   % ( <name6> , <name5> , <name2> , <name4> ) ) \	\ substitute the result for RFC1123_DATE . call the function <name1> .compile with an argument raw string <val3> formated with <name6> , <name5> , <name2> and <name4> , \
\ ASCTIME_DATE = <name3> . compile ( r <val4>   % ( <name5> , <name6> , <name1> , <name2> ) ) \	\ substitute the result for RFC850_DATE . call the function <name3> .compile with an argument raw string <val4> formated with <name5> , <name6> , <name1> and <name2> , \
def <name2> ( <name5> , <name1> = <val3>   ) :	substitute the result for ASCTIME_DATE . define the function <name2> with 2 arguments : <name5> and <name1> set to <val3> .
return force_text ( <name5> ( <name6> ( <name1> ) , <name6> ( safe ) ) )	call the function <name5> with 2 arguments : result of the function <name6> called with an argument <name1> ,
<name4> = <name1> ( <name4> , <name5> . text_type )	and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result . call the function <name1> with 2 arguments : <name4> and <name5> .text_type , substitute the result for <name4> .
def <name4> ( <name5> , <name1> = ''   ) :	define the function <name4> with 2 arguments : <name5> and <name1> set to an empty string .
return force_text ( <name1> ( <name6> ( <name5> ) , <name6> ( safe ) ) )	call the function <name1> with 2 arguments : result of the function <name6> called with an argument <name5> ,
<name3> = <name1> ( <name3> , <name6> . text_type )	and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result . call the function <name1> with 2 arguments : <name3> and <name6> .text_type , substitute the result for <name3> .
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
return force_text ( <name4> ( <name3> ( <name1> ) ) )	call the function <name3> with an argument <name1> , use the result as an argument for the call to the function <name4> ,
<name3> = <name4> ( <name3> , <name6> . text_type )	use the result as an argument for the call to the function force_text , return the result . call the function <name4> with 2 arguments : <name3> and <name6> .text_type , substitute the result for <name3> .
def urlunquote_plus ( <name3> ) :	define the function urlunquote with an argument <name3> .
return force_text ( <name6> ( <name2> ( <name5> ) ) )	call the function <name2> with an argument <name5> , use the result as an argument for the call to the function <name6> ,
<name4> = <name5> ( <name4> , <name2> . text_type )	use the result as an argument for the call to the function force_text , return the result . call the function <name5> with 2 arguments : <name4> and <name2> .text_type , substitute the result for <name4> .
def <name6> ( <name1> , <name2> = <val3> ) :	define the function <name6> with 2 arguments <name1> and <name2> set to integer <val3> .
<name2> isinstance ( <name4> , <name1> ) :	<name2> <name4> is an instance of <name1> class ,
<name4> = <name4> . lists ( )	call the method <name4> .lists , substitute the result for <name4> .
elif hasattr ( <name2> , <val5>   ) :	otherwise if <name2> has an attribute <val5> ,
<name2> = <name2> . items ( )	call the method <name2> .items , substitute the result for <name2> .
return <name2> ( [ ( <name1> ( <name6> ) , [ <name1> ( i ) for i in v ] if isinstance ( v , ( <name3> , tuple ) ) else <name1> ( v ) ) for <name6> , v in query ] , doseq )	call the function <name2> with 2 arguments : <name3> with 2 elements : result of the function <name1> with an argument <name6> ,
def <name6> ( <name3> = <name5> ) :	and list with results of the function force_str with an argument i , for every i in v , only if v is a list or a tuple , otherwise second element is result of the function force_str with an argument v , for every k and v in query , and doseq , return the result . define the function <name6> with an argument <name3> set to <name5> .
<name6> = <name1> ( <name2> )	call the function <name1> with an argument <name2> , substitute the result for <name6> .
<name1> <val4>   % ( <name2> [ : <val5> ] , <name2> [ <val6> : <val3> ] , <name2> [ 12 : 25 ] )	<name1> a string <val4> , formated with : first <val5> elements of <name2> , elements of <name2> from <val6> - th to the <val3> - th index ,
def <name6> ( <name4> = <name3> ) :	and elements of rfcdate from 12 - th to the 25 - th index . define the function <name6> with an argument <name4> set to <name3> .
<name4> <name1> ( <name2> , <name5> = <name3> )	call the function <name1> with 2 arguments : <name2> and <name5> set to boolean <name3> , <name4> the result .
def <name2> ( <name3> ) :	define the function <name2> with an argument <name3> .
<name6> <name3> <name4> <name1> , <name2> , <name5> :	<name6> every <name3> <name4> tuple with 3 elements : <name1> , <name2> and <name5> ,
<name2> = <name1> . match ( <name4> )	call the method <name1> .match with an argument <name4> , substitute the result for <name2> .
<name3> <name1> <name5> <name6> <name4> :	<name3> <name1> <name5> <name6> <name4> ,
<name4>	<name4> from the loop execution .
else :	if not ,
<name4> <name6> ( <val3> % <name5> )	<name4> an <name6> exception with an argument string <val3> formated with <name5> .
<name2> :	<name2> ,
<name2> = int ( <name6> . group ( <val5>   ) )	call the method <name6> .group with an argument string <val5> , convert the result into a string , substitute it for <name2> .
<name4> <name5> <  <val1> :	<name4> <name5> is lesser than integer <val1> ,
<name3> <name5> <  <val2> :	<name3> <name5> is lesser than integer <val2> ,
<name1> += <val6>	increment <name1> by integer <val6> .
else :	if not ,
<name3> += <val1>	increment <name3> by integer <val1> .
month = MONTHS . index ( <name1> . group ( <val2>   ) . lower ( ) ) + 1	call the method <name1> .group with an argument string <val2> , convert the result to lowercase , use it as an argument for the call to the ,
<name2> = int ( <name3> . group ( 'day'   ) )	method MONTHS .index , increment the result by integer 1 , substitute it for month . call the method <name3> .group with an argument string 'fay' , convert the result into a string , substitute it for <name2> .
<name1> = int ( <name2> . group ( <val5>   ) )	call the method <name2> .group with an argument string <val5> , convert the result into a string , substitute it for <name1> .
<name1> = int ( <name2> . group ( <val4>   ) )	call the method <name2> .group with an argument string <val4> , convert the result into a string , substitute it for <name1> .
<name5> = int ( <name6> . group ( <val3>   ) )	call the method <name6> .group with an argument string <val3> , convert the result into a string , substitute it for <name5> .
<name6> = datetime . datetime ( <name2> , <name1> , <name4> , <name3> , <name5> , <name6> )	call the method MONTHS .index with 6 arguments : <name2> , <name1> , <name4> , <name3> , <name5> and <name6> , substitute the <name6> for <name6> .
<name2> <name6> . timegm ( <name3> . utctimetuple ( ) )	call the method <name3> .utctimetuple , use the <name3> as an argument for the call to the method <name6> .timegm , <name2> the <name3> .
except <name4> :	if <name4> exception is caught .
"<name4> . reraise ( <name3> , <name3> ( ""%r is not a valid date"" % date ) , sys . exc_info ( ) [ 2 ] )"	call the function <name4> .reraise with 3 arguments : <name3> , instance of a class <name3> , created with an argument string ,
def <name5> ( <name6> ) :	% r is not a valid <name6> formated with <name6> and third element of the result of the function sys .exc_info . define the function <name5> an argument <name6> .
<name6> :	<name6> ,
<name6> <name3> ( <name1> )	call the function <name3> with an argument <name1> , <name6> the result .
except <name3> :	if <name3> exception is caught .
pass	do nothing .
def base36_to_int ( <name1> ) :	define the functionbase36_to_int with an argument <name1> .
<name2> len ( <name6> ) >  <val3> :	<name2> length of <name6> is greater than integer <val3> ,
<name2> <name1> ( <val3> )	<name2> an <name1> exception with an argument string <val3> .
<name1> = int ( <name3> , <val4> )	convert <name3> to integer of base <val4> , substitute it for <name1> .
<name5> <name1> . PY2 <name3> <name6> >  <name2> . maxint :	<name5> <name1> .PY2 is true <name3> <name6> is greater than <name2> .maxint ,
<name4> <name6> ( <val1> )	<name4> an <name6> exception with an argument string <val1> .
<name5> <name6>	<name5> <name6> .
def <name3> ( <name1> ) :	define the function <name3> with an argument <name1> .
<name1> = <val6>	<name1> is a string <val6> .
<name1> = <val6>	<name1> is integer <val6> .
<name1> <name6> <  <val2> :	<name1> <name6> is smaller than integer <val2> ,
<name3> <name2> ( <val4> )	<name3> an <name2> exception with an argument string <val4> .
<name1> <name2> . PY2 :	<name1> <name2> .PY2 is true ,
<name5> <name3> isinstance ( <name2> , <name1> . integer_types ) :	<name5> <name2> is <name3> an instance of <name1> .integer_types class ,
<name5> <name4> ( <val1> )	<name5> an <name4> exception with an argument string <val1> .
<name4> <name6> >  <name5> . maxint :	<name4> <name6> is greater than <name5> .maxint ,
<name6> <name5> ( <val1> )	<name6> an <name5> exception with an argument string <val1> .
while True :	endless loop ,
<name4> += 1	increment <name4> by one .
<name4> <name1> <  <val2> ** <name3> :	bring integer <val2> to the power of <name3> , <name4> <name1> is smaller than the result ,
<name1> -= 1	decrement <name1> by one .
<name5>	<name5> from the loop execution .
<name4> = [ ]	<name4> is an empty list .
<name3> <name4> >= <val1> :	<name3> <name4> is greater or equal to integer <val1> ,
<name2> = <val6> ** <name1>	bring integer <val6> to the power of <name1> , substitute the result for <name2> .
<name3> . <name2> ( <name6> [ <name1> // <name4> ] )	floor the division of <name1> by <name4> , use it an an index to get the element of the <name6> list , <name2> the result for <name3> .
<name2> = <name2> % <name6>	<name2> is the reminder of the division of <name2> by <name6> .
<name3> -= 1	decrement <name3> by one .
<name3> ''   . <name4> ( <name5> )	<name4> elements of <name5> into a string , <name3> it .
def <name6> ( <name1> ) :	define the function <name6> with an argument <name1> .
\ <name6> <name3> . urlsafe_b64encode ( <name5> ) . rstrip ( b <val4>   ) \	\ call the method <name3> .urlsafe_b64encode with an argument <name5> , strip the result of the bytes string <val4> from the right , <name6> it . \
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name1> = <name1> . encode ( <val5>   )	call the method <name1> .encode with an argument string <val5> , substitute the result for <name1> .
<name2> :	<name2> ,
return base64 . urlsafe_b64decode ( <name1> . ljust ( len ( <name1> ) + len ( <name1> ) % <val6> , b '='   ) )	left justify string <name1> in a field of width equal to the sum of length of <name1> and reminder of the division of length of <name1> by integer <val6> ,
except ( <name5> , <name4> ) <name6> <name1> :	pad the rest of the field with bytes string '=' , use the result <name6> an argument for the call to the method base64 .urlsafe_b64decode , return the result . if <name5> or <name4> , renamed to <name1> , exceptions are caught .
<name6> <name1> ( <name4> )	<name6> an <name1> exception with an argument <name4> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name6> = <name2> . findall ( <name1> )	call the method <name2> .findall with an argument <name1> , substitute the result for <name6> .
<name2> not <name5> :	<name2> <name5> is false ,
<name6> [ <name1> ]	<name6> a list with an element <name1> .
<name5> = [ <name1> . encode ( <val2>   ) . <name6> ( 'unicode_escape'   ) <name4> <name1> <name3> <name5> ]	<name4> every <name1> <name3> <name5> call the method <name1> .encode with an argument string <val2> , call the method <name6> on the result with an argument ,
<name6> <name2>	string 'unicode_escape' , substitute the list of results for <name2> . <name6> <name2> .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
def <name6> ( <name4> , <name3> ) :	"\ is replaced with '\\\\""' . define the function <name6> with 2 arguments <name4> and <name3> . \"
<name1> , <name5> = <name2> ( url1 ) , <name2> ( url2 )	substitute result of the function <name2> with an argument ur1 for <name1> and result of the function <name2> with an argument ur2 for <name5> .
<name3> :	<name3> ,
<name4> ( <name1> . scheme , <name1> . hostname , <name1> . port ) == ( <name5> . scheme , <name5> . hostname , <name5> . port )	if <name5> .scheme , <name5> .hostname and <name5> .port equals <name1> .scheme , <name1> .hostname and <name1> .port , respectively , <name4> boolean True , otherwise <name4> boolean False .
except <name1> :	if <name1> exception is caught .
<name3> <name5>	<name3> boolean <name5> .
def <name4> ( <name6> , <name1> = <name3> ) :	define the function <name4> with 2 arguments <name6> and <name1> set to <name3> .
<name5> not <name4> :	<name5> <name4> is false ,
<name2> <name4>	<name2> boolean <name4> .
\ url = url . <name6> ( '\\\\' , ' / '  ) \	\ <name6> every occurrence of '\\\\' in url with ' / ' . \
<name3> <name2> . startswith ( <val1>   ) :	<name3> <name2> starts with <val1> ,
<name1> <name6>	<name1> boolean <name6> .
<name1> = <name5> ( <name6> )	call the function <name5> with an argument <name6> , substitute the result for <name1> .
<name3> not <name4> . netloc <name2> <name4> . scheme :	<name3> <name4> .netloc is false <name2> <name4> .scheme is true ,
<name3> <name6>	<name3> boolean <name6> .
return ( ( not <name2> . netloc <name5> <name2> . netloc == <name6> ) <name1> ( not <name2> . scheme <name5> <name2> . scheme in [ 'http'   , 'https'   ] ) )	if <name2> .netloc is false <name5> <name2> .netloc equals <name6> , <name1> if <name2> .scheme is false <name5> <name2> .scheme equals ,
<name1> <name6>	<name1> module <name6> .
<name3> <name5>	<name3> module <name5> .
<name6> <name2> . utils <name4> <name5>	<name6> <name2> .utils <name4> <name5> into default name space .
<name4> <name1> . utils . deprecation <name6> <name5>	<name4> <name1> .utils .deprecation <name6> <name5> into default name space .
<name3> . warn ( <val1> , RemovedInDjango19Warning , stacklevel = 2 )	call the function <name3> .warn with 3 arguments : string <val1> ,
def <name5> ( <name4> , <name2> , <name6> ) :	RemovedInDjango19Warning and stacklevel set to integer 2 . define the function <name5> with 3 arguments : <name4> , <name2> and <name6> .
<name6> not hasattr ( <name5> , <val4>   ) :	<name6> <name5> doesnt have an <val4> attribute ,
<name4> <name6> ( <val1> )	<name4> an <name6> with an argument string <val1> .
<name2> = len ( <name6> )	substitute length of <name6> for <name2> .
<name3> <name1> <name5> <name2> ( <name4> , 1 , - 1 ) :	<name3> every <name1> is the <name2> of integers from <name4> to the integer 2 , <name5> the reversed order ,
<name1> :	<name1> ,
<name1> = <name6> . rindex ( <val3>   , <val5> , <name1> )	call the method <name6> .rindex with 3 arguments : string <val3> , integer <val5> and <name1> , substitute the result for <name1> .
except <name6> :	if <name6> exception is caught ,
<name4> <name5> ( <val3> )	<name4> an <name5> with an argument string <val3> .
<name3> <val5> % ( <name2> [ : <name1> ] , <name4> )	<name3> a string <val5> formated with first <name1> <name2> elements and <name4> .
<name3> <name4> . PY3 :	<name3> <name4> .PY3 is true ,
<name2> <name5> <name4> <name3>	<name2> <name5> <name4> <name3> .
else :	if not ,
def <name6> ( <name5> , <name1> = <name3> ) :	define the function <name6> with 3 arguments : <name5> and <name1> set to <name3> .
<name4> <name6> . startswith ( <val1>   ) :	<name4> <name6> starts with an string <val1> ,
<name5> not <name2> :	<name5> <name2> is false ,
<name5> <name6> ( <val1> )	<name5> an <name6> with an argument string <val1> .
<name5> = <val4>	<name5> is an integer <val4> .
<name2> <name1> <name4> <name5> :	<name2> every <name1> <name4> <name5> ,
<name6> <name4> != <val2>   :	<name6> <name4> is not equal to a string <val2> ,
<name5>	<name5> from the loop execution .
<name3> += 1	increment <name3> by one .
<name6> = <name4> ( <name6> [ <name1> : ] , <name5> , <name1> )	call the function <name4> with 3 arguments : <name6> list elements from the <name1> index to the end , <name5> and <name1> ,
<name3> ( <name6> )	substitute the result for <name6> . call the function <name3> with an argument <name6> .
<name4> <name2> . modules [ <name6> ]	<name4> <name2> .modules dictionary value under the <name6> key .
<name3> <name1> . core . exceptions <name2> <name4>	<name3> <name1> .core .exceptions <name2> <name4> into default name space .
<name6> <name4> . utils . translation <name5> <name3> <name1> <name2>	<name6> <name4> .utils .translation <name5> <name3> <name1> <name2> into default name space .
<name6> <name2> . utils . six . moves <name4> <name1>	<name6> <name2> .utils .six .moves <name4> <name1> into default name space .
"def <name1> ( <name3> , <name6> = <name4> , <name5> = _ ( ""This is not a valid IPv6 address."" ) ) :"	define the function <name1> with 3 arguments : <name3> , <name6> set to boolean <name4> and <name5> ,
<name6> = - 1	<name6> is an integer -1 .
<name3> = <val6>	<name3> is an integer <val6> .
<name2> = - 1	<name2> is an integer -1 .
<name5> = <val6>	<name5> is an integer <val6> .
<name1> not <name6> ( <name5> ) :	call he function <name6> with an argument <name5> , <name1> it evaluates to false ,
<name2> <name4> ( <name5> , <name6> = <val3>   )	<name2> an <name4> exception with 2 arguments : <name5> and <name6> as a string <val3> .
<name5> = <name6> ( <name5> )	call the function <name6> with an argument <name5> , substitute the result for <name5> .
<name6> = _sanitize_ipv4_mapping ( <name6> )	call the function _explode_shorthand_ip_string with an argument <name6> , substitute the result for <name6> .
<name3> <name4> :	<name3> <name4> is true ,
<name2> = <name1> ( <name5> )	call the function <name1> with an argument <name5> , substitute the result for <name2> .
<name3> <name2> :	<name3> <name2> is true ,
<name3> <name5>	<name3> <name5> .
<name4> = <name5> . <name1> ( <val3> )	<name1> <name5> by <val3> , substitute the result for <name4> .
<name6> <name3> <name5> <name1> ( len ( <name4> ) ) :	<name6> every <name3> <name5> <name1> of integers from 0 to length of <name4> , not included ,
<name3> [ <name5> ] = <name3> [ <name5> ] . lstrip ( <val4>   )	get the value under the <name5> key of the <name3> dictionary , remove the leading <val4> characters ,
<name4> not <name5> [ <name6> ] :	substitute the result for value under the <name6> key of the <name5> dictionary . get the value under the <name6> key of the <name5> dictionary , <name4> it is false ,
<name4> [ <name6> ] = <val3>	value under the <name6> key of the <name4> dictionary is a string <val3> .
<name4> <name1> [ <name6> ] == <val3>   :	<name4> value under the <name6> key of the <name1> dictionary equals to string <val3> ,
<name2> += <val3>	increment <name2> by integer <val3> ,
<name1> <name6> == - 1 :	<name1> <name6> equals integer -1 ,
<name3> = <name6>	substitute <name6> for <name3> .
<name6> <name3> >  <name1> :	<name6> <name3> is greater than <name1> ,
<name3> = <name6>	substitute <name6> for <name3> .
<name1> = <name2>	substitute <name2> for <name1> .
else :	if not ,
<name4> = <val2>	<name4> is integer <val2> .
<name1> = - 1	<name1> is integer -1 .
<name6> <name2> >  <val3> :	<name6> <name2> is greater than integer <val3> ,
<name2> = ( <name6> + <name4> )	sum <name6> and <name4> , substitute the result for <name2> ,
<name3> <name1> == len ( <name2> ) :	<name3> <name1> equals length of <name2> ,
<name1> += [ ''   ]	append an empty string to list <name1> .
<name6> [ <name5> : <name1> ] = [ ''   ]	replace <name6> list from the <name5> index to <name1> index with an empty string .
<name5> <name3> == <val1> :	<name5> <name3> equals integer <val1> ,
<name1> = [ ''   ] + <name1>	prepend an empty string to <name1> list .
<name1> = <val2> . <name5> ( <name4> )	<name5> elements of <name4> into a string , separated with <val2> , substitute it for <name1> .
<name3> <name1> . lower ( )	convert <name1> to lowercase and <name3> it .
def <name4> ( <name6> ) :	define the function <name4> with an argument <name6> .
<name3> not <name4> . lower ( ) . startswith ( <val6>   ) :	convert <name4> to lowercase , <name3> it doesnt start with a string <val6> ,
<name1> <name3>	<name1> <name3> .
<name2> = <name4> . <name5> ( <val1>   )	<name5> <name4> into parts by <val1> , substitute the result for <name2> .
<name2> <val6>   <name3> <name1> [ - 1 ] :	<name2> <val6> is contained <name3> last elements of <name1> ,
<name1> <name4>	<name1> <name4> .
<name4> = <val1> % ( int ( <name6> [ 6 ] [ 0 : <val5> ] , 16 ) , int ( <name6> [ 6 ] [ <val5> : 4 ] , 16 ) , int ( <name6> [ 7 ] [ 0 : <val5> ] , 16 ) , int ( <name6> [ 7 ] [ <val5> : 4 ] , 16 ) , )	<name4> is a string <val1> formated with first <val5> elements of seventh element of <name6> converted into hexadecimal number ,
<name4> = <val6>   . <name1> ( <name5> [ 0 : 6 ] )	second 2 elements of seventh element of <name5> converted into hexadecimal number , first 2 elements of eight element of <name5> converted into hexadecimal number , second 2 elements of eight element of <name5> converted into hexadecimal number . <name1> first 5 elements of <name5> into a string , separated by <val6> , substitute the <name4> for <name4> .
<name1> += <val5>   + <name3>	append <val5> and <name3> to <name1> .
<name4> <name1>	<name4> <name1> .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name6> not <name1> . lower ( ) . startswith ( <val4>   ) :	convert <name1> to lowercase , <name6> it doesnt start with a string <val4> ,
<name5> <name2>	<name5> <name2> .
<name1> <name5> . rsplit ( ':'   , 1 ) [ 1 ]	split <name5> into 2 parts from right , <name1> second element of the result .
def <name6> ( <name4> ) :	define the function <name6> with an argument <name4> .
<name3> <name4> . core . validators <name1> <name2>	<name3> <name4> .core .validators <name1> <name2> .
<name4> <val2>   <name3> <name5> <name6> :	<name4> <val2> is <name3> contained <name5> <name6> .
<name4> <name3>	<name4> boolean <name3> .
<name5> <name1> . <name4> ( <val2>   ) >  <val6> :	<name5> <name4> of occurrence of <val2> in <name1> is greater than integer <val6> ,
<name4> <name6>	<name4> boolean <name6> .
<name2> <val3>   <name5> <name6> :	<name2> string <val3> is contained <name5> <name6> ,
<name2> <name5>	<name2> boolean <name5> .
<name5> ( ( <name6> . startswith ( ':'   ) and not <name6> . startswith ( <val3>   ) ) or ( <name6> . endswith ( ':'   ) and not <name6> . endswith ( <val3>   ) ) ) :	<name5> <name6> starts with ':, but it doesnt starts with ' : : ', or if ip_str ends with ' : , but it doesnt ends with <val3> ,
<name2> <name6>	<name2> boolean <name6> .
<name6> <name3> . <name2> ( <val1>   ) >  <val5> :	<name6> <name2> of occurrence of <val1> in <name3> is greater than integer <val5> ,
<name2> <name6>	<name2> boolean <name6> .
<name3> <val5>   <name4> <name1> <name2> <name6> <name2> . count ( <val3>   ) != <val5> :	<name3> <val5> is <name4> contained <name1> <name2> <name6> number of occurrences of <val3> <name1> <name2> is <name4> equal to integer <val5> ,
<name6> <name3> . <name4> ( <val1>   ) != <val5> :	<name6> <name4> of occurrence of <val1> in <name3> is not equal to integer <val5> ,
<name4> <name2>	<name4> boolean <name2> .
<name1> = <name6> ( <name1> )	call the function <name6> with an argument <name1> , substitute the result for <name1> .
<name2> <name5> <name4> <name1> . <name3> ( <val6>   ) :	<name3> <name1> into parts by <val6> , <name2> every <name5> <name4> the result ,
<name2> hextet . <name6> ( <val4>   ) == <val5> :	<name2> <name6> of occurrence of <val4> in ip_str is equal to integer <val5> ,
<name2> <name1> <name6> . <name3> ( <val5>   ) [ - 1 ] == <name4> :	<name3> <name6> by <val5> , <name2> last element of the result is <name1> equal to <name4> .
<name4> <name6>	<name4> boolean <name6> .
<name3> :	<name3> ,
<name5> ( <name1> )	call the function <name5> with an argument <name1> .
except <name1> :	if <name1> exception is caught ,
<name6> <name1>	<name6> boolean <name1> .
else :	if not ,
<name6> :	<name6> ,
<name6> int ( <name4> , 16 ) <  0x0 <name3> int ( <name4> , 16 ) >  0xFFFF :	<name6> <name4> converted to hexadecimal number is smaller than hexadecimal 0 , <name3> <name4> converted to hexadecimal number is smaller than hexadecimal FFFF ,
<name1> <name2>	<name1> boolean <name2> .
except <name6> :	if <name6> exception is caught .
<name4> <name5>	<name4> boolean <name5> .
<name4> <name6>	<name4> boolean <name6> .
def <name4> ( <name2> ) :	define the function <name4> with an argument <name2> .
<name5> not <name1> ( <name6> ) :	call the function <name1> with an argument <name6> , <name5> it evaluates to false ,
<name6> <name3>	<name6> <name3> .
<name3> = [ ]	<name3> is an empty list ,
<name3> = <name6> . <name1> ( <val5>   )	<name1> <name6> by <val5> , substitute it for <name3> .
<name2> <val6>   <name1> <name3> . <name4> ( <val5>   ) [ - 1 ] :	<name4> <name3> into parts by <val5> , <name2> <val6> is contained <name1> the last element of the result ,
<name4> = <val5>	<name4> is an integer <val5> .
else :	if not ,
<name6> = <val2>	<name6> is an integer <val2> .
<name3> len ( <name1> ) >  <val5> :	<name3> length of <name1> is greater than integer <val5> ,
<name5> = len ( <name1> [ 0 ] . <name2> ( <val3>   ) ) + len ( <name1> [ 1 ] . <name2> ( <val3>   ) )	<name2> first and second element of <name1> into parts by <val3> , sum their lengths , substitute the result for <name5> .
<name6> = <name3> [ 0 ] . <name5> ( <val1>   )	<name5> first element of <name3> into parts by <val1> , append them to <name6> .
<name2> <name6> <name1> xrange ( <name5> - <name3> ) :	<name2> every <name6> <name1> range of integers from 0 up to <name3> subtracted from <name5> ,
<name6> . <name5> ( <val4>   )	<name5> string <val4> to <name6> .
<name6> += <name4> [ 1 ] . <name3> ( <val2>   )	<name3> second element of <name4> into parts by <val2> , append them to <name6> .
else :	if not ,
<name4> = <name2> . <name1> ( <val6>   )	<name1> <name2> into parts by <val6> , substitute the result for <name4> .
<name2> = [ ]	<name2> is an empty list .
<name6> <name3> <name5> <name2> :	<name6> every <name3> <name5> <name2> ,
ret_ip . <name4> ( ( <val6>   * ( <val3> - len ( <name5> ) ) + <name5> ) . lower ( ) )	subtract length of <name5> from <val3> , create a string with previous result number of character <val6> , <name4> <name5> to it ,
<name2> <val3>   . <name4> ( <name6> )	convert the result into a lowercase , append it to <name6> . <name4> elements of <name6> into a string separated with <val3> , <name2> it .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name1> <name6> . <name5> ( <val4>   ) == <val3> :	<name1> <name5> of occurrence of <val4> in <name6> equals integer <val3> ,
<name4> <name2>	<name4> boolean <name2> .
<name1> <name2> ( len ( <name4> ) <  <val6> <name5> <name4> <name3> <name1> . <name2> ( <val4>   ) ) :	<name2> <name1> into parts by <val4> , <name5> every <name4> <name3> the result , calculate length of <name4> , <name1> <name2> is smaller than integer <val6> ,
<name1> <name2>	<name1> boolean <name2> .
<name2> <name4>	<name2> boolean <name4> .
def <name2> ( <name3> ) :	define the function <name2> with an argument <name3> .
<name4> :	<name4> ,
iter ( <name2> )	create an iterator out of <name2> .
except <name1> :	if <name1> exception is caught ,
<name1> <name5>	<name1> boolean <name5> .
else :	if not ,
<name4> <name3>	<name4> boolean <name3> .
<name5> <name3>	<name5> module <name3> .
<name4> <name3> ( <name1> ) :	derive the <name4> <name3> from the <name1> base <name4> .
<name4> = <val2>	<name4> is an integer <val2> .
def <name1> ( <name5> , <name2> , <name6> , <name4> = <name3> ) :	define the method <name1> with 4 arguments : <name5> , <name2> , <name6> and <name4> set to <name3> .
<name5> . id = <name4> . num	substitute <name4> .num for <name5> .id .
<name5> . num += <val4>	increment <name5> .num with an integer <val4> .
<name6> . <name2> = <name2>	substitute <name2> for <name6> .name .
<name3> . <name1> = <name1>	substitute <name1> for <name3> .regex .
<name2> . <name4> = <name4>	substitute <name4> for <name2> .next .
"def <name1> ( <name2> , <name5> = """" , <name6> = """" ) :"	define the function <name1> with 3 arguments : <name2> , <name5> set to an empty string and <name6> set to an empty string .
"return ""|"" . join ( <name6> + <name4> . escape ( <name2> ) + <name3> <name5> <name2> <name1> <name6> . <name4> ( ) )"	<name5> every <name2> <name1> <name6> <name4> into words , concatenate <name6> , result of the function <name4> .escape with an argument <name2> and <name3> ,
<name6> <name4> ( <name1> ) :	and join the results into a string , separated with '|' character , return the result . derive the <name6> <name4> from the <name1> base <name6> .
def <name1> ( <name3> , <name2> , <name5> ) :	define the method <name1> with 3 arguments <name3> , <name2> and <name5> .
<name4> . regexes = { }	<name4> .regexes is an empty dictionary .
<name5> . toks = { }	<name5> .tokens is an empty dictionary .
<name5> <name1> , <name3> <name4> <name6> . items ( ) :	call the method <name6> .items , <name5> every <name1> and <name3> <name4> the result ,
<name4> = [ ]	<name4> is an empty list .
<name2> <name6> <name5> <name1> :	<name2> every <name6> <name5> <name1> ,
<name2> = <val3> % <name5> . id	<name2> is a string <val3> formated with <name5> .id .
<name4> . toks [ <name3> ] = <name5>	substitute <name5> for value under the <name3> key of the <name4> .toks dictionary .
<name6> . <name1> ( <val3> % ( <name2> , <name4> . regex ) )	format a string <val3> with <name2> and <name4> .regex , <name1> it to the <name6> .
self . regexes [ state ] = <name5> . compile ( <val6> . join ( <name3> ) , <name5> . MULTILINE |  <name5> . VERBOSE )	call the function <name5> .compile with 2 arguments : elements of <name3> joined into a string , separated with <val6> ,
<name5> . <name6> = <name1>	and result of bitwise OR performed on 2 operands : re .MULTILINE and re .VERBOSE , substitute the result for value under the <name6> key of the <name5> .regexes dictionary . substitute <name1> for <name5> .state .
def <name4> ( <name3> , <name2> ) :	define the method <name4> with 2 arguments <name3> and <name2> .
<name6> = len ( <name2> )	substitute length of <name2> for <name6> .
<name5> = <name1> . <name5>	substitute <name1> .state for <name5> .
<name1> = <name3> . <name1>	substitute <name3> .regexes for <name1> .
<name5> = <name3> . <name5>	substitute <name3> .toks for <name5> .
<name6> = <val1>	<name6> is an integer <val1> .
<name5> <name4> <  <name6> :	<name5> <name4> is lesser than <name6> .
for match in <name2> [ <name6> ] . <name3> ( <name5> , <name4> ) :	get the value under the <name6> key of the <name2> dictionary , call the method <name3> on the result with 2 arguments : <name5> and <name4> ,
<name3> = <name2> . lastgroup	for every <name2> in the result , substitute <name2> .lastgroup for <name3> .
<name4> = <name3> [ <name6> ]	substitute value under the <name6> key of the <name3> dictionary for <name4> .
<name6> = <name4> . group ( <name3> )	call the method <name4> .group with an arugument <name3> , substitute the result for <name6> .
<name1> += len ( <name2> )	increment <name1> by length of <name2> .
<name4> ( <name3> . name , <name6> )	<name4> a tuple with 2 elements : <name3> .name and <name6> .
<name4> <name3> . next :	<name4> <name3> .next is true ,
<name4> = <name3> . next	substitute <name3> .next for <name4> .
<name6>	<name6> from the loop execution .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .state .
<name4> <name6> ( <name2> ) :	derive the <name4> <name6> from the <name2> base <name4> .
<name2> = [ <name5> ( <val1> , r <val3> ) , ]	<name2> is an list with an element instance of <name5> class , created with 2 arguments : string <val1> and raw string <val3> .
"\ <name6> = {    'div'   : both_before + [ <name3> ( <val2> , literals ( ""/= /"" ) , next = 'reg'   ) , ] + both_after , 'reg'   : both_before + [ <name3> ( ""regex"" , r """" ""                     /                       # opening slash                     # First character is..                     (   [^*\\\\/[]            # anything but * \\ / or [                     |   \\\\.                 # or an escape sequence                     |   \\[                  # or a class, which has                             (   [^\\]\\\\]     #   anything but \\ or ]                             |   \\\\.         #   or an escape sequence                             )*              #   many times                         \\]                     )                     # Following characters are same, except for excluding a star                     (   [^\\\\/[]             # anything but \\ / or [                     |   \\\\.                 # or an escape sequence                     |   \\[                  # or a class, which has                             (   [^\\]\\\\]     #   anything but \\ or ]                             |   \\\\.         #   or an escape sequence                             )*              #   many times                         \\]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 "" """" , next = 'div'   ) , ] + both_after , }\"	<name6> is a dictionary with 2 arguments : appended list with an element instance of a class <name3> , created with 3 arguments : <val2> ,
def <name2> ( <name1> ) :	"\ result of the function literals called with an argument string ""/= /"" and next as a string 'reg' , to the both_before , appended both_after to the previous result , for 'div' and appended list with an element instance of a class Tok , created with 3 arguments : string ""regex"" , raw string '/([^*\\\\/[]|\\\\.|\\[(   [^\\]\\\\]|   \\\\.)*\\])(   [^\\\\/[]|   \\\\.|   \\[(   [^\\]\\\\]|   \\\\.)*\\])*/[a-zA-Z0-9]*' , and next as a string 'div' , to the both_before , appended both_after to the previous result for 'div' . define the method <name2> with an argument <name1> . \"
super ( <name4> , <name1> ) . <name3> ( <name1> . states , <val2>   )	call the method <name3> with 2 arguments : <name1> .states and string <val2> from the base class of the class <name4> .
def <name3> ( <name4> ) :	define the function <name3> with an argument <name4> .
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
<name4> = <name5> . group ( <val1> )	call the method <name5> .group with an argument integer <val1> , substitute the result for <name4> .
\ <name6> r <val5> \	\ <name6> an raw string <val5> . \
else :	if not ,
<name2> <name6>	<name2> <name6> .
<name2> = <name6> ( )	<name2> is an instance of <name6> class .
<name2> = [ ]	<name2> is an empty list .
<name4> <name2> , <name1> <name6> <name3> . lex ( <name5> ) :	call the method <name3> .lex with an arguments <name5> , <name4> every <name2> and <name1> <name6> the result ,
<name1> <name3> == <val4>   :	<name1> <name3> equals a string <val4> ,
elif <name3> == <val2>   :	otherwise if <name3> starts with a string <val2> ,
\ guts = <name1> . sub ( r <val4> , <name3> , <name2> [ 1 : - 1 ] ) \	\ call the function <name1> .sub with 3 arguments : raw string <val4> , <name3> and <name2> without the first and last element , \
elif <name4> == <val2>   :	otherwise if <name4> equals a string <val2> .
"\ <name2> = <name2> . <name1> ( ""\\\\"" , "" <name6> ""  ) \"	\ <name1> every occurrence of '\\\\' in tok with ' <name6> ' , substitute the result for <name2> . \
<name2> . <name3> ( <name5> )	<name3> <name5> to <name2> .
<name1> ''   . <name2> ( <name3> )	<name2> elements of <name3> into a string , <name1> it .
<name2> <name4>	<name2> module <name4> .
<name3> <name4>	<name3> module <name4> .
<name3> <name1>	<name3> module <name1> .
<name3> <name6> . conf <name5> <name4>	<name3> <name6> .conf <name5> <name4> into default name space .
<name3> <name5> . core <name4> <name2>	<name3> <name5> .core <name4> <name2> into default name space .
<name2> <name4> . core . mail <name3> <name6>	<name2> <name4> .core .mail <name3> <name6> into default name space .
<name3> <name1> . utils . deprecation <name2> <name4>	<name3> <name1> .utils .deprecation <name2> <name4> into default name space .
<name3> <name5> . utils . module_loading <name1> <name2>	<name3> <name5> .utils .module_loading <name1> <name2> into default name space .
<name5> <name3> . views . debug <name1> <name2> , <name4>	<name5> <name3> .views .debug <name1> <name2> and <name4> into default name space .
<name6> <name1> <name2> <name3>	<name6> <name1> <name2> <name3> .
<name3> <name6> . config <name2> <name5>	<name3> <name6> .config <name2> <name5> .
<name6> = <name1> . <name6>	substitute <name1> .getLogger for <name6> .
<name4> = {   <val5>   : <val3> , <val1>   : <name2> , 'filters'   : {   'require_debug_false'   : {   '()'   : 'django.utils.log.RequireDebugFalse'   , }  , 'require_debug_true'   : {   '()'   : 'django.utils.log.RequireDebugTrue'   , }  , }  , 'handlers'   : {   'console'   : {   'level'   : 'INFO'   , 'filters'   : [ 'require_debug_true'   ] , 'class'   : 'logging.StreamHandler'   , }  , 'null'   : {   'class'   : 'logging.NullHandler'   , }  , 'mail_admins'   : {   'level'   : 'ERROR'   , 'filters'   : [ 'require_debug_false'   ] , 'class'   : 'django.utils.log.AdminEmailHandler'   }  }  , 'loggers'   : {   'django'   : {   'handlers'   : [ 'console'   ] , }  , 'django.request'   : {   'handlers'   : [ 'mail_admins'   ] , 'level'   : 'ERROR'   , 'propagate'   : <name2> , }  , 'django.security'   : {   'handlers'   : [ 'mail_admins'   ] , 'level'   : 'ERROR'   , 'propagate'   : <name2> , }  , 'py.warnings'   : {   'handlers'   : [ 'console'   ] , }  , }  }	<name4> is a dictionary with 5 initial entries : <val3> for <val5> , <name2> for <val1> ,
def <name2> ( <name5> , <name6> ) :	and 3 additional pairs of dictionaries for string . define the function <name2> with 2 arguments : <name5> and <name6> .
<name2> not <name3> . warnoptions :	<name2> <name3> .warnoptions is false ,
<name4> . captureWarnings ( <name5> )	call the method <name4> .captureWarnings with an argument boolean <name5> .
<name2> . simplefilter ( <val6> , <name1> )	call the function <name2> .simplefilter with 2 arguments : string <val6> and <name1> .
<name2> <name1> :	<name2> <name1> is true ,
<name5> = <name4> ( <name3> )	call the function <name4> with an argument <name3> , substitute the result for <name5> .
<name5> ( <name1> )	call the function <name5> with an argument <name1> .
<name2> <name1> :	<name2> <name1> is true ,
<name2> ( <name4> )	call the function <name2> with an argument <name4> .
<name5> <name6> ( <name1> . Handler ) :	derive the <name5> <name6> from <name1> .Handler base <name5> .
def <name3> ( <name5> , <name6> = <name2> , <name1> = <name4> ) :	define the method <name3> with 3 arguments : <name5> , <name6> set to boolean <name2> and <name1> set to <name4> .
<name6> . Handler . __init__ ( <name2> )	call the method <name6> .Handler .__init__ with an argument <name2> .
<name3> . <name5> = <name5>	substitute <name5> for <name3> .include_html .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .email_backend .
def <name2> ( <name6> , <name3> ) :	define the method <name2> with 2 arguments : <name6> and <name3> .
<name2> :	<name2> ,
<name2> = <name4> . <name2>	substitute <name4> .request for <name2> .
<name5> = <val6>   % ( <name1> . levelname , ( <val2>   <name3> request . META . get ( <val4>   ) in settings . INTERNAL_IPS else 'EXTERNAL'   ) , <name1> . getMessage ( ) )	<name5> is an string <val6> , formated with <name1> .levelname , string <val2> <name3> value under the <val4> key ,
<name1> = <name5> ( <name2> )	of the <name2> .META dictionary is contained in settings .INTERNAL_IPS , otherwise use string 'EXTERNAL' , and result of the method record .getMessage . call the function <name5> with an argument <name2> , substitute the result for <name1> .
\ <name4> = <val2>   . <name5> ( <name1> . get_request_repr ( <name3> ) ) \	\ call the method <name1> .get_request_repr with an argument <name3> , <name5> string <val2> with the result , substitute the result for <name4> . \
except <name5> :	if <name5> exception is caught ,
<name5> = <val6>   % ( <name4> . levelname , <name4> . getMessage ( ) )	<name5> is an string <val6> formated with <name4> .levelname and result of the method <name4> .getMessage , respectively .
<name4> = <name5>	<name4> is <name5> .
<name1> = <val2>	<name1> is a string <val2> .
<name3> = <name4> . format_subject ( <name3> )	call the function <name4> .format_subject with an argument <name3> , substitute the result for <name3> .
<name1> <name4> . exc_info :	<name1> <name4> .exc_info is true ,
<name6> = <name1> . <name6>	substitute <name1> .exc_info for <name6> .
else :	if not ,
<name6> = ( <name5> , <name2> . getMessage ( ) , <name5> )	<name6> is an tuple with 3 elements : <name5> , result of method <name2> .getMessage and <name5> .
\ <name2> = <val4> % ( <name5> . format ( <name3> ) , request_repr ) \	\ <name2> is an string <val4> formated with the result of the metod <name5> .format with an argument <name3> , \
<name3> = <name5> ( <name1> , <name4> = <name2> , * exc_info )	and request_repr , respectively . <name3> is an instance of <name5> class , created with 3 arguments : <name1> , <name4> as boolean <name2> ,
<name3> = <name5> . get_traceback_html ( ) <name1> <name4> . include_html else None	unpacked list exc_info . <name1> <name4> .include_html is true , call the method <name5> .get_traceback_html and substitute the result for <name3> ,
<name4> . mail_admins ( <name2> , <name5> , <name6> = <name1> , <name3> = <name3> , connection = self . connection ( ) )	otherwise <name3> is None . call the method <name4> .mail_admins with 5 arguments : <name2> , <name5> , <name6> as boolean <name1> , tml_message as <name3> ,
def <name2> ( <name3> ) :	and <name2> as the result of the method <name3> .connection . define the <name2> with an argument <name3> .
return <name3> ( <name5> = <name2> . email_backend , <name1> = <name6> )	call the function <name3> with 2 arguments : <name5> set to <name2> .email_backend and <name1> set to boolean <name6> .
def <name5> ( <name3> , <name2> ) :	define the method <name5> with 2 arguments : <name3> and <name2> .
\ formatted_subject = <name3> . <name5> ( <val2>   , <val6>   ) . <name5> ( <val1>   , <val4>   ) \	\ <name5> every occurrence of <val2> in <name3> with <val6> and <name5> every occurrence of <val1> in <name3> with <val4> , \
<name1> <name6> [ : <val5> ]	substitute the result for <name6> . <name1> first <val5> elements of <name6> .
<name5> <name6> ( <name3> . Filter ) :	derive the <name5> <name6> from <name3> .Filter base <name5> .
def <name4> ( <name5> , <name6> ) :	define the method <name4> with 2 arguments : <name5> and <name6> .
<name1> . <name4> = <name4>	substitute <name4> for <name1> .callback .
def <name6> ( <name2> , <name4> ) :	define the method <name6> with 2 arguments : <name2> and <name4> .
<name5> <name4> . callback ( <name1> ) :	call the method <name4> .callback with an argument <name1> , <name5> the result evaluates to true ,
<name6> <val2>	<name6> integer <val2> .
<name4> <val2>	<name4> integer <val2> .
<name2> <name5> ( <name4> . Filter ) :	derive the <name2> <name5> from <name4> .Filter base <name2> .
def <name5> ( <name6> , <name3> ) :	define the method <name5> with 2 arguments : <name6> and <name3> .
<name3> not <name1> . DEBUG	if <name1> .DEBUG is true , <name3> boolean False , otherwise <name3> boolean True .
<name5> <name3> ( <name4> . Filter ) :	derive the <name5> <name3> from <name4> .Filter base <name5> .
def <name5> ( <name4> , <name3> ) :	define the method <name5> with 2 arguments : <name4> and <name3> .
<name1> <name5> . DEBUG	<name1> <name5> .DEBUG .
<name4> :	<name4> ,
<name5> <name2> <name3> <name4>	<name5> <name2> <name3> <name4> .
except <name1> :	if <name1> exception is caught .
<name6> <name2> <name5> <name3>	<name6> <name2> <name5> <name3> .
<name3> <name5> <name1> <name2>	<name3> <name5> <name1> <name2> .
<name6> <name1> <name2> <name4>	<name6> <name1> <name2> <name4> .
"<name3> = <name6> ( <val4> , [ <val1> , ""misses"" , ""maxsize"" , ""currsize"" ] )"	<name3> is an instance of <name6> class created with 2 arguments : string <val4> and a list with 4 elements : string <val1> ,
<name4> <name1> ( <name6> ) :	"misses , ""maxsize"" and ""currsize"" . derive <name4> <name1> from <name6> base <name4> ."
<name2> = <val5>	<name2> is a string <val5> .
def <name5> ( <name6> , <name4> , <name2> = <name2> ) :	define the method <name5> with 3 arguments : <name6> , <name4> and <name2> set to <name2> .
<name2> [ : ] = <name3>	substitute <name3> for elements of <name2> .
<name4> . hashvalue = <name5> ( <name1> )	get the <name5> value of the <name1> , substitute it for <name4> .hashvalue .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name4> <name2> . hashvalue	<name4> <name2> .hashvalue .
def <name4> ( <name5> , <name1> , <name3> , <name6> = ( <name2> ( ) , ) , fasttypes = {  int , str , frozenset , type ( None ) }  , sorted = sorted , <name4> = <name4> , type = type , len = len ) :	define the function <name4> with 9 arguments : <name5> , <name1> , <name3> , <name6> as a <name4> with an element result of the function <name2> ,
<name3> = <name1>	substitute <name1> for <name3> .
<name4> <name3> :	<name4> <name3> is true ,
<name1> = sorted ( <name2> . items ( ) )	sort elements of <name2> , substitute the result for <name1> .
<name3> += <name6>	increment <name3> by <name6> .
<name2> <name4> <name5> <name6> :	<name2> every <name4> <name5> <name6> ,
<name4> += <name2>	increment <name4> by <name2> .
<name2> <name5> :	<name2> <name5> is true ,
<name6> += <name1> ( type ( <name3> ) <name4> <name3> <name2> <name5> )	create a <name1> out of types of <name3> , <name4> every <name3> <name2> <name5> , extend <name6> <name1> with the result .
<name3> <name4> :	<name3> <name4> is true ,
<name6> += <name4> ( type ( <name2> ) <name5> <name1> , <name2> <name3> <name6> )	create a <name4> out of types of <name2> , <name5> every <name1> and <name2> <name3> <name6> , extend <name6> <name4> with the result .
elif len ( <name2> ) == <val3> <name4> <name1> ( <name2> [ 0 ] ) <name5> <name6> :	otherwise if length of <name2> equals integer <val3> <name4> <name1> of first element of <name2> is contained <name5> <name6> ,
<name2> <name4> [ 0 ]	<name2> first element of <name4> .
<name6> <name4> ( <name1> )	<name6> instance of <name4> class , created with an argument <name1> .
def <name5> ( <name2> = <val6> , <name4> = <name3> ) :	define the function <name5> with 2 arguments <name2> set to integer <val6> and <name4> set to boolean <name3> .
def <name6> ( <name4> ) :	define the function <name6> with an argument <name4> .
<name1> = dict ( )	<name1> is an empty dictionary .
<name5> = [ <val2> , <val2> ]	<name5> is an list with 2 elements : 2 integers <val2> .
<name6> , <name5> = <val3> , <val2>	<name6> and <name5> are integer <val3> and <val2> , respectively .
<name5> = <name3>	substitute <name3> for <name5> .
<name1> = <name4> . get	substitute <name4> .get for <name1> .
<name1> = <name5>	substitute <name5> for <name1> .
<name2> = <name5> ( )	<name2> is an instance of <name5> class .
<name4> = [ ]	<name4> is an empty list .
<name3> [ : ] = [ <name3> , <name3> , <name6> , <name6> ]	<name3> is a list with elements : <name3> , <name3> , <name6> and <name6> .
<name6> = [ <name4> ]	<name6> is an list with an element <name4> .
<name3> , <name1> , <name4> , <name5> = <val2> , <val6> , <val3> , <val1>	substitute integers <val2> , <val6> , <val3> and <val1> for <name3> , <name1> , <name4> and <name5> , respectivley .
<name6> <name3> == <val1> :	<name6> <name3> equals integer <val1> ,
def <name2> ( * <name6> , ** <name5> ) :	define the function <name2> with 2 arguments : unpacked list <name6> and unpacked dictionary <name5> .
   <name5> = <name6> ( * <name3> , ** <name1> )	call the function <name6> with 2 arguments : unpacked list <name3> and unpacked dictionary <name1> , substitute the <name5> for <name5> .
<name1> [ <name3> ] += <val4>	increment <name1> dictionary value under the <name3> key by integer <val4> .
<name6> <name3>	<name6> <name3> .
elif <name6> <name3> <name5> :	otherwise if <name6> <name3> <name5> ,
def <name1> ( * <name2> , ** <name4> ) :	define the function <name1> with 2 arguments : unpacked list <name2> and unpacked dictionary <name4> .
   <name5> = <name6> ( <name4> , <name3> , <name2> )	call the function <name6> with 3 arguments : <name4> , <name3> and <name2> , substitute the result for <name5> .
<name4> = <name3> ( <name2> , <name5> )	call the function <name3> with 2 arguments : <name2> and <name5> , substitute the <name4> for <name4> .
<name3> <name4> <name5> <name2> <name1> :	<name3> <name4> <name5> <name2> <name1> ,
     <name5> [ <name3> ] += <val6>	increment <name5> dictionary value under the <name3> key by integer <val6> .
<name2> <name4>	<name2> <name4> .
<name1> = <name4> ( * <name2> , ** <name3> )	call the function <name4> with 2 arguments unpacked list <name2> and unpacked dictionary <name3> , substitute the <name1> for <name1> .
<name6> [ <name2> ] = <name1>	substitute <name1> for <name6> dictionary value under the <name2> <name2> .
<name4> [ <name5> ] += <val6>	increment <name4> dictionary value under the <name5> key by integer <val6> .
<name5> <name4>	<name5> <name4> .
else :	if not ,
def <name4> ( * <name1> , ** <name3> ) :	define the function <name4> with 2 arguments : unpacked list <name1> and unpacked dictionary <name3> .
   <name4> = <name2> ( <name6> , <name5> , <name3> ) <name1> <name5> <name4> <name3> else <name6>	<name1> <name5> is true <name4> <name3> is true , call the function <name2> with 3 arguments : <name6> , <name5> and <name3> , substitute the result for <name4> ,
<name3> <name1> :	otherwise substitute args for key . <name3> <name1> ,
     <name3> = <name4> ( <name5> )	call the function <name4> with an argument <name5> , substitute the result for <name3> .
<name4> <name3> <name6> <name5> <name2> :	<name4> <name3> <name6> <name5> <name2> ,
           <name2> , = <name5>	substitute <name5> for a tuple with an element <name2> .
<name5> , <name2> , <name3> , <name1> = <name6>	substitute <name6> for <name5> , <name2> , <name3> and <name1> , respectively .
<name5> [ <name3> ] = <name1>	substitute <name1> for value under the <name3> key of the <name5> dictionary .
<name5> [ <name2> ] = <name1>	substitute <name1> for value under the <name2> key of the <name5> dictionary .
<name3> = <name2> [ <name4> ]	substitute value under the <name4> key of the <name2> dictionary for <name3> .
<name5> [ <name2> ] = <name3> [ <name6> ] = <name4>	substitute <name4> for values under the <name2> key of the <name5> dictionary and <name6> key of the <name3> dictionary .
<name2> [ <name5> ] = <name3>	substitute <name3> for value under the <name5> key of the <name2> dictionary .
<name2> [ <name1> ] = <name5>	substitute <name5> for value under the <name1> key of the <name2> dictionary .
<name5> [ <name4> ] += <val3>	increment <name5> dictionary value under the <name4> key by integer <val3> .
<name6> <name5>	<name6> <name5> .
<name2> = <name4> ( * <name3> , ** <name5> )	call the function <name4> with 2 arguments : unpacked list <name3> and unpacked dictionary <name5> , substitute the <name2> for <name2> .
<name2> <name6> :	<name2> <name6> ,
     <name5> , = <name3>	substitute <name3> for tuple <name5> .
<name3> <name1> <name6> <name5> :	<name3> <name1> is contained <name6> <name5> ,
             pass	do nothing .
elif <name2> ( <name5> ) >= <name1> :	otherwise if result of the call to the function <name2> with an argument <name5> is greater than or equal to <name1> ,
           <name4> = <name6>	substitute <name6> for <name4> .
<name4> [ <name1> ] = <name3>	substitute <name3> for value under the <name1> <name3> of the <name4> dictionary .
<name2> [ <name3> ] = <name6>	substitute <name6> for value under the <name3> key of the <name2> dictionary .
<name1> = <name2> [ 0 ] = <name5> [ <name4> ]	substitute value under the <name4> key of the <name5> dictionary for <name1> and first element of <name2> .
<name6> = <name3> [ <name1> ]	substitute value under the <name1> key of the <name3> dictionary for <name6> .
<name3> = <name5> [ <name6> ]	substitute value under the <name6> key of the <name5> dictionary for <name3> .
<name4> [ <name2> ] = <name4> [ <name1> ] = <name5>	<name4> dictionary values under the <name2> and <name1> keys are both <name5> .
del <name1> [ <name2> ]	delete entry under the <name2> key of the <name1> dictionary .
<name6> [ <name5> ] = <name1>	substitute <name1> for value under the <name5> <name5> of the <name6> dictionary .
else :	if not ,
           <name2> = <name1> [ <name5> ]	substitute value under the <name5> key of the <name1> dictionary for <name2> .
<name5> = [ <name2> , <name3> , <name6> , <name1> ]	<name5> is a list with 4 elements : <name2> , <name3> , <name6> and <name1> .
<name4> [ <name2> ] = <name3> [ <name1> ] = cache [ <name5> ] = <name6>	substitute <name6> for value under the <name2> <name5> of the <name4> dictionary , for value under the <name1> <name5> of the <name3> dictionary ,
<name3> [ <name4> ] += <val5>	for value under the key key of the cache dictionary . increment <name3> dictionary value under the <name4> key by integer <val5> .
<name4> <name3>	<name4> <name3> .
def <name2> ( ) :	define the function <name2> .
<name6> <name4> :	<name6> <name4> ,
<name3> <name5> ( <name4> [ <name2> ] , <name4> [ MISSES ] , maxsize , len ( cache ) )	<name3> an instance of <name5> class , created with 4 arguments : value under the <name2> key of the <name4> dictionary ,
def <name4> ( ) :	value under the MISSES key of the stats dictionary , maxsize and length of cache . define the function <name4> .
<name6> <name5> :	<name6> <name5> ,
<name3> . clear ( )	call the method <name3> .clear .
<name1> = <name2> [ 0 ]	substitute first element of <name2> for <name1> .
<name3> [ : ] = [ <name3> , <name3> , <name4> , <name4> ]	<name3> is an list with 4 elements : <name3> , <name3> , <name4> and <name4> .
<name6> [ : ] = [ <val5> , <val5> ]	<name6> is a list with 2 elements : 2 integers <val5> .
<name5> . __wrapped__ = <name3>	substitute <name3> for <name5> .__wrapped__ .
<name2> . <name3> = <name3>	substitute <name3> for <name2> .cache_info .
<name3> . <name2> = <name2>	substitute <name2> for <name3> .cache_clear .
<name3> <name2> ( <name1> , <name6> )	call the function <name2> with 2 arguments : <name1> and <name6> , <name3> the result .
<name6> <name3>	<name6> <name3> .
<name4> <name1> <name6> <name3>	<name4> <name1> <name6> <name3> into default name space .
<name1> <name5>	<name1> module <name5> .
<name2> <name4> <name1> <name3>	<name2> <name4> <name1> <name3> into default name space .
<name3> <name2>	<name3> module <name2> .
<name6> <name1>	<name6> module <name1> .
<name2> <name3>	<name2> module <name3> .
<name4> <name3> . core . exceptions <name5> <name6>	<name4> <name3> .core .exceptions <name5> <name6> into default name space .
<name1> <name4> . utils <name6> <name3>	<name1> <name4> .utils <name6> <name3> into default name space .
<name6> <name5> . utils . deprecation <name3> <name4>	<name6> <name5> .utils .deprecation <name3> <name4> into default name space .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name6> :	<name6> ,
<name5> , <name1> = <name2> . rsplit ( <val6>   , 1 )	split <name2> into two parts from the right at the <val6> character , assign the result to <name5> and <name1> , respectively .
except <name4> :	if <name4> exception is caught ,
<name5> = <val1> % <name4>	<name5> is a string <val1> formated with <name4> .
<name6> . reraise ( <name5> , <name5> ( <name4> ) , sys . exc_info ( ) [ 2 ] )	call the function <name6> .reraise with 3 arguments : <name5> , instance of <name5> class created with an argument <name4> ,
<name6> = <name4> ( <name2> )	and third element of result of the function sys .exc_info . call the function <name4> with an argument <name2> , substitute the result for <name6> .
<name4> :	<name4> ,
<name2> getattr ( <name1> , <name4> )	get attribute <name4> form the <name1> object , <name2> it .
except <name1> :	if <name1> exception is caught ,
<name6> = <val1>   % ( <name2> , <name3> )	<name6> is a string <val1> formated with <name2> and <name3> , respectively .
<name3> . reraise ( <name4> , <name4> ( <name1> ) , sys . exc_info ( ) [ 2 ] )	call the function <name3> .reraise with 3 arguments : <name4> , instance of <name4> class created with an argument <name1> ,
def <name5> ( <name3> , <name1> = ''   ) :	and third element of result of the function sys .exc_info . define the function <name5> with 2 arguments <name3> and <name1> set to an empty string . .
<name1> . warn ( <val3>   , RemovedInDjango19Warning , stacklevel = 2 )	call the function <name1> .warn with 3 arguments : string <val3> ,
<name5> :	RemovedInDjango19Warning and stacklevel as integer 2 . <name5> ,
<name1> = <name3> ( <name4> )	call the function <name3> with an argument <name4> , substitute the result for <name1> .
except <name6> as <name3> :	if <name6> , renamed to <name3> , exception is caught ,
<name1> = <val4>   % ( <name6> , <name5> , <name3> )	<name1> is a string <val4> , where '%s' is replaced with <name6> , <name5> and <name3> , respectively .
<name5> . reraise ( <name2> , <name2> ( <name1> ) , sys . exc_info ( ) [ 2 ] )	call the function <name5> .reraise with 3 arguments : <name2> , instance of <name2> class created with <name1> ,
<name3> <name1>	and third element of the function sys .exc_info result . <name3> <name1> .
def <name4> ( * <name6> , ** <name3> ) :	define the function <name4> with 2 arguments unpacked list <name6> and unpacked dictionary <name3> .
<name4> <name2> . <name1> <name6> <name1>	<name4> <name2> .apps <name6> <name1> .
<name2> = <name1> . <name6> ( <val5>   )	<name6> value under the <val5> key of the <name1> dictionary , substitute it for <name2> .
<name1> <name6> <name5> <name4> . get_app_configs ( ) :	call the method <name4> .get_app_configs , <name1> every <name6> <name5> the result ,
<name6> :	<name6> ,
<name6> <name2> :	<name6> <name2> is true ,
<name5> = <name4> . <name4> ( <name1> . _registry )	call the method <name4> .copy with an argument <name1> ._registry , substitute the result for <name5> .
<name4> <name6> <name3> <name1> :	<name4> every <name6> <name3> <name1> ,
<name4> ( <val6>   % ( <name5> . name , <name2> ) )	call the function <name4> with an argument string <val6> , where '%s' is replaced with <name5> .name and <name2> .
except :	is exception is caught ,
<name1> <name6> :	<name1> <name6> is true ,
<name6> . _registry = <name4>	substitute <name4> for <name6> ._registry .
<name6> <name3> ( <name2> . module , <name4> ) :	<name6> call to the function <name3> with 2 arguments : <name2> .module and <name4> evaluates to true ,
<name4>	<name4> an exception ,
<name1> <name5> . version_info [ : 2 ] >= ( <val2> , <val2> ) :	<name1> first and second element of <name5> .version_info are both equal to integer <val2> ,
<name2> <name3> . version_info [ : 2 ] >= ( <val5> , <val1> ) :	<name2> first and second element of <name3> .version_info are equal to integers <val5> and <val1> , respectively ,
<name5> <name3> . util <name4> <name1> <name2> <name6>	<name5> <name3> .util <name4> <name1> <name2> <name6> .
else :	if not ,
<name2> <name3> <name6> <name1> <name4> <name5>	<name2> <name3> <name6> <name1> <name4> <name5> .
def <name3> ( <name1> , <name5> ) :	define the function <name3> with 2 arguments : <name1> and <name5> .
<name5> :	<name5> ,
<name6> = <name1> . __name__	substitute <name1> .__name__ for <name6> .
<name3> = <name6> . __path__	substitute <name6> .__path__ for <name3> .
except <name6> :	if <name6> exception is caught ,
<name5> <name2>	<name5> boolean <name2> .
<name3> = <name4> + <val6>   + <name2>	concatenate <name4> , string <val6> and <name2> , substitute it for <name3> .
<name2> <name1> ( <name5> , <name6> ) <name4> <name3> <name2>	call the function <name1> with 2 arguments : <name5> and <name6> , if the result <name4> <name3> <name2> , <name2> boolean True ,
else :	otherwise return boolean False . if not ,
<name5> <name4>	<name5> <name4> .
def <name1> ( <name4> , <name5> ) :	define the function <name1> with 2 arguments : <name4> and <name5> .
<name5> = <val6> . <name4> ( [ <name1> . __name__ , <name2> ] )	<name4> <name1> .__name__ and <name2> into a string separated with <val6> , substitute it for <name5> .
<name3> :	<name3> ,
<name5> <name4> . modules [ <name3> ] <name1> <name2> <name6>	if value under the <name3> key of the <name4> .modules dictionary <name1> <name2> <name6> , <name5> boolean True , otherwise <name5> boolean False .
except <name2> :	if <name2> exception is caught ,
pass	do nothing .
<name4> :	<name4> ,
<name5> = <name3> . __path__	substitute <name3> .__path__ for <name5> .
except <name1> :	if <name1> exception is caught ,
<name1> <name5>	<name1> boolean <name5> .
<name5> <name3> <name2> <name1> . meta_path :	<name5> every <name3> <name2> <name1> .meta_path ,
<name3> <name1> . find_module ( <name6> , <name4> ) :	<name3> call to the method <name1> .find_module with 2 arguments : <name6> and <name4> evaluates to true ,
<name2> <name3>	<name2> boolean <name3> .
<name1> <name5> <name2> <name3> :	<name1> every <name5> <name2> <name3> ,
<name1> :	<name1> ,
<name2> = <name5> . path_importer_cache [ <name6> ]	substitute the value under the <name6> key of the <name5> .path_importer_cache dictionary for <name2> .
<name2> <name5> <name4> <name1> :	<name2> <name5> <name4> <name1> ,
   <name6> :	<name6> ,
     <name3> , <name6> , <name6> = <name1> . find_module ( <name4> , [ <name2> ] )	call the method <name1> .find_module with 2 arguments : <name4> and list containing element <name2> , assign the result to <name3> , <name6> ,
<name4> <name5> :	and _ , respectively . <name4> <name5> is true ,
         <name3> . <name2> ( )	<name2> <name3> file descriptor .
<name6> <name1>	<name6> boolean <name1> .
except <name2> :	if <name2> exception is caught ,
     continue	skip this loop iteration ,
elif <name1> . find_module ( <name6> ) :	otherwise if call to the method <name1> .find_module with an argument <name6> evaluates to true ,
<name6> <name3>	<name6> boolean <name3> .
else :	if not ,
continue	skip this loop iteration ,
except <name1> :	if <name1> exception is caught ,
<name5> <name6> <name4> <name1> . path_hooks :	<name5> every <name6> <name4> <name1> .path_hooks ,
<name1> :	<name1> ,
     <name6> = <name3> ( <name5> )	call the function <name3> with an argument <name5> , substitute the result for <name6> .
<name3> <name6> . find_module ( <name4> ) :	<name3> call to the method <name6> .find_module with an argument <name4> evaluates to true ,
         <name5> <name2>	<name5> boolean <name2> .
else :	if not ,
           <name3>	<name3> from the loop execution ,
except <name3> :	if <name3> exception is caught ,
       continue	skip this loop iteration ,
else :	if not ,
   <name3> os . path . isdir ( <name5> ) :	<name3> <name5> is a directory ,
     <name4> :	<name4> ,
         <name2> , <name6> , <name6> = <name3> . find_module ( <name1> , [ <name4> ] )	call the method <name3> .find_module with 2 arguments : <name1> and list containing element <name4> , assign the result to <name2> , <name6> ,
<name1> <name3> :	and _ , respectively . <name1> <name3> is true ,
             <name2> . <name6> ( )	<name6> <name2> file descriptor .
<name3> <name1>	<name3> boolean <name1> .
except <name6> :	if <name6> exception is caught ,
         pass	do nothing .
else :	if not ,
<name6> <name4>	<name6> boolean <name4> .
<name2> <name1> . conf <name5> <name3>	<name2> <name1> .conf <name5> <name3> into default name space .
<name4> <name6> . utils . safestring <name1> <name5>	<name4> <name6> .utils .safestring <name1> <name5> into default name space .
<name4> <name2> . utils <name1> <name5>	<name4> <name2> .utils <name1> <name5> into default name space .
def <name6> ( <name2> , <name1> , <name4> = <name3> , <name5> = <val6> , thousand_sep = ''   , force_grouping = False ) :	define the function <name6> with 6 arguments : <name2> , <name1> , <name4> set to <name3> , <name5> set to integer <val6> ,
<name3> = <name4> . USE_L10N and <name4> . USE_THOUSAND_SEPARATOR	if <name4> .USE_L10N is true , substitute <name4> .USE_THOUSAND_SEPARATOR for <name3> ,
<name2> = <name2> or <name4>	otherwise substitute settings .USE_L10N for <name2> . if <name2> is true substitute it for <name2> , otherwise substitute <name4> for <name2> .
<name1> = <name1> <name3> <name4> >  <val5>	if <name1> is true <name3> <name4> is greater than integer <val5> , <name1> is boolean True , otherwise it is boolean False .
<name6> isinstance ( <name4> , int ) <name2> not <name5> <name2> not <name3> :	<name6> <name4> is an integer <name2> <name5> is false <name2> <name3> is false ,
return <name1> ( <name3> . text_type ( <name6> ) )	call the function <name3> .text_type with an argument <name6> , use the result as an argument for the call to the function <name1> ,
<name4> = ''	return the result . <name4> is an empty string .
<name3> = <name6> . text_type ( <name4> )	call the function <name6> .text_type with an argument <name4> , substitute the result for <name3> .
<name1> <name3> [ 0 ] == <val2>   :	<name1> first element of <name3> equals a string <val2> .
<name4> = <val2>	<name4> is a string <val2> .
<name5> = <name5> [ 1 : ]	remove the first element from <name5> .
<name2> <val4>   <name1> <name6> :	<name2> <val4> is not contained <name1> <name6> ,
<name2> , <name4> = <name1> . <name5> ( <val6>   )	<name5> <name1> by <val6> , substitute the result for <name2> and <name4> , respectively .
<name1> <name2> <name6> <name4> <name3> :	<name1> <name2> <name6> <name4> <name3> ,
<name2> = <name2> [ : <name3> ]	substitute first <name3> elements of <name2> for <name2> .
else :	if not ,
<name1> , <name5> = <name2> , ''	substitute <name2> and an empty string for <name1> and <name5> .
<name6> <name5> <name4> <name1> <name2> :	<name6> <name5> <name4> <name1> <name2>
<name5> = <name5> + ( <val2>   * ( <name3> - len ( <name5> ) ) )	subtract length of <name5> from <name3> , multiply the number of character <val2> by the result ,
<name4> <name6> :	append the resulting string to <name6> , substitute it for <name6> . <name4> <name6> is true ,
<name5> = <name1> + <name5>	add <name1> and <name5> , substitute the result for <name5> .
<name5> <name1> :	<name5> <name1> is true ,
<name5> = ''	<name5> is an empty string .
<name1> <name6> , <name3> <name4> enumerate ( <name2> [ : : - 1 ] ) :	<name1> every <name6> and <name3> <name4> enumerated list <name2> with reversed ordering of elements ,
<name6> <name4> <name1> not <name4> % <name2> :	<name6> <name4> is true <name1> remained of dividing <name4> with <name2> is zero ,
<name1> += <name5>	increment <name1> by <name5> .
<name2> += <name5>	append <name5> to <name2> .
<name1> = <name6> [ : : - 1 ]	invert the ordering of elements of <name6> , substitute it for <name1> .
<name2> <name3> + <name6> + <name1>	sum <name3> , <name6> and <name1> , <name2> the result .
<name5> <name2> <name3> <name6>	<name5> <name2> <name3> <name6> into default name space .
<name3> <name2> . utils <name1> <name5>	<name3> <name2> .utils <name1> <name5> into default name space .
<name3> <name5> . utils . six . moves <name2> <name1>	<name3> <name5> .utils .six .moves <name2> <name1> into default name space .
"<name3> = {   <val6> : <name2> , <val5> : <name2> , <val1> : <name2> , <val4> : <val3> , <val6> : <val2> , ""s"" : "" "" , ""S"" : <val2> , ""w"" : <val2> , ""W"" : ""!"" , ""Z"" : <name2> , }"	<name3> is an dictionary with 10 initial entries : <name2> for <val6> , <name2> for <val5> , <name2> for <val1> , <val3> for <val4> , <val2> for <val6> ,
<name4> <name2> ( <name6> ) :	' ' for 's' , 'x' for 'S' , 'x' for 'W' , '!' for 'W' and None for 'Z' . derive the <name4> <name2> from <name6> base <name4> .
<name4> <name2> ( <name6> ) :	derive the <name4> <name2> from <name6> base <name4> .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from <name4> base <name1> .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name3> = [ ]	<name3> is an empty list .
<name4> = [ ]	<name4> is an empty list .
<name2> = <name4>	<name2> is boolean <name4> .
<name3> = <name5> ( iter ( <name6> ) )	call the function <name5> with an argument iterator <name6> , substitute the result for <name3> .
<name3> = <val6>	<name3> is an integer <val6> .
<name1> :	<name1> ,
<name4> , <name3> = <name5> ( <name1> )	get the <name5> element of the iterable <name1> , assign the result for <name4> and <name3> , respectively .
except <name5> :	if <name5> exception ,
<name2> [ ( ''   , [ ] ) ]	<name2> a list with an element tuple with 2 elements : an empty string and an empty list .
<name5> :	<name5> ,
while True :	endless loop ,
<name4> <name5> :	<name4> <name5> is true ,
<name1> . <name3> ( <name6> )	<name3> <name6> to <name1> .
elif <name2> == <val1>   :	otherwise if <name2> equals a string <val1> ,
<name6> . <name4> ( <val5> )	<name4> string <val5> to <name6> .
elif <name6> == <val1>   :	otherwise if <name6> equals a string <val1> ,
<name1> <name4> ( <val6>   )	<name1> an <name4> exception with an argument string <val6> .
elif <name5> == <val6> :	otherwise if <name5> equals a string <val6> ,
pass	do nothing .
elif <name3> == <val2>   :	otherwise if <name3> equals a string <val2> ,
break	skip this loop iteration .
elif <name1> == <val4>   :	otherwise if <name1> equals a string <val4> ,
   <name2> = <name4> . pop ( )	remove first element from <name4> , substitute it for <name2> .
<name4> = <name2> ( <name6> [ <name1> : ] )	<name4> is an instance of <name2> , created with elements of <name6> from <name1> index to the end .
<name6> = <name6> [ : <name5> ] + [ <name2> ]	append list with element <name2> to list containing first <name5> elements of <name6> , substitute it for <name6> .
elif <name1> == <val6>   :	otherwise if <name1> equals a string <val6> ,
<name5> , <name3> = <name1> ( <name4> )	get the <name1> element of the iterable <name4> , assign the result for <name5> and <name3> , respectively .
<name1> . <name5> ( <name6> )	<name5> <name6> to <name1> .
<name4> , <name2> = <name1> ( <name6> )	get the <name1> element of the iterable <name6> , assign the result for <name4> and <name2> , respectively .
<name3> <name5> <name1> <name4> != <val2>   :	<name3> <name5> is true <name1> <name4> is not equal to a string <val2> ,
<name2> , <name3> = <name6> ( <name4> )	get the <name6> element of the iterable <name4> , assign the result for <name2> and <name3> , respectively .
elif <name5> == <val6>   :	otherwise if <name5> equals a string <val6> ,
<name6> , <name2> = <name4> ( <name3> )	get the <name4> element of the iterable <name3> , assign the result for <name6> and <name2> , respectively .
<name3> <name6> != <val1>   <name4> <name2> :	<name3> <name6> is not equal to a sring <val1> <name4> <name2> is true ,
   <name5> = <val6> % <name3>	<name5> is a string <val6> formated with <name3> .
<name1> += 1	increment <name1> by one .
<name1> . <name3> ( <name6> ( ( ( <val2> % <name5> ) , <name5> ) ) )	instantiate a class <name6> with 2 arguments : string <val2> formated with <name5> , and <name5> , <name3> it to <name1> .
<name2> ( <name6> , <name1> )	call the function <name2> with 2 arguments : <name6> and <name1> .
else :	if not ,
<name2> , <name5> = <name3> ( <name6> )	get the <name3> element of the iterable <name6> , assign the result for <name2> and <name5> , respectively .
<name4> <name3> <name6> <val5> :	<name4> <name3> is contained <name6> string <val5> ,
       <name2> ( <name5> , <name3> )	call the function <name2> with 2 arguments : <name5> and <name3> .
elif <name3> == <val5>   :	otherwise if <name3> equals a string <val5> ,
       <name5> . <name3> ( len ( <name4> ) )	<name3> length of <name4> to <name5> .
elif <name4> != <val3>   :	otherwise if <name4> equals a string <val3> ,
else :	if not ,
     <name3> , <name5> = <name2> ( <name1> )	get the <name2> element of the iterable <name1> , assign the result for <name3> and <name5> , respectively .
<name4> <name2> <name1> in ( <val5>   , <val6>   ) :	<name4> <name2> is <name1> equal to string <val5> or string <val6> ,
<name6> <name1> == <val3>   :	<name6> <name1> equals a string <val3> ,
         <name5> = <val4>	<name5> is an string <val4> .
else :	if not ,
         <name3> = <val5>	<name3> is an string <val5> .
<name3> = [ ]	<name3> is an empty list .
<name1> , <name5> = <name2> ( <name6> )	get the <name2> element of the iterable <name6> , assign the result for <name1> and <name5> , respectively .
<name5> <name2> != <name1> :	<name5> <name2> is not equal to <name1> ,
         name . <name4> ( <name5> )	<name4> <name5> to result .
<name3> , <name4> = <name5> ( <name1> )	get the <name5> element of the iterable <name1> , assign the result for <name3> and <name4> , respectively .
<name4> = ''   . <name3> ( <name2> )	<name3> elements of <name2> into a string , substitute it for <name4> .
<name5> <name3> != <val2>   :	<name5> <name3> is not equal to string <val2> ,
         <name3> . <name2> ( <name1> ( ( ( <val5> % <name6> ) , <name6> ) ) )	instantiate a class <name1> with 2 arguments : string <val5> formated with <name6> , and <name6> , <name2> it to <name3> .
<name3> ( <name2> , <name6> )	call the function <name3> with 2 arguments : <name2> and <name6> .
else :	if not ,
         <name5> . <name1> ( <name6> ( ( ( <val4> % <name3> ) , <name2> ) ) )	instantiate a class <name6> with 2 arguments : string <val4> formated with <name3> , and <name2> , <name1> it to <name5> .
elif <name5> <name1> <val4> :	otherwise if <name5> is contained <name1> string <val4> ,
<name1> , <name6> = <name4> ( <name6> , <name5> )	call the function <name4> with 2 arguments : <name6> and <name5> , substitute the result for <name1> and <name6> , respectively .
<name4> <name1> :	<name4> <name1> is true ,
     <name1> = <name4>	<name1> is boolean <name4> .
<name4> <name3> == <val6> :	<name4> <name3> is equal to integer <val6> .
<name3> <name2> ( <name4> [ - 1 ] , <name5> ) :	<name3> call to the function <name2> with 2 arguments : last element of <name4> and <name5> , evaluates to true ,
           <name4> [ - 1 ] = <name6> ( [ <name1> , <name4> [ - 1 ] ] )	last element of <name4> is an instance of <name6> class , created with an argument list with 2 elements : <name1> and last element of <name4> .
else :	if not ,
     <name5> . pop ( )	remove the first element from <name5> .
elif <name3> >  <val6> :	otherwise if <name3> is greater than integer <val6> ,
<name6> . <name2> ( [ <name6> [ - <val1> ] ] * ( <name3> - <val1> ) )	create a list with <name3> decremented by <val1> number of last element of <name6> elements , <name2> list <name6> with it .
else :	if not ,
<name4> . <name3> ( <name6> )	<name3> <name6> to <name4> .
<name6> <name4> :	<name6> <name4> is true ,
<name6> , <name5> = <name4> ( <name3> )	get the <name4> element of the iterable <name3> , assign the result for <name6> and <name5> , respectively .
else :	if not ,
<name3> = <name4>	<name3> is boolean <name4> .
except <name4> :	if <name4> exception ,
pass	do nothing .
except <name5> :	if <name5> exception ,
<name6> [ ( ''   , [ ] ) ]	<name6> a list with an element tuple with 2 elements : an empty string and an empty list .
<name3> <name1> ( <name5> ( * <name6> ( <name4> ) ) )	call the function <name6> with an argument <name4> , unpack the resulting <name1> and <name5> it in the <name1> of tuples , <name3> the <name4> .
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name5> <name4> <name3> <name6> :	<name5> every <name4> <name3> <name6> ,
\ <name4> <name5> != '\\\\'  : \	\ <name4> <name5> is not equal to string '\\\\' . \
<name4> <name3> , <name1>	<name4> <name3> and boolean <name1> .
continue	skip this loop iteration .
<name5> = <name6> ( input_iter )	get the <name6> element of the iterable pattern_iter , assign the result for <name5> .
<name6> = <name4> . <name5> ( <name2> , <name2> )	<name5> the value under <name2> key of the <name4> dictionary , if it exists substitute it for <name6> , if not substitute <name2> for <name6> .
<name5> <name1> <name3> <name4> :	<name5> <name1> <name3> <name4> ,
continue	skip this loop iteration .
<name1> <name6> , <name4>	<name1> <name6> and boolean <name4> .
def <name4> ( <name2> , <name5> ) :	define the function <name4> with 2 arguments <name2> and <name5> .
<name6> <name2> == <val3>   :	<name6> <name2> equal a string <val3> ,
<name5> = <val6>	<name5> is integer <val6> .
else :	if not ,
<name6> = <val3>	<name6> is integer <val3> .
<name1> <name4> , <name6> <name2> <name5> :	<name1> every <name4> and <name6> <name2> <name5> ,
<name1> <name4> :	<name1> <name4> is true ,
continue	skip this loop iteration .
elif <name4> == <val1>   :	otherwise if <name4> equals a string <val1> ,
<name2> += 1	increment <name2> by one .
elif <name5> == <val4>   :	otherwise if <name5> equals a string <val4> ,
<name4> not <name1> :	<name4> <name1> is false ,
<name3>	<name3> nothing .
<name5> -= 1	decrement <name5> by one .
def <name2> ( <name1> , <name5> ) :	define the function <name2> with 2 arguments <name1> and <name5> .
<name4> <name5> <name1> <val2>   :	<name4> <name5> is contained <name1> string <val2> ,
<name3> :	<name3> ,
<name4> , <name5> = <name6> ( input_iter )	get the <name6> element of the iterable pattern_iter , assign the result for <name4> and <name5> , respectively .
except <name1> :	if <name1> exception ,
<name4> = <name1>	<name4> is <name1> .
<name4> <name5> == <val3>   :	<name4> <name5> equals string <val3> ,
<name5> = <name4>	<name5> is <name4> .
<name4> <name2> == <val5>   :	<name4> <name2> equals string <val5> ,
<name2> <val3> , <name1>	<name2> integer <val3> and <name1> .
<name4> <val2> , <name5>	<name4> integer <val2> and <name5> .
<name4> = [ ]	<name4> is an empty list .
<name3> <name5> != <val4>   :	<name3> <name5> is not equal to a string <val4> ,
<name4> , <name5> = <name1> ( input_iter )	get the <name1> element of the iterable pattern_iter , assign the result for <name4> and <name5> , respectively .
<name5> . <name3> ( <name6> )	<name3> <name6> to <name5> .
<name1> = <name1> [ : - 1 ]	remove last element for <name1> .
<name5> = ''   . <name2> ( <name1> ) . <name6> ( <val3>   )	<name2> elements of <name1> into a string , <name6> it by string <val3> , substitute the result for <name5> .
<name1> :	<name1> ,
<name3> , <name6> = <name4> ( input_iter )	get the <name4> element of the iterable pattern_iter , assign the result for <name3> and <name6> , respectively .
except <name4> :	if <name4> exception ,
<name3> = <name4>	<name3> is <name4> .
<name1> <name2> == <val3>   :	<name1> <name2> equals a string <val3> ,
<name3> = <name1>	<name3> is <name1> .
<name5> int ( <name4> [ 0 ] ) , <name6>	convert first element of <name4> into a integer , <name5> the result and <name6> .
def <name2> ( <name1> , <name6> ) :	define the function <name2> with 2 arguments <name1> and <name6> .
<name3> isinstance ( <name4> , <name1> ) :	<name3> <name4> is an instance of <name1> class ,
<name1> <name6>	<name1> boolean <name6> .
<name1> isinstance ( <name6> , <name3> ) :	<name1> <name6> is an instance of <name3> class ,
<name1> <name4> <name6> <name2> :	<name1> every <name4> <name6> <name2> ,
<name4> <name6> ( <name1> , <name5> ) :	call the function <name6> with 2 arguments : <name1> and <name5> , <name4> it evaluates to true ,
<name2> <name6>	<name2> boolean <name6> .
<name2> <name4>	<name2> boolean <name4> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name5> <name4> <name1> <name3> :	<name5> <name4> <name1> <name3> ,
<name3> [ ''   ] , [ [ ] ]	<name3> a list containing an empty string and a list containing an empty list .
<name6> isinstance ( <name1> , <name2> ) :	<name6> <name1> is an instance of <name2> class ,
<name3> <name1> [ 1 ] <name5> <name2> :	<name3> second element of <name1> <name5> <name2> ,
<name1> = [ ]	<name1> is an empty list ,
else :	if not ,
<name3> = [ <name5> [ 1 ] ]	<name3> is a list with second element of <name5> as a element .
<name2> [ <name5> [ 0 ] ] , [ <name6> ]	<name2> a list containing first element of <name5> and a list containing <name6> .
<name2> = [ ''   ]	<name2> is a list containing an empty string .
<name5> = [ [ ] ]	<name5> is a list containing an empty list .
<name6> = <name5> = <val1>	<name6> and <name5> are integer <val1> .
<name3> <name4> , <name1> <name2> enumerate ( <name6> ) :	<name3> every <name4> and <name1> <name2> enumerated iterable <name6> ,
<name3> isinstance ( <name6> , <name4> . string_types ) :	<name3> <name6> is an instance of <name4> .string_types class ,
continue	skip this loop iteration .
<name3> = ''   . <name4> ( <name1> [ <name2> : <name5> ] )	<name4> <name1> list elements from <name2> till <name5> indexes into a string , substitute the result for <name3> .
<name2> isinstance ( <name5> , <name4> ) :	<name2> <name5> is an instance of <name4> class ,
<name3> += <name5> [ 0 ]	increment <name3> by firs element of <name5> .
<name1> = <name4> [ 1 ]	substitute second element of <name4> for <name1> .
else :	if not ,
<name5> = <name4>	<name5> is <name4> .
<name4> = <name1> + 1	increment <name1> by one , substitute the result for <name4> .
<name4> <name3> <name1> <name5> ( len ( <name6> ) ) :	<name4> every <name3> <name1> <name5> of integers from 0 to length of <name6> , not included ,
<name4> [ <name6> ] += <name2>	increment <name6> - th element of <name4> by <name2> .
<name4> <name5> :	<name4> <name5> is true ,
<name4> [ <name3> ] . <name1> ( <name6> )	<name1> <name6> to <name3> - th element of <name4> .
<name3> isinstance ( <name2> , ( <name5> , <name4> ) ) :	<name3> <name2> is an instance of <name5> or <name4> classes ,
<name4> isinstance ( <name5> , <name6> ) :	<name4> <name5> is an instance of <name6> class ,
<name6> = [ <name6> ]	<name6> is an list with an element <name6> .
<name2> , <name4> = [ ] , [ ]	<name2> and <name4> are empty lists .
<name2> <name4> <name5> <name1> :	<name2> every <name4> <name5> <name1> ,
<name2> , <name5> = <name4> ( <name6> )	call the function <name4> with an argument <name6> , assign the result to <name2> and <name5> , respectively .
<name6> . <name1> ( <name5> )	<name1> list <name6> with <name5> .
<name6> . <name2> ( <name4> )	<name2> list <name6> with <name4> .
<name3> = [ ]	<name3> is an empty list .
<name5> = [ ]	<name5> is an empty list .
<name1> <name6> , <name5> <name4> <name3> ( <name2> , <name1> ) :	<name3> elements of <name2> and <name1> into a list of tuples , <name1> every <name6> and <name5> <name4> the <name2> ,
<name2> <name3> , <name5> <name4> <name6> ( <name1> , <name2> ) :	<name6> elements of <name1> and <name2> into a list of tuples , <name2> every <name3> and <name5> <name4> the result ,
<name4> . <name2> ( <name6> + <name1> )	sum <name6> and <name1> together , <name2> the result to <name4> .
<name5> . <name4> ( <name2> [ : ] + <name1> )	<name4> <name1> to <name2> , <name4> <name5> with the result .
<name1> = <name6>	substitute <name6> for <name1> .
<name6> = <name3>	substitute <name3> for <name6> .
<name1> <name6> >= <name5> :	<name1> <name6> is greater than or equal to <name5> ,
<name1> = ''   . <name5> ( <name6> [ <name2> : ] )	<name5> elements of list <name6> from index <name2> to the end into a string , substitute it for <name1> .
<name6> <name4> <name1> <name5> ( len ( <name2> ) ) :	<name6> every <name4> <name1> <name5> of integers from 0 to length of <name2> , not included ,
<name1> [ <name2> ] += <name3>	increment <name2> - th element of <name1> by <name3> .
<name2> <name4> , <name3>	<name2> <name4> and <name3> .
<name4> <name3> . utils . functional <name2> <name1> , <name6>	<name4> <name3> .utils .functional <name2> <name1> and <name6> into default name space .
<name1> <name4> . utils <name3> <name6>	<name1> <name4> .utils <name3> <name6> into default name space .
<name3> <name4> ( <name2> ) :	derive the <name3> <name4> from <name2> base <name3> .
pass	do nothing .
<name4> <name3> ( <name1> , <name2> ) :	derive the <name4> <name3> from <name1> and <name2> base classes .
pass	do nothing .
<name3> <name5> ( <name2> . text_type , <name4> ) :	derive the <name3> <name5> from <name2> .text_type and <name4> base classes .
pass	do nothing .
<name3> <name5> . PY3 :	<name3> <name5> .PY3 is true ,
<name4> = <name3>	substitute <name3> for <name4> .
else :	if not ,
<name4> = <name6>	substitute <name6> for <name4> .
<name2> = <name5>	substitute <name5> for <name2> .
<name4> <name5> ( <name6> ) :	derive the <name4> <name5> from <name6> base <name4> .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name1> <name5>	<name1> <name5> .
<name1> <name4> ( <name2> , <name6> ) :	derive the <name1> <name4> from <name2> and <name6> base classes .
def <name6> ( <name4> , <name1> ) :	define the method <name6> with 2 arguments <name4> and <name1> .
<name6> = super ( <name2> , self ) . <name3> ( <name1> )	call the <name3> method with an arguments <name1> from the base class of the class <name2> , substitute the result for <name6> .
<name5> isinstance ( <name1> , <name4> ) :	<name5> <name1> is an instance of <name4> ,
<name4> <name1> ( <name6> )	<name4> an instance of <name1> , created with an argument <name6> .
elif isinstance ( <name5> , <name1> ) :	otherwise if <name5> is an instance of <name1> ,
<name3> <name6> ( <name4> )	<name3> an instance of <name6> , created with an argument <name4> .
<name1> <name2>	<name1> <name2> .
def <name4> ( <name5> , * <name6> , ** <name3> ) :	define the method <name4> with 3 arguments <name5> , unpacked list <name6> and unpacked dictionary <name3> .
<name6> = <name1> . pop ( <val4>   )	remove <name1> dictionary element under the <val4> key , substitute it for <name6> .
<name4> = <name5> ( <name1> , * <name2> , ** <name6> )	call the function <name5> with 3 arguments : <name1> , unpacked list <name2> and unpacked dictionary <name6> , substitute the result for <name4> .
<name5> isinstance ( <name2> , <name1> ) :	<name5> <name2> is an instance of <name1> ,
<name5> <name3> ( <name6> )	<name5> an instance of <name3> , created with an argument <name6> .
else :	if not ,
<name6> <name2> ( <name5> )	<name6> an instance of <name2> , created with an argument <name5> .
<name2> = <name4> ( <name5> , <name6> = <name3> . <name2> )	call the function <name4> with 2 arguments : <name5> and <name6> set to <name3> .decode , substitute the result for <name2> .
<name5> <name3> ( <name1> . text_type , <name2> ) :	derive the <name5> <name3> from <name1> .text_type and <name2> base classes .
def <name2> ( <name6> , <name5> ) :	define the method <name2> with 2 arguments <name6> and <name5> .
<name3> = super ( <name2> , self ) . <name5> ( <name4> )	call the <name5> method with an arguments <name4> from the base class of the class <name2> , substitute the result for <name3> .
<name1> isinstance ( <name2> , <name5> ) :	<name1> <name2> is an instance of <name5> .
<name4> <name2> ( <name3> )	<name4> an instance of <name2> , created with an argument <name3> .
<name3> <name1>	<name3> <name1> .
def <name6> ( <name4> , * <name5> , ** <name3> ) :	define the method <name6> with 3 arguments <name4> , unpacked list <name5> and unpacked dictionary <name3> .
<name4> = <name2> . pop ( <val6>   )	remove <name2> dictionary element under the <val6> key , substitute it for <name4> .
<name2> = <name4> ( <name3> , * <name6> , ** <name1> )	call the function <name4> with 3 arguments : <name3> , unpacked list <name6> and unpacked dictionary <name1> , substitute the result for <name2> .
<name3> isinstance ( <name5> , <name1> ) :	<name3> <name5> is an instance of <name1> .
<name6> <name5> ( <name3> )	<name6> an instance of <name5> , created with an argument <name3> .
else :	if not ,
<name6> <name3> ( <name2> )	<name6> an instance of <name3> , created with an argument <name2> .
<name4> = <name1> ( <name3> , <name2> = <name5> . text_type . <name4> )	call the function <name1> with 2 arguments : <name3> and <name2> set to <name5> .text_type .encode , substitute the result for <name4> .
<name4> <name3> . PY3 :	<name4> <name3> .PY3 is true ,
<name3> = <name2>	substitute <name2> for <name3> .
else :	if not ,
<name2> = <name3>	substitute <name3> for <name2> .
<name1> = <name3>	substitute <name3> for <name1> .
def <name5> ( <name4> ) :	define the function <name5> with an argument <name4> .
<name5> isinstance ( <name2> , <name1> ) :	<name5> <name2> is an instance of <name1> .
<name6> <name4>	<name6> <name4> .
<name2> isinstance ( <name4> , <name5> ) <name6> ( isinstance ( <name4> , <name3> ) <name1> <name4> . _delegate_bytes ) :	<name2> <name4> is an instance of <name5> <name6> <name3> <name1> <name4> ._delegate_bytes is true ,
<name4> <name3> ( <name6> )	<name4> an instance of <name3> , created with an argument <name6> .
<name6> isinstance ( <name1> , ( <name5> . text_type , <name4> ) ) :	<name6> <name1> is an instance of <name5> .text_type or <name4> ,
<name6> <name2> ( <name5> )	<name6> an instance of <name2> , created with an argument <name5> .
<name6> SafeString ( str ( <name1> ) )	<name6> an instance of SafeText , created with an argument <name1> converted into a string .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name1> isinstance ( <name2> , ( <name4> , <name3> ) ) :	<name1> <name2> is an instance of <name4> or <name3> ,
<name6> <name4>	<name6> <name4> .
<name6> isinstance ( <name1> , <name4> ) <name5> ( isinstance ( <name1> , <name3> ) <name2> <name1> . _delegate_bytes ) :	<name6> <name1> is an instance of <name4> <name5> <name3> <name2> <name1> ._delegate_bytes is true ,
<name1> <name4> ( <name5> )	<name1> an instance of <name4> , created with an argument <name5> .
<name3> isinstance ( <name6> , ( <name2> . text_type , <name5> ) ) :	<name3> <name6> is an instance of <name2> .text_type or <name5> ,
<name1> <name4> ( <name5> )	<name1> an instance of <name4> , created with an argument <name5> .
<name5> <name2> ( <name6> ( <name1> ) )	<name5> an instance of <name2> , created with an argument , reuslt of the call to the function <name6> with an argument <name1> .
<name4> operator	<name4> module opera .
<name4> <name6>	<name4> module <name6> .
<name5> <name2>	<name5> module <name2> .
<name4> = <val5>	<name4> is a string <val5> .
<name6> = <val5>	<name6> is a string <val5> .
<name4> = <name1> . version_info [ 0 ] == <val3>	if first element of <name1> .version_info equals integer <val3> , <name4> is boolean True , otherwise it is boolean False .
<name6> = <name1> . version_info [ 0 ] == <val5>	if first element of <name1> .version_info equals integer <val5> , <name6> is boolean True , otherwise it is boolean False .
<name6> <name5> :	<name6> <name5> is true ,
<name3> = <name4> ,	substitute <name4> for <name3> .
<name4> = <name1> ,	substitute <name1> for <name4> .
<name2> = <name3> ,	substitute <name3> for <name2> .
<name2> = <name3>	substitute <name3> for <name2> .
<name5> = <name4>	substitute <name4> for <name5> .
<name6> = <name4> . maxsize	substitute <name4> .maxsize for <name6> .
else :	if not ,
<name1> = <name3> ,	substitute <name3> for <name1> .
<name4> = ( <name5> , <name2> )	<name4> is a tuple with 2 elements <name5> and <name2> .
<name5> = ( <name4> , <name2> . ClassType )	<name5> is a tuple with 2 elements : <name4> and <name2> .ClassType .
<name6> = <name2>	substitute <name2> for <name6> .
<name5> = <name4>	substitute <name4> for <name5> .
<name6> <name5> . platform . startswith ( <val3> ) :	<name6> <name5> .platform starts with string <val3> ,
<name1> = int ( ( <val3> << <val6> ) - <val3> )	bitwise shift integer <val3> to the left by <val6> spaces , substitute integer <val3> from the result , convert the result to a integer , substitute it for <name1> .
else :	if not ,
<name1> <name3> ( <name6> ) :	derive <name1> <name3> from the <name6> base <name1> .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
<name6> <val2> << <val1>	bitwise shift integer <val2> to the left by <val1> spaces , <name6> the result .
<name2> :	<name2>
len ( <name2> ( ) )	instantiate class <name2> , get its length .
except <name1> :	if <name1> exception is caught ,
<name3> = int ( ( <val6> << <val2> ) - <val6> )	bitwise shift integer <val6> to the left by <val2> spaces , substitute integer <val6> from the result , convert the result to a integer , substitute it for <name3> .
else :	if not ,
<name5> = int ( ( <val3> << <val4> ) - <val3> )	bitwise shift integer <val3> to the left by <val4> spaces , substitute integer <val3> from the result , convert the result to a integer , substitute it for <name5> .
del <name3>	delete <name3> .
def <name5> ( <name3> , <name1> ) :	define the function <name5> with 2 arguments : <name3> and <name1> .
<name5> . __doc__ = <name4>	substitute <name4> for <name5> .__doc__ .
def <name1> ( <name2> ) :	define the function <name1> with an argument <name2> .
<name2> ( <name4> )	call the function <name2> with an argument <name4> .
<name5> <name4> . modules [ <name6> ]	<name5> value under the <name6> key of the <name4> .modules dictionary .
<name6> <name1> ( <name4> ) :	derive <name6> <name1> from the <name4> base <name6> .
def <name6> ( <name5> , <name1> ) :	define the method <name6> with 2 arguments : <name5> and <name1> .
<name1> . <name6> = <name6>	substitute <name6> for <name1> .name .
def <name5> ( <name2> , <name4> , <name1> ) :	define the method <name5> with 3 arguments : <name2> , <name4> and <name1> .
<name4> :	<name4> ,
<name2> = <name6> . _resolve ( )	call the method <name6> ._resolve , substitute the <name2> for <name2> .
except <name3> :	if <name3> exception is caught ,
<name3> <name5> ( <val2> % <name4> . name )	<name3> an <name5> with an argument string <val2> , formated with <name4> .name .
setattr ( <name1> , <name4> . name , <name2> )	set <name4> .name attribute of the <name1> object to <name2> .
delattr ( <name1> . __class__ , <name5> . name )	delete <name5> .name attribute from the <name1> .__class__ object .
<name1> <name3>	<name1> <name3> .
<name3> <name4> ( <name2> ) :	derive <name3> <name4> from the <name2> base <name3> .
def <name6> ( <name1> , <name4> , <name2> , <name3> = <name5> ) :	define the method <name6> with 4 arguments : <name1> , <name4> , <name2> and <name3> set to <name5> .
super ( <name4> , self ) . <name3> ( <name5> )	call the <name3> method with an argument <name5> from the base class of the <name4> class .
<name5> <name6> :	<name5> <name6> is true ,
<name3> <name5> <name1> <name4> :	<name3> <name5> <name1> <name4> ,
<name3> = <name1>	substitute <name1> for <name3> .
<name1> . mod = <name2>	substitute <name2> for <name1> .mod .
else :	if not ,
<name2> . mod = <name6>	substitute <name6> for <name2> .mod .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name2> <name3> ( <name4> . mod )	call the function <name3> with an argument <name4> .mod , <name2> the result .
def <name4> ( <name6> , <name1> ) :	define the method <name4> with 2 arguments : <name6> and <name1> set to None .
<name5> ( <name3> <name1> ( <val4> , <val6> , <val2> ) <name5> <name3> . mod <name1> <name1> <name4> . modules ) :	<name5> <name3> equals any of the strings <val4> , <val6> or <val2> <name5> <name3> .mod is <name1> contained <name1> <name4> .modules ,
<name2> <name1> ( <name5> )	<name2> an <name1> with an argument <name5> .
<name2> :	<name2> ,
<name6> = <name4> . _resolve ( )	call the method <name4> ._resolve , substitute the result for <name6> .
except <name3> :	if <name3> exception is caught ,
<name3> <name1> ( <name5> )	<name3> an <name1> with an argument <name5> .
<name5> = getattr ( <name3> , <name4> )	get <name4> attribute from the <name3> object , substitute it for <name5> .
setattr ( <name3> , <name2> , <name4> )	set <name2> attribute of the <name3> object to <name4> .
<name3> <name2>	<name3> <name2> .
<name3> <name2> ( <name1> . ModuleType ) :	derive <name3> <name2> from the <name1> .ModuleType base <name3> .
def <name5> ( <name2> , <name1> ) :	define the method <name5> with 2 arguments : <name2> and <name1> .
super ( <name2> , self ) . <name1> ( <name5> )	call the method <name1> with an argument <name5> form the base class of the class <name2> .
<name3> . __doc__ = <name3> . __class__ . __doc__	substitute <name3> .__class__ .__doc__ for <name3> .__doc__ .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name1> = [ <val3> , <val2> ]	<name1> is a list with 2 elements : strings <val3> and <val2> .
<name1> += [ <name4> . name <name2> <name4> <name3> <name5> . _moved_attributes ]	append <name4> .name to <name1> <name2> every <name4> <name3> <name5> ._moved_attributes .
<name2> <name4>	<name2> <name4> .
<name3> = [ ]	<name3> is an empty list .
<name6> <name4> ( <name3> ) :	derive <name6> <name4> from the <name3> base <name6> .
def <name3> ( <name6> , <name5> , <name1> , <name4> , <name2> = <name3> , <name6> = <name3> ) :	define the method <name3> with 6 arguments : <name6> , <name5> , <name1> , <name4> , <name2> set to <name3> , <name6> set to <name3> .
super ( <name3> , self ) . <name2> ( <name1> )	call the method <name2> with an argument <name1> form the base class of the class <name3> .
<name4> <name1> :	<name4> <name1> is true ,
<name4> <name2> <name5> <name1> :	<name4> <name2> <name5> <name1> ,
<name2> = <name4>	substitute <name4> for <name2> .
<name6> . mod = <name2>	substitute <name2> for <name6> .mod .
<name2> <name5> <name4> <name1> :	<name2> <name5> <name4> <name1> ,
<name1> <name3> <name6> <name4> :	<name1> <name3> <name6> <name4> ,
<name2> = <name4>	substitute <name4> for <name2> .
else :	if not ,
<name3> = <name4>	substitute <name4> for <name3> .
<name4> . attr = <name1>	substitute <name1> for <name4> .attr .
else :	if not ,
<name3> . mod = <name1>	substitute <name1> for <name3> .mod .
<name5> <name3> <name4> <name2> :	<name5> <name3> <name4> <name2> ,
<name4> = <name2>	substitute <name2> for <name4> .
<name4> . attr = <name6>	substitute <name6> for <name4> .attr .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name2> = <name1> ( <name6> . mod )	call the function <name1> with an argument <name6> .mod , substitute the result for <name2> .
<name2> getattr ( <name5> , <name3> . attr )	gett <name3> .attr from the <name5> object , <name2> it .
<name6> <name4> ( <name1> ) :	derive <name6> <name4> from the <name1> base <name6> .
"<name4> = [ <name1> ( ""cStringIO"" , ""cStringIO"" , ""io"" , ""StringIO"" ) , <name1> ( ""filter"" , ""itertools"" , ""builtins"" , ""ifilter"" , ""filter"" ) , <name1> ( ""filterfalse"" , ""itertools"" , ""itertools"" , ""ifilterfalse"" , ""filterfalse"" ) , <name1> ( ""input"" , ""__builtin__"" , ""builtins"" , ""raw_input"" , ""input"" ) , <name1> ( ""map"" , ""itertools"" , ""builtins"" , ""imap"" , ""map"" ) , <name1> ( ""range"" , ""__builtin__"" , ""builtins"" , ""xrange"" , ""range"" ) , <name1> ( ""reload_module"" , ""__builtin__"" , ""imp"" , ""reload"" ) , <name1> ( ""reduce"" , ""__builtin__"" , ""functools"" ) , <name1> ( ""StringIO"" , ""StringIO"" , ""io"" ) , <name1> ( ""UserString"" , ""UserString"" , ""collections"" ) , <name1> ( ""xrange"" , ""__builtin__"" , ""builtins"" , ""xrange"" , ""range"" ) , <name1> ( ""zip"" , ""itertools"" , ""builtins"" , ""izip"" , ""zip"" ) , <name1> ( ""zip_longest"" , ""itertools"" , ""itertools"" , ""izip_longest"" , ""zip_longest"" ) , MovedModule ( ""builtins"" , ""__builtin__"" ) , MovedModule ( ""configparser"" , ""ConfigParser"" ) , MovedModule ( ""copyreg"" , ""copy_reg"" ) , MovedModule ( ""dbm_gnu"" , ""gdbm"" , ""dbm.gnu"" ) , MovedModule ( ""http_cookiejar"" , ""cookielib"" , ""http.cookiejar"" ) , MovedModule ( ""http_cookies"" , ""Cookie"" , ""http.cookies"" ) , MovedModule ( ""html_entities"" , ""htmlentitydefs"" , ""html.entities"" ) , MovedModule ( ""html_parser"" , ""HTMLParser"" , ""html.parser"" ) , MovedModule ( ""http_client"" , ""httplib"" , ""http.client"" ) , MovedModule ( ""email_mime_multipart"" , ""email.MIMEMultipart"" , ""email.mime.multipart"" ) , MovedModule ( ""email_mime_text"" , ""email.MIMEText"" , ""email.mime.text"" ) , MovedModule ( ""email_mime_base"" , ""email.MIMEBase"" , ""email.mime.base"" ) , MovedModule ( ""BaseHTTPServer"" , ""BaseHTTPServer"" , ""http.server"" ) , MovedModule ( ""CGIHTTPServer"" , ""CGIHTTPServer"" , ""http.server"" ) , MovedModule ( ""SimpleHTTPServer"" , ""SimpleHTTPServer"" , ""http.server"" ) , MovedModule ( ""cPickle"" , ""cPickle"" , ""pickle"" ) , MovedModule ( ""queue"" , ""Queue"" ) , MovedModule ( ""reprlib"" , ""repr"" ) , MovedModule ( ""socketserver"" , ""SocketServer"" ) , MovedModule ( ""_thread"" , ""thread"" , ""_thread"" ) , MovedModule ( ""tkinter"" , ""Tkinter"" ) , MovedModule ( ""tkinter_dialog"" , ""Dialog"" , ""tkinter.dialog"" ) , MovedModule ( ""tkinter_filedialog"" , ""FileDialog"" , ""tkinter.filedialog"" ) , MovedModule ( ""tkinter_scrolledtext"" , ""ScrolledText"" , ""tkinter.scrolledtext"" ) , MovedModule ( ""tkinter_simpledialog"" , ""SimpleDialog"" , ""tkinter.simpledialog"" ) , MovedModule ( ""tkinter_tix"" , ""Tix"" , ""tkinter.tix"" ) , MovedModule ( ""tkinter_ttk"" , ""ttk"" , ""tkinter.ttk"" ) , MovedModule ( ""tkinter_constants"" , ""Tkconstants"" , ""tkinter.constants"" ) , MovedModule ( ""tkinter_dnd"" , ""Tkdnd"" , ""tkinter.dnd"" ) , MovedModule ( ""tkinter_colorchooser"" , ""tkColorChooser"" , ""tkinter.colorchooser"" ) , MovedModule ( ""tkinter_commondialog"" , ""tkCommonDialog"" , ""tkinter.commondialog"" ) , MovedModule ( ""tkinter_tkfiledialog"" , ""tkFileDialog"" , ""tkinter.filedialog"" ) , MovedModule ( ""tkinter_font"" , ""tkFont"" , ""tkinter.font"" ) , MovedModule ( ""tkinter_messagebox"" , ""tkMessageBox"" , ""tkinter.messagebox"" ) , MovedModule ( ""tkinter_tksimpledialog"" , ""tkSimpleDialog"" , ""tkinter.simpledialog"" ) , MovedModule ( ""urllib_parse"" , __name__ + "".moves.urllib_parse"" , ""urllib.parse"" ) , MovedModule ( ""urllib_error"" , __name__ + "".moves.urllib_error"" , ""urllib.error"" ) , MovedModule ( ""urllib"" , __name__ + "".moves.urllib"" , __name__ + "".moves.urllib"" ) , MovedModule ( ""urllib_robotparser"" , ""robotparser"" , ""urllib.robotparser"" ) , MovedModule ( ""xmlrpc_client"" , ""xmlrpclib"" , ""xmlrpc.client"" ) , MovedModule ( ""xmlrpc_server"" , ""xmlrpclib"" , ""xmlrpc.server"" ) , MovedModule ( ""winreg"" , ""_winreg"" ) , ]"	<name4> is a list with 55 initial elements , 13 of them are the results of the call to the function <name1> ,
<name4> <name3> <name2> <name1> :	with different 3 string arguments , the others are results of the call to the function MovedModule called with 3 string arguments . <name4> every <name3> <name2> <name1> ,
setattr ( _MovedItems , <name5> . name , <name5> )	set <name5> .name attribute of the _MovedItemst object to <name5> .
<name4> isinstance ( <name1> , <name3> ) :	<name4> <name1> is an instance of <name3> .
"<name4> . modules [ <name2> + "".moves."" + <name5> . name ] = <name5>"	concatenate <name2> , string '.moves' and <name5> .name together , use it as an key to get the value from the <name4> .modules dictionary ,
del <name3>	substitute <name3> for the obtained value . delete <name3> .
<name5> . <name2> = <name2>	substitute <name2> for <name5> ._moved_attributes .
<name5> = sys . modules [ <name4> + <val3> ] = <name1> ( <name4> + <val3> )	append string <val3> to <name4> , use it as an argument to instantiate <name1> class , assign it to <name5> ,
<name6> <name4> ( <name2> ) :	and to value under the '.moves' appended to __name__ key of the sys .modules dictionary . derive <name6> <name4> from the <name2> base <name6> .
"<name5> = [ <name3> ( ""ParseResult"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""SplitResult"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""parse_qs"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""parse_qsl"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""urldefrag"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""urljoin"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""urlparse"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""urlsplit"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""urlunparse"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""urlunsplit"" , ""urlparse"" , ""urllib.parse"" ) , <name3> ( ""quote"" , ""urllib"" , ""urllib.parse"" ) , <name3> ( ""quote_plus"" , ""urllib"" , ""urllib.parse"" ) , <name3> ( ""unquote"" , ""urllib"" , ""urllib.parse"" ) , <name3> ( ""unquote_plus"" , ""urllib"" , ""urllib.parse"" ) , <name3> ( ""urlencode"" , ""urllib"" , ""urllib.parse"" ) , <name3> ( ""splitquery"" , ""urllib"" , ""urllib.parse"" ) , ]"	<name5> is a list with 16 elemetns , all of them are the results of the call to the function <name3> with different 3 string arguments .
<name5> <name4> <name6> <name1> :	<name5> every <name4> <name6> <name1> ,
setattr ( <name1> , <name6> . name , <name6> )	set <name6> .name attribute of the <name1> object to <name6> .
del <name5>	delete <name5> .
<name1> . _moved_attributes = <name2>	substitute <name2> for <name1> ._moved_attributes .
"sys . modules [ <name6> + <val2> ] = sys . modules [ <name6> + "".moves.urllib.parse"" ] = Module_six_moves_urllib_parse ( <name6> + <val2> )"	call the method Module_six_moves_urllib_request with an argument : string <val2> appended to <name6> ,
<name5> <name3> ( <name1> ) :	"assign the result to the value under the string "".moves.urllib_parse"" appended to __name__ key of the sys .modules dictionary , and to the value under the string "".moves.urllib.parse"" appended to __name__ key of the sys .modules dictionary . derive <name5> <name3> from the <name1> base <name5> ."
"<name5> = [ <name6> ( ""URLError"" , ""urllib2"" , ""urllib.error"" ) , <name6> ( ""HTTPError"" , ""urllib2"" , ""urllib.error"" ) , <name6> ( ""ContentTooShortError"" , ""urllib"" , ""urllib.error"" ) , ]"	<name5> is a list with 3 elements : result of the call to the function <name6> with 3 arguments :
<name2> <name6> <name3> <name4> :	"strings ""URLError"" , ""urllib2"" , ""urllib.error"" , result of the call to the function MovedAttribute with 3 arguments : strings ""HTTPError"" , ""urllib2"" , ""urllib.error"" and result of the call to the function MovedAttribute with 3 arguments : strings ""ContentTooShortError"" , ""urllib"" , ""urllib.error"" . <name2> every <name6> <name3> <name4> ,"
setattr ( <name5> , <name4> . name , <name4> )	set <name4> .name attribute of the <name5> object to <name4> .
del <name6>	delete <name6> .
<name6> . _moved_attributes = <name4>	substitute <name4> for <name6> ._moved_attributes .
"sys . modules [ <name4> + "".moves.urllib_error"" ] = sys . modules [ <name4> + <val6> ] = Module_six_moves_urllib_error ( <name4> + <val6> )"	call the method Module_six_moves_urllib_request with an argument : string <val6> appended to <name4> ,
<name5> <name4> ( <name3> ) :	"assign the result to the value under the string "".moves.urllib_error"" appended to __name__ key of the sys .modules dictionary , and to the value under the string "".moves.urllib.error"" appended to __name__ key of the sys .modules dictionary . derive <name5> <name4> from the <name3> base <name5> ."
"<name4> = [ <name5> ( ""urlopen"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""install_opener"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""build_opener"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""pathname2url"" , ""urllib"" , ""urllib.request"" ) , <name5> ( ""url2pathname"" , ""urllib"" , ""urllib.request"" ) , <name5> ( ""getproxies"" , ""urllib"" , ""urllib.request"" ) , <name5> ( ""Request"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""OpenerDirector"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPDefaultErrorHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPRedirectHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPCookieProcessor"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""ProxyHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""BaseHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPPasswordMgr"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPPasswordMgrWithDefaultRealm"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""AbstractBasicAuthHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPBasicAuthHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""ProxyBasicAuthHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""AbstractDigestAuthHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPDigestAuthHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""ProxyDigestAuthHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPSHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""FileHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""FTPHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""CacheFTPHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""UnknownHandler"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""HTTPErrorProcessor"" , ""urllib2"" , ""urllib.request"" ) , <name5> ( ""urlretrieve"" , ""urllib"" , ""urllib.request"" ) , <name5> ( ""urlcleanup"" , ""urllib"" , ""urllib.request"" ) , <name5> ( ""URLopener"" , ""urllib"" , ""urllib.request"" ) , <name5> ( ""FancyURLopener"" , ""urllib"" , ""urllib.request"" ) , <name5> ( ""proxy_bypass"" , ""urllib"" , ""urllib.request"" ) , ]"	<name4> is an list with 33 elements , all of them are the results of the call to the function <name5> with 3 different string arguments .
<name5> <name3> <name6> <name2> :	<name5> every <name3> <name6> <name2> ,
setattr ( <name1> , <name4> . name , <name4> )	set <name4> .name attribute of the <name1> object to <name4> .
del <name6>	delete <name6> .
<name5> . _moved_attributes = <name4>	substitute <name4> for <name5> ._moved_attributes .
"sys . modules [ <name2> + "".moves.urllib_request"" ] = sys . modules [ <name2> + <val1> ] = <name4> ( <name2> + <val1> )"	call the method <name4> with an argument : string <val1> appended to <name2> ,
<name2> <name6> ( <name3> ) :	"assign the result to the value under the string "".moves.urllib_request"" appended to __name__ key of the sys .modules dictionary , and to the value under the string "".moves.urllib.request"" appended to __name__ key of the sys .modules dictionary . derive <name2> <name6> from the <name3> base <name2> ."
"<name6> = [ <name2> ( ""addbase"" , ""urllib"" , ""urllib.response"" ) , <name2> ( ""addclosehook"" , ""urllib"" , ""urllib.response"" ) , <name2> ( ""addinfo"" , ""urllib"" , ""urllib.response"" ) , <name2> ( ""addinfourl"" , ""urllib"" , ""urllib.response"" ) , ]"	<name6> is a list with 4 elements : result of the function <name2> , called with 3 arguments :
<name2> <name4> <name3> <name5> :	"strings ""addbase"" , ""urllib"" and ""urllib.response"" , result of the function MovedAttribute , called with 3 arguments : strings ""addclosehook"" , ""urllib"" , ""urllib.response"" , result of the function MovedAttribute , called with 3 arguments : strings ""addinfo"" , ""urllib"" , ""urllib.response"" and result of the function MovedAttribute , called with 3 arguments : strings ""addinfourl"" , ""urllib"" , ""urllib.response"" . <name2> every <name4> <name3> <name5> ,"
setattr ( <name4> , <name1> . name , <name1> )	set <name1> .name attribute of <name4> object to <name1> .
del <name1>	delete <name1> .
<name6> . _moved_attributes = <name5>	substitute <name5> for <name6> ._moved_attributes .
"sys . modules [ <name4> + "".moves.urllib_response"" ] = sys . modules [ <name4> + <val3> ] = <name2> ( <name4> + <val3> )"	instantiate class <name2> with an argument , string <val3> appended to <name4> ,
<name4> <name2> ( <name6> ) :	"assign it to value under the string "".moves.urllib_response"" appended to __name__ key of the sys .modules dictionary , and to value under the string "".moves.urllib.response"" appended to __name__ key of the sys .modules dictionary . derive <name4> <name2> from the <name6> base <name4> ."
"<name4> = [ <name2> ( ""RobotFileParser"" , ""robotparser"" , ""urllib.robotparser"" ) , ]"	<name4> is a list containing an instance of <name2> class , created with 3 argument : strings ,
<name3> <name1> <name6> <name2> :	"RobotFileParser , ""robotparser"" , ""urllib.robotparser"" . <name3> every <name1> <name6> <name2> ,"
setattr ( <name1> , <name6> . name , <name6> )	set <name6> .name attribute of <name1> object to <name6> .
del <name2>	delete <name2> .
<name4> . _moved_attributes = <name3>	substitute <name3> for <name4> ._moved_attributes .
"sys . modules [ <name1> + "".moves.urllib_robotparser"" ] = sys . modules [ <name1> + <val5> ] = <name3> ( <name1> + <val5> )"	instantiate class <name3> with an argument , string <val5> appended to <name1> ,
<name3> <name1> ( <name4> . ModuleType ) :	"assign it to value under the string "".moves.urllib_robotparser"" appended to __name__ key of the sys .modules dictionary , and to value under the string "".moves.urllib.robotparser"" appended to __name__ key of the sys .modules dictionary . derive <name3> <name1> from the <name4> .ModuleType base <name3> ."
<name1> = <name2> . modules [ <name4> + <val6> ]	append string <val6> to <name4> , use it as an key to get the value from the <name2> .modules dictionary , substitute it for <name1> .
<name2> = <name1> . modules [ <name6> + <val5> ]	append string <val5> to <name6> , use it as an key to get the value from the <name1> .modules dictionary , substitute it for <name2> .
<name2> = <name6> . modules [ <name1> + <val4> ]	append string <val4> to <name1> , use it as an key to get the value from the <name6> .modules dictionary , substitute it for <name2> .
<name5> = <name2> . modules [ <name4> + <val1> ]	append string <val1> to <name4> , use it as an key to get the value from the <name2> .modules dictionary , substitute it for <name5> .
<name1> = <name3> . modules [ <name6> + <val4> ]	append string <val4> to <name6> , use it as an key to get the value from the <name3> .modules dictionary , substitute it for <name1> .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name2> [ <val6>   , <val4>   , <val3>   , <val1>   , <val5>   ]	<name2> a list with 5 elements : strings <val6> , <val4> , <val3> , <val1> and <val5> .
sys . modules [ <name5> + <val2> ] = <name1> ( <name5> + <val2> )	instantiate class <name1> with an argument , string <val2> appended to <name5> ,
def <name3> ( <name2> ) :	"substitute it for value under the string "".moves.urllib"" appended to __name__ key of the sys .modules dictionary . define the function <name3> with an argument <name2> ."
setattr ( <name4> , <name6> . name , <name6> )	set <name6> .name attribute of the <name4> to <name6> .
def <name1> ( <name4> ) :	define the function <name1> with an argument <name4> .
<name5> :	<name5> ,
delattr ( <name2> , <name5> )	delete <name5> attribute of the <name2> object .
except <name6> :	if <name6> exception is caught ,
<name6> :	<name6> ,
del <name3> . __dict__ [ <name1> ]	delete entry under the <name1> key of the <name3> .__dict__ dictionary .
except KeyError :	if NameError exception is caught ,
<name3> <name5> ( <val2> % ( <name1> , ) )	<name3> an <name5> with an argument string <val2> , formated with a tuple with an element <name1> .
<name5> <name3> :	<name5> <name3> is true ,
<name6> = <val3>	<name6> is a string <val3> .
<name3> = <val2>	<name3> is a string <val2> .
<name1> = <val3>	<name1> is a string <val3> .
<name3> = <val1>	<name3> is a string <val1> .
<name2> = <val6>	<name2> is a string <val6> .
<name5> = <val1>	<name5> is a string <val1> .
<name5> = <val6>	<name5> is a string <val6> .
<name3> = <val4>	<name3> is a string <val4> .
<name3> = <val1>	<name3> is a string <val1> .
<name6> = <val3>	<name6> is a string <val3> .
else :	if not ,
<name1> = <val6>	<name1> is a string <val6> .
<name4> = <val1>	<name4> is a string <val1> .
<name1> = <val6>	<name1> is a string <val6> .
<name6> = <val3>	<name6> is a string <val3> .
<name3> = <val1>	<name3> is a string <val1> .
<name5> = <val3>	<name5> is a string <val3> .
<name5> = <val1>	<name5> is a string <val1> .
"_itervalues = ""itervalues"""	"_iterkeys is a string ""iterkeys"" ."
<name2> = <val6>	<name2> is a string <val6> .
<name4> = <val5>	<name4> is a string <val5> .
<name1> :	<name1> ,
<name6> = <name1>	substitute <name1> for <name6> .
except <name6> :	if <name6> exception is caught ,
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name6> <name2> . <name1> ( )	<name6> <name1> element of the iterable <name2> .
<name6> = advance_iterator	substitute klass .__dict__ for <name6> .
<name2> :	<name2> ,
<name3> = <name3>	substitute <name3> for <name3> .
except <name6> :	if <name6> exception is caught ,
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name1> <name3> ( <val4> <name5> <name2> . __dict__ <name6> <name2> <name5> type ( <name1> ) . <name3> )	if <val4> is contained <name5> <name2> .__dict__ <name6> <name3> <name2> <name5> <name3> field of the <name1> class , <name1> boolean True , otherwise <name1> False .
<name1> <name2> :	<name1> <name2> is true ,
def <name6> ( <name5> ) :	define the function <name6> with an argument <name5> .
<name6> <name5>	<name6> <name5> .
<name1> = types . MethodType	substitute Iterator for <name1> .
<name3> = <name1>	substitute <name1> for <name3> .
else :	if not ,
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name1> <name2> . im_func	<name1> <name2> .im_func .
def create_bound_method ( <name6> , <name2> ) :	define the function create_bound_function with 2 arguments : <name6> and <name2> .
<name2> <name5> . MethodType ( <name3> , <name4> , <name4> . __class__ )	call the method <name5> .MethodType with 3 arguments : <name3> , <name4> and <name4> .__class__ , <name2> the result .
<name1> <name5> ( <name4> ) :	derive the <name1> <name5> from the base <name1> <name4> .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name3> <name4> ( <name5> ) . <name1> ( <name5> )	call the function <name4> with an argument <name5> , on the result call the method <name1> with an argument <name5> , <name3> the result .
<name4> = <name4>	substitute <name4> for <name4> .
<name6> ( <name1> , <val3> <val5> <val3> )	call the function <name6> with 2 arguments : <name1> and string <val3> <val5> <val3> .
<name2> = <name1> . attrgetter ( <name3> )	call the method <name1> .attrgetter with an argument <name3> , substitute the result for <name2> .
<name1> = <name4> . attrgetter ( <name3> )	call the method <name4> .attrgetter with an argument <name3> , substitute the result for <name1> .
get_function_closure = <name4> . attrgetter ( <name2> )	call the method <name4> .attrgetter with an argument <name2> , substitute the result for get_method_closure .
get_function_code = <name1> . attrgetter ( <name5> )	call the method <name1> .attrgetter with an argument <name5> , substitute the result for get_method_code .
get_function_defaults = <name2> . attrgetter ( <name6> )	call the method <name2> .attrgetter with an argument <name6> , substitute the result for get_method_defaults .
get_function_globals = <name6> . attrgetter ( <name2> )	call the method <name6> .attrgetter with an argument <name2> , substitute the result for get_method_globals .
def <name1> ( <name4> , ** <name3> ) :	define the function <name1> with 2 arguments : <name4> and unpacked dictionary <name3> .
return iter ( getattr ( <name2> , <name4> ) ( ** <name3> ) )	get <name4> attribute of the class <name2> , call the result with an argument unpacked dictionary <name3> , convert the result to a iterable ,
def <name3> ( <name6> , ** <name4> ) :	return it . define the function <name3> with 2 arguments : <name6> and unpacked dictionary <name4> .
return iter ( getattr ( <name6> , <name3> ) ( ** <name5> ) )	get <name3> attribute of the class <name6> , call the result with an argument unpacked dictionary <name5> , convert the result to a iterable ,
def <name4> ( <name6> , ** <name2> ) :	return it . define the function <name4> with 2 arguments : <name6> and unpacked dictionary <name2> .
return iter ( getattr ( <name1> , <name4> ) ( ** <name2> ) )	get <name4> attribute of the class <name1> , call the result with an argument unpacked dictionary <name2> , convert the result to a iterable ,
def <name3> ( <name4> , ** <name6> ) :	return it . define the function <name3> with 2 arguments : <name4> and unpacked dictionary <name6> .
return iter ( getattr ( <name3> , <name6> ) ( ** <name1> ) )	get <name6> attribute of the class <name3> , call the result with an argument unpacked dictionary <name1> , convert the result to a iterable ,
<name1> <name3> :	return it . <name1> <name3> is true ,
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
return s . encode ( <val2> )	call the method e .encode with an argument string <val2> .
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
<name6> <name1>	<name6> <name1> .
<name6> = <name3>	substitute <name3> for <name6> .
<name3> <name2> . version_info [ <val5> ] <= <val5> :	<name3> second element of <name2> .version_info is smaller than or equal to integer <val5> ,
def <name6> ( <name1> ) :	define the function <name6> with an argument <name1> .
<name2> <name6> ( ( <name5> , ) )	call the function <name6> with an argument tuple with an element <name5> , <name2> the result .
else :	if not ,
<name5> = <name4> . methodcaller ( <val1> , <val6> , <val2> )	call the method <name4> .methodcaller with 3 arguments : string <val1> , integer <val6> and string <val2> , substitute the result for <name5> .
<name6> = <name4> . itemgetter ( <val1> )	call te method <name4> .itemgetter with an argument integer <val1> , substitute the result for <name6> .
<name3> = <name4> . getitem	substitute <name4> .getitem for <name3> .
<name5> = <name1>	substitute <name1> for <name5> .
<name6> <name3>	<name6> <name3> .
<name3> = <name5> . <name3>	substitute <name5> .StringIO for <name3> .
<name6> = <name4> . <name6>	substitute <name4> .BytesIO for <name6> .
else :	if not ,
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name5> <name4>	<name5> <name4> .
def <name1> ( <name2> ) :	define the function <name1> with an argument <name2> .
\ return unicode ( s . <name1> ( r '\\\\' , r' \\\\\\\\'  ) , <val3> ) \	\ <name1> every occurrence of raw string '\\\\' in s with a raw string ' \\\\\\\\' , use the result and string <val3> , \
<name2> = <name2>	as arguments for the call to the unicode function , return the result . substitute <name2> for <name2> .
<name2> = <name6>	substitute <name6> for <name2> .
def <name5> ( <name4> ) :	define the function <name5> with an argument <name4> .
<name6> ord ( <name3> [ 0 ] )	get the integer representation of the first element of <name3> , <name6> it .
def <name4> ( <name2> , <name3> ) :	define the function <name4> with 2 arguments <name2> and <name3> .
<name1> ord ( <name5> [ <name6> ] )	get the integer representation of the <name6> - th element of <name5> , <name1> it .
def <name6> ( <name3> ) :	define the function <name6> with an argument <name3> .
<name3> ( ord ( <name5> ) <name4> <name5> <name1> <name2> )	convert <name5> to its integer representation , <name3> all of the results <name4> every <name5> <name1> <name2> .
<name1> <name2>	<name1> <name2> .
<name6> = <name3> = <name6> . <name6>	assign <name6> .StringIO to <name6> and <name3> .
<name5> ( <name4> , <val1> <val6> <val1> )	call the function <name5> with 2 arguments : <name4> and string <val1> <val6> <val1> .
<name6> ( <name5> , <val4> <val3> <val4> )	call the function <name6> with 2 arguments : <name5> and string <val4> <val3> <val4> .
<name6> <name2> :	<name6> <name2> is true ,
<name4> = getattr ( <name2> . builtins , <val3> )	get <val3> attribute from the <name2> .builtins object , substitute it for <name4> .
def <name2> ( <name1> , <name3> , <name6> = <name4> ) :	define the function <name2> with 3 arguments : <name1> , <name3> and <name6> set to <name4> .
<name2> <name5> . __traceback__ <name1> <name4> <name6> :	<name2> <name5> .__traceback__ <name1> <name4> <name6> ,
<name1> <name5> . with_traceback ( <name2> )	<name1> an <name5> .with_traceback exception with an argument <name2> .
<name5> <name1>	<name5> an exception <name1> .
else :	if not ,
def exec_ ( <name1> , <name3> = <name6> , <name5> = <name6> ) :	define the function exec with 3 arguments : <name1> , <name3> set to <name6> and <name5> set to <name6> .
<name3> <name2> <name5> <name6> :	<name3> <name2> <name5> <name6> ,
<name1> = <name4> . _getframe ( <val6> )	call the method <name4> ._getframe with an argument <val6> , substitute the result for <name1> .
<name3> = <name6> . f_globals	substitute <name6> .f_globals for <name3> .
<name2> <name3> <name6> <name1> :	<name2> <name3> <name6> <name1> ,
<name4> = frame . f_locals	substitute if <name4> is None for <name4> .
del <name6>	delete <name6> .
elif <name3> <name2> <name6> :	otherwise if <name3> <name2> <name6> ,
<name4> = <name2>	substitute <name2> with an argument <name4> .
exec ( <val2> <val5> <val2> )	execute code statement <val2> <val5> <val2> .
"<name5> ( <val3> ""def reraise(tp, value, tb=None):     raise tp, value, tb "" <val3> )"	"call the function <name5> with an argument string <val3> ""def reraise(tp, value, tb=None):    raise tp, value, tb"" <val3> ."
<name5> = getattr ( <name1> . builtins , <val6> , <name3> )	get attribute <val6> from the <name1> .builtins object , if it exists substitute it for <name5> , if not <name5> is <name3> .
<name2> <name6> <name5> <name1> :	<name2> <name6> <name5> <name1> ,
def <name5> ( * <name4> , ** <name3> ) :	define the function <name5> with 2 arguments : unpacked list <name4> and unpacked dictionary <name3> .
<name5> = <name2> . pop ( <val4> , <name6> . stdout )	remover <val4> key from the <name2> dictionary , if it exists substitute it for <name5> , if not substitute <name6> .stdout for <name5> .
<name2> <name5> <name1> <name4> :	<name2> <name5> <name1> <name4> ,
<name6>	<name6> nothing .
def <name4> ( <name3> ) :	define the function <name4> with an argument <name3> .
<name6> <name2> isinstance ( <name4> , <name3> ) :	<name6> <name4> is <name2> an instance of <name3> ,
<name1> = str ( <name1> )	convert <name1> to string , substitute it for <name1> .
<name4> ( isinstance ( <name6> , <name3> ) <name2> isinstance ( <name5> , <name1> ) <name2> <name6> . encoding <name4> <name6> <name3> ) :	<name4> <name6> <name4> an instance of <name3> <name2> <name5> <name4> an instance of <name1> <name2> <name6> .encoding <name4> <name6> <name3> ,
<name6> = getattr ( <name3> , <val5> , <name4> )	get <val5> attribute from <name3> object , substitute it for <name6> if it exists , if not <name6> is <name4> .
<name3> <name1> <name6> <name5> :	<name3> <name1> <name6> <name5> ,
<name6> = <val3>	<name6> is a string <val3> .
<name6> = <name6> . encode ( <name4> . encoding , <name5> )	call the method <name6> .encode with 2 arguments : <name4> .encoding and <name5> , substitute the result for <name6> .
<name5> . <name4> ( <name1> )	<name4> <name1> to <name5> .
<name6> = <name1>	<name6> is boolean <name1> .
<name2> = <name5> . pop ( <val4> , <name6> )	remove <val4> key from the <name5> dictionary , if it exists substitute it for <name2> , if not <name2> is <name6> .
<name2> <name6> <name4> <name1> <name3> :	<name2> <name6> <name4> <name1> <name3> ,
<name1> isinstance ( <name6> , <name5> ) :	<name1> <name6> is an instance of <name5> ,
<name5> = <name4>	<name5> is boolean <name4> .
elif <name2> isinstance ( <name1> , str ) :	otherwise if <name1> is <name2> an instance of string type ,
<name3> <name2> ( <val5> )	<name3> an <name2> exception with an argument string <val5> .
<name3> = <name5> . pop ( <val6> , <name1> )	remove <val6> key from the <name5> dictionary , if it exists substitute it for <name3> , if not <name3> is <name1> .
<name6> <name4> <name5> <name3> <name2> :	<name6> <name4> <name5> <name3> <name2> ,
<name5> isinstance ( <name6> , <name4> ) :	<name5> <name6> is an instance of <name4> ,
<name5> = <name2>	<name5> is boolean <name2> .
elif <name3> isinstance ( <name5> , str ) :	otherwise if <name5> is <name3> an instance of string type ,
<name1> <name2> ( <val4> )	<name1> an <name2> exception with an argument string <val4> .
<name6> <name5> :	<name6> <name5> is true ,
<name4> <name2> ( <val5> )	<name4> an <name2> exception with an argument string <val5> .
<name6> not <name3> :	<name6> <name3> is false ,
<name1> <name3> <name6> <name5> :	<name1> every <name3> <name6> <name5> ,
<name6> isinstance ( <name2> , <name5> ) :	<name6> <name2> is an instance of <name5> ,
<name6> = <name1>	<name6> is boolean <name1> .
<name2>	<name2> from the loop execution .
<name6> <name5> :	<name6> <name5> is true ,
"\ <name5> = <name2> ( ""\\n"" ) \"	convert <name5> character to <name2> and substitute the result for <name5> .
"<name4> = <name5> ( "" "" )"	convert whitespace character to <name5> and substitute the result for <name4> .
else :	if not ,
"\ <name1> = ""\\n"" \"	substitute <name1> character for <name1> .
<name1> = <val6>	substitute string <val6> for <name1> .
<name5> <name2> <name4> <name3> :	<name5> <name2> <name4> <name3> ,
<name1> = <name2>	substitute <name2> for <name1> .
<name2> <name5> <name3> <name1> :	<name2> <name5> <name3> <name1>
<name6> = newline	substitute space for <name6> .
<name2> <name1> , <name6> <name5> enumerate ( <name3> ) :	<name2> every <name1> and <name6> <name5> enumerated iterable <name3> ,
<name4> <name3> :	<name4> <name3> is true ,
<name1> ( <name5> )	call the function <name1> with an argument <name5> .
<name6> ( <name1> )	call the function <name6> with an argument <name1> .
<name1> ( <name5> )	call the function <name1> with an argument <name5> .
<name1> ( <name4> , <val6> <val5> <val6> )	call the function <name1> with 2 arguments : <name4> and string <val6> <val5> <val6> .
def <name1> ( <name3> , * <name5> ) :	define the function <name1> with 2 arguments <name3> and unpacked list <name5> .
<name4> <name1> ( <name6> ) :	derive the <name4> <name1> form the <name6> base <name4> .
<name5> = <name4> . <name5>	substitute <name4> .__call__ for <name5> .
<name2> = <name5> . <name2>	substitute <name5> .__init__ for <name2> .
def <name3> ( <name6> , <name5> , <name2> , <name1> ) :	define the method <name3> with 4 arguments : <name6> , <name5> , <name2> and <name1> .
<name6> <name1> <name2> <name3> :	<name6> <name1> <name2> <name3> ,
<name3> <name1> . __new__ ( <name6> , <name4> , ( ) , <name5> )	call the method <name1> .__new__ with 4 arguments : <name6> , <name4> , empty tuple and <name5> , <name3> the result .
return <name1> ( <name2> , bases , <name4> )	call the function <name1> with 3 arguments : <name2> , base and <name4> .
<name2> <name5> ( <val1>   , <name6> , { }  )	<name2> an instance of <name5> class , created with 3 arguments : string <val1> , <name6> and an empty dictionary .
def <name6> ( <name2> ) :	define the function <name6> with an argument <name2> .
def <name3> ( <name4> ) :	define the function <name3> with an argument <name4> .
<name3> = <name2> . __dict__ . copy ( )	call the method <name2> .__dict__ .copy substitute the result for <name3> .
<name2> . pop ( <val5>   , None )	remove <val5> key from the <name2> dictionary .
<name1> . pop ( <val5>   , None )	remove <val5> key from the <name1> dictionary .
<name4> = <name1> . <name3> ( <val5>   )	<name3> the value under the <val5> key of the <name1> dictionary , substitute it for <name4> .
<name5> <name3> <name1> <name2> <name4> :	<name5> <name3> <name1> <name2> <name4> ,
<name4> isinstance ( <name2> , <name1> ) :	<name4> <name2> is an instance of <name1> ,
<name1> = [ <name1> ]	<name1> is a list with an element , <name1> .
<name1> <name2> <name3> <name5> :	<name1> every <name2> <name3> <name5> ,
<name4> . pop ( <name6> )	remove <name6> key from the <name4> dictionary .
<name2> <name6> ( <name4> . __name__ , <name4> . __bases__ , <name3> )	<name2> an instance of <name6> class , created with 3 arguments : <name4> .__name__ , <name4> .__bases__ and <name3> .
<name1> <name5>	<name1> <name5> .
<name5> <name4> :	<name5> <name4> is true ,
<name1> = <val5>	<name1> is a strnig <val5> .
<name4> = <val2>	<name4> is a strnig <val2> .
<name6> = <val3>	<name6> is a strnig <val3> .
<name6> = <name6>	substitute <name6> for <name6> .
<name5> = ( <name1> , <name3> , <name2> )	<name5> is a tuple with 3 elements : <name1> , <name3> and <name2> .
else :	if not ,
<name6> = <val5>	<name6> is a strnig <val5> .
<name2> = <val6>	<name2> is a strnig <val6> .
<name5> = <val3>	<name5> is a strnig <val3> .
<name6> <name5> . platform . startswith ( <val2>   ) :	<name6> <name5> .platform starts with a string <val2> ,
<name3> = <name3>	substitute <name3> for <name3> .
else :	if not ,
<name5> = <name3>	substitute <name3> for <name5> .
<name1> = ( <name4> , <name6> )	<name1> is a tuple with 2 elements <name4> and <name6> .
def <name2> ( <name1> , * <name5> , ** <name3> ) :	define the function <name2> with 3 arguments : <name1> , unpacked list <name5> and unpacked dictionary <name3> .
return getattr ( <name6> , <name3> ) ( * <name4> , ** kwargs )	get <name3> attribute of the <name6> object , call the result with 2 arguments : unpacked list <name4> ,
def <name2> ( <name1> , * <name6> , ** <name4> ) :	and unpacked dictionary <name4> , return the result . define the function <name2> with 3 arguments : <name1> , unpacked list <name6> and unpacked dictionary <name4> .
return getattr ( <name4> , <name2> ) ( * <name6> , ** kwargs )	get <name2> attribute of the <name4> object , call the result with 2 arguments : unpacked list <name6> ,
def <name5> ( <name2> , * <name4> , ** <name1> ) :	and unpacked dictionary <name1> , return the result . define the function <name5> with 3 arguments : <name2> , unpacked list <name4> and unpacked dictionary <name1> .
return getattr ( <name4> , <name3> ) ( * <name6> , ** kwargs )	get <name3> attribute of the <name4> object , call the result with 2 arguments : unpacked list <name6> ,
add_move ( <name2> ( <val5> , <val3> ) )	and unpacked dictionary kwargs , return the result . call the function <name2> with 2 arguments : strings <val5> and <val3> ,
<name6> ( <name1> ( <val3> , <val4> ) )	use the result as an argument for the call to the <name6> function . call the function <name1> with 2 arguments : strings <val3> and <val4> ,
<name6> <name2>	<name6> module <name2> .
<name6> :	<name6> ,
<name2> <name4>	<name2> <name4> .
<name4> <name5> :	<name4> <name5> .
<name5> <name2> <name6> <name1>	<name5> <name2> <name6> <name1> .
<name3> <name6> ( <name1> ) :	derive the <name3> <name6> from the <name1> base <name3> .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name6> . mutex = <name1> . RLock ( )	call the method <name1> .RLock , substitute the result for <name6> .mutex .
<name3> . can_read = <name2> . Semaphore ( <val4> )	call the method <name2> .Semaphore with an argument integer <val4> , substitute the result for <name3> .can_read .
<name3> . can_write = <name4> . Semaphore ( <val5> )	call the method <name4> .Semaphore with an argument integer <val5> , substitute the result for <name3> .can_write .
<name4> . active_readers = <val1>	<name4> .active_readers is an integer <val1> .
<name5> . active_writers = <val1>	<name5> .active_writers is an integer <val1> .
<name2> . waiting_readers = <val1>	<name2> .waiting_readers is an integer <val1> .
<name1> . waiting_writers = <val4>	<name1> .waiting_writers is an integer <val4> .
def <name5> ( <name3> ) :	define the method <name5> with an argument <name3> .
<name4> <name2> . mutex :	<name4> <name2> .mutex perform ,
<name1> <name4> . active_writers == <val2> <name5> <name4> . waiting_writers == <val2> :	<name1> <name4> .active_writers <name5> <name4> .waiting_writers both equal to integer <val2> ,
<name6> . active_readers += <val5>	increment <name6> .active_readers by <val5> .
<name4> . can_read . release ( )	call the method <name4> .can_read .release .
else :	if not ,
<name6> . waiting_readers += <val5>	increment <name6> .waiting_readers by <val5> .
<name4> . can_read . acquire ( )	call the method <name4> .can_read .acquire .
def <name4> ( <name3> ) :	define the method <name4> with an argument <name3> .
<name6> <name5> . mutex :	<name6> <name5> .mutex perform ,
<name3> . active_readers -= <val1>	decrement <name3> .active_readers by integer <val1> ,
<name2> <name4> . active_readers == <val1> <name5> <name4> . waiting_writers != <val1> :	<name2> <name4> .active_readers equals integer <val1> <name5> <name4> .waiting_writers is not equal to integer <val1> ,
<name1> . active_writers += <val5>	increment <name1> .active_writers by <val5> .
<name4> . waiting_writers -= <val3>	decrement <name4> .waiting_writers by integer <val3> ,
<name5> . can_write . release ( )	call the method <name5> .can_write .release .
@  <name2> . contextmanager	<name2> .contextmanager decorator ,
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name6> . reader_enters ( )	call the method <name6> .reader_enters .
<name2> :	<name2> ,
<name5>	<name5> nothing .
<name6> :	<name6> perform ,
<name1> . reader_leaves ( )	call the method <name1> .reader_leaves .
def <name4> ( <name1> ) :	define the method <name4> with an argument <name1> .
<name6> <name1> . mutex :	<name6> <name1> .mutex perform ,
<name2> <name4> . active_writers == <val5> <name6> <name4> . waiting_writers == <val5> <name6> <name4> . active_readers == <val5> :	<name2> <name4> .active_writers equals integer <val5> <name6> <name4> .waiting_writers equals integer <val5> <name6> <name4> .active_readers equals integer <val5> ,
<name4> . active_writers += <val5>	increment <name4> .active_writers by integer <val5> ,
<name5> . can_write . release ( )	call the method <name5> .can_write .release .
else :	if not ,
<name1> . waiting_writers += <val3>	increment <name1> .waiting_writers by integer <val3> ,
<name4> . can_write . acquire ( )	call the method <name4> .can_write .acquire .
def <name2> ( <name3> ) :	define the method <name2> with an argument <name3> .
<name2> <name6> . mutex :	<name2> <name6> .mutex perform ,
<name1> . active_writers -= <val6>	decrement <name1> .active_writers by integer <val6> ,
<name6> <name4> . waiting_writers != <val5> :	<name6> <name4> .waiting_writers is not equal to integer <val5> ,
<name3> . active_writers += <val6>	increment <name3> .active_writers by integer <val6> ,
<name5> . waiting_writers -= <val1>	decrement <name5> .waiting_writers by integer <val1> ,
<name4> . can_write . release ( )	call the method <name4> .can_write .release .
elif <name6> . waiting_readers != <val3> :	otherwise if <name6> .waiting_readers is not equal to integer <val3> ,
<name1> = <name5> . waiting_readers	substitute <name5> .waiting_readers for <name1> .
<name2> . waiting_readers = <val1>	<name2> .waiting_readers is integer <val1> .
<name3> . active_readers += <name2>	increment <name3> .active_readers by <name2> .
<name1> <name5> >  <val4> :	<name1> <name5> is greater than integer <val4> ,
<name1> . can_read . release ( )	call the method <name1> .can_read .release .
<name3> -= <val5>	decrement <name3> by integer <val5> ,
@  <name6> . contextmanager	<name6> .contextmanager decorator ,
def <name6> ( <name4> ) :	define the method <name6> with an argument <name4> .
<name4> . writer_enters ( )	call the method <name4> .writer_enters .
<name1> :	<name1> ,
<name4>	<name4> nothing .
<name6> :	<name6> perform ,
<name4> . writer_leaves ( )	call the method <name4> .writer_leaves .
<name6> <name4> . utils <name5> <name3>	<name6> <name4> .utils <name5> <name3> into default name space .
<name3> = ( <val4>   , <val5>   , <val2>   , <val1>   , <val6>   , <val3>   , <val4>   , <val5>   )	<name3> is a tuple with 8 elements : strings <val4> , <val5> , <val2> , <val1> , <val6> , <val3> , <val4> and <val5> .
<name2> = dict ( ( <name4> [ <name6> ] , '3%s'   % <name6> ) <name5> <name6> in range ( 8 ) )	<name2> is a dictionary created with elements : <name6> appended to a string '3' <name5> value under the key <name6> of <name4> dictionary ,
<name5> = dict ( ( <name6> [ <name4> ] , '4%s'   % <name4> ) <name2> <name4> <name3> range ( 8 ) )	<name2> every <name4> <name3> sequence of integers from 0 to 7 . <name5> is a dictionary created with elements : <name4> appended to a string '4' <name2> value under the key <name4> of <name6> dictionary ,
<name1> = <val4>	for every x in sequence of integers from 0 to 7 . <name1> is a string <val4> .
<name4> = {  <val1>   : <val2>   , <val6>   : <val3>   , <val5>   : <val4>   , <val1>   : <val2>   , 'conceal'   : '8'  }	<name4> is an dictionary with 5 elements : <val2> for <val1> , <val3> for <val6> , <val4> for <val5> , <val2> for <val1> ,
def <name2> ( <name4> = ''   , <name1> = ( ) , ** <name6> ) :	and '8' for 'conceal' . define the method <name2> with 3 arguments : <name4> set to an empty string , <name1> set to an empty tuple and unpacked dictionary <name6> .
<name4> = [ ]	<name4> is an empty list .
<name2> <name3> == ''   <name6> len ( <name4> ) == <val1> <name6> <name4> [ 0 ] == <val5>   :	<name2> <name3> is an empty string <name6> length of <name4> equals integer <val1> <name6> first element of <name4> equals string <val5> ,
\ <name6> <val1>   % <name3> \	\ format string <val1> with <name3> , <name6> the result . \
<name5> <name1> , <name3> <name2> <name4> . iteritems ( <name6> ) :	call the function <name4> .iteritems with an argument <name6> , <name5> every <name1> and <name3> <name2> the result ,
<name1> <name6> == <val3>   :	<name1> <name6> equals a string <val3> ,
<name5> . <name3> ( <name1> [ <name4> ] )	<name3> value under the key <name4> of <name1> dictionary to <name5> .
elif <name5> == <val3>   :	otherwise if <name5> equals a string <val3> ,
<name1> . <name2> ( <name3> [ <name5> ] )	<name2> value under the key <name5> of <name3> dictionary to <name1> .
<name1> <name4> <name2> <name5> :	<name1> every <name4> <name2> <name5> ,
<name1> <name2> <name4> <name3> :	<name1> <name2> is contained <name4> <name3> ,
<name1> . <name4> ( <name5> [ o ] )	<name4> value under the 0 key of the <name5> dictionary to <name1> .
<name2> <val6>   <name3> <name4> <name1> :	<name2> string <val6> is <name3> contained <name4> <name1> ,
\ <name6> = <val5>   % ( <name6> or ''   , <name4> ) \	\ if <name6> is true format with it and <name4> a string <val5> , if not format it with an empty string and <name4> , substitute the result for <name6> . \
\ return '%s%s'   % ( ( <val3>   % <val6>   . <name2> ( <name4> ) ) , <name5> or ''   ) \	\ <name2> elements of <name4> in a string , separated by <val6> , format string <val3> with it , append <name5> to the result if exists , \
def <name3> ( <name1> = ( ) , ** <name6> ) :	return the string . define the function <name3> with 2 arguments : <name1> set to an empty tuple and unpacked dictionary <name6> .
<name2> <name1> <name5> : <name6> ( <name5> , opts , ** kwargs )	<name2> <name1> function with <name5> as argument and <name2> value being result of the function <name6> , called with 3 arguments : <name5> ,
<name3> = <val5>	opts and unpacked dictionary kwargs . <name3> is a string <val5> .
<name2> = <val6>	<name2> is a string <val6> .
<name1> = <val6>	<name1> is a string <val6> .
<name3> = {   <name6> : {   'ERROR'   : { }  , 'WARNING'   : { }  , 'NOTICE'   : { }  , 'SQL_FIELD'   : { }  , 'SQL_COLTYPE'   : { }  , 'SQL_KEYWORD'   : { }  , 'SQL_TABLE'   : { }  , 'HTTP_INFO'   : { }  , 'HTTP_SUCCESS'   : { }  , 'HTTP_REDIRECT'   : { }  , 'HTTP_NOT_MODIFIED'   : { }  , 'HTTP_BAD_REQUEST'   : { }  , 'HTTP_NOT_FOUND'   : { }  , 'HTTP_SERVER_ERROR'   : { }  , 'MIGRATE_HEADING'   : { }  , 'MIGRATE_LABEL'   : { }  , 'MIGRATE_SUCCESS'   : { }  , 'MIGRATE_FAILURE'   : { }  , }  , DARK_PALETTE : {   'ERROR'   : {  'fg'   : 'red'   , 'opts'   : ( 'bold'   , ) }  , 'WARNING'   : {  'fg'   : 'yellow'   , 'opts'   : ( 'bold'   , ) }  , 'NOTICE'   : {  'fg'   : 'red'  }  , 'SQL_FIELD'   : {  'fg'   : 'green'   , 'opts'   : ( 'bold'   , ) }  , 'SQL_COLTYPE'   : {  'fg'   : 'green'  }  , 'SQL_KEYWORD'   : {  'fg'   : 'yellow'  }  , 'SQL_TABLE'   : {  'opts'   : ( 'bold'   , ) }  , 'HTTP_INFO'   : {  'opts'   : ( 'bold'   , ) }  , 'HTTP_SUCCESS'   : { }  , 'HTTP_REDIRECT'   : {  'fg'   : 'green'  }  , 'HTTP_NOT_MODIFIED'   : {  'fg'   : 'cyan'  }  , 'HTTP_BAD_REQUEST'   : {  'fg'   : 'red'   , 'opts'   : ( 'bold'   , ) }  , 'HTTP_NOT_FOUND'   : {  'fg'   : 'yellow'  }  , 'HTTP_SERVER_ERROR'   : {  'fg'   : 'magenta'   , 'opts'   : ( 'bold'   , ) }  , 'MIGRATE_HEADING'   : {  'fg'   : 'cyan'   , 'opts'   : ( 'bold'   , ) }  , 'MIGRATE_LABEL'   : {  'opts'   : ( 'bold'   , ) }  , 'MIGRATE_SUCCESS'   : {  'fg'   : 'green'   , 'opts'   : ( 'bold'   , ) }  , 'MIGRATE_FAILURE'   : {  'fg'   : 'red'   , 'opts'   : ( 'bold'   , ) }  , }  , LIGHT_PALETTE : {   'ERROR'   : {  'fg'   : 'red'   , 'opts'   : ( 'bold'   , ) }  , 'WARNING'   : {  'fg'   : 'yellow'   , 'opts'   : ( 'bold'   , ) }  , 'NOTICE'   : {  'fg'   : 'red'  }  , 'SQL_FIELD'   : {  'fg'   : 'green'   , 'opts'   : ( 'bold'   , ) }  , 'SQL_COLTYPE'   : {  'fg'   : 'green'  }  , 'SQL_KEYWORD'   : {  'fg'   : 'blue'  }  , 'SQL_TABLE'   : {  'opts'   : ( 'bold'   , ) }  , 'HTTP_INFO'   : {  'opts'   : ( 'bold'   , ) }  , 'HTTP_SUCCESS'   : { }  , 'HTTP_REDIRECT'   : {  'fg'   : 'green'   , 'opts'   : ( 'bold'   , ) }  , 'HTTP_NOT_MODIFIED'   : {  'fg'   : 'green'  }  , 'HTTP_BAD_REQUEST'   : {  'fg'   : 'red'   , 'opts'   : ( 'bold'   , ) }  , 'HTTP_NOT_FOUND'   : {  'fg'   : 'red'  }  , 'HTTP_SERVER_ERROR'   : {  'fg'   : 'magenta'   , 'opts'   : ( 'bold'   , ) }  , 'MIGRATE_HEADING'   : {  'fg'   : 'cyan'   , 'opts'   : ( 'bold'   , ) }  , 'MIGRATE_LABEL'   : {  'opts'   : ( 'bold'   , ) }  , 'MIGRATE_SUCCESS'   : {  'fg'   : 'green'   , 'opts'   : ( 'bold'   , ) }  , 'MIGRATE_FAILURE'   : {  'fg'   : 'red'   , 'opts'   : ( 'bold'   , ) }  , }  }	<name3> is a dictionary containing 3 elements , a dictionary with 18 pairs of dictionary value and string keys for <name6> ,
<name1> = <name6>	a dictionary with 18 pairs of dictionary value and string keys for <name6> , and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE . substitute <name6> for <name1> .
def <name5> ( <name3> ) :	define the function <name5> with an argument <name3> .
<name1> not <name2> :	<name1> <name2> is false ,
<name1> <name2> [ <name4> ]	<name1> value under the <name4> key of the <name2> dictionary .
<name2> = <name3> . lower ( ) . <name6> ( <val5>   )	convert <name3> to lowercase and <name6> it by <val5> character , substitute the result for <name2> .
<name1> = <name4> [ NOCOLOR_PALETTE ] . <name3> ( )	get value under the config_string key of the <name4> dictionary , call the <name3> method on the result and substitute it for <name1> .
<name2> <name6> <name3> <name4> :	<name2> every <name6> <name3> <name4> ,
<name2> <name6> <name1> <name5> :	<name2> <name6> is contained <name1> <name5> ,
<name6> . <name5> ( <name3> [ <name4> ] )	get the value under the <name4> key of the <name3> dictionary , <name5> with it <name6> dictionary .
elif <val5>   <name6> <name1> :	otherwise if <val5> is contained <name6> <name1> ,
<name2> = { }	<name2> is an empty dictionary ,
<name1> , <name5> = <name6> . <name3> ( <val2>   )	<name3> <name6> by <val2> character , substitute the result for <name1> and <name5> , respectively .
<name1> = <name1> . upper ( )	convert <name1> to uppercase .
<name5> = <name3> . <name6> ( <val4>   )	<name6> <name3> by <val4> character , substitute the result for <name5> .
<name1> . <name3> ( )	<name3> the order of elements of <name1> .
<name4> = <name6> . pop ( ) . <name3> ( <val2>   )	remove first element from <name6> , <name3> it by the <val2> character , substitute the result for <name4> .
<name1> . <name2> ( )	<name2> the order of <name1> elements ,
<name5> = <name6> . pop ( )	remove the first element from <name6> , substitute it for <name5> .
<name4> <name2> <name3> <name6> :	<name4> <name2> is contained <name3> <name6> ,
<name4> [ <val3>   ] = <name6>	substitute <name6> for value under the <val3> key of <name4> dictionary .
<name1> <name4> <name2> <name4> [ - 1 ] <name5> <name3> :	<name1> <name4> is true <name2> last element of <name4> is contained <name5> <name3> ,
<name1> [ <val3>   ] = <name2> [ - 1 ]	substitute last element of <name2> for value under the <val3> key of <name1> dictionary .
<name4> = <name1> ( <name6> <name2> <name6> <name5> <name3> if <name6> <name5> <name4> . <name1> ( ) )	<name4> is a <name1> created out of elements <name6> , <name2> every <name6> <name5> <name3> is <name6> is <name5> the <name1> of the <name4> dictionary .
<name2> <name6> :	<name2> <name6> is true ,
<name4> [ <val6>   ] = <name2>	substitute <name2> for value under the <val6> key of <name4> dictionary .
<name6> <name4> <name1> <name3> [ <name2> ] <name5> <name6> :	<name6> <name4> is contained <name1> value under the <name2> key of the <name3> dictionary <name5> <name6> is true ,
<name1> [ <name3> ] = <name5>	substitute <name5> for value under the <name3> key of <name1> dictionary .
<name5> <name2> == <name6> [ <name3> ] :	<name5> <name2> equals value under the <name3> key of the <name6> dictionary ,
<name4> <name6>	<name4> <name6> .
<name5> <name4>	<name5> <name4> .
<name2> <name3> <name1> <name4>	<name2> <name3> <name1> <name4> into default name space .
<name2> <name5>	<name2> module <name5> .
<name1> <name5>	<name1> module <name5> .
<name6> <name4> <name5> <name1>	<name6> <name4> <name5> <name1> into default name space .
<name3> <name6> <name1> <name2>	<name3> <name6> <name1> <name2> into default name space .
<name2> <name6>	<name2> module <name6> .
<name1> <name5> . utils . deprecation <name3> <name6>	<name1> <name5> .utils .deprecation <name3> <name6> into default name space .
<name6> <name1> . utils . encoding <name3> <name2>	<name6> <name1> .utils .encoding <name3> <name2> into default name space .
<name3> <name5> . utils . functional <name1> <name2> , <name6>	<name3> <name5> .utils .functional <name1> <name2> and <name6> into default name space .
<name2> <name1> . utils <name6> <name5>	<name2> <name1> .utils <name6> <name5> into default name space .
<name2> <name5> . utils . six . moves <name1> <name6>	<name2> <name5> .utils .six .moves <name1> <name6> into default name space .
<name4> <name2> . utils . translation <name1> <name6> , <name3> <name5> <name4> , <name2>	<name4> <name2> .utils .translation <name1> <name6> , <name3> <name5> <name4> and <name2> into default name space .
<name5> <name6> . utils . safestring <name4> <name1>	<name5> <name6> .utils .safestring <name4> <name1> into default name space .
<name2> <name4> . PY2 :	<name2> <name4> .PY2 is true ,
<name4> <name3> . utils . encoding <name5> <name2>	<name4> <name3> .utils .encoding <name5> <name2> .
<name3> = <name4> <name6> : <name6> and <name2> ( <name6> ) [ 0 ] . upper ( ) + <name2> ( <name6> ) [ 1 : ]	if identity <name4> function returns false , substitute the <name6> for <name3> , if not call the function <name2> with an argument <name6> ,
<name2> = <name5> ( <name2> , <name3> . text_type )	convert the first element of the result to uppercase , append to it the rest of the result , substitute it for <name2> . call the function <name5> with 3 arguments : <name2> and <name3> .text_type .
\ re_words = <name1> . compile ( r <val2>   , <name1> . U |  <name1> . S ) \	\ call the function <name1> .compile with 2 arguments : raw string <val2> and bitwise OR performed with 2 operands , \
re_chars = <name2> . compile ( r <val5>   , <name2> . U |  <name2> . S )	<name2> .U and <name2> .S , substitute the result for re_words . call the function <name2> .compile with 2 arguments : raw string <val5> and bitwise OR performed with 2 operands ,
\ re_tag = <name6> . compile ( r <val1>   , <name6> . S ) \	\ <name6> .U and <name6> .S , substitute the result for re_chars . call the function <name6> .compile with 2 arguments : raw string <val1> and bitwise OR performed with 2 operands , \
\ <name6> = <name2> . compile ( r <val5>   ) \	\ <name2> .U and <name2> .S , substitute the result for re_chars . call the function <name2> .compile with an argument raw string <val5> , substitute the result for <name6> . \
<name1> = <name6> . compile ( r <val4>   )	call the function <name6> .compile with an argument raw string <val4> , substitute the result for <name1> .
def <name5> ( <name4> , <name6> ) :	define the function <name5> with 2 arguments <name4> and <name6> .
<name6> = <name3> ( <name6> )	call the function <name3> with an argument <name6> , substitute the result for <name6> .
def <name6> ( ) :	define the function <name6> .
<name2> <name5> <name6> <name4> . splitlines ( <name3> ) :	call the method <name4> .splitlines with an argument boolean <name3> , <name2> every <name5> <name6> the result ,
\ <name3> = min ( ( <name5> . endswith ( '\\n'   ) and <name6> + <val2> or <name6> ) , <name6> ) \	if <name5> ends with a new <name5> character substitute <name6> incremented by integer <val2> for <name3> , if not substitute <name6> for <name3> .
<name6> len ( <name1> ) >  <name5> :	<name6> length of <name1> is grater than <name5> ,
space = <name4> [ : <name1> + <val6> ] . rfind ( ' '   ) + <val6>	get fist <name1> incremented by <val6> elements from <name4> , find index of the first occurrenece of whitespace from the right side ,
<name1> <name3> == <val2> :	add integer 1 to it , substitute the result for <name3> . <name1> <name3> equals integer <val2> ,
<name2> = <name4> . <name3> ( ' '   ) + <val5>	<name3> first index of whitespace occurrence in <name4> , add integer <val5> to it , substitute the result for <name2> .
<name6> <name5> == <val4> :	<name6> <name5> equals integer <val4> ,
     <name2> <name4>	<name2> <name4> .
<name1> = ''	<name1> is an empty string .
<name3>	<name3> from the loop execution
\ <name6> '%s\\n'   % <name1> [ : <name3> - <val5> ] \	get the first <name3> decremented with integer <val5> elements from string <name1> , append newline character to it , and <name6> the result .
<name2> = <name2> [ <name3> : ]	remove all the elements from <name3> index of <name2> .
\ <name4> = min ( ( <name2> . endswith ( '\\n'   ) and <name3> + <val5> or <name3> ) , <name3> ) \	if <name2> ends with a new <name2> character substitute <name3> incremented by integer <val5> for <name4> , if not substitute <name3> for <name4> .
<name3> <name6> :	<name3> <name6> is true ,
<name4> <name5>	<name4> <name5> .
<name4> ''   . <name2> ( <name6> ( ) )	call the function <name6> , <name2> the result into a string , <name4> the result .
<name1> = <name4> ( <name1> , <name3> . text_type )	call the function <name4> with 2 arguments : <name1> and <name3> .text_type , substitute the result for <name1> .
<name5> <name3> ( <name1> ) :	derive the <name5> <name3> form the <name1> <name5> .
def <name3> ( <name6> , <name1> ) :	define the method <name3> with 2 arguments : <name6> and <name1> .
super ( <name1> , self ) . <name6> ( lambda : force_text ( text ) )	call the method <name6> from the base class of the class <name1> ,
def <name5> ( <name4> , <name6> , <name1> = <name2> ) :	called with with an argument lambda function which returns result of the force_text function called with an argument <name6> . define the method <name5> with 3 arguments : <name4> , <name6> and <name1> set to <name2> .
<name3> <name6> <name5> <name4> :	<name3> <name6> <name5> <name4> ,
<name5> = <name2> ( <val3>   , <val4>   )	call the function <name2> with an argument <val3> , <val4> , substitute the result for <name5> .
<name6> = <name5> ( <name6> )	call the function <name5> with an argument <name6> , substitute the result for <name6> .
<name3> <val4>   <name1> <name6> :	<name3> string <val4> is contained <name1> <name6> ,
<name4> <name2> % {  <val5>   : <name3> }	format <name2> with a dictionary with an element : <name3> for <val5> , <name4> the result .
<name2> <name3> . endswith ( <name5> ) :	<name2> <name3> ends with <name5> ,
<name5> <name2>	<name5> <name2> .
<name6> '%s%s'   % ( <name4> , <name1> )	append <name1> to <name4> , <name6> the result .
def <name6> ( <name5> , <name1> , <name3> = <name4> , <name2> = <name6> ) :	define the method <name6> with 4 arguments : <name5> , <name1> , <name3> set to <name4> , <name2> set to boolean <name6> .
<name1> = int ( <name6> )	convert <name6> to an integer , substitute it for <name1> .
<name1> = <name4> . normalize ( <val2>   , <name3> . _wrapped )	call the function <name4> .normalize with 2 arguments : string <val2> and <name3> ._wrapped , substitute the result for <name1> .
<name3> = <name6>	substitute <name6> for <name3> .
<name3> <name4> <name6> <name1> . add_truncation_text ( ''   , <name5> ) :	<name3> every <name4> <name6> result of the <name1> .add_truncation_text , called with 2 arguments : an empty string and <name5> .
<name6> not <name3> . combining ( <name2> ) :	call the method <name3> .combining with an argument <name2> , <name6> it evaluates to false ,
<name2> -= <val5>	decrement <name2> by integer <val5> .
<name2> <name6> == <val5> :	<name2> <name6> equals integer <val5> .
<name6>	<name6> from the loop execution .
<name1> <name4> :	<name1> <name4> is true ,
<name2> <name3> . _truncate_html ( <name5> , <name1> , <name4> , <name6> , <name2> )	call the function <name3> ._truncate_html with 5 arguments : <name5> , <name1> , <name4> , <name6> and boolean <name2> , <name2> the result .
<name1> <name4> . _text_chars ( <name3> , <name6> , <name2> , <name5> )	call the method <name4> ._text_chars with 4 arguments : <name3> , <name6> , <name2> and <name5> , <name1> the result .
<name4> = <name1> ( <name4> )	call the function <name1> with an argument <name4> , substitute the result for <name4> .
def <name3> ( <name4> , <name2> , <name6> , <name1> , <name5> ) :	define the method <name3> with 5 arguments : <name4> , <name2> , <name6> , <name1> and <name5> .
<name4> = <val2>	<name4> is integer <val2> .
<name6> = <name1>	<name6> is <name1> .
<name5> <name4> , <name3> <name6> enumerate ( <name2> ) :	<name5> every <name4> and <name3> <name6> enumerated <name2> ,
<name3> <name1> . combining ( <name2> ) :	call the function <name1> .combining with an argument <name2> , <name3> it evaluates to true ,
continue	skip this loop iteration , s
<name5> += <val1>	increment <name5> by integer <val1> ,
<name6> <name1> <name3> <name2> <name5> <name4> >  <name6> :	<name6> <name1> <name3> <name2> <name5> <name4> <name3> greater than <name6> ,
<name4> = <name2>	substitute <name2> for <name4> .
<name4> <name6> >  <name2> :	<name4> <name6> is greater than <name2> ,
return <name3> . add_truncation_text ( <name4> [ : <name2> or 0 ] , truncate )	call the method <name3> .add_truncation_text with 2 arguments : if <name2> is greater than zero , first <name2> elements of <name4> ,
<name6> <name3>	if not an empty string , and truncate , <name6> the result . <name6> <name3> .
def <name6> ( <name2> , <name4> , <name5> = <name3> , <name1> = <name6> ) :	define the method <name6> with 4 arguments : <name2> , <name4> , <name5> set to <name3> , <name1> set to boolean <name6> .
<name6> = int ( <name2> )	convert <name2> to an integer , substitute the result for <name6> .
<name3> <name6> :	<name3> <name6> is true ,
<name6> <name1> . _truncate_html ( <name4> , <name3> , <name1> . _wrapped , <name4> , <name5> )	call the method <name1> ._truncate_html with 5 arguments : <name4> , <name3> , <name1> ._wrapped , <name4> and boolean <name5> , <name6> the result .
<name3> <name6> . _text_words ( <name2> , <name5> )	call the method <name6> ._text_words with 2 arguments <name2> and <name5> , <name3> the result .
<name2> = <name4> ( <name2> )	call the function <name4> with an argument <name2> , substitute the result for <name2> .
def <name2> ( <name6> , <name3> , <name4> ) :	define the method <name2> with 3 arguments : <name6> , <name3> and <name4> .
<name6> = <name4> . _wrapped . <name1> ( )	<name1> <name4> ._wrapped into <name6> , substitute the result for <name6> .
<name3> len ( <name5> ) >  <name6> :	<name3> <name6> of <name5> is greater than <name6> ,
<name1> = <name1> [ : <name6> ]	substitute first <name6> elements of <name1> for <name1> .
return <name4> . add_truncation_text ( ' '   . join ( <name5> ) , truncate )	call the method <name4> .add_truncation_text with 2 arguments : elements of <name5> joined in a string , separated with whitespaces ,
<name2> ' '   . join ( <name5> )	and truncate , <name2> the result . <name2> elements of <name5> joined in a string , separated with whitespaces .
def <name6> ( <name4> , <name5> , <name3> , <name1> , <name2> , <name6> ) :	define the method <name6> with 6 arguments : <name4> , <name5> , <name3> , <name1> , <name2> and <name6> .
<name6> <name4> <name5> <name3> <= <val2> :	<name6> <name4> is not empty <name5> <name3> is smaller than or equal to integer <val2> ,
<name5> ''	<name5> an empty string .
<name4> = ( <val2>   , <val5>   , <val6>   , <val1>   , <val3>   , <val4>   , <val2>   , <val5>   , <val6>    )	<name4> is a tuple with 9 elements : strings <val2> , <val5> , <val6> , <val1> , <val3> , <val4> , <val2> , <val5> and <val6> .
<name4> = <val6>	<name4> is equal to integer <val6> .
<name4> = <val3>	<name4> is equal to integer <val3> .
<name2> = <val4>	<name2> is equal to integer <val4> .
<name6> = [ ]	<name6> is an empty list .
<name4> = <name3> <name6> <name5> else <name2>	<name6> <name5> is true , substitute <name3> for <name4> , <name6> not substitute <name2> for <name4> .
<name4> <name6> <= <name1> :	<name4> <name6> is smaller than or equal to <name1> ,
m = <name5> . search ( <name2> , <name6> )	call the method <name5> .search with 2 arguments : <name2> and <name6> .
<name1> not <name6> :	<name1> <name6> is false ,
<name4>	<name4> from the loop execution ,
<name5> = <name2> . end ( <val3> )	call the method <name2> .end with an argument integer <val3> , substitute the result for <name5> .
<name6> <name5> . group ( 1 ) :	call the function <name5> .group , <name6> the result evaluates to true ,
<name5> += <val2>	increment <name5> by integer <val2> ,
<name2> <name6> == <name4> :	<name2> <name6> equals <name4> ,
<name4> = <name2>	substitute <name2> for <name4> .
continue	skip this loop iteration .
tag = <name4> . match ( <name5> . group ( <val3> ) )	call the method <name5> .group with an argument integer <val3> , use it as an argument for the call to the <name4> .match function ,
<name5> not <name3> <name2> <name6> >= <name1> :	substitute the result for <name3> . <name5> <name3> is false <name2> <name6> is greater <name2> equal to <name1> ,
continue	skip this loop iteration .
<name4> , <name3> , <name5> = <name1> . groups ( )	call the method <name1> .groups , substitute the result for <name4> , <name3> and <name5> , respectively .
<name6> = <name6> . lower ( )	convert <name6> to lowercase , substitute it for <name6> .
<name2> <name6> <name4> <name5> <name1> <name3> :	<name2> <name6> is true <name4> <name5> is contained <name1> <name3> ,
pass	do nothing .
elif <name2> :	otherwise if <name2> is true ,
<name5> :	<name5> ,
<name3> = open_tags . <name5> ( <name4> )	get the <name5> of the first occurrence of <name4> , substitute it for <name3> .
except <name3> :	if <name3> exception is caught ,
pass	do nothing .
else :	if not ,
   <name2> = <name2> [ <name3> + <val1> : ]	create a list out of <name2> elements form ( <name3> + <val1> ) - th index to the end , substitute it for <name2> .
else :	if not ,
<name3> . <name2> ( 0 , <name1> )	<name2> <name1> at the beginning of <name3> .
<name6> <name1> <= <name3> :	<name6> <name1> is smaller than or equal to <name3> ,
<name6> <name4>	<name6> <name4> .
<name2> = <name5> [ : <name1> ]	create a list <name2> of fist <name1> <name5> elemnts , substitue it for <name2> .
<name3> = <name6> . add_truncation_text ( ''   , <name5> )	call the method <name6> .add_truncation_text with 2 arguments : an empty string and <name5> , substitute it for <name3> .
<name1> <name4> :	<name1> <name4> is true ,
<name6> += <name1>	append <name1> to <name6> .
<name4> <name5> <name6> <name2> :	<name4> every <name5> <name6> <name2> ,
<name1> += <val6>   % <name2>	replace '%s' in string <val6> with <name2> , append the result to <name1> .
<name2> <name4>	<name2> <name4> .
def <name4> ( <name1> ) :	define the function <name4> with an argument <name1> .
<name3> = <name2> ( <name3> ) . <name1> ( ) . replace ( ' '   , '_'   )	call the function <name2> with an argument <name3> , <name1> the result of whitespaces from both ends ,
\ <name5> <name1> . sub ( r <val4>   , ''   , <name6> ) \	\ replace every occurrence of whitespaces in the previous result for '_' , substitute the result for <name6> . call the function <name1> .sub with 3 arguments : raw string <val4> , an empty string and <name6> , <name5> the result . \
<name2> = <name5> ( <name2> , <name6> . text_type )	call the function <name5> with 2 arguments : <name2> and <name6> .text_type , substitute the result for <name2> .
def <name1> ( <name5> , <name4> = <name6> ( <val3>   ) ) :	define the function <name1> with 2 arguments : <name5> and <name4> set to result of the function <name6> called with an argument string <val3> .
if len ( <name5> ) == <val3> :	is length of <name5> equals integer <val3> ,
<name5> ''	<name5> an empty string .
<name6> len ( <name2> ) == <val1> :	<name6> length of <name2> equals integer <val1> ,
<name3> <name4> ( <name2> [ 0 ] )	call the function <name4> with first element of <name2> as an argument , <name3> the result .
<name6> <val1>   % ( _ ( ', '   ) . join ( <name2> ( <name4> ) for <name4> in list_ [ : - 1 ] ) , <name2> ( last_word ) , <name2> ( list_ [ - 1 ] ) )	<name6> a string <val1> formated with 3 elements : result of the function <name2> called with an argument <name4> ,
<name1> = <name5> ( <name1> , <name3> . text_type )	separated by result of the function _ called with an argument string ', ' , for every i in list_ without last element , result of the function force_text called with an argument last_word , result of the function force_text called with an argument : last element of list_ . call the function <name5> with 2 arguments : <name1> and <name3> .text_type , substitute the result for <name1> .
def <name3> ( <name1> ) :	define the function <name3> with an argument <name1> .
<name1> = <name5> ( <name1> )	call the function <name5> with an argument <name1> , substitute the result for <name1> .
\ <name3> <name1> . sub ( <val4>   , <name2> ) \	\ call the method <name1> .sub with 2 arguments : <val4> and <name2> , <name3> the result . \
<name4> = <name1> ( <name4> , <name2> . text_type )	call the function <name1> with 2 arguments : <name4> and <name2> .text_type , substitute the result for <name4> .
def <name2> ( <name5> ) :	define the function <name2> with an argument <name5> .
<name4> = {  <val1>   : '2'   , <val5>   : '2'   , <val3>   : '2'   , <val6>   : '3'   , <val2>   : '3'   , <val4>   : '3'   , <val1>   : '4'   , 'h'   : '4'   , 'i'   : '4'   , 'j'   : '5'   , 'k'   : '5'   , 'l'   : '5'   , 'm'   : '6'   , 'n'   : '6'   , 'o'   : '6'   , 'p'   : '7'   , 'q'   : '7'   , 'r'   : '7'   , 's'   : '7'   , 't'   : '8'   , 'u'   : '8'   , 'v'   : '8'   , 'w'   : '9'   , 'x'   : '9'   , 'y'   : '9'   , 'z'   : '9'  }	<name4> is an dictionary , with 26 elements : 2 for <val1> , 2 for <val5> , 2 for <val3> , 3 for <val6> , 3 for <val2> , 3 for <val4> , 4 for <val1> ,
<name2> ''   . <name1> ( <name6> . get ( <name5> , <name5> ) <name4> <name5> <name3> <name2> . lower ( ) )	4 <name4> 'h' , 4 <name4> 'i' , 4 <name4> 'j' , 5 <name4> 'k' , 5 <name4> 'l' , 5 <name4> 'm' , 6 <name4> 'n' , 6 <name4> 'o' , 6 <name4> 'p' , 7 <name4> 'q' , 7 <name4> 'r' , 7 <name4> 'r' , 7 <name4> 's' , 7 <name4> 't' , 8 <name4> 't' , 8 <name4> 'u' , 8 <name4> 'v' , 9 <name4> 'w' , 9 <name4> 'x' , 9 <name4> 'y' and 9 <name4> 'z' . <name4> every <name5> <name3> <name2> converted to lowercase , <name1> the value under the <name5> key of the <name6> dictionary into a string , <name2> it .
<name2> = <name3> ( <name2> )	call the function <name3> with an argument <name2> , substitute the result for <name2> .
def <name1> ( <name3> ) :	define the function <name1> with an argument <name3> .
<name5> = <name1> ( )	<name5> is an instance of <name1> class .
<name2> = <name4> ( <name5> = <val3>   , <name1> = <val6> , fileobj = zbuf )	<name2> is an instance of <name4> class , created with 3 arguments : <name5> set to string <val3> , <name1> set to integer <val6> ,
<name6> . write ( <name2> )	and fileobj set to zbuf . call the method <name6> .write with an argument <name2> .
<name3> . close ( )	call the method <name3> .close .
<name3> <name4> . getvalue ( )	call the method <name4> .getvalue , <name3> the result .
<name1> <name4> ( <name6> ) :	derive the <name1> <name4> from the <name6> base <name1> .
def <name4> ( <name2> ) :	define the method <name4> with an argument <name2> .
<name1> . vals = [ ]	<name1> .vals is an empty list .
def <name5> ( <name1> , <name4> ) :	define the method <name5> with 2 arguments : <name1> and <name4> .
<name6> . vals . <name4> ( <name1> )	<name4> <name1> to <name6> .vals .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name2> = b ''   . <name5> ( <name6> . vals )	<name5> elements of <name6> .vals into a bytes string , substitute the result for <name2> .
<name2> . vals = [ ]	<name2> .vals is an empty list .
<name3> <name1>	<name3> <name1> .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name3>	<name3> nothing .
def <name3> ( <name6> ) :	define the method <name3> with an argument <name6> .
<name6>	<name6> nothing .
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
<name3> = <name1> ( )	<name3> is an instance of <name1> class .
<name4> = <name1> ( <name6> = <val2>   , <name3> = <val5> , fileobj = buf )	<name4> is an instance of <name1> class , created with 3 arguments : <name6> set to string <val2> , <name3> set to integer <val5> ,
<name3> <name6> . <name1> ( )	and fileobj set to <name6> . <name1> data from <name6> file stream , <name3> the result .
<name2> <name1> <name3> <name4> :	<name2> every <name1> <name3> <name4> ,
<name6> . <name4> ( <name5> )	<name4> <name5> to <name6> stream .
<name6> . <name5> ( )	<name5> <name6> stream buffer .
<name4> <name2> . <name1> ( )	<name1> data from <name2> , <name4> the result .
<name5> . <name1> ( )	<name1> <name5> stream .
<name2> <name1> . <name3> ( )	<name3> data from <name1> , <name2> the result .
\ <name2> = <name1> . compile ( <val6> ) \	\ call the function <name1> .compile with an argument string <val6> , substitute the result for <name2> . \
def <name2> ( <name5> , <name3> = <name1> ) :	define the function <name2> with 2 arguments : <name5> and <name3> set to boolean <name1> .
"<name6> = ( ""django.utils.text.javascript_quote() is deprecated. "" ""Use django.utils.html.escapejs() instead."" )"	"<name6> is an string ""django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead."" ."
<name5> . warn ( <name3> , <name1> , <name6> = <val2> )	call the function <name5> .warn with 3 arguments : <name3> , <name1> and <name6> as integer <val2> .
def <name3> ( <name1> ) :	define the function <name3> with an argument <name1> .
\ return <val5> % ord ( <name2> . group ( <val1> ) ) \	\ get the unicode representation of result of the method <name2> .group called with an integer <val1> , format with in a string <val5> , \
<name6> <name3> ( <name1> ) == <name2> :	return the result . <name6> <name3> of <name1> equals <name2> ,
<name3> = <name3> . decode ( <val4>   )	call the method <name3> .decode with an argument string <val4> , substitute the result for <name3> .
elif <name6> ( <name2> ) != <name1> . text_type :	otherwise if , <name6> of <name2> doesnt equal to <name1> .text_type ,
<name1> <name2> ( <name4> )	<name1> an <name2> with an argument <name4> .
\ s = s . <name1> ( '\\\\' , ' \\\\\\\\'  ) \	\ <name1> every occurrence of '\\\\' in s with ' \\\\\\\\' . \
\ <name6> = <name6> . <name1> ( <val2>   , <val4>   ) \	\ <name1> every occurrence of <val2> in <name6> with <val4> . \
\ <name3> = <name3> . <name4> ( <val1>   , <val6>   ) \	\ <name4> every occurrence of <val1> in <name3> with <val6> . \
\ <name4> = <name4> . <name2> ( <val5>   , <val3>   ) \	\ <name2> every occurrence of <val5> in <name4> with <val3> . \
\ <name3> = <name3> . <name1> ( <val6>   , <val5>   ) \	\ <name1> every occurrence of <val6> in <name3> with <val5> . \
<name5> <name3> :	<name5> <name3> is true ,
<name6> <name1> . sub ( <name3> , <name4> )	call the method <name1> .sub with 2 arguments : <name3> and <name4> , <name6> the result .
<name3> = <name5> ( <name3> , <name6> . text_type )	call the function <name5> with 2 arguments : <name3> and <name6> .text_type , substitute the result for <name3> .
def <name2> ( <name6> ) :	and re .VERBOSE , substitute the result for smart_split_re . define the function <name2> with an argument <name6> .
<name4> = <name2> ( <name4> )	call the function <name2> with an argument <name4> , substitute the result for <name4> .
<name3> <name4> <name5> <name2> . finditer ( <name6> ) :	call the method <name2> .finditer with an argument <name6> , <name3> every <name4> <name5> result ,
<name4> <name2> . group ( <val1> )	call the method <name2> .group with an argument integer <val1> , <name4> the result .
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
<name5> = <name3> . group ( <val1> )	call the method <name3> .group with an argument integer <val1> , substitute the result for <name5> .
<name4> <name3> [ 0 ] == <val1>   :	<name4> first element of <name3> equals <val1> ,
<name6> = <name6> [ 1 : ]	remove first element of <name6> .
<name1> :	<name1> ,
<name4> <name2> [ 0 ] <name6> <val1>   :	<name4> first element of <name2> is contained <name6> <val1> .
<name6> = int ( <name5> [ 1 : ] , 16 )	convert <name5> without first element to hexadecimal integer , substitute it for <name6> .
else :	if nor ,
<name4> = int ( <name6> )	convert <name6> to an integer , substitute it for <name4> .
<name5> <name6> . unichr ( <name2> )	call the method <name6> .unichr with an argument <name2> , <name5> the result .
except <name1> :	if <name1> exception is caught ,
<name6> <name4> . group ( <val2> )	call the method <name4> .group with an argument integer <val2> , <name6> the result .
else :	if not ,
<name1> :	<name1> ,
<name3> <name5> . unichr ( <name6> . name2codepoint [ <name4> ] )	call the function <name5> .unichr with value under the <name4> key of the <name6> .name2codepoint dictionary , <name3> the result .
except ( <name1> , KeyError ) :	if OverflowError or <name1> exceptions are caught ,
<name5> <name2> . group ( <val3> )	call the method <name2> .group with an argument integer <val3> , <name5> the result .
\ <name2> = <name5> . compile ( r <val3> ) \	\ call the method <name5> .compile with an argument raw string <val3> , substitute the result for <name2> . \
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name2> <name6> . sub ( <name1> , <name3> )	call the method <name6> .sub with 2 arguments : <name1> and <name3> , <name2> the result .
<name2> = <name6> ( <name2> , <name5> . text_type )	call the function <name6> with 2 arguments : <name2> and <name5> .text_type , substitute the result for <name2> .
def <name1> ( <name2> ) :	define the function <name1> with an argument <name2> .
<name4> <name1> ( <val5> % <name3> )	"<name4> an <name1> exception wit an argument string <val5> , where ""%r"" is replaced with <name3> ."
<name3> = <name4> [ 0 ]	substitute first element of <name4> for <name3> .
\ return <name5> [ 1 : - 1 ] . <name4> ( r <val3>   % <name1> , <name1> ) . <name4> ( r '\\\\' , ' \\\\'  ) \	\ remove first and last elements of <name5> , <name4> every occurrence of string <val3> formated with <name1> with <name1> , \
<name3> = <name1> ( <name3> )	\ replace every occurrence of raw string '\\\\' in the result with string ' \\\\' , return the result . call the function <name1> with an argument <name3> , substitute the result for <name3> . \
def <name6> ( <name3> ) :	define the function <name6> with an argument <name3> .
<name5> = <name3> . normalize ( <val1>   , <name5> ) . <name6> ( <val4>   , 'ignore'   ) . decode ( <val4>   )	call the method <name3> .normalize with 2 arguments : string <val1> and <name5> , <name6> the result with 2 arguments : string <val4> ,
\ <name1> = <name6> . sub ( <val5>   , ''   , <name1> ) . <name3> ( ) . lower ( ) \	\ and string 'ignore' , call the method decode on the result with an argument string 'ascii' , substitute the result for <name1> . call the method <name6> .sub with 3 arguments : string <val5> , empty string and <name1> , <name3> the result of whitespaces from both ends , \
\ return mark_safe ( <name1> . sub ( <val5>   , <val2>   , <name4> ) ) \	\ and convert it to lowercase , substitute the result for <name4> . call the function <name1> .sub with 3 arguments : string <val5> , string <val2> and <name4> , use the result as an argument for the call to the , \
<name1> = <name5> ( <name1> , <name6> . text_type )	mark_safe function , return the result . call the function <name5> with 2 arguments : <name1> and <name6> .text_type , substitute the result <name1> .
def <name3> ( <name1> ) :	define the function <name3> with an argument <name1> .
\ return <name5> . sub ( r <val2>   , <name3> ) . <name1> ( ) . lower ( ) \	\ call the method <name5> .sub with 2 arguments : raw string <val2> and <name3> , <name1> the result of whitespaces from both ends , \
<name5> <name2> <name6> <name1>	<name5> <name2> <name6> <name1> into default name space .
<name5> <name6>	<name5> module <name6> .
<name2> <name3> . utils . html <name6> <name1>	<name2> <name3> .utils .html <name6> <name1> into default name space .
<name1> <name4> . utils . timezone <name6> <name3> , <name2>	<name1> <name4> .utils .timezone <name6> <name3> and <name2> into default name space .
<name3> <name5> . utils . translation <name2> <name6> , <name1>	<name3> <name5> .utils .translation <name2> <name6> and <name1> into default name space .
def <name3> ( <name6> , <name5> = <name4> , <name1> = <name2> ) :	define the function <name3> with <name6> , <name5> defaulting to <name4> , <name1> defaulting to <name2> as arguments .
<name5> = ( ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year'   , '%d years'   ) ) , ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month'   , '%d months'   ) ) , ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week'   , '%d weeks'   ) ) , ( 60 * 60 * 24 , ungettext_lazy ( '%d day'   , '%d days'   ) ) , ( 60 * 60 , ungettext_lazy ( '%d hour'   , '%d hours'   ) ) , ( 60 , ungettext_lazy ( '%d minute'   , '%d minutes'   ) ) )	<name5> is a tuple containing 6 initial tuples :
<name1> <name3> isinstance ( <name2> , <name5> . <name5> ) :	result of multiplication of integers : 60 , 60 , 24 , 365 , and return value of ungettext_lazy with 2 arguments : '%d year' , '%d years' , result of multiplication of integers : 60 , 60 , 24 , 30 , and return value of ungettext_lazy with 2 arguments : '%d month' , '%d month' , result of multiplication of integers : 60 , 60 , 24 , 7 , and return value of ungettext_lazy with 2 arguments : '%d weeks' , '%d weeks' , result of multiplication of integers : 60 , 60 , 24 , and return value of ungettext_lazy with 2 arguments : '%d days' , '%d days' , result of multiplication of integers : 60 , 60 , and return value of ungettext_lazy with 2 arguments : '%d hours' , '%d hours' , result of multiplication of integers : 60 , and return value of ungettext_lazy with 2 arguments : '%d minutes' , '%d minutes' , <name1> <name2> is <name3> an instance of <name5> .datetime ,
<name4> = <name2> . <name2> ( <name4> . year , <name4> . month , <name4> . day )	call the function <name2> .datetime with 3 arguments , <name4> .year , <name4> .month and <name4> .day , substitute the result for <name4> .
<name4> <name6> <name5> <name3> isinstance ( <name6> , <name2> . <name2> ) :	<name4> <name6> equals to boolean True <name5> <name6> is <name3> an instance of <name2> .datetime ,
<name6> = <name1> . <name1> ( <name6> . year , <name6> . month , <name6> . day )	call the function <name1> .datetime with 3 arguments , <name6> .year , <name6> .month and <name6> .day , substitute the result for <name6> .
<name3> not <name4> :	<name3> <name4> is false ,
<name4> = <name6> . <name6> . <name4> ( <name2> <name1> <name3> ( <name5> ) else <name4> )	call the function <name6> .datetime with <name2> as argument <name1> call to the <name3> ( <name5> ) returns True , <name1> not <name4> is the argument , store the result in <name4> .
<name6> = ( <name1> - <name3> ) <name4> <name2> else ( <name3> - <name1> )	<name4> <name2> is True substitute difference of <name1> and <name3> for <name6> , <name4> not substitute the difference of <name3> and <name1> for <name6> .
<name2> = <name4> . days * <val6> * <val3> * <val3> + <name4> . seconds	multiply <name4> .days , integer <val6> , integer <val3> and integer <val3> add <name4> .seconds to it , substitute the result for <name2> .
<name2> <name6> <= <val1> :	<name2> <name6> is lesser or equal to integer <val1> ,
<name4> <name2> ( <name5> ( <val1>   ) )	call the function <name5> with <val1> as argument , use the result as the argument for the call to the <name2> function , <name4> the result .
<name4> <name5> , ( <name1> , <name2> ) <name3> enumerate ( <name6> ) :	<name4> every <name5> and tuple containing 2 elements : <name1> and <name2> , <name3> enumerated <name6> ,
<name4> = <name3> // <name5>	divide <name3> by <name5> , store the floored result in <name4> .
<name6> <name3> != <val5> :	<name6> <name3> does not equals to integer <val5> ,
<name4>	<name4> the execution of the smallest enclosing loop .
<name1> = <name4> ( <name3> % <name6> )	use the remainder of the division of <name3> by <name6> as the argument for the call to the <name4> function , store the <name1> in <name1> .
<name5> <name3> + <val4> <  len ( <name2> ) :	<name5> <name3> incremented by <val4> is lesser than length of <name2> ,
<name1> , <name4> = <name6> [ <name2> + <val5> ]	get the element of <name6> at the ( <name2> + <val5> ) - the index , assign it to the <name1> and <name4> , respectively .
<name6> = ( <name4> - ( <name5> * <name1> ) ) // <name3>	multiply <name5> by <name1> , subtract it from <name4> , divide the result by <name3> , store the floored result in <name6> .
<name3> <name6> != <val5> :	<name3> <name6> does not equals to integer <val5> ,
<name1> += <name2> ( <val5>   ) + <name6> ( <name3> % <name4> )	call <name6> function with <name3> modulus <name4> as argument , call the <name2> with <val5> as argument , add previous 2 results , increment variable <name1> by it .
<name1> <name4>	<name1> <name4> .
def <name1> ( <name5> , <name4> = None ) :	define the function <name1> with 2 arguments , <name5> and <name4> defaulting to none .
<name6> <name5> ( <name4> , <name2> , <name3> = True )	evaluate the function <name5> with <name4> , <name2> and <name3> set to boolean true as arguments , <name6> the result .
<name6> <name4> <name5> <name4> , <name2> , <name1>	<name6> <name4> <name5> <name4> , <name2> and <name1> into default name space .
<name4> <name3> <name2> <name5>	<name4> <name3> <name2> <name5> into default name space .
<name6> <name4>	<name6> module <name4> .
<name1> <name5> <name3> <name2>	<name1> module <name5> <name3> <name2> .
<name6> :	<name6> ,
<name6> <name4>	<name6> <name4> .
except <name3> :	if <name3> exception is caught ,
<name5> = <name1>	<name5> is <name1> .
<name1> <name6> . conf <name4> <name3>	<name1> <name6> .conf <name4> <name3> into default name space .
<name6> <name5> . utils <name3> <name4>	<name6> <name5> .utils <name3> <name4> into default name space .
<name2> = [ <val1>   , <val4>   , <val5>   , <val3>   , 'get_current_timezone'   , 'get_current_timezone_name'   , 'activate'   , 'deactivate'   , 'override'   , 'localtime'   , 'now'   , 'is_aware'   , 'is_naive'   , 'make_aware'   , 'make_naive'   , ]	<name2> is a list with 15 elements : strings <val1> , <val4> , <val5> , <val3> ,
<name6> = <name3> ( <val5> )	'get_current_timezone' , 'get_current_timezone_name' , 'activate' , 'deactivate' , 'override' , 'localtime' , 'now' , 'is_aware' , 'is_naive' , 'make_aware' and 'make_naive' . call the function <name3> with an argument integer <val5> , substitute the result for <name6> .
<name6> <name5> ( <name3> ) :	derive the <name6> <name5> from the <name3> base <name6> .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name6> <val3>	<name6> a string <val3> .
def <name2> ( <name1> , <name5> ) :	define the method <name2> with 2 arguments <name1> and <name5> .
<name3> <name1>	<name3> <name1> .
def <name4> ( <name3> , <name2> ) :	define the method <name4> with 2 arguments <name3> and <name2> .
<name3> <val2>	<name3> a string <val2> .
def <name6> ( <name4> , <name1> ) :	define the method <name6> with 2 arguments <name4> and <name1> .
<name1> <name6>	<name1> <name6> .
<name1> <name2> ( <name5> ) :	derive the <name1> <name2> from the <name5> base <name1> .
def <name5> ( <name1> , <name4> = <name2> , <name6> = <name2> ) :	define the method <name5> with 3 arguments : <name1> , <name4> set to <name2> , <name6> set to <name2> .
<name6> <name5> <name4> <name3> <name2> :	<name6> <name5> <name4> <name3> <name2> ,
<name3> . __offset = <name4> ( <name5> = <name1> )	call the function <name4> with an argument <name5> set to <name1> , substitute the result for <name3> .__offset .
<name6> <name5> <name1> <name4> <name3> :	<name6> <name5> <name1> <name4> <name3> ,
<name1> . __name = <name2>	substitute <name2> for <name1> .__name .
def <name6> ( <name3> , <name2> ) :	define the method <name6> with 2 arguments : <name3> and <name2> .
<name2> <name1> . __offset	<name2> <name1> .__offset .
def <name5> ( <name3> , <name2> ) :	define the method <name5> with 2 arguments : <name3> and <name2> .
<name4> <name6> . __name	<name4> <name6> .__name .
def <name6> ( <name2> , <name1> ) :	define the method <name6> with 2 arguments : <name2> and <name1> .
<name4> <name1>	<name4> <name1> .
<name1> <name3> ( <name4> ) :	derive the <name1> <name3> from the <name4> base <name1> .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name1> . STDOFFSET = <name4> ( <name6> = - <name2> . timezone )	call the function <name4> with an argument <name6> set to negative <name2> .timezone , substitute the result for <name1> .STDOFFSET .
<name4> <name6> . daylight :	<name4> <name6> .daylight is true ,
<name2> . DSTOFFSET = <name4> ( <name3> = - <name6> . altzone )	call the function <name4> with an argument <name3> set to negative <name6> .altzone , substitute the result for <name2> .DSTOFFSET .
else :	if not ,
<name1> . DSTOFFSET = <name1> . STDOFFSET	substitute <name1> .STDOFFSET for <name1> .DSTOFFSET .
<name5> . DSTDIFF = <name5> . DSTOFFSET - <name5> . STDOFFSET	subtract <name5> .STDOFFSET with <name5> .DSTOFFSET , substitute the result for <name5> .DSTDIFF .
<name6> . __init__ ( <name1> )	call the method <name6> .__init__ with an argument <name1> .
def <name3> ( <name4> , <name2> ) :	define the method <name3> with 2 arguments : <name4> and <name2> .
<name5> <name3> . _isdst ( <name2> ) :	call the method <name3> ._isdst with an argument <name2> , <name5> it evaluates to true ,
<name3> <name2> . DSTOFFSET	<name3> <name2> .DSTOFFSET .
else :	if not ,
<name5> <name6> . STDOFFSET	<name5> <name6> .STDOFFSET .
def dst ( <name1> , <name2> ) :	define the method utcoffset with 2 arguments : <name1> and <name2> .
<name5> <name4> . _isdst ( <name6> ) :	call the method <name4> ._isdst with an argument <name6> , <name5> it evaluates to true ,
<name1> <name5> . DSTDIFF	<name1> <name5> .DSTDIFF .
else :	if not ,
<name1> <name5>	<name1> <name5> .
def <name2> ( <name1> , <name6> ) :	define the method <name2> with 2 arguments : <name1> and <name6> .
<name4> <name3> . tzname [ <name6> . _isdst ( <name1> ) ]	call the method <name6> ._isdst with an argument <name1> , use it as an key to get the value from the <name3> .tzname dictionary , <name4> it .
def <name2> ( <name1> , <name5> ) :	define the method <name2> with 2 arguments : <name1> and <name5> .
<name1> = ( <name6> . year , <name6> . month , <name6> . day , <name6> . hour , <name6> . minute , <name6> . second , <name6> . weekday ( ) , 0 , 0 )	<name1> is a tuple with 9 elements : <name6> .year , <name6> .month , <name6> .day , <name6> .hour , <name6> .minute , <name6> .second , result of the method <name6> .weekday ,
<name2> = <name6> . mktime ( <name1> )	ingeter 0 and integer 0 . call the method <name6> .mktime with an argument <name1> , substitute the result for <name2> .
<name1> = <name4> . localtime ( <name5> )	call the method <name4> .localtime with an argument <name5> , substitute the result for <name1> .
<name3> <name6> . tm_isdst >  <val5>	if <name6> .tm_isdst is greater than integer <val5> , <name3> the result .
<name3> <name6> ( <name2> ) :	derive the <name3> <name6> from the <name2> base <name3> .
def <name6> ( <name1> , <name3> ) :	define the method <name6> with 2 arguments : <name1> and <name3> .
<name5> = <name2> <name6> <name1> <name3> <name4> else self . <name5> ( <name1> )	<name6> <name1> <name3> <name4> , <name5> <name3> boolean <name2> , otherwise call the method <name5> with an argument <name1> , substitute the result for <name5> .
<name5> <name2> . tzname [ <name3> ]	<name5> the value under the <name3> key of the <name2> .tzname dictionary .
def <name3> ( <name6> , <name1> ) :	define the method <name3> with 2 arguments : <name6> and <name1> .
<name3> :	<name3> ,
<name1> super ( <name3> , self ) . <name4> ( <name5> )	call the method <name4> with an argument <name5> from the base class of the class <name3> , <name1> the result .
except ( <name6> , <name2> ) as <name1> :	if <name6> or <name2> , renamed to <name1> , exceptions are caught ,
<name2> = <name6> ( <name4> )	get the <name6> of the <name4> object , substitute it for <name2> .
exc_value = <name6> ( <val3> % <name5> )	call the function <name6> with an argument string <val3> , replace '%s' with <name5> ,
<name3> . __cause__ = <name6>	substitute the result for <name3> . substitute <name6> for <name3> .__cause__ .
<name3> . reraise ( <name5> , <name4> , <name1> . exc_info ( ) [ 2 ] )	call the function <name3> .reraise with 3 arguments : <name5> , <name4> and third element of the result of the method <name1> .exc_info .
<name6> = <name2> . <name6> <name5> <name2> else <name1> ( )	<name5> <name2> is true , substitute <name2> .utc for <name6> , otherwise substitute result of the function <name1> for <name6> .
def <name1> ( <name3> ) :	define the function <name1> with an argument <name3> .
<name4> isinstance ( <name5> , <name3> ) :	<name4> <name5> is an instance of <name3> class ,
<name6> = <name6> . seconds // 60	substitute <name6> .seconds for <name6> .
<name1> = <val5>   <name3> <name4> <  <val2> else <val6>	<name3> <name4> is smaller than integer <val2> , <name1> is <val5> , otherwise <name1> is <val6> .
<name3> = <val1>   % divmod ( abs ( <name2> ) , <val5> )	divide absolute <name2> by module <val5> , use the result to format string <val1> , substitute it for <name3> .
<name1> = <name2> + <name6>	sum <name2> and <name6> , substitute the result for <name1> .
<name2> <name5> ( <name3> , <name6> )	<name2> an instance of <name5> class , created with 2 arguments : <name3> and <name6> .
<name3> = <name4>	<name3> is <name4> .
def <name5> ( ) :	define the function <name5> .
<name3> <name2>	use <name3> variable <name2> .
<name2> <name6> <name4> <name3> :	<name2> <name6> <name4> <name3> ,
<name6> isinstance ( <name3> . TIME_ZONE , <name4> . string_types ) <name1> <name2> <name5> <name6> <name3> :	<name6> <name3> .TIME_ZONE <name5> an instance of <name4> .string_types <name1> <name2> <name5> <name6> <name3> ,
<name3> = <name4> . timezone ( <name2> . TIME_ZONE )	call the method <name4> .timezone with an argument <name2> .TIME_ZONE , substitute the result for <name3> .
else :	if not ,
<name5> = <name3> ( )	<name5> is an instance of <name3> class .
<name6> <name4>	<name6> <name4> .
def <name4> ( ) :	define the function <name4> .
<name1> <name6> ( <name3> ( ) )	call the function <name3> , use the result as an argument for the call to the function <name6> , <name1> the result .
<name4> = <name2> ( )	call the method <name2> , substitute the result for <name4> .
def <name5> ( ) :	define the function <name5> .
<name6> getattr ( <name1> , <val2> , <name4> ( ) )	get <val2> attribute of the <name1> object , if it exists <name6> it , if not , call the function <name4> and <name6> the result .
def <name4> ( ) :	define the function <name4> .
<name4> <name6> ( <name3> ( ) )	call the function <name3> , use the result as an argument for the call to the function <name6> , <name4> the result .
def <name6> ( <name3> ) :	define the function <name6> with an argument <name3> .
<name5> :	<name5> ,
<name2> <name6> . zone	<name2> <name6> .zone .
except <name1> :	if <name1> exception is caught ,
<name4> <name6> . tzname ( <name2> )	call the method <name6> .tzname with an argument <name2> , <name4> the result .
def <name2> ( <name3> ) :	define the function <name2> with an argument <name3> .
<name6> isinstance ( <name1> , <name5> ) :	<name6> <name1> is an instance of <name5> ,
<name1> . value = <name5>	substitute <name5> for <name1> .value .
elif isinstance ( <name6> , <name2> . string_types ) <name4> <name3> <name1> <name5> <name6> :	otherwise if <name6> <name1> an instance of <name2> .string_types <name4> <name3> <name1> <name5> <name6> ,
<name1> . value = <name5> . <name2> ( <name2> )	call the method <name5> .timezone with an argument <name2> , substitute the result for <name1> .value .
else :	if not ,
<name2> <name1> ( <val3> % <name5> )	<name2> an <name1> with an argument string <val3> , substitute '%r' with <name5> .
def <name3> ( ) :	define the function <name3> .
<name6> hasattr ( _active , <val1> ) :	<name6> active has an attribute <val1> ,
del <name6> . value	delete <name6> .value .
<name3> <name2> ( <name5> ) :	derive the <name3> <name2> from the <name5> base <name3> .
def <name6> ( <name5> , <name2> ) :	define the method <name6> with 2 arguments : <name5> and <name2> .
<name1> . <name5> = <name5>	substitute <name5> for <name1> .timezone .
self . old_timezone = getattr ( <name6> , <val4>   , None )	get <val4> attribute of the <name6> object
def <name1> ( <name6> ) :	define the method <name1> with an argument <name6> .
<name3> <name1> . timezone <name2> <name5> :	<name3> <name1> .timezone <name2> <name5> ,
<name3> ( )	call the method <name3> .
else :	if not ,
<name2> ( <name3> . timezone )	call the method <name2> with an argument <name3> .timezone .
def <name2> ( <name1> , <name5> , <name3> , <name4> ) :	define the method <name2> with 4 arguments <name1> , <name5> , <name3> and <name4> .
<name2> <name5> . old_timezone <name6> <name4> :	<name2> <name5> .old_timezone <name6> <name4> ,
<name1> ( )	call the method <name1> .
else :	if not ,
<name3> . value = <name1> . old_timezone	substitute <name1> .old_timezone for <name3> .value .
def <name6> ( <name4> , <name3> = <name1> ) :	define the function <name6> with 2 arguments : <name4> and <name3> set to <name1> .
should_convert = ( isinstance ( <name5> , <name3> ) <name6> ( <name1> . USE_TZ <name4> <name2> <name5> <name3> <name6> <name2> ) <name6> not <name1> ( <name5> ) <name6> getattr ( <name5> , 'convert_to_local_time'   , True ) )	<name4> <name5> <name5> an instance of <name3> <name6> <name1> .USE_TZ <name4> <name2> <name5> <name3> <name6> <name2> <name6> call to the function <name1> ,
<name1> <name4> ( <name6> ) <name2> <name3> else <name6>	with an argument <name6> evaluates to false , and <name2> 'convert_to_local_time' attribute of <name6> object doesnt exists , or is it does is boolean True , <name3> is boolean True , otherwise is boolean False . <name2> <name3> is true , call the function <name4> with an argument <name6> and <name1> the result , otherwise <name1> <name6> .
def <name1> ( <name4> , <name5> = <name6> ) :	define the function <name1> with 2 arguments : <name4> and <name5> set to <name6> .
<name5> <name4> <name2> <name3> :	<name5> <name4> <name2> <name3> ,
<name6> = <name1> ( )	call the function <name1> , substitute the result for <name6> .
<name4> = <name4> . astimezone ( <name1> )	call the method <name4> .astimezone with an argument <name1> , substitute the result for <name4> .
<name1> hasattr ( <name5> , <val4>   ) :	<name1> <name5> has an attribute <val4> ,
<name2> = <name5> . normalize ( <name2> )	call the method <name5> .normalize with an argument <name2> , substitute the result for <name2> .
<name4> <name5>	<name4> <name5> .
def <name2> ( ) :	define the function <name2> .
<name2> <name3> . USE_TZ :	<name2> <name3> .USE_TZ is true ,
<name2> <name4> . utcnow ( ) . <name3> ( <name5> = <name1> )	call the method <name4> .utcnow , on the result call the method <name3> with an argument <name5> set to <name1> , <name2> the result .
else :	if not ,
<name1> <name3> . now ( )	call the method <name3> .now , <name1> the result .
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
return <name2> . tzinfo <name5> <name3> <name6> <name1> <name2> . tzinfo . utcoffset ( <name2> ) <name5> <name3> <name6>	if <name2> .tzinfo <name5> <name3> <name6> <name1> call to the method <name2> .tzinfo .utcoffset called with an argument <name2> evaluates to <name3> <name6> ,
def <name1> ( <name3> ) :	return boolean True , otherwise return boolean False . define the function <name1> with an argument <name3> .
return <name6> . tzinfo <name3> <name5> or <name6> . tzinfo . utcoffset ( <name6> ) <name3> <name5>	if <name6> .tzinfo <name3> <name5> and call to the method <name6> .tzinfo .utcoffset called with an argument <name6> evaluates to <name5> ,
def <name4> ( <name5> , <name6> ) :	return boolean True , otherwise return boolean False . define the function <name4> with 2 arguments : <name5> and <name6> .
<name2> hasattr ( <name4> , <val3>   ) :	<name2> <name4> has an attribute <val3> ,
<name1> <name6> . localize ( <name4> , <name2> = <name5> )	call the method <name6> .localize with 2 arguments : <name4> and <name2> as <name5> , <name1> the result .
else :	if not ,
<name6> <name4> ( <name3> ) :	call the function <name4> with an argument <name3> , <name6> it evaluates to true ,
<name1> <name5> ( <val4> % <name3> )	<name1> an <name5> exception with an argument string <val4> , where '%s' is replaced with <name3> .
<name5> <name4> . replace ( <name3> = <name6> )	call the method <name4> .replace with an argument <name3> as <name6> , <name5> the result .
def <name5> ( <name4> , <name2> ) :	define the function <name5> with 2 arguments : <name4> and <name2> .
<name2> = <name2> . astimezone ( <name1> )	call the method <name2> .astimezone with an argument <name1> , substitute the result for <name2> .
<name3> hasattr ( <name1> , <val6>   ) :	<name3> <name1> has an attribute <val6> ,
<name5> = <name4> . normalize ( <name5> )	call the method <name4> .normalize with an argument <name5> , substitute the result for <name5> .
<name3> <name5> . replace ( <name6> = <name4> )	call the method <name5> .replace with an arugment <name6> set to <name4> , <name3> the result .
<name6> <name1> <name3> <name2>	<name6> <name1> <name3> <name2> into default name space .
<name1> <name5>	<name1> module <name5> .
<name2> <name5> . utils . encoding <name3> <name4>	<name2> <name5> .utils .encoding <name3> <name4> into default name space .
<name3> <name6> . utils . functional <name1> <name5>	<name3> <name6> .utils .functional <name1> <name5> into default name space .
<name1> <name4> . utils <name2> <name5>	<name1> <name4> .utils <name2> <name5> into default name space .
<name2> = [ <val5>   , <val4>   , <val3>   , <val6>   , <val1>   , 'get_language_from_request'   , 'get_language_info'   , 'get_language_bidi'   , 'check_for_language'   , 'to_locale'   , 'templatize'   , 'string_concat'   , 'gettext'   , 'gettext_lazy'   , 'gettext_noop'   , 'ugettext'   , 'ugettext_lazy'   , 'ugettext_noop'   , 'ngettext'   , 'ngettext_lazy'   , 'ungettext'   , 'ungettext_lazy'   , 'pgettext'   , 'pgettext_lazy'   , 'npgettext'   , 'npgettext_lazy'   , 'LANGUAGE_SESSION_KEY'   , ]	<name2> is an list containing strings : <val5> , <val4> , <val3> , <val6> , <val1> ,
<name4> = <val1>	'get_language_from_request' , 'get_language_info' , 'get_language_bidi' , 'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' , 'gettext' , 'gettext_lazy' , 'gettext_noop' , 'ugettext' , 'ugettext_lazy' , 'ugettext_noop' , 'ngettext' , 'ngettext_lazy' , 'ungettext' , 'ungettext_lazy' , 'pgettext' , 'pgettext_lazy' , 'npgettext' , 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY' . <name4> is an string <val1> .
<name5> <name3> ( <name4> ) :	derive the <name5> <name3> from the <name4> base <name5> .
pass	do nothing .
<name3> <name5> ( <name1> ) :	derive the <name3> <name5> from the <name1> base <name3> .
def <name2> ( <name5> , <name6> ) :	define the method <name2> with 2 arguments : <name5> and <name6> .
<name2> <name4> . conf <name6> <name5>	<name2> <name4> .conf <name6> <name5> .
<name2> <name4> . USE_I18N :	<name2> <name4> .USE_I18N is true ,
<name4> <name1> . utils . translation <name6> <name2> <name5> <name3>	<name4> <name1> .utils .translation <name6> <name2> <name5> <name3> .
else :	if not ,
<name1> <name5> . utils . translation <name6> <name3> <name4> <name2>	<name1> <name5> .utils .translation <name6> <name3> <name4> <name2> .
setattr ( <name1> , <name3> , getattr ( <name6> , <name3> ) )	set <name3> attribute of the <name1> object to value of <name3> attribute of <name6> object .
<name4> getattr ( <name5> , <name3> )	get attribute <name3> from the <name5> object , <name4> it .
<name3> = <name2> ( )	<name3> is an instance of <name2> class .
del <name5>	delete <name5> .
def <name5> ( <name6> ) :	define the function <name5> with an argument <name6> .
return <name2> . gettext_noop ( <name4> )	call the method <name2> .gettext_noop with an argument <name4> .
<name2> = <name6>	substitute <name6> for <name2> .
def gettext ( <name6> ) :	define the function gettext_noop with an argument <name6> .
return <name1> . gettext ( <name6> )	call the method <name1> .gettext with an argument <name6> .
def <name2> ( <name5> , <name1> , <name4> ) :	define the function <name2> with 3 arguments : <name5> , <name1> and <name4> .
return <name6> . ngettext ( <name2> , <name1> , <name3> )	call the method <name6> .ngettext with 3 arguments <name2> , <name1> and <name3> .
def <name3> ( <name1> ) :	define the method <name3> with an argument <name1> .
return <name2> . ugettext ( <name6> )	call the method <name2> .gettext_noop with an argument <name6> .
def <name2> ( <name5> , <name3> , <name1> ) :	define the function <name2> with 3 arguments : <name5> , <name3> and <name1> .
return <name4> . ungettext ( <name5> , <name3> , <name2> )	call the method <name4> .ungettext with 3 arguments <name5> , <name3> and <name2> .
def <name5> ( <name1> , <name3> ) :	define the function <name5> with 2 arguments : <name1> and <name3> .
return <name6> . pgettext ( <name1> , <name5> )	call the method <name6> .pgettext with 2 arguments <name1> and <name5> .
def <name6> ( <name2> , <name5> , <name4> , <name3> ) :	define the function <name6> with 4 arguments : <name2> , <name5> , <name4> and <name3> .
return <name5> . npgettext ( <name3> , <name2> , <name1> , <name6> )	call the method <name5> .npgettext with 4 arguments <name3> , <name2> , <name1> and <name6> .
<name2> = <name5> ( <name3> , <name6> )	call the function <name5> with 2 arguments : <name3> and <name6> , substitute <name2> .
<name3> = <name5> ( <name1> , <name4> . text_type )	call the function <name5> with 2 arguments : <name1> and <name4> .text_type , substitute <name3> .
<name2> = <name1> ( <name6> , <name4> . text_type )	call the function <name1> with 2 arguments : <name6> and <name4> .text_type , substitute <name2> .
def <name1> ( <name2> , <name4> , <name6> = <name3> , ** <name5> ) :	define the function <name1> with 4 arguments : <name2> , <name4> , <name6> set to <name3> and unpacked dictionary <name5> .
<name1> isinstance ( <name6> , <name3> ) :	<name1> <name6> is an instance of <name3> type .
<name3> [ <val5>   ] = <name4>	substitute <name4> for value under the <val5> key of the <name3> dictionary .
proxy = <name6> ( <name5> , <name4> ) ( ** <name2> )	call the function <name6> with 2 arguments : <name5> and <name4> , call the result with an argument , unpacked dictionary <name2> ,
else :	substitute the result for proxy . if not ,
<name3> <name2> ( <name4> ) :	derive the <name3> <name2> from the <name4> base <name3> .
def <name1> ( <name5> , <name6> ) :	define the method <name1> with 2 arguments : <name5> and <name6> .
<name5> isinstance ( <name3> , <name1> ) <name6> <name2> :	<name5> <name3> is an instance of <name1> type <name6> <name2> is true ,
<name3> :	<name3> ,
     <name5> = <name2> [ <name3> ]	substitute value under the <name3> key of the <name2> dictionary for <name5> .
except <name6> :	if <name6> exception is caught ,
\     <name2> <name6> ( 'Your dictionary lacks key \\'%s\\'. '    'Please provide it, because it is required to '    'determine whether string is singular or plural.'    % number ) \	\ <name2> an <name6> with an argument string 'Your dictionary lacks key \\'%s\\'. Please provide it, because it is required to ' \
else :	'determine whether string is singular or plural.' , where '%s' is replaced with number . if not ,
<name5> = <name4>	substitute <name4> for <name5> .
<name4> [ <val5>   ] = <name1>	substitute <name1> for <name4> dictionary value under the <val5> key .
<name4> = <name3> ( ** <name2> )	call the function <name3> with unpacked dictionary <name2> as an argument , substitute the result for <name4> .
<name6> :	<name6> ,
<name3> = <name3> % <name1>	format <name3> with <name1> , substitute the result for <name3> .
except <name1> :	if <name1> exception is caught ,
   pass	do nothing .
<name5> <name1>	<name5> <name1> .
<name6> = <name3> ( <name4> ** <name2> : <name5> ( ) , <name5> ) ( ** <name2> )	call the function <name3> with 2 arguments : <name4> function with unpacked dictionary <name2> as an argument and return value an instance of <name5> class and <name5> , call the result with an argument unpacked dictionary <name2> , substitute the result for <name6> .
<name5> <name4>	<name5> <name4> .
def <name6> ( <name5> , <name1> , <name4> = <name2> ) :	define the function <name6> with 3 arguments : <name5> , <name1> and <name4> set to <name2> .
return <name5> ( <name2> , <name6> , <name4> = <name4> , <name3> = <name3> , number = number )	call the function <name5> with 5 arguments : <name2> , <name6> , <name4> set to <name4> , <name3> set to <name3> ,
def <name5> ( <name6> , <name4> , <name2> = <name1> ) :	and <name2> set to <name2> , return the result . define the function <name5> with 3 arguments : <name6> , <name4> and <name2> set to <name1> .
return <name5> ( <name4> , <name1> . text_type , <name2> = <name2> , <name3> = <name3> , number = number )	call the function <name5> with 5 arguments : <name4> , <name1> .text_type , <name2> set to <name2> , <name3> set to <name3> ,
def <name4> ( <name1> , <name5> , <name2> , <name3> = <name6> ) :	and <name3> set to <name3> , return the result . define the function <name4> with 4 arguments : <name1> , <name5> , <name2> and <name3> set to <name6> .
return <name2> ( <name1> , <name4> . text_type , <name6> = <name6> , <name3> = <name3> , plural = plural , number = number )	call the function <name2> with 6 arguments : <name1> , <name4> .text_type , <name6> set to <name6> , <name3> set to <name3> ,
def <name3> ( <name1> ) :	plural set to plural and number set to number , return the result . define the function <name3> with an argument <name1> .
<name1> <name6> . activate ( <name3> )	call the function <name6> .activate with an argument <name3> , <name1> the result .
def <name1> ( ) :	define the function <name1> .
<name5> <name4> . deactivate ( )	call the function <name4> .deactivate , <name5> the result .
<name2> <name5> ( <name3> ) :	derive the <name2> <name5> from the <name3> base <name2> .
def <name1> ( <name6> , <name5> , <name4> = <name3> ) :	define the method <name1> with 3 arguments : <name6> , <name5> and <name4> set to boolean <name3> .
<name4> . <name3> = <name3>	substitute <name3> for <name4> .language .
<name2> . <name5> = <name5>	substitute <name5> for <name2> .deactivate .
<name2> . old_language = <name4> ( )	call the function <name4> , substitute the result for <name2> .old_language .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name4> <name3> . language <name5> <name1> <name2> :	<name4> <name3> .language <name5> <name1> <name2> ,
<name6> ( <name5> . language )	call the function <name6> with an argument <name5> .language .
else :	if not ,
<name2> ( )	call the function <name2> .
def <name5> ( <name6> , <name3> , <name4> , <name2> ) :	define the method <name5> with 4 arguments : <name6> , <name3> , <name4> and <name2> .
<name6> <name1> . deactivate :	<name6> <name1> .deactivate is true ,
<name5> ( )	call the method <name5> .
else :	if not ,
<name1> ( <name6> . old_language )	call the method <name1> with an argument <name6> .old_language .
def <name2> ( ) :	define the function <name2> .
<name1> <name5> . get_language ( )	call the function <name5> .get_language , <name1> the result .
def <name6> ( ) :	define the function <name6> .
<name1> <name5> . get_language_bidi ( )	call the function <name5> .get_language_bidi , <name1> the result .
def <name2> ( <name6> ) :	define the function <name2> with an argument <name6> .
<name2> <name6> . check_for_language ( <name4> )	call the function <name6> .check_for_language with an argument <name4> , <name2> the result .
def <name1> ( <name6> ) :	define the function <name1> with an argument <name6> .
<name3> <name2> . to_locale ( <name1> )	call the function <name2> .to_locale with an argument <name1> , <name3> the result .
def <name6> ( <name4> , <name3> = <name2> ) :	define the function <name6> with 2 arguments : <name4> and <name3> set to boolean <name2> .
<name3> <name1> . get_language_from_request ( <name5> , <name6> )	call the function <name1> .get_language_from_request with 2 arguments : <name5> and <name6> , <name3> the result .
def <name3> ( <name6> ) :	define the function <name3> with an argument <name6> .
<name2> <name3> . get_language_from_path ( <name6> )	call the function <name3> .get_language_from_path with an argument <name6> , <name2> the result .
def <name1> ( <name4> , <name6> = <name2> ) :	define the function <name1> with 2 arguments : <name4> and <name6> set to <name2> .
<name6> <name3> . templatize ( <name4> , <name1> )	call the function <name3> .templatize with 2 arguments : <name4> and <name1> , <name6> the result .
def <name4> ( ) :	define the function <name4> .
<name4> <name5> . deactivate_all ( )	call the function <name5> .deactivate_all , <name4> the result .
def <name6> ( * <name2> ) :	define the function <name6> with an argument unpacked list <name2> .
<name6> ''   . <name5> ( <name2> ( <name1> ) <name3> <name1> <name4> <name6> )	<name3> every <name1> <name4> <name6> , call the function <name2> with an argument <name1> , <name5> the results <name4> a string , <name6> the result .
<name5> = <name2> ( <name1> , <name3> . text_type )	call the function <name2> with 2 arguments : <name1> and <name3> .text_type , substitute the result for <name5> .
def <name3> ( <name4> ) :	define the function <name3> with an argument <name4> .
<name5> <name6> . conf . locale <name3> <name4>	<name5> <name6> .conf .locale <name3> <name4> .
<name6> :	<name6> ,
<name3> <name6> [ <name1> ]	get the value under the <name1> key of the <name6> dictionary , <name3> it .
except <name2> :	if <name2> exception is caught ,
<name4> <val3>   <name1> <name5> <name2> :	<name4> character <val3> is <name1> contained <name5> <name2> ,
<name1> <name5> ( <val3> % <name6> )	<name1> an <name5> with an argument <val3> , where '%s' is replaced with <name6> .
<name6> = <name1> . <name2> ( <val5>   ) [ 0 ]	<name2> <name1> by character <val5> , substitute the first element of the result for <name6> .
<name6> :	<name6> ,
<name3> <name1> [ <name4> ]	get the <name1> dictionary value under the <name4> key , <name3> the result .
except <name6> :	if <name6> exception is caught ,
<name3> <name5> ( <val6> % ( <name1> , generic_lang_code ) )	<name3> an <name5> with an argument string <val6> , where '%s' is replaced with <name1> ,
\ <name1> = <name3> . compile ( <val2>   ) \	\ and generic_lang_code . call the function <name3> .compile with an argument string <val2> , substitute the result for <name1> . \
def <name2> ( <name1> ) :	define the function <name2> with an argument <name1> .
<name5> <name1> . sub ( ' '   , <name4> . <name6> ( ) )	call <name6> <name4> of the surrounding whitespaces , substitute every occurrence of the whitespace in the <name1> with previous result , <name5> the result .
<name2> <name3> . conf <name6> <name1>	<name2> <name3> .conf <name6> <name1> into default name space .
<name4> <name5> . utils . encoding <name3> <name2>	<name4> <name5> .utils .encoding <name3> <name2> into default name space .
<name6> <name1> . utils . safestring <name3> <name2> , <name4>	<name6> <name1> .utils .safestring <name3> <name2> and <name4> into default name space .
def <name6> ( <name1> , <name3> , <name2> ) :	define the function <name6> with 3 arguments : <name1> , <name3> and <name2> .
<name3> <name5> == <val4> :	<name3> <name5> equals integer <val4> ,
<name1> <name2>	<name1> <name2> .
<name2> <name6>	<name2> <name6> .
<name5> = <name2>	substitute <name2> for <name5> .
def <name6> ( <name4> , <name2> , <name3> ) :	define the function <name6> with 3 arguments : <name4> , <name2> and <name3> .
return <name4> ( <name5> ( <name1> , <name2> , <name6> ) )	call the function <name5> with 3 arguments : <name1> , <name2> and <name6> , use the result as an argument for the call to the <name4> ,
def <name2> ( <name1> , <name6> ) :	return the result . define the function <name2> with 2 arguments : <name1> and <name6> .
return <name3> ( <name2> )	call the function <name3> with an argument <name2> .
def npgettext ( <name2> , <name5> , <name1> , <name6> ) :	define the function ngettext with 4 arguments : <name2> , <name5> , <name1> and <name6> .
<name3> <name5> ( <name4> , <name1> , <name2> )	call the function <name5> with 3 arguments : <name4> , <name1> and <name2> , <name3> the result .
<name2> = <name5> <name3> : <name6>	<name2> is a <name5> function which returns <name6> for any argument <name3> .
<name3> = <name4> = <name6> : <name1>	<name3> and <name4> are <name6> functions returning <name1> .
<name4> = <name3> : <name1> . LANGUAGE_CODE	<name4> is a <name3> function returning <name1> .LANGUAGE_CODE .
<name6> = <name5> : <name3> . LANGUAGE_CODE <name1> <name3> . LANGUAGES_BIDI	<name6> is <name5> function returning boolean True if <name3> .LANGUAGE_CODE is contained <name1> <name3> .LANGUAGES_BIDI .
<name2> = <name5> <name4> : <name3>	<name2> is <name5> function that returns boolean <name3> for every argument <name4> .
def <name3> ( <name2> ) :	define the function <name3> with an argument <name2> .
<name2> isinstance ( <name1> , <name5> ) :	<name2> <name1> is an instance of <name5> .
<name1> <name5> ( <name4> )	call the function <name5> with an argument <name4> , <name1> the result .
<name4> <name5>	<name4> <name5> .
def <name5> ( <name4> ) :	define the function <name5> with an argument <name4> .
<name1> <name5> ( <name3> ( <name4> ) )	call the function <name3> with an argument <name4> , use the result as an argument for the call to the <name5> function , <name1> the result .
<name1> = <name6> = <name2> = <name5>	substitute <name5> for <name1> , <name6> and <name2> .
def <name2> ( <name4> ) :	define the function <name2> with an argument <name4> .
<name3> = <name4> . <name1> ( <val5>   )	<name1> position of <val5> in the index of the <name4> , substitute the result for <name3> .
<name4> <name3> >= <val1> :	<name4> <name3> is greater or equal to integer <val1> ,
return language [ : <name1> ] . lower ( ) + <val3>   + language [ <name1> + 1 : ] . upper ( )	append <val3> to string created from first <name1> elements of languages converted to lowercase ,
else :	convert slice of language string from ( p + 1 ) - th index to the end to uppercase , append it to the previous result , return the resulting string . if not ,
<name3> <name5> . lower ( )	convert <name5> to lowercase and <name3> it .
def <name2> ( <name1> , <name5> = <name6> ) :	define the function <name2> with 2 arguments : <name1> and <name5> set to boolean <name6> .
<name3> <name2> . LANGUAGE_CODE	<name3> <name2> .LANGUAGE_CODE .
def <name5> ( <name3> ) :	define the function <name5> with an argument <name3> .
<name5> <name4>	<name5> <name4> .
<name4> <name5> <name1> <name2>	<name4> <name5> <name1> <name2> into default name space .
<name6> <name4> <name2> <name5>	<name6> <name4> <name2> <name5> into default name space .
<name5> <name4>	<name5> module <name4> .
<name1> <name5>	<name1> module <name5> .
<name6> <name1>	<name6> module <name1> .
<name4> <name1> <name5> <name2>	<name4> module <name1> <name5> <name2> .
<name2> <name1> <name3> <name4>	<name2> <name1> <name3> <name4> into default name space .
<name6> <name4>	<name6> module <name4> .
<name4> <name3> . <name2> <name1> <name2>	<name4> <name3> .apps <name1> <name2> into default name space .
<name1> <name5> . conf <name2> <name6>	<name1> <name5> .conf <name2> <name6> into default name space .
<name3> <name4> . core . exceptions <name5> <name1>	<name3> <name4> .core .exceptions <name5> <name1> into default name space .
<name1> <name3> . dispatch <name4> <name5>	<name1> <name3> .dispatch <name4> <name5> into default name space .
<name5> <name6> . test . signals <name1> <name2>	<name5> <name6> .test .signals <name1> <name2> into default name space .
<name4> <name6> . utils . deprecation <name3> <name2>	<name4> <name6> .utils .deprecation <name3> <name2> into default name space .
<name5> <name6> . utils . encoding <name2> <name4>	<name5> <name6> .utils .encoding <name2> <name4> into default name space .
<name6> <name1> . utils . _os <name2> <name3>	<name6> <name1> .utils ._os <name2> <name3> into default name space .
<name1> <name5> . utils . safestring <name3> <name4> , <name2>	<name1> <name5> .utils .safestring <name3> <name4> and <name2> into default name space .
<name6> <name4> . utils <name2> <name5> , <name3>	<name6> <name4> .utils <name2> <name5> and <name3> into default name space .
<name1> <name2> . utils . six <name6> <name3>	<name1> <name2> .utils .six <name6> <name3> into default name space .
<name2> <name6> . utils . translation <name4> <name5> , <name1> , <name3>	<name2> <name6> .utils .translation <name4> <name5> , <name1> and <name3> into default name space .
<name1> = { }	<name1> is an empty dictionary .
<name5> = <name3> ( )	call the function <name3> , substitute the result for <name5> .
<name2> = <name1>	<name2> is <name1> .
<name2> = <name1>	<name2> is <name1> .
\ <name1> = <val2> \	\ <name1> is a string <val2> . \
"\ accept_language_re = <name3> . compile ( r '' '         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\\*)      # ""en"", ""en-au"", ""x-y-z"", ""es-419"", ""*""         (?:\\s*;\\s*q=(0(?:\\.\\d{,3})?|1(?:.0{,3})?))?   # Optional ""q=1.00"", ""q=0.8""         (?:\\s*,\\s*|$)                                 # Multiple accepts per header.         ' ''   , <name3> . VERBOSE ) \"	"\ call the function <name3> .compile with 2 arguments : raw string ""([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\\*)(?:\\s*;\\s*q=(0(?:\\.\\d{,3})?|1(?:.0{,3})?))?(?:\\s*,\\s*|$)"" , \"
language_code_re = <name6> . compile ( r <val4>   , <name6> . IGNORECASE )	and <name6> .VERBOSE , substitute the result for accept_language_re . call the function <name6> .compile with 2 arguments : raw string <val4> and <name6> .IGNORECASE ,
\ <name6> = <name3> . compile ( r <val2>   ) \	\ substitute the result for language_code_re . call the function <name3> .compile with an argument raw string <val2> , substitute the result for <name6> . \
<name4> = {   <val6>   : <val3>   , <val5>   : <val2>   , }	<name4> is an dictionary with 2 initial entries : <val3> for <val6> and <val2> for <val5> .
<name4> = <name5>	substitute <name5> for <name4> .
@  <name3> ( <name6> )	decorator function <name3> with an argument <name6> ,
def <name5> ( ** <name2> ) :	define the function <name5> with an argument unpacked dictionary <name2> .
<name6> <name3> [ <val5>   ] in ( <val2>   , <val1>   ) :	<name6> value under the <val5> key of the <name3> dictionary is equal to string <val2> or strnig <val1> ,
<name3> <name6>	use <name3> variable <name6> .
<name6> = <name2>	<name6> is <name2> .
<name1> . cache_clear ( )	call the method <name1> .cache_clear .
<name3> . cache_clear ( )	call the method <name3> .cache_clear .
def <name6> ( <name2> , <name1> = <name3> ) :	define the function <name6> with 2 arguments <name2> and <name1> set to boolean <name3> .
<name5> = <name6> . <name3> ( <val4>   )	<name3> first index of occurrence of character <val4> in <name6> , substitute it for <name5> .
<name5> <name3> >= <val2> :	<name5> <name3> is greater or equal to integer <val2> ,
<name5> <name4> :	<name5> <name4> is true ,
return <name5> [ : <name1> ] . lower ( ) + <val6>   + <name5> [ <name1> + 1 : ] . lower ( )	convert fist <name1> elements of <name5> to lowercase , append <val6> to it ,
else :	covert to lowercase language elements from ( p + 1 ) - th index to the end , append it to the previous result , return it . if not ,
<name2> len ( <name5> [ <name6> + <val1> : ] ) >  <val3> :	slice <name5> from ( <name6> + <val1> ) - th index to the end , calculate the length of the obtained segment , <name2> it is greater than integer <val3> ,
return <name1> [ : <name2> ] . lower ( ) + <val3>   + <name1> [ <name2> + 1 ] . upper ( ) + <name1> [ <name2> + 2 : ] . lower ( )	convert fist <name2> elements of <name1> to lowercase , append <val3> to it ,
<name3> <name4> [ : <name5> ] . lower ( ) + <val1>   + <name4> [ <name5> + <val2> : ] . upper ( )	covert to lowercase <name4> element at ( <name5> + <val2> ) - th index , append it to the previous result , covert to lowercase <name4> elements from ( <name5> + 2 ) - th index to the end , append it to the previous result , <name3> it . convert fist <name5> elements of <name4> to lowercase , append <val1> to it ,
else :	covert to uppercase language elements from ( p + 1 ) - th index to the end , append it to the previous result , return it . if not ,
<name2> <name1> . lower ( )	convert <name1> to lowercase , <name2> it .
def <name4> ( <name5> ) :	define the function <name4> with an argument <name5> .
<name3> = <name2> . <name4> ( '_'   )	<name4> first index of occurrence of character '-' in <name2> , substitute it for <name3> .
<name4> <name1> >= <val5> :	<name4> <name1> is greater or equal to integer <val5> ,
return <name3> [ : <name6> ] . lower ( ) + '-'   + <name3> [ <name6> + 1 : ] . lower ( )	convert fist <name6> elements of <name3> to lowercase , append '_' to it ,
else :	covert to lowercase locale elements from ( p + 1 ) - th index to the end , append it to the previous result , return it . if not ,
<name1> <name6> . lower ( )	convert <name6> to lowercase and <name1> it .
<name3> <name6> ( <name2> . GNUTranslations ) :	derive the <name3> <name6> from <name2> .GNUTranslations base <name3> .
def <name3> ( <name4> , <name2> ) :	define the method <name3> with 2 arguments : <name4> and <name2> .
<name4> . GNUTranslations . __init__ ( <name2> )	call the method <name4> .GNUTranslations .__init__ with an argument <name2> .
<name1> . __language = <name6>	substitute <name6> for <name1> .__language .
<name2> . __to_language = <name5> ( <name1> )	call the function <name5> with an argument <name1> , substitute it for <name2> .__to_language .
<name1> . __locale = <name5> ( <name2> )	call the function <name5> with an argument <name2> , substitute it for <name1> .__locale .
<name4> . plural = <name2> <name5> : int ( <name5> != <val1> )	<name4> .plural is an <name2> function with an argument <name5> , which returns result of boolean expression <name5> not equal to integer <val1> ,
<name4> . _init_translation_catalog ( )	converted to an integer . call the method <name4> ._init_translation_catalog .
<name5> . _add_installed_apps_translations ( )	call the method <name5> ._add_installed_apps_translations .
<name6> . _add_local_translations ( )	call the method <name6> ._add_local_translations .
<name2> . _add_fallback ( )	call the method <name2> ._add_fallback .
def <name4> ( <name6> ) :	define the method <name4> with an argument <name6> .
<name6> <val2> % <name4> . __language	<name6> a string <val2> , where '%s' is replaced with <name4> .__language .
def <name6> ( <name5> , <name1> , <name3> = <name2> ) :	define the method <name6> with 3 arguments : <name5> , <name1> and <name3> set to boolean <name2> .
translation = <name1> . translation ( <name5> = <val4>   , <name3> = <name3> , languages = [ self . __locale ] , codeset = 'utf-8'   , fallback = use_null_fallback )	call the method <name1> .translation with 5 arguments : <name5> set to string <val4> , <name3> set to <name3> ,
<name4> not hasattr ( <name5> , <val1>   ) :	languages set to a list with an element self .__locale , codeset set to a string 'utf-8' and fallback set to use_null_fallback , substitute the result for <name5> . <name4> <name5> has an attribute <val1> ,
<name2> . _catalog = { }	<name2> ._catalog is an empty dictionary .
<name5> . _info = { }	<name5> ._info is an empty dictionary .
<name1> <name5>	<name1> <name5> .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
settingsfile = upath ( <name2> . modules [ <name4> . __module__ ] . __file__ )	get the value under the <name4> .__module__ key of the <name2> .modules dictionary ,
localedir = <name2> . <name5> . <name6> ( <name2> . <name5> . dirname ( <name1> ) , <val4>   )	use its __file__ field as an argument for the call to the function upath , substitute the result for <name1> . call the function <name2> .path .dirname with an argument <name1> , <name6> the result an string <val4> into a file <name5> ,
<name1> = <name3>	substitute it for localedir . <name1> is boolean <name3> .
<name6> <name2> . __language == <name4> . LANGUAGE_CODE :	<name6> <name2> .__language equals <name4> .LANGUAGE_CODE ,
<name4> = <name6>	<name4> is boolean <name6> .
<name1> = <name2> . _new_gnu_trans ( <name5> , <name4> )	call the function <name2> ._new_gnu_trans with 2 arguments : <name5> and <name4> , substitute the result for <name1> .
<name3> . _info = <name1> . _info . copy ( )	call the method <name1> ._info .copy , substitute the result for <name3> ._info .
<name4> . _catalog = <name3> . _catalog . copy ( )	call the method <name3> ._catalog .copy , substitute the result for <name4> ._catalog .
def <name1> ( <name4> ) :	define the method <name1> with an argument <name4> .
<name6> :	<name6> ,
<name1> = reversed ( <name6> ( <name2> . get_app_configs ( ) ) )	call the method <name2> .get_app_configs , convert the result in a <name6> , reverse the order of elements , substitute the result for <name1> .
except <name4> :	if <name4> exception is caught ,
"raise <name5> ( <val6> ""apps registry is ready. Check that you don't make non-lazy "" ""gettext calls at import time."" )"	rais an <name5> exception with an argument string <val6>
<name3> <name4> <name5> <name2> :	apps registry is ready . Check that you don ' t make non - lazy gettext calls at import time . . <name3> every <name4> <name5> <name2> ,
<name1> = os . <name6> . <name5> ( <name2> . <name6> , <val3>   )	<name5> <name2> .path and string <val3> into a file <name6> , substitute it for <name1> .
<name3> = <name4> . _new_gnu_trans ( <name6> )	call the method <name4> ._new_gnu_trans with an argument <name6> , substitute the result for <name3> .
<name4> . merge ( <name6> )	call the method <name4> .merge with an argument <name6> .
def <name2> ( <name6> ) :	define the method <name2> with an argument <name6> .
<name3> <name2> <name4> reversed ( <name6> . LOCALE_PATHS ) :	reverse <name6> .LOCALE_PATHS element order , <name3> every <name2> <name4> the result ,
<name1> = <name2> . _new_gnu_trans ( <name3> )	call the function <name2> ._new_gnu_trans with an argument <name3> , substitute the result for <name1> .
<name5> . merge ( <name6> )	call the method <name5> .merge with an argument <name6> .
def <name6> ( <name5> ) :	define the method <name6> with an argument <name5> .
<name6> <name2> . __language == <name5> . LANGUAGE_CODE <name1> <name2> . __language == <val3> :	<name6> <name2> .__language equals <name5> .LANGUAGE_CODE <name1> <name2> .__language equals a string <val3> ,
<name2>	<name2> .
<name5> = <name6> ( <name2> . LANGUAGE_CODE )	call the function <name6> with an argument <name2> .LANGUAGE_CODE , substitute the result for <name5> .
<name2> . add_fallback ( <name5> )	call the method <name2> .add_fallback with an argument <name5> .
def <name1> ( <name2> , <name4> ) :	define the method <name1> with 2 arguments <name2> and <name4> .
<name2> . _catalog . <name1> ( <name3> . _catalog )	<name1> the <name2> ._catalog dictionary with <name3> ._catalog .
def <name2> ( <name1> ) :	define the method <name2> with an argument <name1> .
<name4> <name1> . __language	<name4> <name1> .__language .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name3> <name4> . __to_language	<name3> <name4> .__to_language .
def <name3> ( <name4> ) :	define the function <name3> with an argument <name4> .
<name5> <name4>	use <name5> variable <name4> .
<name1> <name4> <name6> <name2> <name3> :	<name1> <name4> is <name6> contained <name2> <name3> ,
<name5> [ <name2> ] = <name3> ( <name2> )	<name5> dictionary value , under the <name2> key is an instance of <name3> class , created with an argument <name2> .
<name1> <name3> [ <name6> ]	<name1> <name3> dictionary value , under the <name6> key .
def <name4> ( <name3> ) :	define the function <name4> with an argument <name3> .
<name5> <name4> <name6> <name2> :	<name5> <name4> is contained <name6> <name2> ,
"<name2> = ( ""The use of the language code '%s' is deprecated. "" ""Please use the '%s' translation instead."" )"	"<name2> is a string ""The use of the language code '%s' is deprecated. Please use the '%s' translation instead."" ."
<name1> . warn ( <name2> % ( <name5> , _DJANGO_DEPRECATED_LOCALES [ <name5> ] ) , RemovedInDjango19Warning , stacklevel = 2 )	call the method call the function <name1> .warn with 3 arguments : <name2> formatted with <name5> and value under the <name5> key ,
<name1> . value = <name2> ( <name5> )	of the _DJANGO_DEPRECATED_LOCALES dictionary , RemovedInDjango19Warning and stacklevel set to integer 2 . call the function <name2> with an argument <name5> , substitute the result for <name1> .value .
def <name6> ( ) :	define the function <name6> .
<name6> hasattr ( <name4> , <val5> ) :	<name6> <name4> has an attribute <val5> ,
del <name2> . value	delete <name2> .value .
def <name3> ( ) :	define the function <name3> .
<name6> . value = <name1> . NullTranslations ( )	call the method <name1> .NullTranslations , substitute the result for <name6> .value .
def <name1> ( ) :	define the function <name1> .
<name4> = getattr ( <name2> , <val1> , <name5> )	get <val1> attribute of the <name2> object , if it exists substitute it for <name4> , if not <name4> is <name5> .
<name2> <name3> <name6> <name5> <name4> :	<name2> <name3> <name6> <name5> <name4> ,
<name4> :	<name4> ,
<name2> <name6> . to_language ( )	call the method <name6> .to_language , <name2> the result .
except <name1> :	if <name1> exception is caught ,
pass	do nothing .
<name2> <name3> . LANGUAGE_CODE	<name2> <name3> .LANGUAGE_CODE .
def <name4> ( ) :	define the function <name4> .
<name2> = <name4> ( ) . <name1> ( <val5>   ) [ 0 ]	call the function <name4> , <name1> the result by <val5> , substitute the first element of the result for <name2> .
<name1> <name4> <name5> <name6> . LANGUAGES_BIDI	if <name4> is contained <name5> <name6> .LANGUAGES_BIDI , <name1> boolean True , if not , <name1> boolean False .
def <name1> ( ) :	define the function <name1> .
<name2> <name1>	use <name2> variable <name1> .
<name5> = getattr ( <name3> , <val6> , <name1> )	get <val6> attribute of the <name3> object , if it exists substitute it for <name5> , if not <name5> is <name1> .
<name3> <name1> <name5> <name6> <name4> :	<name3> <name1> <name5> <name6> <name4>
<name4> <name3>	<name4> <name3> .
<name1> <name5> <name3> <name6> :	<name1> <name5> <name3> <name6>
<name1> = <name4> ( <name3> . LANGUAGE_CODE )	call the function <name4> with an argument <name3> .LANGUAGE_CODE , substitute the result for <name1> .
<name6> <name2>	<name6> <name2> .
def <name5> ( <name3> , <name4> ) :	define the function <name5> with 2 arguments : <name3> and <name4> .
<name6> <name5>	use <name6> variable <name5> .
\ eol_message = <name2> . <name4> ( str ( <val5>   ) , str ( <val3>   ) ) . <name4> ( str ( <val1>   ) , str ( <val3>   ) ) \	\ <name4> every occurrence of string <val5> in <name2> with <val3> , <name4> every occurrence of string <val1> , \
<name3> = getattr ( <name5> , <val4> , <name2> )	\ in the previous result for with string '\\n' , substitute the result for eol_message . get <val4> attribute of the <name5> object , if it exists substitute it for <name3> , if not <name3> is <name2> . \
<name3> <name4> <name1> <name6> <name5> :	<name3> <name4> <name1> <name6> <name5> ,
<name4> = getattr ( <name1> , <name6> ) ( <name2> )	get <name6> attribute of the object <name1> , call the <name4> with an argument <name2> , substitute the <name4> for <name4> .
else :	if not ,
<name6> <name4> <name3> <name2> :	<name6> <name4> <name3> <name2> ,
<name3> = <name4> ( <name5> . LANGUAGE_CODE )	call the function <name4> with an argument <name5> .LANGUAGE_CODE , substitute the result for <name3> .
<name4> = getattr ( <name2> , <name3> ) ( <name1> )	get <name3> attribute of the object <name2> , call the <name4> with an argument <name1> , substitute the <name4> for <name4> .
<name6> isinstance ( <name5> , <name2> ) :	<name6> <name5> is an instance of <name2> ,
<name1> <name5> ( <name2> )	call the function <name5> with an argument <name2> , <name1> it .
<name5> <name2>	<name5> <name2> .
def <name3> ( <name5> ) :	define the function <name3> with an argument <name5> .
<name6> <name4> ( <name3> , <val5>   )	call the function <name4> with 2 arguments : <name3> and string <val5> , <name6> the result .
<name2> <name3> . PY3 :	<name2> <name3> .PY3 is true ,
<name6> = <name2>	substitute <name2> for <name6> .
else :	if not ,
def <name6> ( <name3> ) :	define the function <name6> with an argument <name3> .
<name2> <name5> ( <name4> , <val1>   )	call the function <name5> with 2 arguments : <name4> and string <val1> , <name2> the result .
def <name3> ( <name2> , <name1> ) :	define the function <name3> with 2 arguments : <name2> and <name1> .
"<name4> = ""%s%s%s"" % ( <name6> , <name3> , <name1> )"	convert to strings and concatenate <name6> , <name3> and <name1> , substitute the result for <name4> .
<name3> = <name4> ( <name6> )	call the function <name4> with an argument <name6> , substitute the <name3> for <name3> .
<name1> <name6> <name2> <name4> :	<name1> <name6> is contained <name2> <name4> ,
<name2> = <name6> ( <name4> )	call the function <name6> with an argument <name4> , return the <name2> .
<name6> <name1>	<name6> <name1> .
def gettext_noop ( message ) :	define the function locale with an argument locale .
<name1> <name4>	<name1> <name4> .
def <name5> ( <name3> , <name2> , <name6> , <name4> ) :	define the function <name5> with 4 arguments : <name3> , <name2> , <name6> and <name4> .
<name2> <name6>	use <name2> variable <name6> .
<name6> = getattr ( <name4> , <val2> , <name3> )	get <val2> attribute of the <name4> object , if it exists substitute it for <name6> , if not <name6> is <name3> .
<name6> <name1> <name4> <name5> <name3> :	<name6> <name1> <name4> <name5> <name3> ,
<name2> getattr ( <name4> , <name3> ) ( <name5> , <name6> , <name1> )	get <name3> attribute of the <name4> object , call the result with 3 arguments : <name5> , <name6> and <name1> , <name2> the result .
<name3> <name5> <name6> <name1> :	<name3> <name5> <name6> <name1> ,
<name4> = <name5> ( <name1> . LANGUAGE_CODE )	call the function <name5> with an argument <name1> .LANGUAGE_CODE , substitute the result for <name4> .
<name1> getattr ( <name4> , <name2> ) ( <name5> , <name3> , <name6> )	get <name2> attribute of the <name4> object , call the result with 3 arguments : <name5> , <name3> and <name6> , <name1> the result .
def <name4> ( <name1> , <name2> , <name3> ) :	define the function <name4> with 3 arguments : <name1> , <name2> and <name3> .
<name5> <name3> ( <name1> , <name2> , <name4> , <val6>   )	call the function <name3> with 3 arguments : <name1> , <name2> , <name4> and string <val6> , <name5> the result .
<name3> <name4> . PY3 :	<name3> <name4> .PY3 is true ,
<name3> = <name6>	substitute <name6> for <name3> .
else :	if not ,
def <name1> ( <name5> , <name6> , <name3> ) :	define the function <name1> with 3 arguments : <name5> , <name6> and <name3> .
<name5> <name6> ( <name2> , <name3> , <name1> , 'ungettext'   )	call the function <name6> with 3 arguments : <name2> , <name3> , <name1> and string 'ngettext' , <name5> the result .
def <name3> ( <name6> , <name2> , <name4> , <name1> ) :	define the function <name3> with 4 arguments : <name6> , <name2> , <name4> and <name1> .
"<name2> = ( ""%s%s%s"" % ( <name3> , <name1> , <name5> ) , ""%s%s%s"" % ( <name3> , <name1> , plural ) , number )"	<name2> is a tuple containing 2 elements : string created by concatenating <name3> , <name1> and <name5> ,
<name1> = <name5> ( * <name3> )	string created by concatenating context , CONTEXT_SEPARATOR and plural and number . call the function <name5> with unpacked dictionary <name3> , substitute the <name1> for <name1> .
<name5> <name4> <name3> <name6> :	<name5> <name4> is contained <name3> <name6> ,
<name3> = <name2> ( <name4> , <name6> , <name1> )	call the function <name2> with 3 arguments : <name4> , <name6> and <name1> , substitute the <name3> for <name3> .
<name3> <name6>	<name3> <name6> .
def <name4> ( ) :	define the function <name4> .
globalpath = os . path . join ( os . path . dirname ( upath ( <name4> . modules [ <name2> . __module__ ] . <name3> ) ) , 'locale'   )	get the value under the <name2> .__module__ key of the <name4> .modules dictionary , use its <name3> field as an argument ,
<name3> [ <name1> ] + <name6> ( <name5> . LOCALE_PATHS )	for the call to the function upath , get the directory name of the resulting system path , join the result and string 'locale' , into a valid file path , substitute it for <name1> . append <name5> .LOCALE_PATHS converted into a <name6> to a <name6> containing an element <name1> , <name3> it .
@  <name3> . <name3> ( <name2> = <val1> )	decorator function <name3> .lru_cache with an argument <name2> set to integer <val1> .
def <name2> ( <name3> ) :	define the function <name2> with an argument <name3> .
<name4> not <name6> . search ( <name5> ) :	call the method <name6> .search with an argument <name5> , <name4> it evaluates to false ,
<name5> <name3>	<name5> boolean <name3> .
<name6> <name5> in <name3> ( ) :	call the function <name3> , <name6> every <name5> is the result ,
if <name1> . find ( <val5>   , <name6> , [ to_locale ( lang_code ) ] ) is not None :	call the method <name1> .find with 3 arguments : string <val5> , <name6> and list with an element : result of the function ,
<name4> <name1>	to_locale called with an argument lang_code , if the result is not None , <name4> boolean <name1> .
<name2> <name1>	<name2> boolean <name1> .
@  <name4> . <name4> ( <name6> = <val3> )	decorator function <name4> .lru_cache with an argument <name6> set to integer <val3> .
def <name6> ( <name3> , <name1> = <name5> ) :	define the function <name6> with 2 arguments : <name3> and <name1> set to boolean <name5> .
<name2> <name5>	use <name2> variable <name5> .
<name2> <name6> <name1> <name4> :	<name2> <name6> <name1> <name4> ,
<name3> = <name4> ( <name2> . LANGUAGES )	<name3> is an instance of <name4> class , created with an argument <name2> .LANGUAGES .
<name6> <name4> :	<name6> <name4> is true ,
<name3> = <name1> . <name2> ( <name6> )	<name2> the value under the <name6> key of the <name1> dictionary , substitute it for <name3> .
<name5> <name4> <name2> <name6> <name1> <name3> <name5> <name6> <name1> :	<name5> <name4> is <name2> contained <name6> <name1> <name3> <name5> is contained <name6> <name1> ,
<name1> <name3>	<name1> <name3> .
<name4> = <name6> . <name3> ( <val5>   ) [ 0 ]	<name3> <name6> by <val5> , substitute the first element of the result for <name4> .
<name6> <name5> <name2> ( <name1> , <name4> ) :	<name6> every <name5> <name2> tuple with 2 elements : <name1> and <name4> ,
<name5> <name6> <name2> <name1> <name3> <name4> ( <name6> ) :	<name5> <name6> is contained <name2> <name1> <name3> call to the function <name4> with an argument <name6> evaluates to true ,
<name2> <name4>	<name2> <name4> .
<name4> not <name2> :	<name4> <name2> is false ,
<name3> <name4> <name2> <name1> :	<name3> every <name4> <name2> <name1> ,
<name3> <name6> . startswith ( <name2> + <val1>   ) :	append <val1> to <name2> , <name3> <name6> starts with it ,
<name3> <name1>	<name3> <name1> .
<name6> <name1> ( <name3> )	<name6> an <name1> with an argument <name3> .
def <name4> ( <name5> , <name1> = <name2> ) :	define the function <name4> with 2 arguments : <name5> and <name1> set to boolean <name2> .
<name6> = <name5> . match ( <name4> )	call the function <name5> .match with an argument <name4> , substitute it for <name6> .
<name2> not <name1> :	<name2> <name1> is false ,
<name4> <name2>	<name4> <name2> .
<name6> = <name2> . group ( <val3> )	call the method <name2> .group with an argument integer <val3> , substitute the result for <name6> .
<name6> :	<name6> ,
<name1> <name5> ( <name3> , <name2> = <name2> )	call the function <name5> with 2 arguments : <name3> and <name2> set to <name2> , <name1> the result .
except <name3> :	if <name3> exception is caught ,
<name3> <name1>	<name3> <name1> .
def <name3> ( <name1> , <name2> = <name5> ) :	define the function <name3> with 2 arguments : <name1> and <name2> set to boolean <name5> .
<name6> <name3>	use <name6> variable <name3> .
<name4> <name3> <name2> <name1> :	<name4> <name3> <name2> <name1> ,
<name5> = <name4> ( <name3> . LANGUAGES )	<name5> is an instance of <name4> class , created with an argument <name3> .LANGUAGES .
<name4> <name5> :	<name4> <name5> is true ,
<name3> = <name2> ( <name4> . path_info )	call the function <name2> with an argument <name4> .path_info , substitute it for <name3> .
<name5> <name2> <name4> <name1> <name6> :	<name5> <name2> <name4> <name1> <name6> ,
<name6> <name2>	<name6> <name2> .
<name6> hasattr ( <name1> , <val2>   ) :	<name6> <name1> has an attribute <val2> ,
<name3> = <name6> . session . <name4> ( <name5> )	<name4> the value under the <name5> key of the <name6> .session dictionary , substitute it for <name3> .
<name2> <name5> <name4> <name6> <name3> <name5> <name1> <name2> <name5> <name3> <name4> ( <name5> ) :	<name2> <name5> <name1> contained <name4> <name6> <name3> <name5> <name1> <name2> <name5> <name3> result of the function <name4> ,
<name1> <name2>	called with an argument <name2> is true , <name1> <name2> .
<name5> = <name6> . COOKIES . <name2> ( <name4> . LANGUAGE_COOKIE_NAME )	<name2> the value under the <name4> .LANGUAGE_COOKIE_NAME key of the <name6> .COOKIES dictionary , substitute it for <name5> .
<name6> :	<name6> ,
<name5> <name2> ( <name3> )	call the function <name2> with an argument <name3> , <name5> the result .
except <name3> :	if <name3> exception is caught ,
pass	do nothing .
<name3> = <name2> . META . <name5> ( <val1>   , ''   )	<name5> the value under the <val1> key of the <name2> .META dictionary , if it exists substitute it for <name3> ,
<name3> <name1> , <name2> <name6> <name5> ( <name4> ) :	if not <name4> is an empty string . call the function <name5> with an argument <name4> , <name3> every <name1> and <name2> <name6> the result ,
<name3> <name1> == <val6>   :	<name3> <name1> equals <val6> ,
<name5>	<name5> from the loop execution .
<name6> not <name3> . search ( <name5> ) :	call the method <name3> .search with an argument <name5> , <name6> it evaluates to false ,
continue	skip this loop iteration .
<name2> :	<name2> ,
<name3> <name5> ( <name6> )	call the function <name5> with an argument <name6> , <name3> the result .
except <name3> :	if <name3> exception is caught ,
continue	skip this loop iteration .
<name3> :	<name3> ,
<name2> <name3> ( <name5> . LANGUAGE_CODE )	call the function <name3> with an argument <name5> .LANGUAGE_CODE , <name2> the result .
except <name5> :	if <name5> exception is caught ,
<name4> <name1> . LANGUAGE_CODE	<name4> <name1> .LANGUAGE_CODE .
\ <name5> = <name1> . compile ( r <val2>   ) \	\ call the function <name1> .compile with an argument raw string <val2> , substitute it for <name5> . \
def <name1> ( <name2> , <name6> ) :	define the function <name1> with 2 arguments : <name2> and <name6> .
<name4> <name6> . sub ( <name3> , <name5> )	call the method <name6> .sub with 2 arguments : <name3> and <name5> , <name4> the result .
"\ <name4> = <name6> . compile ( r """" <val1> [ ^ <val2> ) | ( ? : <val5> ] * ?' ) ) \\ <name3> * """" ""  ) \"	"\ call the function <name6> .compile with an argument raw string <val1> [ ^ <val2> ) | ( ? : <val5> ] * ?' ) ) \\ <name3> * "" , substitute the result for <name4> . \"
"\ <name3> = <name2> . compile ( r """" <val1> [ ^ <val6> ) | ( ? : <val4> ] * ? <val5> [ ^ <val3> ) ) ) ?\\ <name2> * """" ""  ) \"	"\ call the function <name2> .compile with an argument string <val1> [ ^ <val6> ) | ( ? : <val4> ] * ? <val5> [ ^ <val3> ) ) ) ?\\ <name2> * "" , substitute the result for <name3> . \"
"\ block_re = <name4> . compile ( r """" <val1> [ ^ <val3> ) | ( ? : <val5> ] * ?' ) ) ) ? ( ? : \\ <name2> + |$ ) """" ""  ) \"	"\ call the function <name4> .compile with an argument raw string <val1> [ ^ <val3> ) | ( ? : <val5> ] * ?' ) ) ) ? ( ? : \\ <name2> + |$ ) "" , \"
"\ <name6> = <name2> . compile ( r """" <val1> """" ) \"	\ substitute the result for block_re . call the function <name2> .compile with an argument raw string <val1> , substitute the result for <name6> . \
"\ <name5> = <name6> . compile ( r """" <val2> """" ) \"	\ call the function <name6> .compile with an argument raw string <val2> , substitute the result for <name5> . \
"\ <name3> = <name2> . compile ( r """" <val6> . * ? <val1> """" ) \"	\ call the function <name2> .compile with an argument raw string <val6> . * ? <val1> , substitute the result for <name3> . \
"<name1> = <name6> . compile ( r """" <val2> """" )"	call the function <name6> .compile with an argument raw string <val2> , substitute the result for <name1> .
def <name3> ( <name1> , <name2> = <name5> ) :	define the function <name3> with 2 arguments : <name1> and <name2> set to <name5> .
<name2> <name1> . template <name5> ( <name6> , <name4> , <name3> , <name2> , <name1> , <name5> )	<name2> <name1> .template <name5> <name6> , <name4> , <name3> , <name2> , <name1> and <name5> .
<name4> = <name1> ( <name4> , <name2> . FILE_CHARSET )	call the function <name1> with 2 arguments : <name4> and <name2> .FILE_CHARSET .
<name6> = <name5> ( ''   )	<name6> is an instance of <name5> class , created with an empty string as an argument .
<name5> = <name1>	<name5> is <name1> .
<name4> = <name3>	<name4> is boolean <name3> .
<name6> = <name2>	<name6> is boolean <name2> .
<name2> = <name4>	<name2> is boolean <name4> .
<name3> = [ ]	<name3> is an empty list .
<name2> = [ ]	<name2> is an empty list .
<name1> = <name6>	<name1> is boolean <name6> .
<name1> = [ ]	<name1> is an empty list .
<name5> = { }	<name5> is an dictionary .
<name6> = <name4>	<name6> is <name4> .
def <name4> ( <name1> , <name2> = <name5> ) :	define the function <name4> with 2 arguments : <name1> and <name2> set to boolean <name5> .
<name4> = ''   . <name5> ( <name2> )	<name5> <name2> elements into a string , substitute it for <name4> .
<name3> <name5> :	<name3> <name5> is true ,
<name2> = <name1> ( <name2> )	call the function <name1> with an argument <name2> , substitute the result for <name2> .
<name4> <name3>	<name4> <name3> .
<name5> <name3> <name6> <name4> ( <name1> , <name2> ) . <name5> ( ) :	instantiate <name4> class with 2 argumets <name1> and <name2> , call the method <name5> from it , <name5> every <name3> <name6> the result ,
<name1> <name6> :	<name1> <name6> is true ,
<name2> <name3> . token_type == <name1> <name5> <name3> . contents == <val4>   :	<name2> <name3> .token_type equals <name1> <name5> <name3> .contents equals <val4> ,
<name5> = ''   . <name1> ( <name3> )	<name1> <name3> elements into a string , substitute it for <name5> .
<name1> = <name6>	<name1> is <name6> .
<name4> <name5> , <name3> in enumerate ( <name2> . splitlines ( <name1> ) ) :	<name4> every <name5> and <name3> is enumerated result of the method <name2> .splitlines , called with an argument boolean <name1> ,
<name4> <name6> . lstrip ( ) . startswith ( <name1> ) :	call the method <name6> .lstrip , <name4> the result starts with <name1> ,
     <name1> = <name3>	substitute <name3> for <name1> .
<name2> <name5> , <name4> in enumerate ( <name1> . splitlines ( <name6> ) ) :	<name2> every <name5> and <name4> is enumerated result of the method <name1> .splitlines , called with an argument boolean <name6> ,
<name1> <name6> <name5> <name3> <name2> <name4> <name1> >= <name6> :	<name1> <name6> <name5> <name3> <name2> <name4> <name1> <name5> greater than or equal to <name6> ,
     <name3> . <name4> ( <val1>   % <name6> )	substitute '%s' in string <val1> with <name6> , <name4> it to <name3> file .
else :	if not ,
\     <name3> . <name6> ( <val5>   ) \	\ <name6> string <val5> to <name3> file . \
<name2> = <name1>	<name2> is boolean <name1> .
<name5> = [ ]	<name5> is an empty list .
else :	if not ,
<name5> . <name3> ( <name1> . contents )	<name3> <name1> .contents to <name5> .
elif <name3> :	otherwise if <name3> is true ,
<name6> <name1> . token_type == <name5> :	<name6> <name1> .token_type equals <name5> ,
<name1> = <name5> . match ( <name6> . contents )	call the function <name5> .match with an argument <name6> .contents , substitute the result for <name1> .
<name6> = <name3> . match ( <name5> . contents )	call the function <name3> .match with an argument <name5> .contents , substitute the result for <name6> .
<name5> <name2> :	<name5> <name2> is true ,
<name3> <name5> :	<name3> <name5> is true ,
     <name1> <name2> :	<name1> <name2> is true ,
         out . write ( <val2>   % ( <name1> , <name3> ( singular , trimmed ) , <name3> ( plural , trimmed ) ) )	substitute '%r' in string <val2> with <name1> , result of the function <name3> ,
else :	called with 2 arguments : singular and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out . if not ,
         out . write ( <val2>   % ( <name5> ( <name1> , trimmed ) , <name5> ( plural , trimmed ) ) )	substitute '%r' in string <val2> with result of the function <name5> , called with 2 arguments : <name1> ,
<name5> <name6> <name2> <name1> :	and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out . <name5> every <name6> <name2> <name1> ,
         <name4> . <name6> ( <name5> ( <name2> , <val1>   ) )	call the method <name5> with 2 arguments : <name2> and <val1> , <name6> the result to <name4> .
<name4> <name5> <name6> <name1> :	<name4> every <name5> <name6> <name1> ,
         <name3> . <name4> ( <name5> ( <name6> , <val1>   ) )	call the method <name5> with 2 arguments : <name6> and <val1> , <name4> the result to <name3> .
else :	if not ,
     <name6> <name4> :	<name6> <name4> is true ,
         out . write ( <val4>   % ( <name5> , <name1> ( singular , trimmed ) ) )	substitute '%r' in string <val4> with <name5> and result of the function <name1> ,
else :	called with 2 arguments : singular and trimmed , write the result to out . if not ,
         out . write ( <val1>   % <name5> ( <name3> , trimmed ) )	substitute '%r' in string <val1> with result of the function <name5> , called with 2 arguments : <name3> ,
<name4> <name6> <name3> <name2> :	and trimmed , write the result to out . <name4> every <name6> <name3> <name2> ,
         <name2> . <name4> ( <name5> ( <name6> , <val1>   ) )	call the method <name5> with 2 arguments : <name6> and <val1> , <name4> the result to <name2> .
<name5> = <name3>	<name5> is <name3> .
<name2> = <name6>	<name2> is boolean <name6> .
<name6> = <name1>	<name6> is boolean <name1> .
<name6> = [ ]	<name6> is an empty list .
<name5> = [ ]	<name5> is an empty list .
elif <name2> :	otherwise if <name2> is true ,
<name6> = <name3>	<name6> is boolean <name3> .
else :	if not ,
<name3> = ''	<name3> is an empty string .
<name5> <name3> :	<name5> <name3> is true ,
     <name2> = <val4>   % <name5>	<name2> is a string <val4> , where '%s' is replaced with <name5> .
<name3> <name2> ( <val1> % ( t . contents , filemsg , t . lineno ) )	<name3> an <name2> with an argument string <val1> ,
elif <name2> . token_type == <name4> :	formated with <name2> .contents , filemsg and <name2> .lineno . otherwise if <name2> .token_type equals <name4> ,
<name6> <name5> :	<name6> <name5> is true ,
<name1> . <name2> ( <val4>   % <name6> . contents )	<name2> string <val4> to <name1> , where '%s' is replaced with <name6> .contents .
else :	if not ,
<name2> . <name1> ( <val4>   % <name5> . contents )	<name1> string <val4> to <name2> , where '%s' is replaced with <name5> .contents .
elif <name5> . token_type == <name3> :	if <name5> .token_type == <name3> :
<name1> = <name5> . sub ( <val6>   , <name3> . <name1> )	call the method <name5> .sub with 2 arguments : string <val6> and <name3> .contents , substitute the result for <name1> .
<name3> <name5> :	<name3> <name5> is true ,
<name4> . <name2> ( <name5> )	<name2> <name5> to <name4> .
else :	if not ,
<name5> . <name1> ( <name4> )	<name1> <name4> to <name5> .
else :	if not ,
<name5> <name1> <name2> <name4> <name6> :	<name5> <name1> <name2> <name4> <name6> ,
\ <name2> = <name1> . lineno + <name1> . contents . <name6> ( <val3>   ) \	\ <name6> occurrences of <val3> in <name1> .contents , add the result to <name1> .lineno , substitute the result for <name2> . \
<name4> <name6> == <name3> :	<name4> <name6> equals <name3> .
<name4> <name5> . token_type != <name2> :	<name4> <name5> .token_type is not equal to <name2> ,
     <name2> <name3> <name6> <name1> [ <name5> ] :	<name2> every <name3> <name6> <name1> dictionary value under the <name5> key ,
         <name1> = ''	<name1> is an empty string .
<name3> <name5> :	<name3> <name5> is true ,
             <name6> = <val4>   % <name5>	<name6> is a string <val4> , where '%s' is replaced with <name5> .
"<name1> = ( ""The translator-targeted comment '%s' "" ""(%sline %d) was ignored, because it wasn't the last item "" ""on the line."" ) % ( c , filemsg , comment_lineno_cache )"	"<name1> is a string ""The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line."" ,"
<name1> . warn ( <name2> , <name5> )	formated with c , filemsg and comment_lineno_cache . call the function <name1> .warn with 2 arguments : <name2> and <name5> .
<name2> [ <name6> ] = [ ]	value under the <name6> key of the <name2> dictionary is an empty string .
else :	if not ,
out . write ( '# %s'   % <val5>   . <name6> ( <name2> [ <name4> ] ) )	<name6> <name2> dictionary value under the <name4> key into a string , separated with <val5> ,
<name6> = <name5>	format with it a string '# %s' , write it to out . <name6> is <name5> ,
<name2> <name5> . token_type == <name6> :	<name2> <name5> .token_type equals <name6> ,
<name1> = <name6> . match ( <name5> . contents )	call the function <name6> .match with an argument <name5> .contents , substitute the result for <name1> .
<name2> = <name5> . match ( <name4> . contents )	call the function <name5> .match with an argument <name4> .contents , substitute the result for <name2> .
<name4> = <name5> . findall ( <name2> . contents )	call the function <name5> .findall with an argument <name2> .contents , substitute the result for <name4> .
<name1> <name6> :	<name1> <name6> is true ,
<name3> = <name2> . group ( <val4> )	call the method <name2> .group with an argument integer <val4> , substitute the result for <name3> .
<name1> = <name3> . sub ( <val5>   , <name1> )	call the method <name3> .sub with 2 arguments : string <val5> and <name1> , substitute the result for .
<name5> <name2> . group ( 2 ) :	call the method <name2> .group with an argument integer 1 , <name5> it evaluates to true ,
       context_match = <name4> . match ( <name3> . group ( <val5> ) )	call the method <name3> .group with an argument integer <val5> , use the result as an argument for the call to the method <name4> .match ,
<name1> = <name5> . group ( <val3> )	substitute the result for <name5> . call the method <name5> .group with an argument integer <val3> , substitute the result for <name1> .
<name1> . <name4> ( <val3>   % ( <name5> , <name6> ) )	format string <val3> with <name5> and <name6> , <name4> it to <name1> .
<name6> = <name4>	<name6> is <name4> .
else :	if not ,
     <name2> . <name6> ( <val1>   % <name4> )	format string <val1> with <name4> , <name6> it to <name2> .
elif <name4> :	otherwise if <name4> is true ,
<name2> <name6> <name3> <name4> . findall ( <name1> . contents ) :	call the method <name4> .findall with an argument <name1> .contents , <name2> every <name6> <name3> the result ,
     <name6> . <name4> ( <val1>   % <name3> )	format string <val1> , with <name3> , <name4> it to <name6> .
<name6> <name4> . group ( <val3> ) :	call the method <name4> .group with an argument integer <val3> , <name6> it evaluates to true ,
       context_match = <name4> . match ( <name5> . group ( <val3> ) )	call the method <name5> .group with an argument integer <val3> , use the result as an argument for the call to the function <name4> .match ,
<name2> = <name4> . group ( <val6> )	substitute the result for <name4> . call the method <name4> .group with an argument integer <val6> , substitute the result for <name2> .
<name2> = <name1>	<name2> is boolean <name1> .
<name6> = <name3>	<name6> is boolean <name3> .
<name1> = <val6>   <name5> <name3> . split_contents ( )	if string <val6> is contained <name5> result of the method <name3> .split_contents , <name1> is boolean True , otherwise is boolean False .
<name6> = [ ]	<name6> is an empty list .
<name5> = [ ]	<name5> is an empty list .
elif <name1> :	otherwise if <name1> is true ,
<name6> <name2> <name5> <name1> :	<name6> every <name2> <name5> <name1> ,
     <name4> . <name6> ( <val2>   % cmatch )	format string <val2> , with fmatch , <name6> it to <name4> .
elif <name2> . contents == <val4>   :	otherwise if <name2> .contents equals a string <val4> ,
<name1> = <name4>	<name1> is boolean <name4> .
else :	if not ,
<name2> . <name3> ( <name5> ( <name1> . contents , <val6>   ) )	call the function <name5> with 2 arguments : <name1> .contents and <val6> , <name3> the result to <name2> .
elif <name5> . token_type == <name2> :	otherwise if <name5> .token_type equals <name2> ,
<name6> = <name2> . contents . <name5> ( <val3>   )	<name5> <name2> .contents by <val3> symbol , substitute the result for <name6> ,
<name4> = <name1> . match ( <name3> [ 0 ] )	call the method <name1> .match with first element of <name3> as an argument , substitute the result for <name4> .
<name1> <name5> :	<name1> <name5> is true ,
<name2> . <name3> ( <val5>   % <name6> . group ( <val1> ) )	call the method <name6> .group with an argument integer <val1> , format with the result string <val5> , <name3> it to <name2> .
<name1> <name5> <name3> <name2> [ 1 : ] :	<name1> every <name5> <name3> <name2> without the first element ,
<name1> <name5> . <name3> ( <val6>   ) >= <val2> :	<name3> index of the occurrence of string <val6> in <name5> , <name1> its greater or equal to integer <val2> ,
     <name2> . <name4> ( ' %s '   % <name1> . <name3> ( <val5>   , 1 ) [ 1 ] )	<name3> <name1> into two parts at the first <val5> , use the second element of the result to format string ' _(%s) ' , <name4> it to <name2> .
else :	if not ,
     <name2> . <name5> ( <name4> ( <name1> , <val3>   ) )	call the function <name4> with 2 arguments : <name1> and <val3> , <name5> the result to <name2> .
elif <name2> . token_type == <name1> :	otherwise if <name2> .token_type equals <name1> ,
<name1> <name6> . contents . lstrip ( ) . startswith ( <name4> ) :	strip <name6> .contents from the left side of whitespaces , <name1> the result starts with <name4> ,
<name2> . setdefault ( <name1> . lineno , [ ] ) . <name3> ( <name1> . contents )	call the method <name2> .setdefault with 2 arguments : <name1> .lineno and an empty list , <name3> <name1> .contents to the result .
<name6> = <name3> . lineno	substitute <name3> .lineno for <name6> .
else :	if not ,
<name6> . <name5> ( <name3> ( <name4> . contents , <val2>   ) )	call the function <name3> with 2 arguments : <name4> .contents and <val2> , <name5> the result to <name6> .
<name3> <name1> . getvalue ( )	call the method <name1> .getvalue , <name3> the result .
def <name1> ( <name5> ) :	define the function <name1> with an argument <name5> .
<name3> = [ ]	<name3> is an empty list .
<name2> = <name6> . <name4> ( <name1> . lower ( ) )	convert <name1> to lowercase , <name4> by the result string <name6> , substitute the result for <name2> .
<name4> <name3> [ - 1 ] :	<name4> last element of <name3> is true ,
<name3> [ ]	<name3> an empty list .
<name1> <name3> <name2> <name4> ( <val5> , len ( <name6> ) - 1 , <val1> ) :	<name1> every <name3> <name2> <name4> of integers from integer <val5> to the length of <name6> decremented by one , with step of integer <val1> ,
<name4> , <name5> , <name2> = <name3> [ <name1> : <name1> + <val6> ]	substitute <val6> successive elements starting from the <name1> - th index of <name3> for <name4> , <name5> and <name2> , respectively .
<name5> <name4> :	<name5> <name4> is true ,
<name2> [ ]	<name2> an empty list .
<name6> <name4> :	<name6> <name4> is true ,
<name4> :	<name4> ,
<name5> = float ( <name5> )	convert <name5> into a floating point integer , substitute it for <name5> .
except <name5> :	if <name5> exception is caught ,
<name5> [ ]	<name5> an empty list .
<name6> not <name4> :	<name6> <name4> is false ,
<name5> = <val3>	<name5> is floating point number <val3> .
<name6> . <name5> ( ( <name3> , <name2> ) )	<name5> a tuple with 2 entries <name3> and <name2> to <name6> .
<name1> . <name5> ( <name3> = <name2> <name6> : <name6> [ 1 ] , reverse = True )	<name5> <name1> in reversed order by the <name3> as <name2> function with an argument <name6> and reeturn value second element of <name6> .
<name5> <name3>	<name5> <name3> .
<name3> <name4>	<name3> module <name4> .
<name3> <name4> ( <name6> ) :	derive the <name3> <name4> from <name6> base <name3> .
<name1> = <val4>	<name1> is a string <val4> .
def <name3> ( <name2> , <name1> = <name4> , <name6> = <name4> , <name5> = <name3> ) :	define the method <name3> with 4 arguments : <name2> , <name1> set to <name4> , <name6> set to <name4> and <name5> set to boolean <name3> .
<name2> . <name3> = <name3> [ : ] <name5> <name3> else [ ]	<name5> <name3> is true , copy <name3> list to <name2> .children , otherwise <name2> .children is an empty list .
<name5> . <name3> = <name3> or <name5> . default	if <name3> is true , substitute it for <name5> .connector , otherwise substitute <name5> .default for <name5> .connector .
<name5> . <name4> = <name4>	substitute <name4> for <name5> .negated .
@  <name1>	decorator <name1> ,
def <name6> ( <name3> , <name5> = <name1> , <name2> = <name1> , <name4> = <name6> ) :	define the method <name6> with 4 arguments : ( <name3> , <name5> set to <name1> , <name2> set to <name1> and <name4> set to boolean <name6> .
<name1> = <name6> ( <name5> , <name4> , <name3> )	<name1> is an instance of <name6> class , created with 3 arguments : <name5> , <name4> and <name3> .
<name2> . __class__ = <name3>	substitute <name3> for <name2> .__class__ .
<name1> <name5>	<name1> <name5> .
def <name2> ( <name4> ) :	define the method <name2> with an argument <name4> .
<name2> <name5> . negated :	<name2> <name5> .negated ,
<name1> <val2>   % ( <name3> . connector , <val4>   . join ( [ str ( <name5> ) for <name5> in <name3> . children ] ) )	<name1> string <val2> , formated with <name3> .connector and string created by joining <name5> into a string , separated by <val4> ,
<name6> <val4>   % ( <name2> . connector , <val1>   . join ( [ str ( <name5> ) <name3> <name5> <name6> <name2> . children ] ) )	<name3> every <name5> <name6> <name2> .children . <name6> string <val4> , formated with <name2> .connector and string created by joining <name5> into a string , separated by <val1> ,
def <name1> ( <name2> ) :	for every c in <name2> .children . define the method <name1> with an argument <name2> .
<name4> <val3> % ( <name2> . __class__ . __name__ , <name2> )	<name4> string <val3> , formated with <name2> .__class__ .__name__ and <name2> .
def <name5> ( <name3> , <name6> ) :	define the method <name5> with 2 arguments : <name3> and <name6> .
<name2> = <name3> ( <name4> = <name6> . <name4> , <name1> = <name6> . <name1> )	<name2> is an instance of <name3> class , created with 2 arguments : <name4> set to <name6> .connector and <name1> set to <name6> .negated .
<name4> . __class__ = <name6> . __class__	substitute <name6> .__class__ for <name4> .__class__ .
<name3> . children = <name1> . deepcopy ( <name2> . children , <name6> )	call the function <name1> .deepcopy with 2 arguments : <name2> .children and <name6> , substitute the result for <name3> .children .
<name2> <name5>	<name2> <name5> .
def <name2> ( <name5> ) :	define the method <name2> with an argument <name5> .
<name3> len ( <name6> . children )	<name3> the length of <name6> .children .
def <name5> ( <name4> ) :	define the method <name5> with an argument <name4> .
<name5> bool ( <name6> . children )	convert <name6> .children into an boolean , <name5> it .
def <name6> ( <name1> ) :	define the method <name6> with an argument <name1> .
<name3> <name5> ( <name2> ) . <name4> ( <name2> )	get the <name5> of the <name2> object , on the result call the <name4> method with an argument <name2> , <name3> the result .
def <name4> ( <name6> , <name3> ) :	define the method <name4> with 2 arguments : <name6> and <name3> .
<name2> <name5> <name3> <name1> . children	if <name5> is contained <name3> <name1> .children , <name2> boolean True , otherwise <name2> boolean False .
def <name6> ( <name5> , <name3> ) :	define the method <name6> with 2 arguments : <name5> and <name3> .
<name2> <name4>	<name2> <name4> .
def <name2> ( <name6> , <name3> , <name4> , <name5> = <name1> ) :	define the method <name2> with 4 arguments : <name6> , <name3> , <name4> and <name5> set to boolean <name1> .
<name5> <name4> <name1> <name6> . children :	<name5> <name4> is contained <name1> <name6> .children ,
<name3> <name1>	<name3> <name1> .
<name4> = <name1> . _prepare_data ( <name4> )	call the method <name1> ._prepare_data with an argument <name4> , substitute the result for <name4> .
<name3> not <name6> :	<name3> <name6> is false ,
<name6> . children . <name4> ( <name1> )	<name4> <name1> to <name6> .children .
<name3> <name6>	<name3> <name6> .
<name4> <name2> . connector == <name5> :	<name4> <name2> .connector equals <name5> ,
<name4> ( isinstance ( <name1> , <name5> ) <name6> not <name1> . negated <name6> ( <name1> . connector == <name3> <name2> len ( <name1> ) == <val4> ) ) :	<name4> <name1> is instance of <name5> <name6> <name1> .negated is false , <name6> <name4> <name1> .connector equals <name3> <name2> length of <name1> equals integer <val4> ,
   <name4> . children . <name3> ( <name1> . children )	<name3> <name4> .children list with <name1> .children .
<name1> <name6>	<name1> <name6> .
else :	if not ,
<name4> . children . <name1> ( <name6> )	<name1> <name6> to <name4> .children .
<name3> <name5>	<name3> <name5> .
else :	if not ,
<name6> = <name1> . _new_instance ( <name1> . children , <name1> . connector , <name1> . negated )	call the method <name1> ._new_instance with 3 arguments : <name1> .children , <name1> .connector and <name1> .negated , substitute the result for <name6> .
<name3> . connector = <name2>	substitute <name2> for <name3> .connector .
<name4> . children = [ <name6> , <name3> ]	<name4> .children is an list with 2 elements : <name6> and <name3> .
<name6> <name2>	<name6> <name2> .
def <name6> ( <name2> ) :	define the method <name6> with an argument <name2> .
<name2> . negated = not <name2> . negated	invert <name2> .negated .
<name3> <name2> <name5> <name1>	<name3> <name2> <name5> <name1> into default name space .
<name3> <name1> <name4> <name6> , <name5>	<name3> <name1> <name4> <name6> and <name5> into default name space .
<name3> <name6>	<name3> module <name6> .
<name2> <name6>	<name2> module <name6> .
<name4> <name2> . utils . deprecation <name6> <name5>	<name4> <name2> .utils .deprecation <name6> <name5> into default name space .
<name1> <name3> . utils . encoding <name5> <name2> , <name4> , <name6>	<name1> <name3> .utils .encoding <name5> <name2> , <name4> and <name6> into default name space .
"<name1> . warn ( <val4> ""Use django.utils.timezone instead."" , RemovedInDjango19Warning , stacklevel = 2 )"	call the function <name1> .warn with 3 arguments : string <val4>
<name4> <name1> ( <name6> ) :	Use django .utils .timezone instead . , RemovedInDjango19Warning and stacklevel set to 2 . derive the <name4> <name1> from the <name6> base <name4> .
def <name5> ( <name6> , <name2> ) :	define the method <name5> with 2 arguments : <name6> and <name2> .
"<name2> . warn ( <val6> ""Use django.utils.timezone.get_fixed_timezone instead."" , RemovedInDjango19Warning )"	call the function <name2> .warn with 2 arguments : <val6>
<name6> isinstance ( <name3> , <name2> ) :	Use django .utils .timezone .get_fixed_timezone instead . and RemovedInDjango19Warning . <name6> <name3> is an instance of <name2> class ,
<name3> . __offset = <name2>	substitute <name2> for <name3> .__offset .
<name2> = <name3> . __offset . seconds // 60	substitute <name3> .__offset .seconds for <name2> .
else :	if not ,
<name1> . __offset = <name5> ( <name4> = <name2> )	call the function <name5> with an argument <name4> set to <name2> , substitute the result for <name1> .__offset .
<name1> = <val4>   <name3> <name5> <  <val2> else <val6>	<name3> <name5> is lesser than integer <val2> , <name1> is set to <val4> , otherwise <name1> is <val6> ,
<name4> . __name = <val6> % ( <name1> , abs ( <name5> ) / <val3> . , abs ( <name5> ) % <val3> )	<name4> .__name is a string <val6> , replace '%s' with <name1> , '%02d' is replaced with absolute value of <name5> divided by <val3> ,
def <name3> ( <name2> ) :	and placed into 2 character spaces , and '%02d' is replaced with reminder of the division of absolute offset by integer 60 , and placed into 2 character spaces . define the method <name3> with an argument <name2> .
<name1> <name4> . __name	<name1> <name4> .__name .
def <name5> ( <name6> ) :	define the method <name5> with an argument <name6> .
<name6> <name3> . __offset ,	<name6> a tuple with an element <name3> .__offset .
def <name4> ( <name1> , <name6> ) :	define the method <name4> with 2 arguments <name1> and <name6> .
<name2> <name4> . __offset	<name2> <name4> .__offset .
def <name5> ( <name1> , <name6> ) :	define the method <name5> with 2 arguments <name1> and <name6> .
<name3> <name6> . __name	<name3> <name6> .__name .
def <name2> ( <name5> , <name4> ) :	define the method <name2> with 2 arguments <name5> and <name4> .
<name3> <name5> ( <val2> )	call the function <name5> with an argument integer <val2> , <name3> the result .
<name6> <name1> ( <name4> ) :	derive the <name6> <name1> from the <name4> base <name6> .
def <name3> ( <name5> , <name6> ) :	define the method <name3> with 2 arguments <name5> and <name6> .
"<name2> . warn ( <val5> ""Use django.utils.timezone.get_default_timezone instead."" , RemovedInDjango19Warning )"	call the function <name2> .warn with 2 arguments : string <val5>
<name3> . __init__ ( <name4> )	Use django .utils .timezone .get_default_timezone instead . and RemovedInDjango19Warning . call the method <name3> .__init__ with an argument <name4> .
<name3> . __dt = <name5>	substitute <name5> for <name3> .__dt .
<name3> . _tzname = <name3> . tzname ( <name1> )	call the method <name3> .tzname with an argument <name1> , substitute the result for <name3> ._tzname .
def <name3> ( <name2> ) :	define the method <name3> with an argument <name2> .
<name3> <name5> ( <name1> . _tzname )	call the function <name5> with an argument <name1> ._tzname , <name3> the result .
def <name3> ( <name5> ) :	define the method <name3> with an argument <name5> .
<name5> <name4> . __dt ,	<name5> a tuple with an element <name4> .__dt .
def <name5> ( <name4> , <name3> ) :	define the method <name5> with 2 arguments <name4> and <name3> .
<name1> <name2> . _isdst ( <name4> ) :	call the nethod <name2> ._isdst with an argument <name4> , <name1> it evaluates to true ,
<name4> <name6> ( <name3> = - <name1> . altzone )	call the function <name6> with an argument <name3> as negative <name1> .altzone , <name4> the result .
else :	if not ,
<name1> <name2> ( <name4> = - <name6> . timezone )	call the function <name2> with an argument <name4> as negative <name6> .timezone , <name1> the result .
def <name1> ( <name2> , <name6> ) :	define the method <name1> with 2 arguments <name2> and <name6> .
<name4> <name6> . _isdst ( <name2> ) :	call the nethod <name6> ._isdst with an argument <name2> , <name4> it evaluates to true ,
return <name1> ( <name5> = - <name3> . altzone ) - <name1> ( <name5> = - <name3> . timezone )	call the function <name1> with an argument <name5> as negative <name3> .timezone , subtract the result from the result of the call ,
else :	to the function timedelta called with an argument seconds as negative time .altzone , return the result . if not ,
<name3> <name4> ( <val1> )	call the function <name4> with an argument integer <val1> , <name3> the result .
def <name1> ( <name5> , <name2> ) :	define the method <name1> with 2 arguments <name5> and <name2> .
<name6> = <name3> <name1> <name2> <name5> <name4> else <name6> . _isdst ( <name2> )	<name1> <name2> <name5> <name4> <name6> <name5> boolean <name3> , otherwise call the method <name6> ._isdst with an argument <name2> , substitute the result for <name6> .
<name1> :	<name1> ,
return <name4> ( <name3> . tzname [ <name6> ] , <name5> )	call the function <name4> with 2 arguments : value under the <name6> key of the <name3> .tzname and <name5> ,
except <name5> :	return the result . if <name5> exception is caught ,
<name4> <name2>	<name4> <name2> .
def <name2> ( <name4> , <name5> ) :	define the method <name2> with 2 arguments <name4> and <name5> .
<name1> = ( <name4> . year , <name4> . month , <name4> . day , <name4> . hour , <name4> . minute , <name4> . second , <name4> . weekday ( ) , 0 , 0 )	<name1> is an tuple with 9 elements : <name4> .year , <name4> .month , <name4> .day , <name4> .hour , <name4> .minute , <name4> .second , result of the function <name4> .weekday ,
<name6> :	integer 0 and integer 0 . <name6> ,
<name5> = <name3> . mktime ( <name2> )	call the method <name3> .mktime with an argument <name2> , substitute the result for <name5> .
except ( <name4> , <name3> ) :	if <name4> or <name3> exceptions are caught ,
   <name4> = ( <val2> , ) + <name4> [ 1 : ]	create a tuple out a tuple with an element integer <val2> and a list <name4> elements without the first element , substitute the result for <name4> .
<name5> = <name1> . mktime ( <name4> )	call the method <name1> .mktime with an argument <name4> , substitute the result for <name5> .
<name6> = <name4> . localtime ( <name5> )	call the method <name4> .localtime with an argument <name5> , substitute the result for <name6> .
<name6> <name5> . tm_isdst >  <val1>	if <name5> .tm_isdst is greater than intger <val1> , <name6> boolean True , otherwise <name6> boolean False .
<name6> <name2> <name3> <name5>	<name6> <name2> <name3> <name5> into default name space .
<name2> <name3>	<name2> module <name3> .
<name4> <name6> . utils . deprecation <name2> <name5>	<name4> <name6> .utils .deprecation <name2> <name5> into default name space .
<name2> . warn ( <val3> , RemovedInDjango19Warning , stacklevel = 2 )	call the function <name2> .warn with 3 arguments : string <val3> ,
<name1> :	RemovedInDjango19Warning and stacklevel as integer 2 . <name1> ,
<name2> <name1> <name3> *	<name2> <name1> <name3> everything .
except <name3> :	if <name3> exception is caught ,
<name6> <name3> <name2> *	<name6> <name3> <name2> <name2> everything .
<name5> <name3> <name6> <name2>	<name5> <name3> <name6> <name2> into default name space .
<name4> <name5>	<name4> module <name5> .
<name4> <name3>	<name4> module <name3> .
<name4> <name2>	<name4> module <name2> .
def <name2> ( <name4> = <name6> ) :	define the function <name2> with <name4> set to <name6> as argument .
<name2> = <name3> ( <name2> )	call the <name3> function with <name2> as argument , store the result in <name2> .
<name4> = <name3> ( <name1> )	call the <name3> wit <name1> as argument , store the result in <name4> .
<name3> = ''	<name3> is an empty string .
<name4> <name3> [ 3 ] == <val6>   <name2> <name3> [ 4 ] == <val1> :	<name4> fourth element of <name3> equals to string <val6> <name2> fight element of <name3> equals to integer <val1> ,
<name5> = <name1> ( )	call the function <name1> , store the result in <name5> .
<name1> <name6> :	<name1> <name6> is true ,
<name5> = '.dev%s'   % <name1>	convert <name1> to string , append it to the string '.dev' , replace it for <name5> .
elif <name3> [ 3 ] != <val6>   :	otherwise if fourth element of <name3> does not equals to <val6> ,
<name1> = {  <val5>   : <val3>   , <val2>   : <val4>   , <val6>   : <val1>  }	<name1> is a dictionary with 3 initial entries : <val3> for <val5> , <val4> for <val2> and <val1> for <val6> .
<name6> = <name3> [ <name4> [ 3 ] ] + str ( <name4> [ 4 ] )	use fourth element of <name4> as a key to get the value from <name3> dictionary , append to it fourth element of <name4> converted to string , substitute it for <name6> .
<name3> str ( <name1> + <name4> )	sum <name1> and <name4> , <name3> the result converted to string .
def <name5> ( <name1> = <name3> ) :	define the function <name5> with an argument <name1> defaulting to <name3> .
<name2> = <name3> ( <name2> )	call the <name3> with an argument <name2> , store the result in <name2> .
<name1> = <val4> <name5> <name6> [ <val4> ] == 0 else <val2>	assign integer <val4> to <name1> <name5> third element of <name6> equals to zero , otherwise assign it integer <val2> .
<name6> = <val5>   . <name3> ( str ( <name2> ) <name4> <name2> <name1> <name6> [ : <name5> ] )	convert <name2> into a string <name4> every <name2> <name1> list of <name6> elements up to the <name5> index , <name3> the previous into a string separated by <val5> , assign the result to <name6> .
<name6> <name5>	<name6> <name5> .
def <name3> ( <name4> = <name6> ) :	define the function <name3> with in argument <name4> , defaulting to <name6> .
<name1> <name2> <name5> <name6> :	<name1> <name2> <name5> <name6> ,
<name2> <name4> <name3> <name6> <name1> <name5>	<name2> <name4> <name3> <name6> <name1> <name5> into default name space .
else :	if not ,
assert len ( <name2> ) == <val6>	if length of <name2> does not equals to integer <val6> , raise an exception .
assert <name2> [ 3 ] in ( <val5>   , <val1>   , <val3>   , <val4>   )	if fourth element of <name2> does not equals to string <val5> or <val1> or <val3> or <val4> , raise an exception .
<name1> <name4>	<name1> <name4>
def <name3> ( ) :	define the function <name3> .
<name2> hasattr ( <name4> , <val3>   ) :	<name2> <name4> has an attribute <val3> ,
<name2> <name4> . cache	<name2> <name4> .cache .
<name6> = os . <name2> . dirname ( os . <name2> . dirname ( os . <name2> . abspath ( <name5> ) ) )	get the absolute <name2> of the <name5> , <name6> is name of the directory two leveles above it .
git_log = <name5> . Popen ( <val2>   , <name4> = <name5> . PIPE , stderr = <name5> . PIPE , shell = True , cwd = repo_dir , universal_newlines = True )	call the <name5> .Popen function with , <val2> , <name4> set to <name5> .PIPE ,
<name6> = <name2> . communicate ( ) [ 0 ]	stderr set to subprocess .PIPE , shell set to boolean True , cwd set to repo_dir and universal_newlines set to boolean True , as arguments , substitute the result for <name2> . evaluate the method <name2> .communicate , substitute first element of the result for <name6> .
<name2> :	<name2>
<name3> = <name5> . <name5> . utcfromtimestamp ( int ( <name3> ) )	call the <name5> .datetime .utcfromtimestamp with <name3> converted to an integer as argument , substitute result for <name3> .
except <name6> :	if <name6> exception is caught ,
<name5> = <name3>	<name5> is <name3> .
else :	if not ,
<name6> = <name3> . strftime ( <val5>   )	call the <name3> .strftime with string <val5> as an argument , substitute the result for <name6> .
<name3> . cache = <name2>	substitute <name2> for <name3> .cache .
<name4> <name3>	<name4> <name3> .
<name5> <name4> . sax . saxutils <name2> <name1>	<name5> <name4> .sax .saxutils <name2> <name1> into default name space .
<name4> <name3> ( <name5> ) :	derive the <name4> <name3> form the <name5> base <name4> .
def <name1> ( <name2> , <name6> , <name3> = <name4> , <name5> = <name4> ) :	define the method <name1> with 4 arguments : <name2> , <name6> , <name3> set to <name4> and <name5> set to <name4> .
<name2> <name1> <name4> <name3> :	<name2> <name1> <name4> <name3> ,
<name6> = { }	<name6> is an empty dictionary .
<name2> . startElement ( <name5> , <name3> )	cal the method <name2> .startElement with 2 arguments : <name5> and <name3> .
<name5> <name1> <name4> <name2> <name6> :	<name5> <name1> <name4> <name2> <name6> ,
<name3> . characters ( <name2> )	call the method <name3> .characters with an argument <name2> .
<name6> . endElement ( <name4> )	call the method <name6> .endElement with an argument <name4> .
