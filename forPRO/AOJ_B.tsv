start = <A>	そこで、開始は <A> とする
start = <A>	そこで、 <A> から始める
step = <A>	そこで、 <A> を間隔にする
step = <A>	そこで、間隔は <A> にする
encoding = <A>	そこで、エンコーディングは <A> とする
encoding = <A>	そこで、文字コードは <A> とする
encoding = <A>	そこで、 <A> をする
encoding = <A>	そこで、文字コード <A> をする
encoding = <A>	そこで、エンコーディング <A> を使う
encoding = <A>	そこで、エンコーディング <A> を用いる
encoding = <A>	そこで、エンコーディング <A> をする
encoding = <A>	そこで、 <A> を用いる
encoding = <A>	そこで、文字コード <A> を使う
encoding = 'utf-8'	そこで、 UTF8 を用いる
encoding = 'utf-8'	そこで、 UTF8 を使う
encoding = 'utf-8'	そこで、 UTF8 をする
errors = <A>	そこで、エラー処理は <A> とする
errors = <A>	そこで、 <A> をエラー処理ポリシーとする
errors = 'strict'	そこで、エラー処理を厳密にする
errors = 'strict'	そこで、エラー処理は厳密にする
errors = 'ignore'	そこで、エラー処理をしない
errors = 'ignore'	そこで、エラー処理はしない
mode = <A>	そこで、 <A> をモードにする
mode = <A>	そこで、モードは <A> にする
mode = 'b'	そこで、バイナリモードを用いる
mode = 'b'	そこで、バイナリモードをする
mode = 'b'	そこで、バイナリモードを使う
buffering = -1	そこで、バッファリングしない
buffering = <A>	そこで、バッファリングのサイズは <A> にする
sep = <A>	そこで、セパレータは <A> にする
sep = <A>	そこで、区切り記号は <A> にする
sep = <A>	そこで、区切り文字は <A> にする
sep = <A>	そこで、セパレータとして <A> を使う
sep = <A>	そこで、セパレータとして <A> を用いる
sep = <A>	そこで、区切り文字として <A> をする
sep = <A>	そこで、セパレータとして <A> をする
sep = <A>	そこで、区切り記号として <A> を使う
end = ''	そこで、改行しない
end = <A>	そこで、 <A> を改行文字にする
end = <A>	そこで、改行文字は <A> にする
end = <A>	そこで、改行の代わりに <A> を用いる
end = <A>	そこで、改行の代わりに <A> をする
end = <A>	そこで、改行の代わりに <A> を使う
file = <A>	そこで、 <A> を出力先とする
file = <A>	そこで、出力先は <A> とする
file = <A>	そこで、出力先として <A> をする
file = <A>	そこで、出力先として <A> を用いる
flush = False	そこで、フラッシュを行わない
flush = False	そこで、フラッシュは行わない
flush = False	そこで、フラッシュしない
flush = True	そこで、フラッシュを行う
byteorder = 'big'	そこで、バイトオーダーはビックエンディアンとする
byteorder = 'big'	そこで、ビックエンディアンを使う
byteorder = 'big'	そこで、ビックエンディアンをする
byteorder = 'big'	そこで、ビックエンディアンを用いる
byteorder = 'little'	そこで、リトルエンディアンをバイトオーダーとする
byteorder = 'little'	そこで、バイトオーダーはリトルエンディアンとする
byteorder = 'little'	そこで、リトルエンディアンを用いる
byteorder = 'little'	そこで、リトルエンディアンを使う
byteorder = 'little'	そこで、リトルエンディアンをする
fillchar = <A>	そこで、 <A> をパディングとする
fillchar = <A>	そこで、パディングは <A> にする
fillchar = <A>	そこで、パディングは <A> 文字にする
fillchar = <A>	そこで、 <A> で埋める
fillchar = <A>	そこで、文字 <A> で埋める
tabsize = <A>	そこで、空白 <A> 文字分をタブにする
tabsize = <A>	そこで、タブは空白 <A> 文字分とする
<A> = <B>	<A> に <B> を入れる
<A> = <B>	数値 <A> に <B> を代入する
<A> = <B>	数値 <A> に <B> を入れる
<A> = <B>	<A> に <B> を代入する
<A> = <B>	<B> を <A> に代入する
<A> = <B>	<B> を <A> 数値に代入する
<A> = <B>	<B> を数値 <A> に入れる
<A> = <B>	<B> を <A> に入れる
<A> = <B>	<B> を <A> 数値に入れる
<A> = <B>	数値 <A> を <B> とする
<A> = <B>	<A> を <B> とする
<A> = <B>	数値 <A> に <B> を入れる
<A> = <B>	<A> に <B> を入れる
<A> = <B>	<B> を <A> に入れる
<A> = <B>	<B> を <A> 数値に入れる
<A> = <B>	数値 <A> イコール <B>
<A> = <B>	<A> イコール <B>
<A> = <B>	<A> イコール <B> とする
<A> = <B>	数値 <A> イコール <B> とする
<A> ** <B>	<A> の <B> 乗
<A> ** 2	<A> の二乗
<A> ** <B>	<A> の <B> 乗を調べる
<A> ** 2	<A> の二乗を確認する
<A> ** <B>	<A> の <B> 乗を計算する
<A> ** 2	<A> の二乗を算出する
( <A> + <B> - 1 ) // <B>	<A> を <B> で割った結果の切り上げ
( <A> + <B> - 1 ) // <B>	<A> を <B> で割った結果の切り上げを調べる
( <A> + <B> - 1 ) // <B>	<A> を <B> で割った結果の切り上げを求める
( <A> + <B> - 1 ) // <B>	<A> わる <B> を切り上げる
( <A> + <B> - 1 ) // <B>	<A> 割る <B> を切り上げる
( <A> + <B> - 1 ) // <B>	<A> わる <B> の切り上げ
( <A> + <B> - 1 ) // <B>	<A> 割る <B> の切り上げ
( <A> + <B> - 1 ) // <B>	<A> わる <B> の切り上げを表示する
( <A> + <B> - 1 ) // <B>	<A> 割る <B> の切り上げを調べる
( <A> + <B> - 1 ) // <B>	<A> わる <B> の切り上げを算出する
( <A> + <B> - 1 ) // <B>	<A> 割る <B> の切り上げを計算する
<A> % <B>	<A> を <B> で割ったあまり
<A> % <B>	<A> を <B> で割ったあまりを算出する
<A> % <B>	<A> を <B> で割った余りを求める
<A> % <B>	<A> を <B> で割ったあまりを求める
<A> % <B>	<A> を <B> で割った余りを算出する
<A> % <B>	<A> を <B> で割ったあまりを確認する
<A> % <B>	<A> を <B> で割ったあまりを算出する
<A> % <B>	<A> を <B> で剰余を求める
<A> % <B>	<A> を <B> で剰余を算出する
<A> % <B>	<A> を <B> で剰余
<A> % <B>	<A> を <B> で剰余を見る
<A> % <B>	<A> を <B> で剰余を求める
<A> % <B>	<A> と <B> の mod
<A> % <B>	<A> と <B> の mod を求める
<A> % <B>	<A> と <B> の mod を算出する
<A> % <B>	<A> と <B> の mod を表示する
<A> % <B>	<A> と <B> の mod を算出する
<A> % <B>	<A> と <B> の割り算の余りを求める
<A> % <B>	<A> と <B> の割り算のあまりを求める
<A> += <B>	<A> を <B> だけ増加させる
<A> += <B>	<A> に <B> を足して代入する
<A> += <B>	<A> に <B> を足して代入
<A> += <B>	<A> と <B> の値を足して代入する
<A> += <B>	<A> に <A> と <B> の値を足して代入
<A> += <B>	<A> と <B> の値を足して代入
<A> += <B>	<A> に <A> と <B> の値を足して代入する
<A> += <B>	<A> と <B> を足して代入する
<A> += <B>	<A> たす <B> の値を代入する
<A> += <B>	<A> たす <B> の値を <A> に入れる
<A> += <B>	<A> たす <B> の値を入れる
<A> += <B>	<A> たす <B> の値を <A> に代入する
<A> -= <B>	<A> を <B> だけ減少させる
<A> -= <B>	<A> から <B> を引いて代入
<A> -= <B>	<A> から <B> を引いて代入する
<A> -= <B>	<A> から <B> の値を引いて代入する
<A> -= <B>	<A> から <B> の値を引いて代入
<A> -= <B>	<A> と <B> を引いて代入する
<A> -= <B>	<A> と <B> の値を引いて代入する
<A> -= <B>	<A> に <A> と <B> の値を引いて代入
<A> -= <B>	<A> と <B> の値を引いて代入
<A> -= <B>	<A> に <A> と <B> の値を引いて代入する
<A> -= <B>	<A> に <A> と <B> を引いて代入
<A> -= <B>	<A> と <B> を引いて代入
<A> -= <B>	<A> 引く <B> の値を代入する
<A> -= <B>	<A> ひく <B> の値を <A> に代入する
<A> -= <B>	<A> 引く <B> の値を入れる
<A> -= <B>	<A> 引く <B> の値を <A> に入れる
<A> -= <B>	<A> ひく <B> の値を代入する
<A> -= <B>	<A> 引く <B> の値を <A> に代入する
<A> -= <B>	<A> ひく <B> の値を入れる
<A> -= <B>	<A> ひく <B> の値を <A> に入れる
abs ( <A> )	<A> の絶対値
abs ( <A> )	<A> の絶対値を調べる
abs ( <A> )	<A> の絶対値を算出する
math . sqrt ( <A> )	<A> の平方根
math . sqrt ( <A> )	<A> の平方根を確認する
math . sqrt ( <A> )	<A> の平方根を算出する
math . sqrt ( <A> )	<A> のルート
math . sqrt ( <A> )	<A> のルートを確認する
math . sqrt ( <A> )	<A> のルートを求める
math . ciel ( <A> )	<A> の小数点以下切り上げ
math . ciel ( <A> )	<A> の切り上げ
math . ciel ( <A> )	<A> の小数点以下切り上げを調べる
math . ciel ( <A> )	<A> の切り上げを調べる
math . ciel ( <A> )	<A> の小数点以下切り上げを算出する
math . ciel ( <A> )	<A> の切り上げを求める
math . ciel ( <A> )	<A> に最も近い整数に切り上げ
math . ciel ( <A> )	<A> に最も近い整数に切り上げを調べる
math . ciel ( <A> )	<A> に最も近い整数に切り上げを算出する
math . floor ( <A> )	<A> の小数点以下切り捨て
math . floor ( <A> )	<A> の切り捨て
math . floor ( <A> )	<A> の小数点以下切り捨てを確認する
math . floor ( <A> )	<A> の切り捨てを見る
math . floor ( <A> )	<A> の小数点以下切り捨てを求める
math . floor ( <A> )	<A> の切り捨てを算出する
math . floor ( <A> )	<A> に最も近い整数に切り捨て
math . floor ( <A> )	<A> に最も近い整数に切り捨てを見る
math . floor ( <A> )	<A> に最も近い整数に切り捨てを算出する
math . gcd ( <A> , <B> )	<A> と <B> の最大公約数
math . gcd ( <A> , <B> )	<A> と <B> の最大公約数を見る
math . gcd ( <A> , <B> )	<A> と <B> の最大公約数を計算する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のもっとも大きい値
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大の値
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で値
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のうち ] [ 一番大きい値
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のもっとも大きい値を調べる
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大の値を調べる
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で値を確認する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のうち ] [ 一番大きい値を確認する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のもっとも大きい値を算出する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大の値を計算する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で値を計算する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のうち ] [ 一番大きい値を算出する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大値
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大値を表示する
max ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最大値を求める
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で値
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小の値
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のうち ] [ 一番小さい値
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で値を調べる
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小の値を調べる
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のうち ] [ 一番小さい値を確認する
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の中で値を求める
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小の値を求める
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> のうち ] [ 一番小さい値を計算する
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小値
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小値を見る
min ( <A> , <B> , <C> )	<A> 、 <B> 、 <C> の最小値を計算する
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
for i in range ( <A> ) :	<A> 回繰り返す
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以降の処理をループする
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以下の命令を繰り返す
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以降の命令をループする
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以降のプログラムを繰り返す
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、次のプログラムを繰り返す
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以降の処理を繰り返す
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、次の命令をループする
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以下のプログラムを繰り返す
for <A> in range ( 10 ) :	<A> に 0 から 9 を代入して、以下の命令をループする
for <A> in range ( <B> ) :	<A> に <B> を超えない値までの連続した数値を代入して、次の命令をループする
for <A> in range ( <B> ) :	<A> に <B> を超えない値までの連続した数値を代入して、以降の処理を繰り返す
for <A> in range ( <B> ) :	<A> に <B> を超えない値までの連続した数値を代入して、以降のプログラムを繰り返す
for <A> in range ( <B> ) :	<A> に <B> を超えない値までの連続した数値を代入して、次の処理を繰り返す
for <A> in range ( <B> ) :	<A> に <B> を超えない値までの連続した数値を代入して、次の命令を繰り返す
for <A> in range ( <B> ) :	<A> に <B> を超えない値までの連続した数値を代入して、以降の命令をループする
for <A> in range ( <B> ) :	<A> に <B> を超えない値までの連続した数値を代入して、以下の処理をループする
for <A> in range ( 10 ) :	<A> を 0 から 9 まで 1 つずつ取り出しながら繰り返し処理を行う
for i in range ( <A> ) :	繰り返し処理を <A> 回行う
for i in range ( <A> ) :	<A> 回だけ繰り返し処理を行う
for i in range ( len ( <A> ) ) :	<A> の要素数分繰り返す
for i in range ( len ( <A> ) ) :	以下の処理を <A> の要素数分繰り返す
print ( <A> )	<A> を出力する
print ( <A> )	<A> を表示する
print ( <A> )	<A> をプリントする
print ( <A> )	<A> を表示する
print ( <A> )	<A> を出力する
print ( <A> , end = '' )	改行なしで <A> をプリントする
print ( <A> , end = '' )	改行なしで <A> を出力する
print ( <A> , end = '' )	改行なしで <A> を表示する
print ( <A> , end = '' )	<A> を改行なしで出力する
print ( <A> , end = '' )	<A> を改行なしで表示する
print ( <A> , end = '' )	<A> を改行なしでプリントする
print ( <A> , end = '' )	<A> の出力を改行しないで行う
print ( <A> )	<A> と出力する
print ( <A> )	<A> と表示する
print ( 'Hello World' )	「こんにちは世界」と出力する
print ( 'Hello World' )	「ハローワールド」と出力する
print ( 'Hello World' )	「ハローワールド」とプリントする
print ( 'Hello World' )	何か動かす
print ( 'Hello World' )	試しに何か動かす
print ( 'Hello World' )	最初のプログラム
print ( 'Hello World' )	最初の Python
print ( 'Hello World' )	文章を表示する
print ( 'Hello World' )	文章を出力する
print ( '{:.5f}' . format ( <A> ) )	実数 <A> の小数点以下 5 桁までをプリントする
print ( '{:.5f}' . format ( <A> ) )	小数点数 <A> の小数点以下 5 桁までをプリントする
print ( '{:.5f}' . format ( <A> ) )	数 <A> の小数点以下 5 桁までをプリントする
print ( '{:.5f}' . format ( <A> ) )	<A> の小数点以下 5 桁までをプリントする
print ( '{:.5f}' . format ( <A> ) )	浮動小数点数 <A> の小数点以下 5 桁までをプリントする
print ( '{:.5f}' . format ( <A> ) )	浮動小数点数 <A> の小数点以下を 5 桁まで表示する
print ( '{:.5f}' . format ( <A> ) )	小数点数 <A> の小数点以下を 5 桁まで出力する
print ( '{:.5f}' . format ( <A> ) )	実数 <A> の小数点以下を 5 桁まで表示する
print ( '{:.5f}' . format ( <A> ) )	<A> の小数点以下を 5 桁まで表示する
print ( '{:.5f}' . format ( <A> ) )	浮動小数点数 <A> の小数点以下を 5 桁までプリントする
print ( '{:.5f}' . format ( <A> ) )	数 <A> の小数点以下を 5 桁まで出力する
print ( '{:.5f}' . format ( <A> ) )	小数点数 <A> の小数点以下を 5 桁で丸める
print ( '{:.5f}' . format ( <A> ) )	<A> の小数点以下を 5 桁で丸める
print ( '{:.5f}' . format ( <A> ) )	浮動小数点数 <A> の小数点以下を 5 桁で丸める
print ( '{:.5f}' . format ( <A> ) )	実数 <A> の小数点以下を 5 桁で揃える
print ( '{:.5f}' . format ( <A> ) )	数 <A> の小数点以下を 5 桁で丸める
print ( '{:.5f}' . format ( <A> ) )	数 <A> の小数点以下を 5 桁で揃える
print ( '{:.5f}' . format ( <A> ) )	実数 <A> の小数点以下を 5 桁で丸める
print ( '{:.5f}' . format ( <A> ) )	浮動小数点数 <A> の小数部を 5 桁で丸める
print ( '{:.5f}' . format ( <A> ) )	実数 <A> の小数部を 5 桁で揃える
print ( '{:.5f}' . format ( <A> ) )	<A> の小数部を 5 桁で揃える
print ( '{:.5f}' . format ( <A> ) )	数 <A> の小数部を 5 桁で揃える
print ( '{:.5f}' . format ( <A> ) )	小数点数 <A> の小数部を 5 桁で丸める
print ( '{:.5f}' . format ( <A> ) )	小数点数 <A> の小数部を 5 桁で揃える
print ( '{:.5f}' . format ( <A> ) )	浮動小数点数 <A> の小数部を 5 桁で揃える
input ( )	ユーザから入力を得る
input ( )	利用者から入力を得る
<A> = input ( )	ユーザから入力を得、 <A> に代入する
<A> = input ( )	利用者から入力を得、 <A> とする
input ( )	入力値を受け取る
input ( )	入力値を受け付ける
input ( )	入力値を得る
<A> = input ( )	入力値を受け取って、 <A> にする
<A> = input ( )	入力値を受け付け、 <A> にする
<A> = input ( )	入力値を得て、 <A> とする
input ( )	ユーザが入力した文字列
input ( )	利用者が入力した文字列
<A> = input ( )	ユーザが入力した文字列を <A> とする
<A> = input ( )	利用者が入力した文字列を <A> に代入する
input ( )	ユーザから入力された文字列
input ( )	入力された文字列
<A> = input ( )	ユーザから入力された文字列を <A> にする
<A> = input ( )	入力された文字列を <A> とする
input ( )	文字列を入力する
<A> = input ( )	文字列を入力して、 <A> に代入する
input ( )	データを入力する
<A> = input ( )	データを入力して、 <A> とする
input ( )	ユーザが入力した文字列を取得する
input ( )	利用者が入力した文字列を取得する
<A> = input ( )	ユーザが入力した文字列を取得し、 <A> とする
<A> = input ( )	利用者が入力した文字列を取得して、 <A> とする
input ( )	ユーザから入力された文字列を取得する
input ( )	入力された文字列を取得する
<A> = input ( )	ユーザから入力された文字列を取得して、 <A> とする
<A> = input ( )	入力された文字列を取得し、 <A> とする
int ( input ( ) )	利用者が入力した数
int ( input ( ) )	ユーザが入力した数
int ( input ( ) )	ユーザが入力した整数値
int ( input ( ) )	ユーザが入力した整数
int ( input ( ) )	ユーザが入力した数値
int ( input ( ) )	利用者が入力した整数
int ( input ( ) )	利用者が入力した整数値
  <A> = int ( input ( ) )	利用者が入力した数を  <A> とする
  <A> = int ( input ( ) )	ユーザが入力した数を  <A> とする
  <A> = int ( input ( ) )	ユーザが入力した整数値を  <A> に代入する
  <A> = int ( input ( ) )	ユーザが入力した整数を  <A> にする
  <A> = int ( input ( ) )	ユーザが入力した数値を  <A> とする
  <A> = int ( input ( ) )	利用者が入力した整数を  <A> にする
  <A> = int ( input ( ) )	利用者が入力した整数値を  <A> とする
int ( input ( ) )	数値を入力値として受け取る
int ( input ( ) )	整数を受け取る
int ( input ( ) )	整数を入力値として得る
int ( input ( ) )	数を入力値として受け取る
int ( input ( ) )	整数値を入力値として受け取る
int ( input ( ) )	整数を得る
  <A> = int ( input ( ) )	数値を入力値として受け取って、  <A> に代入する
  <A> = int ( input ( ) )	整数を受け取り、  <A> とする
  <A> = int ( input ( ) )	整数を入力値として得、  <A> に代入する
  <A> = int ( input ( ) )	数を入力値として受け取って、  <A> にする
  <A> = int ( input ( ) )	整数値を入力値として受け取り、  <A> にする
  <A> = int ( input ( ) )	整数を得て、  <A> とする
int ( input ( ) )	入力された自然数
int ( input ( ) )	入力された整数値
int ( input ( ) )	ユーザから入力された整数
int ( input ( ) )	入力された整数
int ( input ( ) )	ユーザから入力された数値
int ( input ( ) )	ユーザから入力された数
int ( input ( ) )	ユーザから入力された整数値
  <A> = int ( input ( ) )	入力された自然数を  <A> とする
  <A> = int ( input ( ) )	入力された整数値を  <A> とする
  <A> = int ( input ( ) )	ユーザから入力された整数を  <A> とする
  <A> = int ( input ( ) )	入力された整数を  <A> とする
  <A> = int ( input ( ) )	ユーザから入力された数値を  <A> とする
  <A> = int ( input ( ) )	ユーザから入力された数を  <A> とする
  <A> = int ( input ( ) )	ユーザから入力された整数値を  <A> とする
int ( input ( ) )	整数値を入力する
int ( input ( ) )	整数を入力する
int ( input ( ) )	自然数を入力する
  <A> = int ( input ( ) )	整数値を入力し、  <A> とする
  <A> = int ( input ( ) )	整数を入力して、  <A> にする
  <A> = int ( input ( ) )	自然数を入力し、  <A> にする
int ( input ( ) )	利用者が入力した整数データを取得する
int ( input ( ) )	ユーザが入力した数データを取得する
int ( input ( ) )	ユーザが入力した数を取得する
int ( input ( ) )	ユーザが入力した整数データを取得する
int ( input ( ) )	利用者が入力した数データを取得する
int ( input ( ) )	ユーザが入力した整数を取得する
int ( input ( ) )	ユーザが入力した整数値を取得する
int ( input ( ) )	利用者が入力した整数を取得する
int ( input ( ) )	利用者が入力した整数値を取得する
  <A> = int ( input ( ) )	利用者が入力した整数データを取得して、  <A> にする
  <A> = int ( input ( ) )	ユーザが入力した数データを取得して、  <A> とする
  <A> = int ( input ( ) )	ユーザが入力した数を取得して、  <A> にする
  <A> = int ( input ( ) )	ユーザが入力した整数データを取得し、  <A> とする
  <A> = int ( input ( ) )	利用者が入力した数データを取得して、  <A> とする
  <A> = int ( input ( ) )	ユーザが入力した整数を取得して、  <A> とする
  <A> = int ( input ( ) )	ユーザが入力した整数値を取得して、  <A> とする
  <A> = int ( input ( ) )	利用者が入力した整数を取得し、  <A> にする
  <A> = int ( input ( ) )	利用者が入力した整数値を取得し、  <A> とする
int ( input ( ) )	ユーザから入力された数値を取得する
int ( input ( ) )	ユーザから入力された自然数を取得する
int ( input ( ) )	入力された数値データを取得する
int ( input ( ) )	入力された整数値を取得する
int ( input ( ) )	入力された自然数データを取得する
int ( input ( ) )	入力された整数を取得する
int ( input ( ) )	入力された整数データを取得する
int ( input ( ) )	ユーザから入力された整数データを取得する
  <A> = int ( input ( ) )	ユーザから入力された数値を取得して、  <A> とする
  <A> = int ( input ( ) )	ユーザから入力された自然数を取得して、  <A> にする
  <A> = int ( input ( ) )	入力された数値データを取得して、  <A> に代入する
  <A> = int ( input ( ) )	入力された整数値を取得し、  <A> とする
  <A> = int ( input ( ) )	入力された自然数データを取得して、  <A> にする
  <A> = int ( input ( ) )	入力された整数を取得し、  <A> とする
  <A> = int ( input ( ) )	入力された整数データを取得して、  <A> にする
  <A> = int ( input ( ) )	ユーザから入力された整数データを取得して、  <A> とする
list ( input ( ) )	複数の入力値をリストとして得る
list ( input ( ) )	複数の入力値をリストとして受け取る
  <A> = list ( input ( ) )	複数の入力値をリストとして得て、  <A> にする
  <A> = list ( input ( ) )	複数の入力値をリストとして受け取って、  <A> とする
list ( input ( ) )	ユーザが入力した値をリストに格納する
list ( input ( ) )	利用者が入力したデータをリストに格納する
list ( input ( ) )	利用者が入力した文字列をリストに格納する
list ( input ( ) )	ユーザが入力した文字列をリストに格納する
list ( input ( ) )	ユーザが入力したデータをリストに格納する
  <A> = list ( input ( ) )	ユーザが入力した値をリストに格納して、  <A> とする
  <A> = list ( input ( ) )	利用者が入力したデータをリストに格納して、  <A> とする
  <A> = list ( input ( ) )	利用者が入力した文字列をリストに格納し、  <A> に代入する
  <A> = list ( input ( ) )	ユーザが入力した文字列をリストに格納して、  <A> にする
  <A> = list ( input ( ) )	ユーザが入力したデータをリストに格納して、  <A> とする
list ( input ( ) )	入力された文字列をリストに格納する
list ( input ( ) )	ユーザから入力された値をリストに格納する
list ( input ( ) )	ユーザから入力された文字列をリストに格納する
list ( input ( ) )	入力された値をリストに格納する
  <A> = list ( input ( ) )	入力された文字列をリストに格納して、  <A> にする
  <A> = list ( input ( ) )	ユーザから入力された値をリストに格納して、  <A> とする
  <A> = list ( input ( ) )	ユーザから入力された文字列をリストに格納し、  <A> とする
  <A> = list ( input ( ) )	入力された値をリストに格納して、  <A> とする
list ( input ( ) )	入力値をリスト型にする
  <A> = list ( input ( ) )	入力値をリスト型にし、  <A> にする
list ( input ( ) )	入力値をリストに変換する
  <A> = list ( input ( ) )	入力値をリストに変換して、  <A> とする
list ( input ( ) )	ユーザから入力されたデータをリスト化する
list ( input ( ) )	入力された文字列をリスト化する
list ( input ( ) )	ユーザから入力された文字列をリスト化する
list ( input ( ) )	入力されたデータをリスト化する
  <A> = list ( input ( ) )	ユーザから入力されたデータをリスト化して、  <A> とする
  <A> = list ( input ( ) )	入力された文字列をリスト化して、  <A> に代入する
  <A> = list ( input ( ) )	ユーザから入力された文字列をリスト化し、  <A> に代入する
  <A> = list ( input ( ) )	入力されたデータをリスト化して、  <A> とする
list ( input ( ) )	ユーザが入力した文字列をリスト化する
list ( input ( ) )	ユーザが入力した値をリスト化する
list ( input ( ) )	利用者が入力したデータをリスト化する
list ( input ( ) )	ユーザが入力したデータをリスト化する
list ( input ( ) )	利用者が入力した値をリスト化する
  <A> = list ( input ( ) )	ユーザが入力した文字列をリスト化して、  <A> にする
  <A> = list ( input ( ) )	ユーザが入力した値をリスト化し、  <A> にする
  <A> = list ( input ( ) )	利用者が入力したデータをリスト化して、  <A> にする
  <A> = list ( input ( ) )	ユーザが入力したデータをリスト化して、  <A> とする
  <A> = list ( input ( ) )	利用者が入力した値をリスト化し、  <A> にする
list ( input ( ) )	入力されたデータをリストに変換する
list ( input ( ) )	ユーザから入力された値をリストに変換する
list ( input ( ) )	入力された文字列をリストに変換する
list ( input ( ) )	ユーザから入力されたデータをリストに変換する
list ( input ( ) )	ユーザから入力された文字列をリストに変換する
  <A> = list ( input ( ) )	入力されたデータをリストに変換し、  <A> とする
  <A> = list ( input ( ) )	ユーザから入力された値をリストに変換し、  <A> にする
  <A> = list ( input ( ) )	入力された文字列をリストに変換して、  <A> とする
  <A> = list ( input ( ) )	ユーザから入力されたデータをリストに変換して、  <A> にする
  <A> = list ( input ( ) )	ユーザから入力された文字列をリストに変換し、  <A> とする
list ( input ( ) )	ユーザが入力したデータをリストに変換する
list ( input ( ) )	ユーザが入力した値をリストに変換する
list ( input ( ) )	ユーザが入力した文字列をリストに変換する
  <A> = list ( input ( ) )	ユーザが入力したデータをリストに変換し、  <A> とする
  <A> = list ( input ( ) )	ユーザが入力した値をリストに変換して、  <A> とする
  <A> = list ( input ( ) )	ユーザが入力した文字列をリストに変換し、  <A> とする
list ( map ( int , input ( ) . split ( ) ) )	半角スペース区切りで入力された整数をリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	半角スペースで区切って入力された整数をリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	半角スペースごとに入力された整数をリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	空白ごとに入力された整数をリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	空白で区切って入力された整数をリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	スペース区切りで入力された整数をリストとして受け取る
  <A> = list ( map ( int , input ( ) . split ( ) ) )	半角スペース区切りで入力された整数をリストとして受け取り、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	半角スペースで区切って入力された整数をリストとして受け取って、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	半角スペースごとに入力された整数をリストとして受け取って、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	空白ごとに入力された整数をリストとして受け取って、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	空白で区切って入力された整数をリストとして受け取って、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	スペース区切りで入力された整数をリストとして受け取り、  <A> にする
list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで整数としてリストで受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで数値としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで整数としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペース区切りで自然数としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数としてリストで受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数値としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースで区切って数としてリストで受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペース区切りで整数としてリストで受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースで区切って自然数としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力を空白で区切って整数としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで整数値としてリストで受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペース区切りで整数値としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力を空白で区切って数値としてリストで受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数値としてリストで受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力を空白ごとに整数としてリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースで区切って整数値としてリストで受け取る
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで整数としてリストで受け取って、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで数値としてリストに格納して、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで整数としてリストに格納して、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペース区切りで自然数としてリストに格納し、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数としてリストに格納し、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数としてリストで受け取り、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数値としてリストに格納して、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースで区切って数としてリストで受け取り、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペース区切りで整数としてリストで受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースで区切って自然数としてリストに格納して、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を空白で区切って整数としてリストに格納して、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力をスペース区切りで整数値としてリストで受け取り、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペース区切りで整数値としてリストに格納して、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を空白で区切って数値としてリストで受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースごとに整数値としてリストで受け取り、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を空白ごとに整数としてリストに格納し、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力を半角スペースで区切って整数値としてリストで受け取り、  <A> とする
list ( map ( int , input ( ) . split ( ) ) )	一行からスペース区切りで複数の入力値をリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	一行から半角スペースごとに複数の入力値をリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	一行から半角スペースごとに複数の入力値をリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	一行から空白ごとに複数の入力値をリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	一行から空白ごとに複数の入力値をリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	一行から空白で区切って複数の入力値をリストとして得る
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行からスペース区切りで複数の入力値をリストとして得て、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行から半角スペースごとに複数の入力値をリストとして得て、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行から半角スペースごとに複数の入力値をリストとして受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行から空白ごとに複数の入力値をリストとして受け取り、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行から空白ごとに複数の入力値をリストとして得て、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行から空白で区切って複数の入力値をリストとして得、  <A> にする
list ( map ( int , input ( ) . split ( ) ) )	一行から複数の入力値をスペースで区切ってリストに格納する
list ( map ( int , input ( ) . split ( ) ) )	一行から複数の入力値を半角スペースで区切ってリストに格納する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行から複数の入力値をスペースで区切ってリストに格納して、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	一行から複数の入力値を半角スペースで区切ってリストに格納して、  <A> に代入する
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値をスペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された整数値をスペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値をスペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力された数値を半角スペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された整数値をスペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された整数を空白で区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された整数をスペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値を空白で区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された自然数を半角スペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力された数値を半角スペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力された数をスペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された整数を半角スペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数を空白で区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数を半角スペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された自然数を空白で区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された数値をスペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値を空白で区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された数を空白で区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された数値をスペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	入力された数を空白で区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	入力された数をスペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数を半角スペースで区切ってリストとして受け取る
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値をスペースで区切ってリストとして得、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された整数値をスペースで区切ってリストとして受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値をスペースで区切ってリストとして受け取って、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された数値を半角スペースで区切ってリストとして得て、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された整数値をスペースで区切ってリストとして得て、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された整数を空白で区切ってリストとして得、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された整数をスペースで区切ってリストとして受け取り、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値を空白で区切ってリストとして得て、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された自然数を半角スペースで区切ってリストとして受け取って、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された数値を半角スペースで区切ってリストとして受け取り、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された数をスペースで区切ってリストとして得て、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された整数を半角スペースで区切ってリストとして得、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数を空白で区切ってリストとして受け取り、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数を半角スペースで区切ってリストとして得、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された自然数を空白で区切ってリストとして得、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された数値をスペースで区切ってリストとして受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数値を空白で区切ってリストとして受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された数を空白で区切ってリストとして得、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された数値をスペースで区切ってリストとして得て、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された数を空白で区切ってリストとして受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	入力された数をスペースで区切ってリストとして受け取って、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザから入力された整数を半角スペースで区切ってリストとして受け取って、  <A> とする
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した自然数を半角スペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した数をスペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数を空白で区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値を空白で区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	利用者が入力した整数を半角スペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した自然数を空白で区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	利用者が入力した整数をスペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数を半角スペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数を空白で区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した数値を空白で区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	利用者が入力した整数を半角スペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数をスペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値を半角スペースで区切ってリストとして得る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値を半角スペースで区切ってリストとして受け取る
list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した数を半角スペースで区切ってリストとして受け取る
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した自然数を半角スペースで区切ってリストとして得、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した数をスペースで区切ってリストとして受け取り、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数を空白で区切ってリストとして得、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値を空白で区切ってリストとして得て、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	利用者が入力した整数を半角スペースで区切ってリストとして受け取って、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した自然数を空白で区切ってリストとして受け取り、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	利用者が入力した整数をスペースで区切ってリストとして受け取って、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数を半角スペースで区切ってリストとして得て、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数を空白で区切ってリストとして受け取って、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した数値を空白で区切ってリストとして受け取り、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	利用者が入力した整数を半角スペースで区切ってリストとして得、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数をスペースで区切ってリストとして得て、  <A> にする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値を半角スペースで区切ってリストとして得て、  <A> に代入する
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した整数値を半角スペースで区切ってリストとして受け取り、  <A> とする
  <A> = list ( map ( int , input ( ) . split ( ) ) )	ユーザが入力した数を半角スペースで区切ってリストとして受け取って、  <A> に代入する
<A> , <B> , <C> = input ( ) . split ( )	入力された文字列を空白で分割し、 <A> 、 <B> 、 <C> 代入する
<A> , <B> , <C> = input ( ) . split ( )	入力された文字列を半角スペースで分割し、 <A> 、 <B> 、 <C> 入れる
<A> , <B> , <C> = input ( ) . split ( )	入力された文字列を半角スペースで分割し、 <A> 、 <B> 、 <C> 代入する
<A> , <B> , <C> = input ( ) . split ( )	入力された文字列をスペースで分割し、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	入力された文字列を半角スペースで分割し、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	入力された文字列を空白で分割し、 <A> 、 <B> 、 <C> 入れる
<A> , <B> , <C> = input ( ) . split ( )	空白ごとに入力文字列を受け取り、 <A> 、 <B> 、 <C> 代入する
<A> , <B> , <C> = input ( ) . split ( )	空白ごとに入力文字列を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	空白ごとに入力文字列を受け取り、 <A> 、 <B> 、 <C> 入れる
<A> , <B> , <C> = input ( ) . split ( )	半角スペースごとに入力文字列を受け取り、 <A> 、 <B> 、 <C> 代入する
<A> , <B> , <C> = input ( ) . split ( )	半角スペースごとに入力文字列を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	半角スペースで区切って入力文字列を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	スペースで区切って入力文字列を受け取り、 <A> 、 <B> 、 <C> 代入する
<A> , <B> , <C> = input ( ) . split ( )	半角スペースで区切って入力文字列を受け取り、 <A> 、 <B> 、 <C> 代入する
<A> , <B> , <C> = input ( ) . split ( )	スペースで区切って入力文字列を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	空白で区切って入力文字列を受け取り、 <A> 、 <B> 、 <C> 入れる
<A> , <B> , <C> = input ( ) . split ( )	空白で区切って入力文字列を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = input ( ) . split ( )	半角スペースで区切って入力文字列を受け取り、 <A> 、 <B> 、 <C> 入れる
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	入力された整数を半角スペースで分割し、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	一行で入力された整数をスペースで分割し、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	一行で入力された整数を空白で分割し、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	一行で入力された整数を半角スペースで分割し、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	入力された整数を空白で分割し、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	半角スペースで区切って一行で入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	空白で区切って一行で入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	スペースで区切って入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	スペースで区切って一行で入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	半角スペースで区切って入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	スペースごとに一行で入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	スペースごとに入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	空白ごとに入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	半角スペースごとに一行で入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
<A> , <B> , <C> = map ( int , input ( ) . split ( ) )	空白ごとに一行で入力された整数を受け取り、 <A> 、 <B> 、 <C> とする
float ( <A> )	<A> を浮動小数点数に変換する
float ( <A> )	小数点数に <A> をする
float ( <A> )	<A> を小数点数に変換する
float ( <A> )	<A> を小数点数にする
float ( <A> )	数に <A> をする
float ( <A> )	<A> を実数にする
float ( <A> )	小数点数に <A> を変換する
float ( <A> )	<A> を実数に変換する
float ( <A> )	<A> を変換した浮動小数点数
float ( <A> )	<A> を変換した小数点数
float ( <A> )	<A> を変換した実数
float ( <A> )	<A> を実数として取得する
float ( <A> )	<A> を数として取得する
float ( <A> )	<A> を浮動小数点数として取得する
float ( <A> )	<A> を浮動小数点数型に変換する
int ( <A> )	<A> を整数にする
int ( <A> )	<A> を数に変換する
int ( <A> )	<A> を数にする
int ( <A> )	<A> を整数に変換する
int ( <A> )	整数値に <A> を変換する
int ( <A> )	数に <A> を変換する
int ( <A> )	整数値に <A> をする
int ( <A> )	整数に <A> をする
int ( <A> )	<A> を変換した整数
int ( <A> )	<A> を変換した数値
int ( <A> )	<A> を変換した数
int ( <A> )	<A> を変換した整数値
int ( <A> )	<A> を整数として取得する
int ( <A> )	<A> を自然数として取得する
int ( <A> )	<A> を整数値として取得する
int ( <A> )	<A> を数値として取得する
int ( <A> )	<A> を整数型に変換する
<A> == <B>	<A> と <B> が等しいか
if <A> == <B> :	もし <A> と <B> が等しいならば
<A> != <B>	<A> と <B> が等しくないかどうか
if <A> == <B> :	<A> と <B> が等しければ
if <A> == <B> :	もし <A> と <B> が等しかったなら
if <A> != <B> :	もし <A> と <B> が等しくない場合
if <A> != <B> :	<A> と <B> が等しくなかったなら
while <A> == <B> :	<A> と <B> が等しい間
<A> == <B>	<A> が <B> と等しいか
if <A> == <B> :	<A> が <B> と等しいならば
<A> != <B>	<A> が <B> と等しくないかどうか
if <A> != <B> :	もし <A> が <B> と等しくないとき
if <A> != <B> :	もし <A> が <B> と等しくなければ
if <A> != <B> :	もし <A> が <B> と等しくなかったら
while <A> != <B> :	<A> が <B> と等しくない間
<A> == <B>	<A> は <B> と等しいか否か
if <A> == <B> :	もし <A> は <B> と等しいならば
<A> != <B>	<A> は <B> と等しくないか
if <A> == <B> :	<A> は <B> と等しかったならば
if <A> != <B> :	もし <A> は <B> と等しくなければ
if <A> != <B> :	<A> は <B> と等しくなかった場合
while <A> == <B> :	<A> は <B> と等しい間
while <A> != <B> :	<A> は <B> と等しくない間
<A> == <B>	<A> が <B> か
if <A> == <B> :	もし <A> が <B> ならば
<A> != <B>	<A> が <B> でないか
if <A> == <B> :	もし <A> が <B> 場合
if <A> != <B> :	もし <A> が <B> でないとき
<A> >  <B>	<A> が <B> より大きいか
if <A> >  <B> :	<A> が <B> より大きいならば
not <A> >  <B>	<A> が <B> より大きくないか否か
if <A> >  <B> :	もし <A> が <B> より大きいならば
if <A> >  <B> :	<A> が <B> より大きかったら
if not <A> >  <B> :	もし <A> が <B> より大きければ
if not <A> >  <B> :	<A> が <B> より大きかったとき
while <A> >  <B> :	<A> が <B> より大きい間
<A> >  <B>	<A> が <B> よりも大きいか
if <A> >  <B> :	もし <A> が <B> よりも大きいならば
not <A> >  <B>	<A> が <B> よりも大きくないか
if <A> >  <B> :	<A> が <B> よりも大きいならば
if <A> >  <B> :	<A> が <B> よりも大きければ
if not <A> >  <B> :	<A> が <B> よりも大きくなければ
if not <A> >  <B> :	もし <A> が <B> よりも大きくなかったとき
while <A> >  <B> :	<A> が <B> よりも大きい間
while not <A> >  <B> :	<A> が <B> よりも大きくない間
<A> <  <B>	<A> が <B> より小さいか
if <A> <  <B> :	<A> が <B> より小さい場合
not <A> <  <B>	<A> が <B> より小さくないか
while <A> <  <B> :	<A> が <B> より小さい間
while not <A> <  <B> :	<A> が <B> より小さくない間
<A> <  <B>	<A> が <B> よりも小さいかどうか
if <A> <  <B> :	<A> が <B> よりも小さいならば
not <A> <  <B>	<A> が <B> よりも小さくないかどうか
if <A> <  <B> :	もし <A> が <B> よりも小さければ
if <A> <  <B> :	もし <A> が <B> よりも小さかったなら
if not <A> <  <B> :	<A> が <B> よりも小さくないとき
if not <A> <  <B> :	<A> が <B> よりも小さくなければ
while <A> <  <B> :	<A> が <B> よりも小さい間
while not <A> <  <B> :	<A> が <B> よりも小さくない間
<A> >= <B>	<A> が <B> 以上か否か
if <A> >= <B> :	<A> が <B> 以上のとき
not <A> >= <B>	<A> が <B> 以上でないか
if <A> >= <B> :	もし <A> が <B> 以上とき
if not <A> >= <B> :	もし <A> が <B> 以上でないとき
while <A> >= <B> :	<A> が <B> 以上間
while not <A> >= <B> :	<A> が <B> 以上でない間
<A> >= <B>	<A> が <B> 以上であるか否か
if <A> >= <B> :	<A> が <B> 以上である場合
not <A> >= <B>	<A> が <B> 以上であるでないかどうか
if <A> >= <B> :	もし <A> が <B> 以上である場合
if not <A> >= <B> :	もし <A> が <B> 以上であるでないならば
while <A> >= <B> :	<A> が <B> 以上である間
<A> <= <B>	<A> が <B> 次か
if <A> <= <B> :	もし <A> が <B> 次ならば
<A> <= <B>	<A> が <B> 以下か
if <A> <= <B> :	<A> が <B> 以下のとき
<A> <= <B>	<A> が <B> 以降か
if <A> <= <B> :	<A> が <B> 以降のとき
not <A> <= <B>	<A> が <B> 次でないか
not <A> <= <B>	<A> が <B> 以下でないか
not <A> <= <B>	<A> が <B> 以降でないか
if <A> <= <B> :	<A> が <B> 次場合
if <A> <= <B> :	<A> が <B> 以下場合
if <A> <= <B> :	もし <A> が <B> 以降ならば
if not <A> <= <B> :	<A> が <B> 次でないとき
if not <A> <= <B> :	<A> が <B> 以下でない場合
if not <A> <= <B> :	<A> が <B> 以降でない場合
while <A> <= <B> :	<A> が <B> 次間
while <A> <= <B> :	<A> が <B> 以下間
while <A> <= <B> :	<A> が <B> 以降間
while not <A> <= <B> :	<A> が <B> 次でない間
while not <A> <= <B> :	<A> が <B> 以降でない間
<A> <= <B>	<A> が <B> 以下であるかどうか
if <A> <= <B> :	もし <A> が <B> 以下であるならば
<A> <= <B>	<A> が <B> 以降であるか否か
if <A> <= <B> :	もし <A> が <B> 以降であるならば
<A> <= <B>	<A> が <B> 次であるか
if <A> <= <B> :	<A> が <B> 次であるとき
not <A> <= <B>	<A> が <B> 以下であるでないかどうか
not <A> <= <B>	<A> が <B> 以降であるでないか
not <A> <= <B>	<A> が <B> 次であるでないか
if <A> <= <B> :	もし <A> が <B> 以下である場合
if <A> <= <B> :	もし <A> が <B> 以降であるならば
if <A> <= <B> :	もし <A> が <B> 次であるならば
if not <A> <= <B> :	もし <A> が <B> 以下であるでないならば
if not <A> <= <B> :	<A> が <B> 以降であるでない場合
if not <A> <= <B> :	<A> が <B> 次であるでないとき
while <A> <= <B> :	<A> が <B> 以下である間
while <A> <= <B> :	<A> が <B> 次である間
while not <A> <= <B> :	<A> が <B> 以下であるでない間
while not <A> <= <B> :	<A> が <B> 以降であるでない間
while not <A> <= <B> :	<A> が <B> 次であるでない間
<A> % 2 == 0	<A> が偶数か
if <A> % 2 == 0 :	もし <A> が偶数ならば
<A> % 2 != 0	<A> が偶数でないかどうか
if <A> % 2 == 0 :	<A> が偶数とき
if <A> % 2 != 0 :	もし <A> が偶数でないとき
while <A> % 2 != 0 :	<A> が偶数でない間
<A> % 2 == 0	<A> が偶数であるか
if <A> % 2 == 0 :	<A> が偶数であるならば
<A> % 2 != 0	<A> が偶数であるでないかどうか
if <A> % 2 == 0 :	もし <A> が偶数であるならば
if <A> % 2 != 0 :	もし <A> が偶数であるでない場合
<A> % <B> == <C>	<A> が <B> で割った時の余りが <C> であるかどうか
if <A> % <B> == <C> :	<A> が <B> で割った時の余りが <C> である場合
<A> % <B> != <C>	<A> が <B> で割った時の余りが <C> であるでないかどうか
if <A> % <B> == <C> :	もし <A> が <B> で割った時の余りが <C> であるならば
if <A> % <B> != <C> :	<A> が <B> で割った時の余りが <C> であるでないとき
while <A> % <B> == <C> :	<A> が <B> で割った時の余りが <C> である間
<A> % 2 == 1	<A> が奇数か
if <A> % 2 == 1 :	<A> が奇数のとき
<A> % 2 != 1	<A> が奇数でないか
if <A> % 2 == 1 :	<A> が奇数場合
if <A> % 2 != 1 :	もし <A> が奇数でないとき
while <A> % 2 == 1 :	<A> が奇数間
while <A> % 2 != 1 :	<A> が奇数でない間
<A> % 2 == 1	<A> が奇数であるか否か
if <A> % 2 == 1 :	<A> が奇数であるならば
<A> % 2 != 1	<A> が奇数であるでないか
if <A> % 2 == 1 :	もし <A> が奇数であるとき
if <A> % 2 != 1 :	<A> が奇数であるでない場合
<A> % <B> == <C>	<A> が <B> で割った時の余りが <C> であるか
if <A> % <B> == <C> :	もし <A> が <B> で割った時の余りが <C> であるならば
<A> % <B> != <C>	<A> が <B> で割った時の余りが <C> であるでないかどうか
if <A> % <B> == <C> :	もし <A> が <B> で割った時の余りが <C> であるならば
if <A> % <B> != <C> :	<A> が <B> で割った時の余りが <C> であるでないならば
while <A> % <B> != <C> :	<A> が <B> で割った時の余りが <C> であるでない間
<A> % <B> == 0	<A> が <B> の倍数か
if <A> % <B> == 0 :	<A> が <B> の倍数のとき
<A> % <B> != 0	<A> が <B> の倍数でないか
if <A> % <B> == 0 :	<A> が <B> の倍数とき
if <A> % <B> != 0 :	もし <A> が <B> の倍数でない場合
while <A> % <B> == 0 :	<A> が <B> の倍数間
while <A> % <B> != 0 :	<A> が <B> の倍数でない間
<A> % <B> == 0	<A> が <B> で割り切れるかどうか
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるならば
<A> % <B> != 0	<A> が <B> で割り切れないか
if <A> % <B> == 0 :	<A> が <B> で割り切れるならば
if <A> % <B> == 0 :	<A> が <B> で割り切れれば
if <A> % <B> == 0 :	<A> が <B> で割り切れたとき
if <A> % <B> != 0 :	もし <A> が <B> で割り切れなければ
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
pass	何もしない
pass	何も行わない
pass	パスする
break	抜ける
break	ループを終了する
break	ループを抜ける
break	ループ処理を抜ける
break	ループ文を抜ける
break	ループから抜ける
break	ループ処理から抜ける
break	ループ文から抜ける
break	ループ文を抜け出す
break	ループを抜け出す
break	ループ処理を抜け出す
break	ループから抜け出す
break	ループ処理から抜け出す
break	ループ文から抜け出す
break	繰り返し処理を終了する
break	繰り返し処理から抜ける
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、または <C> 以上のとき
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、また <C> 以上の場合
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、あるいは <C> 以上ならば
if <A> <  <B> or <A> >= <C> :	<A> が <B> 未満、また <C> 以上であるならば
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、また <C> 以上であったら
if <A> <  <B> or <A> >= <C> :	<A> が <B> 未満、また <C> 以上ならば
if <A> <  <B> or <A> >= <C> :	<A> が <B> 未満、または <C> 以上であるならば
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、あるいは <C> 以上であったら
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、また <C> 以上であるならば
if <A> <  <B> or <A> >= <C> :	<A> が <B> 未満、また <C> 以上であったら
if <A> <  <B> or <A> >= <C> :	<A> が <B> 未満、または <C> 以上のとき
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、または <C> 以上の場合
if <A> <  <B> or <A> >= <C> :	<A> が <B> 未満、または <C> 以上であれば
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、また <C> 以上ならば
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、または <C> 以上であるならば
if <A> <  <B> or <A> >= <C> :	<A> が <B> 未満、また <C> 以上のとき
if <A> <  <B> or <A> >= <C> :	もし <A> が <B> 未満、または <C> 以上ならば
if age <  <A> or age >= <B> :	もし <A> 才未満、また <B> 才以上の場合
if age <  <A> or age >= <B> :	<A> 才未満、あるいは <B> 才以上であるならば
if age <  <A> or age >= <B> :	もし <A> 才未満、または <B> 才以上であったら
if age <  <A> or age >= <B> :	<A> 才未満、または <B> 才以上であったら
if age <  <A> or age >= <B> :	もし <A> 才未満、また <B> 才以上ならば
if age <  <A> or age >= <B> :	もし <A> 才未満、また <B> 才以上のとき
if age <  <A> or age >= <B> :	もし <A> 才未満、あるいは <B> 才以上ならば
if age <  <A> or age >= <B> :	<A> 才未満、また <B> 才以上のとき
if age <  <A> or age >= <B> :	<A> 才未満、また <B> 才以上であれば
if age <  <A> or age >= <B> :	もし <A> 才未満、また <B> 才以上であるならば
if age <  <A> or age >= <B> :	<A> 才未満、または <B> 才以上の場合
if age <  <A> or age >= <B> :	もし <A> 才未満、または <B> 才以上の場合
if age <  <A> or age >= <B> :	<A> 才未満、あるいは <B> 才以上のとき
if age <  <A> or age >= <B> :	<A> 才未満、または <B> 才以上であるならば
if age <  <A> or age >= <B> :	<A> 才未満、あるいは <B> 才以上の場合
if <A> <  <B> and <A> >= 60 :	もし <A> が <B> 未満、かつ@ 160 以上であったら
if <A> <  <B> and <A> >= 60 :	<A> が <B> 未満、かつ@ 160 以上であるならば
if <A> <  <B> and <A> >= 60 :	<A> が <B> 未満、かつ@ 160 以上であったら
if <A> <  <B> and <A> >= 60 :	もし <A> が <B> 未満、かつ@ 160 以上であれば
if <A> <  <B> and <A> >= 60 :	<A> が <B> 未満、かつ@ 160 以上のとき
if <A> <  <B> and <A> >= 60 :	もし <A> が <B> 未満、かつ@ 160 以上ならば
if <A> <  <B> and <A> >= 60 :	もし <A> が <B> 未満、かつ@ 160 以上の場合
if <A> <  <B> and <A> >= 60 :	もし <A> が <B> 未満、かつ@ 160 以上であるならば
if <A> <  <B> and <A> >= 60 :	<A> が <B> 未満、かつ@ 160 以上であれば
if <A> <  <B> and <A> >= 60 :	<A> が <B> 未満、かつ@ 160 以上ならば
if age <  <A> and age >= 60 :	<A> 才未満、かつ@ 160 才以上ならば
if age <  <A> and age >= 60 :	もし <A> 才未満、かつ@ 160 才以上であれば
if age <  <A> and age >= 60 :	もし <A> 才未満、かつ@ 160 才以上であるならば
if age <  <A> and age >= 60 :	<A> 才未満、かつ@ 160 才以上であれば
if age <  <A> and age >= 60 :	もし <A> 才未満、かつ@ 160 才以上ならば
if age <  <A> and age >= 60 :	<A> 才未満、かつ@ 160 才以上であったら
if age <  <A> and age >= 60 :	<A> 才未満、かつ@ 160 才以上のとき
if age <  <A> and age >= 60 :	もし <A> 才未満、かつ@ 160 才以上であったら
if age <  <A> and age >= 60 :	もし <A> 才未満、かつ@ 160 才以上のとき
sorted ( <A> )	小さい順に <A> を並べ変える
sorted ( <A> )	<A> を並べ変える
sorted ( <A> )	<A> を小さい順に並べ変える
sorted ( <A> )	昇順に <A> をソートする
sorted ( <A> )	<A> をソートする
sorted ( <A> )	<A> を並べる
sorted ( <A> )	小さい順に <A> をソートする
sorted ( <A> )	<A> を昇順に並べる
sorted ( <A> )	<A> を整列する
sorted ( <A> )	小さい順に <A> を整列する
sorted ( <A> )	<A> を並べ変えた列
sorted ( <A> )	<A> を整列した列
sorted ( <A> )	<A> をソートした列
sorted ( <A> )	昇順に <A> をソートした列
sorted ( <A> )	<A> を並べ直した列
sorted ( <A> )	小さい順に <A> を並べ変えた列
sorted ( <A> )	<A> を並べた列
sorted ( <A> )	昇順に <A> を整列した列
sorted ( <A> , reverse = True )	大きい順に <A> を並べ直す
sorted ( <A> , reverse = True )	<A> を大きい順に並べ直す
sorted ( <A> , reverse = True )	<A> を大きい順に並べ変える
sorted ( <A> , reverse = True )	<A> を降順に並べ直す
sorted ( <A> , reverse = True )	<A> を大きい順に並べる
sorted ( <A> , reverse = True )	降順に <A> をソートする
sorted ( <A> , reverse = True )	降順に <A> を並べ変える
sorted ( <A> , reverse = True )	<A> を大きい順に整列する
sorted ( <A> , reverse = True )	大きい順に <A> をソートする
sorted ( <A> , reverse = True )	降順に <A> を並べる
sorted ( <A> , reverse = True )	<A> を逆順に並べる
sorted ( <A> , reverse = True )	大きい順に <A> を並べ変える
sorted ( <A> , reverse = True )	<A> を降順にソートする
sorted ( <A> , reverse = True )	降順に <A> を並べ直す
sorted ( <A> , reverse = True )	<A> を降順に並べる
sorted ( <A> , reverse = True )	<A> を大きい順にソートする
sorted ( <A> , reverse = True )	<A> を大きい順にソートした列
sorted ( <A> , reverse = True )	大きい順に <A> を並べ変えた列
sorted ( <A> , reverse = True )	大きい順に <A> を並べた列
sorted ( <A> , reverse = True )	大きい順に <A> を並べ直した列
sorted ( <A> , reverse = True )	<A> を逆順に並べた列
sorted ( <A> , reverse = True )	逆順に <A> を整列した列
sorted ( <A> , reverse = True )	<A> を逆順に並べ変えた列
sorted ( <A> , reverse = True )	降順に <A> を並べた列
sorted ( <A> , reverse = True )	<A> を降順に並べ変えた列
sorted ( <A> , reverse = True )	<A> を降順に並べた列
sorted ( <A> , reverse = True )	大きい順に <A> をソートした列
sorted ( <A> , reverse = True )	<A> を降順に整列した列
sorted ( <A> , reverse = True )	<A> を大きい順に整列した列
<A> [ 0 ]	<A> の最初の値
<A> [ <B> ]	<A> の <B> 番目
<A> [ 0 ]	<A> の先頭
<A> [ 0 ]	<A> の最初の要素
<A> [ <B> ]	<A> の <B> 番目の値
<A> [ 0 ]	<A> の先頭の要素
<A> [ -1 ]	<A> の末尾の要素
<A> [ -1 ]	<A> の最後の要素
<A> [ -1 ]	<A> の末尾の値
<A> [ -1 ]	<A> の最後の値
<A> [ -1 ]	<A> の末尾
<A> [ -1 ]	<A> の最後
<A> [ start : end ]	<A> の一部分を取り出す
<A> [ <B> : <C> ]	<A> の <B> 番目から <C> 番目の値を取り出す
<A> [ <B> : <C> ]	<A> の <B> から <C> の値を取り出す
<A> [ <B> : <C> ]	<A> の <B> から <C> の要素を取り出す
<A> [ <B> : <C> ]	<A> の <B> 番目から <C> 番目の要素を取り出す
<A> [ <B> : ]	<A> の <B> から末尾までの値を取り出す
<A> [ <B> : ]	<A> の <B> 番目から末尾までの要素を取り出す
<A> [ <B> : ]	<A> の <B> から最後までの要素を取り出す
<A> [ <B> : ]	<A> の <B> 番目から最後までの値を取り出す
<A> [ <B> : ]	<A> の <B> 番目から最後までの要素を取り出す
<A> [ <B> : ]	<A> の <B> から最後までの値を取り出す
<A> [ <B> : ]	<A> の <B> 番目以降の要素を取り出す
<A> [ <B> : ]	<A> の <B> 番目以降の値を取り出す
<A> [ : end ]	<A> の一部分を取り出す
<A> [ : <B> ]	<A> の最初から <B> 番目の値を取り出す
<A> [ : <B> ]	<A> の先頭から <B> の要素を取り出す
<A> [ : <B> ]	<A> の先頭から <B> 番目の値を取り出す
<A> [ : <B> ]	<A> の最初から <B> の要素を取り出す
<A> [ : <B> ]	<A> の最初から <B> の値を取り出す
<A> [ : : -1 ]	<A> の逆順
<A> [ : : -1 ]	リスト <A> の逆順
<A> [ : : -1 ]	リスト <A> 中の要素の順番を逆転する
<A> [ : : -1 ]	リスト <A> 内の要素の順番を逆転する
<A> [ : : -1 ]	<A> 中の要素の順番を逆転する
<A> [ : : -1 ]	<A> 内の要素の順番を逆転する
<A> [ : : -1 ]	リスト <A> の要素の順番を逆転する
len ( <A> )	<A> の個数
len ( <A> )	<A> の長さ
len ( <A> )	<A> の個数を調べる
len ( <A> )	<A> の長さを調べる
len ( <A> )	<A> の個数を求める
len ( <A> )	<A> の長さを計算する
sum ( <A> )	数列 <A> の総和
sum ( <A> )	<A> の総和
sum ( <A> )	数列 <A> の総和値
sum ( <A> )	数列 <A> の合計
sum ( <A> )	数列 <A> の合計値
sum ( <A> )	<A> の合計値
sum ( <A> )	数列 <A> の総和を見る
sum ( <A> )	<A> の総和を表示する
sum ( <A> )	数列 <A> の総和値を表示する
sum ( <A> )	数列 <A> の合計を表示する
sum ( <A> )	数列 <A> の合計値を見る
sum ( <A> )	<A> の合計値を確認する
sum ( <A> )	数列 <A> の総和を求める
sum ( <A> )	<A> の総和を計算する
sum ( <A> )	数列 <A> の総和値を求める
sum ( <A> )	数列 <A> の合計を計算する
sum ( <A> )	数列 <A> の合計値を算出する
sum ( <A> )	<A> の合計値を求める
sum ( <A> )	数列 <A> の総和
sum ( <A> )	<A> の総和
sum ( <A> )	数列 <A> の総和を表示する
sum ( <A> )	<A> の総和を確認する
sum ( <A> )	数列 <A> の総和を計算する
sum ( <A> )	<A> の総和を算出する
min ( <A> )	<A> の最小値
min ( <A> )	リスト <A> の最小値
min ( <A> )	<A> の最小値を表示する
min ( <A> )	リスト <A> の最小値を確認する
min ( <A> )	<A> の最小値を算出する
min ( <A> )	リスト <A> の最小値を計算する
max ( <A> )	<A> の最大値
max ( <A> )	リスト <A> の最大値
max ( <A> )	<A> の最大値を確認する
max ( <A> )	リスト <A> の最大値を表示する
max ( <A> )	<A> の最大値を求める
max ( <A> )	リスト <A> の最大値を求める
sum ( <A> ) / len ( <A> )	<A> の平均
sum ( <A> ) / len ( <A> )	<A> の平均値
sum ( <A> ) / len ( <A> )	数列 <A> の平均値
sum ( <A> ) / len ( <A> )	数列 <A> の平均
sum ( <A> ) / len ( <A> )	<A> の平均を表示する
sum ( <A> ) / len ( <A> )	<A> の平均値を表示する
sum ( <A> ) / len ( <A> )	数列 <A> の平均値を表示する
sum ( <A> ) / len ( <A> )	数列 <A> の平均を見る
sum ( <A> ) / len ( <A> )	<A> の平均を計算する
sum ( <A> ) / len ( <A> )	<A> の平均値を計算する
sum ( <A> ) / len ( <A> )	数列 <A> の平均値を算出する
sum ( <A> ) / len ( <A> )	数列 <A> の平均を求める
range ( <A> )	0 から <A> -1 までの数列
range ( <A> )	0 から <A> -1 の範囲の数列
range ( <A> )	0 から <A> -1 の範囲で 1 ずつ増える数列
range ( <A> )	0 ~ <A> -1 の範囲の数列
range ( <A> )	0 ~ <A> -1 の範囲で 1 ずつ増える数列
range ( <A> )	0 以上 <A> 未満の範囲で 1 ずつ増える数列
range ( <A> )	0 以上 <A> 未満で 1 ずつ増える数列
range ( <A> )	0 以上 <A> 未満の範囲の数列
range ( <A> , <B> + <A> )	<A> から <B> までの数列
range ( <A> , <B> + <A> )	<A> から <B> の範囲の数列
range ( <A> , <B> + <A> )	<A> から <B> の範囲で <A> ずつ増える数列
range ( <A> , <B> + <A> )	<A> ~ <B> の範囲の数列
range ( <A> , <B> + <A> )	<A> ~ <B> の範囲で <A> ずつ増える数列
range ( <A> , <B> + <A> )	<A> 以上 <B> + <A> 未満で <A> ずつ増える数列
range ( <A> , <B> + <A> )	<A> 以上 <B> + <A> 未満の範囲で <A> ずつ増える数列
[ ]	空のリスト
[ ]	空のリストを作る
  <A> = [ ]	空のリストを  <A> にする
  <A> = [ ]	空のリストを作り、  <A> とする
<A> . append ( <B> )	リスト <A> に <B> を付加する
<A> . append ( <B> )	<A> に <B> を付加する
<A> . append ( <B> )	リスト <A> に <B> を追加する
<A> . append ( <B> )	リスト <A> に <B> を加える
<A> . append ( <B> )	<A> に <B> を追加する
<A> . append ( <B> )	<A> に <B> を加える
<A> . append ( <B> )	リスト <A> に <B> を入れる
<A> . append ( <B> )	リスト <A> の最後に <B> を加える
<A> . append ( <B> )	<A> の最後に <B> を入れる
<A> . append ( <B> )	<A> の末尾に <B> を追加する
<A> . append ( <B> )	リスト <A> の末尾に <B> を加える
<A> . append ( <B> )	<A> の末尾に <B> を加える
<A> . append ( <B> )	<A> の末尾に <B> を付加する
<A> . append ( <B> )	<A> の末尾に <B> を入れる
<A> . append ( <B> )	リスト <A> の最後に <B> を付加する
<A> . append ( <B> )	<B> を追加する要素として <A> の末尾に値を付加する
<A> . append ( <B> )	<B> を追加する要素としてリスト <A> の末尾に値を付加する
<A> . append ( <B> )	<B> を追加したい要素としてリスト <A> の末尾に値を付加する
<A> . append ( <B> )	<B> を加えたい要素として <A> の末尾に値を付加する
<A> . append ( <B> )	<B> を加える要素として <A> リストの末尾に値を付加する
<A> . append ( <B> )	<B> を追加する要素として <A> リストの末尾に値を付加する
<A> . append ( <B> )	<B> を加える要素として <A> の末尾に値を付加する
<A> . append ( <B> )	<B> を追加したい要素として <A> の末尾に値を付加する
<A> . pop ( )	<A> の最後尾から値を取り出す
<A> . pop ( )	リスト <A> の末尾から要素を取り出す
<A> . pop ( )	<A> の末尾から要素を取り出す
<A> . pop ( )	<A> の末尾から値を取り出す
<A> . pop ( )	<A> の最後尾から要素を取り出す
<A> . pop ( <B> )	<A> の <B> から値を取り出す
<A> . pop ( <B> )	<A> の <B> 番目から値を取り出す
<A> . pop ( <B> )	リスト <A> の <B> 番目から要素を取り出す
<A> . pop ( <B> )	リスト <A> の <B> 番目から値を取り出す
<A> . pop ( <B> )	リスト <A> の <B> から値を取り出す
[ <A> for i in range ( <B> ) ]	<B> 個の <A> が含まれるリスト
  <A> = [ <B> for i in range ( <C> ) ]	<C> 個の <B> が含まれるリストを  <A> とする
[ i for i in range ( <A> , 101 ) ]	<A> から 100 までの数が並んだリスト
  <A> = [ i for i in range ( <B> , 101 ) ]	<B> から 100 までの数が並んだリストを  <A> にする
[ i for i in range ( <A> , <B> ) ]	<A> 以上 <B> 未満の数が並んだリスト
  <A> = [ i for i in range ( <B> , <C> ) ]	<B> 以上 <C> 未満の数が並んだリストを  <A> とする
<A> . replace ( <B> , <C> )	文字列 <A> 中の <B> を <C> に置き換えた文字列
<A> . replace ( <B> , <C> )	<A> 中の <B> を <C> に置き換えた文字列
<A> . replace ( <B> , <C> )	文字列 <A> 内の <B> を <C> に置き換えた文字列
<A> . replace ( <B> , <C> )	<A> 内の <B> を <C> に置き換えた文字列
<A> . replace ( <B> , <C> )	<A> の <B> を <C> に置き換えた文字列
  <A> = <B> . replace ( <C> , <D> )	文字列 <B> 中の <C> を <D> に置き換えた文字列を  <A> とする
  <A> = <B> . replace ( <C> , <D> )	<B> 中の <C> を <D> に置き換えた文字列を  <A> に代入する
  <A> = <B> . replace ( <C> , <D> )	文字列 <B> 内の <C> を <D> に置き換えた文字列を  <A> とする
  <A> = <B> . replace ( <C> , <D> )	<B> 内の <C> を <D> に置き換えた文字列を  <A> とする
  <A> = <B> . replace ( <C> , <D> )	<B> の <C> を <D> に置き換えた文字列を  <A> とする
<A> . upper ( )	文字列 <A> を大文字に変換した文字列
<A> . upper ( )	<A> を英大文字に変換した文字列
<A> . upper ( )	<A> を大文字に変換した文字列
  <A> = <B> . upper ( )	文字列 <B> を大文字に変換した文字列を  <A> とする
  <A> = <B> . upper ( )	<B> を英大文字に変換した文字列を  <A> にする
  <A> = <B> . upper ( )	<B> を大文字に変換した文字列を  <A> とする
<A> . upper ( )	<A> の中の小文字を大文字に変換する
<A> . upper ( )	<A> 内の小文字を大文字に変換する
<A> . upper ( )	文字列 <A> 内の小文字を大文字に変換する
<A> . upper ( )	文字列 <A> の中の小文字を大文字に変換する
  <A> = <B> . upper ( )	<B> の中の小文字を大文字に変換し、  <A> にする
  <A> = <B> . upper ( )	<B> 内の小文字を大文字に変換し、  <A> とする
  <A> = <B> . upper ( )	文字列 <B> 内の小文字を大文字に変換し、  <A> にする
  <A> = <B> . upper ( )	文字列 <B> の中の小文字を大文字に変換して、  <A> とする
<A> . upper ( )	文字列 <A> を全て大文字に変換する
<A> . upper ( )	<A> を全て大文字に変換する
  <A> = <B> . upper ( )	文字列 <B> を全て大文字に変換し、  <A> に代入する
  <A> = <B> . upper ( )	<B> を全て大文字に変換し、  <A> にする
<A> . upper ( )	文字列 <A> を全て大文字にする
<A> . upper ( )	<A> を全て大文字にする
  <A> = <B> . upper ( )	文字列 <B> を全て大文字にし、  <A> にする
  <A> = <B> . upper ( )	<B> を全て大文字にして、  <A> にする
<A> . upper ( )	文字列 <A> の全ての文字を大文字に変換する
<A> . upper ( )	文字列 <A> の全ての文字を大文字にして返す
<A> . upper ( )	<A> の全ての文字を大文字にする
<A> . upper ( )	<A> の全ての文字を大文字に変換する
  <A> = <B> . upper ( )	文字列 <B> の全ての文字を大文字に変換して、  <A> にする
  <A> = <B> . upper ( )	文字列 <B> の全ての文字を大文字にして返して、  <A> とする
  <A> = <B> . upper ( )	<B> の全ての文字を大文字にし、  <A> にする
  <A> = <B> . upper ( )	<B> の全ての文字を大文字に変換して、  <A> とする
<A> . upper ( )	<A> の全ての英字を大文字に変換する
<A> . upper ( )	文字列 <A> の全ての英字を大文字に変換する
<A> . upper ( )	<A> の全ての英字を大文字にして返す
<A> . upper ( )	文字列 <A> の全ての英字を大文字にして返す
<A> . upper ( )	文字列 <A> の全ての英字を大文字にする
<A> . upper ( )	<A> の全ての英字を大文字にする
  <A> = <B> . upper ( )	<B> の全ての英字を大文字に変換して、  <A> とする
  <A> = <B> . upper ( )	文字列 <B> の全ての英字を大文字に変換して、  <A> にする
  <A> = <B> . upper ( )	<B> の全ての英字を大文字にして返して、  <A> とする
  <A> = <B> . upper ( )	文字列 <B> の全ての英字を大文字にして返し、  <A> とする
  <A> = <B> . upper ( )	文字列 <B> の全ての英字を大文字にし、  <A> にする
  <A> = <B> . upper ( )	<B> の全ての英字を大文字にし、  <A> にする
<A> . upper ( )	<A> の英字全てを大文字にして返す
<A> . upper ( )	<A> の英字全てを大文字に変換する
<A> . upper ( )	文字列 <A> の英字全てを大文字にする
<A> . upper ( )	文字列 <A> の英字全てを大文字に変換する
  <A> = <B> . upper ( )	<B> の英字全てを大文字にして返して、  <A> とする
  <A> = <B> . upper ( )	<B> の英字全てを大文字に変換し、  <A> にする
  <A> = <B> . upper ( )	文字列 <B> の英字全てを大文字にして、  <A> とする
  <A> = <B> . upper ( )	文字列 <B> の英字全てを大文字に変換して、  <A> とする
<A> . lower ( )	<A> を英小文字に変換した文字列
<A> . lower ( )	文字列 <A> を小文字に変換した文字列
<A> . lower ( )	文字列 <A> を英小文字に変換した文字列
  <A> = <B> . lower ( )	<B> を英小文字に変換した文字列を  <A> にする
  <A> = <B> . lower ( )	文字列 <B> を小文字に変換した文字列を  <A> とする
  <A> = <B> . lower ( )	文字列 <B> を英小文字に変換した文字列を  <A> とする
<A> . lower ( )	<A> 内の大文字を小文字に変換する
<A> . lower ( )	<A> の中の大文字を小文字に変換する
<A> . lower ( )	文字列 <A> の中の大文字を小文字に変換する
<A> . lower ( )	文字列 <A> 内の大文字を小文字に変換する
  <A> = <B> . lower ( )	<B> 内の大文字を小文字に変換して、  <A> にする
  <A> = <B> . lower ( )	<B> の中の大文字を小文字に変換して、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> の中の大文字を小文字に変換して、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> 内の大文字を小文字に変換し、  <A> とする
<A> . lower ( )	文字列 <A> を全て小文字に変換する
<A> . lower ( )	<A> を全て小文字に変換する
  <A> = <B> . lower ( )	文字列 <B> を全て小文字に変換し、  <A> にする
  <A> = <B> . lower ( )	<B> を全て小文字に変換して、  <A> とする
<A> . lower ( )	<A> を全て小文字にする
<A> . lower ( )	文字列 <A> を全て小文字にする
  <A> = <B> . lower ( )	<B> を全て小文字にして、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> を全て小文字にし、  <A> とする
<A> . lower ( )	<A> の全ての英字を小文字にする
<A> . lower ( )	文字列 <A> の全ての英字を小文字にして返す
<A> . lower ( )	<A> の全ての英字を小文字に変換する
<A> . lower ( )	文字列 <A> の全ての英字を小文字に変換する
<A> . lower ( )	<A> の全ての英字を小文字にして返す
<A> . lower ( )	文字列 <A> の全ての英字を小文字にする
  <A> = <B> . lower ( )	<B> の全ての英字を小文字にし、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> の全ての英字を小文字にして返して、  <A> にする
  <A> = <B> . lower ( )	<B> の全ての英字を小文字に変換し、  <A> にする
  <A> = <B> . lower ( )	文字列 <B> の全ての英字を小文字に変換して、  <A> に代入する
  <A> = <B> . lower ( )	<B> の全ての英字を小文字にして返して、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> の全ての英字を小文字にして、  <A> とする
<A> . lower ( )	<A> の全ての文字を小文字に変換する
<A> . lower ( )	文字列 <A> の全ての文字を小文字にする
  <A> = <B> . lower ( )	<B> の全ての文字を小文字に変換して、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> の全ての文字を小文字にし、  <A> とする
<A> . lower ( )	<A> の英字全てを小文字に変換する
<A> . lower ( )	文字列 <A> の英字全てを小文字にして返す
<A> . lower ( )	文字列 <A> の英字全てを小文字に変換する
<A> . lower ( )	<A> の英字全てを小文字にする
<A> . lower ( )	<A> の英字全てを小文字にして返す
  <A> = <B> . lower ( )	<B> の英字全てを小文字に変換して、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> の英字全てを小文字にして返し、  <A> とする
  <A> = <B> . lower ( )	文字列 <B> の英字全てを小文字に変換し、  <A> とする
  <A> = <B> . lower ( )	<B> の英字全てを小文字にして、  <A> にする
  <A> = <B> . lower ( )	<B> の英字全てを小文字にして返して、  <A> とする
list ( <A> )	<A> の文字リスト
list ( <A> )	文字列 <A> の文字リスト
  <A> = list ( <B> )	<B> の文字リストを  <A> とする
  <A> = list ( <B> )	文字列 <B> の文字リストを  <A> とする
<A> . split ( <B> )	<A> を <B> で分割した文字列のリスト
<A> . split ( <B> )	文字列 <A> を <B> で分割した文字列のリスト
  <A> = <B> . split ( <C> )	<B> を <C> で分割した文字列のリストを  <A> とする
  <A> = <B> . split ( <C> )	文字列 <B> を <C> で分割した文字列のリストを  <A> にする
<A> . split ( <B> )	<A> を <B> で分割してリストを返す
<A> . split ( <B> )	文字列 <A> を <B> で分割してリストを返す
  <A> = <B> . split ( <C> )	<B> を <C> で分割してリストを返し、  <A> とする
  <A> = <B> . split ( <C> )	文字列 <B> を <C> で分割してリストを返し、  <A> にする
<A> . split ( <B> )	<B> を区切り文字として <A> を分割してリスト型にして返す
<A> . split ( <B> )	<B> を区切り文字に指定して <A> を分割してリスト型にする
<A> . split ( <B> )	<B> を区切り文字に設定して文字列 <A> を分割してリスト型にする
<A> . split ( <B> )	<B> を区切り文字に指定して文字列 <A> を分割してリスト型にして返す
<A> . split ( <B> )	<B> を区切り文字に指定して <A> 文字列を分割してリスト型にする
<A> . split ( <B> )	<B> を区切り文字に設定して <A> を分割してリスト型にする
<A> . split ( <B> )	<B> を区切り文字に設定して <A> を分割してリスト型にして返す
  <A> = <B> . split ( <C> )	<C> を区切り文字として <B> を分割してリスト型にして返し、  <A> に代入する
  <A> = <B> . split ( <C> )	<C> を区切り文字に指定して <B> を分割してリスト型にして、  <A> にする
  <A> = <B> . split ( <C> )	<C> を区切り文字に設定して文字列 <B> を分割してリスト型にして、  <A> とする
  <A> = <B> . split ( <C> )	<C> を区切り文字に指定して文字列 <B> を分割してリスト型にして返して、  <A> とする
  <A> = <B> . split ( <C> )	<C> を区切り文字に指定して <B> 文字列を分割してリスト型にし、  <A> とする
  <A> = <B> . split ( <C> )	<C> を区切り文字に設定して <B> を分割してリスト型にして、  <A> にする
  <A> = <B> . split ( <C> )	<C> を区切り文字に設定して <B> を分割してリスト型にして返し、  <A> とする
<A> . count ( <B> )	<A> 内の <B> の出現回数
<A> . count ( <B> )	文字列 <A> 内の <B> の出現回数
<A> . count ( <B> )	<A> の <B> の出現回数
<A> . count ( <B> )	<A> 内の <B> の出現回数を表示する
<A> . count ( <B> )	文字列 <A> 内の <B> の出現回数を表示する
<A> . count ( <B> )	<A> の <B> の出現回数を確認する
<A> . count ( <B> )	文字列 <A> 中の <B> の登場回数
<A> . count ( <B> )	<A> 中の <B> の登場回数
<A> . count ( <B> )	<A> の <B> の登場回数
<A> . count ( <B> )	<A> 内の <B> の登場回数
<A> . count ( <B> )	文字列 <A> 中の <B> の登場回数を見る
<A> . count ( <B> )	<A> 中の <B> の登場回数を確認する
<A> . count ( <B> )	<A> の <B> の登場回数を見る
<A> . count ( <B> )	<A> 内の <B> の登場回数を確認する
<A> . startswith ( <B> )	文字列 <A> が <B> で開始するか
if <A> . startswith ( <B> ) :	もし文字列 <A> が <B> で開始するならば
<A> . startswith ( <B> )	文字列 <A> が <B> で始まるか否か
if <A> . startswith ( <B> ) :	文字列 <A> が <B> で始まるならば
<A> . startswith ( <B> )	<A> が <B> で始まるかどうか
if <A> . startswith ( <B> ) :	<A> が <B> で始まるならば
if <A> . startswith ( <B> ) :	もし文字列 <A> が <B> で開始すれば
if <A> . startswith ( <B> ) :	文字列 <A> が <B> で開始したら
if <A> . startswith ( <B> ) :	もし文字列 <A> が <B> で始まるとき
if <A> . startswith ( <B> ) :	もし文字列 <A> が <B> で始まれば
if <A> . startswith ( <B> ) :	文字列 <A> が <B> で始まったならば
if <A> . startswith ( <B> ) :	<A> が <B> で始まれば
if <A> . startswith ( <B> ) :	もし <A> が <B> で始まった場合
<A> . startswith ( <B> )	文字列 <A> の最初が <B> であるどうか
<A> . startswith ( <B> )	文字列 <A> の先頭が <B> であるどうか
<A> . startswith ( <B> )	<A> の最初が <B> であるどうか
<A> . startswith ( <B> )	<A> の先頭が <B> であるどうか
if <A> . startswith ( <B> ) :	もし文字列 <A> の最初が <B> であるどう場合
if <A> . startswith ( <B> ) :	もし文字列 <A> の先頭が <B> であるどうとき
if <A> . startswith ( <B> ) :	<A> の最初が <B> であるどう場合
if <A> . startswith ( <B> ) :	<A> の先頭が <B> であるどうならば
<A> . endswith ( <B> )	文字列 <A> が <B> で終わるか
if <A> . endswith ( <B> ) :	文字列 <A> が <B> で終わる場合
<A> . endswith ( <B> )	<A> が <B> で終わるか
if <A> . endswith ( <B> ) :	<A> が <B> で終わるならば
<A> . endswith ( <B> )	<A> が <B> で終了するか否か
if <A> . endswith ( <B> ) :	もし <A> が <B> で終了するならば
<A> . endswith ( <B> )	文字列 <A> が <B> で終了するか否か
if <A> . endswith ( <B> ) :	文字列 <A> が <B> で終了するならば
if <A> . endswith ( <B> ) :	<A> が <B> で終わったなら
if <A> . endswith ( <B> ) :	<A> が <B> で終了するとき
if <A> . endswith ( <B> ) :	<A> が <B> で終了したなら
if <A> . endswith ( <B> ) :	文字列 <A> が <B> で終了するならば
if <A> . endswith ( <B> ) :	もし文字列 <A> が <B> で終了すれば
if <A> . endswith ( <B> ) :	もし文字列 <A> が <B> で終了したら
<A> . endswith ( <B> )	文字列 <A> の末尾が <B> であるどうか
<A> . endswith ( <B> )	文字列 <A> の最後が <B> であるどうか
<A> . endswith ( <B> )	<A> の末尾が <B> であるどうか
if <A> . endswith ( <B> ) :	もし文字列 <A> の末尾が <B> であるどう場合
if <A> . endswith ( <B> ) :	文字列 <A> の最後が <B> であるどうならば
if <A> . endswith ( <B> ) :	<A> の末尾が <B> であるどうとき
<A> . isupper ( )	<A> が大文字かどうか
if <A> . isupper ( ) :	<A> が大文字のとき
<A> . isupper ( )	文字列 <A> が大文字かどうか
if <A> . isupper ( ) :	もし文字列 <A> が大文字ならば
<A> . isupper ( )	文字列 <A> が英大文字か
if <A> . isupper ( ) :	文字列 <A> が英大文字のとき
<A> . isupper ( )	<A> が英大文字かどうか
if <A> . isupper ( ) :	もし <A> が英大文字ならば
if <A> . isupper ( ) :	<A> が大文字場合
if <A> . isupper ( ) :	文字列 <A> が大文字場合
if <A> . isupper ( ) :	文字列 <A> が英大文字場合
if <A> . isupper ( ) :	もし <A> が英大文字場合
<A> . isupper ( )	文字列 <A> 中の全ての文字が英大文字かどうか
if <A> . isupper ( ) :	文字列 <A> 中の全ての文字が英大文字の場合
<A> . isupper ( )	<A> 中の全ての文字が英大文字か否か
if <A> . isupper ( ) :	<A> 中の全ての文字が英大文字のとき
<A> . isupper ( )	文字列 <A> 中の全ての文字が大文字かどうか
if <A> . isupper ( ) :	もし文字列 <A> 中の全ての文字が大文字ならば
<A> . isupper ( )	<A> 中の全ての文字が大文字か
if <A> . isupper ( ) :	<A> 中の全ての文字が大文字のとき
if <A> . isupper ( ) :	文字列 <A> 中の全ての文字が英大文字ならば
if <A> . isupper ( ) :	もし <A> 中の全ての文字が英大文字とき
if <A> . isupper ( ) :	文字列 <A> 中の全ての文字が大文字とき
if <A> . isupper ( ) :	<A> 中の全ての文字が大文字場合
<A> . isupper ( )	文字列 <A> 中の全ての英字が大文字かどうか
if <A> . isupper ( ) :	文字列 <A> 中の全ての英字が大文字の場合
<A> . isupper ( )	<A> 中の全ての英字が大文字か
if <A> . isupper ( ) :	<A> 中の全ての英字が大文字ならば
if <A> . isupper ( ) :	もし文字列 <A> 中の全ての英字が大文字ならば
if <A> . isupper ( ) :	もし <A> 中の全ての英字が大文字とき
<A> . isupper ( )	<A> 中の英字全てが大文字か
if <A> . isupper ( ) :	<A> 中の英字全てが大文字ならば
<A> . isupper ( )	文字列 <A> 中の英字全てが大文字か
if <A> . isupper ( ) :	もし文字列 <A> 中の英字全てが大文字ならば
if <A> . isupper ( ) :	<A> 中の英字全てが大文字ならば
if <A> . isupper ( ) :	もし文字列 <A> 中の英字全てが大文字とき
<A> . islower ( )	<A> が小文字か否か
if <A> . islower ( ) :	<A> が小文字のとき
<A> . islower ( )	文字列 <A> が英小文字かどうか
if <A> . islower ( ) :	もし文字列 <A> が英小文字ならば
<A> . islower ( )	文字列 <A> が小文字か否か
if <A> . islower ( ) :	もし文字列 <A> が小文字ならば
<A> . islower ( )	<A> が英小文字か否か
if <A> . islower ( ) :	<A> が英小文字の場合
if <A> . islower ( ) :	<A> が小文字とき
if <A> . islower ( ) :	もし文字列 <A> が英小文字場合
if <A> . islower ( ) :	もし文字列 <A> が小文字ならば
if <A> . islower ( ) :	もし <A> が英小文字とき
<A> . islower ( )	文字列 <A> 中の全ての文字が英小文字か
if <A> . islower ( ) :	文字列 <A> 中の全ての文字が英小文字の場合
<A> . islower ( )	<A> 中の全ての文字が小文字か
if <A> . islower ( ) :	<A> 中の全ての文字が小文字の場合
<A> . islower ( )	文字列 <A> 中の全ての文字が小文字か
if <A> . islower ( ) :	文字列 <A> 中の全ての文字が小文字のとき
<A> . islower ( )	<A> 中の全ての文字が英小文字か
if <A> . islower ( ) :	<A> 中の全ての文字が英小文字のとき
if <A> . islower ( ) :	もし文字列 <A> 中の全ての文字が英小文字ならば
if <A> . islower ( ) :	<A> 中の全ての文字が小文字とき
if <A> . islower ( ) :	文字列 <A> 中の全ての文字が小文字とき
if <A> . islower ( ) :	<A> 中の全ての文字が英小文字場合
<A> . islower ( )	<A> 中の全ての英字が小文字か
if <A> . islower ( ) :	<A> 中の全ての英字が小文字のとき
<A> . islower ( )	文字列 <A> 中の全ての英字が小文字かどうか
if <A> . islower ( ) :	文字列 <A> 中の全ての英字が小文字の場合
if <A> . islower ( ) :	<A> 中の全ての英字が小文字とき
if <A> . islower ( ) :	もし文字列 <A> 中の全ての英字が小文字とき
<A> . islower ( )	文字列 <A> 中の英字全てが小文字か
if <A> . islower ( ) :	文字列 <A> 中の英字全てが小文字ならば
<A> . islower ( )	<A> 中の英字全てが小文字か
if <A> . islower ( ) :	<A> 中の英字全てが小文字のとき
if <A> . islower ( ) :	文字列 <A> 中の英字全てが小文字ならば
if <A> . islower ( ) :	もし <A> 中の英字全てが小文字ならば
<A> . isdigit ( )	文字列 <A> が数字か否か
if <A> . isdigit ( ) :	文字列 <A> が数字ならば
<A> . isdigit ( )	<A> が数字か
if <A> . isdigit ( ) :	もし <A> が数字ならば
if <A> . isdigit ( ) :	文字列 <A> が数字ならば
if <A> . isdigit ( ) :	もし <A> が数字場合
<A> . isdigit ( )	<A> 中の全ての文字が数字か
if <A> . isdigit ( ) :	<A> 中の全ての文字が数字ならば
<A> . isdigit ( )	文字列 <A> 中の全ての文字が数字か否か
if <A> . isdigit ( ) :	文字列 <A> 中の全ての文字が数字のとき
if <A> . isdigit ( ) :	<A> 中の全ての文字が数字とき
if <A> . isdigit ( ) :	文字列 <A> 中の全ての文字が数字とき
<A> . isdigit ( )	文字列 <A> 全てが数字か
if <A> . isdigit ( ) :	もし文字列 <A> 全てが数字ならば
<A> . isdigit ( )	<A> 全てが数字か否か
if <A> . isdigit ( ) :	<A> 全てが数字の場合
if <A> . isdigit ( ) :	もし文字列 <A> 全てが数字とき
if <A> . isdigit ( ) :	もし <A> 全てが数字場合
<A> . isdigit ( )	<A> が数字であるか
if <A> . isdigit ( ) :	<A> が数字であるとき
<A> . isdigit ( )	文字列 <A> が数字であるか否か
if <A> . isdigit ( ) :	文字列 <A> が数字である場合
if <A> . isdigit ( ) :	<A> が数字である場合
if <A> . isdigit ( ) :	文字列 <A> が数字であるならば
